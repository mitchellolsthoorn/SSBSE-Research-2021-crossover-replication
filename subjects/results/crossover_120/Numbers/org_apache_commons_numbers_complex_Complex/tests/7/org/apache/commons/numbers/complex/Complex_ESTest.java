/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:26:23 GMT 2021
 */

package org.apache.commons.numbers.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.numbers.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.hashCode();
      complex0.multiply(8.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.ofCartesian(2072.5021615595, 2072.5021615595);
      complex1.hashCode();
      Complex complex3 = Complex.ofCartesian((-1683.7189754841), (-2146.87435369));
      Complex complex4 = complex3.sqrt();
      complex4.isNaN();
      complex0.subtractFrom((-1683.7189754841));
      Complex complex5 = complex2.multiplyImaginary(0.9999996237120835);
      complex4.exp();
      complex1.exp();
      complex3.subtractImaginary((-2377.086));
      Complex.ofPolar(2072.5021615595, 72.97940615555137);
      complex5.isInfinite();
      Complex.ofPolar((-2900.861883107345), 0.9999996237120835);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-319.047));
      Complex complex1 = complex0.ZERO.subtractImaginary((-319.047));
      double double0 = 231.9412168666559;
      Complex complex2 = complex1.ZERO.add(231.9412168666559);
      complex1.divide(complex2);
      Complex complex3 = Complex.ofCartesian((-0.2808599920015419), 1.4142135623730951);
      Complex complex4 = complex0.ZERO.log10();
      complex1.isFinite();
      complex3.log10();
      Complex complex5 = complex0.ZERO.sqrt();
      complex0.ONE.acosh();
      complex5.ZERO.pow(complex0);
      Complex complex6 = complex4.sqrt();
      complex6.subtractFromImaginary(0.0);
      complex1.proj();
      // Undeclared exception!
      try { 
        Complex.parse("r;[*Gv~z'cm6b|Tu.K");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected start delimiter '(' for input \"r;[*Gv~z'cm6b|Tu.K\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = Complex.ofPolar(0.6471, 0.0);
      // Undeclared exception!
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(358.78474326620994, 358.78474326620994);
      Complex complex1 = Complex.ofCartesian(358.78474326620994, 358.78474326620994);
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.multiply(2345.3485357128);
      complex1.hashCode();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex3.add(complex0);
      Complex complex6 = complex4.multiply(complex0);
      complex5.conj();
      complex3.acosh();
      Complex.ofPolar(708.0, 0.7853981633974483);
      Complex complex7 = complex4.multiply(complex6);
      complex7.arg();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.divide(complex1);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.subtractFrom(1197);
      Complex complex4 = complex3.pow((double) 1197);
      complex4.sinh();
      complex2.ONE.nthRoot(1197);
      complex0.isInfinite();
      complex3.conj();
      Complex complex5 = Complex.ofPolar(1197, 1416.0);
      complex0.pow(2228.0);
      Complex complex6 = Complex.ONE;
      complex5.exp();
      Complex complex7 = complex6.conj();
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      // Undeclared exception!
      try { 
        complex0.ZERO.multiply((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(358.78474326620994, 358.78474326620994);
      complex0.ONE.divide(0.0);
      Complex complex1 = complex0.proj();
      Complex complex2 = complex0.asinh();
      complex2.isNaN();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex0.tan();
      complex3.multiply(2.2250738585072014E-308);
      Complex complex5 = Complex.ofCis((-194.629547225446));
      complex5.hashCode();
      Complex complex6 = complex4.cos();
      complex2.add(complex3);
      complex4.multiply(complex6);
      Complex complex7 = Complex.ofPolar(1033.29, 0.0);
      complex0.equals(complex7);
      complex3.conj();
      Complex complex8 = complex3.acosh();
      Complex.ofPolar((-0.9999999999999971), 292.303234471984);
      complex6.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.divide(complex1);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.subtractFrom(1197);
      Complex complex4 = complex3.pow((double) 1197);
      Complex complex5 = complex4.sinh();
      complex2.ONE.nthRoot(1197);
      complex0.isInfinite();
      Complex complex6 = complex3.pow(1416.0);
      complex3.nthRoot(1197);
      complex6.isInfinite();
      complex6.isNaN();
      complex1.log();
      Complex complex7 = complex2.addImaginary((-25.926513));
      Complex complex8 = complex4.sqrt();
      Complex complex9 = Complex.I;
      complex9.subtractFromImaginary(0.0);
      complex7.acosh();
      complex8.pow(8.988465674311579E307);
      complex8.isNaN();
      Complex complex10 = Complex.ofPolar(Double.NEGATIVE_INFINITY, 0.0);
      complex9.sinh();
      Complex complex11 = complex3.cosh();
      complex3.log10();
      complex7.multiplyImaginary(Double.NEGATIVE_INFINITY);
      complex11.add(complex5);
      complex10.subtractFrom(1461.8);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex1.negate();
      Complex complex4 = complex0.ZERO.sin();
      Complex complex5 = complex1.divide(complex0);
      complex3.sqrt();
      complex0.norm();
      complex3.abs();
      Complex complex6 = complex5.asinh();
      complex1.log10();
      complex4.nthRoot((-1));
      complex2.sqrt();
      complex6.getImaginary();
      complex6.divide(complex1);
      complex0.atanh();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(10.0, 1993.310459265);
      Complex complex1 = complex0.proj();
      complex0.I.hashCode();
      complex1.ONE.sqrt();
      Complex complex2 = complex0.subtractImaginary(16.0);
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex3.I.divide(10.0);
      complex2.pow(complex0);
      complex1.ZERO.divideImaginary(10.0);
      Complex complex5 = complex2.sinh();
      Complex complex6 = complex5.I.cos();
      complex0.negate();
      complex2.nthRoot(3180);
      Complex complex7 = complex3.multiply(complex2);
      complex5.toString();
      complex6.atanh();
      Complex.parse("(0.293526099295688,0.2876033583394739)");
      Complex complex8 = Complex.ofCartesian((-604.9115871123518), 1880.2);
      complex4.equals(complex8);
      complex2.isNaN();
      complex7.acosh();
      complex0.add(complex6);
      complex0.isFinite();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.proj();
      complex0.asinh();
      Complex complex2 = Complex.ofCartesian(0.0, 0.0);
      complex2.pow(1.7976931348623157E308);
      Complex complex3 = Complex.ofPolar(215.17888503885365, 215.17888503885365);
      Complex complex4 = complex3.add(complex0);
      complex4.ZERO.subtractFromImaginary(1.7976931348623157E308);
      complex1.atan();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.I.sinh();
      Complex complex4 = complex3.ZERO.exp();
      Complex.ofPolar(1.0, 1.0);
      Complex complex5 = complex4.I.multiply(complex2);
      complex5.ONE.multiply(complex0);
      complex0.norm();
      complex3.subtract(1.0);
      Complex complex6 = complex0.tanh();
      complex6.ONE.log();
      Complex complex7 = Complex.ofCis(1.0);
      Complex complex8 = complex2.I.exp();
      complex6.isFinite();
      complex2.multiply(complex3);
      complex6.toString();
      Complex.parse("(0.7615941559557649,0.0)");
      complex3.equals(complex7);
      complex1.isNaN();
      complex6.acosh();
      complex8.add(complex3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ofCis(3.8657822478866);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.divideImaginary(0.0);
      Complex.ofCis((-0.8414709848078965));
      Complex complex3 = complex0.addImaginary(2317.3);
      Complex complex4 = Complex.ZERO;
      complex2.tan();
      Complex.ofPolar(0.0, 3936.0);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex0.divide(complex5);
      complex0.multiply(complex5);
      complex0.norm();
      complex1.abs();
      Complex complex7 = complex5.asinh();
      Complex complex8 = complex2.add(complex7);
      Complex complex9 = complex4.log10();
      complex9.tan();
      complex6.nthRoot(44);
      complex1.sqrt();
      complex3.getImaginary();
      complex0.pow(complex8);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.tan();
      complex1.ZERO.addImaginary(1.0);
      Complex complex3 = complex1.I.sinh();
      Complex complex4 = complex3.ZERO.exp();
      Complex.ofPolar(1.0, 1.0);
      Complex complex5 = complex4.I.multiply(complex2);
      complex5.pow(1.0);
      Complex complex6 = complex1.pow(1.0);
      complex6.nthRoot((-829));
      Complex complex7 = Complex.I;
      complex4.isNaN();
      Complex complex8 = Complex.ZERO;
      complex3.isNaN();
      complex1.log();
      Complex complex9 = Complex.ofPolar(1.0130713260637119E-17, (-1.0));
      // Undeclared exception!
      try { 
        complex9.pow((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(1.0, 434.057896);
      Complex complex1 = Complex.ofCis(434.057896);
      Complex complex2 = complex0.I.sqrt();
      Complex complex3 = complex1.conj();
      complex2.ZERO.toString();
      Complex complex4 = complex2.ZERO.pow(1.0);
      complex1.isFinite();
      Complex complex5 = complex0.exp();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex5.I.conj();
      Complex complex8 = complex6.ONE.cosh();
      complex8.ONE.addImaginary(2596.7628175652);
      Complex complex9 = complex5.tanh();
      Complex complex10 = complex5.proj();
      complex10.add(1.0);
      Object object0 = new Object();
      complex9.equals(object0);
      complex4.multiply(1.7976931348623157E308);
      Complex complex11 = complex0.proj();
      Complex complex12 = complex5.I.sin();
      complex12.acosh();
      complex2.subtractFrom(49.441);
      Complex complex13 = complex7.atanh();
      Complex complex14 = complex13.pow(complex2);
      complex14.subtractFromImaginary(1.0);
      complex7.toString();
      complex3.divide(complex11);
      complex11.subtract(complex14);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ofPolar((-1925.346721651), 8.988465674311579E307);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex1.multiply((-194.629547225446));
      complex3.ONE.hashCode();
      complex1.I.cos();
      Complex complex4 = complex1.ZERO.add(complex2);
      complex4.multiply(complex3);
      complex0.equals((Object) null);
      complex1.conj();
      Complex complex5 = complex1.acosh();
      Complex.ofPolar(292.303234471984, 292.303234471984);
      complex2.multiply(complex5);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian((-2749.3370155), (-2749.3370155));
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = Complex.ofCartesian((-2749.3370155), 1739.6512330349);
      Complex complex3 = complex2.ZERO.subtract((-2749.3370155));
      Complex complex4 = complex3.ONE.pow(complex2);
      complex4.ONE.nthRoot((-1));
      Complex complex5 = complex2.multiplyImaginary((-2749.3370155));
      Complex complex6 = complex0.subtractFromImaginary(2.9833362924800827E-154);
      complex6.ZERO.isFinite();
      complex3.norm();
      Complex.ofPolar((-2442.07716), 1340.081);
      Complex complex7 = complex2.log();
      Complex complex8 = complex7.I.divide(complex1);
      Complex complex9 = complex0.subtract(complex4);
      Complex complex10 = complex0.cosh();
      complex9.ZERO.cosh();
      complex1.ONE.add(complex5);
      complex10.subtract(645.920209488168);
      complex10.isNaN();
      Complex complex11 = complex10.cos();
      complex0.addImaginary(1340.081);
      Complex complex12 = complex3.pow(complex9);
      complex8.sinh();
      complex9.cosh();
      Complex complex13 = complex11.add(0.7862365219650006);
      Complex complex14 = complex13.ONE.multiply(complex12);
      complex14.ZERO.tanh();
      complex11.norm();
      complex4.isNaN();
      complex13.sqrt();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(358.78474326620994, 358.78474326620994);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.log();
      complex2.divideImaginary(490.4923942182039);
      Complex.ofCis((-0.19895540763833425));
      complex2.addImaginary((-0.19895540763833425));
      complex0.negate();
      Complex.ofPolar((-0.8414709848078965), (-0.8414709848078965));
      Complex complex3 = null;
      // Undeclared exception!
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.subtract(1.7976931348623157E308);
      Complex complex1 = complex0.ONE.add(1.7976931348623157E308);
      Complex complex2 = complex0.pow(10.0);
      Complex complex3 = complex2.subtractFromImaginary(1.7976931348623157E308);
      complex3.ZERO.sinh();
      complex1.ONE.sqrt();
      complex2.toString();
      Complex complex4 = complex1.atan();
      Complex complex5 = Complex.ofCartesian(1.7976931348623157E308, 1.5707963267948966);
      Complex complex6 = Complex.ofCartesian(1416.0, 1.7976931348623157E308);
      Complex complex7 = complex6.I.add(1416.0);
      complex6.ONE.subtract(1.7976931348623157E308);
      complex0.ZERO.sin();
      complex5.I.multiply(complex6);
      complex3.ONE.add(complex4);
      Complex complex8 = complex0.negate();
      complex7.subtractImaginary(Double.NEGATIVE_INFINITY);
      Complex complex9 = complex8.log10();
      complex9.I.sin();
      Complex complex10 = Complex.ofCis(10.0);
      complex7.subtract(complex10);
      Complex complex11 = complex8.tan();
      complex11.multiply(complex7);
      Complex complex12 = complex3.sqrt();
      complex5.sqrt();
      Complex complex13 = complex9.negate();
      complex13.ZERO.addImaginary((-1007.2913054214));
      complex1.toString();
      complex12.tanh();
      complex5.add(complex1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(358.78474326620994, 358.78474326620994);
      Complex complex1 = complex0.ONE.divide(0.0);
      complex0.proj();
      Complex complex2 = complex0.asinh();
      Complex complex3 = complex2.multiply(297.913700898663);
      complex1.acosh();
      Complex complex4 = Complex.ofCis(358.78474326620994);
      complex4.imag();
      complex0.subtractFromImaginary(0.5997436877609813);
      Complex complex5 = complex3.proj();
      Complex complex6 = complex0.divide(complex1);
      Complex.ofPolar(0.0, 0.0);
      complex4.subtract(complex6);
      complex1.sqrt();
      complex5.imag();
      Complex.ofCartesian(0.5997436877609813, 191.6118043259081);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian((-49.63180411322607), 3808.2348891);
      Complex complex1 = Complex.ofCis(3808.2348891);
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.atanh();
      complex1.subtract(complex0);
      complex4.divide(3808.2348891);
      Complex complex5 = complex3.log();
      Complex complex6 = complex5.divide(3808.2348891);
      complex0.pow(complex1);
      Complex complex7 = complex4.divideImaginary((-49.63180411322607));
      complex0.sinh();
      Complex complex8 = complex3.cos();
      complex3.negate();
      complex2.nthRoot(3180);
      complex4.divide((-49.63180411322607));
      Complex complex9 = complex2.tan();
      Complex.ofPolar((-2978.5023101), (-2978.5023101));
      complex1.tan();
      complex8.atanh();
      complex8.sqrt();
      complex6.divideImaginary(975.05237517003);
      complex1.nthRoot(3180);
      complex7.acosh();
      Complex.ofPolar(1346.21459544202, 1346.21459544202);
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ofPolar(0.0, 0.0);
      Complex complex2 = complex0.proj();
      complex0.asinh();
      Complex complex3 = Complex.ofCartesian(358.78474326620994, 2.0);
      complex3.pow(1.7976931348623157E308);
      Complex complex4 = Complex.ofPolar(215.17888503885365, 215.17888503885365);
      Complex complex5 = complex4.add(complex1);
      complex5.ZERO.subtractFromImaginary(1.7976931348623157E308);
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(358.78474326620994, 358.78474326620994);
      Complex complex1 = complex0.ONE.divide(0.0);
      Complex complex2 = complex0.proj();
      complex2.divideImaginary(761.726150358);
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.cos();
      complex4.negate();
      complex4.nthRoot(2350);
      complex1.divide(596.9);
      Complex complex5 = Complex.ofPolar(761.726150358, 0.0);
      complex1.tan();
      complex5.atanh();
      complex0.sqrt();
      complex5.divideImaginary((-1.0));
      complex3.nthRoot(2350);
      complex2.acosh();
      Complex.ofPolar(3180, 761.726150358);
      Complex complex6 = Complex.ofPolar(0.0, 596.9);
      complex6.log();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(577.765295, 10.0);
      complex0.ONE.negate();
      Complex complex1 = complex0.I.subtractFromImaginary(Double.NaN);
      complex0.isInfinite();
      complex1.sinh();
      complex1.subtractImaginary((-466.7590051848));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ofCis(2272.741992968259);
      Complex complex1 = complex0.sqrt();
      complex1.hashCode();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.ofCis(1353.6528246029095);
      Complex complex4 = complex2.divide(1353.6528246029095);
      Complex complex5 = complex3.log10();
      Complex complex6 = complex2.ZERO.tanh();
      complex6.I.acosh();
      Complex complex7 = complex6.subtract(2272.741992968259);
      complex1.isNaN();
      complex7.multiply(1353.6528246029095);
      complex7.acosh();
      complex0.imag();
      Complex complex8 = complex7.subtractFromImaginary(1.1752011936438014);
      Complex complex9 = complex8.proj();
      complex9.ZERO.divide(complex6);
      Complex.ofPolar(2495.396389, 2272.741992968259);
      complex6.subtract(complex5);
      complex4.sqrt();
      complex7.imag();
      Complex.ofCartesian(1.0, (-372.0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian((-49.63180411322607), 3808.2348891);
      Complex complex1 = Complex.ofCis(3808.2348891);
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.atanh();
      Complex complex5 = complex1.subtract(complex0);
      complex3.I.tan();
      complex5.I.nthRoot(1746);
      complex4.divide(3808.2348891);
      complex2.addImaginary((-49.63180411322607));
      complex0.subtract(6.283185307179586);
      complex3.tan();
      Complex.ofCartesian(1.0, 1.7976931348623157E308);
      Complex complex6 = complex0.pow(215.17888503885365);
      Complex.ofPolar(215.17888503885365, 1.0);
      Complex complex7 = complex0.add(complex6);
      Complex.ofCartesian((-4030.224870229058), 2921.169);
      complex7.atan();
      complex6.acosh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(0.0, 0.0);
      Complex complex1 = Complex.ofCartesian(358.78474326620994, 2.0);
      Complex complex2 = complex1.pow(1.7976931348623157E308);
      Complex complex3 = Complex.ofPolar(394.3661136282693, 394.3661136282693);
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = complex4.ZERO.subtractFromImaginary(1.7976931348623157E308);
      complex5.ZERO.conj();
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.subtract(0.707106552650154);
      Complex complex3 = complex1.subtract(2048.0);
      Complex complex4 = complex3.subtract(805.18521);
      complex4.tanh();
      complex2.log();
      Complex complex5 = Complex.ofCis((-5034.68016));
      complex5.exp();
      Complex complex6 = Complex.I;
      complex6.isFinite();
      Complex complex7 = complex3.multiply(complex4);
      complex5.toString();
      Complex complex8 = complex1.atanh();
      Complex.parse("(-0.2743681948730814,-0.9616247155944396)");
      complex2.equals(complex7);
      complex2.isNaN();
      Complex complex9 = complex8.acosh();
      complex9.add(complex7);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian((-49.63180411322607), 3808.2348891);
      Complex complex1 = Complex.ofPolar(1994.6091125, 1994.6091125);
      Complex complex2 = complex0.log10();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.subtract(0.7071067811865476);
      complex0.sin();
      Complex complex5 = complex4.sqrt();
      Complex complex6 = complex5.conj();
      complex0.pow(complex2);
      complex2.cos();
      complex3.sinh();
      complex5.sqrt();
      complex4.proj();
      Complex complex7 = complex1.multiplyImaginary(708.0);
      complex7.I.divide((-49.63180411322607));
      complex3.norm();
      complex6.add((-737.5554561));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(358.78474326620994, 358.78474326620994);
      Complex complex1 = complex0.subtract(1329.4988554173717);
      Complex complex2 = complex1.subtract(0.707106552650154);
      Complex complex3 = Complex.ofCartesian(1329.4988554173717, 2.2471164185778946E307);
      complex2.negate();
      Complex complex4 = complex3.divide(complex1);
      complex3.norm();
      Complex complex5 = Complex.ofCartesian((-645.266559), -0.0);
      complex5.abs();
      complex1.asinh();
      Complex complex6 = complex3.add(1.7976931348623157E308);
      Complex.ofCartesian((-1.0), 3817.185524335225);
      complex4.log10();
      Complex complex7 = Complex.ofPolar((-3969.62449270168), 2.2471164185778946E307);
      complex7.subtractFrom(1329.4988554173717);
      complex1.nthRoot((-1));
      complex6.sqrt();
      Complex complex8 = Complex.I;
      complex8.getImaginary();
      Complex complex9 = Complex.ofCartesian(358.78474326620994, 645.266559);
      complex2.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(72.97940615555137, 72.97940615555137);
      Complex complex1 = complex0.subtract(1329.4988554173717);
      Complex complex2 = Complex.ofCartesian(1329.4988554173717, 2.2471164185778946E307);
      complex1.negate();
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = Complex.ofCartesian(72.97940615555137, -0.0);
      complex4.abs();
      complex1.asinh();
      Complex complex5 = complex2.add(1.7976931348623157E308);
      Complex.ofCartesian((-1.0), 3817.185524335225);
      complex3.log10();
      Complex complex6 = Complex.ofPolar((-3969.62449270168), 2.2471164185778946E307);
      complex6.subtractFrom(1329.4988554173717);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-320.6622081703141));
      Complex complex1 = complex0.ZERO.add(0.0);
      Complex complex2 = Complex.ofCartesian(0.0, (-1925.346721651));
      Complex complex3 = complex0.ZERO.log10();
      complex0.isFinite();
      Complex complex4 = complex0.ZERO.sqrt();
      Complex complex5 = complex0.ONE.acosh();
      complex4.ZERO.pow(complex0);
      complex0.norm();
      Complex complex6 = complex1.divideImaginary(10.0);
      Complex complex7 = Complex.I;
      complex6.tanh();
      Complex complex8 = complex5.addImaginary(1738.404704266);
      complex3.tanh();
      complex2.sin();
      complex7.pow((-1925.346721651));
      complex8.divideImaginary(2303.6308324855);
      complex0.hashCode();
      complex5.sinh();
      Complex complex9 = Complex.ofCis(0.0);
      complex9.divideImaginary((-320.6622081703141));
      complex0.isFinite();
      complex4.log10();
      // Undeclared exception!
      try { 
        Complex.parse("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Input too short, expected format '(x,y)' for input \"\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-320.6622081703141));
      Complex complex1 = complex0.ZERO.add(0.0);
      Complex complex2 = Complex.ofCartesian(0.0, (-1925.346721651));
      Complex complex3 = complex0.ZERO.log10();
      complex0.isFinite();
      Complex complex4 = complex0.ZERO.sqrt();
      Complex complex5 = complex0.ONE.acosh();
      complex4.ZERO.pow(complex0);
      Complex complex6 = complex1.divideImaginary(10.0);
      Complex complex7 = Complex.I;
      complex6.tanh();
      Complex complex8 = complex5.addImaginary(1738.404704266);
      Complex complex9 = complex3.tanh();
      complex4.ZERO.addImaginary(0.0);
      Complex complex10 = complex2.sin();
      complex7.pow((-1925.346721651));
      complex8.divideImaginary(2303.6308324855);
      complex5.tan();
      Complex complex11 = Complex.ofCartesian(1.7976931348623157E308, (-320.6622081703141));
      complex11.pow(0.0);
      Complex.ofPolar(0.0, 0.0);
      complex8.add(complex2);
      complex10.atan();
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.divide(complex1);
      Complex complex2 = complex0.ONE.log10();
      Complex complex3 = complex2.subtractFrom(1197);
      Complex complex4 = complex3.pow((double) 1197);
      complex3.nthRoot(541);
      complex0.isInfinite();
      complex1.isNaN();
      Complex complex5 = complex3.log();
      Complex complex6 = complex2.pow(complex5);
      complex5.ONE.subtractFrom(1768);
      complex4.sin();
      complex6.exp();
      Complex.ofCartesian(1197, 1768);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.ofCis(0.0);
      Complex complex1 = complex0.ZERO.subtractImaginary(0.0);
      complex1.ZERO.add(0.0);
      Complex complex2 = Complex.ofCartesian(596.0924218540172, 116.17975733252865);
      Complex complex3 = complex0.ZERO.log10();
      complex1.isFinite();
      Complex complex4 = complex0.ONE.acosh();
      Complex complex5 = complex0.ZERO.pow(complex0);
      complex0.norm();
      complex0.tan();
      Complex complex6 = Complex.ofCis(116.17975733252865);
      complex6.ZERO.subtract(0.0);
      Complex complex7 = complex5.ONE.divide(0.0);
      complex4.divide(0.0);
      complex0.getReal();
      Complex complex8 = complex5.sqrt();
      complex4.ZERO.cos();
      complex8.I.subtract(complex4);
      complex8.addImaginary(935.5117115391919);
      Complex complex9 = complex7.subtract(complex3);
      Complex complex10 = complex0.add(596.0924218540172);
      complex10.ZERO.add(complex1);
      complex4.isFinite();
      Complex complex11 = complex9.proj();
      complex11.I.hashCode();
      Complex complex12 = Complex.ONE;
      complex11.asin();
      complex8.subtractImaginary(1.0);
      complex7.nthRoot((-2862));
      complex2.abs();
      Complex.ofPolar(935.5117115391919, 0.0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(1631.4132449356, 1631.4132449356);
      Complex complex1 = complex0.ONE.divide(0.0);
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.subtract((-0.8414709848078965));
      Complex complex4 = Complex.ofPolar(842.224351, 0.0);
      complex0.subtract(complex3);
      complex3.isFinite();
      complex4.cosh();
      Complex.ofCis((-45.25094302471358));
      Complex complex5 = Complex.ZERO;
      complex4.add(complex5);
      complex0.sinh();
      complex5.pow(1.0);
      Complex complex6 = Complex.ofCartesian(42.07906658453672, 842.224351);
      complex0.nthRoot(1768);
      complex1.isInfinite();
      complex6.isNaN();
      complex5.log();
      complex0.pow(complex2);
      Complex complex7 = complex3.sin();
      complex7.exp();
      Complex.ofCartesian(0.0, 1768);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.ZERO.addImaginary(1.0);
      Complex complex4 = complex1.I.sinh();
      Complex complex5 = complex4.ZERO.exp();
      Complex complex6 = Complex.ofPolar(1.0, 1.0);
      Complex complex7 = complex5.I.multiply(complex2);
      complex7.ONE.multiply(complex0);
      complex0.norm();
      complex4.subtract(1.0);
      Complex complex8 = complex3.tanh();
      complex8.ONE.log();
      Complex.ofCis(1.0);
      Complex complex9 = complex2.I.exp();
      complex8.isFinite();
      complex2.multiply(complex4);
      complex8.toString();
      Complex complex10 = complex6.atanh();
      Complex.parse("(0.0,1.5574077246549023)");
      complex4.equals(complex10);
      complex1.isNaN();
      complex8.acosh();
      complex9.add(complex4);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex1.tan();
      complex1.ZERO.addImaginary(1.0);
      Complex complex3 = complex1.I.sinh();
      Complex complex4 = complex3.ZERO.exp();
      Complex complex5 = Complex.ofPolar(1.0, 1.0);
      Complex complex6 = complex4.I.multiply(complex2);
      complex6.ONE.multiply(complex0);
      complex0.norm();
      complex5.subtract(1.0);
      Complex complex7 = Complex.I;
      complex7.isNaN();
      complex6.add((-518.6562));
      complex3.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.subtractFrom((-3878.119481817));
      complex1.cosh();
      Complex complex2 = Complex.ofPolar((-3878.119481817), Double.NaN);
      complex2.I.addImaginary((-3878.119481817));
      complex2.hashCode();
      Complex complex3 = complex0.proj();
      Complex complex4 = complex3.I.divide(complex0);
      Complex complex5 = complex0.tanh();
      Complex complex6 = complex5.ONE.sinh();
      complex3.cos();
      Complex complex7 = complex3.add(2939.0927);
      Complex.ofCartesian(2.9833362924800827E-154, 2939.0927);
      complex4.subtractFrom(0.6471);
      complex7.log();
      complex6.proj();
      Complex.ofCartesian(2.2250738585072014E-308, 1.0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.ONE.log10();
      Complex complex4 = complex3.subtractFrom(1197);
      complex4.pow((double) 1197);
      complex3.ONE.nthRoot(1197);
      complex0.isInfinite();
      Complex complex5 = complex4.pow(1416.0);
      complex4.nthRoot(1197);
      complex5.isInfinite();
      complex5.isNaN();
      complex1.log();
      complex2.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ofPolar((-2358.64296), (-0.8813735870195429));
      Complex complex1 = Complex.ZERO;
      complex0.ZERO.addImaginary((-1431.54526));
      Complex complex2 = Complex.ofPolar((-2358.64296), (-0.8813735870195429));
      Complex complex3 = complex0.I.subtractFromImaginary(2776.32893448);
      Complex complex4 = complex3.ONE.acosh();
      complex2.pow(79.17093904616183);
      complex0.isNaN();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex0.cosh();
      complex4.log10();
      complex5.multiplyImaginary(2.2531019124809635E-13);
      complex6.add(complex7);
      complex4.acos();
      complex2.cos();
      complex6.subtractFrom(6.011057);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(0.707106552650154, 2.2471164185778946E307);
      Complex complex1 = complex0.subtractImaginary(0.707106552650154);
      Complex.ofPolar(2.2471164185778946E307, 2.2471164185778946E307);
      complex1.multiplyImaginary(12);
      complex1.subtract((double) 12);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(13.982781073724965, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex0.ZERO.negate();
      complex1.I.add(complex2);
      Complex complex4 = complex0.ONE.sin();
      Complex complex5 = Complex.ofCis((-1179.4));
      Complex complex6 = complex5.ZERO.subtractFrom((-1179.4));
      Complex complex7 = complex6.ONE.pow(complex0);
      Complex complex8 = complex4.I.divideImaginary(13.982781073724965);
      complex1.real();
      Complex complex9 = complex3.negate();
      complex5.divide(complex9);
      complex8.norm();
      complex8.abs();
      Complex complex10 = complex1.asinh();
      complex10.add(751.6444049677767);
      Complex.ofCartesian(2558.76, 0.07151653127710762);
      Complex complex11 = Complex.ZERO;
      complex11.log10();
      complex7.subtractFrom(2558.76);
      complex6.sqrt();
      complex2.getImaginary();
      Complex complex12 = Complex.ofPolar((-1179.4), (-1242.801045558));
      complex11.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(277.0, 4.149515568880993E180);
      complex0.log10();
      Complex complex1 = Complex.ONE;
      complex1.I.subtract(4.149515568880993E180);
      complex1.real();
      Complex complex2 = complex1.subtractImaginary(4.149515568880993E180);
      Complex complex3 = Complex.ofPolar(484.3181212, (-683.2159267224283));
      Complex complex4 = complex3.sinh();
      complex4.nthRoot((-2277));
      complex4.multiplyImaginary((-6.004523521790279));
      complex1.subtractImaginary((-816.857));
      complex3.tanh();
      complex0.getImaginary();
      complex2.proj();
      Complex complex5 = Complex.ofCartesian((-6.004523521790279), 1346.21459544202);
      complex5.subtract((-683.2159267224283));
      complex5.subtractImaginary(1346.21459544202);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.subtract(0.707106552650154);
      complex1.subtract(2.2471164185778946E307);
      Complex complex3 = Complex.ofCartesian(0.707106552650154, 2.2471164185778946E307);
      Complex complex4 = complex2.negate();
      Complex complex5 = complex2.divide(complex0);
      complex2.norm();
      complex4.abs();
      Complex complex6 = complex5.asinh();
      complex1.ZERO.add(2558.76);
      Complex complex7 = Complex.ofCartesian(2.2471164185778946E307, 0.002968898913989616);
      Complex complex8 = complex2.log10();
      complex8.ONE.multiply(2558.76);
      complex8.ZERO.subtractFrom(2.2471164185778946E307);
      complex7.nthRoot((-1));
      Complex complex9 = complex3.sqrt();
      complex9.ZERO.sqrt();
      complex6.getImaginary();
      complex6.divide(complex1);
      complex3.asinh();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ofPolar((-564.926595163783), 890.49);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.multiply(complex0);
      complex2.ONE.subtractImaginary((-564.926595163783));
      complex0.isFinite();
      double double0 = (-353.0);
      Complex complex3 = Complex.ofPolar((-353.0), (-4333.12818));
      complex3.subtractFromImaginary(890.49);
      Complex complex4 = Complex.ofPolar((-2009.078639478623), (-4333.12818));
      complex4.acosh();
      complex1.pow((-4444.829577885742));
      // Undeclared exception!
      try { 
        Complex.parse(".f3:_\u0003eS?E<a(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected start delimiter '(' for input \".f3:_\u0003eS?E<a(\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.negate();
      complex1.isFinite();
      Complex complex2 = complex0.multiply(3671.551593153712);
      complex2.arg();
      complex1.ZERO.negate();
      Complex.ofCartesian(3671.551593153712, 1221.628998604528);
      Complex complex3 = complex1.conj();
      complex2.ZERO.hashCode();
      Complex.ofCis(2975.7628035);
      complex3.ZERO.add(complex2);
      Complex complex4 = complex1.exp();
      Complex complex5 = complex1.divide(complex2);
      Complex complex6 = complex5.ZERO.multiply(0.0);
      complex6.I.sinh();
      complex6.ZERO.conj();
      Complex.ofCartesian(3671.551593153712, 45.25094302471358);
      complex5.acos();
      complex0.conj();
      complex6.negate();
      complex1.isFinite();
      complex4.isFinite();
      complex3.norm();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(358.78474326620994, 358.78474326620994);
      Complex complex1 = complex0.ONE.divide(0.0);
      Complex complex2 = complex0.proj();
      Complex complex3 = complex0.asinh();
      complex3.isNaN();
      Complex complex4 = complex3.multiply(2.2250738585072014E-308);
      Complex complex5 = complex1.acosh();
      Complex.ofCis(358.78474326620994);
      complex4.pow(794.2540111805387);
      Complex.ofPolar(0.0, 794.2540111805387);
      complex2.add(complex5);
      complex3.subtractFromImaginary(1.1102230246251565E-16);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(1329.4988554173717, 2048.0);
      Complex complex1 = complex0.add(1.7976931348623157E308);
      Complex.ofCartesian((-1.0), 2048.0);
      Complex complex2 = Complex.ofPolar((-290.1907219490887), 2048.0);
      complex2.subtractFrom(1329.4988554173717);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.subtract(0.707106552650154);
      complex1.subtract(2.2471164185778946E307);
      Complex complex3 = Complex.ofCartesian(0.707106552650154, 2.2471164185778946E307);
      Complex complex4 = complex2.negate();
      Complex complex5 = complex2.divide(complex0);
      complex2.norm();
      complex4.abs();
      Complex complex6 = complex5.asinh();
      complex1.ZERO.add(2558.76);
      Complex complex7 = Complex.ofCartesian(2.2471164185778946E307, 0.002968898913989616);
      Complex complex8 = complex2.log10();
      complex8.ZERO.subtractFrom(2.2471164185778946E307);
      complex7.nthRoot((-1));
      complex3.sqrt();
      complex6.getImaginary();
      complex6.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.subtractFrom(1197);
      Complex complex5 = complex4.pow((double) 1197);
      complex5.sinh();
      complex3.ONE.nthRoot(1197);
      complex0.isInfinite();
      Complex complex6 = complex4.pow(1416.0);
      complex4.nthRoot(1197);
      complex6.isInfinite();
      complex1.log();
      complex2.pow(complex6);
      Complex complex7 = Complex.ONE;
      complex5.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(1631.4132449356, 1631.4132449356);
      complex0.ONE.divide(0.0);
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.subtract((-0.8414709848078965));
      Complex complex3 = Complex.ofPolar(842.224351, 0.0);
      Complex complex4 = complex0.subtract(complex2);
      complex2.isFinite();
      Complex complex5 = complex3.cosh();
      complex5.ZERO.hashCode();
      Complex.ofCis((-45.25094302471358));
      Complex complex6 = Complex.ZERO;
      complex3.add(complex6);
      Complex complex7 = complex0.sinh();
      complex0.ZERO.multiply(complex5);
      complex7.I.acosh();
      complex4.isFinite();
      complex1.isFinite();
      Complex complex8 = Complex.I;
      complex8.real();
      complex1.conj();
      Complex.ofPolar(842.224351, (-3914.377496034));
      complex4.pow(5.9666725849601654E-154);
      Complex complex9 = Complex.ofPolar(5.9666725849601654E-154, 2372.61829227);
      complex9.conj();
      complex6.divide(complex5);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ofCis(3.8657822478866);
      Complex complex1 = complex0.log();
      complex0.divideImaginary(0.0);
      Complex complex2 = Complex.ofCis((-0.8414709848078965));
      complex0.addImaginary(2317.3);
      Complex complex3 = Complex.ONE;
      complex3.negate();
      Complex complex4 = Complex.ofPolar(0.0, 3936.0);
      Complex complex5 = complex0.subtract(2.2471164185778946E307);
      Complex complex6 = Complex.ZERO;
      complex3.negate();
      Complex complex7 = Complex.ONE;
      complex2.divide(complex7);
      Complex complex8 = Complex.ofCis((-0.8414709848078965));
      complex8.norm();
      complex1.abs();
      complex6.asinh();
      complex6.add(2317.3);
      Complex complex9 = Complex.ofCartesian(3.8657822478866, (-3690.5270981756053));
      complex5.log10();
      complex6.nthRoot((-1));
      complex9.sqrt();
      complex4.getImaginary();
      complex1.divide(complex9);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ofPolar((-564.926595163783), 890.49);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.ONE.subtractImaginary((-564.926595163783));
      complex0.isFinite();
      complex0.imag();
      Complex complex4 = complex0.proj();
      complex4.ONE.add(complex1);
      Complex complex5 = complex0.conj();
      Complex complex6 = complex3.cos();
      Complex complex7 = complex0.divide(0.0);
      Complex complex8 = complex7.proj();
      Complex complex9 = complex8.proj();
      complex9.I.pow(complex3);
      Complex complex10 = complex5.divideImaginary(Double.NaN);
      Complex complex11 = Complex.I;
      Complex complex12 = complex5.tanh();
      Complex complex13 = complex12.addImaginary(0.0);
      complex7.tanh();
      complex9.sin();
      Complex complex14 = complex10.pow((-564.926595163783));
      complex14.ONE.divideImaginary((-564.926595163783));
      complex11.hashCode();
      complex11.sinh();
      complex6.divideImaginary(890.49);
      complex11.isFinite();
      complex14.log10();
      complex13.multiplyImaginary((-2077.143));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-319.047112598));
      Complex complex1 = complex0.ZERO.subtractImaginary((-319.047112598));
      double double0 = (-2048.0);
      Complex complex2 = complex1.ZERO.add((-2048.0));
      Complex complex3 = complex0.ZERO.log10();
      complex1.isFinite();
      complex2.log10();
      Complex complex4 = complex0.ZERO.sqrt();
      complex0.ONE.acosh();
      complex4.ZERO.pow(complex0);
      Complex complex5 = complex3.sqrt();
      complex5.subtractFromImaginary((-2048.0));
      // Undeclared exception!
      try { 
        Complex.parse("r;[*Gv~z'cm6b|Tu.K");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected start delimiter '(' for input \"r;[*Gv~z'cm6b|Tu.K\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-319.047112598));
      Complex complex1 = complex0.ZERO.subtractImaginary((-319.047112598));
      double double0 = 0.0;
      complex1.ZERO.add(0.0);
      Complex complex2 = Complex.ofCartesian(0.0, (-1925.346721651));
      Complex complex3 = complex0.ZERO.log10();
      complex1.isFinite();
      complex2.log10();
      Complex complex4 = complex0.ZERO.sqrt();
      complex0.ONE.acosh();
      complex4.ZERO.pow(complex0);
      Complex complex5 = complex3.sqrt();
      Complex complex6 = complex5.subtractFromImaginary(0.0);
      complex6.cosh();
      // Undeclared exception!
      try { 
        Complex.parse("r;[*Gv~z'cm6b|Tu.K");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected start delimiter '(' for input \"r;[*Gv~z'cm6b|Tu.K\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.addImaginary((-1961.98));
      Complex complex2 = complex1.sqrt();
      complex0.subtractFromImaginary((-1431.54526));
      Complex complex3 = complex1.acosh();
      Complex complex4 = complex3.pow(1227.0442263667444);
      complex4.isNaN();
      Complex.ofPolar((-498.72988556), 1993.310459265);
      Complex complex5 = complex2.sinh();
      complex4.cosh();
      complex5.log10();
      Complex complex6 = Complex.ofPolar(1993.310459265, (-1431.54526));
      Complex complex7 = complex6.multiplyImaginary((-704.879167679211));
      complex7.ONE.subtractFrom(2004.84157);
      complex7.I.isFinite();
      Complex complex8 = Complex.I;
      Complex complex9 = Complex.ofCartesian(1993.310459265, 1.0);
      complex8.add(complex9);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(1257.89916503, 0.0);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.log();
      complex0.ZERO.negate();
      complex1.I.add(complex2);
      Complex complex3 = complex0.ONE.sin();
      Complex complex4 = Complex.ofCis((-1179.4));
      Complex complex5 = complex4.ZERO.subtractFrom((-1179.4));
      Complex complex6 = complex5.ONE.pow(complex0);
      complex3.I.divideImaginary(1257.89916503);
      complex1.real();
      complex0.subtractImaginary(1257.89916503);
      Complex complex7 = Complex.ofPolar(1257.89916503, 1.5707963267948966);
      Complex complex8 = complex6.sinh();
      Complex complex9 = Complex.ZERO;
      complex9.I.nthRoot((-1));
      complex8.ONE.add(complex9);
      complex8.subtractFrom(1.5707963267948966);
      complex7.isNaN();
      Complex complex10 = complex5.log();
      complex10.acosh();
      Complex.ofCartesian(2.9833362924800827E-154, 1775.877330455127);
      Complex complex11 = Complex.ofCartesian(0, (-1179.4));
      complex11.tanh();
      Complex complex12 = Complex.ofCartesian(1775.877330455127, (-1.0));
      complex10.pow(complex12);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(1631.4132449356, 1631.4132449356);
      complex0.ONE.divide(0.0);
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.subtract((-0.8414709848078965));
      Complex complex3 = Complex.ofCartesian(2064.850156470533, 1631.4132449356);
      complex3.add(complex0);
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex2.pow(1.0);
      Complex.ofCartesian((-0.8414709848078965), 659.920736299855);
      complex2.nthRoot(41);
      complex1.isInfinite();
      complex4.isNaN();
      Complex.ofCis(0.0);
      Complex complex6 = Complex.ONE;
      complex5.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(1631.4132449356, 1631.4132449356);
      complex0.ONE.divide(0.0);
      Complex complex1 = complex0.subtract(0.0);
      Complex complex2 = complex1.subtract((-0.8414709848078965));
      Complex complex3 = Complex.ofPolar(842.224351, 0.0);
      Complex complex4 = complex0.subtract(complex2);
      complex2.isFinite();
      complex3.cosh();
      Complex.ofCis((-45.25094302471358));
      Complex complex5 = Complex.ZERO;
      complex3.add(complex5);
      complex0.sinh();
      complex4.isFinite();
      complex1.isFinite();
      Complex complex6 = Complex.I;
      complex6.real();
      complex1.conj();
      Complex.ofPolar(842.224351, (-3914.377496034));
      complex4.pow(5.9666725849601654E-154);
      Complex complex7 = Complex.ofPolar(5.9666725849601654E-154, 2372.61829227);
      complex7.conj();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ofCis(3.8657822478866);
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.divideImaginary(0.0);
      Complex.ofCis((-0.8414709848078965));
      complex0.addImaginary(2317.3);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.negate();
      Complex.ofPolar(0.0, 3936.0);
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex4.divide(complex5);
      complex4.multiply(complex5);
      complex0.norm();
      complex1.abs();
      Complex complex7 = complex5.asinh();
      complex2.add(complex7);
      Complex complex8 = complex3.log10();
      complex8.tan();
      complex6.nthRoot(44);
      complex1.sqrt();
      // Undeclared exception!
      try { 
        Complex.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ofCis(3.8657822478866);
      complex0.log();
      Complex complex1 = complex0.divideImaginary(0.0);
      Complex.ofCis((-0.8414709848078965));
      complex1.sqrt();
      complex0.imag();
      Complex.ofCartesian((-0.8414709848078965), (-0.6625286367698044));
      Complex complex2 = complex0.log();
      complex2.negate();
      Complex.ofCartesian(3.8657822478866, 0.0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian((-49.63180411322607), 3808.2348891);
      Complex complex1 = Complex.ofCis(3808.2348891);
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.atanh();
      complex1.subtract(complex0);
      complex4.divide(3808.2348891);
      Complex.ofCartesian(1.0, 3808.2348891);
      complex0.subtract(6.283185307179586);
      complex3.tan();
      Complex.ofCartesian(1.0, 1.7976931348623157E308);
      Complex complex5 = complex0.pow(215.17888503885365);
      Complex.ofPolar(215.17888503885365, 1.0);
      Complex complex6 = complex0.add(complex5);
      complex6.atan();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(358.78474326620994, 358.78474326620994);
      assertNotNull(complex0);
      assertEquals(128726.49200060018, complex0.norm(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(215.17888503885365, complex0.imag(), 0.01);
      assertEquals(287.09674229088006, complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.6431807569735144, complex0.arg(), 0.01);
      assertEquals(215.17888503885365, complex0.getImaginary(), 0.01);
      assertEquals(358.78474326620994, complex0.abs(), 0.01);
      assertEquals(287.09674229088006, complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.ONE.divide(0.0);
      assertNotNull(complex1);
      assertEquals(128726.49200060018, complex0.norm(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(215.17888503885365, complex0.imag(), 0.01);
      assertEquals(287.09674229088006, complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.6431807569735144, complex0.arg(), 0.01);
      assertEquals(215.17888503885365, complex0.getImaginary(), 0.01);
      assertEquals(358.78474326620994, complex0.abs(), 0.01);
      assertEquals(287.09674229088006, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.real(), 0.01);
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.proj();
      assertNotNull(complex2);
      assertEquals(128726.49200060018, complex0.norm(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(215.17888503885365, complex0.imag(), 0.01);
      assertEquals(287.09674229088006, complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.6431807569735144, complex0.arg(), 0.01);
      assertEquals(215.17888503885365, complex0.getImaginary(), 0.01);
      assertEquals(358.78474326620994, complex0.abs(), 0.01);
      assertEquals(287.09674229088006, complex0.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(215.17888503885365, complex2.imag(), 0.01);
      assertEquals(287.09674229088006, complex2.real(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.6431807569735144, complex2.arg(), 0.01);
      assertEquals(128726.49200060018, complex2.norm(), 0.01);
      assertEquals(358.78474326620994, complex2.abs(), 0.01);
      assertEquals(215.17888503885365, complex2.getImaginary(), 0.01);
      assertEquals(287.09674229088006, complex2.getReal(), 0.01);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex0.asinh();
      assertNotNull(complex3);
      assertEquals(128726.49200060018, complex0.norm(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(215.17888503885365, complex0.imag(), 0.01);
      assertEquals(287.09674229088006, complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.6431807569735144, complex0.arg(), 0.01);
      assertEquals(215.17888503885365, complex0.getImaginary(), 0.01);
      assertEquals(358.78474326620994, complex0.abs(), 0.01);
      assertEquals(287.09674229088006, complex0.getReal(), 0.01);
      assertEquals(6.575870333273723, complex3.real(), 0.01);
      assertEquals(43.65574972831088, complex3.norm(), 0.01);
      assertEquals(0.09749881673875592, complex3.arg(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(6.575870333273723, complex3.getReal(), 0.01);
      assertEquals(6.607249785524298, complex3.abs(), 0.01);
      assertEquals(0.6431788929072648, complex3.imag(), 0.01);
      assertEquals(0.6431788929072648, complex3.getImaginary(), 0.01);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      
      double double0 = complex1.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(128726.49200060018, complex0.norm(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(215.17888503885365, complex0.imag(), 0.01);
      assertEquals(287.09674229088006, complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.6431807569735144, complex0.arg(), 0.01);
      assertEquals(215.17888503885365, complex0.getImaginary(), 0.01);
      assertEquals(358.78474326620994, complex0.abs(), 0.01);
      assertEquals(287.09674229088006, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.real(), 0.01);
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      
      Complex complex4 = complex1.atanh();
      assertNotNull(complex4);
      assertEquals(128726.49200060018, complex0.norm(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(215.17888503885365, complex0.imag(), 0.01);
      assertEquals(287.09674229088006, complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.6431807569735144, complex0.arg(), 0.01);
      assertEquals(215.17888503885365, complex0.getImaginary(), 0.01);
      assertEquals(358.78474326620994, complex0.abs(), 0.01);
      assertEquals(287.09674229088006, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.real(), 0.01);
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.arg(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.abs(), 0.01);
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals(Double.NaN, complex4.norm(), 0.01);
      assertEquals(Double.NaN, complex4.imag(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complex2.sqrt();
      assertNotNull(complex5);
      assertEquals(128726.49200060018, complex0.norm(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(215.17888503885365, complex0.imag(), 0.01);
      assertEquals(287.09674229088006, complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.6431807569735144, complex0.arg(), 0.01);
      assertEquals(215.17888503885365, complex0.getImaginary(), 0.01);
      assertEquals(358.78474326620994, complex0.abs(), 0.01);
      assertEquals(287.09674229088006, complex0.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(215.17888503885365, complex2.imag(), 0.01);
      assertEquals(287.09674229088006, complex2.real(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.6431807569735144, complex2.arg(), 0.01);
      assertEquals(128726.49200060018, complex2.norm(), 0.01);
      assertEquals(358.78474326620994, complex2.abs(), 0.01);
      assertEquals(215.17888503885365, complex2.getImaginary(), 0.01);
      assertEquals(287.09674229088006, complex2.getReal(), 0.01);
      assertEquals(0.32159037848675726, complex5.arg(), 0.01);
      assertEquals(5.986985926796969, complex5.imag(), 0.01);
      assertEquals(5.986985926796969, complex5.getImaginary(), 0.01);
      assertEquals(358.78474326620994, complex5.norm(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(17.970552099992503, complex5.real(), 0.01);
      assertEquals(17.970552099992503, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(18.941614061800802, complex5.abs(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-319.047112598));
      Complex complex1 = complex0.ZERO.subtractImaginary((-319.047112598));
      Complex complex2 = complex1.ZERO.add(0.0);
      Complex.ofCartesian(0.0, (-1925.346721651));
      complex0.ZERO.log10();
      complex1.isFinite();
      Complex complex3 = complex0.ZERO.sqrt();
      Complex complex4 = complex0.ONE.acosh();
      Complex complex5 = complex3.ZERO.pow(complex0);
      complex0.norm();
      Complex complex6 = complex0.tan();
      complex6.I.sin();
      Complex complex7 = complex5.ONE.divide(0.0);
      complex0.getReal();
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex8.I.subtract(complex4);
      complex9.I.exp();
      complex8.addImaginary(0.0);
      Complex complex10 = complex0.add(0.0);
      Complex complex11 = complex10.ZERO.add(complex1);
      Complex complex12 = complex11.I.multiply(0.0);
      complex4.isFinite();
      Complex complex13 = complex4.proj();
      complex13.I.hashCode();
      complex2.log10();
      complex13.asin();
      complex8.subtractImaginary(0.9999999999999999);
      complex7.nthRoot((-2862));
      complex12.abs();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-1.0));
      complex0.I.hashCode();
      Complex complex1 = complex0.subtractFrom((-1.0));
      complex0.ONE.isFinite();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ONE.multiply(complex1);
      Complex complex4 = complex1.subtractFrom((-1.0));
      complex4.ZERO.toString();
      complex3.ONE.cosh();
      complex0.ZERO.subtractFromImaginary(0.0);
      complex1.isInfinite();
      Complex complex5 = complex4.proj();
      complex5.ONE.acosh();
      complex2.I.cos();
      complex3.tan();
      Complex complex6 = Complex.ofCartesian((-1.0), (-1.0));
      complex1.pow(0.0);
      Complex complex7 = Complex.ofPolar((-1.0), (-2820.6703468348946));
      complex6.add(complex2);
      Complex.ofCartesian((-2820.6703468348946), 1.560465408615215);
      complex7.atan();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.divide(complex1);
      Complex complex2 = complex0.ONE.log10();
      Complex complex3 = complex2.subtractFrom(1197);
      complex3.pow((double) 1197);
      complex2.ONE.nthRoot(1197);
      complex0.isInfinite();
      Complex complex4 = complex3.pow(1416.0);
      Complex complex5 = Complex.ofCartesian((-484.0), (-1549.3435));
      complex5.nthRoot(1197);
      Complex complex6 = Complex.I;
      complex6.isInfinite();
      complex4.isNaN();
      complex1.log();
      complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.subtractFrom(1197);
      complex3.pow((double) 1197);
      complex2.ONE.nthRoot(1197);
      complex0.isInfinite();
      Complex complex4 = complex3.pow(1416.0);
      Complex complex5 = Complex.ofCartesian((-484.0), (-1549.3435));
      complex5.isInfinite();
      complex4.isNaN();
      complex1.log();
      complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.divide(complex1);
      Complex complex2 = complex0.ONE.log10();
      complex2.subtractFrom(1197);
      Complex complex3 = complex1.log();
      complex3.acosh();
      Complex complex4 = Complex.ofCartesian((-494.0351808343919), (-494.0351808343919));
      complex4.ONE.tanh();
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ofPolar((-2358.64296), (-0.8813735870195429));
      complex0.ONE.cos();
      complex0.ZERO.addImaginary((-1431.54526));
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.I.subtractFromImaginary(2776.32893448);
      Complex complex3 = complex2.ONE.acosh();
      complex1.pow(87.142644510424);
      complex0.isNaN();
      Complex complex4 = Complex.ofPolar(1993.310459265, 2.2531019124809635E-13);
      Complex complex5 = complex4.sinh();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex3.log10();
      complex4.multiplyImaginary(2.2531019124809635E-13);
      complex5.add(complex6);
      complex7.subtractFromImaginary((-2358.64296));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-319.047112598));
      Complex complex1 = complex0.ZERO.subtractImaginary((-319.047112598));
      Complex complex2 = complex1.ZERO.add(0.0);
      Complex complex3 = Complex.ofCartesian(0.0, (-1925.346721651));
      Complex complex4 = complex0.ZERO.log10();
      complex1.isFinite();
      complex0.ZERO.sqrt();
      complex2.isFinite();
      complex1.real();
      complex4.conj();
      Complex.ofPolar((-1925.346721651), (-319.047112598));
      complex3.pow(0.0);
      complex0.conj();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ofCis(3.8657822478866);
      Complex complex1 = complex0.atanh();
      complex1.I.subtract(complex0);
      Complex complex2 = complex0.divide(3.8657822478866);
      Complex complex3 = complex2.ZERO.divideImaginary(0.0);
      complex3.ONE.addImaginary(2098.332060849);
      Complex complex4 = complex3.subtract(3.8657822478866);
      Complex complex5 = complex4.ZERO.tan();
      complex5.subtract(0.0);
      Complex complex6 = complex1.subtract(4172.147);
      Complex complex7 = Complex.ofPolar(268.109763, 0.0);
      Complex complex8 = complex3.subtract(complex6);
      complex8.cosh();
      Complex complex9 = Complex.ofCis((-0.8414709848078965));
      complex1.add(complex8);
      complex7.sinh();
      Complex complex10 = Complex.ONE;
      complex10.isFinite();
      complex1.isFinite();
      complex9.real();
      complex6.conj();
      Complex.ofPolar(4260.332903, 268.109763);
      complex9.pow(1.0);
      // Undeclared exception!
      try { 
        Complex.parse("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Input too short, expected format '(x,y)' for input \"\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(0.3109992077726753, (-54.70724846528174));
      Complex complex1 = complex0.proj();
      complex0.I.hashCode();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.subtractImaginary(16.0);
      Complex complex5 = Complex.ofCartesian(0.3109992077726753, (-54.70724846528174));
      complex5.I.divide(0.3109992077726753);
      Complex complex6 = complex4.pow(complex0);
      complex3.ZERO.divideImaginary(0.3109992077726753);
      Complex complex7 = complex4.sinh();
      complex7.I.cos();
      complex6.ZERO.subtract(complex0);
      complex0.negate();
      complex4.ONE.sinh();
      complex4.nthRoot(3135);
      Complex complex8 = complex6.divide(16.0);
      complex1.ONE.tan();
      Complex.ofPolar((-54.70724846528174), 1346.21459544202);
      Complex complex9 = complex8.tan();
      Complex complex10 = complex0.atanh();
      complex10.I.sqrt();
      complex10.I.divideImaginary(0.3109992077726753);
      complex10.I.nthRoot(3135);
      complex3.acosh();
      Complex.ofPolar(1346.21459544202, (-621.0680688027));
      complex4.add(complex9);
      complex9.log();
      complex4.proj();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ofPolar((-2358.64296), (-0.8813735870195429));
      Complex complex1 = complex0.ONE.cos();
      complex1.ONE.negate();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.pow(complex2);
      Complex complex4 = complex2.multiplyImaginary((-0.8813735870195429));
      complex3.equals(complex4);
      Complex.ofCartesian((-0.8813735870195429), (-0.9999999999999971));
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.I;
      // Undeclared exception!
      try { 
        complex0.ONE.add((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      complex0.getReal();
      complex1.hashCode();
      Complex complex2 = complex0.multiplyImaginary(0.0);
      complex2.negate();
      complex2.arg();
      Complex complex3 = complex2.addImaginary(0.0);
      Complex complex4 = complex3.log();
      complex3.ONE.sqrt();
      Complex complex5 = complex3.ZERO.log();
      complex5.I.divideImaginary(0.0);
      complex5.subtract(0.0);
      Complex.ofPolar(268.109763, 1631.4133554570099);
      Complex complex6 = Complex.ofCis(0.0);
      complex4.isFinite();
      complex6.cosh();
      Complex.ofCis(5.9666725849601654E-154);
      // Undeclared exception!
      try { 
        complex3.add((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.subtract(0.707106552650154);
      Complex complex3 = complex1.subtract(2.2471164185778946E307);
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex2.negate();
      Complex complex6 = complex2.divide(complex0);
      complex2.norm();
      complex5.abs();
      Complex complex7 = complex6.asinh();
      complex1.ZERO.add(2558.76);
      Complex complex8 = complex1.add(complex4);
      complex2.log10();
      complex8.nthRoot((-1));
      complex4.sqrt();
      complex7.getImaginary();
      complex7.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-319.047112598));
      Complex complex1 = complex0.ZERO.subtractImaginary((-319.047112598));
      Complex complex2 = complex1.ZERO.add(0.0);
      Complex.ofCartesian(0.0, (-1925.346721651));
      Complex complex3 = complex0.ZERO.log10();
      complex1.isFinite();
      Complex complex4 = complex0.ZERO.sqrt();
      Complex complex5 = complex0.ONE.acosh();
      complex4.ZERO.pow(complex0);
      complex5.subtract(2.2471164185778946E307);
      Complex complex6 = complex2.subtract((-0.8414709848078965));
      Complex.ofPolar(1183.880571397867, (-0.6625286367698044));
      Complex complex7 = complex0.subtract(complex3);
      complex1.isFinite();
      Complex complex8 = complex7.cosh();
      Complex.ofCis((-319.047112598));
      complex3.add(complex0);
      complex6.sinh();
      complex4.isFinite();
      complex8.subtractImaginary((-0.8414709848078965));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.ofPolar((-134.58172886070543), (-134.58172886070543));
      Complex complex1 = complex0.ONE.divide(0.0);
      Complex complex2 = complex0.subtract(0.0);
      Complex complex3 = complex2.subtract(0.07734547924824986);
      Complex complex4 = Complex.ofPolar(842.224351, 0.0);
      complex0.subtract(complex3);
      complex4.cosh();
      Complex.ofCis((-45.25094302471358));
      complex4.add(complex1);
      complex0.sinh();
      complex1.pow(35.046968089785594);
      Complex complex5 = Complex.ofCartesian(42.07906658453672, 842.224351);
      complex0.nthRoot(1768);
      complex1.isInfinite();
      complex5.isNaN();
      complex2.log();
      complex0.pow(complex2);
      Complex complex6 = complex3.sin();
      complex6.exp();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      complex0.divideImaginary(0.0);
      complex0.I.acosh();
      Complex complex2 = complex0.ZERO.subtract((-9.578365559047597));
      complex2.ZERO.tanh();
      Complex.ofCis((-9.578365559047597));
      complex1.norm();
      complex2.I.pow(complex0);
      Complex complex3 = complex1.multiplyImaginary((-9.578365559047597));
      complex3.ONE.sin();
      complex2.subtractFrom(0.7080734182735712);
      complex3.divideImaginary(0.7080734182735712);
      Complex.ofPolar((-9.578365559047597), (-9.578365559047597));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ofCis(0.0);
      complex0.ZERO.subtractFrom(13.982781073724965);
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.I;
      complex1.sqrt();
      Complex complex3 = Complex.ZERO;
      complex3.proj();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(10.0, 1993.310459265);
      Complex complex1 = complex0.proj();
      complex0.I.hashCode();
      complex1.ONE.sqrt();
      Complex complex2 = complex0.subtractImaginary(16.0);
      Complex complex3 = complex2.ONE.log();
      complex3.I.divide(10.0);
      Complex complex4 = complex2.pow(complex0);
      Complex complex5 = complex2.sinh();
      complex5.I.cos();
      complex0.negate();
      Complex complex6 = complex4.divide(16.0);
      Complex.ofPolar(1993.310459265, 1346.21459544202);
      Complex complex7 = complex6.tan();
      Complex complex8 = complex0.atanh();
      complex8.I.sqrt();
      complex8.I.divideImaginary(10.0);
      complex1.acosh();
      Complex.ofPolar(1346.21459544202, (-621.0680688027));
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(10.0, 1993.310459265);
      Complex complex1 = complex0.proj();
      complex0.I.hashCode();
      Complex complex2 = complex1.ONE.sqrt();
      Complex complex3 = complex2.log();
      Complex complex4 = complex0.subtractImaginary(16.0);
      Complex complex5 = complex4.ONE.log();
      complex5.I.divide(10.0);
      Complex complex6 = complex4.pow(complex0);
      complex3.ZERO.divideImaginary(10.0);
      Complex complex7 = complex4.sinh();
      complex7.I.cos();
      complex6.ZERO.subtract(complex0);
      complex0.negate();
      complex4.ONE.sinh();
      complex4.nthRoot(3180);
      Complex complex8 = complex6.divide(16.0);
      complex1.ONE.tan();
      Complex.ofPolar(1993.310459265, 1346.21459544202);
      Complex complex9 = complex8.tan();
      Complex complex10 = complex0.atanh();
      complex10.I.sqrt();
      complex10.I.divideImaginary(10.0);
      complex10.I.nthRoot(3180);
      complex3.acosh();
      Complex.ofPolar(1346.21459544202, (-621.0680688027));
      complex4.add(complex9);
      complex9.log();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(1191.433, (-49.63180411322607));
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.multiply(1.1102230246251565E-16);
      complex1.hashCode();
      Complex complex3 = complex1.cos();
      Complex complex4 = complex1.add(complex2);
      complex4.multiply(complex3);
      complex2.conj();
      complex1.acosh();
      Complex.ofPolar(1191.433, (-3678.611));
      complex3.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(1.0, 1.0);
      Complex complex1 = Complex.ofCartesian((-748.86), 584.0);
      complex0.pow(complex1);
      complex1.subtractImaginary(1614.262411595);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      complex0.I.acosh();
      complex1.ZERO.tan();
      Complex complex2 = complex0.ZERO.subtract(1.0);
      complex2.ZERO.tanh();
      Complex.ofCis((-20.08857821846678));
      complex1.norm();
      complex2.I.pow(complex0);
      Complex complex3 = complex1.multiplyImaginary(1.0);
      complex3.ONE.sin();
      complex2.subtractFrom(0.7080734182735712);
      Complex complex4 = complex3.divideImaginary(0.7080734182735712);
      complex4.cos();
      complex3.multiplyImaginary((-20.08857821846678));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.subtract(0.707106552650154);
      Complex complex3 = complex1.subtract(2.2471164185778946E307);
      Complex.ofCartesian(0.707106552650154, 2.2471164185778946E307);
      complex2.negate();
      complex2.divide(complex0);
      complex3.sqrt();
      complex3.proj();
      Complex complex4 = complex3.multiplyImaginary(292.0);
      complex4.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian((-277.0), 3808.2348891);
      Complex complex1 = Complex.ofCis(3808.2348891);
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex1.log();
      Complex complex5 = complex2.divideImaginary((-0.8414709848078965));
      Complex.ofCis((-277.0));
      Complex complex6 = complex4.addImaginary(2.409919865102884E-181);
      Complex complex7 = complex1.negate();
      Complex complex8 = Complex.ofPolar((-277.0), (-277.0));
      Complex complex9 = complex8.divide(complex6);
      complex9.multiply(complex0);
      complex9.norm();
      complex9.abs();
      Complex complex10 = complex1.asinh();
      complex5.add(complex6);
      complex10.log10();
      complex7.nthRoot(44);
      complex3.sqrt();
      // Undeclared exception!
      try { 
        Complex.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.subtract(0.707106552650154);
      Complex complex3 = Complex.ofCis(215.17888503885365);
      Complex complex4 = complex3.proj();
      Complex complex5 = complex4.asinh();
      Complex complex6 = complex5.ZERO.multiply(complex1);
      complex1.abs();
      complex6.tanh();
      complex1.add(complex2);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      complex0.getReal();
      complex1.hashCode();
      Complex complex2 = complex0.multiplyImaginary(0.0);
      Complex complex3 = complex2.negate();
      complex2.arg();
      Complex complex4 = complex2.addImaginary(0.0);
      Complex complex5 = complex4.acosh();
      complex3.subtract(complex5);
      Complex.ofPolar(0.0, 1529.2336941506483);
      complex0.hashCode();
      complex3.log();
      Complex complex6 = Complex.ofCartesian(0.0603248278663833, 1529.2336941506483);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-319.047112598));
      Complex complex1 = complex0.ZERO.subtractImaginary((-319.047112598));
      Complex complex2 = complex0.cosh();
      Complex complex3 = Complex.ofCis(1.217935882374769);
      Complex complex4 = complex0.add(complex1);
      complex4.sinh();
      complex3.isFinite();
      complex1.isFinite();
      complex4.real();
      complex1.conj();
      Complex complex5 = Complex.ofPolar(0.1745593787369129, 1.217935882374769);
      complex5.pow((-879.58));
      complex2.conj();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-319.047112598));
      Complex complex1 = complex0.ZERO.subtractImaginary((-319.047112598));
      Complex complex2 = complex1.ZERO.add(0.0);
      Complex.ofCartesian(0.0, (-1925.346721651));
      Complex complex3 = complex0.ZERO.log10();
      complex1.isFinite();
      Complex complex4 = complex0.ZERO.sqrt();
      Complex complex5 = complex0.ONE.acosh();
      Complex complex6 = complex4.ZERO.pow(complex0);
      complex0.norm();
      Complex complex7 = complex0.tan();
      complex7.I.sin();
      Complex complex8 = complex6.ONE.divide(0.0);
      complex5.divide((-319.047112598));
      complex0.getReal();
      Complex complex9 = complex6.sqrt();
      complex9.I.subtract(complex5);
      complex9.addImaginary(935.0);
      Complex complex10 = complex8.subtract(complex3);
      Complex complex11 = complex0.add(368.55030432);
      Complex complex12 = complex11.ZERO.add(complex1);
      Complex complex13 = complex12.I.multiply((-3394.798049));
      complex5.isFinite();
      Complex complex14 = complex10.proj();
      complex14.I.hashCode();
      complex2.log10();
      complex14.asin();
      Complex complex15 = complex9.subtractImaginary(0.9999999999999999);
      complex8.nthRoot((-2862));
      complex13.abs();
      complex8.sinh();
      complex15.negate();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian((-277.0), 3808.2348891);
      Complex.ofCis(3808.2348891);
      Complex complex1 = complex0.acosh();
      complex1.ZERO.pow(complex0);
      complex1.ZERO.subtract(complex0);
      Complex complex2 = Complex.ofPolar((-277.0), 3808.2348891);
      complex2.I.hashCode();
      Complex complex3 = complex0.log();
      complex3.tanh();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.subtract(0.707106553);
      complex2.norm();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex0.sin();
      Complex complex5 = Complex.ofCartesian(2124.0, 0.0029688988758650716);
      Complex complex6 = complex5.divide(0.707106553);
      Complex complex7 = complex6.divide(805.18521);
      complex5.getReal();
      complex3.sqrt();
      Complex complex8 = complex4.subtract(complex3);
      complex8.addImaginary(935.0);
      Complex complex9 = complex7.subtract(complex5);
      Complex complex10 = complex9.add((-2752.2176786));
      Complex complex11 = complex2.add(complex6);
      Complex complex12 = complex10.multiply((-334.220157305082));
      complex5.isFinite();
      complex2.proj();
      complex12.hashCode();
      Complex complex13 = complex4.log10();
      complex13.asin();
      complex3.subtractImaginary(0.0029688988758650716);
      complex11.nthRoot((-2404));
      complex6.abs();
      // Undeclared exception!
      try { 
        Complex.parse("m[zeF`l/rEu?");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected start delimiter '(' for input \"m[zeF`l/rEu?\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(0.0, 0.0);
      Complex complex1 = Complex.ofPolar(1.7976931348623157E308, 0.005343073051379023);
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = Complex.ONE;
      complex3.isFinite();
      Complex complex4 = complex1.cosh();
      complex3.add(complex2);
      Complex complex5 = complex2.sinh();
      complex0.isFinite();
      Complex complex6 = Complex.ONE;
      complex4.real();
      complex4.conj();
      Complex complex7 = Complex.ofPolar(0.0, 0.0);
      complex5.pow(1.7976931348623157E308);
      complex7.exp();
      complex2.conj();
      Complex complex8 = complex3.cosh();
      complex8.norm();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-319.047112598));
      Complex complex1 = complex0.ZERO.subtractImaginary((-319.047112598));
      Complex complex2 = complex1.ZERO.add(0.12860077240193551);
      Complex complex3 = complex0.ZERO.log10();
      complex0.isInfinite();
      Complex complex4 = complex0.ONE.acosh();
      complex0.ZERO.pow(complex0);
      complex4.subtract(2.2471164185778946E307);
      complex2.subtract((-0.8414709848078965));
      Complex.ofPolar(1183.880571397867, (-0.6625286367698044));
      Complex complex5 = complex0.subtract(complex3);
      complex1.isFinite();
      Complex complex6 = complex5.cosh();
      Complex.ofCis((-319.047112598));
      complex3.add(complex0);
      complex0.isFinite();
      complex6.subtractImaginary((-0.8414709848078965));
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(0.0, 0.0);
      Complex complex1 = Complex.ofCartesian(358.78474326620994, 2.0);
      complex1.pow(1.7976931348623157E308);
      Complex complex2 = Complex.ofPolar(215.17888503885365, 215.17888503885365);
      Complex complex3 = complex2.add(complex0);
      complex3.ZERO.subtractFromImaginary(1.7976931348623157E308);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      complex0.getReal();
      complex1.hashCode();
      Complex complex2 = complex0.multiplyImaginary(0.0);
      Complex complex3 = complex2.negate();
      complex2.arg();
      Complex complex4 = complex2.addImaginary(0.0);
      Complex complex5 = complex4.log();
      complex4.ONE.sqrt();
      Complex complex6 = complex4.ZERO.log();
      Complex complex7 = complex6.I.divideImaginary(0.0);
      complex7.ONE.acosh();
      Complex complex8 = complex1.tanh();
      complex8.ZERO.divide(0.0);
      Complex complex9 = complex8.I.addImaginary(2.409919865102884E-181);
      Complex complex10 = complex9.I.negate();
      complex2.divide(complex5);
      complex2.norm();
      complex2.abs();
      Complex complex11 = complex9.asinh();
      Complex complex12 = complex11.ONE.add(complex10);
      complex3.log10();
      complex4.nthRoot(44);
      complex2.sqrt();
      complex12.subtractFromImaginary((-169.0));
      // Undeclared exception!
      try { 
        Complex.parse("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Input too short, expected format '(x,y)' for input \"\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex0.ONE.log10();
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.pow((double) 1197);
      complex3.ONE.nthRoot(1197);
      complex2.isInfinite();
      complex3.isNaN();
      complex0.log();
      complex5.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ofCis(3.8657822478866);
      Complex complex1 = complex0.atanh();
      complex1.I.subtract(complex0);
      Complex complex2 = complex0.divide(3.8657822478866);
      Complex complex3 = complex2.ZERO.divideImaginary(3.8657822478866);
      Complex complex4 = complex3.ONE.addImaginary(2098.332060849);
      Complex complex5 = complex3.subtract(3.8657822478866);
      complex5.ZERO.tan();
      complex2.I.sin();
      Complex complex6 = complex4.ONE.pow(1.0);
      Complex complex7 = Complex.ofPolar(1.0, 1.0);
      complex6.ONE.add(complex7);
      Complex.ofCartesian((-748.86), 584.0);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      complex0.getReal();
      complex1.hashCode();
      Complex complex2 = complex0.multiplyImaginary(0.0);
      Complex complex3 = complex2.negate();
      complex2.arg();
      Complex complex4 = complex2.addImaginary(0.0);
      Complex complex5 = complex4.log();
      complex4.ONE.sqrt();
      Complex complex6 = complex4.ZERO.log();
      complex6.I.divideImaginary(0.0);
      complex1.tanh();
      Complex complex7 = complex1.I.negate();
      complex2.divide(complex5);
      complex2.norm();
      complex2.abs();
      Complex complex8 = complex5.asinh();
      complex8.ONE.add(complex7);
      complex3.log10();
      complex4.nthRoot(44);
      complex2.sqrt();
      // Undeclared exception!
      try { 
        Complex.parse("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Input too short, expected format '(x,y)' for input \"\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ofCis(538.0);
      complex0.ZERO.isFinite();
      Complex complex1 = Complex.ofCartesian(538.0, (-277.0));
      Complex complex2 = complex1.multiply(1975.3418884229443);
      complex0.isFinite();
      complex0.getReal();
      complex0.isInfinite();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(358.78474326620994, 358.78474326620994);
      Complex complex1 = complex0.ONE.divide(0.0);
      complex0.proj();
      Complex complex2 = complex0.asinh();
      complex2.isNaN();
      Complex complex3 = complex2.multiply(2.2250738585072014E-308);
      complex1.acosh();
      complex3.imag();
      complex0.subtractFromImaginary(6.283185307179586);
      complex3.proj();
      Complex complex4 = complex0.divide(complex1);
      Complex.ofPolar(0.0, 0.0);
      complex3.add(complex4);
      Complex complex5 = complex2.subtractFromImaginary(6.283185307179586);
      complex5.cosh();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex3.subtractFrom(1197);
      complex4.pow((double) 1197);
      complex3.ONE.nthRoot(1197);
      complex4.isFinite();
      Complex complex5 = complex4.pow(1416.0);
      complex4.nthRoot(1197);
      complex5.isInfinite();
      complex5.isNaN();
      complex1.log();
      complex2.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ofPolar((-1925.346721651), 8.988465674311579E307);
      complex0.multiply(2243.65);
      Complex complex1 = Complex.ofCis((-633.652));
      complex1.acosh();
      Complex complex2 = Complex.ofCis((-1925.346721651));
      complex1.imag();
      Complex complex3 = complex2.subtractFromImaginary(6.283185307179586);
      complex1.proj();
      Complex complex4 = complex3.divide(complex0);
      Complex.ofPolar(1384.2314368889565, 1384.2314368889565);
      Complex complex5 = Complex.ONE;
      complex5.sqrt();
      complex3.add(complex4);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tanh();
      complex0.getReal();
      complex1.hashCode();
      Complex complex2 = complex0.multiplyImaginary(0.0);
      Complex complex3 = complex2.negate();
      complex2.arg();
      Complex complex4 = complex2.addImaginary(0.0);
      Complex complex5 = complex4.log();
      complex4.ONE.sqrt();
      Complex complex6 = complex4.ZERO.log();
      complex6.I.divideImaginary(0.0);
      Complex complex7 = complex1.tanh();
      Complex complex8 = complex7.I.addImaginary(2.409919865102884E-181);
      Complex complex9 = complex8.I.negate();
      complex2.divide(complex5);
      complex2.norm();
      complex2.abs();
      Complex complex10 = complex8.asinh();
      complex10.ONE.add(complex9);
      complex3.log10();
      complex4.nthRoot(44);
      complex2.sqrt();
      // Undeclared exception!
      try { 
        Complex.parse("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Input too short, expected format '(x,y)' for input \"\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-320.6622081703141));
      Complex complex1 = complex0.ZERO.subtractImaginary((-320.6622081703141));
      Complex complex2 = complex1.ZERO.add(0.0);
      Complex.ofCartesian(0.0, (-1925.346721651));
      Complex complex3 = complex0.ZERO.log10();
      complex1.isFinite();
      Complex complex4 = complex0.ZERO.sqrt();
      Complex complex5 = complex0.ONE.acosh();
      Complex complex6 = complex4.ZERO.pow(complex0);
      complex0.norm();
      Complex complex7 = complex0.tan();
      Complex complex8 = complex7.I.sin();
      complex5.divide((-320.6622081703141));
      complex0.getReal();
      Complex complex9 = complex6.sqrt();
      complex9.I.subtract(complex5);
      complex9.addImaginary(935.0);
      Complex complex10 = complex8.subtract(complex3);
      Complex complex11 = complex0.add(368.55030432);
      Complex complex12 = complex11.ZERO.add(complex1);
      Complex complex13 = complex12.I.multiply((-3394.798049));
      complex5.isFinite();
      Complex complex14 = complex10.proj();
      complex14.I.hashCode();
      complex2.log10();
      complex14.asin();
      complex9.subtractImaginary(1.0);
      complex6.nthRoot((-2862));
      complex13.abs();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian((-277.0), 3808.2348891);
      Complex.ofCis(3808.2348891);
      Complex complex1 = complex0.acosh();
      complex1.ZERO.subtract(complex0);
      Complex complex2 = Complex.ofPolar((-277.0), 3808.2348891);
      complex2.I.hashCode();
      Complex complex3 = complex0.log();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.ofPolar((-564.926595163783), 890.49);
      Complex complex1 = complex0.ZERO.cosh();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex2.ONE.subtractImaginary(552.813);
      complex0.isFinite();
      complex0.imag();
      Complex complex4 = complex0.proj();
      Complex complex5 = complex4.ONE.add(complex1);
      Complex complex6 = complex0.conj();
      Complex complex7 = complex3.cos();
      Complex complex8 = complex0.divide(0.0);
      Complex complex9 = complex8.proj();
      Complex complex10 = complex9.proj();
      complex10.I.pow(complex3);
      Complex complex11 = complex6.divideImaginary(Double.NaN);
      Complex complex12 = complex6.tan();
      Complex complex13 = complex6.tanh();
      Complex complex14 = complex13.addImaginary(0.0);
      complex0.tanh();
      complex10.sin();
      Complex complex15 = complex11.pow((-564.926595163783));
      complex15.ONE.divideImaginary((-564.926595163783));
      complex12.hashCode();
      complex12.sinh();
      complex7.divideImaginary(552.813);
      complex12.isFinite();
      complex15.log10();
      complex14.multiplyImaginary((-2077.143));
      complex5.atanh();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.ofCis(3.8657822478866);
      Complex complex1 = complex0.atanh();
      complex1.I.subtract(complex0);
      Complex complex2 = complex0.divide(3.8657822478866);
      Complex complex3 = complex2.ZERO.divideImaginary(0.0);
      complex3.ONE.addImaginary(2098.332060849);
      Complex complex4 = complex3.subtract(3.8657822478866);
      complex4.ZERO.tan();
      Complex complex5 = complex2.I.sin();
      Complex complex6 = complex0.divide(1.0);
      Complex complex7 = complex6.ONE.pow(1.0);
      Complex complex8 = Complex.ofPolar(1.0, 1.0);
      Complex complex9 = complex7.ONE.add(complex8);
      Complex complex10 = complex7.ZERO.tanh();
      complex5.I.subtract(0.0);
      complex10.ONE.subtract(1.0);
      Complex complex11 = complex5.ZERO.subtract(1.0);
      complex11.ONE.proj();
      Complex complex12 = Complex.ofPolar(0.0, 2098.332060849);
      Complex complex13 = complex6.ONE.subtract(complex5);
      complex13.ZERO.isFinite();
      Complex complex14 = complex5.cosh();
      complex2.add(complex8);
      complex14.I.sinh();
      complex1.isFinite();
      complex14.isFinite();
      complex0.real();
      complex13.conj();
      Complex.ofPolar(0.0, 3.8657822478866);
      complex0.pow(0.0);
      complex9.conj();
      complex12.addImaginary(0.0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.conj();
      Complex complex3 = complex0.proj();
      Complex complex4 = complex3.proj();
      complex4.ZERO.add(complex0);
      Complex complex5 = complex2.atanh();
      complex1.real();
      complex1.abs();
      Complex complex6 = Complex.I;
      complex6.isInfinite();
      complex1.exp();
      complex2.acosh();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-1.0));
      complex0.I.hashCode();
      Complex complex1 = complex0.subtractFrom((-1.0));
      complex0.ONE.isFinite();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.ONE.multiply(complex1);
      Complex complex4 = complex1.subtractFrom((-1.0));
      complex4.ZERO.toString();
      complex3.ONE.add((-1.0));
      Complex complex5 = Complex.ofPolar(0.6625286367698044, 4.0);
      complex2.sinh();
      complex3.nthRoot(274);
      complex3.tanh();
      complex1.getImaginary();
      Complex complex6 = Complex.ofCis(0.6625286367698044);
      complex6.proj();
      complex1.subtract((-1665.5474));
      complex5.subtractImaginary((-888.506));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.ofCis(3640.118589);
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.ONE.divideImaginary(3640.118589);
      Complex complex5 = complex0.ZERO.subtractFromImaginary(1149.8);
      Complex complex6 = complex0.ZERO.add(3640.118589);
      Complex complex7 = complex1.ONE.tanh();
      Complex complex8 = complex7.I.subtractImaginary((-1.0));
      complex2.multiply(1149.8);
      Complex complex9 = complex7.atan();
      complex4.conj();
      Complex complex10 = Complex.ZERO;
      complex10.proj();
      complex6.proj();
      Complex complex11 = complex3.atanh();
      Complex complex12 = Complex.ZERO;
      complex12.real();
      complex11.abs();
      complex8.isInfinite();
      complex5.exp();
      complex9.arg();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian((-277.0), 3808.2348891);
      Complex complex1 = Complex.ofCis(3808.2348891);
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.sqrt();
      Complex complex4 = complex2.atanh();
      complex1.subtract(complex0);
      Complex complex5 = complex4.divide(3808.2348891);
      complex5.getImaginary();
      complex3.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.ofCis(3640.118589);
      double double0 = 19.018909754077157;
      Complex complex1 = complex0.divide(19.018909754077157);
      complex1.ZERO.multiply(complex0);
      Complex complex2 = complex1.sqrt();
      complex2.ONE.divideImaginary(3640.118589);
      complex0.ZERO.subtractFromImaginary(1149.8);
      complex0.ZERO.add(3640.118589);
      complex1.ONE.tanh();
      Complex.ofCis(3640.118589);
      String string0 = "Expected separator between two numbers";
      // Undeclared exception!
      try { 
        Complex.parse("Expected separator between two numbers");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected start delimiter '(' for input \"Expected separator between two numbers\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ZERO.addImaginary(1274.9635);
      Complex complex3 = complex0.I.exp();
      Complex complex4 = complex0.I.divide(complex2);
      Complex complex5 = complex1.divideImaginary((-1889.80172));
      Complex complex6 = complex5.ONE.add(complex1);
      complex2.ONE.add(2311.553353);
      Complex complex7 = complex0.ONE.conj();
      complex6.ZERO.isFinite();
      Complex complex8 = complex2.add(complex7);
      Complex complex9 = Complex.ZERO;
      complex8.I.subtract(complex9);
      complex2.pow(complex5);
      Complex complex10 = complex8.multiply(complex4);
      complex10.ZERO.add((-1.0));
      complex1.isNaN();
      Complex complex11 = complex1.atan();
      Complex complex12 = complex10.log10();
      Complex complex13 = complex3.conj();
      complex13.proj();
      complex12.proj();
      Complex complex14 = Complex.ofCartesian((-1889.80172), 2311.553353);
      complex11.real();
      complex4.abs();
      complex14.isInfinite();
      Complex.ofCis(1274.9635);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.ZERO.addImaginary(1274.9635);
      complex0.I.exp();
      complex0.I.divide(complex2);
      Complex complex3 = complex1.divideImaginary((-1889.80172));
      complex3.ONE.add(complex1);
      complex2.ONE.add(2311.553353);
      complex0.ONE.conj();
      complex2.subtract(2.0);
      complex3.subtractImaginary(0.0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.ofCis(312.8595194952471);
      Complex complex1 = complex0.atanh();
      complex1.I.subtract(complex0);
      Complex complex2 = complex0.divide(312.8595194952471);
      Complex complex3 = complex2.ZERO.divideImaginary(0.0);
      Complex complex4 = complex3.ONE.addImaginary(2098.332060849);
      Complex complex5 = Complex.ONE;
      Complex.ofCartesian(312.8595194952471, 312.8595194952471);
      complex4.ONE.pow(2098.332060849);
      Complex.ofPolar(2098.332060849, 1.0);
      Complex complex6 = Complex.I;
      Complex.ofCartesian((-748.86), 312.8595194952471);
      complex3.atan();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      complex1.subtract(0.707106552650154);
      Complex complex2 = complex1.subtract(2.2471164185778946E307);
      Complex complex3 = complex0.subtract((-0.8414709848078965));
      Complex complex4 = Complex.ofPolar(268.109763, 5.9666725849601654E-154);
      Complex complex5 = complex1.subtract(complex3);
      complex3.isFinite();
      Complex complex6 = complex2.cosh();
      Complex complex7 = Complex.ofCis(805.18521);
      Complex complex8 = complex7.add(complex0);
      Complex complex9 = complex5.sinh();
      complex4.isFinite();
      complex9.isFinite();
      complex0.real();
      complex6.conj();
      Complex.ofPolar(1.0, 268.109763);
      complex1.pow(2.2471164185778946E307);
      complex8.conj();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.ofCis(3640.118589);
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = complex1.ZERO.multiply(complex0);
      complex1.sqrt();
      Complex.ofPolar((-1.0), (-1.0));
      complex2.pow(2.409919865102884E-181);
      complex0.conj();
      complex2.negate();
      complex1.isNaN();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-1.0));
      Complex complex1 = complex0.sin();
      complex0.I.acosh();
      Complex complex2 = complex0.ZERO.subtract(1.0);
      complex2.ZERO.tanh();
      Complex.ofCis(0.0);
      complex1.norm();
      complex2.I.pow(complex0);
      Complex complex3 = complex1.multiplyImaginary(1559.52);
      complex3.ONE.sin();
      complex2.subtractFrom(1.1564002299199505);
      complex2.sin();
      complex3.divideImaginary(1.1564002299199505);
      complex2.real();
      Complex complex4 = complex3.multiplyImaginary(1429.21896961728);
      complex4.addImaginary(0.5);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sin();
      complex0.I.acosh();
      Complex complex2 = complex0.ZERO.subtract(1.0);
      complex2.ZERO.tanh();
      Complex.ofCis(0.0);
      complex1.norm();
      complex2.I.pow(complex0);
      Complex complex3 = complex1.multiplyImaginary(1.0);
      complex3.ONE.sin();
      complex2.subtractFrom(0.7080734182735712);
      complex3.divideImaginary(0.7080734182735712);
      complex3.multiplyImaginary(0.0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.ofPolar((-564.926595163783), 890.49);
      complex0.nthRoot((-239));
      complex0.isInfinite();
      Complex complex1 = Complex.ofCartesian(890.49, (-1308.125882));
      complex1.isNaN();
      complex0.log();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-319.047112598));
      assertNotNull(complex0);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.ZERO.subtractImaginary((-319.047112598));
      assertNotNull(complex1);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(101791.06005712089, complex1.norm(), 0.01);
      assertEquals(319.047112598, complex1.abs(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(319.047112598, complex1.imag(), 0.01);
      assertEquals(319.047112598, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      
      Complex complex2 = complex1.ZERO.add(0.0);
      assertNotNull(complex2);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(101791.06005712089, complex1.norm(), 0.01);
      assertEquals(319.047112598, complex1.abs(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(319.047112598, complex1.imag(), 0.01);
      assertEquals(319.047112598, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      
      Complex complex3 = Complex.ofCartesian(0.0, (-1925.346721651));
      assertNotNull(complex3);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(3706959.9985722536, complex3.norm(), 0.01);
      assertEquals((-1925.346721651), complex3.getImaginary(), 0.01);
      assertEquals((-1925.346721651), complex3.imag(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals((-1.5707963267948966), complex3.arg(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(1925.346721651, complex3.abs(), 0.01);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      
      Complex complex4 = complex0.ZERO.log10();
      assertNotNull(complex4);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.abs(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex4.real(), 0.01);
      assertTrue(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.norm(), 0.01);
      assertFalse(complex4.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      
      boolean boolean0 = complex1.isFinite();
      assertTrue(boolean0);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(101791.06005712089, complex1.norm(), 0.01);
      assertEquals(319.047112598, complex1.abs(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(319.047112598, complex1.imag(), 0.01);
      assertEquals(319.047112598, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      
      Complex complex5 = complex4.multiply(complex0);
      assertNotNull(complex5);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.abs(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex4.real(), 0.01);
      assertTrue(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.norm(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex5.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex5.getReal(), 0.01);
      assertEquals((-2.356194490192345), complex5.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex5.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex5.abs(), 0.01);
      assertTrue(complex5.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex5.imag(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex5.real(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      
      Complex complex6 = complex0.ZERO.sqrt();
      assertNotNull(complex6);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.abs(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.real(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      
      Complex complex7 = complex0.ONE.acosh();
      assertNotNull(complex7);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex7.abs(), 0.01);
      assertEquals(0.0, complex7.real(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.arg(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.norm(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      
      Complex complex8 = complex6.ZERO.pow(complex0);
      assertNotNull(complex8);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.abs(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.real(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.norm(), 0.01);
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertTrue(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.abs(), 0.01);
      assertEquals(Double.NaN, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      
      double double0 = complex0.norm();
      assertEquals(0.9999999999999999, double0, 0.01);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      
      Complex complex9 = complex0.tan();
      assertNotNull(complex9);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertEquals(1.473730514518458, complex9.arg(), 0.01);
      assertEquals(0.7649892364604219, complex9.imag(), 0.01);
      assertEquals(0.5907570515820363, complex9.norm(), 0.01);
      assertEquals(0.07448838622051751, complex9.real(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(0.7649892364604219, complex9.getImaginary(), 0.01);
      assertEquals(0.7686072154111203, complex9.abs(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(0.07448838622051751, complex9.getReal(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex2);
      
      Complex complex10 = complex9.I.sin();
      assertNotNull(complex10);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertEquals(1.473730514518458, complex9.arg(), 0.01);
      assertEquals(0.7649892364604219, complex9.imag(), 0.01);
      assertEquals(0.5907570515820363, complex9.norm(), 0.01);
      assertEquals(0.07448838622051751, complex9.real(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(0.7649892364604219, complex9.getImaginary(), 0.01);
      assertEquals(0.7686072154111203, complex9.abs(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(0.07448838622051751, complex9.getReal(), 0.01);
      assertEquals(1.1752011936438014, complex10.abs(), 0.01);
      assertEquals(1.5707963267948966, complex10.arg(), 0.01);
      assertEquals(1.1752011936438014, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(1.3810978455418155, complex10.norm(), 0.01);
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(1.1752011936438014, complex10.imag(), 0.01);
      assertEquals(0.0, complex10.real(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex2);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex9);
      
      Complex complex11 = complex8.ONE.divide(0.0);
      assertNotNull(complex11);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.abs(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.real(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.norm(), 0.01);
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertTrue(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.abs(), 0.01);
      assertEquals(Double.NaN, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertTrue(complex11.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex11.real(), 0.01);
      assertEquals(Double.NaN, complex11.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.abs(), 0.01);
      assertEquals(Double.NaN, complex11.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.norm(), 0.01);
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isNaN());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex7);
      
      Complex complex12 = complex7.divide((-319.047112598));
      assertNotNull(complex12);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex7.abs(), 0.01);
      assertEquals(0.0, complex7.real(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.arg(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.norm(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(-0.0, complex12.getImaginary(), 0.01);
      assertEquals(-0.0, complex12.getReal(), 0.01);
      assertFalse(complex12.isNaN());
      assertEquals(0.0, complex12.norm(), 0.01);
      assertEquals(-0.0, complex12.imag(), 0.01);
      assertEquals(0.0, complex12.abs(), 0.01);
      assertEquals(-0.0, complex12.real(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals((-3.141592653589793), complex12.arg(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex0);
      
      double double1 = complex0.getReal();
      assertEquals(0.1745593787369129, double1, 0.01);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      
      Complex complex13 = complex8.sqrt();
      assertNotNull(complex13);
      assertEquals(Double.NaN, complex13.norm(), 0.01);
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertEquals(Double.NaN, complex13.imag(), 0.01);
      assertEquals(Double.NaN, complex13.real(), 0.01);
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals(Double.NaN, complex13.arg(), 0.01);
      assertEquals(Double.NaN, complex13.abs(), 0.01);
      assertTrue(complex13.isNaN());
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.abs(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.real(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.norm(), 0.01);
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertTrue(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.abs(), 0.01);
      assertEquals(Double.NaN, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex4);
      assertSame(complex13, complex8);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertSame(complex8, complex13);
      
      Complex complex14 = complex13.I.subtract(complex7);
      assertNotNull(complex14);
      assertEquals(Double.NaN, complex13.norm(), 0.01);
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertEquals(Double.NaN, complex13.imag(), 0.01);
      assertEquals(Double.NaN, complex13.real(), 0.01);
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals(Double.NaN, complex13.arg(), 0.01);
      assertEquals(Double.NaN, complex13.abs(), 0.01);
      assertTrue(complex13.isNaN());
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex14.abs(), 0.01);
      assertEquals(0.0, complex14.real(), 0.01);
      assertEquals(1.0, complex14.norm(), 0.01);
      assertEquals(1.0, complex14.getImaginary(), 0.01);
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertEquals(1.0, complex14.imag(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex14.isNaN());
      assertEquals(1.5707963267948966, complex14.arg(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.abs(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.real(), 0.01);
      assertEquals(0.0, complex7.abs(), 0.01);
      assertEquals(0.0, complex7.real(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.arg(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.norm(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.norm(), 0.01);
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertTrue(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.abs(), 0.01);
      assertEquals(Double.NaN, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex4);
      assertSame(complex13, complex8);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex13);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertSame(complex8, complex13);
      
      Complex complex15 = complex13.addImaginary(935.0);
      assertNotNull(complex15);
      assertEquals(Double.NaN, complex13.norm(), 0.01);
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertEquals(Double.NaN, complex13.imag(), 0.01);
      assertEquals(Double.NaN, complex13.real(), 0.01);
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals(Double.NaN, complex13.arg(), 0.01);
      assertEquals(Double.NaN, complex13.abs(), 0.01);
      assertTrue(complex13.isNaN());
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(Double.NaN, complex15.arg(), 0.01);
      assertEquals(Double.NaN, complex15.imag(), 0.01);
      assertEquals(Double.NaN, complex15.real(), 0.01);
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex15.norm(), 0.01);
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertEquals(Double.NaN, complex15.abs(), 0.01);
      assertTrue(complex15.isNaN());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.abs(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.real(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.norm(), 0.01);
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertTrue(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.abs(), 0.01);
      assertEquals(Double.NaN, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex4);
      assertSame(complex13, complex8);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex15);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex6);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertSame(complex8, complex13);
      
      Complex complex16 = complex11.subtract(complex4);
      assertNotNull(complex16);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex16.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex16.arg(), 0.01);
      assertTrue(complex16.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex16.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex16.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex16.abs(), 0.01);
      assertEquals(Double.NaN, complex16.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.abs(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex4.real(), 0.01);
      assertTrue(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.norm(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.abs(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.real(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.norm(), 0.01);
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertTrue(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.abs(), 0.01);
      assertEquals(Double.NaN, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertTrue(complex11.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex11.real(), 0.01);
      assertEquals(Double.NaN, complex11.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.abs(), 0.01);
      assertEquals(Double.NaN, complex11.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.norm(), 0.01);
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isNaN());
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex4);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex7);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex16);
      assertSame(complex8, complex13);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex14);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex15);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex16);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex13);
      assertNotSame(complex11, complex7);
      
      Complex complex17 = complex0.add(368.55030432);
      assertNotNull(complex17);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertEquals(0.0026704038847592576, complex17.arg(), 0.01);
      assertFalse(complex17.isNaN());
      assertFalse(complex17.isInfinite());
      assertEquals(0.98464664895331, complex17.getImaginary(), 0.01);
      assertEquals(0.98464664895331, complex17.imag(), 0.01);
      assertEquals(368.7248636987369, complex17.getReal(), 0.01);
      assertEquals(368.7248636987369, complex17.real(), 0.01);
      assertEquals(368.7261784016364, complex17.abs(), 0.01);
      assertEquals(135958.99463867542, complex17.norm(), 0.01);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex4);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex13);
      
      Complex complex18 = complex17.ZERO.add(complex1);
      assertNotNull(complex18);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(101791.06005712089, complex1.norm(), 0.01);
      assertEquals(319.047112598, complex1.abs(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(319.047112598, complex1.imag(), 0.01);
      assertEquals(319.047112598, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0026704038847592576, complex17.arg(), 0.01);
      assertFalse(complex17.isNaN());
      assertFalse(complex17.isInfinite());
      assertEquals(0.98464664895331, complex17.getImaginary(), 0.01);
      assertEquals(0.98464664895331, complex17.imag(), 0.01);
      assertEquals(368.7248636987369, complex17.getReal(), 0.01);
      assertEquals(368.7248636987369, complex17.real(), 0.01);
      assertEquals(368.7261784016364, complex17.abs(), 0.01);
      assertEquals(135958.99463867542, complex17.norm(), 0.01);
      assertEquals(1.5707963267948966, complex18.arg(), 0.01);
      assertEquals(0.0, complex18.real(), 0.01);
      assertEquals(319.047112598, complex18.imag(), 0.01);
      assertEquals(0.0, complex18.getReal(), 0.01);
      assertFalse(complex18.isInfinite());
      assertFalse(complex18.isNaN());
      assertEquals(319.047112598, complex18.getImaginary(), 0.01);
      assertEquals(101791.06005712089, complex18.norm(), 0.01);
      assertEquals(319.047112598, complex18.abs(), 0.01);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex16);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex18);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex13);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex1);
      
      Complex complex19 = complex18.I.multiply((-3394.798049));
      assertNotNull(complex19);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(101791.06005712089, complex1.norm(), 0.01);
      assertEquals(319.047112598, complex1.abs(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(319.047112598, complex1.imag(), 0.01);
      assertEquals(319.047112598, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0026704038847592576, complex17.arg(), 0.01);
      assertFalse(complex17.isNaN());
      assertFalse(complex17.isInfinite());
      assertEquals(0.98464664895331, complex17.getImaginary(), 0.01);
      assertEquals(0.98464664895331, complex17.imag(), 0.01);
      assertEquals(368.7248636987369, complex17.getReal(), 0.01);
      assertEquals(368.7248636987369, complex17.real(), 0.01);
      assertEquals(368.7261784016364, complex17.abs(), 0.01);
      assertEquals(135958.99463867542, complex17.norm(), 0.01);
      assertEquals(1.5707963267948966, complex18.arg(), 0.01);
      assertEquals(0.0, complex18.real(), 0.01);
      assertEquals(319.047112598, complex18.imag(), 0.01);
      assertEquals(0.0, complex18.getReal(), 0.01);
      assertFalse(complex18.isInfinite());
      assertFalse(complex18.isNaN());
      assertEquals(319.047112598, complex18.getImaginary(), 0.01);
      assertEquals(101791.06005712089, complex18.norm(), 0.01);
      assertEquals(319.047112598, complex18.abs(), 0.01);
      assertEquals((-3394.798049), complex19.imag(), 0.01);
      assertEquals(-0.0, complex19.getReal(), 0.01);
      assertEquals(1.1524653793494206E7, complex19.norm(), 0.01);
      assertFalse(complex19.isNaN());
      assertEquals((-3394.798049), complex19.getImaginary(), 0.01);
      assertEquals(3394.798049, complex19.abs(), 0.01);
      assertEquals(-0.0, complex19.real(), 0.01);
      assertFalse(complex19.isInfinite());
      assertEquals((-1.5707963267948966), complex19.arg(), 0.01);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex16);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex19);
      assertNotSame(complex17, complex18);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex13);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex19);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex1);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex13);
      
      boolean boolean1 = complex7.isFinite();
      assertTrue(boolean1);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex7.abs(), 0.01);
      assertEquals(0.0, complex7.real(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.arg(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.norm(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex2);
      
      Complex complex20 = complex16.proj();
      assertNotNull(complex20);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex16.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex16.arg(), 0.01);
      assertTrue(complex16.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex16.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex16.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex16.abs(), 0.01);
      assertEquals(Double.NaN, complex16.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.abs(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex4.real(), 0.01);
      assertTrue(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.norm(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.abs(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.real(), 0.01);
      assertTrue(complex20.isInfinite());
      assertEquals(-0.0, complex20.getImaginary(), 0.01);
      assertEquals(-0.0, complex20.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex20.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex20.getReal(), 0.01);
      assertEquals(-0.0, complex20.arg(), 0.01);
      assertFalse(complex20.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex20.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex20.abs(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.norm(), 0.01);
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertTrue(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.abs(), 0.01);
      assertEquals(Double.NaN, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertTrue(complex11.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex11.real(), 0.01);
      assertEquals(Double.NaN, complex11.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.abs(), 0.01);
      assertEquals(Double.NaN, complex11.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.norm(), 0.01);
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isNaN());
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex19);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex18);
      assertNotSame(complex16, complex20);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex17);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex20);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex7);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex10);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex20);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex19);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex16);
      assertSame(complex8, complex13);
      assertNotSame(complex11, complex18);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex14);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex15);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex16);
      assertNotSame(complex11, complex20);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex17);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex13);
      assertNotSame(complex11, complex19);
      assertNotSame(complex11, complex7);
      
      complex20.I.hashCode();
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex16.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex16.arg(), 0.01);
      assertTrue(complex16.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex16.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex16.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex16.abs(), 0.01);
      assertEquals(Double.NaN, complex16.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.abs(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex4.real(), 0.01);
      assertTrue(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.norm(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.abs(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.real(), 0.01);
      assertTrue(complex20.isInfinite());
      assertEquals(-0.0, complex20.getImaginary(), 0.01);
      assertEquals(-0.0, complex20.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex20.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex20.getReal(), 0.01);
      assertEquals(-0.0, complex20.arg(), 0.01);
      assertFalse(complex20.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex20.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex20.abs(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.norm(), 0.01);
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertTrue(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.abs(), 0.01);
      assertEquals(Double.NaN, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertTrue(complex11.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex11.real(), 0.01);
      assertEquals(Double.NaN, complex11.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.abs(), 0.01);
      assertEquals(Double.NaN, complex11.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.norm(), 0.01);
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isNaN());
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex19);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex18);
      assertNotSame(complex16, complex20);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex17);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex20);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex7);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex10);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex20);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex19);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex16);
      assertSame(complex8, complex13);
      assertNotSame(complex11, complex18);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex14);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex15);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex16);
      assertNotSame(complex11, complex20);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex17);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex13);
      assertNotSame(complex11, complex19);
      assertNotSame(complex11, complex7);
      
      Complex complex21 = complex2.log10();
      assertNotNull(complex21);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(101791.06005712089, complex1.norm(), 0.01);
      assertEquals(319.047112598, complex1.abs(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(319.047112598, complex1.imag(), 0.01);
      assertEquals(319.047112598, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex21.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex21.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex21.abs(), 0.01);
      assertFalse(complex21.isNaN());
      assertEquals(0.0, complex21.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex21.getReal(), 0.01);
      assertEquals(3.141592653589793, complex21.arg(), 0.01);
      assertEquals(0.0, complex21.imag(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex21.real(), 0.01);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex21);
      assertNotSame(complex1, complex16);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex21);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex20);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex11);
      assertNotSame(complex21, complex9);
      assertNotSame(complex21, complex11);
      assertNotSame(complex21, complex18);
      assertNotSame(complex21, complex10);
      assertNotSame(complex21, complex4);
      assertNotSame(complex21, complex14);
      assertNotSame(complex21, complex0);
      assertNotSame(complex21, complex3);
      assertNotSame(complex21, complex8);
      assertNotSame(complex21, complex6);
      assertNotSame(complex21, complex2);
      assertNotSame(complex21, complex5);
      assertNotSame(complex21, complex16);
      assertNotSame(complex21, complex20);
      assertNotSame(complex21, complex17);
      assertNotSame(complex21, complex13);
      assertNotSame(complex21, complex19);
      assertNotSame(complex21, complex1);
      assertNotSame(complex21, complex7);
      assertNotSame(complex21, complex12);
      assertNotSame(complex21, complex15);
      
      Complex complex22 = complex20.asin();
      assertNotNull(complex22);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex16.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex16.arg(), 0.01);
      assertTrue(complex16.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex16.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex16.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex16.abs(), 0.01);
      assertEquals(Double.NaN, complex16.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.abs(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex4.real(), 0.01);
      assertTrue(complex4.isInfinite());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.norm(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.abs(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.real(), 0.01);
      assertTrue(complex20.isInfinite());
      assertEquals(-0.0, complex20.getImaginary(), 0.01);
      assertEquals(-0.0, complex20.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex20.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex20.getReal(), 0.01);
      assertEquals(-0.0, complex20.arg(), 0.01);
      assertFalse(complex20.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex20.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex20.abs(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.norm(), 0.01);
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertTrue(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.abs(), 0.01);
      assertEquals(Double.NaN, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertEquals((-1.5707963267948966), complex22.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex22.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex22.abs(), 0.01);
      assertFalse(complex22.isNaN());
      assertEquals(1.5707963267948966, complex22.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex22.imag(), 0.01);
      assertTrue(complex22.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex22.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex22.real(), 0.01);
      assertTrue(complex11.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex11.real(), 0.01);
      assertEquals(Double.NaN, complex11.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.abs(), 0.01);
      assertEquals(Double.NaN, complex11.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.norm(), 0.01);
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isNaN());
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex16, complex22);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex21);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex19);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex18);
      assertNotSame(complex16, complex20);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex17);
      assertNotSame(complex4, complex22);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex21);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex20);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex7);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex21);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex22);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex21);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex22);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex10);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex20);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex22);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex19);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex21);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex16);
      assertSame(complex8, complex13);
      assertNotSame(complex22, complex1);
      assertNotSame(complex22, complex13);
      assertNotSame(complex22, complex18);
      assertNotSame(complex22, complex8);
      assertNotSame(complex22, complex6);
      assertNotSame(complex22, complex4);
      assertNotSame(complex22, complex14);
      assertNotSame(complex22, complex20);
      assertNotSame(complex22, complex3);
      assertNotSame(complex22, complex7);
      assertNotSame(complex22, complex17);
      assertNotSame(complex22, complex15);
      assertNotSame(complex22, complex19);
      assertNotSame(complex22, complex0);
      assertNotSame(complex22, complex5);
      assertNotSame(complex22, complex12);
      assertNotSame(complex22, complex9);
      assertNotSame(complex22, complex11);
      assertNotSame(complex22, complex10);
      assertNotSame(complex22, complex21);
      assertNotSame(complex22, complex2);
      assertNotSame(complex22, complex16);
      assertNotSame(complex11, complex18);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex14);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex21);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex22);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex15);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex16);
      assertNotSame(complex11, complex20);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex17);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex13);
      assertNotSame(complex11, complex19);
      assertNotSame(complex11, complex7);
      
      Complex complex23 = complex13.subtractImaginary(0.9999999999999999);
      assertNotNull(complex23);
      assertEquals(Double.NaN, complex13.norm(), 0.01);
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertEquals(Double.NaN, complex13.imag(), 0.01);
      assertEquals(Double.NaN, complex13.real(), 0.01);
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals(Double.NaN, complex13.arg(), 0.01);
      assertEquals(Double.NaN, complex13.abs(), 0.01);
      assertTrue(complex13.isNaN());
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.abs(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.real(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.norm(), 0.01);
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertTrue(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.abs(), 0.01);
      assertEquals(Double.NaN, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertFalse(complex23.isInfinite());
      assertEquals(Double.NaN, complex23.arg(), 0.01);
      assertEquals(Double.NaN, complex23.getReal(), 0.01);
      assertEquals(Double.NaN, complex23.abs(), 0.01);
      assertTrue(complex23.isNaN());
      assertEquals(Double.NaN, complex23.norm(), 0.01);
      assertEquals(Double.NaN, complex23.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex23.imag(), 0.01);
      assertEquals(Double.NaN, complex23.real(), 0.01);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex16);
      assertNotSame(complex13, complex20);
      assertNotSame(complex13, complex23);
      assertNotSame(complex13, complex17);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex4);
      assertSame(complex13, complex8);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex18);
      assertNotSame(complex13, complex21);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex22);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex19);
      assertNotSame(complex13, complex15);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex21);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex23);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex22);
      assertNotSame(complex6, complex20);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex23);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex20);
      assertNotSame(complex8, complex14);
      
      List<Complex> list0 = complex11.nthRoot((-2862));
      assertFalse(list0.contains(complex10));
      assertTrue(list0.contains(complex8));
      assertNotNull(list0);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.abs(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.real(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.norm(), 0.01);
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertTrue(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.abs(), 0.01);
      assertEquals(Double.NaN, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertFalse(list0.isEmpty());
      assertEquals(2862, list0.size());
      assertTrue(complex11.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex11.real(), 0.01);
      assertEquals(Double.NaN, complex11.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.abs(), 0.01);
      assertEquals(Double.NaN, complex11.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.norm(), 0.01);
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isNaN());
      
      double double2 = complex19.abs();
      assertEquals(3394.798049, double2, 0.01);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(101791.06005712089, complex1.norm(), 0.01);
      assertEquals(319.047112598, complex1.abs(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(319.047112598, complex1.imag(), 0.01);
      assertEquals(319.047112598, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0026704038847592576, complex17.arg(), 0.01);
      assertFalse(complex17.isNaN());
      assertFalse(complex17.isInfinite());
      assertEquals(0.98464664895331, complex17.getImaginary(), 0.01);
      assertEquals(0.98464664895331, complex17.imag(), 0.01);
      assertEquals(368.7248636987369, complex17.getReal(), 0.01);
      assertEquals(368.7248636987369, complex17.real(), 0.01);
      assertEquals(368.7261784016364, complex17.abs(), 0.01);
      assertEquals(135958.99463867542, complex17.norm(), 0.01);
      assertEquals(1.5707963267948966, complex18.arg(), 0.01);
      assertEquals(0.0, complex18.real(), 0.01);
      assertEquals(319.047112598, complex18.imag(), 0.01);
      assertEquals(0.0, complex18.getReal(), 0.01);
      assertFalse(complex18.isInfinite());
      assertFalse(complex18.isNaN());
      assertEquals(319.047112598, complex18.getImaginary(), 0.01);
      assertEquals(101791.06005712089, complex18.norm(), 0.01);
      assertEquals(319.047112598, complex18.abs(), 0.01);
      assertEquals((-3394.798049), complex19.imag(), 0.01);
      assertEquals(-0.0, complex19.getReal(), 0.01);
      assertEquals(1.1524653793494206E7, complex19.norm(), 0.01);
      assertFalse(complex19.isNaN());
      assertEquals((-3394.798049), complex19.getImaginary(), 0.01);
      assertEquals(3394.798049, complex19.abs(), 0.01);
      assertEquals(-0.0, complex19.real(), 0.01);
      assertFalse(complex19.isInfinite());
      assertEquals((-1.5707963267948966), complex19.arg(), 0.01);
      
      Complex complex24 = complex11.sinh();
      assertNotNull(complex24);
      assertEquals(0.9999999999999999, complex0.abs(), 0.01);
      assertEquals(0.1745593787369129, complex0.real(), 0.01);
      assertEquals(1.3953380681588978, complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.1745593787369129, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.9999999999999999, complex0.norm(), 0.01);
      assertEquals(0.98464664895331, complex0.imag(), 0.01);
      assertEquals(0.98464664895331, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.abs(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.real(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.norm(), 0.01);
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertTrue(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.abs(), 0.01);
      assertEquals(Double.NaN, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertTrue(complex11.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex11.real(), 0.01);
      assertEquals(Double.NaN, complex11.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.abs(), 0.01);
      assertEquals(Double.NaN, complex11.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.norm(), 0.01);
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(Double.NaN, complex24.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex24.abs(), 0.01);
      assertTrue(complex24.isInfinite());
      assertEquals(Double.NaN, complex24.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex24.real(), 0.01);
      assertEquals(Double.NaN, complex24.arg(), 0.01);
      assertFalse(complex24.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex24.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex24.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-1.0));
      assertNotNull(complex0);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      
      Complex complex1 = complex0.log10();
      assertNotNull(complex1);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals((-1.0), complex1.imag(), 0.01);
      assertEquals(1.0522253460578769E-17, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-1.5707963267948966), complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.0, complex1.norm(), 0.01);
      assertEquals(1.0, complex1.abs(), 0.01);
      assertEquals((-1.0), complex1.getImaginary(), 0.01);
      assertEquals(1.0522253460578769E-17, complex1.real(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.sinh();
      assertNotNull(complex2);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.3778144811861532, complex2.real(), 0.01);
      assertEquals(0.9367059549309447, complex2.abs(), 0.01);
      assertEquals((-0.8571314157170596), complex2.getImaginary(), 0.01);
      assertEquals(0.3778144811861532, complex2.getReal(), 0.01);
      assertEquals((-0.8571314157170596), complex2.imag(), 0.01);
      assertEquals((-1.1556282462801113), complex2.arg(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.877418046003093, complex2.norm(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex0.acos();
      assertNotNull(complex3);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.8216834706126773, complex3.imag(), 0.01);
      assertEquals(1.1612894529345954, complex3.getReal(), 0.01);
      assertEquals(2.0237569193752263, complex3.norm(), 0.01);
      assertEquals(1.1612894529345954, complex3.real(), 0.01);
      assertEquals(1.4225881060149583, complex3.abs(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(0.6157826537786633, complex3.arg(), 0.01);
      assertEquals(0.8216834706126773, complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      
      double double0 = complex0.real();
      assertEquals(0.5403023058681398, double0, 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      
      complex2.ONE.hashCode();
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.3778144811861532, complex2.real(), 0.01);
      assertEquals(0.9367059549309447, complex2.abs(), 0.01);
      assertEquals((-0.8571314157170596), complex2.getImaginary(), 0.01);
      assertEquals(0.3778144811861532, complex2.getReal(), 0.01);
      assertEquals((-0.8571314157170596), complex2.imag(), 0.01);
      assertEquals((-1.1556282462801113), complex2.arg(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.877418046003093, complex2.norm(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      
      double double1 = (-421.269571);
      Complex complex4 = complex2.subtract((-421.269571));
      assertNotNull(complex4);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.3778144811861532, complex2.real(), 0.01);
      assertEquals(0.9367059549309447, complex2.abs(), 0.01);
      assertEquals((-0.8571314157170596), complex2.getImaginary(), 0.01);
      assertEquals(0.3778144811861532, complex2.getReal(), 0.01);
      assertEquals((-0.8571314157170596), complex2.imag(), 0.01);
      assertEquals((-1.1556282462801113), complex2.arg(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.877418046003093, complex2.norm(), 0.01);
      assertEquals(421.64825667537605, complex4.abs(), 0.01);
      assertEquals((-0.8571314157170596), complex4.imag(), 0.01);
      assertEquals(421.6473854811861, complex4.getReal(), 0.01);
      assertEquals(177787.25235738375, complex4.norm(), 0.01);
      assertEquals((-0.002032812877729893), complex4.arg(), 0.01);
      assertEquals(421.6473854811861, complex4.real(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals((-0.8571314157170596), complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      
      Complex complex5 = complex4.ZERO.subtractImaginary((-421.269571));
      assertNotNull(complex5);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.3778144811861532, complex2.real(), 0.01);
      assertEquals(0.9367059549309447, complex2.abs(), 0.01);
      assertEquals((-0.8571314157170596), complex2.getImaginary(), 0.01);
      assertEquals(0.3778144811861532, complex2.getReal(), 0.01);
      assertEquals((-0.8571314157170596), complex2.imag(), 0.01);
      assertEquals((-1.1556282462801113), complex2.arg(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.877418046003093, complex2.norm(), 0.01);
      assertEquals(421.64825667537605, complex4.abs(), 0.01);
      assertEquals((-0.8571314157170596), complex4.imag(), 0.01);
      assertEquals(421.6473854811861, complex4.getReal(), 0.01);
      assertEquals(177787.25235738375, complex4.norm(), 0.01);
      assertEquals((-0.002032812877729893), complex4.arg(), 0.01);
      assertEquals(421.6473854811861, complex4.real(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals((-0.8571314157170596), complex4.getImaginary(), 0.01);
      assertEquals(421.269571, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(1.5707963267948966, complex5.arg(), 0.01);
      assertEquals(421.269571, complex5.imag(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.real(), 0.01);
      assertEquals(177468.05145052404, complex5.norm(), 0.01);
      assertEquals(421.269571, complex5.abs(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      
      double double2 = 0.0;
      // Undeclared exception!
      try { 
        complex0.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute zeroth root
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = Complex.ofCartesian(621.8989992, 621.8989992);
      assertNotNull(complex1);
      assertEquals(621.8989992, complex1.real(), 0.01);
      assertEquals(621.8989992, complex1.getReal(), 0.01);
      assertEquals(879.4979990948947, complex1.abs(), 0.01);
      assertEquals(621.8989992, complex1.imag(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(621.8989992, complex1.getImaginary(), 0.01);
      assertEquals(773516.7304119234, complex1.norm(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.ONE.pow(complex1);
      assertNotNull(complex2);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(621.8989992, complex1.real(), 0.01);
      assertEquals(621.8989992, complex1.getReal(), 0.01);
      assertEquals(879.4979990948947, complex1.abs(), 0.01);
      assertEquals(621.8989992, complex1.imag(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(621.8989992, complex1.getImaginary(), 0.01);
      assertEquals(773516.7304119234, complex1.norm(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals(1.0, complex2.norm(), 0.01);
      assertEquals(1.0, complex2.abs(), 0.01);
      assertEquals(1.0, complex2.real(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      String string0 = complex2.ZERO.toString();
      assertNotNull(string0);
      assertEquals("(0.0,0.0)", string0);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(621.8989992, complex1.real(), 0.01);
      assertEquals(621.8989992, complex1.getReal(), 0.01);
      assertEquals(879.4979990948947, complex1.abs(), 0.01);
      assertEquals(621.8989992, complex1.imag(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(621.8989992, complex1.getImaginary(), 0.01);
      assertEquals(773516.7304119234, complex1.norm(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals(1.0, complex2.norm(), 0.01);
      assertEquals(1.0, complex2.abs(), 0.01);
      assertEquals(1.0, complex2.real(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex0.subtractImaginary(621.8989992);
      assertNotNull(complex3);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(621.8998031885536, complex3.abs(), 0.01);
      assertEquals(1.0, complex3.real(), 0.01);
      assertEquals((-621.8989992), complex3.getImaginary(), 0.01);
      assertEquals(386759.3652059617, complex3.norm(), 0.01);
      assertEquals((-621.8989992), complex3.imag(), 0.01);
      assertEquals((-1.5691883500343244), complex3.arg(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      
      Complex complex4 = complex2.ZERO.subtract(621.8989992);
      assertNotNull(complex4);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(621.8989992, complex1.real(), 0.01);
      assertEquals(621.8989992, complex1.getReal(), 0.01);
      assertEquals(879.4979990948947, complex1.abs(), 0.01);
      assertEquals(621.8989992, complex1.imag(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(621.8989992, complex1.getImaginary(), 0.01);
      assertEquals(773516.7304119234, complex1.norm(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals(1.0, complex2.norm(), 0.01);
      assertEquals(1.0, complex2.abs(), 0.01);
      assertEquals(1.0, complex2.real(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(386758.3652059617, complex4.norm(), 0.01);
      assertEquals(621.8989992, complex4.abs(), 0.01);
      assertEquals((-621.8989992), complex4.real(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals((-621.8989992), complex4.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      
      Complex complex5 = complex0.pow(complex4);
      assertNotNull(complex5);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(621.8989992, complex1.real(), 0.01);
      assertEquals(621.8989992, complex1.getReal(), 0.01);
      assertEquals(879.4979990948947, complex1.abs(), 0.01);
      assertEquals(621.8989992, complex1.imag(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(621.8989992, complex1.getImaginary(), 0.01);
      assertEquals(773516.7304119234, complex1.norm(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals(1.0, complex2.norm(), 0.01);
      assertEquals(1.0, complex2.abs(), 0.01);
      assertEquals(1.0, complex2.real(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(386758.3652059617, complex4.norm(), 0.01);
      assertEquals(621.8989992, complex4.abs(), 0.01);
      assertEquals((-621.8989992), complex4.real(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals((-621.8989992), complex4.getReal(), 0.01);
      assertEquals(1.0, complex5.abs(), 0.01);
      assertEquals(1.0, complex5.real(), 0.01);
      assertEquals(0.0, complex5.arg(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertEquals(1.0, complex5.norm(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertTrue(complex5.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      
      Complex complex6 = complex0.proj();
      assertNotNull(complex6);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex6.abs(), 0.01);
      assertEquals(1.0, complex6.real(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(1.0, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.arg(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertSame(complex6, complex0);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertTrue(complex6.equals((Object)complex2));
      assertTrue(complex6.equals((Object)complex5));
      
      Complex complex7 = complex6.ZERO.log10();
      assertNotNull(complex7);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex6.abs(), 0.01);
      assertEquals(1.0, complex6.real(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(1.0, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(3.141592653589793, complex7.arg(), 0.01);
      assertTrue(complex7.isInfinite());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex7.real(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex7.abs(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex7.norm(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertSame(complex6, complex0);
      assertNotSame(complex6, complex7);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex4);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertTrue(complex6.equals((Object)complex2));
      assertTrue(complex6.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex4));
      
      Complex complex8 = complex1.acosh();
      assertNotNull(complex8);
      assertEquals(621.8989992, complex1.real(), 0.01);
      assertEquals(621.8989992, complex1.getReal(), 0.01);
      assertEquals(879.4979990948947, complex1.abs(), 0.01);
      assertEquals(621.8989992, complex1.imag(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(621.8989992, complex1.getImaginary(), 0.01);
      assertEquals(773516.7304119234, complex1.norm(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals(0.7853984865966632, complex8.getImaginary(), 0.01);
      assertEquals(0.7853984865966632, complex8.imag(), 0.01);
      assertEquals(7.472498469686684, complex8.real(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(7.472498469686684, complex8.getReal(), 0.01);
      assertEquals(7.513659838069472, complex8.abs(), 0.01);
      assertEquals(56.455084162218164, complex8.norm(), 0.01);
      assertEquals(0.10472071466579322, complex8.arg(), 0.01);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex8);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex7);
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex7));
      
      Complex complex9 = complex4.I.subtractImaginary(407.0);
      assertNotNull(complex9);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(621.8989992, complex1.real(), 0.01);
      assertEquals(621.8989992, complex1.getReal(), 0.01);
      assertEquals(879.4979990948947, complex1.abs(), 0.01);
      assertEquals(621.8989992, complex1.imag(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(621.8989992, complex1.getImaginary(), 0.01);
      assertEquals(773516.7304119234, complex1.norm(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals(1.0, complex2.norm(), 0.01);
      assertEquals(1.0, complex2.abs(), 0.01);
      assertEquals(1.0, complex2.real(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(386758.3652059617, complex4.norm(), 0.01);
      assertEquals(621.8989992, complex4.abs(), 0.01);
      assertEquals((-621.8989992), complex4.real(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals((-621.8989992), complex4.getReal(), 0.01);
      assertEquals(0.0, complex9.real(), 0.01);
      assertEquals(406.0, complex9.abs(), 0.01);
      assertEquals((-1.5707963267948966), complex9.arg(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertEquals((-406.0), complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals((-406.0), complex9.imag(), 0.01);
      assertEquals(164836.0, complex9.norm(), 0.01);
      assertFalse(complex9.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex8);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex9);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex9);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex5);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex5));
      
      Complex complex10 = complex6.ONE.log10();
      assertNotNull(complex10);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex6.abs(), 0.01);
      assertEquals(1.0, complex6.real(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(1.0, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(0.0, complex10.imag(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.arg(), 0.01);
      assertEquals(0.0, complex10.abs(), 0.01);
      assertEquals(0.0, complex10.real(), 0.01);
      assertEquals(0.0, complex10.norm(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex10);
      assertSame(complex6, complex0);
      assertNotSame(complex6, complex7);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex5);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertTrue(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex7));
      assertTrue(complex6.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex5));
      
      Complex complex11 = complex10.ZERO.subtractImaginary(16.0);
      assertNotNull(complex11);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex6.abs(), 0.01);
      assertEquals(1.0, complex6.real(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(1.0, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(0.0, complex10.imag(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.arg(), 0.01);
      assertEquals(0.0, complex10.abs(), 0.01);
      assertEquals(0.0, complex10.real(), 0.01);
      assertEquals(0.0, complex10.norm(), 0.01);
      assertEquals((-16.0), complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertEquals((-16.0), complex11.imag(), 0.01);
      assertEquals(0.0, complex11.real(), 0.01);
      assertEquals((-1.5707963267948966), complex11.arg(), 0.01);
      assertEquals(256.0, complex11.norm(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex11.isNaN());
      assertEquals(16.0, complex11.abs(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex10);
      assertSame(complex6, complex0);
      assertNotSame(complex6, complex7);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex5);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex5);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex10));
      assertTrue(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex7));
      assertTrue(complex6.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex5));
      
      Complex complex12 = Complex.ofCis((-4370.978230851799));
      assertNotNull(complex12);
      assertEquals((-0.5209355700698398), complex12.getReal(), 0.01);
      assertEquals(1.0, complex12.abs(), 0.01);
      assertFalse(complex12.isNaN());
      assertEquals(0.853596000363176, complex12.getImaginary(), 0.01);
      assertEquals(1.0, complex12.norm(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals(2.1187429451933895, complex12.arg(), 0.01);
      assertEquals(0.853596000363176, complex12.imag(), 0.01);
      assertEquals((-0.5209355700698398), complex12.real(), 0.01);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex8);
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex8));
      
      List<Complex> list0 = complex4.nthRoot((-1));
      assertFalse(list0.contains(complex2));
      assertNotNull(list0);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(621.8989992, complex1.real(), 0.01);
      assertEquals(621.8989992, complex1.getReal(), 0.01);
      assertEquals(879.4979990948947, complex1.abs(), 0.01);
      assertEquals(621.8989992, complex1.imag(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(621.8989992, complex1.getImaginary(), 0.01);
      assertEquals(773516.7304119234, complex1.norm(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals(1.0, complex2.norm(), 0.01);
      assertEquals(1.0, complex2.abs(), 0.01);
      assertEquals(1.0, complex2.real(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(386758.3652059617, complex4.norm(), 0.01);
      assertEquals(621.8989992, complex4.abs(), 0.01);
      assertEquals((-621.8989992), complex4.real(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals((-621.8989992), complex4.getReal(), 0.01);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex8);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex9);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex9);
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex9));
      
      Complex complex13 = complex6.proj();
      assertNotNull(complex13);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex6.abs(), 0.01);
      assertEquals(1.0, complex6.real(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(1.0, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.arg(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertEquals(1.0, complex13.norm(), 0.01);
      assertEquals(0.0, complex13.imag(), 0.01);
      assertEquals(1.0, complex13.abs(), 0.01);
      assertEquals(1.0, complex13.real(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals(1.0, complex13.getReal(), 0.01);
      assertEquals(0.0, complex13.arg(), 0.01);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex13);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex11);
      assertSame(complex6, complex13);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex10);
      assertSame(complex6, complex0);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex12);
      assertSame(complex13, complex6);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex9);
      assertSame(complex13, complex0);
      assertNotSame(complex13, complex8);
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex10));
      assertTrue(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex7));
      assertTrue(complex6.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex8));
      assertTrue(complex13.equals((Object)complex2));
      assertTrue(complex13.equals((Object)complex5));
      
      Complex complex14 = complex4.divideImaginary((-1));
      assertNotNull(complex14);
      assertEquals(-0.0, complex14.getReal(), 0.01);
      assertEquals(386758.3652059617, complex14.norm(), 0.01);
      assertEquals(621.8989992, complex14.abs(), 0.01);
      assertEquals(-0.0, complex14.real(), 0.01);
      assertEquals((-1.5707963267948966), complex14.arg(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals((-621.8989992), complex14.imag(), 0.01);
      assertEquals((-621.8989992), complex14.getImaginary(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(621.8989992, complex1.real(), 0.01);
      assertEquals(621.8989992, complex1.getReal(), 0.01);
      assertEquals(879.4979990948947, complex1.abs(), 0.01);
      assertEquals(621.8989992, complex1.imag(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(621.8989992, complex1.getImaginary(), 0.01);
      assertEquals(773516.7304119234, complex1.norm(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals(1.0, complex2.norm(), 0.01);
      assertEquals(1.0, complex2.abs(), 0.01);
      assertEquals(1.0, complex2.real(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(386758.3652059617, complex4.norm(), 0.01);
      assertEquals(621.8989992, complex4.abs(), 0.01);
      assertEquals((-621.8989992), complex4.real(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals((-621.8989992), complex4.getReal(), 0.01);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex12);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex13);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex9);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex13));
      assertTrue(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      
      Complex complex15 = complex2.subtract(621.8989992);
      assertNotNull(complex15);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertEquals(0.0, complex15.imag(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(3.141592653589793, complex15.arg(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(385515.5672075617, complex15.norm(), 0.01);
      assertEquals(620.8989992, complex15.abs(), 0.01);
      assertEquals((-620.8989992), complex15.real(), 0.01);
      assertEquals((-620.8989992), complex15.getReal(), 0.01);
      assertEquals(621.8989992, complex1.real(), 0.01);
      assertEquals(621.8989992, complex1.getReal(), 0.01);
      assertEquals(879.4979990948947, complex1.abs(), 0.01);
      assertEquals(621.8989992, complex1.imag(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(621.8989992, complex1.getImaginary(), 0.01);
      assertEquals(773516.7304119234, complex1.norm(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals(1.0, complex2.norm(), 0.01);
      assertEquals(1.0, complex2.abs(), 0.01);
      assertEquals(1.0, complex2.real(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex13);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex9);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex15);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex9);
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex13));
      assertTrue(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex14));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex9));
      
      Complex complex16 = complex15.ONE.log10();
      assertNotNull(complex16);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertEquals(0.0, complex15.imag(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(3.141592653589793, complex15.arg(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(385515.5672075617, complex15.norm(), 0.01);
      assertEquals(620.8989992, complex15.abs(), 0.01);
      assertEquals((-620.8989992), complex15.real(), 0.01);
      assertEquals((-620.8989992), complex15.getReal(), 0.01);
      assertEquals(621.8989992, complex1.real(), 0.01);
      assertEquals(621.8989992, complex1.getReal(), 0.01);
      assertEquals(879.4979990948947, complex1.abs(), 0.01);
      assertEquals(621.8989992, complex1.imag(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(621.8989992, complex1.getImaginary(), 0.01);
      assertEquals(773516.7304119234, complex1.norm(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertEquals(0.0, complex16.abs(), 0.01);
      assertEquals(0.0, complex16.norm(), 0.01);
      assertFalse(complex16.isInfinite());
      assertFalse(complex16.isNaN());
      assertEquals(0.0, complex16.arg(), 0.01);
      assertEquals(0.0, complex16.imag(), 0.01);
      assertEquals(0.0, complex16.real(), 0.01);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertEquals(1.0, complex2.norm(), 0.01);
      assertEquals(1.0, complex2.abs(), 0.01);
      assertEquals(1.0, complex2.real(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex13);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex16);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex16);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex9);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex15);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex9);
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex5));
      assertTrue(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex7));
      assertTrue(complex2.equals((Object)complex13));
      assertTrue(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex14));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex9));
      
      boolean boolean0 = complex9.isNaN();
      assertFalse(boolean0);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(621.8989992, complex1.real(), 0.01);
      assertEquals(621.8989992, complex1.getReal(), 0.01);
      assertEquals(879.4979990948947, complex1.abs(), 0.01);
      assertEquals(621.8989992, complex1.imag(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(621.8989992, complex1.getImaginary(), 0.01);
      assertEquals(773516.7304119234, complex1.norm(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals(1.0, complex2.norm(), 0.01);
      assertEquals(1.0, complex2.abs(), 0.01);
      assertEquals(1.0, complex2.real(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(386758.3652059617, complex4.norm(), 0.01);
      assertEquals(621.8989992, complex4.abs(), 0.01);
      assertEquals((-621.8989992), complex4.real(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals((-621.8989992), complex4.getReal(), 0.01);
      assertEquals(0.0, complex9.real(), 0.01);
      assertEquals(406.0, complex9.abs(), 0.01);
      assertEquals((-1.5707963267948966), complex9.arg(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertEquals((-406.0), complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals((-406.0), complex9.imag(), 0.01);
      assertEquals(164836.0, complex9.norm(), 0.01);
      assertFalse(complex9.isInfinite());
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex13);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex16);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex15);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex9);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex12);
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex15));
      assertTrue(complex2.equals((Object)complex13));
      assertTrue(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex14));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex11));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex15));
      assertFalse(complex9.equals((Object)complex14));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex13));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex16));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex12));
      
      Complex complex17 = complex0.pow(complex14);
      assertNotNull(complex17);
      assertEquals(-0.0, complex14.getReal(), 0.01);
      assertEquals(386758.3652059617, complex14.norm(), 0.01);
      assertEquals(621.8989992, complex14.abs(), 0.01);
      assertEquals(-0.0, complex14.real(), 0.01);
      assertEquals((-1.5707963267948966), complex14.arg(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals((-621.8989992), complex14.imag(), 0.01);
      assertEquals((-621.8989992), complex14.getImaginary(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(621.8989992, complex1.real(), 0.01);
      assertEquals(621.8989992, complex1.getReal(), 0.01);
      assertEquals(879.4979990948947, complex1.abs(), 0.01);
      assertEquals(621.8989992, complex1.imag(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(621.8989992, complex1.getImaginary(), 0.01);
      assertEquals(773516.7304119234, complex1.norm(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals(1.0, complex2.norm(), 0.01);
      assertEquals(1.0, complex2.abs(), 0.01);
      assertEquals(1.0, complex2.real(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex17.abs(), 0.01);
      assertEquals(1.0, complex17.real(), 0.01);
      assertFalse(complex17.isInfinite());
      assertEquals(-0.0, complex17.arg(), 0.01);
      assertEquals(1.0, complex17.getReal(), 0.01);
      assertFalse(complex17.isNaN());
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      assertEquals(1.0, complex17.norm(), 0.01);
      assertEquals(-0.0, complex17.imag(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(386758.3652059617, complex4.norm(), 0.01);
      assertEquals(621.8989992, complex4.abs(), 0.01);
      assertEquals((-621.8989992), complex4.real(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals((-621.8989992), complex4.getReal(), 0.01);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex17);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex15);
      assertNotSame(complex14, complex12);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex13);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex16);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex15);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex9);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex9);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex16));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex15));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex15));
      assertTrue(complex2.equals((Object)complex13));
      assertTrue(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex15));
      assertFalse(complex2.equals((Object)complex14));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex16));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex16));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex15));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      
      Complex complex18 = complex7.atan();
      assertNotNull(complex18);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex18.abs(), 0.01);
      assertEquals((-1.5707963267948966), complex18.real(), 0.01);
      assertFalse(complex18.isNaN());
      assertEquals(3.141592653589793, complex18.arg(), 0.01);
      assertEquals(0.0, complex18.imag(), 0.01);
      assertEquals((-1.5707963267948966), complex18.getReal(), 0.01);
      assertFalse(complex18.isInfinite());
      assertEquals(2.4674011002723395, complex18.norm(), 0.01);
      assertEquals(1.0, complex6.abs(), 0.01);
      assertEquals(1.0, complex6.real(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(1.0, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(3.141592653589793, complex7.arg(), 0.01);
      assertTrue(complex7.isInfinite());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex7.real(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex7.abs(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex7.norm(), 0.01);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex13);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex16);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex4);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex11);
      assertSame(complex6, complex13);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex10);
      assertSame(complex6, complex0);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex14);
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex1));
      assertFalse(complex18.equals((Object)complex14));
      assertFalse(complex18.equals((Object)complex0));
      assertFalse(complex18.equals((Object)complex17));
      assertFalse(complex18.equals((Object)complex2));
      assertFalse(complex18.equals((Object)complex5));
      assertFalse(complex18.equals((Object)complex6));
      assertFalse(complex18.equals((Object)complex10));
      assertFalse(complex18.equals((Object)complex8));
      assertFalse(complex18.equals((Object)complex3));
      assertFalse(complex18.equals((Object)complex16));
      assertFalse(complex18.equals((Object)complex11));
      assertFalse(complex18.equals((Object)complex7));
      assertFalse(complex18.equals((Object)complex13));
      assertFalse(complex18.equals((Object)complex15));
      assertFalse(complex18.equals((Object)complex9));
      assertFalse(complex18.equals((Object)complex12));
      assertFalse(complex18.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex15));
      assertFalse(complex6.equals((Object)complex17));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex16));
      assertFalse(complex6.equals((Object)complex10));
      assertTrue(complex6.equals((Object)complex2));
      assertTrue(complex6.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex15));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex16));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex17));
      assertFalse(complex7.equals((Object)complex14));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.ofCis(3.8657822478866);
      assertNotNull(complex0);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.log();
      assertNotNull(complex1);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2.4174030592929867), complex1.getImaginary(), 0.01);
      assertEquals(6.237210888857222E-17, complex1.getReal(), 0.01);
      assertEquals((-2.4174030592929867), complex1.imag(), 0.01);
      assertEquals(5.843837551079091, complex1.norm(), 0.01);
      assertEquals(6.237210888857222E-17, complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-1.5707963267948966), complex1.arg(), 0.01);
      assertEquals(2.4174030592929867, complex1.abs(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.divideImaginary(0.0);
      assertNotNull(complex2);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.real(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.norm(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(2.356194490192345, complex2.arg(), 0.01);
      assertFalse(complex2.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = Complex.ofCis((-0.8414709848078965));
      assertNotNull(complex3);
      assertFalse(complex3.isNaN());
      assertEquals((-0.7456241416655579), complex3.getImaginary(), 0.01);
      assertEquals(0.6663667453928805, complex3.getReal(), 0.01);
      assertEquals((-0.7456241416655579), complex3.imag(), 0.01);
      assertEquals((-0.8414709848078965), complex3.arg(), 0.01);
      assertEquals(0.6663667453928805, complex3.real(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(1.0, complex3.norm(), 0.01);
      assertEquals(1.0, complex3.abs(), 0.01);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = complex0.addImaginary(2317.3);
      assertNotNull(complex4);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-0.7490365848608095), complex4.getReal(), 0.01);
      assertEquals(2316.6374713632304, complex4.imag(), 0.01);
      assertEquals(1.5711196560028622, complex4.arg(), 0.01);
      assertEquals(2316.6375924559343, complex4.abs(), 0.01);
      assertEquals(2316.6374713632304, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals((-0.7490365848608095), complex4.real(), 0.01);
      assertEquals(5366809.7347800275, complex4.norm(), 0.01);
      assertFalse(complex4.isNaN());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      
      Complex complex5 = Complex.ZERO;
      assertNotNull(complex5);
      assertEquals(0.0, complex5.abs(), 0.01);
      assertEquals(0.0, complex5.real(), 0.01);
      assertEquals(0.0, complex5.arg(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.norm(), 0.01);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      
      Complex complex6 = Complex.ofPolar(0.0, 3936.0);
      assertNotNull(complex6);
      assertEquals(-0.0, complex6.getReal(), 0.01);
      assertEquals(3.141592653589793, complex6.arg(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(-0.0, complex6.real(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.abs(), 0.01);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      
      Complex complex7 = Complex.ONE;
      assertNotNull(complex7);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(1.0, complex7.norm(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(1.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.arg(), 0.01);
      assertEquals(1.0, complex7.real(), 0.01);
      assertEquals(1.0, complex7.abs(), 0.01);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      
      Complex complex8 = complex0.divide(complex7);
      assertNotNull(complex8);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(1.0, complex7.norm(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(1.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.arg(), 0.01);
      assertEquals(1.0, complex7.real(), 0.01);
      assertEquals(1.0, complex7.abs(), 0.01);
      assertEquals((-0.7490365848608095), complex8.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex8.imag(), 0.01);
      assertEquals((-2.4174030592929867), complex8.arg(), 0.01);
      assertEquals(1.0, complex8.norm(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals((-0.7490365848608095), complex8.real(), 0.01);
      assertFalse(complex8.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex4);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex6));
      assertTrue(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      
      Complex complex9 = complex0.multiply(complex7);
      assertNotNull(complex9);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(1.0, complex7.norm(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(1.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.arg(), 0.01);
      assertEquals(1.0, complex7.real(), 0.01);
      assertEquals(1.0, complex7.abs(), 0.01);
      assertEquals((-0.7490365848608095), complex9.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex9.getImaginary(), 0.01);
      assertEquals(1.0, complex9.abs(), 0.01);
      assertEquals(1.0, complex9.norm(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals((-0.7490365848608095), complex9.real(), 0.01);
      assertEquals((-2.4174030592929867), complex9.arg(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals((-0.6625286367698044), complex9.imag(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex6));
      assertTrue(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex2));
      
      double double0 = complex0.norm();
      assertEquals(1.0, double0, 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      
      double double1 = complex1.abs();
      assertEquals(2.4174030592929867, double1, 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-2.4174030592929867), complex1.getImaginary(), 0.01);
      assertEquals(6.237210888857222E-17, complex1.getReal(), 0.01);
      assertEquals((-2.4174030592929867), complex1.imag(), 0.01);
      assertEquals(5.843837551079091, complex1.norm(), 0.01);
      assertEquals(6.237210888857222E-17, complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-1.5707963267948966), complex1.arg(), 0.01);
      assertEquals(2.4174030592929867, complex1.abs(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex8);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex8));
      assertNotEquals(double1, double0, 0.01);
      
      Complex complex10 = complex7.asinh();
      assertNotNull(complex10);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(1.0, complex7.norm(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(1.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.arg(), 0.01);
      assertEquals(1.0, complex7.real(), 0.01);
      assertEquals(1.0, complex7.abs(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(0.0, complex10.arg(), 0.01);
      assertEquals(0.8813735870195429, complex10.getReal(), 0.01);
      assertEquals(0.8813735870195429, complex10.abs(), 0.01);
      assertEquals(0.0, complex10.imag(), 0.01);
      assertEquals(0.7768193998956958, complex10.norm(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(0.8813735870195429, complex10.real(), 0.01);
      assertFalse(complex10.isNaN());
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex6);
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex6));
      
      Complex complex11 = complex2.add(complex10);
      assertNotNull(complex11);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.real(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.norm(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(2.356194490192345, complex2.arg(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(1.0, complex7.norm(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(1.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.arg(), 0.01);
      assertEquals(1.0, complex7.real(), 0.01);
      assertEquals(1.0, complex7.abs(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(0.0, complex10.arg(), 0.01);
      assertEquals(0.8813735870195429, complex10.getReal(), 0.01);
      assertEquals(0.8813735870195429, complex10.abs(), 0.01);
      assertEquals(0.0, complex10.imag(), 0.01);
      assertEquals(0.7768193998956958, complex10.norm(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(0.8813735870195429, complex10.real(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex11.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex11.getReal(), 0.01);
      assertEquals(2.356194490192345, complex11.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.imag(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex11.abs(), 0.01);
      assertTrue(complex11.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex11.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.norm(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex4);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex6);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex5);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex6));
      assertTrue(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex5));
      
      Complex complex12 = complex5.log10();
      assertNotNull(complex12);
      assertEquals(0.0, complex5.abs(), 0.01);
      assertEquals(0.0, complex5.real(), 0.01);
      assertEquals(0.0, complex5.arg(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.norm(), 0.01);
      assertFalse(complex12.isNaN());
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex12.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex12.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex12.abs(), 0.01);
      assertTrue(complex12.isInfinite());
      assertEquals(3.141592653589793, complex12.arg(), 0.01);
      assertEquals(0.0, complex12.imag(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex12.real(), 0.01);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex7);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex2);
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex2));
      
      Complex complex13 = complex12.tan();
      assertNotNull(complex13);
      assertEquals(0.0, complex5.abs(), 0.01);
      assertEquals(0.0, complex5.real(), 0.01);
      assertEquals(0.0, complex5.arg(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.norm(), 0.01);
      assertFalse(complex12.isNaN());
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex12.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex12.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex12.abs(), 0.01);
      assertTrue(complex12.isInfinite());
      assertEquals(3.141592653589793, complex12.arg(), 0.01);
      assertEquals(0.0, complex12.imag(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex12.real(), 0.01);
      assertEquals(Double.NaN, complex13.arg(), 0.01);
      assertEquals(Double.NaN, complex13.real(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals(Double.NaN, complex13.norm(), 0.01);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertEquals(Double.NaN, complex13.abs(), 0.01);
      assertEquals(0.0, complex13.imag(), 0.01);
      assertTrue(complex13.isNaN());
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex13);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex3);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex1);
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex1));
      
      List<Complex> list0 = complex8.nthRoot(44);
      assertFalse(list0.contains(complex6));
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(44, list0.size());
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(1.0, complex7.norm(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(1.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.arg(), 0.01);
      assertEquals(1.0, complex7.real(), 0.01);
      assertEquals(1.0, complex7.abs(), 0.01);
      assertEquals((-0.7490365848608095), complex8.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex8.imag(), 0.01);
      assertEquals((-2.4174030592929867), complex8.arg(), 0.01);
      assertEquals(1.0, complex8.norm(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals((-0.7490365848608095), complex8.real(), 0.01);
      assertFalse(complex8.isNaN());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex0);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex4);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex1));
      assertTrue(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex13));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex12));
      assertFalse(complex8.equals((Object)complex10));
      assertTrue(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      
      Complex complex14 = complex1.sqrt();
      assertNotNull(complex14);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(2.4174030592929867, complex14.norm(), 0.01);
      assertEquals((-1.0994096277759684), complex14.imag(), 0.01);
      assertEquals(1.5548000062043308, complex14.abs(), 0.01);
      assertEquals(1.0994096277759684, complex14.real(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals((-1.0994096277759684), complex14.getImaginary(), 0.01);
      assertEquals((-0.7853981633974483), complex14.arg(), 0.01);
      assertEquals(1.0994096277759684, complex14.getReal(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals((-2.4174030592929867), complex1.getImaginary(), 0.01);
      assertEquals(6.237210888857222E-17, complex1.getReal(), 0.01);
      assertEquals((-2.4174030592929867), complex1.imag(), 0.01);
      assertEquals(5.843837551079091, complex1.norm(), 0.01);
      assertEquals(6.237210888857222E-17, complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-1.5707963267948966), complex1.arg(), 0.01);
      assertEquals(2.4174030592929867, complex1.abs(), 0.01);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex5);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex5));
      
      double double2 = complex4.getImaginary();
      assertEquals(2316.6374713632304, double2, 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals((-0.7490365848608095), complex4.getReal(), 0.01);
      assertEquals(2316.6374713632304, complex4.imag(), 0.01);
      assertEquals(1.5711196560028622, complex4.arg(), 0.01);
      assertEquals(2316.6375924559343, complex4.abs(), 0.01);
      assertEquals(2316.6374713632304, complex4.getImaginary(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals((-0.7490365848608095), complex4.real(), 0.01);
      assertEquals(5366809.7347800275, complex4.norm(), 0.01);
      assertFalse(complex4.isNaN());
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex3);
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex14));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex3));
      
      Complex complex15 = complex0.pow(complex11);
      assertNotNull(complex15);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.real(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.norm(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(2.356194490192345, complex2.arg(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.NaN, complex15.abs(), 0.01);
      assertEquals(Double.NaN, complex15.real(), 0.01);
      assertEquals(Double.NaN, complex15.norm(), 0.01);
      assertEquals(Double.NaN, complex15.arg(), 0.01);
      assertEquals(Double.NaN, complex15.imag(), 0.01);
      assertTrue(complex15.isNaN());
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(1.0, complex7.norm(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(1.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.arg(), 0.01);
      assertEquals(1.0, complex7.real(), 0.01);
      assertEquals(1.0, complex7.abs(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(0.0, complex10.arg(), 0.01);
      assertEquals(0.8813735870195429, complex10.getReal(), 0.01);
      assertEquals(0.8813735870195429, complex10.abs(), 0.01);
      assertEquals(0.0, complex10.imag(), 0.01);
      assertEquals(0.7768193998956958, complex10.norm(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(0.8813735870195429, complex10.real(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex11.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex11.getReal(), 0.01);
      assertEquals(2.356194490192345, complex11.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.imag(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex11.abs(), 0.01);
      assertTrue(complex11.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex11.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.norm(), 0.01);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex11);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex4);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex0);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex14);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex13);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex15);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex12);
      assertNotSame(complex10, complex4);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex14);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex13);
      assertNotSame(complex11, complex15);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex7);
      assertFalse(complex0.equals((Object)complex14));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex12));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex14));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex13));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex12));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex14));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex13));
      assertFalse(complex11.equals((Object)complex5));
      assertTrue(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex12));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex7));
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      Complex complex1 = complex0.ZERO.tanh();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      double double0 = complex0.getReal();
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertNotSame(complex0, complex1);
      assertFalse(complex0.equals((Object)complex1));
      
      complex1.hashCode();
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.multiplyImaginary(0.0);
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex2.negate();
      assertNotNull(complex3);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.norm(), 0.01);
      assertEquals(-0.0, complex3.arg(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.abs(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      double double1 = complex2.arg();
      assertEquals(3.141592653589793, double1, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertNotEquals(double1, double0, 0.01);
      
      Complex complex4 = complex2.addImaginary(0.0);
      assertNotNull(complex4);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(-0.0, complex4.real(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      
      Complex complex5 = complex4.log();
      assertNotNull(complex5);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(-0.0, complex4.real(), 0.01);
      assertEquals(3.141592653589793, complex5.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex5.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex5.abs(), 0.01);
      assertTrue(complex5.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex5.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex5.norm(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(3.141592653589793, complex5.arg(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      
      Complex complex6 = complex4.ONE.sqrt();
      assertNotNull(complex6);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(-0.0, complex4.real(), 0.01);
      assertEquals(1.0, complex6.norm(), 0.01);
      assertEquals(1.0, complex6.abs(), 0.01);
      assertEquals(1.0, complex6.real(), 0.01);
      assertFalse(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      
      Complex complex7 = complex4.ZERO.log();
      assertNotNull(complex7);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(-0.0, complex4.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex7.norm(), 0.01);
      assertEquals(3.141592653589793, complex7.arg(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex7.real(), 0.01);
      assertTrue(complex7.isInfinite());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex7.abs(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      
      Complex complex8 = complex7.I.divideImaginary(0.0);
      assertNotNull(complex8);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(-0.0, complex4.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex7.norm(), 0.01);
      assertEquals(3.141592653589793, complex7.arg(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex7.real(), 0.01);
      assertTrue(complex7.isInfinite());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex7.abs(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertTrue(complex8.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex8.abs(), 0.01);
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex8.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex8.norm(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      
      Complex complex9 = complex1.tanh();
      assertNotNull(complex9);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.imag(), 0.01);
      assertEquals(0.0, complex9.real(), 0.01);
      assertEquals(0.0, complex9.arg(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertEquals(0.0, complex9.abs(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.norm(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex0));
      assertTrue(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex4));
      
      Complex complex10 = complex1.I.negate();
      assertNotNull(complex10);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(1.0, complex10.abs(), 0.01);
      assertEquals(-0.0, complex10.real(), 0.01);
      assertEquals((-1.0), complex10.getImaginary(), 0.01);
      assertEquals(-0.0, complex10.getReal(), 0.01);
      assertEquals((-1.0), complex10.imag(), 0.01);
      assertEquals((-1.5707963267948966), complex10.arg(), 0.01);
      assertEquals(1.0, complex10.norm(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex9);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex9));
      
      double double2 = complex2.norm();
      assertEquals(0.0, double2, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex5));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double double3 = complex2.abs();
      assertEquals(0.0, double3, 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex5));
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      
      Complex complex11 = complex5.asinh();
      assertNotNull(complex11);
      assertEquals(3.141592653589793, complex11.arg(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex11.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.abs(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertTrue(complex11.isInfinite());
      assertEquals(0.0, complex11.imag(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex11.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(-0.0, complex4.real(), 0.01);
      assertEquals(3.141592653589793, complex5.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex5.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex5.abs(), 0.01);
      assertTrue(complex5.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex5.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex5.norm(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(3.141592653589793, complex5.arg(), 0.01);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex7);
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex9));
      assertTrue(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex9));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex7));
      
      Complex complex12 = complex11.ONE.add(complex10);
      assertNotNull(complex12);
      assertEquals(3.141592653589793, complex11.arg(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex11.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex11.abs(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertTrue(complex11.isInfinite());
      assertEquals(0.0, complex11.imag(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex11.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex12.real(), 0.01);
      assertEquals((-0.7853981633974483), complex12.arg(), 0.01);
      assertEquals(2.0, complex12.norm(), 0.01);
      assertEquals(1.0, complex12.getReal(), 0.01);
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals((-1.0), complex12.imag(), 0.01);
      assertEquals(1.4142135623730951, complex12.abs(), 0.01);
      assertEquals((-1.0), complex12.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(-0.0, complex4.real(), 0.01);
      assertEquals(3.141592653589793, complex5.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex5.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex5.abs(), 0.01);
      assertTrue(complex5.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex5.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex5.norm(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(3.141592653589793, complex5.arg(), 0.01);
      assertEquals(1.0, complex10.abs(), 0.01);
      assertEquals(-0.0, complex10.real(), 0.01);
      assertEquals((-1.0), complex10.getImaginary(), 0.01);
      assertEquals(-0.0, complex10.getReal(), 0.01);
      assertEquals((-1.0), complex10.imag(), 0.01);
      assertEquals((-1.5707963267948966), complex10.arg(), 0.01);
      assertEquals(1.0, complex10.norm(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex6);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex5);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex7);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex12);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex9);
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex9));
      assertTrue(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex9));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex9));
      
      Complex complex13 = complex3.log10();
      assertNotNull(complex13);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex13.norm(), 0.01);
      assertEquals((-3.141592653589793), complex13.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex13.abs(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex13.getReal(), 0.01);
      assertTrue(complex13.isInfinite());
      assertEquals(-0.0, complex13.imag(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex13.real(), 0.01);
      assertEquals(-0.0, complex13.getImaginary(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.norm(), 0.01);
      assertEquals(-0.0, complex3.arg(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.abs(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex5);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex12));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      
      List<Complex> list0 = complex4.nthRoot(44);
      assertFalse(list0.contains(complex10));
      assertTrue(list0.contains(complex2));
      assertNotNull(list0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(44, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(-0.0, complex4.real(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex13);
      
      Complex complex14 = Complex.ZERO;
      assertNotNull(complex14);
      assertEquals(0.0, complex14.norm(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertEquals(0.0, complex14.imag(), 0.01);
      assertEquals(0.0, complex14.real(), 0.01);
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertEquals(0.0, complex14.arg(), 0.01);
      assertEquals(0.0, complex14.abs(), 0.01);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex3);
      
      Complex complex15 = complex3.divide(complex1);
      assertNotNull(complex15);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex15.abs(), 0.01);
      assertEquals(Double.NaN, complex15.real(), 0.01);
      assertEquals(Double.NaN, complex15.norm(), 0.01);
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertEquals(Double.NaN, complex15.arg(), 0.01);
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex15.imag(), 0.01);
      assertTrue(complex15.isNaN());
      assertFalse(complex15.isInfinite());
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.norm(), 0.01);
      assertEquals(-0.0, complex3.arg(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.abs(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex11);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      
      Complex complex16 = complex7.log10();
      assertNotNull(complex16);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertTrue(complex16.isInfinite());
      assertEquals(0.0, complex16.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex16.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex16.abs(), 0.01);
      assertEquals(3.141592653589793, complex16.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex16.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex16.norm(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(-0.0, complex4.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex7.norm(), 0.01);
      assertEquals(3.141592653589793, complex7.arg(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex7.real(), 0.01);
      assertTrue(complex7.isInfinite());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex7.abs(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex8);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex13);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      
      Complex complex17 = complex8.pow(0.0);
      assertNotNull(complex17);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex17.isInfinite());
      assertEquals(Double.NaN, complex17.getReal(), 0.01);
      assertEquals(Double.NaN, complex17.arg(), 0.01);
      assertEquals(Double.NaN, complex17.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex17.imag(), 0.01);
      assertEquals(Double.NaN, complex17.real(), 0.01);
      assertEquals(Double.NaN, complex17.norm(), 0.01);
      assertTrue(complex17.isNaN());
      assertEquals(Double.NaN, complex17.abs(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(-0.0, complex4.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex7.norm(), 0.01);
      assertEquals(3.141592653589793, complex7.arg(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex7.real(), 0.01);
      assertTrue(complex7.isInfinite());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex7.abs(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertTrue(complex8.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex8.abs(), 0.01);
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex8.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex8.norm(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex5);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex14);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex17);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex12);
      
      List<Complex> list1 = complex15.nthRoot(648);
      assertTrue(list1.contains(complex15));
      assertFalse(list1.contains(complex2));
      assertNotNull(list1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex15.abs(), 0.01);
      assertEquals(Double.NaN, complex15.real(), 0.01);
      assertEquals(Double.NaN, complex15.norm(), 0.01);
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertEquals(Double.NaN, complex15.arg(), 0.01);
      assertEquals(Double.NaN, complex15.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex15.imag(), 0.01);
      assertTrue(complex15.isNaN());
      assertFalse(complex15.isInfinite());
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.norm(), 0.01);
      assertEquals(-0.0, complex3.arg(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.abs(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertFalse(list1.isEmpty());
      assertEquals(648, list1.size());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex5);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex16);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex17);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex11);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex0);
      assertNotSame(list1, list0);
      
      Complex complex18 = Complex.I;
      assertNotNull(complex18);
      assertEquals(1.0, complex18.abs(), 0.01);
      assertEquals(0.0, complex18.real(), 0.01);
      assertEquals(1.0, complex18.norm(), 0.01);
      assertEquals(1.0, complex18.imag(), 0.01);
      assertEquals(0.0, complex18.getReal(), 0.01);
      assertFalse(complex18.isNaN());
      assertEquals(1.0, complex18.getImaginary(), 0.01);
      assertFalse(complex18.isInfinite());
      assertEquals(1.5707963267948966, complex18.arg(), 0.01);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex7);
      assertSame(complex18, complex0);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex12);
      
      boolean boolean0 = complex18.isInfinite();
      assertFalse(boolean0);
      assertEquals(1.0, complex18.abs(), 0.01);
      assertEquals(0.0, complex18.real(), 0.01);
      assertEquals(1.0, complex18.norm(), 0.01);
      assertEquals(1.0, complex18.imag(), 0.01);
      assertEquals(0.0, complex18.getReal(), 0.01);
      assertFalse(complex18.isNaN());
      assertEquals(1.0, complex18.getImaginary(), 0.01);
      assertFalse(complex18.isInfinite());
      assertEquals(1.5707963267948966, complex18.arg(), 0.01);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex7);
      assertSame(complex18, complex0);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex12);
      
      boolean boolean1 = complex9.isNaN();
      assertFalse(boolean1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.imag(), 0.01);
      assertEquals(0.0, complex9.real(), 0.01);
      assertEquals(0.0, complex9.arg(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertEquals(0.0, complex9.abs(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.norm(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex18);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex18);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex0);
      
      Complex complex19 = complex4.log();
      assertNotNull(complex19);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(-0.0, complex4.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex19.abs(), 0.01);
      assertEquals(3.141592653589793, complex19.arg(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex19.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex19.norm(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex19.getReal(), 0.01);
      assertFalse(complex19.isNaN());
      assertTrue(complex19.isInfinite());
      assertEquals(3.141592653589793, complex19.imag(), 0.01);
      assertEquals(3.141592653589793, complex19.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex18);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex5);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex17);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex5);
      
      Complex complex20 = complex0.pow(complex16);
      assertNotNull(complex20);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex16.getReal(), 0.01);
      assertFalse(complex16.isNaN());
      assertTrue(complex16.isInfinite());
      assertEquals(0.0, complex16.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex16.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex16.abs(), 0.01);
      assertEquals(3.141592653589793, complex16.getImaginary(), 0.01);
      assertEquals(3.141592653589793, complex16.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex16.norm(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(-0.0, complex4.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex7.norm(), 0.01);
      assertEquals(3.141592653589793, complex7.arg(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex7.real(), 0.01);
      assertTrue(complex7.isInfinite());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex7.abs(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertFalse(complex20.isInfinite());
      assertEquals(Double.NaN, complex20.arg(), 0.01);
      assertEquals(Double.NaN, complex20.getReal(), 0.01);
      assertEquals(Double.NaN, complex20.imag(), 0.01);
      assertEquals(Double.NaN, complex20.real(), 0.01);
      assertEquals(Double.NaN, complex20.norm(), 0.01);
      assertEquals(Double.NaN, complex20.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex20.abs(), 0.01);
      assertTrue(complex20.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex18);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex15);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex20);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex5);
      assertNotSame(complex16, complex19);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex18);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex20);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex8);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex20);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex17);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex12);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex16);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex15);
      assertNotSame(complex7, complex18);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex17);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex19);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex20);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex10);
      assertNotSame(complex20, complex0);
      assertSame(complex20, complex17);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex18);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(1631.4132449356, 1631.4132449356);
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals((-2.2149349310924786), complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(2661509.1757513043, complex0.norm(), 0.01);
      assertEquals((-979.6797628902938), complex0.real(), 0.01);
      assertEquals(1631.4132449356, complex0.abs(), 0.01);
      assertEquals((-979.6797628902938), complex0.getReal(), 0.01);
      assertEquals((-1304.5063196223014), complex0.getImaginary(), 0.01);
      assertEquals((-1304.5063196223014), complex0.imag(), 0.01);
      
      Complex complex1 = complex0.ONE.divide(0.0);
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals((-2.2149349310924786), complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(2661509.1757513043, complex0.norm(), 0.01);
      assertEquals((-979.6797628902938), complex0.real(), 0.01);
      assertEquals(1631.4132449356, complex0.abs(), 0.01);
      assertEquals((-979.6797628902938), complex0.getReal(), 0.01);
      assertEquals((-1304.5063196223014), complex0.getImaginary(), 0.01);
      assertEquals((-1304.5063196223014), complex0.imag(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01);
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.real(), 0.01);
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.proj();
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertEquals((-2.2149349310924786), complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(2661509.1757513043, complex0.norm(), 0.01);
      assertEquals((-979.6797628902938), complex0.real(), 0.01);
      assertEquals(1631.4132449356, complex0.abs(), 0.01);
      assertEquals((-979.6797628902938), complex0.getReal(), 0.01);
      assertEquals((-1304.5063196223014), complex0.getImaginary(), 0.01);
      assertEquals((-1304.5063196223014), complex0.imag(), 0.01);
      assertEquals((-2.2149349310924786), complex2.arg(), 0.01);
      assertEquals((-1304.5063196223014), complex2.getImaginary(), 0.01);
      assertEquals((-1304.5063196223014), complex2.imag(), 0.01);
      assertEquals((-979.6797628902938), complex2.getReal(), 0.01);
      assertEquals(1631.4132449356, complex2.abs(), 0.01);
      assertEquals(2661509.1757513043, complex2.norm(), 0.01);
      assertEquals((-979.6797628902938), complex2.real(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex2);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex0.asinh();
      assertNotNull(complex3);
      assertFalse(complex0.isInfinite());
      assertEquals((-2.2149349310924786), complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(2661509.1757513043, complex0.norm(), 0.01);
      assertEquals((-979.6797628902938), complex0.real(), 0.01);
      assertEquals(1631.4132449356, complex0.abs(), 0.01);
      assertEquals((-979.6797628902938), complex0.getReal(), 0.01);
      assertEquals((-1304.5063196223014), complex0.getImaginary(), 0.01);
      assertEquals((-1304.5063196223014), complex0.imag(), 0.01);
      assertEquals((-3.0275509826952445), complex3.arg(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(66.31244282964886, complex3.norm(), 0.01);
      assertEquals((-8.090349093961803), complex3.getReal(), 0.01);
      assertEquals(8.143245227159063, complex3.abs(), 0.01);
      assertEquals((-0.9266576322894446), complex3.imag(), 0.01);
      assertEquals((-8.090349093961803), complex3.real(), 0.01);
      assertEquals((-0.9266576322894446), complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      
      double double0 = complex1.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-2.2149349310924786), complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(2661509.1757513043, complex0.norm(), 0.01);
      assertEquals((-979.6797628902938), complex0.real(), 0.01);
      assertEquals(1631.4132449356, complex0.abs(), 0.01);
      assertEquals((-979.6797628902938), complex0.getReal(), 0.01);
      assertEquals((-1304.5063196223014), complex0.getImaginary(), 0.01);
      assertEquals((-1304.5063196223014), complex0.imag(), 0.01);
      assertTrue(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.abs(), 0.01);
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.real(), 0.01);
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex1.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      
      double double1 = complex0.imag();
      assertEquals((-1304.5063196223014), double1, 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-2.2149349310924786), complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(2661509.1757513043, complex0.norm(), 0.01);
      assertEquals((-979.6797628902938), complex0.real(), 0.01);
      assertEquals(1631.4132449356, complex0.abs(), 0.01);
      assertEquals((-979.6797628902938), complex0.getReal(), 0.01);
      assertEquals((-1304.5063196223014), complex0.getImaginary(), 0.01);
      assertEquals((-1304.5063196223014), complex0.imag(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertNotEquals(double1, double0, 0.01);
      
      Complex complex4 = complex3.conj();
      assertNotNull(complex4);
      assertFalse(complex0.isInfinite());
      assertEquals((-2.2149349310924786), complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(2661509.1757513043, complex0.norm(), 0.01);
      assertEquals((-979.6797628902938), complex0.real(), 0.01);
      assertEquals(1631.4132449356, complex0.abs(), 0.01);
      assertEquals((-979.6797628902938), complex0.getReal(), 0.01);
      assertEquals((-1304.5063196223014), complex0.getImaginary(), 0.01);
      assertEquals((-1304.5063196223014), complex0.imag(), 0.01);
      assertEquals((-3.0275509826952445), complex3.arg(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(66.31244282964886, complex3.norm(), 0.01);
      assertEquals((-8.090349093961803), complex3.getReal(), 0.01);
      assertEquals(8.143245227159063, complex3.abs(), 0.01);
      assertEquals((-0.9266576322894446), complex3.imag(), 0.01);
      assertEquals((-8.090349093961803), complex3.real(), 0.01);
      assertEquals((-0.9266576322894446), complex3.getImaginary(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.9266576322894446, complex4.imag(), 0.01);
      assertEquals((-8.090349093961803), complex4.getReal(), 0.01);
      assertEquals(8.143245227159063, complex4.abs(), 0.01);
      assertEquals(3.0275509826952445, complex4.arg(), 0.01);
      assertEquals(66.31244282964886, complex4.norm(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(0.9266576322894446, complex4.getImaginary(), 0.01);
      assertEquals((-8.090349093961803), complex4.real(), 0.01);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(0.0, 0.0);
      assertNotNull(complex0);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.real(), 0.01);
      
      Complex complex1 = Complex.ofCartesian(358.78474326620994, 2.0);
      assertNotNull(complex1);
      assertEquals(2.0, complex1.imag(), 0.01);
      assertEquals(2.0, complex1.getImaginary(), 0.01);
      assertEquals(358.78474326620994, complex1.real(), 0.01);
      assertEquals(358.78474326620994, complex1.getReal(), 0.01);
      assertEquals(0.0055743153023253165, complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(128730.49200060018, complex1.norm(), 0.01);
      assertEquals(358.79031759594653, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.pow(1.7976931348623157E308);
      assertNotNull(complex2);
      assertEquals(2.0, complex1.imag(), 0.01);
      assertEquals(2.0, complex1.getImaginary(), 0.01);
      assertEquals(358.78474326620994, complex1.real(), 0.01);
      assertEquals(358.78474326620994, complex1.getReal(), 0.01);
      assertEquals(0.0055743153023253165, complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(128730.49200060018, complex1.norm(), 0.01);
      assertEquals(358.79031759594653, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.imag(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.real(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01);
      assertEquals((-2.356194490192345), complex2.arg(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.norm(), 0.01);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex2.tan();
      assertNotNull(complex3);
      assertEquals(2.0, complex1.imag(), 0.01);
      assertEquals(2.0, complex1.getImaginary(), 0.01);
      assertEquals(358.78474326620994, complex1.real(), 0.01);
      assertEquals(358.78474326620994, complex1.getReal(), 0.01);
      assertEquals(0.0055743153023253165, complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(128730.49200060018, complex1.norm(), 0.01);
      assertEquals(358.79031759594653, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getImaginary(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.imag(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex2.real(), 0.01);
      assertTrue(complex2.isInfinite());
      assertEquals(Double.NEGATIVE_INFINITY, complex2.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.abs(), 0.01);
      assertEquals((-2.356194490192345), complex2.arg(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex2.norm(), 0.01);
      assertEquals(1.0, complex3.abs(), 0.01);
      assertEquals(-0.0, complex3.real(), 0.01);
      assertEquals((-1.0), complex3.getImaginary(), 0.01);
      assertEquals(-0.0, complex3.getReal(), 0.01);
      assertEquals((-1.0), complex3.imag(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-1.5707963267948966), complex3.arg(), 0.01);
      assertEquals(1.0, complex3.norm(), 0.01);
      assertFalse(complex3.isNaN());
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = Complex.ofPolar(215.17888503885365, 215.17888503885365);
      assertNotNull(complex4);
      assertEquals(1.55058459474771, complex4.arg(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(4.348841858626636, complex4.real(), 0.01);
      assertEquals(215.17888503885365, complex4.abs(), 0.01);
      assertEquals(215.1349347294689, complex4.imag(), 0.01);
      assertEquals(4.348841858626636, complex4.getReal(), 0.01);
      assertEquals(46301.95256656419, complex4.norm(), 0.01);
      assertEquals(215.1349347294689, complex4.getImaginary(), 0.01);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      
      Complex complex5 = complex4.add(complex0);
      assertNotNull(complex5);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.55058459474771, complex4.arg(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(4.348841858626636, complex4.real(), 0.01);
      assertEquals(215.17888503885365, complex4.abs(), 0.01);
      assertEquals(215.1349347294689, complex4.imag(), 0.01);
      assertEquals(4.348841858626636, complex4.getReal(), 0.01);
      assertEquals(46301.95256656419, complex4.norm(), 0.01);
      assertEquals(215.1349347294689, complex4.getImaginary(), 0.01);
      assertEquals(215.1349347294689, complex5.imag(), 0.01);
      assertEquals(4.348841858626636, complex5.getReal(), 0.01);
      assertEquals(215.17888503885365, complex5.abs(), 0.01);
      assertEquals(215.1349347294689, complex5.getImaginary(), 0.01);
      assertEquals(1.55058459474771, complex5.arg(), 0.01);
      assertEquals(46301.95256656419, complex5.norm(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(4.348841858626636, complex5.real(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      
      Complex complex6 = complex5.ZERO.subtractFromImaginary(1.7976931348623157E308);
      assertNotNull(complex6);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.55058459474771, complex4.arg(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(4.348841858626636, complex4.real(), 0.01);
      assertEquals(215.17888503885365, complex4.abs(), 0.01);
      assertEquals(215.1349347294689, complex4.imag(), 0.01);
      assertEquals(4.348841858626636, complex4.getReal(), 0.01);
      assertEquals(46301.95256656419, complex4.norm(), 0.01);
      assertEquals(215.1349347294689, complex4.getImaginary(), 0.01);
      assertEquals(215.1349347294689, complex5.imag(), 0.01);
      assertEquals(4.348841858626636, complex5.getReal(), 0.01);
      assertEquals(215.17888503885365, complex5.abs(), 0.01);
      assertEquals(215.1349347294689, complex5.getImaginary(), 0.01);
      assertEquals(1.55058459474771, complex5.arg(), 0.01);
      assertEquals(46301.95256656419, complex5.norm(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(4.348841858626636, complex5.real(), 0.01);
      assertEquals(1.5707963267948966, complex6.arg(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex6.norm(), 0.01);
      assertEquals(1.7976931348623157E308, complex6.abs(), 0.01);
      assertEquals(-0.0, complex6.real(), 0.01);
      assertEquals(1.7976931348623157E308, complex6.getImaginary(), 0.01);
      assertEquals(1.7976931348623157E308, complex6.imag(), 0.01);
      assertEquals(-0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertTrue(complex4.equals((Object)complex5));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = Complex.ofPolar((-564.926595163783), 890.49);
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.ZERO.cosh();
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex1.abs(), 0.01);
      assertEquals(1.0, complex1.real(), 0.01);
      assertEquals(1.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.multiply(complex0);
      assertNotNull(complex2);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex1.abs(), 0.01);
      assertEquals(1.0, complex1.real(), 0.01);
      assertEquals(1.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(Double.NaN, complex2.abs(), 0.01);
      assertEquals(Double.NaN, complex2.real(), 0.01);
      assertEquals(Double.NaN, complex2.norm(), 0.01);
      assertEquals(Double.NaN, complex2.arg(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.imag(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex0));
      
      Complex complex3 = complex2.ONE.subtractImaginary((-564.926595163783));
      assertNotNull(complex3);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex1.abs(), 0.01);
      assertEquals(1.0, complex1.real(), 0.01);
      assertEquals(1.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(Double.NaN, complex2.abs(), 0.01);
      assertEquals(Double.NaN, complex2.real(), 0.01);
      assertEquals(Double.NaN, complex2.norm(), 0.01);
      assertEquals(Double.NaN, complex2.arg(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.imag(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(1.0, complex3.real(), 0.01);
      assertEquals(564.9274802338304, complex3.abs(), 0.01);
      assertEquals(564.926595163783, complex3.getImaginary(), 0.01);
      assertEquals(564.926595163783, complex3.imag(), 0.01);
      assertEquals(319143.0579233447, complex3.norm(), 0.01);
      assertEquals(1.569026187162428, complex3.arg(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      
      boolean boolean0 = complex0.isFinite();
      assertFalse(boolean0);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex2));
      
      double double0 = complex0.imag();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex2));
      
      Complex complex4 = complex0.proj();
      assertNotNull(complex4);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex4.abs(), 0.01);
      assertEquals(Double.NaN, complex4.real(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.arg(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.imag(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.norm(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex4, complex3);
      assertSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      
      Complex complex5 = complex4.ONE.add(complex1);
      assertNotNull(complex5);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex1.abs(), 0.01);
      assertEquals(1.0, complex1.real(), 0.01);
      assertEquals(1.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(Double.NaN, complex4.abs(), 0.01);
      assertEquals(Double.NaN, complex4.real(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.arg(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.imag(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.norm(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(2.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.arg(), 0.01);
      assertEquals(2.0, complex5.abs(), 0.01);
      assertEquals(2.0, complex5.real(), 0.01);
      assertEquals(4.0, complex5.norm(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex4, complex3);
      assertSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex3));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      
      Complex complex6 = complex0.conj();
      assertNotNull(complex6);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex6.abs(), 0.01);
      assertEquals(Double.NaN, complex6.real(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.arg(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertEquals(Double.NaN, complex6.imag(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.norm(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertTrue(complex6.equals((Object)complex0));
      assertTrue(complex6.equals((Object)complex4));
      assertTrue(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      
      Complex complex7 = complex3.cos();
      assertNotNull(complex7);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex1.abs(), 0.01);
      assertEquals(1.0, complex1.real(), 0.01);
      assertEquals(1.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(Double.NaN, complex2.abs(), 0.01);
      assertEquals(Double.NaN, complex2.real(), 0.01);
      assertEquals(Double.NaN, complex2.norm(), 0.01);
      assertEquals(Double.NaN, complex2.arg(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.imag(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(1.0, complex3.real(), 0.01);
      assertEquals(564.9274802338304, complex3.abs(), 0.01);
      assertEquals(564.926595163783, complex3.getImaginary(), 0.01);
      assertEquals(564.926595163783, complex3.imag(), 0.01);
      assertEquals(319143.0579233447, complex3.norm(), 0.01);
      assertEquals(1.569026187162428, complex3.arg(), 0.01);
      assertEquals((-1.0), complex7.arg(), 0.01);
      assertEquals((-9.300624481067937E244), complex7.getImaginary(), 0.01);
      assertEquals(5.971862302871789E244, complex7.getReal(), 0.01);
      assertEquals(5.971862302871789E244, complex7.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex7.norm(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(1.1052816613981315E245, complex7.abs(), 0.01);
      assertEquals((-9.300624481067937E244), complex7.imag(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex7);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      
      Complex complex8 = complex0.divide(0.0);
      assertNotNull(complex8);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertEquals(Double.NaN, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertEquals(Double.NaN, complex8.norm(), 0.01);
      assertEquals(Double.NaN, complex8.abs(), 0.01);
      assertTrue(complex8.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertTrue(complex8.equals((Object)complex4));
      assertTrue(complex8.equals((Object)complex6));
      assertTrue(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      
      Complex complex9 = complex8.proj();
      assertNotNull(complex9);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertEquals(Double.NaN, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertEquals(Double.NaN, complex8.norm(), 0.01);
      assertEquals(Double.NaN, complex8.abs(), 0.01);
      assertTrue(complex8.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals(Double.NaN, complex9.arg(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex9.imag(), 0.01);
      assertEquals(Double.NaN, complex9.real(), 0.01);
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.norm(), 0.01);
      assertEquals(Double.NaN, complex9.abs(), 0.01);
      assertTrue(complex9.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertSame(complex8, complex9);
      assertNotSame(complex8, complex3);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertTrue(complex8.equals((Object)complex4));
      assertTrue(complex8.equals((Object)complex6));
      assertTrue(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex5));
      assertTrue(complex9.equals((Object)complex0));
      assertTrue(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex3));
      
      Complex complex10 = complex9.proj();
      assertNotNull(complex10);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertEquals(Double.NaN, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertEquals(Double.NaN, complex8.norm(), 0.01);
      assertEquals(Double.NaN, complex8.abs(), 0.01);
      assertTrue(complex8.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals(Double.NaN, complex9.arg(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex9.imag(), 0.01);
      assertEquals(Double.NaN, complex9.real(), 0.01);
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.norm(), 0.01);
      assertEquals(Double.NaN, complex9.abs(), 0.01);
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex10.norm(), 0.01);
      assertEquals(Double.NaN, complex10.abs(), 0.01);
      assertEquals(Double.NaN, complex10.real(), 0.01);
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex10.imag(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertEquals(Double.NaN, complex10.arg(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertSame(complex8, complex10);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertSame(complex8, complex9);
      assertNotSame(complex8, complex3);
      assertNotSame(complex9, complex2);
      assertSame(complex9, complex10);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex3);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex2);
      assertSame(complex10, complex9);
      assertSame(complex10, complex8);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertTrue(complex8.equals((Object)complex4));
      assertTrue(complex8.equals((Object)complex6));
      assertTrue(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex5));
      assertTrue(complex9.equals((Object)complex0));
      assertTrue(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex3));
      assertTrue(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex5));
      assertTrue(complex10.equals((Object)complex0));
      assertTrue(complex10.equals((Object)complex4));
      assertTrue(complex10.equals((Object)complex6));
      
      Complex complex11 = complex10.I.pow(complex3);
      assertNotNull(complex11);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex1.abs(), 0.01);
      assertEquals(1.0, complex1.real(), 0.01);
      assertEquals(1.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(Double.NaN, complex2.abs(), 0.01);
      assertEquals(Double.NaN, complex2.real(), 0.01);
      assertEquals(Double.NaN, complex2.norm(), 0.01);
      assertEquals(Double.NaN, complex2.arg(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.imag(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(1.0, complex3.real(), 0.01);
      assertEquals(564.9274802338304, complex3.abs(), 0.01);
      assertEquals(564.926595163783, complex3.getImaginary(), 0.01);
      assertEquals(564.926595163783, complex3.imag(), 0.01);
      assertEquals(319143.0579233447, complex3.norm(), 0.01);
      assertEquals(1.569026187162428, complex3.arg(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertEquals(Double.NaN, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertEquals(Double.NaN, complex8.norm(), 0.01);
      assertEquals(Double.NaN, complex8.abs(), 0.01);
      assertTrue(complex8.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals(Double.NaN, complex9.arg(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex9.imag(), 0.01);
      assertEquals(Double.NaN, complex9.real(), 0.01);
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.norm(), 0.01);
      assertEquals(Double.NaN, complex9.abs(), 0.01);
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex10.norm(), 0.01);
      assertEquals(Double.NaN, complex10.abs(), 0.01);
      assertEquals(Double.NaN, complex10.real(), 0.01);
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex10.imag(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertEquals(Double.NaN, complex10.arg(), 0.01);
      assertEquals(0.0, complex11.abs(), 0.01);
      assertEquals(0.0, complex11.real(), 0.01);
      assertEquals(0.0, complex11.norm(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(0.0, complex11.arg(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertEquals(0.0, complex11.imag(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex7);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex11);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertSame(complex8, complex10);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertSame(complex8, complex9);
      assertNotSame(complex8, complex3);
      assertNotSame(complex9, complex2);
      assertSame(complex9, complex10);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex3);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex2);
      assertSame(complex10, complex9);
      assertNotSame(complex10, complex11);
      assertSame(complex10, complex8);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex0);
      assertTrue(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex10));
      assertTrue(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex9));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertTrue(complex8.equals((Object)complex4));
      assertTrue(complex8.equals((Object)complex6));
      assertTrue(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex5));
      assertTrue(complex9.equals((Object)complex0));
      assertTrue(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex3));
      assertTrue(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex5));
      assertTrue(complex10.equals((Object)complex0));
      assertTrue(complex10.equals((Object)complex4));
      assertTrue(complex10.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex0));
      
      Complex complex12 = complex11.log();
      assertNotNull(complex12);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex1.abs(), 0.01);
      assertEquals(1.0, complex1.real(), 0.01);
      assertEquals(1.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(Double.NaN, complex2.abs(), 0.01);
      assertEquals(Double.NaN, complex2.real(), 0.01);
      assertEquals(Double.NaN, complex2.norm(), 0.01);
      assertEquals(Double.NaN, complex2.arg(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.imag(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(1.0, complex3.real(), 0.01);
      assertEquals(564.9274802338304, complex3.abs(), 0.01);
      assertEquals(564.926595163783, complex3.getImaginary(), 0.01);
      assertEquals(564.926595163783, complex3.imag(), 0.01);
      assertEquals(319143.0579233447, complex3.norm(), 0.01);
      assertEquals(1.569026187162428, complex3.arg(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertEquals(Double.NaN, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertEquals(Double.NaN, complex8.norm(), 0.01);
      assertEquals(Double.NaN, complex8.abs(), 0.01);
      assertTrue(complex8.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals(Double.NaN, complex9.arg(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex9.imag(), 0.01);
      assertEquals(Double.NaN, complex9.real(), 0.01);
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.norm(), 0.01);
      assertEquals(Double.NaN, complex9.abs(), 0.01);
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex10.norm(), 0.01);
      assertEquals(Double.NaN, complex10.abs(), 0.01);
      assertEquals(Double.NaN, complex10.real(), 0.01);
      assertEquals(Double.NaN, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(Double.NaN, complex10.imag(), 0.01);
      assertTrue(complex10.isNaN());
      assertEquals(Double.NaN, complex10.getReal(), 0.01);
      assertEquals(Double.NaN, complex10.arg(), 0.01);
      assertEquals(0.0, complex11.abs(), 0.01);
      assertEquals(0.0, complex11.real(), 0.01);
      assertEquals(0.0, complex11.norm(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(0.0, complex11.arg(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertEquals(0.0, complex11.imag(), 0.01);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertFalse(complex12.isNaN());
      assertEquals(0.0, complex12.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex12.norm(), 0.01);
      assertEquals(0.0, complex12.imag(), 0.01);
      assertEquals(3.141592653589793, complex12.arg(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex12.getReal(), 0.01);
      assertTrue(complex12.isInfinite());
      assertEquals(Double.POSITIVE_INFINITY, complex12.abs(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex12.real(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex12);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex7);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex11);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex12);
      assertSame(complex8, complex10);
      assertNotSame(complex8, complex0);
      assertSame(complex8, complex9);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex2);
      assertSame(complex9, complex10);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex3);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex2);
      assertSame(complex10, complex9);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex12);
      assertSame(complex10, complex8);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex12);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex0);
      assertTrue(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex10));
      assertTrue(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex5));
      assertTrue(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex11));
      assertTrue(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertTrue(complex8.equals((Object)complex4));
      assertTrue(complex8.equals((Object)complex6));
      assertTrue(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex11));
      assertTrue(complex9.equals((Object)complex0));
      assertTrue(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex3));
      assertTrue(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex5));
      assertTrue(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex11));
      assertTrue(complex10.equals((Object)complex4));
      assertTrue(complex10.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      
      Complex complex1 = complex0.negate();
      assertNotNull(complex1);
      assertEquals(0.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-3.141592653589793), complex1.arg(), 0.01);
      assertEquals(-0.0, complex1.imag(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertEquals(-0.0, complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      List<Complex> list0 = complex1.nthRoot(2330);
      assertTrue(list0.contains(complex1));
      assertNotNull(list0);
      assertEquals(0.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-3.141592653589793), complex1.arg(), 0.01);
      assertEquals(-0.0, complex1.imag(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertEquals(-0.0, complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(2330, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.divide((double) 3180);
      assertNotNull(complex2);
      assertEquals(0.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-3.141592653589793), complex1.arg(), 0.01);
      assertEquals(-0.0, complex1.imag(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertEquals(-0.0, complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals((-3.141592653589793), complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.imag(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.norm(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      
      Complex complex3 = Complex.ofPolar((-1268.60327982685), 596.9);
      assertNotNull(complex3);
      assertEquals(Double.NaN, complex3.abs(), 0.01);
      assertEquals(Double.NaN, complex3.real(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.norm(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.imag(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.arg(), 0.01);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      
      Complex complex4 = complex2.tan();
      assertNotNull(complex4);
      assertEquals(0.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-3.141592653589793), complex1.arg(), 0.01);
      assertEquals(-0.0, complex1.imag(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertEquals(-0.0, complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals((-3.141592653589793), complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.imag(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertEquals(-0.0, complex4.real(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.imag(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals((-3.141592653589793), complex4.arg(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex3));
      assertTrue(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      
      Complex complex5 = complex3.I.cos();
      assertNotNull(complex5);
      assertEquals(Double.NaN, complex3.abs(), 0.01);
      assertEquals(Double.NaN, complex3.real(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.norm(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.imag(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.arg(), 0.01);
      assertEquals(-0.0, complex5.arg(), 0.01);
      assertEquals(1.543080634815244, complex5.abs(), 0.01);
      assertEquals(1.543080634815244, complex5.real(), 0.01);
      assertEquals(2.381097845541816, complex5.norm(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(1.543080634815244, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(-0.0, complex5.imag(), 0.01);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      
      Complex complex6 = complex4.I.subtract((-1268.60327982685));
      assertNotNull(complex6);
      assertEquals(0.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-3.141592653589793), complex1.arg(), 0.01);
      assertEquals(-0.0, complex1.imag(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertEquals(-0.0, complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals((-3.141592653589793), complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.imag(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertEquals(-0.0, complex4.real(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(-0.0, complex4.imag(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals((-3.141592653589793), complex4.arg(), 0.01);
      assertEquals(1268.603673961037, complex6.abs(), 0.01);
      assertEquals(1268.60327982685, complex6.real(), 0.01);
      assertEquals(1609355.281587441, complex6.norm(), 0.01);
      assertEquals(7.882683331972455E-4, complex6.arg(), 0.01);
      assertEquals(1268.60327982685, complex6.getReal(), 0.01);
      assertEquals(1.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(1.0, complex6.imag(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex5);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex5));
      
      Complex complex7 = complex3.atanh();
      assertNotNull(complex7);
      assertEquals(Double.NaN, complex3.abs(), 0.01);
      assertEquals(Double.NaN, complex3.real(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.norm(), 0.01);
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.imag(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.arg(), 0.01);
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex7.norm(), 0.01);
      assertEquals(Double.NaN, complex7.imag(), 0.01);
      assertTrue(complex7.isNaN());
      assertEquals(Double.NaN, complex7.arg(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.abs(), 0.01);
      assertEquals(Double.NaN, complex7.real(), 0.01);
      assertFalse(complex7.isInfinite());
      assertSame(complex3, complex7);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex5);
      assertSame(complex7, complex3);
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex5));
      
      Complex complex8 = Complex.ofCis(596.9);
      assertNotNull(complex8);
      assertEquals(0.9999999999999999, complex8.norm(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(0.9999966091198136, complex8.real(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(1.0, complex8.abs(), 0.01);
      assertEquals((-0.002604179117247596), complex8.imag(), 0.01);
      assertEquals((-0.002604179117247596), complex8.getImaginary(), 0.01);
      assertEquals((-0.0026041820607380453), complex8.arg(), 0.01);
      assertEquals(0.9999966091198136, complex8.getReal(), 0.01);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex5);
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex5));
      
      Complex complex9 = complex8.sqrt();
      assertNotNull(complex9);
      assertEquals(0.9999999999999999, complex8.norm(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(0.9999966091198136, complex8.real(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(1.0, complex8.abs(), 0.01);
      assertEquals((-0.002604179117247596), complex8.imag(), 0.01);
      assertEquals((-0.002604179117247596), complex8.getImaginary(), 0.01);
      assertEquals((-0.0026041820607380453), complex8.arg(), 0.01);
      assertEquals(0.9999966091198136, complex8.getReal(), 0.01);
      assertEquals(1.0, complex9.abs(), 0.01);
      assertEquals((-0.001302090662432623), complex9.imag(), 0.01);
      assertEquals(0.9999991522795941, complex9.getReal(), 0.01);
      assertEquals(1.0, complex9.norm(), 0.01);
      assertEquals((-0.001302090662432623), complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals((-0.0013020910303690226), complex9.arg(), 0.01);
      assertEquals(0.9999991522795941, complex9.real(), 0.01);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex5);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex5);
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex5));
      
      Complex complex10 = complex0.divideImaginary((-1268.60327982685));
      assertNotNull(complex10);
      assertEquals(0.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(3.141592653589793, complex10.arg(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(0.0, complex10.imag(), 0.01);
      assertEquals(-0.0, complex10.real(), 0.01);
      assertEquals(-0.0, complex10.getReal(), 0.01);
      assertEquals(0.0, complex10.abs(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.norm(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex7);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex7));
      
      List<Complex> list1 = complex9.nthRoot(2356);
      assertFalse(list1.contains(complex9));
      assertNotNull(list1);
      assertEquals(0.9999999999999999, complex8.norm(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(0.9999966091198136, complex8.real(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(1.0, complex8.abs(), 0.01);
      assertEquals((-0.002604179117247596), complex8.imag(), 0.01);
      assertEquals((-0.002604179117247596), complex8.getImaginary(), 0.01);
      assertEquals((-0.0026041820607380453), complex8.arg(), 0.01);
      assertEquals(0.9999966091198136, complex8.getReal(), 0.01);
      assertEquals(1.0, complex9.abs(), 0.01);
      assertEquals((-0.001302090662432623), complex9.imag(), 0.01);
      assertEquals(0.9999991522795941, complex9.getReal(), 0.01);
      assertEquals(1.0, complex9.norm(), 0.01);
      assertEquals((-0.001302090662432623), complex9.getImaginary(), 0.01);
      assertFalse(complex9.isNaN());
      assertFalse(complex9.isInfinite());
      assertEquals((-0.0013020910303690226), complex9.arg(), 0.01);
      assertEquals(0.9999991522795941, complex9.real(), 0.01);
      assertFalse(list1.isEmpty());
      assertEquals(2356, list1.size());
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex5);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex5);
      assertNotSame(list1, list0);
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(list1.equals((Object)list0));
      
      Complex complex11 = complex8.acosh();
      assertNotNull(complex11);
      assertEquals(0.9999999999999999, complex8.norm(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(0.9999966091198136, complex8.real(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(1.0, complex8.abs(), 0.01);
      assertEquals((-0.002604179117247596), complex8.imag(), 0.01);
      assertEquals((-0.002604179117247596), complex8.getImaginary(), 0.01);
      assertEquals((-0.0026041820607380453), complex8.arg(), 0.01);
      assertEquals(0.9999966091198136, complex8.getReal(), 0.01);
      assertEquals((-0.0510533333405902), complex11.getImaginary(), 0.01);
      assertEquals((-0.0510533333405902), complex11.imag(), 0.01);
      assertEquals(0.05100903516786382, complex11.getReal(), 0.01);
      assertEquals(0.005208364513941787, complex11.norm(), 0.01);
      assertEquals(0.07216899967397211, complex11.abs(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals((-0.785832193790747), complex11.arg(), 0.01);
      assertEquals(0.05100903516786382, complex11.real(), 0.01);
      assertFalse(complex11.isNaN());
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex5);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex4);
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex10));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex4));
      
      Complex complex12 = Complex.ofPolar(2330, 596.9);
      assertNotNull(complex12);
      assertEquals((-0.0026041820607380453), complex12.arg(), 0.01);
      assertEquals(2329.9920992491657, complex12.getReal(), 0.01);
      assertEquals((-6.067737343186899), complex12.getImaginary(), 0.01);
      assertEquals((-6.067737343186899), complex12.imag(), 0.01);
      assertEquals(5428900.0, complex12.norm(), 0.01);
      assertEquals(2329.9920992491657, complex12.real(), 0.01);
      assertEquals(2330.0, complex12.abs(), 0.01);
      assertFalse(complex12.isNaN());
      assertFalse(complex12.isInfinite());
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex4);
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex4));
      
      Complex complex13 = Complex.ofPolar((-2159.56121), (-2159.56121));
      assertNotNull(complex13);
      assertEquals(Double.NaN, complex13.arg(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals(Double.NaN, complex13.imag(), 0.01);
      assertEquals(Double.NaN, complex13.real(), 0.01);
      assertEquals(Double.NaN, complex13.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex13.getReal(), 0.01);
      assertEquals(Double.NaN, complex13.norm(), 0.01);
      assertEquals(Double.NaN, complex13.abs(), 0.01);
      assertTrue(complex13.isNaN());
      assertSame(complex13, complex3);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex0);
      assertSame(complex13, complex7);
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex5));
      
      Complex complex14 = complex1.log();
      assertNotNull(complex14);
      assertEquals((-3.141592653589793), complex14.getImaginary(), 0.01);
      assertTrue(complex14.isInfinite());
      assertEquals((-3.141592653589793), complex14.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex14.abs(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex14.real(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex14.norm(), 0.01);
      assertEquals((-3.141592653589793), complex14.arg(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex14.getReal(), 0.01);
      assertEquals(0.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-3.141592653589793), complex1.arg(), 0.01);
      assertEquals(-0.0, complex1.imag(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertEquals(-0.0, complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex9);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex14);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex6);
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex2));
      
      Complex complex15 = complex2.log10();
      assertNotNull(complex15);
      assertEquals(0.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex15.getReal(), 0.01);
      assertTrue(complex15.isInfinite());
      assertEquals((-3.141592653589793), complex15.getImaginary(), 0.01);
      assertEquals((-3.141592653589793), complex15.imag(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex15.real(), 0.01);
      assertEquals((-3.141592653589793), complex15.arg(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex15.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex15.abs(), 0.01);
      assertEquals(0.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-3.141592653589793), complex1.arg(), 0.01);
      assertEquals(-0.0, complex1.imag(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertEquals(-0.0, complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals((-3.141592653589793), complex2.arg(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.imag(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.norm(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex14);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex7);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex6);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex8);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex14));
      assertTrue(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex14));
      assertTrue(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex12));
      assertTrue(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex8));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(2.718281828459045, 3837.11469428);
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertEquals(3837.1156571200195, complex0.abs(), 0.01);
      assertEquals(1.5700879087281179, complex0.arg(), 0.01);
      assertEquals(2.718281828459045, complex0.getReal(), 0.01);
      assertEquals(1.4723456566115597E7, complex0.norm(), 0.01);
      assertEquals(3837.11469428, complex0.getImaginary(), 0.01);
      assertEquals(2.718281828459045, complex0.real(), 0.01);
      assertEquals(3837.11469428, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.sqrt();
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertEquals(3837.1156571200195, complex0.abs(), 0.01);
      assertEquals(1.5700879087281179, complex0.arg(), 0.01);
      assertEquals(2.718281828459045, complex0.getReal(), 0.01);
      assertEquals(1.4723456566115597E7, complex0.norm(), 0.01);
      assertEquals(3837.11469428, complex0.getImaginary(), 0.01);
      assertEquals(2.718281828459045, complex0.real(), 0.01);
      assertEquals(3837.11469428, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.7850439543640589, complex1.arg(), 0.01);
      assertEquals(43.816857138254896, complex1.getReal(), 0.01);
      assertEquals(43.78582747471812, complex1.getImaginary(), 0.01);
      assertEquals(61.94445622588045, complex1.abs(), 0.01);
      assertEquals(43.816857138254896, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(43.78582747471812, complex1.imag(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(3837.115657120019, complex1.norm(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.I.divide(complex0);
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertEquals(3837.1156571200195, complex0.abs(), 0.01);
      assertEquals(1.5700879087281179, complex0.arg(), 0.01);
      assertEquals(2.718281828459045, complex0.getReal(), 0.01);
      assertEquals(1.4723456566115597E7, complex0.norm(), 0.01);
      assertEquals(3837.11469428, complex0.getImaginary(), 0.01);
      assertEquals(2.718281828459045, complex0.real(), 0.01);
      assertEquals(3837.11469428, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.7850439543640589, complex1.arg(), 0.01);
      assertEquals(43.816857138254896, complex1.getReal(), 0.01);
      assertEquals(43.78582747471812, complex1.getImaginary(), 0.01);
      assertEquals(61.94445622588045, complex1.abs(), 0.01);
      assertEquals(43.816857138254896, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(43.78582747471812, complex1.imag(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(3837.115657120019, complex1.norm(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(7.084180667787587E-4, complex2.arg(), 0.01);
      assertEquals(2.606124207239974E-4, complex2.abs(), 0.01);
      assertEquals(1.846225318255001E-7, complex2.imag(), 0.01);
      assertEquals(2.606123553290261E-4, complex2.getReal(), 0.01);
      assertEquals(2.606123553290261E-4, complex2.real(), 0.01);
      assertEquals(1.846225318255001E-7, complex2.getImaginary(), 0.01);
      assertEquals(6.791883383562182E-8, complex2.norm(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = Complex.ofPolar(2048.0, 128.83512052767253);
      assertNotNull(complex3);
      assertEquals(4194304.0, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-3.1117709230987867), complex3.arg(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-2047.089387825548), complex3.real(), 0.01);
      assertEquals(2048.0, complex3.abs(), 0.01);
      assertEquals((-2047.089387825548), complex3.getReal(), 0.01);
      assertEquals((-61.065851766948036), complex3.imag(), 0.01);
      assertEquals((-61.065851766948036), complex3.getImaginary(), 0.01);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      
      Complex complex4 = Complex.ofPolar((-78.59880468132747), 128.83512052767253);
      assertNotNull(complex4);
      assertEquals(Double.NaN, complex4.abs(), 0.01);
      assertEquals(Double.NaN, complex4.real(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.arg(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.imag(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.norm(), 0.01);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complex4.sinh();
      assertNotNull(complex5);
      assertEquals(Double.NaN, complex4.abs(), 0.01);
      assertEquals(Double.NaN, complex4.real(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.arg(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.imag(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.norm(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.imag(), 0.01);
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.norm(), 0.01);
      assertEquals(Double.NaN, complex5.abs(), 0.01);
      assertEquals(Double.NaN, complex5.real(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.arg(), 0.01);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      
      Complex complex6 = Complex.ofCartesian(2048.0, 2048.0);
      assertNotNull(complex6);
      assertEquals(0.7853981633974483, complex6.arg(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(2048.0, complex6.getImaginary(), 0.01);
      assertEquals(2896.309375740099, complex6.abs(), 0.01);
      assertEquals(2048.0, complex6.imag(), 0.01);
      assertEquals(2048.0, complex6.real(), 0.01);
      assertEquals(2048.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(8388608.0, complex6.norm(), 0.01);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      
      Complex complex7 = complex0.multiplyImaginary(2.2531019124809635E-13);
      assertNotNull(complex7);
      assertFalse(complex0.isInfinite());
      assertEquals(3837.1156571200195, complex0.abs(), 0.01);
      assertEquals(1.5700879087281179, complex0.arg(), 0.01);
      assertEquals(2.718281828459045, complex0.getReal(), 0.01);
      assertEquals(1.4723456566115597E7, complex0.norm(), 0.01);
      assertEquals(3837.11469428, complex0.getImaginary(), 0.01);
      assertEquals(2.718281828459045, complex0.real(), 0.01);
      assertEquals(3837.11469428, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-8.645410456091076E-10), complex7.real(), 0.01);
      assertEquals(8.645412625467764E-10, complex7.abs(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(3.1408842355230147, complex7.arg(), 0.01);
      assertEquals(7.474315946459742E-19, complex7.norm(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(6.124565986363325E-13, complex7.getImaginary(), 0.01);
      assertEquals((-8.645410456091076E-10), complex7.getReal(), 0.01);
      assertEquals(6.124565986363325E-13, complex7.imag(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex7);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex5);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      
      Complex complex8 = complex7.ZERO.exp();
      assertNotNull(complex8);
      assertFalse(complex0.isInfinite());
      assertEquals(3837.1156571200195, complex0.abs(), 0.01);
      assertEquals(1.5700879087281179, complex0.arg(), 0.01);
      assertEquals(2.718281828459045, complex0.getReal(), 0.01);
      assertEquals(1.4723456566115597E7, complex0.norm(), 0.01);
      assertEquals(3837.11469428, complex0.getImaginary(), 0.01);
      assertEquals(2.718281828459045, complex0.real(), 0.01);
      assertEquals(3837.11469428, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-8.645410456091076E-10), complex7.real(), 0.01);
      assertEquals(8.645412625467764E-10, complex7.abs(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(3.1408842355230147, complex7.arg(), 0.01);
      assertEquals(7.474315946459742E-19, complex7.norm(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(6.124565986363325E-13, complex7.getImaginary(), 0.01);
      assertEquals((-8.645410456091076E-10), complex7.getReal(), 0.01);
      assertEquals(6.124565986363325E-13, complex7.imag(), 0.01);
      assertEquals(0.0, complex8.arg(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertEquals(1.0, complex8.abs(), 0.01);
      assertEquals(1.0, complex8.norm(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.imag(), 0.01);
      assertEquals(1.0, complex8.real(), 0.01);
      assertEquals(0.0, complex8.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex5);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex6));
      
      Complex complex9 = complex5.add(complex0);
      assertNotNull(complex9);
      assertFalse(complex0.isInfinite());
      assertEquals(3837.1156571200195, complex0.abs(), 0.01);
      assertEquals(1.5700879087281179, complex0.arg(), 0.01);
      assertEquals(2.718281828459045, complex0.getReal(), 0.01);
      assertEquals(1.4723456566115597E7, complex0.norm(), 0.01);
      assertEquals(3837.11469428, complex0.getImaginary(), 0.01);
      assertEquals(2.718281828459045, complex0.real(), 0.01);
      assertEquals(3837.11469428, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(Double.NaN, complex4.abs(), 0.01);
      assertEquals(Double.NaN, complex4.real(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.arg(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.imag(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.norm(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.imag(), 0.01);
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.norm(), 0.01);
      assertEquals(Double.NaN, complex5.abs(), 0.01);
      assertEquals(Double.NaN, complex5.real(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.arg(), 0.01);
      assertEquals(Double.NaN, complex9.norm(), 0.01);
      assertEquals(Double.NaN, complex9.imag(), 0.01);
      assertEquals(Double.NaN, complex9.real(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(Double.NaN, complex9.arg(), 0.01);
      assertEquals(Double.NaN, complex9.abs(), 0.01);
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex9);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex6);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex6));
      assertTrue(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex1));
      assertTrue(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex6));
      assertTrue(complex9.equals((Object)complex5));
      
      Complex complex10 = Complex.I;
      assertNotNull(complex10);
      assertEquals(1.0, complex10.norm(), 0.01);
      assertEquals(1.5707963267948966, complex10.arg(), 0.01);
      assertEquals(1.0, complex10.abs(), 0.01);
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.real(), 0.01);
      assertEquals(1.0, complex10.imag(), 0.01);
      assertEquals(1.0, complex10.getImaginary(), 0.01);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex9);
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex9));
      
      Complex complex11 = complex6.acos();
      assertNotNull(complex11);
      assertEquals(0.7853981633974483, complex6.arg(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(2048.0, complex6.getImaginary(), 0.01);
      assertEquals(2896.309375740099, complex6.abs(), 0.01);
      assertEquals(2048.0, complex6.imag(), 0.01);
      assertEquals(2048.0, complex6.real(), 0.01);
      assertEquals(2048.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(8388608.0, complex6.norm(), 0.01);
      assertEquals(0.7853981931997707, complex11.getReal(), 0.01);
      assertEquals((-8.664339756999318), complex11.imag(), 0.01);
      assertEquals((-8.664339756999318), complex11.getImaginary(), 0.01);
      assertEquals(75.68763374660047, complex11.norm(), 0.01);
      assertEquals((-1.4803961837590744), complex11.arg(), 0.01);
      assertEquals(8.699864007362441, complex11.abs(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex11.isNaN());
      assertEquals(0.7853981931997707, complex11.real(), 0.01);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex4);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex0);
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-1.0));
      assertNotNull(complex0);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      
      Complex complex1 = complex0.acosh();
      assertNotNull(complex1);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals((-1.1612894529345954), complex1.imag(), 0.01);
      assertEquals((-1.1612894529345954), complex1.getImaginary(), 0.01);
      assertEquals(1.4225881060149583, complex1.abs(), 0.01);
      assertEquals((-0.9550136730162333), complex1.arg(), 0.01);
      assertEquals(2.0237569193752263, complex1.norm(), 0.01);
      assertEquals(0.8216834706126773, complex1.getReal(), 0.01);
      assertEquals(0.8216834706126773, complex1.real(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.acos();
      assertNotNull(complex2);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.4225881060149583, complex2.abs(), 0.01);
      assertEquals(0.6157826537786633, complex2.arg(), 0.01);
      assertEquals(2.0237569193752263, complex2.norm(), 0.01);
      assertEquals(0.8216834706126773, complex2.imag(), 0.01);
      assertEquals(1.1612894529345954, complex2.real(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.8216834706126773, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.1612894529345954, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      String string0 = complex0.ZERO.toString();
      assertNotNull(string0);
      assertEquals("(0.0,0.0)", string0);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      
      Complex complex3 = complex0.divide((-1.0));
      assertNotNull(complex3);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(2.141592653589793, complex3.arg(), 0.01);
      assertEquals(1.0, complex3.norm(), 0.01);
      assertEquals(1.0, complex3.abs(), 0.01);
      assertEquals((-0.5403023058681398), complex3.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex3.imag(), 0.01);
      assertEquals((-0.5403023058681398), complex3.real(), 0.01);
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      
      boolean boolean1 = complex1.isFinite();
      assertTrue(boolean1);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals((-1.1612894529345954), complex1.imag(), 0.01);
      assertEquals((-1.1612894529345954), complex1.getImaginary(), 0.01);
      assertEquals(1.4225881060149583, complex1.abs(), 0.01);
      assertEquals((-0.9550136730162333), complex1.arg(), 0.01);
      assertEquals(2.0237569193752263, complex1.norm(), 0.01);
      assertEquals(0.8216834706126773, complex1.getReal(), 0.01);
      assertEquals(0.8216834706126773, complex1.real(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(boolean1 == boolean0);
      
      Complex complex4 = complex1.subtract(complex0);
      assertNotNull(complex4);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals((-1.1612894529345954), complex1.imag(), 0.01);
      assertEquals((-1.1612894529345954), complex1.getImaginary(), 0.01);
      assertEquals(1.4225881060149583, complex1.abs(), 0.01);
      assertEquals((-0.9550136730162333), complex1.arg(), 0.01);
      assertEquals(2.0237569193752263, complex1.norm(), 0.01);
      assertEquals(0.8216834706126773, complex1.getReal(), 0.01);
      assertEquals(0.8216834706126773, complex1.real(), 0.01);
      assertEquals(0.18145921242790092, complex4.norm(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.28138116474453756, complex4.real(), 0.01);
      assertEquals((-0.3198184681266989), complex4.getImaginary(), 0.01);
      assertEquals((-0.8492456064860684), complex4.arg(), 0.01);
      assertEquals((-0.3198184681266989), complex4.imag(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(0.4259802958211811, complex4.abs(), 0.01);
      assertEquals(0.28138116474453756, complex4.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      
      Complex complex5 = complex4.divide((-1.0));
      assertNotNull(complex5);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals((-1.1612894529345954), complex1.imag(), 0.01);
      assertEquals((-1.1612894529345954), complex1.getImaginary(), 0.01);
      assertEquals(1.4225881060149583, complex1.abs(), 0.01);
      assertEquals((-0.9550136730162333), complex1.arg(), 0.01);
      assertEquals(2.0237569193752263, complex1.norm(), 0.01);
      assertEquals(0.8216834706126773, complex1.getReal(), 0.01);
      assertEquals(0.8216834706126773, complex1.real(), 0.01);
      assertEquals(0.18145921242790092, complex4.norm(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.28138116474453756, complex4.real(), 0.01);
      assertEquals((-0.3198184681266989), complex4.getImaginary(), 0.01);
      assertEquals((-0.8492456064860684), complex4.arg(), 0.01);
      assertEquals((-0.3198184681266989), complex4.imag(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(0.4259802958211811, complex4.abs(), 0.01);
      assertEquals(0.28138116474453756, complex4.getReal(), 0.01);
      assertEquals(0.4259802958211811, complex5.abs(), 0.01);
      assertEquals(0.18145921242790092, complex5.norm(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(0.3198184681266989, complex5.imag(), 0.01);
      assertEquals(0.3198184681266989, complex5.getImaginary(), 0.01);
      assertEquals(2.292347047103725, complex5.arg(), 0.01);
      assertEquals((-0.28138116474453756), complex5.getReal(), 0.01);
      assertEquals((-0.28138116474453756), complex5.real(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(72.97940615555137, 72.97940615555137);
      assertNotNull(complex0);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(5325.993722816929, complex0.norm(), 0.01);
      assertEquals(72.97940615555137, complex0.abs(), 0.01);
      assertEquals((-48.27357712323866), complex0.getImaginary(), 0.01);
      assertEquals((-54.732581471584716), complex0.getReal(), 0.01);
      assertEquals((-48.27357712323866), complex0.imag(), 0.01);
      assertEquals((-2.4188175306036643), complex0.arg(), 0.01);
      assertEquals((-54.732581471584716), complex0.real(), 0.01);
      
      Complex complex1 = complex0.subtract(1329.4988554173717);
      assertNotNull(complex1);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(5325.993722816929, complex0.norm(), 0.01);
      assertEquals(72.97940615555137, complex0.abs(), 0.01);
      assertEquals((-48.27357712323866), complex0.getImaginary(), 0.01);
      assertEquals((-54.732581471584716), complex0.getReal(), 0.01);
      assertEquals((-48.27357712323866), complex0.imag(), 0.01);
      assertEquals((-2.4188175306036643), complex0.arg(), 0.01);
      assertEquals((-54.732581471584716), complex0.real(), 0.01);
      assertEquals(1918427.0091199386, complex1.norm(), 0.01);
      assertEquals((-48.27357712323866), complex1.imag(), 0.01);
      assertEquals((-1384.2314368889565), complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-3.106732860528631), complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1385.072925560217, complex1.abs(), 0.01);
      assertEquals((-48.27357712323866), complex1.getImaginary(), 0.01);
      assertEquals((-1384.2314368889565), complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.subtract(72.97940615555137);
      assertNotNull(complex2);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(5325.993722816929, complex0.norm(), 0.01);
      assertEquals(72.97940615555137, complex0.abs(), 0.01);
      assertEquals((-48.27357712323866), complex0.getImaginary(), 0.01);
      assertEquals((-54.732581471584716), complex0.getReal(), 0.01);
      assertEquals((-48.27357712323866), complex0.imag(), 0.01);
      assertEquals((-2.4188175306036643), complex0.arg(), 0.01);
      assertEquals((-54.732581471584716), complex0.real(), 0.01);
      assertEquals(1918427.0091199386, complex1.norm(), 0.01);
      assertEquals((-48.27357712323866), complex1.imag(), 0.01);
      assertEquals((-1384.2314368889565), complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-3.106732860528631), complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1385.072925560217, complex1.abs(), 0.01);
      assertEquals((-48.27357712323866), complex1.getImaginary(), 0.01);
      assertEquals((-1384.2314368889565), complex1.getReal(), 0.01);
      assertEquals((-48.27357712323866), complex2.getImaginary(), 0.01);
      assertEquals((-48.27357712323866), complex2.imag(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1458.0102123561269, complex2.abs(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals((-1457.2108430445078), complex2.real(), 0.01);
      assertEquals(2125793.7793347584, complex2.norm(), 0.01);
      assertEquals((-1457.2108430445078), complex2.getReal(), 0.01);
      assertEquals((-3.1084773840166675), complex2.arg(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = Complex.ofCartesian(1329.4988554173717, 4543.98258);
      assertNotNull(complex3);
      assertEquals(1.286156554420561, complex3.arg(), 0.01);
      assertEquals(4543.98258, complex3.imag(), 0.01);
      assertEquals(1329.4988554173717, complex3.real(), 0.01);
      assertEquals(4543.98258, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(1329.4988554173717, complex3.getReal(), 0.01);
      assertEquals(2.2415344893899556E7, complex3.norm(), 0.01);
      assertEquals(4734.484649241093, complex3.abs(), 0.01);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      
      Complex complex4 = complex2.negate();
      assertNotNull(complex4);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(5325.993722816929, complex0.norm(), 0.01);
      assertEquals(72.97940615555137, complex0.abs(), 0.01);
      assertEquals((-48.27357712323866), complex0.getImaginary(), 0.01);
      assertEquals((-54.732581471584716), complex0.getReal(), 0.01);
      assertEquals((-48.27357712323866), complex0.imag(), 0.01);
      assertEquals((-2.4188175306036643), complex0.arg(), 0.01);
      assertEquals((-54.732581471584716), complex0.real(), 0.01);
      assertEquals(1918427.0091199386, complex1.norm(), 0.01);
      assertEquals((-48.27357712323866), complex1.imag(), 0.01);
      assertEquals((-1384.2314368889565), complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-3.106732860528631), complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1385.072925560217, complex1.abs(), 0.01);
      assertEquals((-48.27357712323866), complex1.getImaginary(), 0.01);
      assertEquals((-1384.2314368889565), complex1.getReal(), 0.01);
      assertEquals((-48.27357712323866), complex2.getImaginary(), 0.01);
      assertEquals((-48.27357712323866), complex2.imag(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1458.0102123561269, complex2.abs(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals((-1457.2108430445078), complex2.real(), 0.01);
      assertEquals(2125793.7793347584, complex2.norm(), 0.01);
      assertEquals((-1457.2108430445078), complex2.getReal(), 0.01);
      assertEquals((-3.1084773840166675), complex2.arg(), 0.01);
      assertEquals(48.27357712323866, complex4.imag(), 0.01);
      assertEquals(1457.2108430445078, complex4.real(), 0.01);
      assertEquals(48.27357712323866, complex4.getImaginary(), 0.01);
      assertEquals(0.0331152695731258, complex4.arg(), 0.01);
      assertEquals(1457.2108430445078, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(2125793.7793347584, complex4.norm(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(1458.0102123561269, complex4.abs(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      
      Complex complex5 = complex3.divide(complex1);
      assertNotNull(complex5);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(5325.993722816929, complex0.norm(), 0.01);
      assertEquals(72.97940615555137, complex0.abs(), 0.01);
      assertEquals((-48.27357712323866), complex0.getImaginary(), 0.01);
      assertEquals((-54.732581471584716), complex0.getReal(), 0.01);
      assertEquals((-48.27357712323866), complex0.imag(), 0.01);
      assertEquals((-2.4188175306036643), complex0.arg(), 0.01);
      assertEquals((-54.732581471584716), complex0.real(), 0.01);
      assertEquals(1918427.0091199386, complex1.norm(), 0.01);
      assertEquals((-48.27357712323866), complex1.imag(), 0.01);
      assertEquals((-1384.2314368889565), complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-3.106732860528631), complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1385.072925560217, complex1.abs(), 0.01);
      assertEquals((-48.27357712323866), complex1.getImaginary(), 0.01);
      assertEquals((-1384.2314368889565), complex1.getReal(), 0.01);
      assertEquals(1.286156554420561, complex3.arg(), 0.01);
      assertEquals(4543.98258, complex3.imag(), 0.01);
      assertEquals(1329.4988554173717, complex3.real(), 0.01);
      assertEquals(4543.98258, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(1329.4988554173717, complex3.getReal(), 0.01);
      assertEquals(2.2415344893899556E7, complex3.norm(), 0.01);
      assertEquals(4734.484649241093, complex3.abs(), 0.01);
      assertEquals((-1.8902958922303945), complex5.arg(), 0.01);
      assertEquals((-1.0736339692401216), complex5.real(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals((-3.245233642345113), complex5.imag(), 0.01);
      assertEquals((-3.245233642345113), complex5.getImaginary(), 0.01);
      assertEquals((-1.0736339692401216), complex5.getReal(), 0.01);
      assertEquals(11.684231293314825, complex5.norm(), 0.01);
      assertEquals(3.4182204863517547, complex5.abs(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex5);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      
      Complex complex6 = complex1.ZERO.subtract(complex5);
      assertNotNull(complex6);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(5325.993722816929, complex0.norm(), 0.01);
      assertEquals(72.97940615555137, complex0.abs(), 0.01);
      assertEquals((-48.27357712323866), complex0.getImaginary(), 0.01);
      assertEquals((-54.732581471584716), complex0.getReal(), 0.01);
      assertEquals((-48.27357712323866), complex0.imag(), 0.01);
      assertEquals((-2.4188175306036643), complex0.arg(), 0.01);
      assertEquals((-54.732581471584716), complex0.real(), 0.01);
      assertEquals(1918427.0091199386, complex1.norm(), 0.01);
      assertEquals((-48.27357712323866), complex1.imag(), 0.01);
      assertEquals((-1384.2314368889565), complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-3.106732860528631), complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1385.072925560217, complex1.abs(), 0.01);
      assertEquals((-48.27357712323866), complex1.getImaginary(), 0.01);
      assertEquals((-1384.2314368889565), complex1.getReal(), 0.01);
      assertEquals(1.286156554420561, complex3.arg(), 0.01);
      assertEquals(4543.98258, complex3.imag(), 0.01);
      assertEquals(1329.4988554173717, complex3.real(), 0.01);
      assertEquals(4543.98258, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(1329.4988554173717, complex3.getReal(), 0.01);
      assertEquals(2.2415344893899556E7, complex3.norm(), 0.01);
      assertEquals(4734.484649241093, complex3.abs(), 0.01);
      assertEquals((-1.8902958922303945), complex5.arg(), 0.01);
      assertEquals((-1.0736339692401216), complex5.real(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals((-3.245233642345113), complex5.imag(), 0.01);
      assertEquals((-3.245233642345113), complex5.getImaginary(), 0.01);
      assertEquals((-1.0736339692401216), complex5.getReal(), 0.01);
      assertEquals(11.684231293314825, complex5.norm(), 0.01);
      assertEquals(3.4182204863517547, complex5.abs(), 0.01);
      assertEquals(3.245233642345113, complex6.getImaginary(), 0.01);
      assertEquals(3.245233642345113, complex6.imag(), 0.01);
      assertEquals(1.0736339692401216, complex6.getReal(), 0.01);
      assertEquals(1.2512967613593988, complex6.arg(), 0.01);
      assertEquals(1.0736339692401216, complex6.real(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(11.684231293314825, complex6.norm(), 0.01);
      assertEquals(3.4182204863517547, complex6.abs(), 0.01);
      assertFalse(complex6.isNaN());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex6);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex0);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      
      Complex complex7 = Complex.ofCartesian(72.97940615555137, -0.0);
      assertNotNull(complex7);
      assertFalse(complex7.isInfinite());
      assertEquals(72.97940615555137, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(-0.0, complex7.imag(), 0.01);
      assertEquals(5325.99372281693, complex7.norm(), 0.01);
      assertEquals(-0.0, complex7.arg(), 0.01);
      assertEquals(72.97940615555137, complex7.abs(), 0.01);
      assertEquals(72.97940615555137, complex7.real(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      
      double double0 = complex7.abs();
      assertEquals(72.97940615555137, double0, 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(72.97940615555137, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(-0.0, complex7.imag(), 0.01);
      assertEquals(5325.99372281693, complex7.norm(), 0.01);
      assertEquals(-0.0, complex7.arg(), 0.01);
      assertEquals(72.97940615555137, complex7.abs(), 0.01);
      assertEquals(72.97940615555137, complex7.real(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      
      Complex complex8 = complex1.asinh();
      assertNotNull(complex8);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(5325.993722816929, complex0.norm(), 0.01);
      assertEquals(72.97940615555137, complex0.abs(), 0.01);
      assertEquals((-48.27357712323866), complex0.getImaginary(), 0.01);
      assertEquals((-54.732581471584716), complex0.getReal(), 0.01);
      assertEquals((-48.27357712323866), complex0.imag(), 0.01);
      assertEquals((-2.4188175306036643), complex0.arg(), 0.01);
      assertEquals((-54.732581471584716), complex0.real(), 0.01);
      assertEquals(1918427.0091199386, complex1.norm(), 0.01);
      assertEquals((-48.27357712323866), complex1.imag(), 0.01);
      assertEquals((-1384.2314368889565), complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-3.106732860528631), complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1385.072925560217, complex1.abs(), 0.01);
      assertEquals((-48.27357712323866), complex1.getImaginary(), 0.01);
      assertEquals((-1384.2314368889565), complex1.getReal(), 0.01);
      assertEquals((-0.03485978398301001), complex8.getImaginary(), 0.01);
      assertEquals((-0.03485978398301001), complex8.imag(), 0.01);
      assertEquals(62.83308074362817, complex8.norm(), 0.01);
      assertEquals((-3.1371948896438164), complex8.arg(), 0.01);
      assertFalse(complex8.isNaN());
      assertFalse(complex8.isInfinite());
      assertEquals((-7.926655381627792), complex8.real(), 0.01);
      assertEquals((-7.926655381627792), complex8.getReal(), 0.01);
      assertEquals(7.9267320343019145, complex8.abs(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex6);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex6));
      
      Complex complex9 = Complex.ofCis(4543.98258);
      assertNotNull(complex9);
      assertEquals(0.9999999999999999, complex9.abs(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(0.3251718209856727, complex9.real(), 0.01);
      assertEquals(0.9456549512569907, complex9.getImaginary(), 0.01);
      assertEquals(1.2396029091588479, complex9.arg(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(0.3251718209856727, complex9.getReal(), 0.01);
      assertEquals(0.9999999999999999, complex9.norm(), 0.01);
      assertEquals(0.9456549512569907, complex9.imag(), 0.01);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex2);
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex2));
      
      Complex complex10 = Complex.ofCartesian((-1.0), 3817.185524335225);
      assertNotNull(complex10);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals((-1.0), complex10.getReal(), 0.01);
      assertEquals(1.4570906327194387E7, complex10.norm(), 0.01);
      assertEquals(3817.185524335225, complex10.getImaginary(), 0.01);
      assertEquals(3817.185524335225, complex10.imag(), 0.01);
      assertEquals(3817.1856553217826, complex10.abs(), 0.01);
      assertEquals(1.5710582999085294, complex10.arg(), 0.01);
      assertEquals((-1.0), complex10.real(), 0.01);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex9);
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex9));
      
      Complex complex11 = complex5.log10();
      assertNotNull(complex11);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(5325.993722816929, complex0.norm(), 0.01);
      assertEquals(72.97940615555137, complex0.abs(), 0.01);
      assertEquals((-48.27357712323866), complex0.getImaginary(), 0.01);
      assertEquals((-54.732581471584716), complex0.getReal(), 0.01);
      assertEquals((-48.27357712323866), complex0.imag(), 0.01);
      assertEquals((-2.4188175306036643), complex0.arg(), 0.01);
      assertEquals((-54.732581471584716), complex0.real(), 0.01);
      assertEquals(1918427.0091199386, complex1.norm(), 0.01);
      assertEquals((-48.27357712323866), complex1.imag(), 0.01);
      assertEquals((-1384.2314368889565), complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-3.106732860528631), complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1385.072925560217, complex1.abs(), 0.01);
      assertEquals((-48.27357712323866), complex1.getImaginary(), 0.01);
      assertEquals((-1384.2314368889565), complex1.getReal(), 0.01);
      assertEquals(1.286156554420561, complex3.arg(), 0.01);
      assertEquals(4543.98258, complex3.imag(), 0.01);
      assertEquals(1329.4988554173717, complex3.real(), 0.01);
      assertEquals(4543.98258, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(1329.4988554173717, complex3.getReal(), 0.01);
      assertEquals(2.2415344893899556E7, complex3.norm(), 0.01);
      assertEquals(4734.484649241093, complex3.abs(), 0.01);
      assertEquals((-1.8902958922303945), complex5.arg(), 0.01);
      assertEquals((-1.0736339692401216), complex5.real(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals((-3.245233642345113), complex5.imag(), 0.01);
      assertEquals((-3.245233642345113), complex5.getImaginary(), 0.01);
      assertEquals((-1.0736339692401216), complex5.getReal(), 0.01);
      assertEquals(11.684231293314825, complex5.norm(), 0.01);
      assertEquals(3.4182204863517547, complex5.abs(), 0.01);
      assertEquals(0.5338000726964642, complex11.real(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals((-1.8902958922303945), complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(0.5338000726964642, complex11.getReal(), 0.01);
      assertEquals((-1.295573041756965), complex11.arg(), 0.01);
      assertEquals(3.858161077793854, complex11.norm(), 0.01);
      assertEquals(1.964220221307645, complex11.abs(), 0.01);
      assertEquals((-1.8902958922303945), complex11.imag(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex11);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex6);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex0);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex2);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex2));
      
      Complex complex12 = complex5.acosh();
      assertNotNull(complex12);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(5325.993722816929, complex0.norm(), 0.01);
      assertEquals(72.97940615555137, complex0.abs(), 0.01);
      assertEquals((-48.27357712323866), complex0.getImaginary(), 0.01);
      assertEquals((-54.732581471584716), complex0.getReal(), 0.01);
      assertEquals((-48.27357712323866), complex0.imag(), 0.01);
      assertEquals((-2.4188175306036643), complex0.arg(), 0.01);
      assertEquals((-54.732581471584716), complex0.real(), 0.01);
      assertEquals(1918427.0091199386, complex1.norm(), 0.01);
      assertEquals((-48.27357712323866), complex1.imag(), 0.01);
      assertEquals((-1384.2314368889565), complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-3.106732860528631), complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1385.072925560217, complex1.abs(), 0.01);
      assertEquals((-48.27357712323866), complex1.getImaginary(), 0.01);
      assertEquals((-1384.2314368889565), complex1.getReal(), 0.01);
      assertEquals(1.286156554420561, complex3.arg(), 0.01);
      assertEquals(4543.98258, complex3.imag(), 0.01);
      assertEquals(1329.4988554173717, complex3.real(), 0.01);
      assertEquals(4543.98258, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(1329.4988554173717, complex3.getReal(), 0.01);
      assertEquals(2.2415344893899556E7, complex3.norm(), 0.01);
      assertEquals(4734.484649241093, complex3.abs(), 0.01);
      assertEquals((-1.8902958922303945), complex5.arg(), 0.01);
      assertEquals((-1.0736339692401216), complex5.real(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals((-3.245233642345113), complex5.imag(), 0.01);
      assertEquals((-3.245233642345113), complex5.getImaginary(), 0.01);
      assertEquals((-1.0736339692401216), complex5.getReal(), 0.01);
      assertEquals(11.684231293314825, complex5.norm(), 0.01);
      assertEquals(3.4182204863517547, complex5.abs(), 0.01);
      assertEquals(1.9392341151859376, complex12.getReal(), 0.01);
      assertFalse(complex12.isNaN());
      assertEquals(7.288125393088075, complex12.norm(), 0.01);
      assertEquals((-0.7694014373701618), complex12.arg(), 0.01);
      assertEquals((-1.8781630492550663), complex12.getImaginary(), 0.01);
      assertEquals(1.9392341151859376, complex12.real(), 0.01);
      assertEquals((-1.8781630492550663), complex12.imag(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals(2.6996528282518244, complex12.abs(), 0.01);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex11);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex6);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex0);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex6);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex6));
      
      Complex complex13 = Complex.ofPolar(0.7071067811865476, (-3154.99004920691));
      assertNotNull(complex13);
      assertEquals(0.7071067811865476, complex13.abs(), 0.01);
      assertEquals((-0.8310250027576324), complex13.arg(), 0.01);
      assertEquals((-0.5222851431419655), complex13.getImaginary(), 0.01);
      assertEquals(0.5000000000000001, complex13.norm(), 0.01);
      assertEquals((-0.5222851431419655), complex13.imag(), 0.01);
      assertEquals(0.47667413319077495, complex13.getReal(), 0.01);
      assertEquals(0.47667413319077495, complex13.real(), 0.01);
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex5);
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex5));
      
      Complex complex14 = complex10.multiply(complex13);
      assertNotNull(complex14);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals((-1.0), complex10.getReal(), 0.01);
      assertEquals(1.4570906327194387E7, complex10.norm(), 0.01);
      assertEquals(3817.185524335225, complex10.getImaginary(), 0.01);
      assertEquals(3817.185524335225, complex10.imag(), 0.01);
      assertEquals(3817.1856553217826, complex10.abs(), 0.01);
      assertEquals(1.5710582999085294, complex10.arg(), 0.01);
      assertEquals((-1.0), complex10.real(), 0.01);
      assertEquals(0.7071067811865476, complex13.abs(), 0.01);
      assertEquals((-0.8310250027576324), complex13.arg(), 0.01);
      assertEquals((-0.5222851431419655), complex13.getImaginary(), 0.01);
      assertEquals(0.5000000000000001, complex13.norm(), 0.01);
      assertEquals((-0.5222851431419655), complex13.imag(), 0.01);
      assertEquals(0.47667413319077495, complex13.getReal(), 0.01);
      assertEquals(0.47667413319077495, complex13.real(), 0.01);
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertFalse(complex14.isInfinite());
      assertFalse(complex14.isNaN());
      assertEquals(0.7400332971508968, complex14.arg(), 0.01);
      assertEquals(1993.182613843671, complex14.real(), 0.01);
      assertEquals(1993.182613843671, complex14.getReal(), 0.01);
      assertEquals(1820.0758861840093, complex14.imag(), 0.01);
      assertEquals(1820.0758861840093, complex14.getImaginary(), 0.01);
      assertEquals(7285453.163597195, complex14.norm(), 0.01);
      assertEquals(2699.157861926048, complex14.abs(), 0.01);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex12);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex14);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex13);
      assertNotSame(complex10, complex9);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex5);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex13);
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex11));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex12));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex13));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex13));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.ofPolar(1.0, (-2048.0));
      assertNotNull(complex0);
      assertEquals(0.9497343348236519, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.3184101405451915, complex0.arg(), 0.01);
      assertEquals(0.31305701279012343, complex0.getImaginary(), 0.01);
      assertEquals(0.9497343348236519, complex0.real(), 0.01);
      assertEquals(0.31305701279012343, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      
      Complex complex1 = complex0.tanh();
      assertNotNull(complex1);
      assertEquals(0.9497343348236519, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.3184101405451915, complex0.arg(), 0.01);
      assertEquals(0.31305701279012343, complex0.getImaginary(), 0.01);
      assertEquals(0.9497343348236519, complex0.real(), 0.01);
      assertEquals(0.31305701279012343, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.7728610195089655, complex1.getReal(), 0.01);
      assertEquals(0.6165394850689212, complex1.norm(), 0.01);
      assertEquals(0.1386554347744209, complex1.imag(), 0.01);
      assertEquals(0.7852002834111315, complex1.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.7728610195089655, complex1.real(), 0.01);
      assertEquals(0.1386554347744209, complex1.getImaginary(), 0.01);
      assertEquals(0.17751693203473592, complex1.arg(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.ZERO.tan();
      assertNotNull(complex2);
      assertEquals(0.9497343348236519, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.3184101405451915, complex0.arg(), 0.01);
      assertEquals(0.31305701279012343, complex0.getImaginary(), 0.01);
      assertEquals(0.9497343348236519, complex0.real(), 0.01);
      assertEquals(0.31305701279012343, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.7728610195089655, complex1.getReal(), 0.01);
      assertEquals(0.6165394850689212, complex1.norm(), 0.01);
      assertEquals(0.1386554347744209, complex1.imag(), 0.01);
      assertEquals(0.7852002834111315, complex1.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.7728610195089655, complex1.real(), 0.01);
      assertEquals(0.1386554347744209, complex1.getImaginary(), 0.01);
      assertEquals(0.17751693203473592, complex1.arg(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex1.multiply((-194.629547225446));
      assertNotNull(complex3);
      assertEquals(0.9497343348236519, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.3184101405451915, complex0.arg(), 0.01);
      assertEquals(0.31305701279012343, complex0.getImaginary(), 0.01);
      assertEquals(0.9497343348236519, complex0.real(), 0.01);
      assertEquals(0.31305701279012343, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.7728610195089655, complex1.getReal(), 0.01);
      assertEquals(0.6165394850689212, complex1.norm(), 0.01);
      assertEquals(0.1386554347744209, complex1.imag(), 0.01);
      assertEquals(0.7852002834111315, complex1.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.7728610195089655, complex1.real(), 0.01);
      assertEquals(0.1386554347744209, complex1.getImaginary(), 0.01);
      assertEquals(0.17751693203473592, complex1.arg(), 0.01);
      assertEquals((-2.9640757215550573), complex3.arg(), 0.01);
      assertEquals((-150.42159029522654), complex3.getReal(), 0.01);
      assertEquals(23354.923013183445, complex3.norm(), 0.01);
      assertEquals((-26.986444490492904), complex3.imag(), 0.01);
      assertEquals((-26.986444490492904), complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals((-150.42159029522654), complex3.real(), 0.01);
      assertEquals(152.8231756416004, complex3.abs(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      complex3.ONE.hashCode();
      assertEquals(0.9497343348236519, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.3184101405451915, complex0.arg(), 0.01);
      assertEquals(0.31305701279012343, complex0.getImaginary(), 0.01);
      assertEquals(0.9497343348236519, complex0.real(), 0.01);
      assertEquals(0.31305701279012343, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.7728610195089655, complex1.getReal(), 0.01);
      assertEquals(0.6165394850689212, complex1.norm(), 0.01);
      assertEquals(0.1386554347744209, complex1.imag(), 0.01);
      assertEquals(0.7852002834111315, complex1.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.7728610195089655, complex1.real(), 0.01);
      assertEquals(0.1386554347744209, complex1.getImaginary(), 0.01);
      assertEquals(0.17751693203473592, complex1.arg(), 0.01);
      assertEquals((-2.9640757215550573), complex3.arg(), 0.01);
      assertEquals((-150.42159029522654), complex3.getReal(), 0.01);
      assertEquals(23354.923013183445, complex3.norm(), 0.01);
      assertEquals((-26.986444490492904), complex3.imag(), 0.01);
      assertEquals((-26.986444490492904), complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals((-150.42159029522654), complex3.real(), 0.01);
      assertEquals(152.8231756416004, complex3.abs(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = complex1.I.cos();
      assertNotNull(complex4);
      assertEquals(0.9497343348236519, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.3184101405451915, complex0.arg(), 0.01);
      assertEquals(0.31305701279012343, complex0.getImaginary(), 0.01);
      assertEquals(0.9497343348236519, complex0.real(), 0.01);
      assertEquals(0.31305701279012343, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.7728610195089655, complex1.getReal(), 0.01);
      assertEquals(0.6165394850689212, complex1.norm(), 0.01);
      assertEquals(0.1386554347744209, complex1.imag(), 0.01);
      assertEquals(0.7852002834111315, complex1.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.7728610195089655, complex1.real(), 0.01);
      assertEquals(0.1386554347744209, complex1.getImaginary(), 0.01);
      assertEquals(0.17751693203473592, complex1.arg(), 0.01);
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(2.381097845541816, complex4.norm(), 0.01);
      assertEquals(-0.0, complex4.imag(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(-0.0, complex4.arg(), 0.01);
      assertEquals(1.543080634815244, complex4.getReal(), 0.01);
      assertEquals(1.543080634815244, complex4.abs(), 0.01);
      assertEquals(1.543080634815244, complex4.real(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      
      Complex complex5 = complex1.ZERO.add(complex2);
      assertNotNull(complex5);
      assertEquals(0.9497343348236519, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.3184101405451915, complex0.arg(), 0.01);
      assertEquals(0.31305701279012343, complex0.getImaginary(), 0.01);
      assertEquals(0.9497343348236519, complex0.real(), 0.01);
      assertEquals(0.31305701279012343, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.7728610195089655, complex1.getReal(), 0.01);
      assertEquals(0.6165394850689212, complex1.norm(), 0.01);
      assertEquals(0.1386554347744209, complex1.imag(), 0.01);
      assertEquals(0.7852002834111315, complex1.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.7728610195089655, complex1.real(), 0.01);
      assertEquals(0.1386554347744209, complex1.getImaginary(), 0.01);
      assertEquals(0.17751693203473592, complex1.arg(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(0.0, complex5.abs(), 0.01);
      assertEquals(0.0, complex5.real(), 0.01);
      assertEquals(0.0, complex5.norm(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.arg(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      
      Complex complex6 = complex5.multiply(complex3);
      assertNotNull(complex6);
      assertEquals(0.9497343348236519, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.3184101405451915, complex0.arg(), 0.01);
      assertEquals(0.31305701279012343, complex0.getImaginary(), 0.01);
      assertEquals(0.9497343348236519, complex0.real(), 0.01);
      assertEquals(0.31305701279012343, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.7728610195089655, complex1.getReal(), 0.01);
      assertEquals(0.6165394850689212, complex1.norm(), 0.01);
      assertEquals(0.1386554347744209, complex1.imag(), 0.01);
      assertEquals(0.7852002834111315, complex1.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.7728610195089655, complex1.real(), 0.01);
      assertEquals(0.1386554347744209, complex1.getImaginary(), 0.01);
      assertEquals(0.17751693203473592, complex1.arg(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((-2.9640757215550573), complex3.arg(), 0.01);
      assertEquals((-150.42159029522654), complex3.getReal(), 0.01);
      assertEquals(23354.923013183445, complex3.norm(), 0.01);
      assertEquals((-26.986444490492904), complex3.imag(), 0.01);
      assertEquals((-26.986444490492904), complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals((-150.42159029522654), complex3.real(), 0.01);
      assertEquals(152.8231756416004, complex3.abs(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(0.0, complex5.abs(), 0.01);
      assertEquals(0.0, complex5.real(), 0.01);
      assertEquals(0.0, complex5.norm(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.arg(), 0.01);
      assertEquals(0.0, complex6.norm(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(-0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.real(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(-0.0, complex6.arg(), 0.01);
      assertEquals(0.0, complex6.abs(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex5);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      
      Complex complex7 = complex1.conj();
      assertNotNull(complex7);
      assertEquals(0.9497343348236519, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.3184101405451915, complex0.arg(), 0.01);
      assertEquals(0.31305701279012343, complex0.getImaginary(), 0.01);
      assertEquals(0.9497343348236519, complex0.real(), 0.01);
      assertEquals(0.31305701279012343, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.7728610195089655, complex1.getReal(), 0.01);
      assertEquals(0.6165394850689212, complex1.norm(), 0.01);
      assertEquals(0.1386554347744209, complex1.imag(), 0.01);
      assertEquals(0.7852002834111315, complex1.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.7728610195089655, complex1.real(), 0.01);
      assertEquals(0.1386554347744209, complex1.getImaginary(), 0.01);
      assertEquals(0.17751693203473592, complex1.arg(), 0.01);
      assertEquals(0.6165394850689212, complex7.norm(), 0.01);
      assertEquals((-0.1386554347744209), complex7.getImaginary(), 0.01);
      assertEquals(0.7728610195089655, complex7.getReal(), 0.01);
      assertEquals((-0.1386554347744209), complex7.imag(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals((-0.17751693203473592), complex7.arg(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.7852002834111315, complex7.abs(), 0.01);
      assertEquals(0.7728610195089655, complex7.real(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex4));
      
      Complex complex8 = complex1.acosh();
      assertNotNull(complex8);
      assertEquals(0.9497343348236519, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.3184101405451915, complex0.arg(), 0.01);
      assertEquals(0.31305701279012343, complex0.getImaginary(), 0.01);
      assertEquals(0.9497343348236519, complex0.real(), 0.01);
      assertEquals(0.31305701279012343, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.7728610195089655, complex1.getReal(), 0.01);
      assertEquals(0.6165394850689212, complex1.norm(), 0.01);
      assertEquals(0.1386554347744209, complex1.imag(), 0.01);
      assertEquals(0.7852002834111315, complex1.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.7728610195089655, complex1.real(), 0.01);
      assertEquals(0.1386554347744209, complex1.getImaginary(), 0.01);
      assertEquals(0.17751693203473592, complex1.arg(), 0.01);
      assertEquals(0.5533008914787745, complex8.norm(), 0.01);
      assertEquals(0.743841980180451, complex8.abs(), 0.01);
      assertEquals(0.21030241204506456, complex8.real(), 0.01);
      assertEquals(0.21030241204506456, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(0.7134940693284019, complex8.getImaginary(), 0.01);
      assertEquals(1.2841629331078566, complex8.arg(), 0.01);
      assertEquals(0.7134940693284019, complex8.imag(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex7);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex7));
      
      Complex complex9 = Complex.ONE;
      assertNotNull(complex9);
      assertEquals(0.0, complex9.imag(), 0.01);
      assertEquals(1.0, complex9.getReal(), 0.01);
      assertEquals(1.0, complex9.norm(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(0.0, complex9.arg(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(1.0, complex9.abs(), 0.01);
      assertEquals(1.0, complex9.real(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex6));
      
      Complex complex10 = complex2.multiply(complex8);
      assertNotNull(complex10);
      assertEquals(0.9497343348236519, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.3184101405451915, complex0.arg(), 0.01);
      assertEquals(0.31305701279012343, complex0.getImaginary(), 0.01);
      assertEquals(0.9497343348236519, complex0.real(), 0.01);
      assertEquals(0.31305701279012343, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.7728610195089655, complex1.getReal(), 0.01);
      assertEquals(0.6165394850689212, complex1.norm(), 0.01);
      assertEquals(0.1386554347744209, complex1.imag(), 0.01);
      assertEquals(0.7852002834111315, complex1.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.7728610195089655, complex1.real(), 0.01);
      assertEquals(0.1386554347744209, complex1.getImaginary(), 0.01);
      assertEquals(0.17751693203473592, complex1.arg(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.5533008914787745, complex8.norm(), 0.01);
      assertEquals(0.743841980180451, complex8.abs(), 0.01);
      assertEquals(0.21030241204506456, complex8.real(), 0.01);
      assertEquals(0.21030241204506456, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(0.7134940693284019, complex8.getImaginary(), 0.01);
      assertEquals(1.2841629331078566, complex8.arg(), 0.01);
      assertEquals(0.7134940693284019, complex8.imag(), 0.01);
      assertEquals(0.0, complex10.imag(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(0.0, complex10.norm(), 0.01);
      assertEquals(0.0, complex10.abs(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(0.0, complex10.real(), 0.01);
      assertEquals(0.0, complex10.arg(), 0.01);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex10);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex4);
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex8));
      assertTrue(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex9));
      assertTrue(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex0));
      assertTrue(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex4));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-1.0));
      assertNotNull(complex0);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      
      complex0.I.hashCode();
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      
      Complex complex1 = complex0.subtractFrom((-1.0));
      assertNotNull(complex1);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.5403023058681398), complex1.real(), 0.01);
      assertEquals((-1.5403023058681398), complex1.getReal(), 0.01);
      assertEquals(1.7551651237807455, complex1.abs(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex1.imag(), 0.01);
      assertEquals(3.0806046117362795, complex1.norm(), 0.01);
      assertEquals(2.641592653589793, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      boolean boolean0 = complex0.ONE.isFinite();
      assertTrue(boolean0);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertNotSame(complex0, complex1);
      assertFalse(complex0.equals((Object)complex1));
      
      Complex complex2 = complex0.cos();
      assertNotNull(complex2);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.6271952659369329, complex2.norm(), 0.01);
      assertEquals(1.2756156419301752, complex2.abs(), 0.01);
      assertEquals(0.39067400323462387, complex2.arg(), 0.01);
      assertEquals(1.179501321915592, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.4857693871955125, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.179501321915592, complex2.real(), 0.01);
      assertEquals(0.4857693871955125, complex2.imag(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex2.ONE.multiply(complex1);
      assertNotNull(complex3);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.5403023058681398), complex1.real(), 0.01);
      assertEquals((-1.5403023058681398), complex1.getReal(), 0.01);
      assertEquals(1.7551651237807455, complex1.abs(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex1.imag(), 0.01);
      assertEquals(3.0806046117362795, complex1.norm(), 0.01);
      assertEquals(2.641592653589793, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.6271952659369329, complex2.norm(), 0.01);
      assertEquals(1.2756156419301752, complex2.abs(), 0.01);
      assertEquals(0.39067400323462387, complex2.arg(), 0.01);
      assertEquals(1.179501321915592, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.4857693871955125, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.179501321915592, complex2.real(), 0.01);
      assertEquals(0.4857693871955125, complex2.imag(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-1.5403023058681398), complex3.real(), 0.01);
      assertEquals(2.641592653589793, complex3.arg(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-1.5403023058681398), complex3.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex3.imag(), 0.01);
      assertEquals(3.0806046117362795, complex3.norm(), 0.01);
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      assertEquals(1.7551651237807455, complex3.abs(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex1));
      
      Complex complex4 = complex1.subtractFrom((-1.0));
      assertNotNull(complex4);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.5403023058681398), complex1.real(), 0.01);
      assertEquals((-1.5403023058681398), complex1.getReal(), 0.01);
      assertEquals(1.7551651237807455, complex1.abs(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex1.imag(), 0.01);
      assertEquals(3.0806046117362795, complex1.norm(), 0.01);
      assertEquals(2.641592653589793, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-1.0), complex4.arg(), 0.01);
      assertEquals(0.5403023058681398, complex4.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex4.getImaginary(), 0.01);
      assertEquals((-0.8414709848078965), complex4.imag(), 0.01);
      assertEquals(0.5403023058681398, complex4.real(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.norm(), 0.01);
      assertEquals(1.0, complex4.abs(), 0.01);
      assertFalse(complex4.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex3));
      assertTrue(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      
      String string0 = complex4.ZERO.toString();
      assertNotNull(string0);
      assertEquals("(0.0,0.0)", string0);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.5403023058681398), complex1.real(), 0.01);
      assertEquals((-1.5403023058681398), complex1.getReal(), 0.01);
      assertEquals(1.7551651237807455, complex1.abs(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex1.imag(), 0.01);
      assertEquals(3.0806046117362795, complex1.norm(), 0.01);
      assertEquals(2.641592653589793, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-1.0), complex4.arg(), 0.01);
      assertEquals(0.5403023058681398, complex4.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex4.getImaginary(), 0.01);
      assertEquals((-0.8414709848078965), complex4.imag(), 0.01);
      assertEquals(0.5403023058681398, complex4.real(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.norm(), 0.01);
      assertEquals(1.0, complex4.abs(), 0.01);
      assertFalse(complex4.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertTrue(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complex3.ONE.add((-1.0));
      assertNotNull(complex5);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.5403023058681398), complex1.real(), 0.01);
      assertEquals((-1.5403023058681398), complex1.getReal(), 0.01);
      assertEquals(1.7551651237807455, complex1.abs(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex1.imag(), 0.01);
      assertEquals(3.0806046117362795, complex1.norm(), 0.01);
      assertEquals(2.641592653589793, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.6271952659369329, complex2.norm(), 0.01);
      assertEquals(1.2756156419301752, complex2.abs(), 0.01);
      assertEquals(0.39067400323462387, complex2.arg(), 0.01);
      assertEquals(1.179501321915592, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.4857693871955125, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.179501321915592, complex2.real(), 0.01);
      assertEquals(0.4857693871955125, complex2.imag(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-1.5403023058681398), complex3.real(), 0.01);
      assertEquals(2.641592653589793, complex3.arg(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-1.5403023058681398), complex3.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex3.imag(), 0.01);
      assertEquals(3.0806046117362795, complex3.norm(), 0.01);
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      assertEquals(1.7551651237807455, complex3.abs(), 0.01);
      assertEquals(0.0, complex5.arg(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(0.0, complex5.real(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.norm(), 0.01);
      assertEquals(0.0, complex5.abs(), 0.01);
      assertFalse(complex5.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex5);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      
      Complex complex6 = complex3.ONE.cosh();
      assertNotNull(complex6);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.5403023058681398), complex1.real(), 0.01);
      assertEquals((-1.5403023058681398), complex1.getReal(), 0.01);
      assertEquals(1.7551651237807455, complex1.abs(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex1.imag(), 0.01);
      assertEquals(3.0806046117362795, complex1.norm(), 0.01);
      assertEquals(2.641592653589793, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.6271952659369329, complex2.norm(), 0.01);
      assertEquals(1.2756156419301752, complex2.abs(), 0.01);
      assertEquals(0.39067400323462387, complex2.arg(), 0.01);
      assertEquals(1.179501321915592, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.4857693871955125, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.179501321915592, complex2.real(), 0.01);
      assertEquals(0.4857693871955125, complex2.imag(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-1.5403023058681398), complex3.real(), 0.01);
      assertEquals(2.641592653589793, complex3.arg(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-1.5403023058681398), complex3.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex3.imag(), 0.01);
      assertEquals(3.0806046117362795, complex3.norm(), 0.01);
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      assertEquals(1.7551651237807455, complex3.abs(), 0.01);
      assertEquals(2.381097845541816, complex6.norm(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(1.543080634815244, complex6.getReal(), 0.01);
      assertEquals(1.543080634815244, complex6.real(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(1.543080634815244, complex6.abs(), 0.01);
      assertFalse(complex6.isNaN());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex5);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      
      Complex complex7 = complex5.ZERO.subtractFromImaginary(0.0);
      assertNotNull(complex7);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.5403023058681398), complex1.real(), 0.01);
      assertEquals((-1.5403023058681398), complex1.getReal(), 0.01);
      assertEquals(1.7551651237807455, complex1.abs(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex1.imag(), 0.01);
      assertEquals(3.0806046117362795, complex1.norm(), 0.01);
      assertEquals(2.641592653589793, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.6271952659369329, complex2.norm(), 0.01);
      assertEquals(1.2756156419301752, complex2.abs(), 0.01);
      assertEquals(0.39067400323462387, complex2.arg(), 0.01);
      assertEquals(1.179501321915592, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.4857693871955125, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.179501321915592, complex2.real(), 0.01);
      assertEquals(0.4857693871955125, complex2.imag(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-1.5403023058681398), complex3.real(), 0.01);
      assertEquals(2.641592653589793, complex3.arg(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-1.5403023058681398), complex3.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex3.imag(), 0.01);
      assertEquals(3.0806046117362795, complex3.norm(), 0.01);
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      assertEquals(1.7551651237807455, complex3.abs(), 0.01);
      assertEquals(0.0, complex5.arg(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(0.0, complex5.real(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.norm(), 0.01);
      assertEquals(0.0, complex5.abs(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex7.abs(), 0.01);
      assertEquals(-0.0, complex7.real(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.norm(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(3.141592653589793, complex7.arg(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(-0.0, complex7.getReal(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex5);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex0);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      
      boolean boolean1 = complex1.isInfinite();
      assertFalse(boolean1);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.5403023058681398), complex1.real(), 0.01);
      assertEquals((-1.5403023058681398), complex1.getReal(), 0.01);
      assertEquals(1.7551651237807455, complex1.abs(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex1.imag(), 0.01);
      assertEquals(3.0806046117362795, complex1.norm(), 0.01);
      assertEquals(2.641592653589793, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(boolean1 == boolean0);
      
      Complex complex8 = complex4.proj();
      assertNotNull(complex8);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.5403023058681398), complex1.real(), 0.01);
      assertEquals((-1.5403023058681398), complex1.getReal(), 0.01);
      assertEquals(1.7551651237807455, complex1.abs(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex1.imag(), 0.01);
      assertEquals(3.0806046117362795, complex1.norm(), 0.01);
      assertEquals(2.641592653589793, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-1.0), complex4.arg(), 0.01);
      assertEquals(0.5403023058681398, complex4.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex4.getImaginary(), 0.01);
      assertEquals((-0.8414709848078965), complex4.imag(), 0.01);
      assertEquals(0.5403023058681398, complex4.real(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.norm(), 0.01);
      assertEquals(1.0, complex4.abs(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(1.0, complex8.abs(), 0.01);
      assertEquals(0.5403023058681398, complex8.getReal(), 0.01);
      assertEquals((-1.0), complex8.arg(), 0.01);
      assertEquals((-0.8414709848078965), complex8.getImaginary(), 0.01);
      assertEquals((-0.8414709848078965), complex8.imag(), 0.01);
      assertEquals(0.5403023058681398, complex8.real(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(1.0, complex8.norm(), 0.01);
      assertFalse(complex8.isInfinite());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex4, complex7);
      assertSame(complex4, complex8);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex2);
      assertSame(complex8, complex4);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex5);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex6));
      assertTrue(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex5));
      
      Complex complex9 = complex8.ONE.acosh();
      assertNotNull(complex9);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.5403023058681398), complex1.real(), 0.01);
      assertEquals((-1.5403023058681398), complex1.getReal(), 0.01);
      assertEquals(1.7551651237807455, complex1.abs(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex1.imag(), 0.01);
      assertEquals(3.0806046117362795, complex1.norm(), 0.01);
      assertEquals(2.641592653589793, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-1.0), complex4.arg(), 0.01);
      assertEquals(0.5403023058681398, complex4.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex4.getImaginary(), 0.01);
      assertEquals((-0.8414709848078965), complex4.imag(), 0.01);
      assertEquals(0.5403023058681398, complex4.real(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.norm(), 0.01);
      assertEquals(1.0, complex4.abs(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(1.0, complex8.abs(), 0.01);
      assertEquals(0.5403023058681398, complex8.getReal(), 0.01);
      assertEquals((-1.0), complex8.arg(), 0.01);
      assertEquals((-0.8414709848078965), complex8.getImaginary(), 0.01);
      assertEquals((-0.8414709848078965), complex8.imag(), 0.01);
      assertEquals(0.5403023058681398, complex8.real(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(1.0, complex8.norm(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(0.0, complex9.imag(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.abs(), 0.01);
      assertEquals(0.0, complex9.real(), 0.01);
      assertEquals(0.0, complex9.norm(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertEquals(0.0, complex9.arg(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex4, complex7);
      assertSame(complex4, complex8);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex2);
      assertSame(complex8, complex4);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex5);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex6));
      assertTrue(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex8));
      assertTrue(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex6));
      
      Complex complex10 = complex2.I.cos();
      assertNotNull(complex10);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.6271952659369329, complex2.norm(), 0.01);
      assertEquals(1.2756156419301752, complex2.abs(), 0.01);
      assertEquals(0.39067400323462387, complex2.arg(), 0.01);
      assertEquals(1.179501321915592, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.4857693871955125, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.179501321915592, complex2.real(), 0.01);
      assertEquals(0.4857693871955125, complex2.imag(), 0.01);
      assertEquals(1.543080634815244, complex10.real(), 0.01);
      assertEquals(1.543080634815244, complex10.getReal(), 0.01);
      assertEquals(-0.0, complex10.imag(), 0.01);
      assertEquals(-0.0, complex10.getImaginary(), 0.01);
      assertEquals(2.381097845541816, complex10.norm(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(1.543080634815244, complex10.abs(), 0.01);
      assertEquals(-0.0, complex10.arg(), 0.01);
      assertFalse(complex10.isInfinite());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex9);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex9));
      
      Complex complex11 = Complex.parse("(0.0,0.0)");
      assertNotNull(complex11);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(0.0, complex11.norm(), 0.01);
      assertEquals(0.0, complex11.imag(), 0.01);
      assertEquals(0.0, complex11.abs(), 0.01);
      assertEquals(0.0, complex11.real(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(0.0, complex11.arg(), 0.01);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex7);
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex8));
      assertTrue(complex11.equals((Object)complex9));
      assertTrue(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex7));
      
      Complex complex12 = complex3.I.multiply(complex1);
      assertNotNull(complex12);
      assertFalse(complex12.isNaN());
      assertFalse(complex12.isInfinite());
      assertEquals(3.0806046117362795, complex12.norm(), 0.01);
      assertEquals((-0.8414709848078965), complex12.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex12.real(), 0.01);
      assertEquals(1.7551651237807455, complex12.abs(), 0.01);
      assertEquals((-1.5403023058681398), complex12.getImaginary(), 0.01);
      assertEquals((-2.0707963267948966), complex12.arg(), 0.01);
      assertEquals((-1.5403023058681398), complex12.imag(), 0.01);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.5403023058681398), complex1.real(), 0.01);
      assertEquals((-1.5403023058681398), complex1.getReal(), 0.01);
      assertEquals(1.7551651237807455, complex1.abs(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex1.imag(), 0.01);
      assertEquals(3.0806046117362795, complex1.norm(), 0.01);
      assertEquals(2.641592653589793, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.6271952659369329, complex2.norm(), 0.01);
      assertEquals(1.2756156419301752, complex2.abs(), 0.01);
      assertEquals(0.39067400323462387, complex2.arg(), 0.01);
      assertEquals(1.179501321915592, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.4857693871955125, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.179501321915592, complex2.real(), 0.01);
      assertEquals(0.4857693871955125, complex2.imag(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-1.5403023058681398), complex3.real(), 0.01);
      assertEquals(2.641592653589793, complex3.arg(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-1.5403023058681398), complex3.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex3.imag(), 0.01);
      assertEquals(3.0806046117362795, complex3.norm(), 0.01);
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      assertEquals(1.7551651237807455, complex3.abs(), 0.01);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex12);
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex5));
      
      List<Complex> list0 = complex11.ZERO.nthRoot((-2359));
      assertFalse(list0.contains(complex4));
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(2359, list0.size());
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(0.0, complex11.norm(), 0.01);
      assertEquals(0.0, complex11.imag(), 0.01);
      assertEquals(0.0, complex11.abs(), 0.01);
      assertEquals(0.0, complex11.real(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(0.0, complex11.arg(), 0.01);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex7);
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex12));
      assertFalse(complex11.equals((Object)complex8));
      assertTrue(complex11.equals((Object)complex9));
      assertTrue(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex7));
      
      boolean boolean2 = complex11.ZERO.isFinite();
      assertTrue(boolean2);
      assertEquals(0.0, complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(0.0, complex11.norm(), 0.01);
      assertEquals(0.0, complex11.imag(), 0.01);
      assertEquals(0.0, complex11.abs(), 0.01);
      assertEquals(0.0, complex11.real(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(0.0, complex11.arg(), 0.01);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex7);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex12));
      assertFalse(complex11.equals((Object)complex8));
      assertTrue(complex11.equals((Object)complex9));
      assertTrue(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex7));
      
      Complex complex13 = complex1.subtract(complex3);
      assertNotNull(complex13);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.5403023058681398), complex1.real(), 0.01);
      assertEquals((-1.5403023058681398), complex1.getReal(), 0.01);
      assertEquals(1.7551651237807455, complex1.abs(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex1.imag(), 0.01);
      assertEquals(3.0806046117362795, complex1.norm(), 0.01);
      assertEquals(2.641592653589793, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex13.abs(), 0.01);
      assertEquals(0.0, complex13.real(), 0.01);
      assertEquals(0.0, complex13.arg(), 0.01);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertEquals(0.0, complex13.getReal(), 0.01);
      assertEquals(0.0, complex13.imag(), 0.01);
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertEquals(0.0, complex13.norm(), 0.01);
      assertEquals(1.6271952659369329, complex2.norm(), 0.01);
      assertEquals(1.2756156419301752, complex2.abs(), 0.01);
      assertEquals(0.39067400323462387, complex2.arg(), 0.01);
      assertEquals(1.179501321915592, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.4857693871955125, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.179501321915592, complex2.real(), 0.01);
      assertEquals(0.4857693871955125, complex2.imag(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-1.5403023058681398), complex3.real(), 0.01);
      assertEquals(2.641592653589793, complex3.arg(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-1.5403023058681398), complex3.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex3.imag(), 0.01);
      assertEquals(3.0806046117362795, complex3.norm(), 0.01);
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      assertEquals(1.7551651237807455, complex3.abs(), 0.01);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex7);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex10);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex6);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex4));
      assertTrue(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex1));
      assertTrue(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex6));
      assertTrue(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex12));
      
      Complex complex14 = complex1.acos();
      assertNotNull(complex14);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.5403023058681398), complex1.real(), 0.01);
      assertEquals((-1.5403023058681398), complex1.getReal(), 0.01);
      assertEquals(1.7551651237807455, complex1.abs(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex1.imag(), 0.01);
      assertEquals(3.0806046117362795, complex1.norm(), 0.01);
      assertEquals(2.641592653589793, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(8.059740228650236, complex14.norm(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex14.isNaN());
      assertEquals(2.8389681626693593, complex14.abs(), 0.01);
      assertEquals((-1.217935882374769), complex14.imag(), 0.01);
      assertEquals(2.5644438802738945, complex14.getReal(), 0.01);
      assertEquals((-1.217935882374769), complex14.getImaginary(), 0.01);
      assertEquals((-0.4433926689710521), complex14.arg(), 0.01);
      assertEquals(2.5644438802738945, complex14.real(), 0.01);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex7);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex10);
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex6));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex10));
      
      Complex complex15 = complex13.asinh();
      assertNotNull(complex15);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.5403023058681398), complex1.real(), 0.01);
      assertEquals((-1.5403023058681398), complex1.getReal(), 0.01);
      assertEquals(1.7551651237807455, complex1.abs(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex1.imag(), 0.01);
      assertEquals(3.0806046117362795, complex1.norm(), 0.01);
      assertEquals(2.641592653589793, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex13.abs(), 0.01);
      assertEquals(0.0, complex13.real(), 0.01);
      assertEquals(0.0, complex13.arg(), 0.01);
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertEquals(0.0, complex13.getReal(), 0.01);
      assertEquals(0.0, complex13.imag(), 0.01);
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertEquals(0.0, complex13.norm(), 0.01);
      assertEquals(1.6271952659369329, complex2.norm(), 0.01);
      assertEquals(1.2756156419301752, complex2.abs(), 0.01);
      assertEquals(0.39067400323462387, complex2.arg(), 0.01);
      assertEquals(1.179501321915592, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.4857693871955125, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.179501321915592, complex2.real(), 0.01);
      assertEquals(0.4857693871955125, complex2.imag(), 0.01);
      assertEquals(0.0, complex15.arg(), 0.01);
      assertEquals(0.0, complex15.norm(), 0.01);
      assertEquals(0.0, complex15.abs(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertEquals(0.0, complex15.imag(), 0.01);
      assertEquals(0.0, complex15.real(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-1.5403023058681398), complex3.real(), 0.01);
      assertEquals(2.641592653589793, complex3.arg(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-1.5403023058681398), complex3.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex3.imag(), 0.01);
      assertEquals(3.0806046117362795, complex3.norm(), 0.01);
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      assertEquals(1.7551651237807455, complex3.abs(), 0.01);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex7);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex10);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex2);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex14);
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex14));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex4));
      assertTrue(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex1));
      assertTrue(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex14));
      assertFalse(complex13.equals((Object)complex6));
      assertTrue(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex14));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex6));
      assertTrue(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex1));
      assertTrue(complex15.equals((Object)complex5));
      assertTrue(complex15.equals((Object)complex9));
      assertTrue(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex13));
      assertFalse(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex3.equals((Object)complex11));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex12));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex14));
      
      Complex complex16 = complex0.sin();
      assertNotNull(complex16);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.7075128122711367, complex16.real(), 0.01);
      assertEquals((-0.809830754165423), complex16.imag(), 0.01);
      assertEquals(1.1564002299199505, complex16.norm(), 0.01);
      assertEquals(1.0753605116052711, complex16.abs(), 0.01);
      assertEquals((-0.8527285176761793), complex16.arg(), 0.01);
      assertEquals((-0.809830754165423), complex16.getImaginary(), 0.01);
      assertEquals(0.7075128122711367, complex16.getReal(), 0.01);
      assertFalse(complex16.isInfinite());
      assertFalse(complex16.isNaN());
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex14);
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex14));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex14));
      
      Complex complex17 = complex14.tan();
      assertNotNull(complex17);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.5403023058681398), complex1.real(), 0.01);
      assertEquals((-1.5403023058681398), complex1.getReal(), 0.01);
      assertEquals(1.7551651237807455, complex1.abs(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex1.imag(), 0.01);
      assertEquals(3.0806046117362795, complex1.norm(), 0.01);
      assertEquals(2.641592653589793, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(8.059740228650236, complex14.norm(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex14.isNaN());
      assertEquals(2.8389681626693593, complex14.abs(), 0.01);
      assertEquals((-1.217935882374769), complex14.imag(), 0.01);
      assertEquals(2.5644438802738945, complex14.getReal(), 0.01);
      assertEquals((-1.217935882374769), complex14.getImaginary(), 0.01);
      assertEquals((-0.4433926689710521), complex14.arg(), 0.01);
      assertEquals(2.5644438802738945, complex14.real(), 0.01);
      assertEquals(0.9320272496071702, complex17.abs(), 0.01);
      assertEquals((-0.14843044062443092), complex17.getReal(), 0.01);
      assertEquals((-0.14843044062443092), complex17.real(), 0.01);
      assertEquals((-0.9201321634995397), complex17.getImaginary(), 0.01);
      assertEquals(0.8686747940103065, complex17.norm(), 0.01);
      assertEquals((-0.9201321634995397), complex17.imag(), 0.01);
      assertFalse(complex17.isNaN());
      assertEquals((-1.7307327820122809), complex17.arg(), 0.01);
      assertFalse(complex17.isInfinite());
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex7);
      assertNotSame(complex14, complex17);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex15);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex6);
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex14));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex16));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex10));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex6));
      
      Complex complex18 = complex17.ONE.subtract((double) (-2359));
      assertNotNull(complex18);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.5403023058681398), complex1.real(), 0.01);
      assertEquals((-1.5403023058681398), complex1.getReal(), 0.01);
      assertEquals(1.7551651237807455, complex1.abs(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex1.imag(), 0.01);
      assertEquals(3.0806046117362795, complex1.norm(), 0.01);
      assertEquals(2.641592653589793, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(8.059740228650236, complex14.norm(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex14.isNaN());
      assertEquals(2.8389681626693593, complex14.abs(), 0.01);
      assertEquals((-1.217935882374769), complex14.imag(), 0.01);
      assertEquals(2.5644438802738945, complex14.getReal(), 0.01);
      assertEquals((-1.217935882374769), complex14.getImaginary(), 0.01);
      assertEquals((-0.4433926689710521), complex14.arg(), 0.01);
      assertEquals(2.5644438802738945, complex14.real(), 0.01);
      assertEquals(0.9320272496071702, complex17.abs(), 0.01);
      assertEquals((-0.14843044062443092), complex17.getReal(), 0.01);
      assertEquals((-0.14843044062443092), complex17.real(), 0.01);
      assertEquals((-0.9201321634995397), complex17.getImaginary(), 0.01);
      assertEquals(0.8686747940103065, complex17.norm(), 0.01);
      assertEquals((-0.9201321634995397), complex17.imag(), 0.01);
      assertFalse(complex17.isNaN());
      assertEquals((-1.7307327820122809), complex17.arg(), 0.01);
      assertFalse(complex17.isInfinite());
      assertEquals(2360.0, complex18.abs(), 0.01);
      assertEquals(0.0, complex18.arg(), 0.01);
      assertEquals(2360.0, complex18.real(), 0.01);
      assertEquals(0.0, complex18.imag(), 0.01);
      assertEquals(5569600.0, complex18.norm(), 0.01);
      assertEquals(0.0, complex18.getImaginary(), 0.01);
      assertFalse(complex18.isNaN());
      assertEquals(2360.0, complex18.getReal(), 0.01);
      assertFalse(complex18.isInfinite());
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex7);
      assertNotSame(complex14, complex17);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex18);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex15);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex18);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex6);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex5);
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex16));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex14));
      assertTrue(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex17));
      assertFalse(complex0.equals((Object)complex15));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex12));
      assertTrue(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex15));
      assertFalse(complex1.equals((Object)complex14));
      assertFalse(complex1.equals((Object)complex17));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex16));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex17));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex16));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex13));
      
      Complex complex19 = complex2.subtractFromImaginary(1.7976931348623157E308);
      assertNotNull(complex19);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.6271952659369329, complex2.norm(), 0.01);
      assertEquals(1.2756156419301752, complex2.abs(), 0.01);
      assertEquals(0.39067400323462387, complex2.arg(), 0.01);
      assertEquals(1.179501321915592, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.4857693871955125, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.179501321915592, complex2.real(), 0.01);
      assertEquals(0.4857693871955125, complex2.imag(), 0.01);
      assertEquals(1.7976931348623157E308, complex19.imag(), 0.01);
      assertEquals(1.7976931348623157E308, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex19.norm(), 0.01);
      assertEquals((-1.179501321915592), complex19.getReal(), 0.01);
      assertEquals(1.7976931348623157E308, complex19.abs(), 0.01);
      assertFalse(complex19.isInfinite());
      assertEquals((-1.179501321915592), complex19.real(), 0.01);
      assertEquals(1.5707963267948968, complex19.arg(), 0.01);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex18);
      
      Complex complex20 = complex4.sinh();
      assertNotNull(complex20);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-1.5403023058681398), complex1.real(), 0.01);
      assertEquals((-1.5403023058681398), complex1.getReal(), 0.01);
      assertEquals(1.7551651237807455, complex1.abs(), 0.01);
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex1.imag(), 0.01);
      assertEquals(3.0806046117362795, complex1.norm(), 0.01);
      assertEquals(2.641592653589793, complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-1.0), complex4.arg(), 0.01);
      assertEquals(0.5403023058681398, complex4.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex4.getImaginary(), 0.01);
      assertEquals((-0.8414709848078965), complex4.imag(), 0.01);
      assertEquals(0.5403023058681398, complex4.real(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(1.0, complex4.norm(), 0.01);
      assertEquals(1.0, complex4.abs(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals((-1.1556282462801113), complex20.arg(), 0.01);
      assertEquals(0.877418046003093, complex20.norm(), 0.01);
      assertEquals((-0.8571314157170596), complex20.getImaginary(), 0.01);
      assertEquals(0.3778144811861532, complex20.getReal(), 0.01);
      assertEquals(0.9367059549309447, complex20.abs(), 0.01);
      assertEquals((-0.8571314157170596), complex20.imag(), 0.01);
      assertFalse(complex20.isNaN());
      assertEquals(0.3778144811861532, complex20.real(), 0.01);
      assertFalse(complex20.isInfinite());
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex7);
      assertNotSame(complex4, complex19);
      assertNotSame(complex4, complex17);
      assertNotSame(complex4, complex20);
      assertNotSame(complex4, complex14);
      assertSame(complex4, complex8);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex16);
      assertNotSame(complex4, complex18);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex15);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex13);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex10);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex6);
      
      Complex complex21 = complex19.multiply(0.0);
      assertNotNull(complex21);
      assertEquals(0.5403023058681398, complex0.getReal(), 0.01);
      assertEquals((-0.8414709848078965), complex0.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex0.real(), 0.01);
      assertEquals((-0.8414709848078965), complex0.imag(), 0.01);
      assertEquals((-1.0), complex0.arg(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.6271952659369329, complex2.norm(), 0.01);
      assertEquals(1.2756156419301752, complex2.abs(), 0.01);
      assertEquals(0.39067400323462387, complex2.arg(), 0.01);
      assertEquals(1.179501321915592, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.4857693871955125, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.179501321915592, complex2.real(), 0.01);
      assertEquals(0.4857693871955125, complex2.imag(), 0.01);
      assertEquals(1.7976931348623157E308, complex19.imag(), 0.01);
      assertEquals(1.7976931348623157E308, complex19.getImaginary(), 0.01);
      assertFalse(complex19.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex19.norm(), 0.01);
      assertEquals((-1.179501321915592), complex19.getReal(), 0.01);
      assertEquals(1.7976931348623157E308, complex19.abs(), 0.01);
      assertFalse(complex19.isInfinite());
      assertEquals((-1.179501321915592), complex19.real(), 0.01);
      assertEquals(1.5707963267948968, complex19.arg(), 0.01);
      assertEquals(0.0, complex21.getImaginary(), 0.01);
      assertEquals(0.0, complex21.imag(), 0.01);
      assertEquals(-0.0, complex21.real(), 0.01);
      assertEquals(3.141592653589793, complex21.arg(), 0.01);
      assertEquals(0.0, complex21.norm(), 0.01);
      assertEquals(-0.0, complex21.getReal(), 0.01);
      assertEquals(0.0, complex21.abs(), 0.01);
      assertFalse(complex21.isInfinite());
      assertFalse(complex21.isNaN());
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex20);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex21);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex20);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex21);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex18);
      assertNotSame(complex21, complex4);
      assertNotSame(complex21, complex18);
      assertNotSame(complex21, complex8);
      assertNotSame(complex21, complex11);
      assertNotSame(complex21, complex15);
      assertNotSame(complex21, complex16);
      assertNotSame(complex21, complex13);
      assertNotSame(complex21, complex2);
      assertNotSame(complex21, complex10);
      assertNotSame(complex21, complex19);
      assertNotSame(complex21, complex7);
      assertNotSame(complex21, complex20);
      assertNotSame(complex21, complex17);
      assertNotSame(complex21, complex14);
      assertNotSame(complex21, complex3);
      assertNotSame(complex21, complex12);
      assertNotSame(complex21, complex0);
      assertNotSame(complex21, complex5);
      assertNotSame(complex21, complex6);
      assertNotSame(complex21, complex1);
      assertNotSame(complex21, complex9);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.ofPolar((-2188.117), (-2188.117));
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.cos();
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.abs(), 0.01);
      assertEquals(Double.NaN, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.norm(), 0.01);
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.add(complex0);
      assertNotNull(complex2);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.abs(), 0.01);
      assertEquals(Double.NaN, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.norm(), 0.01);
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.arg(), 0.01);
      assertEquals(Double.NaN, complex2.imag(), 0.01);
      assertEquals(Double.NaN, complex2.real(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.norm(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.abs(), 0.01);
      assertTrue(complex2.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex0));
      
      Complex complex3 = complex1.multiply(complex0);
      assertNotNull(complex3);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.abs(), 0.01);
      assertEquals(Double.NaN, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.norm(), 0.01);
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.norm(), 0.01);
      assertEquals(Double.NaN, complex3.imag(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.abs(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.real(), 0.01);
      assertEquals(Double.NaN, complex3.arg(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex2));
      
      Complex complex4 = complex0.conj();
      assertNotNull(complex4);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.norm(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.abs(), 0.01);
      assertTrue(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.arg(), 0.01);
      assertEquals(Double.NaN, complex4.imag(), 0.01);
      assertEquals(Double.NaN, complex4.real(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex3));
      assertTrue(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex1));
      
      Complex complex5 = complex0.acosh();
      assertNotNull(complex5);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.imag(), 0.01);
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.norm(), 0.01);
      assertEquals(Double.NaN, complex5.abs(), 0.01);
      assertEquals(Double.NaN, complex5.real(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.arg(), 0.01);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex4));
      assertTrue(complex5.equals((Object)complex2));
      assertTrue(complex5.equals((Object)complex3));
      
      Complex complex6 = Complex.ofPolar(358.78474326620994, Double.NEGATIVE_INFINITY);
      assertNotNull(complex6);
      assertEquals(Double.NaN, complex6.norm(), 0.01);
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.abs(), 0.01);
      assertTrue(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.arg(), 0.01);
      assertEquals(Double.NaN, complex6.imag(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertEquals(Double.NaN, complex6.real(), 0.01);
      assertNotSame(complex6, complex3);
      assertSame(complex6, complex0);
      assertSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertTrue(complex6.equals((Object)complex1));
      assertTrue(complex6.equals((Object)complex2));
      assertTrue(complex6.equals((Object)complex4));
      assertTrue(complex6.equals((Object)complex3));
      
      Complex complex7 = complex2.multiply(complex3);
      assertNotNull(complex7);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.abs(), 0.01);
      assertEquals(Double.NaN, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.norm(), 0.01);
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(Double.NaN, complex2.arg(), 0.01);
      assertEquals(Double.NaN, complex2.imag(), 0.01);
      assertEquals(Double.NaN, complex2.real(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.norm(), 0.01);
      assertEquals(Double.NaN, complex2.getReal(), 0.01);
      assertEquals(Double.NaN, complex2.abs(), 0.01);
      assertTrue(complex2.isNaN());
      assertEquals(Double.NaN, complex3.getReal(), 0.01);
      assertEquals(Double.NaN, complex3.norm(), 0.01);
      assertEquals(Double.NaN, complex3.imag(), 0.01);
      assertTrue(complex3.isNaN());
      assertEquals(Double.NaN, complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex3.abs(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(Double.NaN, complex3.real(), 0.01);
      assertEquals(Double.NaN, complex3.arg(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex7.arg(), 0.01);
      assertEquals(Double.NaN, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex7.imag(), 0.01);
      assertEquals(Double.NaN, complex7.real(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertEquals(Double.NaN, complex7.abs(), 0.01);
      assertEquals(Double.NaN, complex7.norm(), 0.01);
      assertTrue(complex7.isNaN());
      assertSame(complex0, complex6);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex5);
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex4));
      assertTrue(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex4));
      assertTrue(complex2.equals((Object)complex3));
      assertTrue(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex6));
      assertTrue(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex5));
      assertTrue(complex3.equals((Object)complex1));
      assertTrue(complex3.equals((Object)complex4));
      assertTrue(complex3.equals((Object)complex6));
      assertTrue(complex3.equals((Object)complex5));
      assertTrue(complex3.equals((Object)complex0));
      assertTrue(complex3.equals((Object)complex2));
      assertTrue(complex7.equals((Object)complex4));
      assertTrue(complex7.equals((Object)complex1));
      assertTrue(complex7.equals((Object)complex5));
      assertTrue(complex7.equals((Object)complex6));
      assertTrue(complex7.equals((Object)complex0));
      assertTrue(complex7.equals((Object)complex2));
      assertTrue(complex7.equals((Object)complex3));
      
      Complex complex8 = complex6.tanh();
      assertNotNull(complex8);
      assertEquals(Double.NaN, complex6.norm(), 0.01);
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.abs(), 0.01);
      assertTrue(complex6.isNaN());
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.arg(), 0.01);
      assertEquals(Double.NaN, complex6.imag(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertEquals(Double.NaN, complex6.real(), 0.01);
      assertEquals(Double.NaN, complex8.norm(), 0.01);
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertEquals(Double.NaN, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertEquals(Double.NaN, complex8.abs(), 0.01);
      assertTrue(complex8.isNaN());
      assertNotSame(complex6, complex3);
      assertSame(complex6, complex0);
      assertSame(complex6, complex5);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex8);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertTrue(complex6.equals((Object)complex1));
      assertTrue(complex6.equals((Object)complex7));
      assertTrue(complex6.equals((Object)complex2));
      assertTrue(complex6.equals((Object)complex4));
      assertTrue(complex6.equals((Object)complex3));
      assertTrue(complex8.equals((Object)complex5));
      assertTrue(complex8.equals((Object)complex0));
      assertTrue(complex8.equals((Object)complex7));
      assertTrue(complex8.equals((Object)complex1));
      assertTrue(complex8.equals((Object)complex3));
      assertTrue(complex8.equals((Object)complex4));
      assertTrue(complex8.equals((Object)complex2));
      assertTrue(complex8.equals((Object)complex6));
      
      Complex complex9 = complex5.asinh();
      assertNotNull(complex9);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      assertEquals(Double.NaN, complex5.imag(), 0.01);
      assertTrue(complex5.isNaN());
      assertEquals(Double.NaN, complex5.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex5.norm(), 0.01);
      assertEquals(Double.NaN, complex5.abs(), 0.01);
      assertEquals(Double.NaN, complex5.real(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(Double.NaN, complex5.arg(), 0.01);
      assertEquals(Double.NaN, complex9.abs(), 0.01);
      assertEquals(Double.NaN, complex9.real(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(Double.NaN, complex9.arg(), 0.01);
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertEquals(Double.NaN, complex9.imag(), 0.01);
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex9.norm(), 0.01);
      assertSame(complex0, complex6);
      assertNotSame(complex0, complex8);
      assertSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex9);
      assertSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertSame(complex5, complex6);
      assertNotSame(complex5, complex2);
      assertSame(complex5, complex9);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex4);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex4);
      assertSame(complex9, complex0);
      assertNotSame(complex9, complex3);
      assertSame(complex9, complex5);
      assertSame(complex9, complex6);
      assertTrue(complex0.equals((Object)complex2));
      assertTrue(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex8));
      assertTrue(complex0.equals((Object)complex1));
      assertTrue(complex0.equals((Object)complex7));
      assertTrue(complex5.equals((Object)complex7));
      assertTrue(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex8));
      assertTrue(complex5.equals((Object)complex4));
      assertTrue(complex5.equals((Object)complex2));
      assertTrue(complex5.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex3));
      assertTrue(complex9.equals((Object)complex7));
      assertTrue(complex9.equals((Object)complex1));
      assertTrue(complex9.equals((Object)complex8));
      assertTrue(complex9.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian((-1.0), 357.45302);
      assertNotNull(complex0);
      assertEquals(127773.66150712039, complex0.norm(), 0.01);
      assertEquals(357.45302, complex0.getImaginary(), 0.01);
      assertEquals(1.5735938899298008, complex0.arg(), 0.01);
      assertEquals(357.45302, complex0.imag(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(357.4544187824797, complex0.abs(), 0.01);
      assertEquals((-1.0), complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1.0), complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.acos();
      assertNotNull(complex1);
      assertEquals(127773.66150712039, complex0.norm(), 0.01);
      assertEquals(357.45302, complex0.getImaginary(), 0.01);
      assertEquals(1.5735938899298008, complex0.arg(), 0.01);
      assertEquals(357.45302, complex0.imag(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(357.4544187824797, complex0.abs(), 0.01);
      assertEquals((-1.0), complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1.0), complex0.getReal(), 0.01);
      assertEquals(1.5735938789825832, complex1.getReal(), 0.01);
      assertEquals(45.66944521300907, complex1.norm(), 0.01);
      assertEquals((-1.3357871583405607), complex1.arg(), 0.01);
      assertEquals((-6.572156991204457), complex1.imag(), 0.01);
      assertEquals(6.7579172244863335, complex1.abs(), 0.01);
      assertEquals((-6.572156991204457), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.5735938789825832, complex1.real(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      complex1.I.hashCode();
      assertEquals(127773.66150712039, complex0.norm(), 0.01);
      assertEquals(357.45302, complex0.getImaginary(), 0.01);
      assertEquals(1.5735938899298008, complex0.arg(), 0.01);
      assertEquals(357.45302, complex0.imag(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(357.4544187824797, complex0.abs(), 0.01);
      assertEquals((-1.0), complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1.0), complex0.getReal(), 0.01);
      assertEquals(1.5735938789825832, complex1.getReal(), 0.01);
      assertEquals(45.66944521300907, complex1.norm(), 0.01);
      assertEquals((-1.3357871583405607), complex1.arg(), 0.01);
      assertEquals((-6.572156991204457), complex1.imag(), 0.01);
      assertEquals(6.7579172244863335, complex1.abs(), 0.01);
      assertEquals((-6.572156991204457), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.5735938789825832, complex1.real(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.proj();
      assertNotNull(complex2);
      assertEquals(127773.66150712039, complex0.norm(), 0.01);
      assertEquals(357.45302, complex0.getImaginary(), 0.01);
      assertEquals(1.5735938899298008, complex0.arg(), 0.01);
      assertEquals(357.45302, complex0.imag(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(357.4544187824797, complex0.abs(), 0.01);
      assertEquals((-1.0), complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1.0), complex0.getReal(), 0.01);
      assertEquals(357.4544187824797, complex2.abs(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(127773.66150712039, complex2.norm(), 0.01);
      assertEquals((-1.0), complex2.real(), 0.01);
      assertEquals((-1.0), complex2.getReal(), 0.01);
      assertEquals(1.5735938899298008, complex2.arg(), 0.01);
      assertEquals(357.45302, complex2.imag(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(357.45302, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex2.cosh();
      assertNotNull(complex3);
      assertEquals(127773.66150712039, complex0.norm(), 0.01);
      assertEquals(357.45302, complex0.getImaginary(), 0.01);
      assertEquals(1.5735938899298008, complex0.arg(), 0.01);
      assertEquals(357.45302, complex0.imag(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(357.4544187824797, complex0.abs(), 0.01);
      assertEquals((-1.0), complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1.0), complex0.getReal(), 0.01);
      assertEquals(357.4544187824797, complex2.abs(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(127773.66150712039, complex2.norm(), 0.01);
      assertEquals((-1.0), complex2.real(), 0.01);
      assertEquals((-1.0), complex2.getReal(), 0.01);
      assertEquals(1.5735938899298008, complex2.arg(), 0.01);
      assertEquals(357.45302, complex2.imag(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(357.45302, complex2.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(1.1915251143950305, complex3.getReal(), 0.01);
      assertEquals(0.7467374374784536, complex3.imag(), 0.01);
      assertEquals(1.1915251143950305, complex3.real(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(1.977348898765978, complex3.norm(), 0.01);
      assertEquals(0.5598260646997343, complex3.arg(), 0.01);
      assertEquals(1.4061823846023596, complex3.abs(), 0.01);
      assertEquals(0.7467374374784536, complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex2);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex0);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = complex1.ZERO.subtractFromImaginary(0.0);
      assertNotNull(complex4);
      assertEquals(127773.66150712039, complex0.norm(), 0.01);
      assertEquals(357.45302, complex0.getImaginary(), 0.01);
      assertEquals(1.5735938899298008, complex0.arg(), 0.01);
      assertEquals(357.45302, complex0.imag(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(357.4544187824797, complex0.abs(), 0.01);
      assertEquals((-1.0), complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1.0), complex0.getReal(), 0.01);
      assertEquals(1.5735938789825832, complex1.getReal(), 0.01);
      assertEquals(45.66944521300907, complex1.norm(), 0.01);
      assertEquals((-1.3357871583405607), complex1.arg(), 0.01);
      assertEquals((-6.572156991204457), complex1.imag(), 0.01);
      assertEquals(6.7579172244863335, complex1.abs(), 0.01);
      assertEquals((-6.572156991204457), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.5735938789825832, complex1.real(), 0.01);
      assertEquals(-0.0, complex4.real(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      
      Complex complex5 = Complex.ofCis(0.0);
      assertNotNull(complex5);
      assertEquals(0.0, complex5.arg(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(1.0, complex5.real(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(1.0, complex5.norm(), 0.01);
      assertEquals(1.0, complex5.abs(), 0.01);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      
      Complex complex6 = Complex.ofPolar(0.0, (-1.0));
      assertNotNull(complex6);
      assertEquals(-0.0, complex6.arg(), 0.01);
      assertEquals(0.0, complex6.abs(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.norm(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.real(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      
      Complex complex7 = complex6.ONE.sinh();
      assertNotNull(complex7);
      assertEquals(-0.0, complex6.arg(), 0.01);
      assertEquals(0.0, complex6.abs(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.norm(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.real(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(1.1752011936438014, complex7.abs(), 0.01);
      assertEquals(1.1752011936438014, complex7.real(), 0.01);
      assertEquals(0.0, complex7.arg(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(1.1752011936438014, complex7.getReal(), 0.01);
      assertEquals(1.3810978455418155, complex7.norm(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex5);
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex5));
      
      Complex complex8 = complex6.add(759.716056771911);
      assertNotNull(complex8);
      assertEquals(-0.0, complex6.arg(), 0.01);
      assertEquals(0.0, complex6.abs(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.norm(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.real(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(-0.0, complex8.arg(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(759.716056771911, complex8.abs(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(759.716056771911, complex8.getReal(), 0.01);
      assertEquals(-0.0, complex8.imag(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(577168.4869170615, complex8.norm(), 0.01);
      assertEquals(759.716056771911, complex8.real(), 0.01);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex7);
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex7));
      
      Complex complex9 = complex8.ZERO.negate();
      assertNotNull(complex9);
      assertEquals(-0.0, complex6.arg(), 0.01);
      assertEquals(0.0, complex6.abs(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.norm(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(-0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.real(), 0.01);
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(-0.0, complex8.arg(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(759.716056771911, complex8.abs(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(759.716056771911, complex8.getReal(), 0.01);
      assertEquals(-0.0, complex8.imag(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(577168.4869170615, complex8.norm(), 0.01);
      assertEquals(759.716056771911, complex8.real(), 0.01);
      assertEquals(-0.0, complex9.real(), 0.01);
      assertEquals(0.0, complex9.abs(), 0.01);
      assertEquals(-0.0, complex9.getReal(), 0.01);
      assertEquals((-3.141592653589793), complex9.arg(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(-0.0, complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.norm(), 0.01);
      assertEquals(-0.0, complex9.imag(), 0.01);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex7);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex7);
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex7));
      
      Complex complex10 = complex1.subtractImaginary((-1.0));
      assertNotNull(complex10);
      assertEquals(127773.66150712039, complex0.norm(), 0.01);
      assertEquals(357.45302, complex0.getImaginary(), 0.01);
      assertEquals(1.5735938899298008, complex0.arg(), 0.01);
      assertEquals(357.45302, complex0.imag(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(357.4544187824797, complex0.abs(), 0.01);
      assertEquals((-1.0), complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1.0), complex0.getReal(), 0.01);
      assertEquals(1.5735938789825832, complex1.getReal(), 0.01);
      assertEquals(45.66944521300907, complex1.norm(), 0.01);
      assertEquals((-1.3357871583405607), complex1.arg(), 0.01);
      assertEquals((-6.572156991204457), complex1.imag(), 0.01);
      assertEquals(6.7579172244863335, complex1.abs(), 0.01);
      assertEquals((-6.572156991204457), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.5735938789825832, complex1.real(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(1.5735938789825832, complex10.real(), 0.01);
      assertEquals((-1.2955607109405292), complex10.arg(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(5.790089052044032, complex10.abs(), 0.01);
      assertEquals(1.5735938789825832, complex10.getReal(), 0.01);
      assertEquals((-5.572156991204457), complex10.getImaginary(), 0.01);
      assertEquals((-5.572156991204457), complex10.imag(), 0.01);
      assertEquals(33.52513123060016, complex10.norm(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex6);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex6));
      
      boolean boolean0 = complex0.isFinite();
      assertTrue(boolean0);
      assertEquals(127773.66150712039, complex0.norm(), 0.01);
      assertEquals(357.45302, complex0.getImaginary(), 0.01);
      assertEquals(1.5735938899298008, complex0.arg(), 0.01);
      assertEquals(357.45302, complex0.imag(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(357.4544187824797, complex0.abs(), 0.01);
      assertEquals((-1.0), complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1.0), complex0.getReal(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      
      Complex complex11 = complex1.divide(3755.6114065774377);
      assertNotNull(complex11);
      assertEquals(127773.66150712039, complex0.norm(), 0.01);
      assertEquals(357.45302, complex0.getImaginary(), 0.01);
      assertEquals(1.5735938899298008, complex0.arg(), 0.01);
      assertEquals(357.45302, complex0.imag(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(357.4544187824797, complex0.abs(), 0.01);
      assertEquals((-1.0), complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1.0), complex0.getReal(), 0.01);
      assertEquals(1.5735938789825832, complex1.getReal(), 0.01);
      assertEquals(45.66944521300907, complex1.norm(), 0.01);
      assertEquals((-1.3357871583405607), complex1.arg(), 0.01);
      assertEquals((-6.572156991204457), complex1.imag(), 0.01);
      assertEquals(6.7579172244863335, complex1.abs(), 0.01);
      assertEquals((-6.572156991204457), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.5735938789825832, complex1.real(), 0.01);
      assertEquals(4.189980561425097E-4, complex11.real(), 0.01);
      assertEquals((-0.0017499566061851411), complex11.getImaginary(), 0.01);
      assertEquals(3.237907494582219E-6, complex11.norm(), 0.01);
      assertEquals((-0.0017499566061851411), complex11.imag(), 0.01);
      assertEquals(4.189980561425097E-4, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex11.isNaN());
      assertEquals(0.001799418654616601, complex11.abs(), 0.01);
      assertEquals((-1.3357871583405607), complex11.arg(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex10);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex10));
      
      Complex complex12 = complex4.pow((-1.0));
      assertNotNull(complex12);
      assertEquals(127773.66150712039, complex0.norm(), 0.01);
      assertEquals(357.45302, complex0.getImaginary(), 0.01);
      assertEquals(1.5735938899298008, complex0.arg(), 0.01);
      assertEquals(357.45302, complex0.imag(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(357.4544187824797, complex0.abs(), 0.01);
      assertEquals((-1.0), complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-1.0), complex0.getReal(), 0.01);
      assertEquals(1.5735938789825832, complex1.getReal(), 0.01);
      assertEquals(45.66944521300907, complex1.norm(), 0.01);
      assertEquals((-1.3357871583405607), complex1.arg(), 0.01);
      assertEquals((-6.572156991204457), complex1.imag(), 0.01);
      assertEquals(6.7579172244863335, complex1.abs(), 0.01);
      assertEquals((-6.572156991204457), complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.5735938789825832, complex1.real(), 0.01);
      assertEquals(-0.0, complex4.real(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertFalse(complex12.isInfinite());
      assertEquals(Double.NaN, complex12.arg(), 0.01);
      assertEquals(Double.NaN, complex12.imag(), 0.01);
      assertEquals(Double.NaN, complex12.real(), 0.01);
      assertEquals(Double.NaN, complex12.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex12.norm(), 0.01);
      assertEquals(Double.NaN, complex12.getReal(), 0.01);
      assertEquals(Double.NaN, complex12.abs(), 0.01);
      assertTrue(complex12.isNaN());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertSame(complex0, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex9);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex11));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex9));
      
      Complex complex13 = Complex.ofCis((-2494.6804027));
      assertNotNull(complex13);
      assertFalse(complex13.isNaN());
      assertEquals(1.0000000000000002, complex13.norm(), 0.01);
      assertEquals(1.0, complex13.abs(), 0.01);
      assertEquals((-0.25305404475930093), complex13.getImaginary(), 0.01);
      assertEquals((-0.255835749704), complex13.arg(), 0.01);
      assertEquals((-0.25305404475930093), complex13.imag(), 0.01);
      assertEquals(0.9674521437419826, complex13.getReal(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals(0.9674521437419826, complex13.real(), 0.01);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex4);
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex4));
      
      Complex complex14 = Complex.ofCartesian((-1.0), 258.0872214);
      assertNotNull(complex14);
      assertEquals(66610.0138499726, complex14.norm(), 0.01);
      assertEquals((-1.0), complex14.real(), 0.01);
      assertEquals((-1.0), complex14.getReal(), 0.01);
      assertEquals(258.0891587222768, complex14.abs(), 0.01);
      assertEquals(1.574670966501167, complex14.arg(), 0.01);
      assertFalse(complex14.isInfinite());
      assertFalse(complex14.isNaN());
      assertEquals(258.0872214, complex14.getImaginary(), 0.01);
      assertEquals(258.0872214, complex14.imag(), 0.01);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex3);
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex3));
      
      // Undeclared exception!
      try { 
        Complex.parse("8LY:G7_6mN5J3*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected start delimiter '(' for input \"8LY:G7_6mN5J3*\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      
      Complex complex1 = complex0.tanh();
      assertNotNull(complex1);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.5574077246549023, complex1.imag(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(1.5574077246549023, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(2.42551882081476, complex1.norm(), 0.01);
      assertEquals(1.5574077246549023, complex1.abs(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.ZERO.sqrt();
      assertNotNull(complex2);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.5574077246549023, complex1.imag(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(1.5574077246549023, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(2.42551882081476, complex1.norm(), 0.01);
      assertEquals(1.5574077246549023, complex1.abs(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex0.ZERO.subtractFromImaginary((-1593.601));
      assertNotNull(complex3);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals((-1593.601), complex3.imag(), 0.01);
      assertEquals((-1593.601), complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(-0.0, complex3.getReal(), 0.01);
      assertEquals(2539564.1472010002, complex3.norm(), 0.01);
      assertEquals((-1.5707963267948966), complex3.arg(), 0.01);
      assertEquals(1593.601, complex3.abs(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(-0.0, complex3.real(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      
      Complex complex4 = complex3.sinh();
      assertNotNull(complex4);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals((-1593.601), complex3.imag(), 0.01);
      assertEquals((-1593.601), complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(-0.0, complex3.getReal(), 0.01);
      assertEquals(2539564.1472010002, complex3.norm(), 0.01);
      assertEquals((-1.5707963267948966), complex3.arg(), 0.01);
      assertEquals(1593.601, complex3.abs(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(-0.0, complex3.real(), 0.01);
      assertEquals(0.7267128972717237, complex4.abs(), 0.01);
      assertEquals(0.5281116350610628, complex4.norm(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.7267128972717237, complex4.getImaginary(), 0.01);
      assertEquals(0.7267128972717237, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex4.arg(), 0.01);
      assertEquals(0.0, complex4.real(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complex2.cos();
      assertNotNull(complex5);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.5574077246549023, complex1.imag(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(1.5574077246549023, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(2.42551882081476, complex1.norm(), 0.01);
      assertEquals(1.5574077246549023, complex1.abs(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex5.abs(), 0.01);
      assertEquals(1.0, complex5.real(), 0.01);
      assertEquals(-0.0, complex5.arg(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertEquals(-0.0, complex5.imag(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(1.0, complex5.norm(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      
      Complex complex6 = complex2.acosh();
      assertNotNull(complex6);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.5574077246549023, complex1.imag(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(1.5574077246549023, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(2.42551882081476, complex1.norm(), 0.01);
      assertEquals(1.5574077246549023, complex1.abs(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex6.abs(), 0.01);
      assertEquals(2.4674011002723395, complex6.norm(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(1.5707963267948966, complex6.arg(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.real(), 0.01);
      assertEquals(1.5707963267948966, complex6.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex0));
      
      boolean boolean0 = complex0.isFinite();
      assertTrue(boolean0);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      
      Complex complex7 = complex0.ZERO.multiply(complex2);
      assertNotNull(complex7);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.5574077246549023, complex1.imag(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(1.5574077246549023, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(2.42551882081476, complex1.norm(), 0.01);
      assertEquals(1.5574077246549023, complex1.abs(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.arg(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.norm(), 0.01);
      assertEquals(0.0, complex7.abs(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(0.0, complex7.real(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex5));
      assertTrue(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex6));
      
      Complex complex8 = complex1.divide(complex5);
      assertNotNull(complex8);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.5574077246549023, complex1.imag(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(1.5574077246549023, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(2.42551882081476, complex1.norm(), 0.01);
      assertEquals(1.5574077246549023, complex1.abs(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex5.abs(), 0.01);
      assertEquals(1.0, complex5.real(), 0.01);
      assertEquals(-0.0, complex5.arg(), 0.01);
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertEquals(-0.0, complex5.imag(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(1.0, complex5.norm(), 0.01);
      assertEquals(0.0, complex8.real(), 0.01);
      assertEquals(1.5574077246549023, complex8.abs(), 0.01);
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(2.42551882081476, complex8.norm(), 0.01);
      assertEquals(1.5707963267948966, complex8.arg(), 0.01);
      assertEquals(1.5574077246549023, complex8.imag(), 0.01);
      assertEquals(1.5574077246549023, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex6);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex4);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex2));
      assertTrue(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex4));
      
      Complex complex9 = Complex.ofPolar(0.0, (-2889.483793158563));
      assertNotNull(complex9);
      assertEquals(0.0, complex9.abs(), 0.01);
      assertEquals(0.0, complex9.real(), 0.01);
      assertEquals(0.0, complex9.norm(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertEquals(0.0, complex9.imag(), 0.01);
      assertFalse(complex9.isInfinite());
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.arg(), 0.01);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex4));
      assertTrue(complex9.equals((Object)complex2));
      assertTrue(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex8));
      
      Complex complex10 = complex0.addImaginary(0.0);
      assertNotNull(complex10);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(1.0, complex10.norm(), 0.01);
      assertEquals(1.0, complex10.getImaginary(), 0.01);
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(1.5707963267948966, complex10.arg(), 0.01);
      assertEquals(1.0, complex10.imag(), 0.01);
      assertEquals(0.0, complex10.real(), 0.01);
      assertEquals(1.0, complex10.abs(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex5);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertTrue(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex5));
      
      Complex complex11 = complex3.add(complex7);
      assertNotNull(complex11);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.5574077246549023, complex1.imag(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(1.5574077246549023, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(2.42551882081476, complex1.norm(), 0.01);
      assertEquals(1.5574077246549023, complex1.abs(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals((-1593.601), complex3.imag(), 0.01);
      assertEquals((-1593.601), complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(-0.0, complex3.getReal(), 0.01);
      assertEquals(2539564.1472010002, complex3.norm(), 0.01);
      assertEquals((-1.5707963267948966), complex3.arg(), 0.01);
      assertEquals(1593.601, complex3.abs(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(-0.0, complex3.real(), 0.01);
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.arg(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.norm(), 0.01);
      assertEquals(0.0, complex7.abs(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(0.0, complex7.real(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals((-1.5707963267948966), complex11.arg(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertEquals(1593.601, complex11.abs(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(2539564.1472010002, complex11.norm(), 0.01);
      assertEquals((-1593.601), complex11.imag(), 0.01);
      assertEquals(0.0, complex11.real(), 0.01);
      assertEquals((-1593.601), complex11.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex8);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex11);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex11);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex9);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertTrue(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex10));
      assertTrue(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertTrue(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex0));
      assertTrue(complex2.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex8));
      assertFalse(complex3.equals((Object)complex10));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex9));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex7));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertTrue(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex5));
      assertTrue(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex2));
      assertFalse(complex11.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.ofCis(3640.118589);
      assertNotNull(complex0);
      assertEquals((-0.5509480400784162), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2.154296143019586, complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-0.5509480400784162), complex0.getReal(), 0.01);
      assertEquals(0.8345395479746612, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.8345395479746612, complex0.imag(), 0.01);
      
      double double0 = (-1.0);
      Complex complex1 = complex0.divide((-1.0));
      assertNotNull(complex1);
      assertEquals((-0.5509480400784162), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2.154296143019586, complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-0.5509480400784162), complex0.getReal(), 0.01);
      assertEquals(0.8345395479746612, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.8345395479746612, complex0.imag(), 0.01);
      assertEquals((-0.9872965105702071), complex1.arg(), 0.01);
      assertEquals((-0.8345395479746612), complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.abs(), 0.01);
      assertEquals((-0.8345395479746612), complex1.imag(), 0.01);
      assertEquals(1.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.5509480400784162, complex1.getReal(), 0.01);
      assertEquals(0.5509480400784162, complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.ZERO.multiply(complex0);
      assertNotNull(complex2);
      assertEquals((-0.5509480400784162), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2.154296143019586, complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-0.5509480400784162), complex0.getReal(), 0.01);
      assertEquals(0.8345395479746612, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.8345395479746612, complex0.imag(), 0.01);
      assertEquals((-0.9872965105702071), complex1.arg(), 0.01);
      assertEquals((-0.8345395479746612), complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.abs(), 0.01);
      assertEquals((-0.8345395479746612), complex1.imag(), 0.01);
      assertEquals(1.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.5509480400784162, complex1.getReal(), 0.01);
      assertEquals(0.5509480400784162, complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(3.141592653589793, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertEquals(-0.0, complex2.real(), 0.01);
      assertEquals(-0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex1.sqrt();
      assertNotNull(complex3);
      assertEquals((-0.5509480400784162), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2.154296143019586, complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-0.5509480400784162), complex0.getReal(), 0.01);
      assertEquals(0.8345395479746612, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.8345395479746612, complex0.imag(), 0.01);
      assertEquals((-0.9872965105702071), complex1.arg(), 0.01);
      assertEquals((-0.8345395479746612), complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.abs(), 0.01);
      assertEquals((-0.8345395479746612), complex1.imag(), 0.01);
      assertEquals(1.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.5509480400784162, complex1.getReal(), 0.01);
      assertEquals(0.5509480400784162, complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-0.47384172458827634), complex3.imag(), 0.01);
      assertEquals((-0.47384172458827634), complex3.getImaginary(), 0.01);
      assertEquals(0.880610027219318, complex3.real(), 0.01);
      assertEquals(1.0, complex3.norm(), 0.01);
      assertEquals(1.0, complex3.abs(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(0.880610027219318, complex3.getReal(), 0.01);
      assertEquals((-0.49364825528510353), complex3.arg(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = complex3.ONE.divideImaginary(3640.118589);
      assertNotNull(complex4);
      assertEquals((-0.5509480400784162), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2.154296143019586, complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-0.5509480400784162), complex0.getReal(), 0.01);
      assertEquals(0.8345395479746612, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.8345395479746612, complex0.imag(), 0.01);
      assertEquals((-0.9872965105702071), complex1.arg(), 0.01);
      assertEquals((-0.8345395479746612), complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.abs(), 0.01);
      assertEquals((-0.8345395479746612), complex1.imag(), 0.01);
      assertEquals(1.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.5509480400784162, complex1.getReal(), 0.01);
      assertEquals(0.5509480400784162, complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-0.47384172458827634), complex3.imag(), 0.01);
      assertEquals((-0.47384172458827634), complex3.getImaginary(), 0.01);
      assertEquals(0.880610027219318, complex3.real(), 0.01);
      assertEquals(1.0, complex3.norm(), 0.01);
      assertEquals(1.0, complex3.abs(), 0.01);
      assertFalse(complex3.isNaN());
      assertFalse(complex3.isInfinite());
      assertEquals(0.880610027219318, complex3.getReal(), 0.01);
      assertEquals((-0.49364825528510353), complex3.arg(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals((-1.5707963267948966), complex4.arg(), 0.01);
      assertEquals(7.54690590201141E-8, complex4.norm(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(2.7471632463345547E-4, complex4.abs(), 0.01);
      assertEquals((-2.7471632463345547E-4), complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals((-2.7471632463345547E-4), complex4.imag(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complex0.ZERO.subtractFromImaginary(1149.8);
      assertNotNull(complex5);
      assertEquals((-0.5509480400784162), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2.154296143019586, complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-0.5509480400784162), complex0.getReal(), 0.01);
      assertEquals(0.8345395479746612, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.8345395479746612, complex0.imag(), 0.01);
      assertEquals(1322040.0399999998, complex5.norm(), 0.01);
      assertEquals(1.5707963267948966, complex5.arg(), 0.01);
      assertEquals(-0.0, complex5.real(), 0.01);
      assertEquals(1149.8, complex5.abs(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(-0.0, complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(1149.8, complex5.getImaginary(), 0.01);
      assertEquals(1149.8, complex5.imag(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      
      Complex complex6 = complex0.ZERO.add(3640.118589);
      assertNotNull(complex6);
      assertEquals((-0.5509480400784162), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2.154296143019586, complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-0.5509480400784162), complex0.getReal(), 0.01);
      assertEquals(0.8345395479746612, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.8345395479746612, complex0.imag(), 0.01);
      assertEquals(3640.118589, complex6.real(), 0.01);
      assertEquals(3640.118589, complex6.getReal(), 0.01);
      assertEquals(1.3250463341983352E7, complex6.norm(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(3640.118589, complex6.abs(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      
      Complex complex7 = complex1.ONE.tanh();
      assertNotNull(complex7);
      assertEquals((-0.5509480400784162), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2.154296143019586, complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-0.5509480400784162), complex0.getReal(), 0.01);
      assertEquals(0.8345395479746612, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.8345395479746612, complex0.imag(), 0.01);
      assertEquals((-0.9872965105702071), complex1.arg(), 0.01);
      assertEquals((-0.8345395479746612), complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.abs(), 0.01);
      assertEquals((-0.8345395479746612), complex1.imag(), 0.01);
      assertEquals(1.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.5509480400784162, complex1.getReal(), 0.01);
      assertEquals(0.5509480400784162, complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.7615941559557649, complex7.getReal(), 0.01);
      assertEquals(0.5800256583859739, complex7.norm(), 0.01);
      assertEquals(0.7615941559557649, complex7.abs(), 0.01);
      assertEquals(0.7615941559557649, complex7.real(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.imag(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.arg(), 0.01);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      
      Complex complex8 = complex7.I.subtractImaginary((-1.0));
      assertNotNull(complex8);
      assertEquals((-0.5509480400784162), complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2.154296143019586, complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-0.5509480400784162), complex0.getReal(), 0.01);
      assertEquals(0.8345395479746612, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.8345395479746612, complex0.imag(), 0.01);
      assertEquals((-0.9872965105702071), complex1.arg(), 0.01);
      assertEquals((-0.8345395479746612), complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.abs(), 0.01);
      assertEquals((-0.8345395479746612), complex1.imag(), 0.01);
      assertEquals(1.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.5509480400784162, complex1.getReal(), 0.01);
      assertEquals(0.5509480400784162, complex1.real(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.7615941559557649, complex7.getReal(), 0.01);
      assertEquals(0.5800256583859739, complex7.norm(), 0.01);
      assertEquals(0.7615941559557649, complex7.abs(), 0.01);
      assertEquals(0.7615941559557649, complex7.real(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.imag(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.arg(), 0.01);
      assertEquals(2.0, complex8.abs(), 0.01);
      assertEquals(0.0, complex8.real(), 0.01);
      assertEquals(2.0, complex8.getImaginary(), 0.01);
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(2.0, complex8.imag(), 0.01);
      assertEquals(1.5707963267948966, complex8.arg(), 0.01);
      assertEquals(4.0, complex8.norm(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex0);
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex0));
      
      String string0 = "Expected separator between two numbers";
      // Undeclared exception!
      try { 
        Complex.parse("Expected separator between two numbers");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected start delimiter '(' for input \"Expected separator between two numbers\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = "kr2\"]";
      // Undeclared exception!
      try { 
        Complex.parse("kr2\"]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected start delimiter '(' for input \"kr2\"]\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.ofCis((-320.9439294290674));
      assertNotNull(complex0);
      assertEquals(0.8768726459227316, complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-0.5014787629084853), complex0.arg(), 0.01);
      assertEquals(0.8768726459227316, complex0.getReal(), 0.01);
      assertEquals((-0.4807227504835482), complex0.imag(), 0.01);
      assertEquals((-0.4807227504835482), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01);
      
      Complex complex1 = complex0.ZERO.subtractImaginary((-320.9439294290674));
      assertNotNull(complex1);
      assertEquals(0.8768726459227316, complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-0.5014787629084853), complex0.arg(), 0.01);
      assertEquals(0.8768726459227316, complex0.getReal(), 0.01);
      assertEquals((-0.4807227504835482), complex0.imag(), 0.01);
      assertEquals((-0.4807227504835482), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(320.9439294290674, complex1.abs(), 0.01);
      assertEquals(103005.00583737019, complex1.norm(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(320.9439294290674, complex1.getImaginary(), 0.01);
      assertEquals(320.9439294290674, complex1.imag(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.ZERO.add(0.0);
      assertNotNull(complex2);
      assertEquals(0.8768726459227316, complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-0.5014787629084853), complex0.arg(), 0.01);
      assertEquals(0.8768726459227316, complex0.getReal(), 0.01);
      assertEquals((-0.4807227504835482), complex0.imag(), 0.01);
      assertEquals((-0.4807227504835482), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(320.9439294290674, complex1.abs(), 0.01);
      assertEquals(103005.00583737019, complex1.norm(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(320.9439294290674, complex1.getImaginary(), 0.01);
      assertEquals(320.9439294290674, complex1.imag(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex1.subtract(0.0);
      assertNotNull(complex3);
      assertEquals(0.8768726459227316, complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-0.5014787629084853), complex0.arg(), 0.01);
      assertEquals(0.8768726459227316, complex0.getReal(), 0.01);
      assertEquals((-0.4807227504835482), complex0.imag(), 0.01);
      assertEquals((-0.4807227504835482), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(320.9439294290674, complex1.abs(), 0.01);
      assertEquals(103005.00583737019, complex1.norm(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(320.9439294290674, complex1.getImaginary(), 0.01);
      assertEquals(320.9439294290674, complex1.imag(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(320.9439294290674, complex3.abs(), 0.01);
      assertEquals(320.9439294290674, complex3.imag(), 0.01);
      assertEquals(320.9439294290674, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(103005.00583737019, complex3.norm(), 0.01);
      assertEquals(1.5707963267948966, complex3.arg(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertTrue(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      
      Complex complex4 = Complex.ofPolar(0.0, 5.9666725849601654E-154);
      assertNotNull(complex4);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.arg(), 0.01);
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertTrue(complex4.equals((Object)complex2));
      
      Complex complex5 = complex3.subtract(complex0);
      assertNotNull(complex5);
      assertEquals(0.8768726459227316, complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-0.5014787629084853), complex0.arg(), 0.01);
      assertEquals(0.8768726459227316, complex0.getReal(), 0.01);
      assertEquals((-0.4807227504835482), complex0.imag(), 0.01);
      assertEquals((-0.4807227504835482), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(320.9439294290674, complex1.abs(), 0.01);
      assertEquals(103005.00583737019, complex1.norm(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(320.9439294290674, complex1.getImaginary(), 0.01);
      assertEquals(320.9439294290674, complex1.imag(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(320.9439294290674, complex3.abs(), 0.01);
      assertEquals(320.9439294290674, complex3.imag(), 0.01);
      assertEquals(320.9439294290674, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(103005.00583737019, complex3.norm(), 0.01);
      assertEquals(1.5707963267948966, complex3.arg(), 0.01);
      assertEquals((-0.8768726459227316), complex5.real(), 0.01);
      assertEquals(103314.57593438248, complex5.norm(), 0.01);
      assertEquals(321.4258482673453, complex5.abs(), 0.01);
      assertEquals((-0.8768726459227316), complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(1.5735244015229315, complex5.arg(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(321.42465217955095, complex5.imag(), 0.01);
      assertEquals(321.42465217955095, complex5.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertTrue(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      
      Complex complex6 = Complex.ofCartesian(Double.POSITIVE_INFINITY, 0.0);
      assertNotNull(complex6);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.abs(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.real(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertTrue(complex6.isInfinite());
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      
      boolean boolean0 = complex6.isFinite();
      assertFalse(boolean0);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.abs(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.real(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertTrue(complex6.isInfinite());
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      
      Complex complex7 = complex5.cosh();
      assertNotNull(complex7);
      assertEquals(0.8768726459227316, complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-0.5014787629084853), complex0.arg(), 0.01);
      assertEquals(0.8768726459227316, complex0.getReal(), 0.01);
      assertEquals((-0.4807227504835482), complex0.imag(), 0.01);
      assertEquals((-0.4807227504835482), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(320.9439294290674, complex1.abs(), 0.01);
      assertEquals(103005.00583737019, complex1.norm(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(320.9439294290674, complex1.getImaginary(), 0.01);
      assertEquals(320.9439294290674, complex1.imag(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(320.9439294290674, complex3.abs(), 0.01);
      assertEquals(320.9439294290674, complex3.imag(), 0.01);
      assertEquals(320.9439294290674, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(103005.00583737019, complex3.norm(), 0.01);
      assertEquals(1.5707963267948966, complex3.arg(), 0.01);
      assertEquals((-0.8768726459227316), complex5.real(), 0.01);
      assertEquals(103314.57593438248, complex5.norm(), 0.01);
      assertEquals(321.4258482673453, complex5.abs(), 0.01);
      assertEquals((-0.8768726459227316), complex5.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(1.5735244015229315, complex5.arg(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(321.42465217955095, complex5.imag(), 0.01);
      assertEquals(321.42465217955095, complex5.getImaginary(), 0.01);
      assertEquals(0.782670308755482, complex7.real(), 0.01);
      assertEquals((-0.8125901590292763), complex7.arg(), 0.01);
      assertEquals(1.1382306961714956, complex7.abs(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.782670308755482, complex7.getReal(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(1.2955691177070476, complex7.norm(), 0.01);
      assertEquals((-0.8264359052580218), complex7.imag(), 0.01);
      assertEquals((-0.8264359052580218), complex7.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex7);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex4));
      assertTrue(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      
      Complex complex8 = Complex.ofCis(5.9666725849601654E-154);
      assertNotNull(complex8);
      assertEquals(5.9666725849601654E-154, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertEquals(5.9666725849601654E-154, complex8.imag(), 0.01);
      assertEquals(1.0, complex8.norm(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(5.9666725849601654E-154, complex8.arg(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(1.0, complex8.abs(), 0.01);
      assertEquals(1.0, complex8.real(), 0.01);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex2);
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex2));
      
      Complex complex9 = Complex.ZERO;
      assertNotNull(complex9);
      assertEquals(0.0, complex9.arg(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertEquals(0.0, complex9.abs(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.norm(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(0.0, complex9.imag(), 0.01);
      assertEquals(0.0, complex9.real(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex2);
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex8));
      assertTrue(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex6));
      assertTrue(complex9.equals((Object)complex4));
      
      Complex complex10 = complex1.add(complex4);
      assertNotNull(complex10);
      assertEquals(0.8768726459227316, complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-0.5014787629084853), complex0.arg(), 0.01);
      assertEquals(0.8768726459227316, complex0.getReal(), 0.01);
      assertEquals((-0.4807227504835482), complex0.imag(), 0.01);
      assertEquals((-0.4807227504835482), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(320.9439294290674, complex1.abs(), 0.01);
      assertEquals(103005.00583737019, complex1.norm(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(320.9439294290674, complex1.getImaginary(), 0.01);
      assertEquals(320.9439294290674, complex1.imag(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.arg(), 0.01);
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(320.9439294290674, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex10.arg(), 0.01);
      assertEquals(0.0, complex10.real(), 0.01);
      assertEquals(320.9439294290674, complex10.abs(), 0.01);
      assertEquals(103005.00583737019, complex10.norm(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(320.9439294290674, complex10.imag(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex2);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex4);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex8));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex6));
      assertTrue(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex5));
      assertTrue(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex4));
      
      Complex complex11 = complex10.sinh();
      assertNotNull(complex11);
      assertEquals(0.8768726459227316, complex0.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals((-0.5014787629084853), complex0.arg(), 0.01);
      assertEquals(0.8768726459227316, complex0.getReal(), 0.01);
      assertEquals((-0.4807227504835482), complex0.imag(), 0.01);
      assertEquals((-0.4807227504835482), complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(320.9439294290674, complex1.abs(), 0.01);
      assertEquals(103005.00583737019, complex1.norm(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(320.9439294290674, complex1.getImaginary(), 0.01);
      assertEquals(320.9439294290674, complex1.imag(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.arg(), 0.01);
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(320.9439294290674, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex10.arg(), 0.01);
      assertEquals(0.0, complex10.real(), 0.01);
      assertEquals(320.9439294290674, complex10.abs(), 0.01);
      assertEquals(103005.00583737019, complex10.norm(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(320.9439294290674, complex10.imag(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertEquals(0.4807227504835482, complex11.abs(), 0.01);
      assertEquals(1.5707963267948966, complex11.arg(), 0.01);
      assertEquals(0.23109436283246773, complex11.norm(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(0.4807227504835482, complex11.imag(), 0.01);
      assertFalse(complex11.isNaN());
      assertEquals(0.4807227504835482, complex11.getImaginary(), 0.01);
      assertEquals(0.0, complex11.real(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex11);
      assertNotSame(complex4, complex2);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex4);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex2);
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex1.equals((Object)complex10));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex5));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex9));
      assertTrue(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex8));
      assertTrue(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex5));
      assertTrue(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex6));
      assertTrue(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex5));
      assertTrue(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex1));
      assertFalse(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex7));
      assertFalse(complex11.equals((Object)complex5));
      assertFalse(complex11.equals((Object)complex2));
      
      boolean boolean1 = complex6.isNaN();
      assertFalse(boolean1);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.abs(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.real(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertTrue(complex6.isInfinite());
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex11);
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex11));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = complex6.isFinite();
      assertFalse(boolean2);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.abs(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.real(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertTrue(complex6.isInfinite());
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex11);
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex11));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Complex complex12 = Complex.I;
      assertNotNull(complex12);
      assertEquals(1.0, complex12.getImaginary(), 0.01);
      assertEquals(1.0, complex12.abs(), 0.01);
      assertEquals(1.0, complex12.norm(), 0.01);
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertEquals(1.0, complex12.imag(), 0.01);
      assertEquals(0.0, complex12.real(), 0.01);
      assertEquals(1.5707963267948966, complex12.arg(), 0.01);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex0);
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex0));
      
      double double0 = complex9.real();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, complex9.arg(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
      assertEquals(0.0, complex9.abs(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.norm(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(0.0, complex9.imag(), 0.01);
      assertEquals(0.0, complex9.real(), 0.01);
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex2);
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex12));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex8));
      assertTrue(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex11));
      assertTrue(complex9.equals((Object)complex4));
      
      Complex complex13 = Complex.I;
      assertNotNull(complex13);
      assertEquals(1.0, complex13.abs(), 0.01);
      assertEquals(0.0, complex13.real(), 0.01);
      assertEquals(1.5707963267948966, complex13.arg(), 0.01);
      assertEquals(1.0, complex13.norm(), 0.01);
      assertEquals(0.0, complex13.getReal(), 0.01);
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertEquals(1.0, complex13.imag(), 0.01);
      assertEquals(1.0, complex13.getImaginary(), 0.01);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex9);
      assertSame(complex13, complex12);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex2);
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex5));
      
      Complex complex14 = Complex.ofPolar(1710.0, (-3914.377496034));
      assertNotNull(complex14);
      assertEquals(1708.115640340123, complex14.getReal(), 0.01);
      assertEquals(2924100.0, complex14.norm(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(80.2555868799887, complex14.getImaginary(), 0.01);
      assertEquals(80.2555868799887, complex14.imag(), 0.01);
      assertEquals(1708.115640340123, complex14.real(), 0.01);
      assertEquals(1710.0, complex14.abs(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals(0.04695033888221527, complex14.arg(), 0.01);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex3);
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex3));
      
      Complex complex15 = complex6.pow(1.0);
      assertNotNull(complex15);
      assertEquals(0.0, complex15.imag(), 0.01);
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertTrue(complex15.isInfinite());
      assertFalse(complex15.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex15.getReal(), 0.01);
      assertEquals(0.0, complex15.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex15.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex15.abs(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex15.real(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex6.getReal(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.abs(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.real(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertTrue(complex6.isInfinite());
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex5);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex11);
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex12));
      assertTrue(complex15.equals((Object)complex6));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex7));
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex11));
      
      Complex complex16 = Complex.ofPolar(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      assertNotNull(complex16);
      assertFalse(complex16.isInfinite());
      assertEquals(Double.NaN, complex16.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex16.real(), 0.01);
      assertEquals(Double.NaN, complex16.imag(), 0.01);
      assertEquals(Double.NaN, complex16.getReal(), 0.01);
      assertEquals(Double.NaN, complex16.arg(), 0.01);
      assertEquals(Double.NaN, complex16.norm(), 0.01);
      assertEquals(Double.NaN, complex16.abs(), 0.01);
      assertTrue(complex16.isNaN());
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex11);
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex6));
      assertFalse(complex16.equals((Object)complex10));
      assertFalse(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex11));
      
      Complex complex17 = complex14.conj();
      assertNotNull(complex17);
      assertEquals(1708.115640340123, complex14.getReal(), 0.01);
      assertEquals(2924100.0, complex14.norm(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(80.2555868799887, complex14.getImaginary(), 0.01);
      assertEquals(80.2555868799887, complex14.imag(), 0.01);
      assertEquals(1708.115640340123, complex14.real(), 0.01);
      assertEquals(1710.0, complex14.abs(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals(0.04695033888221527, complex14.arg(), 0.01);
      assertEquals(1708.115640340123, complex17.real(), 0.01);
      assertEquals(1710.0, complex17.abs(), 0.01);
      assertEquals(1708.115640340123, complex17.getReal(), 0.01);
      assertFalse(complex17.isNaN());
      assertEquals((-80.2555868799887), complex17.getImaginary(), 0.01);
      assertEquals((-80.2555868799887), complex17.imag(), 0.01);
      assertEquals((-0.04695033888221527), complex17.arg(), 0.01);
      assertEquals(2924100.0, complex17.norm(), 0.01);
      assertFalse(complex17.isInfinite());
      assertNotSame(complex14, complex16);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex17);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex15);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex10);
      assertFalse(complex14.equals((Object)complex16));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex13));
      assertFalse(complex17.equals((Object)complex11));
      assertFalse(complex17.equals((Object)complex2));
      assertFalse(complex17.equals((Object)complex6));
      assertFalse(complex17.equals((Object)complex9));
      assertFalse(complex17.equals((Object)complex0));
      assertFalse(complex17.equals((Object)complex14));
      assertFalse(complex17.equals((Object)complex16));
      assertFalse(complex17.equals((Object)complex4));
      assertFalse(complex17.equals((Object)complex7));
      assertFalse(complex17.equals((Object)complex12));
      assertFalse(complex17.equals((Object)complex5));
      assertFalse(complex17.equals((Object)complex3));
      assertFalse(complex17.equals((Object)complex15));
      assertFalse(complex17.equals((Object)complex8));
      assertFalse(complex17.equals((Object)complex1));
      assertFalse(complex17.equals((Object)complex10));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      double double0 = (-1075.873);
      Complex complex0 = Complex.ofPolar((-1075.873), (-1075.873));
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      
      Complex complex1 = complex0.I.tanh();
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(1.5574077246549023, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5574077246549023, complex1.abs(), 0.01);
      assertEquals(2.42551882081476, complex1.norm(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.5574077246549023, complex1.imag(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.ONE.subtractFrom(4192.8595);
      assertNotNull(complex2);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(1.5574077246549023, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5574077246549023, complex1.abs(), 0.01);
      assertEquals(2.42551882081476, complex1.norm(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.5574077246549023, complex1.imag(), 0.01);
      assertEquals(4191.8595, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.arg(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(4191.8595, complex2.real(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.7571686067740247E7, complex2.norm(), 0.01);
      assertEquals(4191.8595, complex2.abs(), 0.01);
      assertEquals(-0.0, complex2.imag(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex2.I.multiply(1615.0);
      assertNotNull(complex3);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(1.5574077246549023, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5574077246549023, complex1.abs(), 0.01);
      assertEquals(2.42551882081476, complex1.norm(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.5574077246549023, complex1.imag(), 0.01);
      assertEquals(4191.8595, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.arg(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(4191.8595, complex2.real(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.7571686067740247E7, complex2.norm(), 0.01);
      assertEquals(4191.8595, complex2.abs(), 0.01);
      assertEquals(-0.0, complex2.imag(), 0.01);
      assertEquals(1615.0, complex3.abs(), 0.01);
      assertEquals(2608225.0, complex3.norm(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(1615.0, complex3.imag(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(1615.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(1.5707963267948966, complex3.arg(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      
      double double1 = complex0.norm();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertNotEquals(double1, double0, 0.01);
      
      Complex complex4 = complex1.subtractFrom(0.7071067811865476);
      assertNotNull(complex4);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(1.5574077246549023, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5574077246549023, complex1.abs(), 0.01);
      assertEquals(2.42551882081476, complex1.norm(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.5574077246549023, complex1.imag(), 0.01);
      assertEquals(2.92551882081476, complex4.norm(), 0.01);
      assertEquals(0.7071067811865476, complex4.getReal(), 0.01);
      assertEquals((-1.1445977310204478), complex4.arg(), 0.01);
      assertEquals(1.710414809575373, complex4.abs(), 0.01);
      assertEquals((-1.5574077246549023), complex4.getImaginary(), 0.01);
      assertEquals((-1.5574077246549023), complex4.imag(), 0.01);
      assertEquals(0.7071067811865476, complex4.real(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      
      Complex complex5 = complex3.cosh();
      assertNotNull(complex5);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertEquals(Double.NaN, complex0.imag(), 0.01);
      assertTrue(complex0.isNaN());
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(1.5574077246549023, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5574077246549023, complex1.abs(), 0.01);
      assertEquals(2.42551882081476, complex1.norm(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(1.5574077246549023, complex1.imag(), 0.01);
      assertEquals(4191.8595, complex2.getReal(), 0.01);
      assertEquals(-0.0, complex2.arg(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(4191.8595, complex2.real(), 0.01);
      assertEquals(-0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.7571686067740247E7, complex2.norm(), 0.01);
      assertEquals(4191.8595, complex2.abs(), 0.01);
      assertEquals(-0.0, complex2.imag(), 0.01);
      assertEquals(1615.0, complex3.abs(), 0.01);
      assertEquals(2608225.0, complex3.norm(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(1615.0, complex3.imag(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(1615.0, complex3.getImaginary(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(1.5707963267948966, complex3.arg(), 0.01);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.9755962295510242, complex5.abs(), 0.01);
      assertEquals(0.9755962295510242, complex5.real(), 0.01);
      assertEquals(0.0, complex5.arg(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.9517880031141748, complex5.norm(), 0.01);
      assertEquals(0.9755962295510242, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      
      String string0 = "Incorrect number of parts, expected only 2 using separator";
      // Undeclared exception!
      try { 
        Complex.parse("Incorrect number of parts, expected only 2 using separator");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Expected start delimiter '(' for input \"Incorrect number of parts, expected only 2 using separator\"
         //
         verifyException("org.apache.commons.numbers.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      
      Complex complex1 = complex0.ZERO.cosh();
      assertNotNull(complex1);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(1.0, complex1.norm(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(1.0, complex1.abs(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertTrue(complex1.equals((Object)complex0));
      
      Complex complex2 = Complex.I;
      assertNotNull(complex2);
      assertEquals(1.5707963267948966, complex2.arg(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex2.abs(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.0, complex2.norm(), 0.01);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex0.add(complex2);
      assertNotNull(complex3);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex2.arg(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex2.abs(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.0, complex2.norm(), 0.01);
      assertEquals(2.0, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(0.7853981633974483, complex3.arg(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(1.0, complex3.imag(), 0.01);
      assertEquals(1.0, complex3.real(), 0.01);
      assertEquals(1.4142135623730951, complex3.abs(), 0.01);
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      
      Complex complex4 = complex3.ZERO.subtractFromImaginary(0.0);
      assertNotNull(complex4);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex2.arg(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex2.abs(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.0, complex2.norm(), 0.01);
      assertEquals(2.0, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(0.7853981633974483, complex3.arg(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(1.0, complex3.imag(), 0.01);
      assertEquals(1.0, complex3.real(), 0.01);
      assertEquals(1.4142135623730951, complex3.abs(), 0.01);
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.abs(), 0.01);
      assertEquals(-0.0, complex4.real(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      
      boolean boolean0 = complex2.ZERO.isFinite();
      assertTrue(boolean0);
      assertEquals(1.5707963267948966, complex2.arg(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex2.abs(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.0, complex2.norm(), 0.01);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      
      complex3.hashCode();
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex2.arg(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex2.abs(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.0, complex2.norm(), 0.01);
      assertEquals(2.0, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(0.7853981633974483, complex3.arg(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(1.0, complex3.getReal(), 0.01);
      assertEquals(1.0, complex3.imag(), 0.01);
      assertEquals(1.0, complex3.real(), 0.01);
      assertEquals(1.4142135623730951, complex3.abs(), 0.01);
      assertEquals(1.0, complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertTrue(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      
      Complex complex5 = complex2.cos();
      assertNotNull(complex5);
      assertEquals(1.5707963267948966, complex2.arg(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex2.abs(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.0, complex2.norm(), 0.01);
      assertEquals(1.543080634815244, complex5.abs(), 0.01);
      assertEquals(-0.0, complex5.arg(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(-0.0, complex5.getImaginary(), 0.01);
      assertEquals(2.381097845541816, complex5.norm(), 0.01);
      assertEquals(-0.0, complex5.imag(), 0.01);
      assertEquals(1.543080634815244, complex5.getReal(), 0.01);
      assertEquals(1.543080634815244, complex5.real(), 0.01);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      
      Complex complex6 = complex2.atan();
      assertNotNull(complex6);
      assertEquals(1.5707963267948966, complex2.arg(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1.0, complex2.abs(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(1.0, complex2.norm(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(Double.POSITIVE_INFINITY, complex6.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.norm(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex6.abs(), 0.01);
      assertTrue(complex6.isInfinite());
      assertEquals(0.0, complex6.real(), 0.01);
      assertEquals(0.0, complex6.getReal(), 0.01);
      assertEquals(1.5707963267948966, complex6.arg(), 0.01);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.arg(), 0.01);
      
      Complex complex1 = Complex.ofPolar(0.0, 0.0);
      assertNotNull(complex1);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.proj();
      assertNotNull(complex2);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(1.0, complex2.norm(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(1.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.abs(), 0.01);
      assertNotSame(complex0, complex1);
      assertSame(complex0, complex2);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex0.asinh();
      assertNotNull(complex3);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.7768193998956958, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals(0.8813735870195429, complex3.getReal(), 0.01);
      assertEquals(0.8813735870195429, complex3.abs(), 0.01);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals(0.8813735870195429, complex3.real(), 0.01);
      assertFalse(complex3.isNaN());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      
      Complex complex4 = Complex.ofCartesian(0.0, 0.0);
      assertNotNull(complex4);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.arg(), 0.01);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complex4.pow(1.7976931348623157E308);
      assertNotNull(complex5);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.norm(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals(0.0, complex4.abs(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.arg(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.norm(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.arg(), 0.01);
      assertEquals(0.0, complex5.abs(), 0.01);
      assertEquals(0.0, complex5.real(), 0.01);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertTrue(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertTrue(complex5.equals((Object)complex1));
      assertTrue(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      
      Complex complex6 = Complex.ofPolar(215.17888503885365, 215.17888503885365);
      assertNotNull(complex6);
      assertEquals(215.1349347294689, complex6.getImaginary(), 0.01);
      assertEquals(215.1349347294689, complex6.imag(), 0.01);
      assertEquals(4.348841858626636, complex6.real(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(46301.95256656419, complex6.norm(), 0.01);
      assertEquals(215.17888503885365, complex6.abs(), 0.01);
      assertEquals(1.55058459474771, complex6.arg(), 0.01);
      assertEquals(4.348841858626636, complex6.getReal(), 0.01);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      
      Complex complex7 = complex6.add(complex1);
      assertNotNull(complex7);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(215.1349347294689, complex6.getImaginary(), 0.01);
      assertEquals(215.1349347294689, complex6.imag(), 0.01);
      assertEquals(4.348841858626636, complex6.real(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(46301.95256656419, complex6.norm(), 0.01);
      assertEquals(215.17888503885365, complex6.abs(), 0.01);
      assertEquals(1.55058459474771, complex6.arg(), 0.01);
      assertEquals(4.348841858626636, complex6.getReal(), 0.01);
      assertEquals(215.1349347294689, complex7.imag(), 0.01);
      assertEquals(215.1349347294689, complex7.getImaginary(), 0.01);
      assertEquals(1.55058459474771, complex7.arg(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(46301.95256656419, complex7.norm(), 0.01);
      assertEquals(4.348841858626636, complex7.real(), 0.01);
      assertEquals(215.17888503885365, complex7.abs(), 0.01);
      assertEquals(4.348841858626636, complex7.getReal(), 0.01);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex3));
      assertTrue(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      
      Complex complex8 = complex7.ZERO.subtractFromImaginary(1.7976931348623157E308);
      assertNotNull(complex8);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(215.1349347294689, complex6.getImaginary(), 0.01);
      assertEquals(215.1349347294689, complex6.imag(), 0.01);
      assertEquals(4.348841858626636, complex6.real(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(46301.95256656419, complex6.norm(), 0.01);
      assertEquals(215.17888503885365, complex6.abs(), 0.01);
      assertEquals(1.55058459474771, complex6.arg(), 0.01);
      assertEquals(4.348841858626636, complex6.getReal(), 0.01);
      assertEquals(215.1349347294689, complex7.imag(), 0.01);
      assertEquals(215.1349347294689, complex7.getImaginary(), 0.01);
      assertEquals(1.55058459474771, complex7.arg(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(46301.95256656419, complex7.norm(), 0.01);
      assertEquals(4.348841858626636, complex7.real(), 0.01);
      assertEquals(215.17888503885365, complex7.abs(), 0.01);
      assertEquals(4.348841858626636, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex8.real(), 0.01);
      assertEquals(1.7976931348623157E308, complex8.abs(), 0.01);
      assertEquals(1.7976931348623157E308, complex8.getImaginary(), 0.01);
      assertEquals(-0.0, complex8.getReal(), 0.01);
      assertEquals(1.7976931348623157E308, complex8.imag(), 0.01);
      assertEquals(1.5707963267948966, complex8.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex8.norm(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertTrue(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex3));
      assertTrue(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex7));
      
      Complex complex9 = complex2.atan();
      assertNotNull(complex9);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(1.0, complex2.norm(), 0.01);
      assertEquals(1.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(1.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(1.0, complex2.abs(), 0.01);
      assertEquals(0.6168502750680849, complex9.norm(), 0.01);
      assertEquals(0.0, complex9.imag(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex9.abs(), 0.01);
      assertEquals(0.7853981633974483, complex9.real(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(0.0, complex9.arg(), 0.01);
      assertEquals(0.7853981633974483, complex9.getReal(), 0.01);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex8));
      
      Complex complex10 = complex8.asin();
      assertNotNull(complex10);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(215.1349347294689, complex6.getImaginary(), 0.01);
      assertEquals(215.1349347294689, complex6.imag(), 0.01);
      assertEquals(4.348841858626636, complex6.real(), 0.01);
      assertFalse(complex6.isInfinite());
      assertFalse(complex6.isNaN());
      assertEquals(46301.95256656419, complex6.norm(), 0.01);
      assertEquals(215.17888503885365, complex6.abs(), 0.01);
      assertEquals(1.55058459474771, complex6.arg(), 0.01);
      assertEquals(4.348841858626636, complex6.getReal(), 0.01);
      assertEquals(215.1349347294689, complex7.imag(), 0.01);
      assertEquals(215.1349347294689, complex7.getImaginary(), 0.01);
      assertEquals(1.55058459474771, complex7.arg(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(46301.95256656419, complex7.norm(), 0.01);
      assertEquals(4.348841858626636, complex7.real(), 0.01);
      assertEquals(215.17888503885365, complex7.abs(), 0.01);
      assertEquals(4.348841858626636, complex7.getReal(), 0.01);
      assertEquals(-0.0, complex8.real(), 0.01);
      assertEquals(1.7976931348623157E308, complex8.abs(), 0.01);
      assertEquals(1.7976931348623157E308, complex8.getImaginary(), 0.01);
      assertEquals(-0.0, complex8.getReal(), 0.01);
      assertEquals(1.7976931348623157E308, complex8.imag(), 0.01);
      assertEquals(1.5707963267948966, complex8.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex8.norm(), 0.01);
      assertFalse(complex8.isInfinite());
      assertFalse(complex8.isNaN());
      assertEquals(710.4758600739439, complex10.abs(), 0.01);
      assertEquals(504775.9477478103, complex10.norm(), 0.01);
      assertEquals(-0.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(710.4758600739439, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(710.4758600739439, complex10.imag(), 0.01);
      assertEquals(1.5707963267948966, complex10.arg(), 0.01);
      assertEquals(-0.0, complex10.real(), 0.01);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex4);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex1);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex6));
      assertTrue(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex1.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex9));
      assertTrue(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex3));
      assertTrue(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex8));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      
      Complex complex1 = complex0.multiply(0.0);
      assertNotNull(complex1);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex1.abs(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.norm(), 0.01);
      assertFalse(complex1.isInfinite());
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex0.atan();
      assertNotNull(complex2);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex2.abs(), 0.01);
      assertEquals(0.7853981633974483, complex2.real(), 0.01);
      assertEquals(0.6168502750680849, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.7853981633974483, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex2.conj();
      assertNotNull(complex3);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex2.abs(), 0.01);
      assertEquals(0.7853981633974483, complex2.real(), 0.01);
      assertEquals(0.6168502750680849, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.7853981633974483, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(-0.0, complex3.arg(), 0.01);
      assertEquals(0.7853981633974483, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex3.real(), 0.01);
      assertEquals(-0.0, complex3.imag(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.7853981633974483, complex3.abs(), 0.01);
      assertEquals(0.6168502750680849, complex3.norm(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = complex3.ONE.proj();
      assertNotNull(complex4);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex2.abs(), 0.01);
      assertEquals(0.7853981633974483, complex2.real(), 0.01);
      assertEquals(0.6168502750680849, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.7853981633974483, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(-0.0, complex3.arg(), 0.01);
      assertEquals(0.7853981633974483, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex3.real(), 0.01);
      assertEquals(-0.0, complex3.imag(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.7853981633974483, complex3.abs(), 0.01);
      assertEquals(0.6168502750680849, complex3.norm(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(1.0, complex4.norm(), 0.01);
      assertEquals(1.0, complex4.abs(), 0.01);
      assertEquals(1.0, complex4.real(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.arg(), 0.01);
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complex4.ZERO.proj();
      assertNotNull(complex5);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex2.abs(), 0.01);
      assertEquals(0.7853981633974483, complex2.real(), 0.01);
      assertEquals(0.6168502750680849, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.7853981633974483, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(-0.0, complex3.arg(), 0.01);
      assertEquals(0.7853981633974483, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex3.real(), 0.01);
      assertEquals(-0.0, complex3.imag(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.7853981633974483, complex3.abs(), 0.01);
      assertEquals(0.6168502750680849, complex3.norm(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(1.0, complex4.norm(), 0.01);
      assertEquals(1.0, complex4.abs(), 0.01);
      assertEquals(1.0, complex4.real(), 0.01);
      assertFalse(complex4.isNaN());
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.arg(), 0.01);
      assertEquals(1.0, complex4.getReal(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(0.0, complex5.norm(), 0.01);
      assertEquals(0.0, complex5.abs(), 0.01);
      assertEquals(0.0, complex5.arg(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(0.0, complex5.real(), 0.01);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex4);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertTrue(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      
      Complex complex6 = complex3.atanh();
      assertNotNull(complex6);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex2.abs(), 0.01);
      assertEquals(0.7853981633974483, complex2.real(), 0.01);
      assertEquals(0.6168502750680849, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.7853981633974483, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(-0.0, complex3.arg(), 0.01);
      assertEquals(0.7853981633974483, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex3.real(), 0.01);
      assertEquals(-0.0, complex3.imag(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.7853981633974483, complex3.abs(), 0.01);
      assertEquals(0.6168502750680849, complex3.norm(), 0.01);
      assertEquals(-0.0, complex6.arg(), 0.01);
      assertEquals(-0.0, complex6.imag(), 0.01);
      assertEquals(1.0593061708232432, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(1.1221295635442021, complex6.norm(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(1.0593061708232432, complex6.abs(), 0.01);
      assertEquals(1.0593061708232432, complex6.real(), 0.01);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      
      double double0 = complex6.real();
      assertEquals(1.0593061708232432, double0, 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex2.abs(), 0.01);
      assertEquals(0.7853981633974483, complex2.real(), 0.01);
      assertEquals(0.6168502750680849, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.7853981633974483, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(-0.0, complex3.arg(), 0.01);
      assertEquals(0.7853981633974483, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex3.real(), 0.01);
      assertEquals(-0.0, complex3.imag(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.7853981633974483, complex3.abs(), 0.01);
      assertEquals(0.6168502750680849, complex3.norm(), 0.01);
      assertEquals(-0.0, complex6.arg(), 0.01);
      assertEquals(-0.0, complex6.imag(), 0.01);
      assertEquals(1.0593061708232432, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(1.1221295635442021, complex6.norm(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(1.0593061708232432, complex6.abs(), 0.01);
      assertEquals(1.0593061708232432, complex6.real(), 0.01);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      
      double double1 = complex6.abs();
      assertEquals(1.0593061708232432, double1, 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex2.abs(), 0.01);
      assertEquals(0.7853981633974483, complex2.real(), 0.01);
      assertEquals(0.6168502750680849, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.7853981633974483, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(-0.0, complex3.arg(), 0.01);
      assertEquals(0.7853981633974483, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex3.real(), 0.01);
      assertEquals(-0.0, complex3.imag(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.7853981633974483, complex3.abs(), 0.01);
      assertEquals(0.6168502750680849, complex3.norm(), 0.01);
      assertEquals(-0.0, complex6.arg(), 0.01);
      assertEquals(-0.0, complex6.imag(), 0.01);
      assertEquals(1.0593061708232432, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(-0.0, complex6.getImaginary(), 0.01);
      assertEquals(1.1221295635442021, complex6.norm(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(1.0593061708232432, complex6.abs(), 0.01);
      assertEquals(1.0593061708232432, complex6.real(), 0.01);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex1));
      assertEquals(double1, double0, 0.01);
      
      boolean boolean0 = complex3.isInfinite();
      assertFalse(boolean0);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex2.abs(), 0.01);
      assertEquals(0.7853981633974483, complex2.real(), 0.01);
      assertEquals(0.6168502750680849, complex2.norm(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.7853981633974483, complex2.getReal(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(-0.0, complex3.arg(), 0.01);
      assertEquals(0.7853981633974483, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex3.real(), 0.01);
      assertEquals(-0.0, complex3.imag(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(0.7853981633974483, complex3.abs(), 0.01);
      assertEquals(0.6168502750680849, complex3.norm(), 0.01);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex6));
      
      Complex complex7 = complex0.exp();
      assertNotNull(complex7);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(7.3890560989306495, complex7.norm(), 0.01);
      assertEquals(2.718281828459045, complex7.abs(), 0.01);
      assertEquals(2.718281828459045, complex7.real(), 0.01);
      assertEquals(0.0, complex7.arg(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(2.718281828459045, complex7.getReal(), 0.01);
      assertSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex5);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex5);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex5));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.ofCartesian(Double.NaN, 0.0);
      assertNotNull(complex0);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.asin();
      assertNotNull(complex1);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.norm(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.abs(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertEquals(Double.NaN, complex1.real(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.ONE.log();
      assertNotNull(complex2);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.norm(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.abs(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertEquals(Double.NaN, complex1.real(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex0.ZERO.negate();
      assertNotNull(complex3);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-3.141592653589793), complex3.arg(), 0.01);
      assertEquals(-0.0, complex3.imag(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals(-0.0, complex3.getReal(), 0.01);
      assertEquals(0.0, complex3.abs(), 0.01);
      assertEquals(-0.0, complex3.real(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      
      Complex complex4 = complex1.I.add(complex2);
      assertNotNull(complex4);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.norm(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.abs(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertEquals(Double.NaN, complex1.real(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(1.0, complex4.imag(), 0.01);
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      assertEquals(1.0, complex4.abs(), 0.01);
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals(1.5707963267948966, complex4.arg(), 0.01);
      assertEquals(1.0, complex4.norm(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex4);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      
      Complex complex5 = complex0.ONE.sin();
      assertNotNull(complex5);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex5.arg(), 0.01);
      assertEquals(0.7080734182735712, complex5.norm(), 0.01);
      assertEquals(0.8414709848078965, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.8414709848078965, complex5.real(), 0.01);
      assertEquals(0.8414709848078965, complex5.abs(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      
      Complex complex6 = Complex.ofCis(0.0);
      assertNotNull(complex6);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertEquals(1.0, complex6.real(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(1.0, complex6.norm(), 0.01);
      assertEquals(1.0, complex6.abs(), 0.01);
      assertFalse(complex6.isInfinite());
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      
      Complex complex7 = complex6.ZERO.subtractFrom(Double.NaN);
      assertNotNull(complex7);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertEquals(1.0, complex6.real(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(1.0, complex6.norm(), 0.01);
      assertEquals(1.0, complex6.abs(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex7.abs(), 0.01);
      assertEquals(-0.0, complex7.imag(), 0.01);
      assertEquals(Double.NaN, complex7.real(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex7.arg(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertTrue(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex7.norm(), 0.01);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex7);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex5);
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex5));
      
      Complex complex8 = complex5.I.divideImaginary(Double.NaN);
      assertNotNull(complex8);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex5.arg(), 0.01);
      assertEquals(0.7080734182735712, complex5.norm(), 0.01);
      assertEquals(0.8414709848078965, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.8414709848078965, complex5.real(), 0.01);
      assertEquals(0.8414709848078965, complex5.abs(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertEquals(Double.NaN, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.norm(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.abs(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex5);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex7));
      assertTrue(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex5));
      
      Complex complex9 = complex1.sin();
      assertNotNull(complex9);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.norm(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.abs(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertEquals(Double.NaN, complex1.real(), 0.01);
      assertEquals(Double.NaN, complex9.arg(), 0.01);
      assertEquals(Double.NaN, complex9.imag(), 0.01);
      assertEquals(Double.NaN, complex9.real(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(Double.NaN, complex9.norm(), 0.01);
      assertEquals(Double.NaN, complex9.abs(), 0.01);
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertTrue(complex9.equals((Object)complex8));
      
      Complex complex10 = Complex.ofPolar(2498.0, 0.0);
      assertNotNull(complex10);
      assertEquals(2498.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(6240004.0, complex10.norm(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.arg(), 0.01);
      assertEquals(2498.0, complex10.abs(), 0.01);
      assertEquals(2498.0, complex10.real(), 0.01);
      assertEquals(0.0, complex10.imag(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex8);
      assertFalse(complex10.equals((Object)complex9));
      assertFalse(complex10.equals((Object)complex7));
      assertFalse(complex10.equals((Object)complex3));
      assertFalse(complex10.equals((Object)complex6));
      assertFalse(complex10.equals((Object)complex4));
      assertFalse(complex10.equals((Object)complex2));
      assertFalse(complex10.equals((Object)complex1));
      assertFalse(complex10.equals((Object)complex0));
      assertFalse(complex10.equals((Object)complex5));
      assertFalse(complex10.equals((Object)complex8));
      
      Complex complex11 = complex9.sqrt();
      assertNotNull(complex11);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.norm(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.abs(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertEquals(Double.NaN, complex1.real(), 0.01);
      assertEquals(Double.NaN, complex9.arg(), 0.01);
      assertEquals(Double.NaN, complex9.imag(), 0.01);
      assertEquals(Double.NaN, complex9.real(), 0.01);
      assertEquals(Double.NaN, complex9.getImaginary(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(Double.NaN, complex9.norm(), 0.01);
      assertEquals(Double.NaN, complex9.abs(), 0.01);
      assertTrue(complex9.isNaN());
      assertEquals(Double.NaN, complex9.getReal(), 0.01);
      assertTrue(complex11.isNaN());
      assertEquals(Double.NaN, complex11.imag(), 0.01);
      assertEquals(Double.NaN, complex11.getImaginary(), 0.01);
      assertFalse(complex11.isInfinite());
      assertEquals(Double.NaN, complex11.abs(), 0.01);
      assertEquals(Double.NaN, complex11.real(), 0.01);
      assertEquals(Double.NaN, complex11.norm(), 0.01);
      assertEquals(Double.NaN, complex11.getReal(), 0.01);
      assertEquals(Double.NaN, complex11.arg(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex10);
      assertSame(complex1, complex11);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex10);
      assertSame(complex11, complex1);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex9);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex10));
      assertTrue(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertTrue(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex10));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex5));
      assertFalse(complex9.equals((Object)complex7));
      assertTrue(complex9.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex7));
      assertTrue(complex11.equals((Object)complex9));
      assertFalse(complex11.equals((Object)complex3));
      assertFalse(complex11.equals((Object)complex4));
      assertFalse(complex11.equals((Object)complex5));
      assertTrue(complex11.equals((Object)complex8));
      assertFalse(complex11.equals((Object)complex6));
      assertFalse(complex11.equals((Object)complex10));
      assertFalse(complex11.equals((Object)complex0));
      assertFalse(complex11.equals((Object)complex2));
      
      List<Complex> list0 = complex8.nthRoot(1166);
      assertTrue(list0.contains(complex1));
      assertFalse(list0.contains(complex2));
      assertNotNull(list0);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex5.arg(), 0.01);
      assertEquals(0.7080734182735712, complex5.norm(), 0.01);
      assertEquals(0.8414709848078965, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.8414709848078965, complex5.real(), 0.01);
      assertEquals(0.8414709848078965, complex5.abs(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(Double.NaN, complex8.arg(), 0.01);
      assertEquals(Double.NaN, complex8.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex8.imag(), 0.01);
      assertEquals(Double.NaN, complex8.real(), 0.01);
      assertEquals(Double.NaN, complex8.norm(), 0.01);
      assertEquals(Double.NaN, complex8.getReal(), 0.01);
      assertTrue(complex8.isNaN());
      assertEquals(Double.NaN, complex8.abs(), 0.01);
      assertEquals(1166, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex7);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex5);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex7));
      assertTrue(complex8.equals((Object)complex1));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex10));
      assertTrue(complex8.equals((Object)complex9));
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex3));
      assertTrue(complex8.equals((Object)complex11));
      assertFalse(complex8.equals((Object)complex5));
      
      boolean boolean0 = complex0.isInfinite();
      assertFalse(boolean0);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      
      boolean boolean1 = complex5.isNaN();
      assertFalse(boolean1);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.0, complex5.arg(), 0.01);
      assertEquals(0.7080734182735712, complex5.norm(), 0.01);
      assertEquals(0.8414709848078965, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.8414709848078965, complex5.real(), 0.01);
      assertEquals(0.8414709848078965, complex5.abs(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex7);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex7));
      assertTrue(boolean1 == boolean0);
      
      Complex complex12 = complex4.log();
      assertNotNull(complex12);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.norm(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.abs(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertEquals(Double.NaN, complex1.real(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(1.0, complex4.imag(), 0.01);
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      assertEquals(1.0, complex4.abs(), 0.01);
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals(1.5707963267948966, complex4.arg(), 0.01);
      assertEquals(1.0, complex4.norm(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(1.5707963267948966, complex12.getImaginary(), 0.01);
      assertEquals(0.0, complex12.real(), 0.01);
      assertEquals(1.5707963267948966, complex12.imag(), 0.01);
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertEquals(2.4674011002723395, complex12.norm(), 0.01);
      assertEquals(1.5707963267948966, complex12.arg(), 0.01);
      assertEquals(1.5707963267948966, complex12.abs(), 0.01);
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex10);
      assertSame(complex1, complex11);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex4);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex4);
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex10));
      assertTrue(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex4));
      
      Complex complex13 = complex5.pow(complex12);
      assertNotNull(complex13);
      assertEquals((-0.26781582848021634), complex13.getImaginary(), 0.01);
      assertEquals(1.0, complex13.abs(), 0.01);
      assertEquals(0.9634701251286701, complex13.getReal(), 0.01);
      assertEquals((-0.26781582848021634), complex13.imag(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals(0.9999999999999999, complex13.norm(), 0.01);
      assertEquals(0.9634701251286701, complex13.real(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals((-0.2711253306305276), complex13.arg(), 0.01);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(Double.NaN, complex1.norm(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.abs(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertEquals(Double.NaN, complex1.real(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(1.0, complex4.imag(), 0.01);
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      assertEquals(1.0, complex4.abs(), 0.01);
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals(1.5707963267948966, complex4.arg(), 0.01);
      assertEquals(1.0, complex4.norm(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex5.arg(), 0.01);
      assertEquals(0.7080734182735712, complex5.norm(), 0.01);
      assertEquals(0.8414709848078965, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.8414709848078965, complex5.real(), 0.01);
      assertEquals(0.8414709848078965, complex5.abs(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(1.5707963267948966, complex12.getImaginary(), 0.01);
      assertEquals(0.0, complex12.real(), 0.01);
      assertEquals(1.5707963267948966, complex12.imag(), 0.01);
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertEquals(2.4674011002723395, complex12.norm(), 0.01);
      assertEquals(1.5707963267948966, complex12.arg(), 0.01);
      assertEquals(1.5707963267948966, complex12.abs(), 0.01);
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex10);
      assertSame(complex1, complex11);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex4);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex13);
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex10));
      assertTrue(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex4));
      
      Complex complex14 = complex13.sin();
      assertNotNull(complex14);
      assertEquals((-0.26781582848021634), complex13.getImaginary(), 0.01);
      assertEquals(1.0, complex13.abs(), 0.01);
      assertEquals(0.9634701251286701, complex13.getReal(), 0.01);
      assertEquals((-0.26781582848021634), complex13.imag(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals(0.9999999999999999, complex13.norm(), 0.01);
      assertEquals(0.9634701251286701, complex13.real(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals((-0.2711253306305276), complex13.arg(), 0.01);
      assertEquals(Double.NaN, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(Double.NaN, complex0.real(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex0.norm(), 0.01);
      assertEquals(Double.NaN, complex0.arg(), 0.01);
      assertEquals(Double.NaN, complex0.getReal(), 0.01);
      assertTrue(complex0.isNaN());
      assertFalse(complex0.isInfinite());
      assertEquals(0.8508028471552034, complex14.getReal(), 0.01);
      assertFalse(complex14.isNaN());
      assertFalse(complex14.isInfinite());
      assertEquals(0.8647473671818935, complex14.abs(), 0.01);
      assertEquals((-0.15466908004063426), complex14.getImaginary(), 0.01);
      assertEquals((-0.17982807472479445), complex14.arg(), 0.01);
      assertEquals((-0.15466908004063426), complex14.imag(), 0.01);
      assertEquals(0.7477880090480165, complex14.norm(), 0.01);
      assertEquals(0.8508028471552034, complex14.real(), 0.01);
      assertEquals(Double.NaN, complex1.norm(), 0.01);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex1.abs(), 0.01);
      assertTrue(complex1.isNaN());
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertEquals(Double.NaN, complex1.real(), 0.01);
      assertEquals(0.0, complex2.norm(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.abs(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      assertEquals(1.0, complex4.imag(), 0.01);
      assertEquals(1.0, complex4.getImaginary(), 0.01);
      assertEquals(1.0, complex4.abs(), 0.01);
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals(1.5707963267948966, complex4.arg(), 0.01);
      assertEquals(1.0, complex4.norm(), 0.01);
      assertFalse(complex4.isInfinite());
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex5.arg(), 0.01);
      assertEquals(0.7080734182735712, complex5.norm(), 0.01);
      assertEquals(0.8414709848078965, complex5.getReal(), 0.01);
      assertFalse(complex5.isNaN());
      assertFalse(complex5.isInfinite());
      assertEquals(0.8414709848078965, complex5.real(), 0.01);
      assertEquals(0.8414709848078965, complex5.abs(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(1.5707963267948966, complex12.getImaginary(), 0.01);
      assertEquals(0.0, complex12.real(), 0.01);
      assertEquals(1.5707963267948966, complex12.imag(), 0.01);
      assertEquals(0.0, complex12.getReal(), 0.01);
      assertEquals(2.4674011002723395, complex12.norm(), 0.01);
      assertEquals(1.5707963267948966, complex12.arg(), 0.01);
      assertEquals(1.5707963267948966, complex12.abs(), 0.01);
      assertFalse(complex12.isInfinite());
      assertFalse(complex12.isNaN());
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex4);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex1);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex6);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex9);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex10);
      assertSame(complex1, complex11);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex5);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex4);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex9);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex13);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex14);
      assertNotSame(complex4, complex8);
      assertNotSame(complex4, complex12);
      assertNotSame(complex4, complex10);
      assertNotSame(complex4, complex11);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex7);
      assertNotSame(complex12, complex14);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex13);
      assertFalse(complex13.equals((Object)complex8));
      assertFalse(complex13.equals((Object)complex7));
      assertFalse(complex13.equals((Object)complex2));
      assertFalse(complex13.equals((Object)complex11));
      assertFalse(complex13.equals((Object)complex10));
      assertFalse(complex13.equals((Object)complex6));
      assertFalse(complex13.equals((Object)complex1));
      assertFalse(complex13.equals((Object)complex5));
      assertFalse(complex13.equals((Object)complex3));
      assertFalse(complex13.equals((Object)complex12));
      assertFalse(complex13.equals((Object)complex0));
      assertFalse(complex13.equals((Object)complex9));
      assertFalse(complex13.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex10));
      assertFalse(complex0.equals((Object)complex9));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex11));
      assertFalse(complex0.equals((Object)complex8));
      assertFalse(complex0.equals((Object)complex12));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex7));
      assertFalse(complex0.equals((Object)complex13));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex5));
      assertFalse(complex14.equals((Object)complex6));
      assertFalse(complex14.equals((Object)complex8));
      assertFalse(complex14.equals((Object)complex4));
      assertFalse(complex14.equals((Object)complex12));
      assertFalse(complex14.equals((Object)complex7));
      assertFalse(complex14.equals((Object)complex0));
      assertFalse(complex14.equals((Object)complex2));
      assertFalse(complex14.equals((Object)complex10));
      assertFalse(complex14.equals((Object)complex13));
      assertFalse(complex14.equals((Object)complex11));
      assertFalse(complex14.equals((Object)complex3));
      assertFalse(complex14.equals((Object)complex1));
      assertFalse(complex14.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex13));
      assertFalse(complex1.equals((Object)complex10));
      assertTrue(complex1.equals((Object)complex9));
      assertFalse(complex1.equals((Object)complex4));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex12));
      assertFalse(complex1.equals((Object)complex5));
      assertTrue(complex1.equals((Object)complex8));
      assertFalse(complex1.equals((Object)complex7));
      assertFalse(complex1.equals((Object)complex6));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex9));
      assertFalse(complex2.equals((Object)complex13));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex5));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex6));
      assertFalse(complex2.equals((Object)complex7));
      assertFalse(complex2.equals((Object)complex8));
      assertFalse(complex2.equals((Object)complex10));
      assertFalse(complex2.equals((Object)complex12));
      assertFalse(complex2.equals((Object)complex11));
      assertFalse(complex2.equals((Object)complex4));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex9));
      assertFalse(complex4.equals((Object)complex7));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex13));
      assertFalse(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex8));
      assertFalse(complex4.equals((Object)complex12));
      assertFalse(complex4.equals((Object)complex10));
      assertFalse(complex4.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex10));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex8));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex11));
      assertFalse(complex5.equals((Object)complex13));
      assertFalse(complex5.equals((Object)complex9));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex12));
      assertFalse(complex5.equals((Object)complex6));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex0));
      assertFalse(complex12.equals((Object)complex9));
      assertFalse(complex12.equals((Object)complex10));
      assertFalse(complex12.equals((Object)complex4));
      assertFalse(complex12.equals((Object)complex8));
      assertFalse(complex12.equals((Object)complex11));
      assertFalse(complex12.equals((Object)complex3));
      assertFalse(complex12.equals((Object)complex7));
      assertFalse(complex12.equals((Object)complex2));
      assertFalse(complex12.equals((Object)complex6));
      assertFalse(complex12.equals((Object)complex5));
      assertFalse(complex12.equals((Object)complex1));
      assertFalse(complex12.equals((Object)complex13));
      
      Complex complex15 = complex7.exp();
      assertNotNull(complex15);
      assertEquals(-0.0, complex15.getImaginary(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(Double.NaN, complex15.arg(), 0.01);
      assertEquals(Double.NaN, complex15.norm(), 0.01);
      assertEquals(Double.NaN, complex15.abs(), 0.01);
      assertEquals(-0.0, complex15.imag(), 0.01);
      assertTrue(complex15.isNaN());
      assertEquals(Double.NaN, complex15.getReal(), 0.01);
      assertEquals(Double.NaN, complex15.real(), 0.01);
      assertEquals(0.0, complex6.imag(), 0.01);
      assertEquals(0.0, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertEquals(1.0, complex6.real(), 0.01);
      assertEquals(0.0, complex6.arg(), 0.01);
      assertEquals(1.0, complex6.norm(), 0.01);
      assertEquals(1.0, complex6.abs(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex7.abs(), 0.01);
      assertEquals(-0.0, complex7.imag(), 0.01);
      assertEquals(Double.NaN, complex7.real(), 0.01);
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex7.arg(), 0.01);
      assertEquals(Double.NaN, complex7.getReal(), 0.01);
      assertTrue(complex7.isNaN());
      assertFalse(complex7.isInfinite());
      assertEquals(Double.NaN, complex7.norm(), 0.01);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex10);
      assertSame(complex15, complex7);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex6);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex15);
      assertNotSame(complex7, complex10);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex9);
      assertNotSame(complex7, complex13);
      assertNotSame(complex7, complex14);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex11);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex8);
      assertNotSame(complex7, complex12);
      assertSame(complex7, complex15);
      assertFalse(complex15.equals((Object)complex5));
      assertFalse(complex15.equals((Object)complex14));
      assertFalse(complex15.equals((Object)complex8));
      assertFalse(complex15.equals((Object)complex11));
      assertFalse(complex15.equals((Object)complex12));
      assertFalse(complex15.equals((Object)complex4));
      assertFalse(complex15.equals((Object)complex10));
      assertFalse(complex15.equals((Object)complex1));
      assertFalse(complex15.equals((Object)complex9));
      assertFalse(complex15.equals((Object)complex2));
      assertFalse(complex15.equals((Object)complex0));
      assertFalse(complex15.equals((Object)complex13));
      assertFalse(complex15.equals((Object)complex3));
      assertFalse(complex15.equals((Object)complex6));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex14));
      assertFalse(complex6.equals((Object)complex12));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex7));
      assertFalse(complex6.equals((Object)complex10));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex13));
      assertFalse(complex6.equals((Object)complex8));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex9));
      assertFalse(complex6.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex10));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex9));
      assertFalse(complex7.equals((Object)complex13));
      assertFalse(complex7.equals((Object)complex14));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex6));
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex11));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex8));
      assertFalse(complex7.equals((Object)complex12));
      
      Complex complex16 = Complex.ofCartesian(0.0, 0.0);
      assertNotNull(complex16);
      assertEquals(0.0, complex16.arg(), 0.01);
      assertEquals(0.0, complex16.imag(), 0.01);
      assertEquals(0.0, complex16.real(), 0.01);
      assertFalse(complex16.isNaN());
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertEquals(0.0, complex16.getReal(), 0.01);
      assertFalse(complex16.isInfinite());
      assertEquals(0.0, complex16.norm(), 0.01);
      assertEquals(0.0, complex16.abs(), 0.01);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex10);
      assertFalse(complex16.equals((Object)complex11));
      assertFalse(complex16.equals((Object)complex3));
      assertFalse(complex16.equals((Object)complex13));
      assertFalse(complex16.equals((Object)complex1));
      assertFalse(complex16.equals((Object)complex8));
      assertFalse(complex16.equals((Object)complex6));
      assertTrue(complex16.equals((Object)complex2));
      assertFalse(complex16.equals((Object)complex7));
      assertFalse(complex16.equals((Object)complex0));
      assertFalse(complex16.equals((Object)complex14));
      assertFalse(complex16.equals((Object)complex15));
      assertFalse(complex16.equals((Object)complex4));
      assertFalse(complex16.equals((Object)complex5));
      assertFalse(complex16.equals((Object)complex12));
      assertFalse(complex16.equals((Object)complex9));
      assertFalse(complex16.equals((Object)complex10));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = Complex.I;
      assertNotNull(complex0);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.asin();
      assertNotNull(complex1);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.8813735870195429, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.8813735870195429, complex1.imag(), 0.01);
      assertEquals(0.8813735870195429, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.7768193998956958, complex1.norm(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      
      Complex complex2 = complex0.ZERO.addImaginary(1274.9635);
      assertNotNull(complex2);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1274.9635, complex2.abs(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1625531.9263322502, complex2.norm(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(1274.9635, complex2.imag(), 0.01);
      assertEquals(1.5707963267948966, complex2.arg(), 0.01);
      assertEquals(1274.9635, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      
      Complex complex3 = complex0.I.exp();
      assertNotNull(complex3);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(1.0, complex3.abs(), 0.01);
      assertEquals(1.0, complex3.arg(), 0.01);
      assertEquals(0.5403023058681398, complex3.real(), 0.01);
      assertEquals(0.5403023058681398, complex3.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex3.imag(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      
      Complex complex4 = complex0.I.divide(complex2);
      assertNotNull(complex4);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1274.9635, complex2.abs(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1625531.9263322502, complex2.norm(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(1274.9635, complex2.imag(), 0.01);
      assertEquals(1.5707963267948966, complex2.arg(), 0.01);
      assertEquals(1274.9635, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(7.843361790357135E-4, complex4.real(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertFalse(complex4.isNaN());
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      assertEquals(7.843361790357135E-4, complex4.getReal(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(0.0, complex4.arg(), 0.01);
      assertEquals(6.151832417443428E-7, complex4.norm(), 0.01);
      assertEquals(7.843361790357135E-4, complex4.abs(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      
      Complex complex5 = complex1.divideImaginary((-1889.80172));
      assertNotNull(complex5);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.8813735870195429, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.8813735870195429, complex1.imag(), 0.01);
      assertEquals(0.8813735870195429, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.7768193998956958, complex1.norm(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(4.663841596141329E-4, complex5.abs(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals((-4.663841596141329E-4), complex5.real(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals((-4.663841596141329E-4), complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(3.141592653589793, complex5.arg(), 0.01);
      assertEquals(2.17514184338981E-7, complex5.norm(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      
      Complex complex6 = complex5.ONE.add(complex1);
      assertNotNull(complex6);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.8813735870195429, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.8813735870195429, complex1.imag(), 0.01);
      assertEquals(0.8813735870195429, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.7768193998956958, complex1.norm(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(4.663841596141329E-4, complex5.abs(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals((-4.663841596141329E-4), complex5.real(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals((-4.663841596141329E-4), complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(3.141592653589793, complex5.arg(), 0.01);
      assertEquals(2.17514184338981E-7, complex5.norm(), 0.01);
      assertEquals(1.7768193998956958, complex6.norm(), 0.01);
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertEquals(1.0, complex6.real(), 0.01);
      assertEquals(0.7224284372420832, complex6.arg(), 0.01);
      assertEquals(1.3329738931785933, complex6.abs(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.8813735870195429, complex6.imag(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.8813735870195429, complex6.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      
      Complex complex7 = complex2.ONE.add(2311.553353);
      assertNotNull(complex7);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1274.9635, complex2.abs(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1625531.9263322502, complex2.norm(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(1274.9635, complex2.imag(), 0.01);
      assertEquals(1.5707963267948966, complex2.arg(), 0.01);
      assertEquals(1274.9635, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(2312.553353, complex7.abs(), 0.01);
      assertEquals(0.0, complex7.arg(), 0.01);
      assertEquals(2312.553353, complex7.real(), 0.01);
      assertEquals(5347903.010471541, complex7.norm(), 0.01);
      assertEquals(2312.553353, complex7.getReal(), 0.01);
      assertFalse(complex7.isInfinite());
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      
      Complex complex8 = complex0.ONE.conj();
      assertNotNull(complex8);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(1.0, complex8.norm(), 0.01);
      assertEquals(-0.0, complex8.imag(), 0.01);
      assertEquals(1.0, complex8.abs(), 0.01);
      assertEquals(1.0, complex8.real(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(-0.0, complex8.arg(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      
      boolean boolean0 = complex6.ZERO.isFinite();
      assertTrue(boolean0);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.8813735870195429, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.8813735870195429, complex1.imag(), 0.01);
      assertEquals(0.8813735870195429, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.7768193998956958, complex1.norm(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(4.663841596141329E-4, complex5.abs(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals((-4.663841596141329E-4), complex5.real(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals((-4.663841596141329E-4), complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(3.141592653589793, complex5.arg(), 0.01);
      assertEquals(2.17514184338981E-7, complex5.norm(), 0.01);
      assertEquals(1.7768193998956958, complex6.norm(), 0.01);
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertEquals(1.0, complex6.real(), 0.01);
      assertEquals(0.7224284372420832, complex6.arg(), 0.01);
      assertEquals(1.3329738931785933, complex6.abs(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.8813735870195429, complex6.imag(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.8813735870195429, complex6.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex7);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex2);
      
      Complex complex9 = complex2.add(complex8);
      assertNotNull(complex9);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1274.9635, complex2.abs(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1625531.9263322502, complex2.norm(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(1274.9635, complex2.imag(), 0.01);
      assertEquals(1.5707963267948966, complex2.arg(), 0.01);
      assertEquals(1274.9635, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(1.0, complex8.norm(), 0.01);
      assertEquals(-0.0, complex8.imag(), 0.01);
      assertEquals(1.0, complex8.abs(), 0.01);
      assertEquals(1.0, complex8.real(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(-0.0, complex8.arg(), 0.01);
      assertEquals(1.5700119907766976, complex9.arg(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(1.0, complex9.getReal(), 0.01);
      assertEquals(1274.9638921680294, complex9.abs(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(1625532.9263322502, complex9.norm(), 0.01);
      assertEquals(1.0, complex9.real(), 0.01);
      assertEquals(1274.9635, complex9.getImaginary(), 0.01);
      assertEquals(1274.9635, complex9.imag(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex5);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex3);
      
      Complex complex10 = Complex.ZERO;
      assertNotNull(complex10);
      assertEquals(0.0, complex10.imag(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(0.0, complex10.arg(), 0.01);
      assertEquals(0.0, complex10.norm(), 0.01);
      assertEquals(0.0, complex10.abs(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(0.0, complex10.real(), 0.01);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex6);
      
      Complex complex11 = complex9.I.subtract(complex10);
      assertNotNull(complex11);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1274.9635, complex2.abs(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1625531.9263322502, complex2.norm(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(1274.9635, complex2.imag(), 0.01);
      assertEquals(1.5707963267948966, complex2.arg(), 0.01);
      assertEquals(1274.9635, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(1.0, complex8.norm(), 0.01);
      assertEquals(-0.0, complex8.imag(), 0.01);
      assertEquals(1.0, complex8.abs(), 0.01);
      assertEquals(1.0, complex8.real(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(-0.0, complex8.arg(), 0.01);
      assertEquals(1.5700119907766976, complex9.arg(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(1.0, complex9.getReal(), 0.01);
      assertEquals(1274.9638921680294, complex9.abs(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(1625532.9263322502, complex9.norm(), 0.01);
      assertEquals(1.0, complex9.real(), 0.01);
      assertEquals(1274.9635, complex9.getImaginary(), 0.01);
      assertEquals(1274.9635, complex9.imag(), 0.01);
      assertEquals(0.0, complex10.imag(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertFalse(complex10.isNaN());
      assertEquals(0.0, complex10.getReal(), 0.01);
      assertEquals(0.0, complex10.arg(), 0.01);
      assertEquals(0.0, complex10.norm(), 0.01);
      assertEquals(0.0, complex10.abs(), 0.01);
      assertFalse(complex10.isInfinite());
      assertEquals(0.0, complex10.real(), 0.01);
      assertEquals(1.0, complex11.imag(), 0.01);
      assertEquals(1.0, complex11.norm(), 0.01);
      assertEquals(0.0, complex11.getReal(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex11.isNaN());
      assertEquals(1.0, complex11.abs(), 0.01);
      assertEquals(1.5707963267948966, complex11.arg(), 0.01);
      assertEquals(0.0, complex11.real(), 0.01);
      assertEquals(1.0, complex11.getImaginary(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex5);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex0);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex10);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex6);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex8);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex10);
      
      Complex complex12 = complex2.pow(complex5);
      assertNotNull(complex12);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.8813735870195429, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.8813735870195429, complex1.imag(), 0.01);
      assertEquals(0.8813735870195429, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.7768193998956958, complex1.norm(), 0.01);
      assertEquals(1274.9635, complex2.abs(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1625531.9263322502, complex2.norm(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(1274.9635, complex2.imag(), 0.01);
      assertEquals(1.5707963267948966, complex2.arg(), 0.01);
      assertEquals(1274.9635, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(4.663841596141329E-4, complex5.abs(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals((-4.663841596141329E-4), complex5.real(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals((-4.663841596141329E-4), complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(3.141592653589793, complex5.arg(), 0.01);
      assertEquals(2.17514184338981E-7, complex5.norm(), 0.01);
      assertEquals(0.9966705942657929, complex12.abs(), 0.01);
      assertEquals((-7.30155355073736E-4), complex12.imag(), 0.01);
      assertEquals((-7.30155355073736E-4), complex12.getImaginary(), 0.01);
      assertEquals(0.9933522734741287, complex12.norm(), 0.01);
      assertEquals(0.9966703268118732, complex12.getReal(), 0.01);
      assertEquals(0.9966703268118732, complex12.real(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals((-7.325945247972048E-4), complex12.arg(), 0.01);
      assertFalse(complex12.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex8);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex5);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex7);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex0);
      
      Complex complex13 = complex12.multiply(complex8);
      assertNotNull(complex13);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.8813735870195429, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.8813735870195429, complex1.imag(), 0.01);
      assertEquals(0.8813735870195429, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.7768193998956958, complex1.norm(), 0.01);
      assertEquals(1274.9635, complex2.abs(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1625531.9263322502, complex2.norm(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(1274.9635, complex2.imag(), 0.01);
      assertEquals(1.5707963267948966, complex2.arg(), 0.01);
      assertEquals(1274.9635, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(4.663841596141329E-4, complex5.abs(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals((-4.663841596141329E-4), complex5.real(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals((-4.663841596141329E-4), complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(3.141592653589793, complex5.arg(), 0.01);
      assertEquals(2.17514184338981E-7, complex5.norm(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(1.0, complex8.norm(), 0.01);
      assertEquals(-0.0, complex8.imag(), 0.01);
      assertEquals(1.0, complex8.abs(), 0.01);
      assertEquals(1.0, complex8.real(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(-0.0, complex8.arg(), 0.01);
      assertEquals(0.9966705942657929, complex12.abs(), 0.01);
      assertEquals((-7.30155355073736E-4), complex12.imag(), 0.01);
      assertEquals((-7.30155355073736E-4), complex12.getImaginary(), 0.01);
      assertEquals(0.9933522734741287, complex12.norm(), 0.01);
      assertEquals(0.9966703268118732, complex12.getReal(), 0.01);
      assertEquals(0.9966703268118732, complex12.real(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals((-7.325945247972048E-4), complex12.arg(), 0.01);
      assertFalse(complex12.isNaN());
      assertEquals(0.9966703268118732, complex13.getReal(), 0.01);
      assertEquals(0.9933522734741287, complex13.norm(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals((-7.30155355073736E-4), complex13.imag(), 0.01);
      assertEquals((-7.30155355073736E-4), complex13.getImaginary(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals((-7.325945247972048E-4), complex13.arg(), 0.01);
      assertEquals(0.9966703268118732, complex13.real(), 0.01);
      assertEquals(0.9966705942657929, complex13.abs(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex5);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex7);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex0);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex2);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex0);
      
      Complex complex14 = complex13.ZERO.add((-1.0));
      assertNotNull(complex14);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.8813735870195429, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.8813735870195429, complex1.imag(), 0.01);
      assertEquals(0.8813735870195429, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.7768193998956958, complex1.norm(), 0.01);
      assertEquals(1274.9635, complex2.abs(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1625531.9263322502, complex2.norm(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(1274.9635, complex2.imag(), 0.01);
      assertEquals(1.5707963267948966, complex2.arg(), 0.01);
      assertEquals(1274.9635, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(4.663841596141329E-4, complex5.abs(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals((-4.663841596141329E-4), complex5.real(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals((-4.663841596141329E-4), complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(3.141592653589793, complex5.arg(), 0.01);
      assertEquals(2.17514184338981E-7, complex5.norm(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(1.0, complex8.norm(), 0.01);
      assertEquals(-0.0, complex8.imag(), 0.01);
      assertEquals(1.0, complex8.abs(), 0.01);
      assertEquals(1.0, complex8.real(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(-0.0, complex8.arg(), 0.01);
      assertEquals(0.9966705942657929, complex12.abs(), 0.01);
      assertEquals((-7.30155355073736E-4), complex12.imag(), 0.01);
      assertEquals((-7.30155355073736E-4), complex12.getImaginary(), 0.01);
      assertEquals(0.9933522734741287, complex12.norm(), 0.01);
      assertEquals(0.9966703268118732, complex12.getReal(), 0.01);
      assertEquals(0.9966703268118732, complex12.real(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals((-7.325945247972048E-4), complex12.arg(), 0.01);
      assertFalse(complex12.isNaN());
      assertEquals(0.9966703268118732, complex13.getReal(), 0.01);
      assertEquals(0.9933522734741287, complex13.norm(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals((-7.30155355073736E-4), complex13.imag(), 0.01);
      assertEquals((-7.30155355073736E-4), complex13.getImaginary(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals((-7.325945247972048E-4), complex13.arg(), 0.01);
      assertEquals(0.9966703268118732, complex13.real(), 0.01);
      assertEquals(0.9966705942657929, complex13.abs(), 0.01);
      assertEquals(3.141592653589793, complex14.arg(), 0.01);
      assertEquals(0.0, complex14.imag(), 0.01);
      assertEquals((-1.0), complex14.real(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals((-1.0), complex14.getReal(), 0.01);
      assertEquals(1.0, complex14.norm(), 0.01);
      assertEquals(1.0, complex14.abs(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex14);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex5);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex7);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex0);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex14);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex2);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex0);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex6);
      
      boolean boolean1 = complex1.isNaN();
      assertFalse(boolean1);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.8813735870195429, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.8813735870195429, complex1.imag(), 0.01);
      assertEquals(0.8813735870195429, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.7768193998956958, complex1.norm(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex14);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      
      Complex complex15 = complex1.atan();
      assertNotNull(complex15);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.3818891261280042, complex15.abs(), 0.01);
      assertEquals(0.0, complex15.real(), 0.01);
      assertEquals(1.5707963267948966, complex15.arg(), 0.01);
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertFalse(complex15.isNaN());
      assertEquals(1.3818891261280042, complex15.imag(), 0.01);
      assertEquals(1.3818891261280042, complex15.getImaginary(), 0.01);
      assertEquals(1.9096175569108191, complex15.norm(), 0.01);
      assertEquals(0.8813735870195429, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.8813735870195429, complex1.imag(), 0.01);
      assertEquals(0.8813735870195429, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.7768193998956958, complex1.norm(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex14);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex11);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      
      Complex complex16 = complex13.log10();
      assertNotNull(complex16);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.8813735870195429, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.8813735870195429, complex1.imag(), 0.01);
      assertEquals(0.8813735870195429, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.7768193998956958, complex1.norm(), 0.01);
      assertEquals(0.0016230917489599718, complex16.abs(), 0.01);
      assertFalse(complex16.isInfinite());
      assertFalse(complex16.isNaN());
      assertEquals((-0.0014483549591792402), complex16.getReal(), 0.01);
      assertEquals((-7.325945247972048E-4), complex16.getImaginary(), 0.01);
      assertEquals((-7.325945247972048E-4), complex16.imag(), 0.01);
      assertEquals((-2.6733066986044154), complex16.arg(), 0.01);
      assertEquals(2.6344268255419405E-6, complex16.norm(), 0.01);
      assertEquals((-0.0014483549591792402), complex16.real(), 0.01);
      assertEquals(1274.9635, complex2.abs(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1625531.9263322502, complex2.norm(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(1274.9635, complex2.imag(), 0.01);
      assertEquals(1.5707963267948966, complex2.arg(), 0.01);
      assertEquals(1274.9635, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(4.663841596141329E-4, complex5.abs(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals((-4.663841596141329E-4), complex5.real(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals((-4.663841596141329E-4), complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(3.141592653589793, complex5.arg(), 0.01);
      assertEquals(2.17514184338981E-7, complex5.norm(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(1.0, complex8.norm(), 0.01);
      assertEquals(-0.0, complex8.imag(), 0.01);
      assertEquals(1.0, complex8.abs(), 0.01);
      assertEquals(1.0, complex8.real(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(-0.0, complex8.arg(), 0.01);
      assertEquals(0.9966705942657929, complex12.abs(), 0.01);
      assertEquals((-7.30155355073736E-4), complex12.imag(), 0.01);
      assertEquals((-7.30155355073736E-4), complex12.getImaginary(), 0.01);
      assertEquals(0.9933522734741287, complex12.norm(), 0.01);
      assertEquals(0.9966703268118732, complex12.getReal(), 0.01);
      assertEquals(0.9966703268118732, complex12.real(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals((-7.325945247972048E-4), complex12.arg(), 0.01);
      assertFalse(complex12.isNaN());
      assertEquals(0.9966703268118732, complex13.getReal(), 0.01);
      assertEquals(0.9933522734741287, complex13.norm(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals((-7.30155355073736E-4), complex13.imag(), 0.01);
      assertEquals((-7.30155355073736E-4), complex13.getImaginary(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals((-7.325945247972048E-4), complex13.arg(), 0.01);
      assertEquals(0.9966703268118732, complex13.real(), 0.01);
      assertEquals(0.9966705942657929, complex13.abs(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex14);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex4);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex5);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex7);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex0);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex16);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex14);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex15);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex16);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex12);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex0);
      
      Complex complex17 = complex15.ONE.cosh();
      assertNotNull(complex17);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.3818891261280042, complex15.abs(), 0.01);
      assertEquals(0.0, complex15.real(), 0.01);
      assertEquals(1.5707963267948966, complex15.arg(), 0.01);
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertFalse(complex15.isNaN());
      assertEquals(1.3818891261280042, complex15.imag(), 0.01);
      assertEquals(1.3818891261280042, complex15.getImaginary(), 0.01);
      assertEquals(1.9096175569108191, complex15.norm(), 0.01);
      assertEquals(0.8813735870195429, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.8813735870195429, complex1.imag(), 0.01);
      assertEquals(0.8813735870195429, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.7768193998956958, complex1.norm(), 0.01);
      assertEquals(1.543080634815244, complex17.getReal(), 0.01);
      assertFalse(complex17.isInfinite());
      assertEquals(0.0, complex17.getImaginary(), 0.01);
      assertEquals(2.381097845541816, complex17.norm(), 0.01);
      assertEquals(1.543080634815244, complex17.abs(), 0.01);
      assertEquals(0.0, complex17.arg(), 0.01);
      assertEquals(1.543080634815244, complex17.real(), 0.01);
      assertEquals(0.0, complex17.imag(), 0.01);
      assertFalse(complex17.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex14);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex16);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex17);
      assertNotSame(complex15, complex11);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex8);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex15);
      
      Complex complex18 = complex8.divide(2311.553353);
      assertNotNull(complex18);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(4.3260952584208E-4, complex18.getReal(), 0.01);
      assertEquals(-0.0, complex18.arg(), 0.01);
      assertEquals(1.8715100184930928E-7, complex18.norm(), 0.01);
      assertFalse(complex18.isNaN());
      assertFalse(complex18.isInfinite());
      assertEquals(4.3260952584208E-4, complex18.abs(), 0.01);
      assertEquals(4.3260952584208E-4, complex18.real(), 0.01);
      assertEquals(-0.0, complex18.getImaginary(), 0.01);
      assertEquals(-0.0, complex18.imag(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(1.0, complex8.norm(), 0.01);
      assertEquals(-0.0, complex8.imag(), 0.01);
      assertEquals(1.0, complex8.abs(), 0.01);
      assertEquals(1.0, complex8.real(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(-0.0, complex8.arg(), 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex14);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex16);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex0);
      
      Complex complex19 = complex18.I.subtractFrom(169.87882679);
      assertNotNull(complex19);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(4.3260952584208E-4, complex18.getReal(), 0.01);
      assertEquals(-0.0, complex18.arg(), 0.01);
      assertEquals(1.8715100184930928E-7, complex18.norm(), 0.01);
      assertFalse(complex18.isNaN());
      assertFalse(complex18.isInfinite());
      assertEquals(4.3260952584208E-4, complex18.abs(), 0.01);
      assertEquals(4.3260952584208E-4, complex18.real(), 0.01);
      assertEquals(-0.0, complex18.getImaginary(), 0.01);
      assertEquals(-0.0, complex18.imag(), 0.01);
      assertEquals((-1.0), complex19.getImaginary(), 0.01);
      assertFalse(complex19.isNaN());
      assertEquals((-1.0), complex19.imag(), 0.01);
      assertEquals(169.87882679, complex19.getReal(), 0.01);
      assertEquals(169.88177003889152, complex19.abs(), 0.01);
      assertEquals(28859.815791546822, complex19.norm(), 0.01);
      assertFalse(complex19.isInfinite());
      assertEquals((-0.005886480785453035), complex19.arg(), 0.01);
      assertEquals(169.87882679, complex19.real(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(1.0, complex8.norm(), 0.01);
      assertEquals(-0.0, complex8.imag(), 0.01);
      assertEquals(1.0, complex8.abs(), 0.01);
      assertEquals(1.0, complex8.real(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(-0.0, complex8.arg(), 0.01);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex14);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex19);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex16);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex11);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex0);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex19);
      
      boolean boolean2 = complex15.isInfinite();
      assertFalse(boolean2);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.3818891261280042, complex15.abs(), 0.01);
      assertEquals(0.0, complex15.real(), 0.01);
      assertEquals(1.5707963267948966, complex15.arg(), 0.01);
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertFalse(complex15.isInfinite());
      assertFalse(complex15.isNaN());
      assertEquals(1.3818891261280042, complex15.imag(), 0.01);
      assertEquals(1.3818891261280042, complex15.getImaginary(), 0.01);
      assertEquals(1.9096175569108191, complex15.norm(), 0.01);
      assertEquals(0.8813735870195429, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.8813735870195429, complex1.imag(), 0.01);
      assertEquals(0.8813735870195429, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.7768193998956958, complex1.norm(), 0.01);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex14);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex16);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex18);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex19);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex3);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex17);
      assertNotSame(complex15, complex11);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex19);
      
      Complex complex20 = complex6.multiply(0.0);
      assertNotNull(complex20);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.8813735870195429, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.8813735870195429, complex1.imag(), 0.01);
      assertEquals(0.8813735870195429, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.7768193998956958, complex1.norm(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(4.663841596141329E-4, complex5.abs(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals((-4.663841596141329E-4), complex5.real(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals((-4.663841596141329E-4), complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(3.141592653589793, complex5.arg(), 0.01);
      assertEquals(2.17514184338981E-7, complex5.norm(), 0.01);
      assertEquals(1.7768193998956958, complex6.norm(), 0.01);
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertEquals(1.0, complex6.real(), 0.01);
      assertEquals(0.7224284372420832, complex6.arg(), 0.01);
      assertEquals(1.3329738931785933, complex6.abs(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.8813735870195429, complex6.imag(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.8813735870195429, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex20.arg(), 0.01);
      assertEquals(0.0, complex20.getReal(), 0.01);
      assertFalse(complex20.isNaN());
      assertEquals(0.0, complex20.norm(), 0.01);
      assertEquals(0.0, complex20.abs(), 0.01);
      assertFalse(complex20.isInfinite());
      assertEquals(0.0, complex20.getImaginary(), 0.01);
      assertEquals(0.0, complex20.imag(), 0.01);
      assertEquals(0.0, complex20.real(), 0.01);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex14);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex19);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex20);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex19);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex7);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex20);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex10);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex5);
      
      Complex complex21 = complex20.ONE.multiplyImaginary(0.0);
      assertNotNull(complex21);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.8813735870195429, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.8813735870195429, complex1.imag(), 0.01);
      assertEquals(0.8813735870195429, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.7768193998956958, complex1.norm(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(4.663841596141329E-4, complex5.abs(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals((-4.663841596141329E-4), complex5.real(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals((-4.663841596141329E-4), complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(3.141592653589793, complex5.arg(), 0.01);
      assertEquals(2.17514184338981E-7, complex5.norm(), 0.01);
      assertEquals(1.7768193998956958, complex6.norm(), 0.01);
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertEquals(1.0, complex6.real(), 0.01);
      assertEquals(0.7224284372420832, complex6.arg(), 0.01);
      assertEquals(1.3329738931785933, complex6.abs(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.8813735870195429, complex6.imag(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.8813735870195429, complex6.getImaginary(), 0.01);
      assertEquals(0.0, complex20.arg(), 0.01);
      assertEquals(0.0, complex20.getReal(), 0.01);
      assertFalse(complex20.isNaN());
      assertEquals(0.0, complex20.norm(), 0.01);
      assertEquals(0.0, complex20.abs(), 0.01);
      assertFalse(complex20.isInfinite());
      assertEquals(0.0, complex20.getImaginary(), 0.01);
      assertEquals(0.0, complex20.imag(), 0.01);
      assertEquals(0.0, complex20.real(), 0.01);
      assertEquals(0.0, complex21.norm(), 0.01);
      assertEquals(0.0, complex21.abs(), 0.01);
      assertEquals(-0.0, complex21.real(), 0.01);
      assertFalse(complex21.isInfinite());
      assertFalse(complex21.isNaN());
      assertEquals(-0.0, complex21.getReal(), 0.01);
      assertEquals(3.141592653589793, complex21.arg(), 0.01);
      assertEquals(0.0, complex21.getImaginary(), 0.01);
      assertEquals(0.0, complex21.imag(), 0.01);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex14);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex21);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex19);
      assertNotSame(complex5, complex21);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex20);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex19);
      assertNotSame(complex5, complex16);
      assertNotSame(complex5, complex9);
      assertNotSame(complex5, complex8);
      assertNotSame(complex5, complex10);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex7);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex13);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex8);
      assertNotSame(complex6, complex17);
      assertNotSame(complex6, complex12);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex19);
      assertNotSame(complex6, complex16);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex11);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex9);
      assertNotSame(complex6, complex10);
      assertNotSame(complex6, complex18);
      assertNotSame(complex6, complex15);
      assertNotSame(complex6, complex14);
      assertNotSame(complex6, complex21);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex20);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex9);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex10);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex21);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex5);
      assertNotSame(complex21, complex17);
      assertNotSame(complex21, complex10);
      assertNotSame(complex21, complex8);
      assertNotSame(complex21, complex3);
      assertNotSame(complex21, complex7);
      assertNotSame(complex21, complex0);
      assertNotSame(complex21, complex4);
      assertNotSame(complex21, complex14);
      assertNotSame(complex21, complex16);
      assertNotSame(complex21, complex9);
      assertNotSame(complex21, complex15);
      assertNotSame(complex21, complex18);
      assertNotSame(complex21, complex20);
      assertNotSame(complex21, complex11);
      assertNotSame(complex21, complex2);
      assertNotSame(complex21, complex19);
      assertNotSame(complex21, complex6);
      assertNotSame(complex21, complex1);
      assertNotSame(complex21, complex13);
      assertNotSame(complex21, complex5);
      assertNotSame(complex21, complex12);
      
      double double0 = complex3.getReal();
      assertEquals(0.5403023058681398, double0, 0.01);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals(1.0, complex3.abs(), 0.01);
      assertEquals(1.0, complex3.arg(), 0.01);
      assertEquals(0.5403023058681398, complex3.real(), 0.01);
      assertEquals(0.5403023058681398, complex3.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex3.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex3.imag(), 0.01);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex14);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex20);
      assertNotSame(complex3, complex21);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex15);
      
      Complex complex22 = complex1.ZERO.sinh();
      assertNotNull(complex22);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.8813735870195429, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.8813735870195429, complex1.imag(), 0.01);
      assertEquals(0.8813735870195429, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.7768193998956958, complex1.norm(), 0.01);
      assertEquals(0.0, complex22.arg(), 0.01);
      assertEquals(0.0, complex22.getReal(), 0.01);
      assertEquals(0.0, complex22.abs(), 0.01);
      assertFalse(complex22.isInfinite());
      assertFalse(complex22.isNaN());
      assertEquals(0.0, complex22.norm(), 0.01);
      assertEquals(0.0, complex22.getImaginary(), 0.01);
      assertEquals(0.0, complex22.imag(), 0.01);
      assertEquals(0.0, complex22.real(), 0.01);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex14);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex21);
      assertNotSame(complex1, complex22);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex19);
      assertNotSame(complex22, complex21);
      assertNotSame(complex22, complex1);
      assertNotSame(complex22, complex14);
      assertNotSame(complex22, complex15);
      assertNotSame(complex22, complex0);
      assertNotSame(complex22, complex2);
      assertNotSame(complex22, complex20);
      assertNotSame(complex22, complex7);
      assertNotSame(complex22, complex16);
      assertNotSame(complex22, complex18);
      assertNotSame(complex22, complex10);
      assertNotSame(complex22, complex9);
      assertNotSame(complex22, complex4);
      assertNotSame(complex22, complex3);
      assertNotSame(complex22, complex6);
      assertNotSame(complex22, complex19);
      assertNotSame(complex22, complex8);
      assertNotSame(complex22, complex12);
      assertNotSame(complex22, complex13);
      assertNotSame(complex22, complex11);
      assertNotSame(complex22, complex5);
      assertNotSame(complex22, complex17);
      
      Complex complex23 = complex14.multiply(complex16);
      assertNotNull(complex23);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.8813735870195429, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.8813735870195429, complex1.imag(), 0.01);
      assertEquals(0.8813735870195429, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.7768193998956958, complex1.norm(), 0.01);
      assertEquals(0.0016230917489599718, complex16.abs(), 0.01);
      assertFalse(complex16.isInfinite());
      assertFalse(complex16.isNaN());
      assertEquals((-0.0014483549591792402), complex16.getReal(), 0.01);
      assertEquals((-7.325945247972048E-4), complex16.getImaginary(), 0.01);
      assertEquals((-7.325945247972048E-4), complex16.imag(), 0.01);
      assertEquals((-2.6733066986044154), complex16.arg(), 0.01);
      assertEquals(2.6344268255419405E-6, complex16.norm(), 0.01);
      assertEquals((-0.0014483549591792402), complex16.real(), 0.01);
      assertEquals(1274.9635, complex2.abs(), 0.01);
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertEquals(1625531.9263322502, complex2.norm(), 0.01);
      assertFalse(complex2.isInfinite());
      assertFalse(complex2.isNaN());
      assertEquals(1274.9635, complex2.imag(), 0.01);
      assertEquals(1.5707963267948966, complex2.arg(), 0.01);
      assertEquals(1274.9635, complex2.getImaginary(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(4.663841596141329E-4, complex5.abs(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals((-4.663841596141329E-4), complex5.real(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals((-4.663841596141329E-4), complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(3.141592653589793, complex5.arg(), 0.01);
      assertEquals(2.17514184338981E-7, complex5.norm(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(1.0, complex8.norm(), 0.01);
      assertEquals(-0.0, complex8.imag(), 0.01);
      assertEquals(1.0, complex8.abs(), 0.01);
      assertEquals(1.0, complex8.real(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(-0.0, complex8.arg(), 0.01);
      assertEquals(0.0016230917489599718, complex23.abs(), 0.01);
      assertEquals(7.325945247972048E-4, complex23.imag(), 0.01);
      assertEquals(7.325945247972048E-4, complex23.getImaginary(), 0.01);
      assertEquals(0.0014483549591792402, complex23.getReal(), 0.01);
      assertEquals(0.468285954985378, complex23.arg(), 0.01);
      assertEquals(0.0014483549591792402, complex23.real(), 0.01);
      assertEquals(2.6344268255419405E-6, complex23.norm(), 0.01);
      assertFalse(complex23.isInfinite());
      assertFalse(complex23.isNaN());
      assertEquals(0.9966705942657929, complex12.abs(), 0.01);
      assertEquals((-7.30155355073736E-4), complex12.imag(), 0.01);
      assertEquals((-7.30155355073736E-4), complex12.getImaginary(), 0.01);
      assertEquals(0.9933522734741287, complex12.norm(), 0.01);
      assertEquals(0.9966703268118732, complex12.getReal(), 0.01);
      assertEquals(0.9966703268118732, complex12.real(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals((-7.325945247972048E-4), complex12.arg(), 0.01);
      assertFalse(complex12.isNaN());
      assertEquals(0.9966703268118732, complex13.getReal(), 0.01);
      assertEquals(0.9933522734741287, complex13.norm(), 0.01);
      assertFalse(complex13.isInfinite());
      assertEquals((-7.30155355073736E-4), complex13.imag(), 0.01);
      assertEquals((-7.30155355073736E-4), complex13.getImaginary(), 0.01);
      assertFalse(complex13.isNaN());
      assertEquals((-7.325945247972048E-4), complex13.arg(), 0.01);
      assertEquals(0.9966703268118732, complex13.real(), 0.01);
      assertEquals(0.9966705942657929, complex13.abs(), 0.01);
      assertEquals(3.141592653589793, complex14.arg(), 0.01);
      assertEquals(0.0, complex14.imag(), 0.01);
      assertEquals((-1.0), complex14.real(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(0.0, complex14.getImaginary(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals((-1.0), complex14.getReal(), 0.01);
      assertEquals(1.0, complex14.norm(), 0.01);
      assertEquals(1.0, complex14.abs(), 0.01);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex14);
      assertNotSame(complex1, complex13);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex21);
      assertNotSame(complex1, complex22);
      assertNotSame(complex1, complex23);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex19);
      assertNotSame(complex16, complex19);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex5);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex23);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex17);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex21);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex22);
      assertNotSame(complex16, complex18);
      assertNotSame(complex16, complex20);
      assertNotSame(complex2, complex6);
      assertNotSame(complex2, complex19);
      assertNotSame(complex2, complex4);
      assertNotSame(complex2, complex18);
      assertNotSame(complex2, complex10);
      assertNotSame(complex2, complex20);
      assertNotSame(complex2, complex22);
      assertNotSame(complex2, complex9);
      assertNotSame(complex2, complex7);
      assertNotSame(complex2, complex16);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex21);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex14);
      assertNotSame(complex2, complex8);
      assertNotSame(complex2, complex15);
      assertNotSame(complex2, complex17);
      assertNotSame(complex2, complex23);
      assertNotSame(complex2, complex12);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex13);
      assertNotSame(complex2, complex11);
      assertNotSame(complex2, complex5);
      assertNotSame(complex5, complex21);
      assertNotSame(complex5, complex11);
      assertNotSame(complex5, complex18);
      assertNotSame(complex5, complex20);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex12);
      assertNotSame(complex5, complex13);
      assertNotSame(complex5, complex14);
      assertNotSame(complex5, complex15);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex23);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex22);
      assertNotSame(complex5, complex17);
      assertNotSame(complex5, complex6);
      assertNotSame(complex5, complex19);
      assertNotSame(complex5, complex16);
      
      Complex complex24 = complex6.subtract(0.5403023058681398);
      assertNotNull(complex24);
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.getImaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertEquals(0.0, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(0.8813735870195429, complex1.abs(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.8813735870195429, complex1.imag(), 0.01);
      assertEquals(0.8813735870195429, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(0.7768193998956958, complex1.norm(), 0.01);
      assertEquals(0.0, complex5.getImaginary(), 0.01);
      assertEquals(4.663841596141329E-4, complex5.abs(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals((-4.663841596141329E-4), complex5.real(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals((-4.663841596141329E-4), complex5.getReal(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(3.141592653589793, complex5.arg(), 0.01);
      assertEquals(2.17514184338981E-7, complex5.norm(), 0.01);
      assertEquals(1.7768193998956958, complex6.norm(), 0.01);
      assertEquals(1.0, complex6.getReal(), 0.01);
      assertEquals(1.0, complex6.real(), 0.01);
      assertEquals(0.7224284372420832, complex6.arg(), 0.01);
      assertEquals(1.3329738931785933, complex6.abs(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(0.8813735870195429, complex6.imag(), 0.01);
      assertFalse(complex6.isNaN());
      assertEquals(0.8813735870195429, complex6.getImaginary(), 0.01);
      assertFalse(complex24.isNaN());
      assertFalse(complex24.isInfinite());
      assertEquals(0.45969769413186023, complex24.getReal(), 0.01);
      assertEquals(0.9940530015476263, complex24.abs(), 0.01);
      assertEquals(0.9881413698858451, complex24.norm(), 0.01);
      assertEquals(0.8813735870195429, complex24.imag(), 0.01);
      assertEquals(0.8813735870195429, complex24.getImaginary(), 0.01);
      assertEquals(0.45969769413186023, complex24.real(), 0.01);
      assertEquals(1.0900422901185398, complex24.arg(), 0.01);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.ofCis(3.8657822478866);
      assertNotNull(complex0);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      
      Complex complex1 = complex0.atanh();
      assertNotNull(complex1);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals((-0.4853783050741926), complex1.real(), 0.01);
      assertEquals(0.9232780589317505, complex1.abs(), 0.01);
      assertEquals((-2.124348154742396), complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-0.4853783050741926), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-0.7853981633974484), complex1.getImaginary(), 0.01);
      assertEquals((-0.7853981633974484), complex1.imag(), 0.01);
      assertEquals(0.852442374104781, complex1.norm(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.I.subtract(complex0);
      assertNotNull(complex2);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals((-0.4853783050741926), complex1.real(), 0.01);
      assertEquals(0.9232780589317505, complex1.abs(), 0.01);
      assertEquals((-2.124348154742396), complex1.arg(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals((-0.4853783050741926), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals((-0.7853981633974484), complex1.getImaginary(), 0.01);
      assertEquals((-0.7853981633974484), complex1.imag(), 0.01);
      assertEquals(0.852442374104781, complex1.norm(), 0.01);
      assertEquals(1.1474929605458517, complex2.arg(), 0.01);
      assertFalse(complex2.isNaN());
      assertEquals(3.325057273539609, complex2.norm(), 0.01);
      assertEquals(1.6625286367698044, complex2.getImaginary(), 0.01);
      assertEquals(0.7490365848608095, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(0.7490365848608095, complex2.real(), 0.01);
      assertEquals(1.6625286367698044, complex2.imag(), 0.01);
      assertEquals(1.8234739574613092, complex2.abs(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = complex0.divide(3.8657822478866);
      assertNotNull(complex3);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(0.2586798572389053, complex3.abs(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals((-2.4174030592929867), complex3.arg(), 0.01);
      assertEquals(0.06691526854114044, complex3.norm(), 0.01);
      assertEquals((-0.19376067683851136), complex3.real(), 0.01);
      assertEquals((-0.19376067683851136), complex3.getReal(), 0.01);
      assertEquals((-0.17138281317629955), complex3.imag(), 0.01);
      assertEquals((-0.17138281317629955), complex3.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      
      Complex complex4 = complex3.ZERO.divideImaginary(0.0);
      assertNotNull(complex4);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(0.2586798572389053, complex3.abs(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals((-2.4174030592929867), complex3.arg(), 0.01);
      assertEquals(0.06691526854114044, complex3.norm(), 0.01);
      assertEquals((-0.19376067683851136), complex3.real(), 0.01);
      assertEquals((-0.19376067683851136), complex3.getReal(), 0.01);
      assertEquals((-0.17138281317629955), complex3.imag(), 0.01);
      assertEquals((-0.17138281317629955), complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.imag(), 0.01);
      assertEquals(Double.NaN, complex4.real(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.arg(), 0.01);
      assertEquals(Double.NaN, complex4.norm(), 0.01);
      assertEquals(Double.NaN, complex4.abs(), 0.01);
      assertTrue(complex4.isNaN());
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complex4.ONE.addImaginary(2098.332060849);
      assertNotNull(complex5);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(0.2586798572389053, complex3.abs(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals((-2.4174030592929867), complex3.arg(), 0.01);
      assertEquals(0.06691526854114044, complex3.norm(), 0.01);
      assertEquals((-0.19376067683851136), complex3.real(), 0.01);
      assertEquals((-0.19376067683851136), complex3.getReal(), 0.01);
      assertEquals((-0.17138281317629955), complex3.imag(), 0.01);
      assertEquals((-0.17138281317629955), complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.imag(), 0.01);
      assertEquals(Double.NaN, complex4.real(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.arg(), 0.01);
      assertEquals(Double.NaN, complex4.norm(), 0.01);
      assertEquals(Double.NaN, complex4.abs(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(2098.332060849, complex5.getImaginary(), 0.01);
      assertEquals(2098.332060849, complex5.imag(), 0.01);
      assertFalse(complex5.isInfinite());
      assertFalse(complex5.isNaN());
      assertEquals(4402998.43758681, complex5.norm(), 0.01);
      assertEquals(1.5703197578366501, complex5.arg(), 0.01);
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertEquals(2098.3322991334835, complex5.abs(), 0.01);
      assertEquals(1.0, complex5.real(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      
      Complex complex6 = complex4.subtract(3.8657822478866);
      assertNotNull(complex6);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(0.2586798572389053, complex3.abs(), 0.01);
      assertFalse(complex3.isInfinite());
      assertFalse(complex3.isNaN());
      assertEquals((-2.4174030592929867), complex3.arg(), 0.01);
      assertEquals(0.06691526854114044, complex3.norm(), 0.01);
      assertEquals((-0.19376067683851136), complex3.real(), 0.01);
      assertEquals((-0.19376067683851136), complex3.getReal(), 0.01);
      assertEquals((-0.17138281317629955), complex3.imag(), 0.01);
      assertEquals((-0.17138281317629955), complex3.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.imag(), 0.01);
      assertEquals(Double.NaN, complex4.real(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.arg(), 0.01);
      assertEquals(Double.NaN, complex4.norm(), 0.01);
      assertEquals(Double.NaN, complex4.abs(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex6.norm(), 0.01);
      assertEquals(Double.NaN, complex6.abs(), 0.01);
      assertEquals(Double.NaN, complex6.real(), 0.01);
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.imag(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.arg(), 0.01);
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex5);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex5);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex6);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex4);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex2);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex5));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex1));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex2));
      
      Complex complex7 = Complex.ofCartesian(0.0, 0.0);
      assertNotNull(complex7);
      assertEquals(0.0, complex7.abs(), 0.01);
      assertEquals(0.0, complex7.real(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.norm(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.arg(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex4);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex6);
      assertFalse(complex7.equals((Object)complex0));
      assertFalse(complex7.equals((Object)complex4));
      assertFalse(complex7.equals((Object)complex3));
      assertFalse(complex7.equals((Object)complex2));
      assertFalse(complex7.equals((Object)complex5));
      assertFalse(complex7.equals((Object)complex1));
      assertFalse(complex7.equals((Object)complex6));
      
      Complex complex8 = Complex.ofCartesian(0.0, 2098.332060849);
      assertNotNull(complex8);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(4402997.43758681, complex8.norm(), 0.01);
      assertEquals(2098.332060849, complex8.imag(), 0.01);
      assertEquals(2098.332060849, complex8.getImaginary(), 0.01);
      assertEquals(2098.332060849, complex8.abs(), 0.01);
      assertEquals(1.5707963267948966, complex8.arg(), 0.01);
      assertEquals(0.0, complex8.real(), 0.01);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex1);
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex1));
      
      Complex complex9 = complex8.multiplyImaginary(3.8657822478866);
      assertNotNull(complex9);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(4402997.43758681, complex8.norm(), 0.01);
      assertEquals(2098.332060849, complex8.imag(), 0.01);
      assertEquals(2098.332060849, complex8.getImaginary(), 0.01);
      assertEquals(2098.332060849, complex8.abs(), 0.01);
      assertEquals(1.5707963267948966, complex8.arg(), 0.01);
      assertEquals(0.0, complex8.real(), 0.01);
      assertEquals(0.0, complex9.imag(), 0.01);
      assertEquals(3.141592653589793, complex9.arg(), 0.01);
      assertEquals((-8111.694831001369), complex9.real(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals(6.579959303129432E7, complex9.norm(), 0.01);
      assertEquals((-8111.694831001369), complex9.getReal(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals(0.0, complex9.getImaginary(), 0.01);
      assertEquals(8111.694831001369, complex9.abs(), 0.01);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex7);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex1);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex5);
      assertFalse(complex8.equals((Object)complex2));
      assertFalse(complex8.equals((Object)complex6));
      assertFalse(complex8.equals((Object)complex0));
      assertFalse(complex8.equals((Object)complex7));
      assertFalse(complex8.equals((Object)complex5));
      assertFalse(complex8.equals((Object)complex4));
      assertFalse(complex8.equals((Object)complex3));
      assertFalse(complex8.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex4));
      assertFalse(complex9.equals((Object)complex1));
      assertFalse(complex9.equals((Object)complex3));
      assertFalse(complex9.equals((Object)complex6));
      assertFalse(complex9.equals((Object)complex8));
      assertFalse(complex9.equals((Object)complex2));
      assertFalse(complex9.equals((Object)complex7));
      assertFalse(complex9.equals((Object)complex0));
      assertFalse(complex9.equals((Object)complex5));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.ofCis(3.8657822478866);
      assertNotNull(complex0);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = complex0.atanh();
      assertNotNull(complex1);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-0.7853981633974484), complex1.getImaginary(), 0.01);
      assertEquals(0.9232780589317505, complex1.abs(), 0.01);
      assertEquals((-2.124348154742396), complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals((-0.4853783050741926), complex1.getReal(), 0.01);
      assertEquals(0.852442374104781, complex1.norm(), 0.01);
      assertEquals((-0.4853783050741926), complex1.real(), 0.01);
      assertEquals((-0.7853981633974484), complex1.imag(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.I.subtract(complex0);
      assertNotNull(complex2);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-0.7853981633974484), complex1.getImaginary(), 0.01);
      assertEquals(0.9232780589317505, complex1.abs(), 0.01);
      assertEquals((-2.124348154742396), complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals((-0.4853783050741926), complex1.getReal(), 0.01);
      assertEquals(0.852442374104781, complex1.norm(), 0.01);
      assertEquals((-0.4853783050741926), complex1.real(), 0.01);
      assertEquals((-0.7853981633974484), complex1.imag(), 0.01);
      assertEquals(0.7490365848608095, complex2.getReal(), 0.01);
      assertEquals(1.1474929605458517, complex2.arg(), 0.01);
      assertEquals(3.325057273539609, complex2.norm(), 0.01);
      assertEquals(0.7490365848608095, complex2.real(), 0.01);
      assertEquals(1.6625286367698044, complex2.getImaginary(), 0.01);
      assertEquals(1.8234739574613092, complex2.abs(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.6625286367698044, complex2.imag(), 0.01);
      assertFalse(complex2.isNaN());
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complex0.divide(3.8657822478866);
      assertNotNull(complex3);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-0.19376067683851136), complex3.getReal(), 0.01);
      assertEquals(0.06691526854114044, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-0.17138281317629955), complex3.getImaginary(), 0.01);
      assertEquals((-0.17138281317629955), complex3.imag(), 0.01);
      assertEquals(0.2586798572389053, complex3.abs(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-0.19376067683851136), complex3.real(), 0.01);
      assertEquals((-2.4174030592929867), complex3.arg(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = complex3.ZERO.divideImaginary(0.0);
      assertNotNull(complex4);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-0.19376067683851136), complex3.getReal(), 0.01);
      assertEquals(0.06691526854114044, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-0.17138281317629955), complex3.getImaginary(), 0.01);
      assertEquals((-0.17138281317629955), complex3.imag(), 0.01);
      assertEquals(0.2586798572389053, complex3.abs(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-0.19376067683851136), complex3.real(), 0.01);
      assertEquals((-2.4174030592929867), complex3.arg(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.imag(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.arg(), 0.01);
      assertEquals(Double.NaN, complex4.norm(), 0.01);
      assertEquals(Double.NaN, complex4.abs(), 0.01);
      assertEquals(Double.NaN, complex4.real(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      
      Complex complex5 = complex4.ONE.addImaginary(2098.332060849);
      assertNotNull(complex5);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-0.19376067683851136), complex3.getReal(), 0.01);
      assertEquals(0.06691526854114044, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-0.17138281317629955), complex3.getImaginary(), 0.01);
      assertEquals((-0.17138281317629955), complex3.imag(), 0.01);
      assertEquals(0.2586798572389053, complex3.abs(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-0.19376067683851136), complex3.real(), 0.01);
      assertEquals((-2.4174030592929867), complex3.arg(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.imag(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.arg(), 0.01);
      assertEquals(Double.NaN, complex4.norm(), 0.01);
      assertEquals(Double.NaN, complex4.abs(), 0.01);
      assertEquals(Double.NaN, complex4.real(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertEquals(2098.332060849, complex5.imag(), 0.01);
      assertEquals(2098.332060849, complex5.getImaginary(), 0.01);
      assertFalse(complex5.isInfinite());
      assertEquals(2098.3322991334835, complex5.abs(), 0.01);
      assertEquals(1.0, complex5.getReal(), 0.01);
      assertEquals(1.0, complex5.real(), 0.01);
      assertEquals(4402998.43758681, complex5.norm(), 0.01);
      assertFalse(complex5.isNaN());
      assertEquals(1.5703197578366501, complex5.arg(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex3);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex3));
      
      Complex complex6 = complex4.subtract(3.8657822478866);
      assertNotNull(complex6);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-0.19376067683851136), complex3.getReal(), 0.01);
      assertEquals(0.06691526854114044, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-0.17138281317629955), complex3.getImaginary(), 0.01);
      assertEquals((-0.17138281317629955), complex3.imag(), 0.01);
      assertEquals(0.2586798572389053, complex3.abs(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-0.19376067683851136), complex3.real(), 0.01);
      assertEquals((-2.4174030592929867), complex3.arg(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.imag(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.arg(), 0.01);
      assertEquals(Double.NaN, complex4.norm(), 0.01);
      assertEquals(Double.NaN, complex4.abs(), 0.01);
      assertEquals(Double.NaN, complex4.real(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.arg(), 0.01);
      assertEquals(Double.NaN, complex6.norm(), 0.01);
      assertEquals(Double.NaN, complex6.abs(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.imag(), 0.01);
      assertEquals(Double.NaN, complex6.real(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex5));
      assertFalse(complex6.equals((Object)complex0));
      assertFalse(complex6.equals((Object)complex3));
      assertFalse(complex6.equals((Object)complex2));
      assertFalse(complex6.equals((Object)complex1));
      
      Complex complex7 = complex6.ZERO.tan();
      assertNotNull(complex7);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-0.19376067683851136), complex3.getReal(), 0.01);
      assertEquals(0.06691526854114044, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-0.17138281317629955), complex3.getImaginary(), 0.01);
      assertEquals((-0.17138281317629955), complex3.imag(), 0.01);
      assertEquals(0.2586798572389053, complex3.abs(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-0.19376067683851136), complex3.real(), 0.01);
      assertEquals((-2.4174030592929867), complex3.arg(), 0.01);
      assertFalse(complex4.isInfinite());
      assertEquals(Double.NaN, complex4.imag(), 0.01);
      assertTrue(complex4.isNaN());
      assertEquals(Double.NaN, complex4.getReal(), 0.01);
      assertEquals(Double.NaN, complex4.arg(), 0.01);
      assertEquals(Double.NaN, complex4.norm(), 0.01);
      assertEquals(Double.NaN, complex4.abs(), 0.01);
      assertEquals(Double.NaN, complex4.real(), 0.01);
      assertEquals(Double.NaN, complex4.getImaginary(), 0.01);
      assertFalse(complex6.isInfinite());
      assertEquals(Double.NaN, complex6.arg(), 0.01);
      assertEquals(Double.NaN, complex6.norm(), 0.01);
      assertEquals(Double.NaN, complex6.abs(), 0.01);
      assertTrue(complex6.isNaN());
      assertEquals(Double.NaN, complex6.getReal(), 0.01);
      assertEquals(Double.NaN, complex6.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex6.imag(), 0.01);
      assertEquals(Double.NaN, complex6.real(), 0.01);
      assertEquals(0.0, complex7.norm(), 0.01);
      assertEquals(0.0, complex7.abs(), 0.01);
      assertFalse(complex7.isInfinite());
      assertEquals(0.0, complex7.real(), 0.01);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      assertEquals(0.0, complex7.imag(), 0.01);
      assertFalse(complex7.isNaN());
      assertEquals(0.0, complex7.getReal(), 0.01);
      assertEquals(0.0, complex7.arg(), 0.01);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex7);
      assertNotSame(complex4, complex5);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex6);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex6, complex5);
      assertNotSame(complex6, complex0);
      assertNotSame(complex6, complex3);
      assertNotSame(complex6, complex7);
      assertNotSame(complex6, complex2);
      assertNotSame(complex6, complex1);
      assertNotSame(complex6, complex4);
      assertNotSame(complex7, complex5);
      assertNotSame(complex7, complex2);
      assertNotSame(complex7, complex6);
      assertNotSame(complex7, complex0);
      assertNotSame(complex7, complex3);
      assertNotSame(complex7, complex1);
      assertNotSame(complex7, complex4);
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex6));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex5));
      assertFalse(complex0.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex4));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex6));
      assertFalse(complex3.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex2));
      assertTrue(complex4.equals((Object)complex6));
      assertFalse(complex4.equals((Object)complex5));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertTrue(complex6.equals((Object)complex4));
      assertFalse(complex6.equals((Object)complex5));
      
      Complex complex8 = complex3.I.sin();
      assertNotNull(complex8);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-0.19376067683851136), complex3.getReal(), 0.01);
      assertEquals(0.06691526854114044, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-0.17138281317629955), complex3.getImaginary(), 0.01);
      assertEquals((-0.17138281317629955), complex3.imag(), 0.01);
      assertEquals(0.2586798572389053, complex3.abs(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-0.19376067683851136), complex3.real(), 0.01);
      assertEquals((-2.4174030592929867), complex3.arg(), 0.01);
      assertEquals(1.3810978455418155, complex8.norm(), 0.01);
      assertEquals(1.1752011936438014, complex8.imag(), 0.01);
      assertEquals(1.1752011936438014, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(1.5707963267948966, complex8.arg(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.real(), 0.01);
      assertEquals(1.1752011936438014, complex8.abs(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex5);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      
      Complex complex9 = complex0.divide(1.0);
      assertNotNull(complex9);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex9.norm(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals((-0.7490365848608095), complex9.real(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals((-0.6625286367698044), complex9.getImaginary(), 0.01);
      assertEquals(1.0, complex9.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex9.imag(), 0.01);
      assertEquals((-2.4174030592929867), complex9.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex9.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex2);
      
      Complex complex10 = complex9.ONE.pow(1.0);
      assertNotNull(complex10);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex9.norm(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals((-0.7490365848608095), complex9.real(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals((-0.6625286367698044), complex9.getImaginary(), 0.01);
      assertEquals(1.0, complex9.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex9.imag(), 0.01);
      assertEquals((-2.4174030592929867), complex9.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex9.getReal(), 0.01);
      assertEquals(1.0, complex10.norm(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(1.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(1.0, complex10.abs(), 0.01);
      assertEquals(0.0, complex10.arg(), 0.01);
      assertEquals(0.0, complex10.imag(), 0.01);
      assertEquals(1.0, complex10.real(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex2);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex8);
      
      Complex complex11 = Complex.ofPolar(1.0, 1.0);
      assertNotNull(complex11);
      assertEquals(1.0, complex11.norm(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex11.isNaN());
      assertEquals(1.0, complex11.abs(), 0.01);
      assertEquals(1.0, complex11.arg(), 0.01);
      assertEquals(0.8414709848078965, complex11.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex11.real(), 0.01);
      assertEquals(0.8414709848078965, complex11.imag(), 0.01);
      assertEquals(0.5403023058681398, complex11.getReal(), 0.01);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex8);
      
      Complex complex12 = complex10.ONE.add(complex11);
      assertNotNull(complex12);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex9.norm(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals((-0.7490365848608095), complex9.real(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals((-0.6625286367698044), complex9.getImaginary(), 0.01);
      assertEquals(1.0, complex9.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex9.imag(), 0.01);
      assertEquals((-2.4174030592929867), complex9.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex9.getReal(), 0.01);
      assertEquals(1.0, complex10.norm(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(1.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(1.0, complex10.abs(), 0.01);
      assertEquals(0.0, complex10.arg(), 0.01);
      assertEquals(0.0, complex10.imag(), 0.01);
      assertEquals(1.0, complex10.real(), 0.01);
      assertEquals(1.0, complex11.norm(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex11.isNaN());
      assertEquals(1.0, complex11.abs(), 0.01);
      assertEquals(1.0, complex11.arg(), 0.01);
      assertEquals(0.8414709848078965, complex11.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex11.real(), 0.01);
      assertEquals(0.8414709848078965, complex11.imag(), 0.01);
      assertEquals(0.5403023058681398, complex11.getReal(), 0.01);
      assertEquals(1.7551651237807455, complex12.abs(), 0.01);
      assertEquals(1.5403023058681398, complex12.real(), 0.01);
      assertEquals(0.8414709848078965, complex12.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex12.imag(), 0.01);
      assertEquals(3.0806046117362795, complex12.norm(), 0.01);
      assertFalse(complex12.isNaN());
      assertEquals(1.5403023058681398, complex12.getReal(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals(0.5, complex12.arg(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex12);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex2);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex12);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex0);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex8);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex8);
      assertNotSame(complex12, complex11);
      
      Complex complex13 = complex10.ZERO.tanh();
      assertNotNull(complex13);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex9.norm(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals((-0.7490365848608095), complex9.real(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals((-0.6625286367698044), complex9.getImaginary(), 0.01);
      assertEquals(1.0, complex9.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex9.imag(), 0.01);
      assertEquals((-2.4174030592929867), complex9.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex9.getReal(), 0.01);
      assertEquals(1.0, complex10.norm(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(1.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(1.0, complex10.abs(), 0.01);
      assertEquals(0.0, complex10.arg(), 0.01);
      assertEquals(0.0, complex10.imag(), 0.01);
      assertEquals(1.0, complex10.real(), 0.01);
      assertEquals(0.0, complex13.norm(), 0.01);
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertEquals(0.0, complex13.getReal(), 0.01);
      assertEquals(0.0, complex13.imag(), 0.01);
      assertEquals(0.0, complex13.real(), 0.01);
      assertEquals(0.0, complex13.arg(), 0.01);
      assertEquals(0.0, complex13.abs(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex13);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex12);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex8);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex12);
      
      Complex complex14 = complex8.I.subtract(0.0);
      assertNotNull(complex14);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-0.19376067683851136), complex3.getReal(), 0.01);
      assertEquals(0.06691526854114044, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-0.17138281317629955), complex3.getImaginary(), 0.01);
      assertEquals((-0.17138281317629955), complex3.imag(), 0.01);
      assertEquals(0.2586798572389053, complex3.abs(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-0.19376067683851136), complex3.real(), 0.01);
      assertEquals((-2.4174030592929867), complex3.arg(), 0.01);
      assertEquals(1.3810978455418155, complex8.norm(), 0.01);
      assertEquals(1.1752011936438014, complex8.imag(), 0.01);
      assertEquals(1.1752011936438014, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(1.5707963267948966, complex8.arg(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.real(), 0.01);
      assertEquals(1.1752011936438014, complex8.abs(), 0.01);
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertEquals(1.0, complex14.abs(), 0.01);
      assertFalse(complex14.isNaN());
      assertEquals(1.0, complex14.norm(), 0.01);
      assertFalse(complex14.isInfinite());
      assertEquals(1.5707963267948966, complex14.arg(), 0.01);
      assertEquals(1.0, complex14.getImaginary(), 0.01);
      assertEquals(1.0, complex14.imag(), 0.01);
      assertEquals(0.0, complex14.real(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex5);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex14, complex1);
      assertNotSame(complex14, complex11);
      assertNotSame(complex14, complex10);
      assertNotSame(complex14, complex5);
      assertNotSame(complex14, complex0);
      assertNotSame(complex14, complex13);
      assertNotSame(complex14, complex2);
      assertNotSame(complex14, complex4);
      assertNotSame(complex14, complex12);
      assertNotSame(complex14, complex7);
      assertNotSame(complex14, complex9);
      assertNotSame(complex14, complex3);
      assertNotSame(complex14, complex8);
      assertNotSame(complex14, complex6);
      
      Complex complex15 = complex13.ONE.subtract(1.0);
      assertNotNull(complex15);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex9.norm(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals((-0.7490365848608095), complex9.real(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals((-0.6625286367698044), complex9.getImaginary(), 0.01);
      assertEquals(1.0, complex9.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex9.imag(), 0.01);
      assertEquals((-2.4174030592929867), complex9.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex9.getReal(), 0.01);
      assertEquals(1.0, complex10.norm(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(1.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(1.0, complex10.abs(), 0.01);
      assertEquals(0.0, complex10.arg(), 0.01);
      assertEquals(0.0, complex10.imag(), 0.01);
      assertEquals(1.0, complex10.real(), 0.01);
      assertEquals(0.0, complex13.norm(), 0.01);
      assertFalse(complex13.isInfinite());
      assertFalse(complex13.isNaN());
      assertEquals(0.0, complex13.getImaginary(), 0.01);
      assertEquals(0.0, complex13.getReal(), 0.01);
      assertEquals(0.0, complex13.imag(), 0.01);
      assertEquals(0.0, complex13.real(), 0.01);
      assertEquals(0.0, complex13.arg(), 0.01);
      assertEquals(0.0, complex13.abs(), 0.01);
      assertEquals(0.0, complex15.real(), 0.01);
      assertEquals(0.0, complex15.arg(), 0.01);
      assertFalse(complex15.isInfinite());
      assertEquals(0.0, complex15.norm(), 0.01);
      assertEquals(0.0, complex15.abs(), 0.01);
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertFalse(complex15.isNaN());
      assertEquals(0.0, complex15.imag(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex13);
      assertNotSame(complex10, complex15);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex14);
      assertNotSame(complex10, complex12);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex8);
      assertNotSame(complex13, complex10);
      assertNotSame(complex13, complex2);
      assertNotSame(complex13, complex15);
      assertNotSame(complex13, complex7);
      assertNotSame(complex13, complex0);
      assertNotSame(complex13, complex4);
      assertNotSame(complex13, complex6);
      assertNotSame(complex13, complex1);
      assertNotSame(complex13, complex11);
      assertNotSame(complex13, complex14);
      assertNotSame(complex13, complex5);
      assertNotSame(complex13, complex9);
      assertNotSame(complex13, complex3);
      assertNotSame(complex13, complex8);
      assertNotSame(complex13, complex12);
      assertNotSame(complex15, complex7);
      assertNotSame(complex15, complex10);
      assertNotSame(complex15, complex11);
      assertNotSame(complex15, complex2);
      assertNotSame(complex15, complex4);
      assertNotSame(complex15, complex13);
      assertNotSame(complex15, complex0);
      assertNotSame(complex15, complex9);
      assertNotSame(complex15, complex5);
      assertNotSame(complex15, complex14);
      assertNotSame(complex15, complex8);
      assertNotSame(complex15, complex12);
      assertNotSame(complex15, complex6);
      assertNotSame(complex15, complex1);
      assertNotSame(complex15, complex3);
      
      Complex complex16 = complex8.ZERO.subtract(1.0);
      assertNotNull(complex16);
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      assertEquals((-1.0), complex16.getReal(), 0.01);
      assertEquals(0.0, complex16.imag(), 0.01);
      assertFalse(complex16.isNaN());
      assertEquals(1.0, complex16.norm(), 0.01);
      assertEquals(3.141592653589793, complex16.arg(), 0.01);
      assertFalse(complex16.isInfinite());
      assertEquals(1.0, complex16.abs(), 0.01);
      assertEquals((-1.0), complex16.real(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-0.19376067683851136), complex3.getReal(), 0.01);
      assertEquals(0.06691526854114044, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-0.17138281317629955), complex3.getImaginary(), 0.01);
      assertEquals((-0.17138281317629955), complex3.imag(), 0.01);
      assertEquals(0.2586798572389053, complex3.abs(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-0.19376067683851136), complex3.real(), 0.01);
      assertEquals((-2.4174030592929867), complex3.arg(), 0.01);
      assertEquals(1.3810978455418155, complex8.norm(), 0.01);
      assertEquals(1.1752011936438014, complex8.imag(), 0.01);
      assertEquals(1.1752011936438014, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(1.5707963267948966, complex8.arg(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.real(), 0.01);
      assertEquals(1.1752011936438014, complex8.abs(), 0.01);
      assertNotSame(complex16, complex8);
      assertNotSame(complex16, complex12);
      assertNotSame(complex16, complex3);
      assertNotSame(complex16, complex13);
      assertNotSame(complex16, complex4);
      assertNotSame(complex16, complex7);
      assertNotSame(complex16, complex9);
      assertNotSame(complex16, complex14);
      assertNotSame(complex16, complex1);
      assertNotSame(complex16, complex6);
      assertNotSame(complex16, complex0);
      assertNotSame(complex16, complex11);
      assertNotSame(complex16, complex15);
      assertNotSame(complex16, complex2);
      assertNotSame(complex16, complex10);
      assertNotSame(complex16, complex5);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex5);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      
      Complex complex17 = Complex.ofPolar(0.0, 2098.332060849);
      assertNotNull(complex17);
      assertEquals(-0.0, complex17.getImaginary(), 0.01);
      assertEquals(0.0, complex17.getReal(), 0.01);
      assertEquals(-0.0, complex17.imag(), 0.01);
      assertFalse(complex17.isInfinite());
      assertFalse(complex17.isNaN());
      assertEquals(0.0, complex17.norm(), 0.01);
      assertEquals(0.0, complex17.abs(), 0.01);
      assertEquals(0.0, complex17.real(), 0.01);
      assertEquals(-0.0, complex17.arg(), 0.01);
      assertNotSame(complex17, complex6);
      assertNotSame(complex17, complex13);
      assertNotSame(complex17, complex12);
      assertNotSame(complex17, complex14);
      assertNotSame(complex17, complex5);
      assertNotSame(complex17, complex2);
      assertNotSame(complex17, complex15);
      assertNotSame(complex17, complex0);
      assertNotSame(complex17, complex4);
      assertNotSame(complex17, complex16);
      assertNotSame(complex17, complex11);
      assertNotSame(complex17, complex10);
      assertNotSame(complex17, complex7);
      assertNotSame(complex17, complex9);
      assertNotSame(complex17, complex1);
      assertNotSame(complex17, complex3);
      assertNotSame(complex17, complex8);
      
      Complex complex18 = complex9.ONE.subtract(complex8);
      assertNotNull(complex18);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1.1752011936438014), complex18.getImaginary(), 0.01);
      assertFalse(complex18.isInfinite());
      assertFalse(complex18.isNaN());
      assertEquals(1.0, complex18.getReal(), 0.01);
      assertEquals((-0.8657694832396586), complex18.arg(), 0.01);
      assertEquals(1.5430806348152437, complex18.abs(), 0.01);
      assertEquals(1.0, complex18.real(), 0.01);
      assertEquals(2.3810978455418157, complex18.norm(), 0.01);
      assertEquals((-1.1752011936438014), complex18.imag(), 0.01);
      assertEquals((-0.19376067683851136), complex3.getReal(), 0.01);
      assertEquals(0.06691526854114044, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-0.17138281317629955), complex3.getImaginary(), 0.01);
      assertEquals((-0.17138281317629955), complex3.imag(), 0.01);
      assertEquals(0.2586798572389053, complex3.abs(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-0.19376067683851136), complex3.real(), 0.01);
      assertEquals((-2.4174030592929867), complex3.arg(), 0.01);
      assertEquals(1.3810978455418155, complex8.norm(), 0.01);
      assertEquals(1.1752011936438014, complex8.imag(), 0.01);
      assertEquals(1.1752011936438014, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(1.5707963267948966, complex8.arg(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.real(), 0.01);
      assertEquals(1.1752011936438014, complex8.abs(), 0.01);
      assertEquals(1.0, complex9.norm(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals((-0.7490365848608095), complex9.real(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals((-0.6625286367698044), complex9.getImaginary(), 0.01);
      assertEquals(1.0, complex9.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex9.imag(), 0.01);
      assertEquals((-2.4174030592929867), complex9.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex9.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex17);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex5);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex18);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      
      boolean boolean0 = complex18.ZERO.isFinite();
      assertTrue(boolean0);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1.1752011936438014), complex18.getImaginary(), 0.01);
      assertFalse(complex18.isInfinite());
      assertFalse(complex18.isNaN());
      assertEquals(1.0, complex18.getReal(), 0.01);
      assertEquals((-0.8657694832396586), complex18.arg(), 0.01);
      assertEquals(1.5430806348152437, complex18.abs(), 0.01);
      assertEquals(1.0, complex18.real(), 0.01);
      assertEquals(2.3810978455418157, complex18.norm(), 0.01);
      assertEquals((-1.1752011936438014), complex18.imag(), 0.01);
      assertEquals((-0.19376067683851136), complex3.getReal(), 0.01);
      assertEquals(0.06691526854114044, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-0.17138281317629955), complex3.getImaginary(), 0.01);
      assertEquals((-0.17138281317629955), complex3.imag(), 0.01);
      assertEquals(0.2586798572389053, complex3.abs(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-0.19376067683851136), complex3.real(), 0.01);
      assertEquals((-2.4174030592929867), complex3.arg(), 0.01);
      assertEquals(1.3810978455418155, complex8.norm(), 0.01);
      assertEquals(1.1752011936438014, complex8.imag(), 0.01);
      assertEquals(1.1752011936438014, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(1.5707963267948966, complex8.arg(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.real(), 0.01);
      assertEquals(1.1752011936438014, complex8.abs(), 0.01);
      assertEquals(1.0, complex9.norm(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals((-0.7490365848608095), complex9.real(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals((-0.6625286367698044), complex9.getImaginary(), 0.01);
      assertEquals(1.0, complex9.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex9.imag(), 0.01);
      assertEquals((-2.4174030592929867), complex9.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex9.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex17);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex5);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex18);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      
      Complex complex19 = complex8.cosh();
      assertNotNull(complex19);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-0.19376067683851136), complex3.getReal(), 0.01);
      assertEquals(0.06691526854114044, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-0.17138281317629955), complex3.getImaginary(), 0.01);
      assertEquals((-0.17138281317629955), complex3.imag(), 0.01);
      assertEquals(0.2586798572389053, complex3.abs(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-0.19376067683851136), complex3.real(), 0.01);
      assertEquals((-2.4174030592929867), complex3.arg(), 0.01);
      assertFalse(complex19.isInfinite());
      assertFalse(complex19.isNaN());
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      assertEquals(0.1485003461458099, complex19.norm(), 0.01);
      assertEquals(0.0, complex19.imag(), 0.01);
      assertEquals(0.38535742648327137, complex19.real(), 0.01);
      assertEquals(0.38535742648327137, complex19.getReal(), 0.01);
      assertEquals(0.0, complex19.arg(), 0.01);
      assertEquals(0.38535742648327137, complex19.abs(), 0.01);
      assertEquals(1.3810978455418155, complex8.norm(), 0.01);
      assertEquals(1.1752011936438014, complex8.imag(), 0.01);
      assertEquals(1.1752011936438014, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(1.5707963267948966, complex8.arg(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.real(), 0.01);
      assertEquals(1.1752011936438014, complex8.abs(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex5);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex11);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex19);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      
      Complex complex20 = complex3.add(complex11);
      assertNotNull(complex20);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-0.19376067683851136), complex3.getReal(), 0.01);
      assertEquals(0.06691526854114044, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-0.17138281317629955), complex3.getImaginary(), 0.01);
      assertEquals((-0.17138281317629955), complex3.imag(), 0.01);
      assertEquals(0.2586798572389053, complex3.abs(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-0.19376067683851136), complex3.real(), 0.01);
      assertEquals((-2.4174030592929867), complex3.arg(), 0.01);
      assertEquals(0.3465416290296284, complex20.real(), 0.01);
      assertFalse(complex20.isNaN());
      assertFalse(complex20.isInfinite());
      assertEquals(0.3465416290296284, complex20.getReal(), 0.01);
      assertEquals(0.5691092584110851, complex20.norm(), 0.01);
      assertEquals(0.670088171631597, complex20.imag(), 0.01);
      assertEquals(0.670088171631597, complex20.getImaginary(), 0.01);
      assertEquals(0.7543933048556867, complex20.abs(), 0.01);
      assertEquals(1.0935165265537425, complex20.arg(), 0.01);
      assertEquals(1.0, complex11.norm(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex11.isNaN());
      assertEquals(1.0, complex11.abs(), 0.01);
      assertEquals(1.0, complex11.arg(), 0.01);
      assertEquals(0.8414709848078965, complex11.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex11.real(), 0.01);
      assertEquals(0.8414709848078965, complex11.imag(), 0.01);
      assertEquals(0.5403023058681398, complex11.getReal(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex20);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex5);
      assertNotSame(complex20, complex17);
      assertNotSame(complex20, complex10);
      assertNotSame(complex20, complex15);
      assertNotSame(complex20, complex11);
      assertNotSame(complex20, complex13);
      assertNotSame(complex20, complex0);
      assertNotSame(complex20, complex4);
      assertNotSame(complex20, complex16);
      assertNotSame(complex20, complex2);
      assertNotSame(complex20, complex5);
      assertNotSame(complex20, complex18);
      assertNotSame(complex20, complex14);
      assertNotSame(complex20, complex6);
      assertNotSame(complex20, complex3);
      assertNotSame(complex20, complex12);
      assertNotSame(complex20, complex19);
      assertNotSame(complex20, complex8);
      assertNotSame(complex20, complex7);
      assertNotSame(complex20, complex1);
      assertNotSame(complex20, complex9);
      assertNotSame(complex11, complex18);
      assertNotSame(complex11, complex20);
      assertNotSame(complex11, complex14);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex13);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex15);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex17);
      assertNotSame(complex11, complex19);
      assertNotSame(complex11, complex16);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex8);
      
      Complex complex21 = complex19.I.sinh();
      assertNotNull(complex21);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-0.19376067683851136), complex3.getReal(), 0.01);
      assertEquals(0.06691526854114044, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-0.17138281317629955), complex3.getImaginary(), 0.01);
      assertEquals((-0.17138281317629955), complex3.imag(), 0.01);
      assertEquals(0.2586798572389053, complex3.abs(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-0.19376067683851136), complex3.real(), 0.01);
      assertEquals((-2.4174030592929867), complex3.arg(), 0.01);
      assertFalse(complex19.isInfinite());
      assertFalse(complex19.isNaN());
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      assertEquals(0.1485003461458099, complex19.norm(), 0.01);
      assertEquals(0.0, complex19.imag(), 0.01);
      assertEquals(0.38535742648327137, complex19.real(), 0.01);
      assertEquals(0.38535742648327137, complex19.getReal(), 0.01);
      assertEquals(0.0, complex19.arg(), 0.01);
      assertEquals(0.38535742648327137, complex19.abs(), 0.01);
      assertEquals(0.8414709848078965, complex21.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex21.imag(), 0.01);
      assertEquals(0.0, complex21.getReal(), 0.01);
      assertEquals(0.7080734182735712, complex21.norm(), 0.01);
      assertFalse(complex21.isInfinite());
      assertFalse(complex21.isNaN());
      assertEquals(1.5707963267948966, complex21.arg(), 0.01);
      assertEquals(0.8414709848078965, complex21.abs(), 0.01);
      assertEquals(0.0, complex21.real(), 0.01);
      assertEquals(1.3810978455418155, complex8.norm(), 0.01);
      assertEquals(1.1752011936438014, complex8.imag(), 0.01);
      assertEquals(1.1752011936438014, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(1.5707963267948966, complex8.arg(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.real(), 0.01);
      assertEquals(1.1752011936438014, complex8.abs(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex21);
      assertNotSame(complex3, complex20);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex5);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex21);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex20);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex11);
      assertNotSame(complex21, complex1);
      assertNotSame(complex21, complex0);
      assertNotSame(complex21, complex14);
      assertNotSame(complex21, complex11);
      assertNotSame(complex21, complex17);
      assertNotSame(complex21, complex8);
      assertNotSame(complex21, complex7);
      assertNotSame(complex21, complex9);
      assertNotSame(complex21, complex20);
      assertNotSame(complex21, complex6);
      assertNotSame(complex21, complex4);
      assertNotSame(complex21, complex19);
      assertNotSame(complex21, complex3);
      assertNotSame(complex21, complex12);
      assertNotSame(complex21, complex10);
      assertNotSame(complex21, complex2);
      assertNotSame(complex21, complex15);
      assertNotSame(complex21, complex18);
      assertNotSame(complex21, complex16);
      assertNotSame(complex21, complex13);
      assertNotSame(complex21, complex5);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex19);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex21);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex20);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      
      boolean boolean1 = complex1.isFinite();
      assertTrue(boolean1);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-0.7853981633974484), complex1.getImaginary(), 0.01);
      assertEquals(0.9232780589317505, complex1.abs(), 0.01);
      assertEquals((-2.124348154742396), complex1.arg(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals((-0.4853783050741926), complex1.getReal(), 0.01);
      assertEquals(0.852442374104781, complex1.norm(), 0.01);
      assertEquals((-0.4853783050741926), complex1.real(), 0.01);
      assertEquals((-0.7853981633974484), complex1.imag(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex1, complex19);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex12);
      assertNotSame(complex1, complex20);
      assertNotSame(complex1, complex11);
      assertNotSame(complex1, complex8);
      assertNotSame(complex1, complex17);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex7);
      assertNotSame(complex1, complex6);
      assertNotSame(complex1, complex9);
      assertNotSame(complex1, complex14);
      assertNotSame(complex1, complex21);
      assertNotSame(complex1, complex16);
      assertNotSame(complex1, complex15);
      assertNotSame(complex1, complex18);
      assertNotSame(complex1, complex10);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex5);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex13);
      
      boolean boolean2 = complex19.isFinite();
      assertTrue(boolean2);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-0.19376067683851136), complex3.getReal(), 0.01);
      assertEquals(0.06691526854114044, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-0.17138281317629955), complex3.getImaginary(), 0.01);
      assertEquals((-0.17138281317629955), complex3.imag(), 0.01);
      assertEquals(0.2586798572389053, complex3.abs(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-0.19376067683851136), complex3.real(), 0.01);
      assertEquals((-2.4174030592929867), complex3.arg(), 0.01);
      assertFalse(complex19.isInfinite());
      assertFalse(complex19.isNaN());
      assertEquals(0.0, complex19.getImaginary(), 0.01);
      assertEquals(0.1485003461458099, complex19.norm(), 0.01);
      assertEquals(0.0, complex19.imag(), 0.01);
      assertEquals(0.38535742648327137, complex19.real(), 0.01);
      assertEquals(0.38535742648327137, complex19.getReal(), 0.01);
      assertEquals(0.0, complex19.arg(), 0.01);
      assertEquals(0.38535742648327137, complex19.abs(), 0.01);
      assertEquals(1.3810978455418155, complex8.norm(), 0.01);
      assertEquals(1.1752011936438014, complex8.imag(), 0.01);
      assertEquals(1.1752011936438014, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(1.5707963267948966, complex8.arg(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.real(), 0.01);
      assertEquals(1.1752011936438014, complex8.abs(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex21);
      assertNotSame(complex3, complex20);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex5);
      assertNotSame(complex19, complex10);
      assertNotSame(complex19, complex16);
      assertNotSame(complex19, complex15);
      assertNotSame(complex19, complex21);
      assertNotSame(complex19, complex0);
      assertNotSame(complex19, complex2);
      assertNotSame(complex19, complex7);
      assertNotSame(complex19, complex12);
      assertNotSame(complex19, complex20);
      assertNotSame(complex19, complex5);
      assertNotSame(complex19, complex3);
      assertNotSame(complex19, complex6);
      assertNotSame(complex19, complex13);
      assertNotSame(complex19, complex9);
      assertNotSame(complex19, complex8);
      assertNotSame(complex19, complex18);
      assertNotSame(complex19, complex4);
      assertNotSame(complex19, complex1);
      assertNotSame(complex19, complex17);
      assertNotSame(complex19, complex14);
      assertNotSame(complex19, complex11);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex19);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex21);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex20);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      
      double double0 = complex0.real();
      assertEquals((-0.7490365848608095), double0, 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      
      Complex complex22 = complex18.conj();
      assertNotNull(complex22);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals((-1.1752011936438014), complex18.getImaginary(), 0.01);
      assertFalse(complex18.isInfinite());
      assertFalse(complex18.isNaN());
      assertEquals(1.0, complex18.getReal(), 0.01);
      assertEquals((-0.8657694832396586), complex18.arg(), 0.01);
      assertEquals(1.5430806348152437, complex18.abs(), 0.01);
      assertEquals(1.0, complex18.real(), 0.01);
      assertEquals(2.3810978455418157, complex18.norm(), 0.01);
      assertEquals((-1.1752011936438014), complex18.imag(), 0.01);
      assertEquals((-0.19376067683851136), complex3.getReal(), 0.01);
      assertEquals(0.06691526854114044, complex3.norm(), 0.01);
      assertFalse(complex3.isInfinite());
      assertEquals((-0.17138281317629955), complex3.getImaginary(), 0.01);
      assertEquals((-0.17138281317629955), complex3.imag(), 0.01);
      assertEquals(0.2586798572389053, complex3.abs(), 0.01);
      assertFalse(complex3.isNaN());
      assertEquals((-0.19376067683851136), complex3.real(), 0.01);
      assertEquals((-2.4174030592929867), complex3.arg(), 0.01);
      assertEquals(1.3810978455418155, complex8.norm(), 0.01);
      assertEquals(1.1752011936438014, complex8.imag(), 0.01);
      assertEquals(1.1752011936438014, complex8.getImaginary(), 0.01);
      assertFalse(complex8.isInfinite());
      assertEquals(1.5707963267948966, complex8.arg(), 0.01);
      assertFalse(complex8.isNaN());
      assertEquals(0.0, complex8.getReal(), 0.01);
      assertEquals(0.0, complex8.real(), 0.01);
      assertEquals(1.1752011936438014, complex8.abs(), 0.01);
      assertEquals(1.0, complex9.norm(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals((-0.7490365848608095), complex9.real(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals((-0.6625286367698044), complex9.getImaginary(), 0.01);
      assertEquals(1.0, complex9.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex9.imag(), 0.01);
      assertEquals((-2.4174030592929867), complex9.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex9.getReal(), 0.01);
      assertEquals(1.0, complex22.getReal(), 0.01);
      assertEquals(1.1752011936438014, complex22.imag(), 0.01);
      assertEquals(2.3810978455418157, complex22.norm(), 0.01);
      assertEquals(1.1752011936438014, complex22.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex22.abs(), 0.01);
      assertFalse(complex22.isInfinite());
      assertFalse(complex22.isNaN());
      assertEquals(0.8657694832396586, complex22.arg(), 0.01);
      assertEquals(1.0, complex22.real(), 0.01);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex18, complex20);
      assertNotSame(complex18, complex8);
      assertNotSame(complex18, complex14);
      assertNotSame(complex18, complex3);
      assertNotSame(complex18, complex12);
      assertNotSame(complex18, complex4);
      assertNotSame(complex18, complex13);
      assertNotSame(complex18, complex10);
      assertNotSame(complex18, complex16);
      assertNotSame(complex18, complex5);
      assertNotSame(complex18, complex2);
      assertNotSame(complex18, complex11);
      assertNotSame(complex18, complex0);
      assertNotSame(complex18, complex15);
      assertNotSame(complex18, complex21);
      assertNotSame(complex18, complex1);
      assertNotSame(complex18, complex7);
      assertNotSame(complex18, complex9);
      assertNotSame(complex18, complex6);
      assertNotSame(complex18, complex17);
      assertNotSame(complex18, complex22);
      assertNotSame(complex18, complex19);
      assertNotSame(complex3, complex9);
      assertNotSame(complex3, complex14);
      assertNotSame(complex3, complex18);
      assertNotSame(complex3, complex8);
      assertNotSame(complex3, complex21);
      assertNotSame(complex3, complex20);
      assertNotSame(complex3, complex11);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex6);
      assertNotSame(complex3, complex22);
      assertNotSame(complex3, complex17);
      assertNotSame(complex3, complex19);
      assertNotSame(complex3, complex7);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex15);
      assertNotSame(complex3, complex12);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex13);
      assertNotSame(complex3, complex10);
      assertNotSame(complex3, complex16);
      assertNotSame(complex3, complex5);
      assertNotSame(complex8, complex4);
      assertNotSame(complex8, complex19);
      assertNotSame(complex8, complex6);
      assertNotSame(complex8, complex13);
      assertNotSame(complex8, complex12);
      assertNotSame(complex8, complex17);
      assertNotSame(complex8, complex10);
      assertNotSame(complex8, complex2);
      assertNotSame(complex8, complex14);
      assertNotSame(complex8, complex15);
      assertNotSame(complex8, complex5);
      assertNotSame(complex8, complex21);
      assertNotSame(complex8, complex0);
      assertNotSame(complex8, complex18);
      assertNotSame(complex8, complex1);
      assertNotSame(complex8, complex16);
      assertNotSame(complex8, complex11);
      assertNotSame(complex8, complex20);
      assertNotSame(complex8, complex22);
      assertNotSame(complex8, complex9);
      assertNotSame(complex8, complex3);
      assertNotSame(complex8, complex7);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex21);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex18);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex19);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex22);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex20);
      assertNotSame(complex22, complex3);
      assertNotSame(complex22, complex8);
      assertNotSame(complex22, complex14);
      assertNotSame(complex22, complex12);
      assertNotSame(complex22, complex7);
      assertNotSame(complex22, complex9);
      assertNotSame(complex22, complex17);
      assertNotSame(complex22, complex19);
      assertNotSame(complex22, complex20);
      assertNotSame(complex22, complex6);
      assertNotSame(complex22, complex1);
      assertNotSame(complex22, complex16);
      assertNotSame(complex22, complex21);
      assertNotSame(complex22, complex11);
      assertNotSame(complex22, complex0);
      assertNotSame(complex22, complex15);
      assertNotSame(complex22, complex4);
      assertNotSame(complex22, complex10);
      assertNotSame(complex22, complex2);
      assertNotSame(complex22, complex18);
      assertNotSame(complex22, complex5);
      assertNotSame(complex22, complex13);
      
      Complex complex23 = Complex.ofPolar(0.0, 3.8657822478866);
      assertNotNull(complex23);
      assertEquals(0.0, complex23.norm(), 0.01);
      assertFalse(complex23.isInfinite());
      assertEquals((-3.141592653589793), complex23.arg(), 0.01);
      assertEquals(-0.0, complex23.imag(), 0.01);
      assertEquals(-0.0, complex23.real(), 0.01);
      assertEquals(-0.0, complex23.getImaginary(), 0.01);
      assertEquals(0.0, complex23.abs(), 0.01);
      assertFalse(complex23.isNaN());
      assertEquals(-0.0, complex23.getReal(), 0.01);
      assertNotSame(complex23, complex20);
      assertNotSame(complex23, complex14);
      assertNotSame(complex23, complex8);
      assertNotSame(complex23, complex18);
      assertNotSame(complex23, complex9);
      assertNotSame(complex23, complex6);
      assertNotSame(complex23, complex13);
      assertNotSame(complex23, complex5);
      assertNotSame(complex23, complex22);
      assertNotSame(complex23, complex1);
      assertNotSame(complex23, complex3);
      assertNotSame(complex23, complex7);
      assertNotSame(complex23, complex12);
      assertNotSame(complex23, complex10);
      assertNotSame(complex23, complex2);
      assertNotSame(complex23, complex15);
      assertNotSame(complex23, complex11);
      assertNotSame(complex23, complex17);
      assertNotSame(complex23, complex16);
      assertNotSame(complex23, complex4);
      assertNotSame(complex23, complex19);
      assertNotSame(complex23, complex0);
      assertNotSame(complex23, complex21);
      
      Complex complex24 = complex0.pow(0.0);
      assertNotNull(complex24);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex24.abs(), 0.01);
      assertEquals(1.0, complex24.real(), 0.01);
      assertEquals(-0.0, complex24.getImaginary(), 0.01);
      assertEquals(1.0, complex24.getReal(), 0.01);
      assertFalse(complex24.isNaN());
      assertEquals(1.0, complex24.norm(), 0.01);
      assertEquals(-0.0, complex24.imag(), 0.01);
      assertEquals(-0.0, complex24.arg(), 0.01);
      assertFalse(complex24.isInfinite());
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex24);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex9);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex24, complex7);
      assertNotSame(complex24, complex10);
      assertNotSame(complex24, complex2);
      assertNotSame(complex24, complex17);
      assertNotSame(complex24, complex6);
      assertNotSame(complex24, complex13);
      assertNotSame(complex24, complex19);
      assertNotSame(complex24, complex16);
      assertNotSame(complex24, complex21);
      assertNotSame(complex24, complex0);
      assertNotSame(complex24, complex11);
      assertNotSame(complex24, complex14);
      assertNotSame(complex24, complex15);
      assertNotSame(complex24, complex18);
      assertNotSame(complex24, complex4);
      assertNotSame(complex24, complex9);
      assertNotSame(complex24, complex23);
      assertNotSame(complex24, complex1);
      assertNotSame(complex24, complex22);
      assertNotSame(complex24, complex5);
      assertNotSame(complex24, complex12);
      assertNotSame(complex24, complex8);
      assertNotSame(complex24, complex3);
      assertNotSame(complex24, complex20);
      
      Complex complex25 = complex12.conj();
      assertNotNull(complex25);
      assertFalse(complex0.isNaN());
      assertEquals(1.0, complex0.norm(), 0.01);
      assertEquals((-0.7490365848608095), complex0.real(), 0.01);
      assertEquals((-0.7490365848608095), complex0.getReal(), 0.01);
      assertEquals((-0.6625286367698044), complex0.imag(), 0.01);
      assertEquals((-0.6625286367698044), complex0.getImaginary(), 0.01);
      assertEquals((-2.4174030592929867), complex0.arg(), 0.01);
      assertEquals(1.0, complex0.abs(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(1.0, complex9.norm(), 0.01);
      assertFalse(complex9.isInfinite());
      assertEquals((-0.7490365848608095), complex9.real(), 0.01);
      assertFalse(complex9.isNaN());
      assertEquals((-0.6625286367698044), complex9.getImaginary(), 0.01);
      assertEquals(1.0, complex9.abs(), 0.01);
      assertEquals((-0.6625286367698044), complex9.imag(), 0.01);
      assertEquals((-2.4174030592929867), complex9.arg(), 0.01);
      assertEquals((-0.7490365848608095), complex9.getReal(), 0.01);
      assertEquals(1.0, complex10.norm(), 0.01);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals(1.0, complex10.getReal(), 0.01);
      assertFalse(complex10.isInfinite());
      assertFalse(complex10.isNaN());
      assertEquals(1.0, complex10.abs(), 0.01);
      assertEquals(0.0, complex10.arg(), 0.01);
      assertEquals(0.0, complex10.imag(), 0.01);
      assertEquals(1.0, complex10.real(), 0.01);
      assertEquals(1.0, complex11.norm(), 0.01);
      assertFalse(complex11.isInfinite());
      assertFalse(complex11.isNaN());
      assertEquals(1.0, complex11.abs(), 0.01);
      assertEquals(1.0, complex11.arg(), 0.01);
      assertEquals(0.8414709848078965, complex11.getImaginary(), 0.01);
      assertEquals(0.5403023058681398, complex11.real(), 0.01);
      assertEquals(0.8414709848078965, complex11.imag(), 0.01);
      assertEquals(0.5403023058681398, complex11.getReal(), 0.01);
      assertEquals(1.7551651237807455, complex12.abs(), 0.01);
      assertEquals(1.5403023058681398, complex12.real(), 0.01);
      assertEquals(0.8414709848078965, complex12.getImaginary(), 0.01);
      assertEquals(0.8414709848078965, complex12.imag(), 0.01);
      assertEquals(3.0806046117362795, complex12.norm(), 0.01);
      assertFalse(complex12.isNaN());
      assertEquals(1.5403023058681398, complex12.getReal(), 0.01);
      assertFalse(complex12.isInfinite());
      assertEquals(0.5, complex12.arg(), 0.01);
      assertFalse(complex25.isInfinite());
      assertFalse(complex25.isNaN());
      assertEquals(3.0806046117362795, complex25.norm(), 0.01);
      assertEquals(1.7551651237807455, complex25.abs(), 0.01);
      assertEquals(1.5403023058681398, complex25.getReal(), 0.01);
      assertEquals((-0.5), complex25.arg(), 0.01);
      assertEquals((-0.8414709848078965), complex25.getImaginary(), 0.01);
      assertEquals((-0.8414709848078965), complex25.imag(), 0.01);
      assertEquals(1.5403023058681398, complex25.real(), 0.01);
      assertNotSame(complex0, complex20);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex22);
      assertNotSame(complex0, complex19);
      assertNotSame(complex0, complex5);
      assertNotSame(complex0, complex14);
      assertNotSame(complex0, complex16);
      assertNotSame(complex0, complex11);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex17);
      assertNotSame(complex0, complex10);
      assertNotSame(complex0, complex23);
      assertNotSame(complex0, complex7);
      assertNotSame(complex0, complex12);
      assertNotSame(complex0, complex8);
      assertNotSame(complex0, complex6);
      assertNotSame(complex0, complex13);
      assertNotSame(complex0, complex18);
      assertNotSame(complex0, complex15);
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex21);
      assertNotSame(complex0, complex24);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex25);
      assertNotSame(complex0, complex9);
      assertNotSame(complex9, complex0);
      assertNotSame(complex9, complex21);
      assertNotSame(complex9, complex16);
      assertNotSame(complex9, complex11);
      assertNotSame(complex9, complex5);
      assertNotSame(complex9, complex10);
      assertNotSame(complex9, complex15);
      assertNotSame(complex9, complex4);
      assertNotSame(complex9, complex13);
      assertNotSame(complex9, complex2);
      assertNotSame(complex9, complex3);
      assertNotSame(complex9, complex25);
      assertNotSame(complex9, complex19);
      assertNotSame(complex9, complex1);
      assertNotSame(complex9, complex6);
      assertNotSame(complex9, complex20);
      assertNotSame(complex9, complex18);
      assertNotSame(complex9, complex24);
      assertNotSame(complex9, complex12);
      assertNotSame(complex9, complex8);
      assertNotSame(complex9, complex14);
      assertNotSame(complex9, complex7);
      assertNotSame(complex9, complex17);
      assertNotSame(complex9, complex22);
      assertNotSame(complex9, complex23);
      assertNotSame(complex10, complex11);
      assertNotSame(complex10, complex16);
      assertNotSame(complex10, complex2);
      assertNotSame(complex10, complex21);
      assertNotSame(complex10, complex13);
      assertNotSame(complex10, complex15);
      assertNotSame(complex10, complex0);
      assertNotSame(complex10, complex4);
      assertNotSame(complex10, complex14);
      assertNotSame(complex10, complex12);
      assertNotSame(complex10, complex22);
      assertNotSame(complex10, complex23);
      assertNotSame(complex10, complex7);
      assertNotSame(complex10, complex8);
      assertNotSame(complex10, complex24);
      assertNotSame(complex10, complex17);
      assertNotSame(complex10, complex18);
      assertNotSame(complex10, complex20);
      assertNotSame(complex10, complex5);
      assertNotSame(complex10, complex19);
      assertNotSame(complex10, complex1);
      assertNotSame(complex10, complex9);
      assertNotSame(complex10, complex6);
      assertNotSame(complex10, complex3);
      assertNotSame(complex10, complex25);
      assertNotSame(complex11, complex18);
      assertNotSame(complex11, complex4);
      assertNotSame(complex11, complex13);
      assertNotSame(complex11, complex15);
      assertNotSame(complex11, complex24);
      assertNotSame(complex11, complex19);
      assertNotSame(complex11, complex1);
      assertNotSame(complex11, complex6);
      assertNotSame(complex11, complex3);
      assertNotSame(complex11, complex25);
      assertNotSame(complex11, complex22);
      assertNotSame(complex11, complex20);
      assertNotSame(complex11, complex14);
      assertNotSame(complex11, complex9);
      assertNotSame(complex11, complex5);
      assertNotSame(complex11, complex0);
      assertNotSame(complex11, complex21);
      assertNotSame(complex11, complex10);
      assertNotSame(complex11, complex2);
      assertNotSame(complex11, complex17);
      assertNotSame(complex11, complex16);
      assertNotSame(complex11, complex23);
      assertNotSame(complex11, complex12);
      assertNotSame(complex11, complex7);
      assertNotSame(complex11, complex8);
      assertNotSame(complex12, complex5);
      assertNotSame(complex12, complex14);
      assertNotSame(complex12, complex20);
      assertNotSame(complex12, complex9);
      assertNotSame(complex12, complex22);
      assertNotSame(complex12, complex23);
      assertNotSame(complex12, complex0);
      assertNotSame(complex12, complex11);
      assertNotSame(complex12, complex21);
      assertNotSame(complex12, complex19);
      assertNotSame(complex12, complex24);
      assertNotSame(complex12, complex6);
      assertNotSame(complex12, complex3);
      assertNotSame(complex12, complex25);
      assertNotSame(complex12, complex18);
      assertNotSame(complex12, complex1);
      assertNotSame(complex12, complex13);
      assertNotSame(complex12, complex4);
      assertNotSame(complex12, complex17);
      assertNotSame(complex12, complex2);
      assertNotSame(complex12, complex15);
      assertNotSame(complex12, complex10);
      assertNotSame(complex12, complex7);
      assertNotSame(complex12, complex16);
      assertNotSame(complex12, complex8);
      assertNotSame(complex25, complex11);
      assertNotSame(complex25, complex21);
      assertNotSame(complex25, complex10);
      assertNotSame(complex25, complex16);
      assertNotSame(complex25, complex15);
      assertNotSame(complex25, complex4);
      assertNotSame(complex25, complex0);
      assertNotSame(complex25, complex13);
      assertNotSame(complex25, complex2);
      assertNotSame(complex25, complex8);
      assertNotSame(complex25, complex12);
      assertNotSame(complex25, complex14);
      assertNotSame(complex25, complex23);
      assertNotSame(complex25, complex22);
      assertNotSame(complex25, complex7);
      assertNotSame(complex25, complex17);
      assertNotSame(complex25, complex18);
      assertNotSame(complex25, complex24);
      assertNotSame(complex25, complex20);
      assertNotSame(complex25, complex5);
      assertNotSame(complex25, complex19);
      assertNotSame(complex25, complex3);
      assertNotSame(complex25, complex6);
      assertNotSame(complex25, complex1);
      assertNotSame(complex25, complex9);
  }
}
