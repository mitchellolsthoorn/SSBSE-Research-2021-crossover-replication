/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:32:39 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = StringUtils.wrap("clone", 'p');
      assertNotNull(string0);
      assertEquals("pclonep", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "pclonep";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean1 = StringUtils.isNumericSpace(charSequenceArray0[0]);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("pclonep", "pclonep", 57);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.mid("", (-1561), 1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[1], (CharSequence) "clone");
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceIgnoreCase("TEIl::<3`!", "pclonep", "clone", 127);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("TEIl::<3`!", string2);
      
      boolean boolean2 = StringUtils.isMixedCase("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", 65536, 65536);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.substringsBetween("p{InCombiningDiacriticalMarks}+", "6`qS$_YV/|H43N?", "LE<6T(g");
      assertNull(stringArray1);
      
      String string1 = StringUtils.abbreviateMiddle("6`qS$_YV/|H43N?", "\r", 57);
      assertNotNull(string1);
      assertEquals("6`qS$_YV/|H43N?", string1);
      
      String string2 = StringUtils.substringAfterLast("Exception cloning Cloneable type ", 1450);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.mid((String) null, 2, 65536);
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("org.apache.commons.lang3.RegExUtils", "FJUol3aRVt$ov^hM.");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("FJUol3aRVt$ov^hM.org.apache.commons.lang3.RegExUtilsFJUol3aRVt$ov^hM.", string4);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.wrap("K", '\u001C');
      assertNotNull(string0);
      assertEquals("\u001CK\u001C", string0);
      
      charSequenceArray0[2] = (CharSequence) "K";
      charSequenceArray0[2] = null;
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean2 = StringUtils.isNumericSpace("\u001CK\u001C");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'fL{[xV^C3e]";
      stringArray0[1] = "'fL{[xV^C3e]";
      stringArray0[2] = "'fL{[xV^C3e]";
      stringArray0[3] = "'fL{[xV^C3e]";
      stringArray0[4] = "'fL{[xV^C3e]";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(5, stringArray0.length);
      assertEquals("'fL{[xV^C3e]", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("'fL{[xV^C3e]");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("4>'aT>6j9H6PKb_X5", ']');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]4>'aT>6j9H6PKb_X5]", string1);
      
      String string2 = StringUtils.abbreviateMiddle("'fL{[xV^C3e]", "^K]KFPV[w8ya{a5a;v?8WJs[:vo~^", 12);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("'fL{[xV^C3e]", string2);
      
      int int0 = StringUtils.compare("8dIBwtcH`L44bnu", "8dIBwtcH`L44bnu", false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '5', 26, 7);
      assertNotNull(string0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals("", string0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.center("", 7, ", '");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(", ', ',", string2);
      
      String string3 = StringUtils.chomp("{M>51lVOm?8Q!,4");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("{M>51lVOm?8Q!,4", string3);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "6CC|";
      String string1 = StringUtils.substringBefore("6CC|", "6CC|");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[0];
      String string2 = StringUtils.join(byteArray0, 'Y');
      assertNotNull(string2);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("6CC|");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.repeat('Y', 0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.repeat('Q', (-891));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string5 = StringUtils.trimToNull("uXPX%|");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("uXPX%|", string5);
      
      charSequenceArray0[0] = (CharSequence) "uXPX%|";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "6CC|";
      boolean boolean2 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string6 = StringUtils.chop("aD!e8@+-rsC");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("aD!e8@+-rs", string6);
      
      boolean boolean3 = StringUtils.containsNone(charSequenceArray0[2], (char[]) null);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "aD!e8@+-rsC", (CharSequence) "", 4196);
      assertFalse(int1 == int0);
      assertEquals(11, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate(", Length: 0", (-32768), (-32768));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.rightPad(" ", 1, '-');
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Search and Replace array lengths don't match: ");
      assertNotNull(stringArray0);
      assertEquals(17, stringArray0.length);
      
      boolean boolean2 = StringUtils.isAlphaSpace("7qo");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = StringUtils.substringAfter(" ", " ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.wrap("", '~');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = StringUtils.substringBefore("6CC|", (String) null);
      assertNotNull(string0);
      assertEquals("6CC|", string0);
      
      int int0 = StringUtils.length("6CC|");
      assertEquals(4, int0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = StringUtils.join(byteArray0, 'Y');
      assertNotNull(string1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.repeat('Y', 4);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("YYYY", string2);
      
      String string3 = StringUtils.repeat('Q', (-891));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string4 = StringUtils.trimToNull("uXPX%|");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("uXPX%|", string4);
      
      charSequenceArray0[0] = (CharSequence) "uXPX%|";
      charSequenceArray0[1] = (CharSequence) "YYYY";
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean2 = StringUtils.startsWithAny("6CC|", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = StringUtils.chop("aD!e8@+-rsC");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("aD!e8@+-rs", string5);
      
      char[] charArray0 = null;
      boolean boolean3 = StringUtils.containsNone(charSequenceArray0[2], (char[]) null);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "aD!e8@+-rsC", (CharSequence) "6CC|", 4196);
      assertFalse(int1 == int0);
      assertEquals(11, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate(", Length: 0", (-32768), (-32768));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.substring("", 49, 4);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("org.apache.commons.lang3.LocaleUtils", 100, "org.apache.commons.lang3.Charsets");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.Charsetorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.Charset", string1);
      
      String string2 = StringUtils.normalizeSpace((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null, 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("ch", "ch");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrapIfMissing("", "y%hp2+6qT;SoUv]O");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("-qf#<n", "|[U(rl<zma?do5DH", 4);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "-qf#<n", supplier0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("-qf#<n", charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("-qf#<n", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWith("-qf#<n", "|[U(rl<zma?do5DH");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.mid("@ store ", 1, 4);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals(" sto", string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " sto", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("7;Qv+w!q]1?mS{lrvbO", "7;Qv+w!q]1?mS{lrvbO");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "7;Qv+w!q]1?mS{lrvbO");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.stripAccents("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[21];
      objectArray0[2] = (Object) "7;Qv+w!q]1?mS{lrvbO";
      objectArray0[3] = (Object) "";
      objectArray0[6] = (Object) "";
      String string2 = StringUtils.replaceIgnoreCase("", "Compar#tov ", "Object varargs must not be null");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "Compar#tov ";
      charSequenceArray0[5] = (CharSequence) "Compar#tov ";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "Object varargs must not be null";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isMixedCase(stringArray0[2]);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.center(stringArray0[2], 4);
      assertNull(string1);
      assertEquals(4, stringArray0.length);
      
      String string2 = StringUtils.stripEnd("FZ8woUAR<;y!rT=I", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("FZ8woUAR<;y!rT=I", string2);
      
      String string3 = StringUtils.unwrap("4CO=", '!');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("4CO=", string3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = " vs ";
      String[] stringArray0 = StringUtils.substringsBetween(" vs ", " vs ", " vs ");
      assertNull(stringArray0);
      
      int int0 = StringUtils.compare(" vs ", " vs ");
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints(" vs ");
      assertNotNull(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {32, 118, 115, 32}, intArray0);
      
      String string1 = StringUtils.mid(" vs ", 0, 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) " vs ", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) " vs ";
      // Undeclared exception!
      StringUtils.center("org.apache.commons.lang3.ArrayUtils", 32767);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.leftPad("Ac%K6/VR?26", 2405, 'O');
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited((String) null, 'O');
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("L4**c>4|Pt[go4D8", "#");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("#L4**c>4|Pt[go4D8#", string2);
      
      String string3 = StringUtils.substringAfter("Minimum abbreviation width with offset is %d", 256);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.join((byte[]) null, 'X', (-2603), 256);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StringUtils.chomp("ln}?6<^]?5Yoc", "\"tcuf~Dd|l");
      assertNotNull(string0);
      assertEquals("ln}?6<^]?5Yoc", string0);
      
      String string1 = StringUtils.chomp("ln}?6<^]?5Yoc", "A.DwS+Ef<T1");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("ln}?6<^]?5Yoc", string1);
      
      String string2 = StringUtils.stripStart("ln}?6<^]?5Yoc", "ln}?6<^]?5Yoc");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.unwrap("Search and Replace array lengths don't match: ", ">j");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ln}?6<^]?5Yoc");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "ln}?6<^]?5Yoc", (CharSequence) "ln}?6<^]?5Yoc");
      assertEquals(1, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.removePattern("%Mggiuf$<*LrQS&J_#", "ln}?6<^]?5Yoc");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("%Mggiuf$<*LrQS&J_#", string4);
      
      String string5 = StringUtils.replaceOnce("Locale must not be null", "Search and Replace array lengths don't match: ", (String) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Locale must not be null", string5);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.ArrayUtils", "K");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string6 = StringUtils.trim("Comparator should not be null.x_._Ry6q[Cj((w`D`;");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("Comparator should not be null.x_._Ry6q[Cj((w`D`;", string6);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = StringUtils.ordinalIndexOf("K", "K", (-1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean2 = StringUtils.startsWithAny("org.apache.commons.lang3.ArrayUtils", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.equalsAnyIgnoreCase("Comparator should not be null.x_._Ry6q[Cj((w`D`;", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string7 = StringUtils.join((byte[]) null, '#', 434, (-149));
      assertNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) ">j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "J";
      String string1 = StringUtils.wrapIfMissing("J", '?');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("?J?", string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "G?%QJc";
      stringArray0[1] = "J";
      stringArray0[2] = "J";
      stringArray0[3] = "?J?";
      String string2 = "Comparator should not be null.Exception cloning Cloneable type ";
      stringArray0[4] = "Comparator should not be null.Exception cloning Cloneable type ";
      stringArray0[5] = "?J?";
      stringArray0[6] = "J";
      stringArray0[7] = "J";
      stringArray0[8] = "?J?";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("?J?", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = StringUtils.substring(",rs", (-618), (-618));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrap("", '/');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "clone";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean1 = StringUtils.isNumericSpace(charSequenceArray0[4]);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.difference(",rs", "0r$[K:b");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0r$[K:b", string2);
      
      boolean boolean2 = StringUtils.isAlphanumeric("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.containsIgnoreCase(" 's ", ",rs");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-684), (-618));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.trimToEmpty("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      
      String string4 = StringUtils.rightPad(".H'k?j", 3962, ' ');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "g", "g");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      CharBuffer charBuffer0 = StringUtils.defaultIfEmpty((CharBuffer) null, (CharBuffer) null);
      assertNull(charBuffer0);
      
      String string0 = StringUtils.wrap("", 'W');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.chomp("Tz!9o!u6_jlt *PA#");
      assertNotNull(string0);
      assertEquals("Tz!9o!u6_jlt *PA#", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 65536, 65536);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.substringsBetween((String) null, "6`qS$not be null", "LE<6T(Strings must _YV/|H43N?");
      assertNull(stringArray1);
      
      String string1 = StringUtils.abbreviate((String) null, "Search and Replace array lengths don't match: nz?7D(!gu", (-1), 6202);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = StringUtils.rightPad("Y]!>g;3C `O", 509, "', has a length less than 2");
      assertNotNull(string0);
      assertEquals("Y]!>g;3C `O', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a le", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "', has a length less than 2";
      charSequenceArray0[1] = (CharSequence) "Y]!>g;3C `O', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a le";
      charSequenceArray0[2] = (CharSequence) "Y]!>g;3C `O";
      charSequenceArray0[3] = (CharSequence) "Y]!>g;3C `O', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a le";
      charSequenceArray0[4] = (CharSequence) "Y]!>g;3C `O";
      charSequenceArray0[5] = (CharSequence) "Y]!>g;3C `O', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a le";
      charSequenceArray0[6] = (CharSequence) "Y]!>g;3C `O', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a le";
      charSequenceArray0[7] = (CharSequence) "', has a length less than 2";
      int int0 = StringUtils.indexOfAny((CharSequence) "Y]!>g;3C `O', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a length less than 2', has a le", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[0], charArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[0] = (byte)90;
      String string0 = StringUtils.join(byteArray0, 'W');
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)0}, byteArray0);
      assertEquals("90W0", string0);
      
      String string1 = StringUtils.chomp("90W0");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("90W0", string1);
      
      boolean boolean0 = StringUtils.isEmpty("90W0");
      assertFalse(boolean0);
      
      String string2 = StringUtils.center("cqym<2PJL#E8o*", (int) (byte)90, 'B');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBcqym<2PJL#E8o*BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", string2);
      
      String string3 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      int int0 = StringUtils.ordinalIndexOf("", "cqym<2PJL#E8o*", 1);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.trimToNull("");
      assertNull(string4);
      
      String string5 = StringUtils.chop("k)g{pka)i=pTI%36`");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("k)g{pka)i=pTI%36", string5);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'B';
      charArray0[1] = 'W';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "k)g{pka)i=pTI%36", charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'B', 'W', 'B', 'B'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'B', 'W', 'B', 'B'}, charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int1 = StringUtils.indexOf((CharSequence) "k)g{pka)i=pTI%36`", (CharSequence) null, (int) (byte)90);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "cqym<2PJL#E8o*";
      stringArray0[1] = "cqym<2PJL#E8o*";
      stringArray0[2] = "k)g{pka)i=pTI%36`";
      stringArray0[3] = "";
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string6);
      assertEquals(4, stringArray0.length);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = StringUtils.remove(", Length: ", "org.apache.commons.lang3.ObjectUtilsfkY9.Z1");
      assertNotNull(string0);
      assertEquals(", Length: ", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) ", Length: ", (CharSequence) "]vP)*V)5KQ`:7>W!");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals(", Length: ", charSequence0);
      
      String string1 = StringUtils.defaultString("}hA2N+@[G", ", Length: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("}hA2N+@[G", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-53);
      String string2 = StringUtils.join(byteArray0, 'W');
      assertNotNull(string2);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)125, (byte)107, (byte)4, (byte) (-53)}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("7W125W107W4W-53", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Ky@[p{InCombiningDiacriticalMarks}+", "]vP)*V)5KQ`:7>W!", 872);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("]vP)*V)5KQ`:7>W!", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.rotate("JmTPV&,,\"=R$4jOZ", 135);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("=R$4jOZJmTPV&,,\"", string3);
      
      String string4 = StringUtils.replaceOnce("}hA2N+@[G", "7W125W107W4W-53", ", Length: ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("}hA2N+@[G", string4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      String string5 = StringUtils.substringBefore(", Length: ", "\n");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)charSequence0));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(", Length: ", string5);
      
      int int0 = StringUtils.compare("=R$4jOZJmTPV&,,\"", ", Length: ", false);
      assertEquals(17, int0);
      
      String string6 = StringUtils.abbreviate("}hA2N+@[G", "Comparator should not be null.Exception cloning Cloneable type ", (-2180), 64);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("}hA2N+@[G", string6);
      
      String string7 = StringUtils.chop(", Length: ");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertEquals(", Length:", string7);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.defaultString("(OI", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(OI", string1);
      
      String string2 = StringUtils.wrap("JE", "je");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("jeJEje", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "je", (CharSequence) "(OI");
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "(OI", (CharSequence) "(OI", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.uncapitalize("y:l5XfKP >DNHR/hV");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("y:l5XfKP >DNHR/hV", string3);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.repeat("je", 7428);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.substringBefore(string4, "#L4**c>4|Pt[go4D8");
      assertNotNull(string5);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      int int3 = StringUtils.compare("Minimum abbreviation width with offset is %d", "nz?7D(!gu", true);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-33), int3);
      
      String string6 = StringUtils.replaceIgnoreCase("y:l5XfKP >DNHR/hV", "y:l5XfKP >DNHR/hV", "JE", (-1));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("JE", string6);
      
      String string7 = StringUtils.replaceIgnoreCase("(OI", "(OI", "je");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("je", string7);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "#L4**c>4|Pt[go4D8";
      stringArray0[1] = string5;
      stringArray0[2] = "NhTS\"PE+[]opVGPfB";
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "...";
      stringArray1[1] = "JE";
      stringArray1[2] = "JE";
      stringArray1[3] = "je";
      stringArray1[4] = "?Je>'fl-lsQGp$";
      stringArray1[5] = "jeJEje";
      stringArray1[6] = "je";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("F*", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 3 vs 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "");
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.StringUtils", "");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      String string1 = StringUtils.wrapIfMissing("V", 'U');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("UVU", string1);
      
      String string2 = StringUtils.unwrap("", 'U');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.uncapitalize("UVU");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("uVU", string3);
      
      String string4 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      boolean boolean3 = StringUtils.isMixedCase((CharSequence) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.stripStart("ch", "ch");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[2] = "";
      stringArray0[2] = "ch";
      stringArray0[4] = "";
      String string1 = StringUtils.replaceEach("p{InCombiningDiacriticalMarks}+", stringArray0, (String[]) null);
      assertNotNull(string1);
      assertEquals(9, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.stripStart("ch", "ch");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      int int0 = StringUtils.indexOfAny((CharSequence) "ch", charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'H', 'H'}, charArray0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ch";
      stringArray0[1] = "";
      stringArray0[2] = "ch";
      stringArray0[4] = "";
      String string1 = StringUtils.overlay("", "ch", (-1), 1846);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ch", string1);
      
      String string2 = StringUtils.replaceEach("p{InCombiningDiacriticalMarks}+", stringArray0, (String[]) null);
      assertNotNull(string2);
      assertEquals(9, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.defaultString("I", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("I", string1);
      
      String string2 = StringUtils.replaceOnce("", "I", "je");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "je";
      stringArray0[1] = "je";
      stringArray0[2] = "";
      stringArray0[3] = "I";
      stringArray0[4] = "je";
      stringArray0[5] = "je";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string3);
      assertEquals(6, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("je", string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "je", (CharSequence[]) stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isEmpty("je");
      assertFalse(boolean0);
      
      String string4 = StringUtils.repeat("The String must not be empty", 0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.wrapIfMissing("...", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("...", string5);
      
      String string6 = StringUtils.substringAfterLast("je", 0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "&)");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(6, stringArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = StringUtils.remove(", Length: ", "org.apache.commons.lang3.ObjectUtilsfkY9.Z1");
      assertNotNull(string0);
      assertEquals(", Length: ", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) ", Length: ", (CharSequence) "]vP)*V)5KQ`:7>W!");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals(", Length: ", charSequence0);
      
      String string1 = StringUtils.defaultString("}hA2N+@[G", ", Length: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("}hA2N+@[G", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)107;
      byteArray0[4] = (byte) (-53);
      String string2 = StringUtils.join(byteArray0, 'W');
      assertNotNull(string2);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)125, (byte)107, (byte)0, (byte) (-53)}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("7W125W107W0W-53", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Ky@[p{InCombiningDiacriticalMarks}+", "]vP)*V)5KQ`:7>W!", 872);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("]vP)*V)5KQ`:7>W!", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.rotate("JmTPV&,,\"=R$4jOZ", 135);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("=R$4jOZJmTPV&,,\"", string3);
      
      String string4 = StringUtils.replaceOnce("}hA2N+@[G", "7W125W107W0W-53", ", Length: ");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("}hA2N+@[G", string4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      charArray0[3] = 'W';
      charArray0[4] = 'W';
      charArray0[5] = 'W';
      charArray0[6] = 'W';
      charArray0[7] = 'W';
      int int0 = StringUtils.indexOfAny((CharSequence) "}hA2N+@[G", charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W'}, charArray0);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substringAfterLast("Ky@[p{InCombiningDiacriticalMarks}+", (int) (byte)107);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      assertEquals("s}+", string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Ky@[p{InCombiningDiacriticalMarks}+", (int) (byte)125);
      assertFalse(int1 == int0);
      assertEquals(33, int1);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "7W125W107W0W-53", charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W'}, charArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 27, "n'}@Fx$%M]7Kb");
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)65;
      byteArray0[2] = (byte)99;
      byteArray0[3] = (byte)49;
      String string1 = StringUtils.toString(byteArray0, (String) null);
      assertNotNull(string1);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)65, (byte)99, (byte)49}, byteArray0);
      assertEquals("\uFFFDAc1", string1);
      
      int[] intArray0 = StringUtils.toCodePoints("\uFFFDAc1");
      assertNotNull(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {65533, 65, 99, 49}, intArray0);
      
      String string2 = StringUtils.defaultString((String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "\uFFFDAc1";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "\uFFFDAc1";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.getDigits("");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "gE6@DVnVb=g");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // gE6@DVnVb=g
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = 503L;
      longArray0[2] = 0L;
      longArray0[3] = (-3984L);
      longArray0[4] = 0L;
      longArray0[5] = 755L;
      longArray0[6] = (-294L);
      String string0 = StringUtils.join(longArray0, '=', 2918, 132);
      assertNotNull(string0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, 503L, 0L, (-3984L), 0L, 755L, (-294L)}, longArray0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("\n", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfterLast("\n", "=");
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\n", (CharSequence) "", 62);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.chomp("\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("SU&0b", "offset cannot be negative", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("SU&0b", string1);
      
      boolean boolean0 = StringUtils.isBlank("SvNMkhr");
      assertFalse(boolean0);
      
      String string2 = StringUtils.chomp("}?6<^]?5Yoc");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("}?6<^]?5Yoc", string2);
      
      boolean boolean1 = StringUtils.isEmpty("SU&0b");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      StringUtils.center("org.apache.commons.lang3.Charsets", 806, 'k');
      StringUtils.ordinalIndexOf("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkorg.apache.commons.lang3.Charsetskkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", "org.apache.commons.lang3.Charsets", 65);
      StringUtils.overlay("h)^zk^mi36$U`Hsv", ")[#L-4IjnX8u", 65, 15);
      StringUtils.replaceEach("offset cannot be negative", (String[]) null, (String[]) null);
      StringUtils.repeat('f', 806);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[2] = (CharSequence) ", Length: ";
      charSequenceArray0[3] = (CharSequence) ", Length: ";
      charSequenceArray0[4] = (CharSequence) ", Length: ";
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      String string0 = StringUtils.join(charArray0, '@', 49, (-849));
      assertNotNull(string0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'S', 'S'}, charArray0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlpha(charSequenceArray0[2]);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.reverseDelimited("object", 'r');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("object", string1);
      
      String string2 = StringUtils.replaceEach((String) null, (String[]) null, (String[]) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable(", Length: ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = ')';
      charArray0[1] = '^';
      charArray0[2] = '|';
      charArray0[3] = 'c';
      charArray0[4] = '5';
      charArray0[5] = '}';
      charArray0[6] = '9';
      charArray0[7] = ':';
      charArray0[8] = 'R';
      String string0 = StringUtils.join(charArray0, '9', 111, 111);
      assertNotNull(string0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {')', '^', '|', 'c', '5', '}', '9', ':', 'R'}, charArray0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("8Kr*", "8Kr*", "8Kr*");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("8Kr*", string1);
      
      String string2 = StringUtils.chomp("8Kr*");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("8Kr*", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "8Kr*", 64);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.stripStart("}{lKQdk=-N#T4r", "8Kr*");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("}{lKQdk=-N#T4r", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "T\"]N9V");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("LNuk>Qz|sjw", 2109);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("L", "Arr", " has no clone methodorg.apache.commons.lang3.ArrayUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L", string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "LNuk>Qz|sjw", (CharSequence) "L");
      assertEquals(1, int0);
      
      String string2 = StringUtils.substringAfter(" has no clone methodorg.apache.commons.lang3.ArrayUtils", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" has no clone methodorg.apache.commons.lang3.ArrayUtils", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) " has no clone methodorg.apache.commons.lang3.ArrayUtils";
      charSequenceArray0[1] = (CharSequence) "Arr";
      charSequenceArray0[2] = (CharSequence) "Arr";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "L";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[0] = (byte) (-39);
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.chomp("h)^zk^mi36$U`Hsv");
      assertNotNull(string0);
      assertEquals("h)^zk^mi36$U`Hsv", string0);
      
      String string1 = StringUtils.center("Supplied value must be a valid byte literal between -128 and 127: [", (int) 'W', 'X');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("XXXXXXXXXXSupplied value must be a valid byte literal between -128 and 127: [XXXXXXXXXX", string1);
      
      String string2 = StringUtils.overlay("", "L4** c>4|Pt[go4D8#", 21, (byte) (-39));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("L4** c>4|Pt[go4D8#", string2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L4** c>4|Pt[go4D8#";
      stringArray0[1] = "h)^zk^mi36$U`Hsv";
      stringArray0[2] = " ";
      stringArray0[4] = "XXXXXXXXXXSupplied value must be a valid byte literal between -128 and 127: [XXXXXXXXXX";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.unwrap("=6@dh", "Hb^VR`UQGV");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.repeat(" ", "h)^zk^mi36$U`Hsv", (int) 'W');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.removeAll("ch", "ch");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrapIfMissing("", "y%hp2+6qT;SoUv]O");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("-qf#<n", "p{InCombiningDiacriticalMarks}+", 4);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.stripEnd((String) null, "y%hp2+6qT;SoUv]O");
      assertNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("Yy'");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Yy'", string3);
      
      int int0 = StringUtils.compareIgnoreCase(")/?#I", (String) null, true);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Mtr-4^&-`co##");
      assertTrue(boolean0);
      
      String string4 = StringUtils.normalizeSpace("L[yT(rR%N%<LbV5");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("L[yT(rR%N%<LbV5", string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "L[yT(rR%N%<LbV5", 2);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.stripToEmpty("\n");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      
      String string6 = StringUtils.chomp("\n", "");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("\n", string6);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.substring(",rs", (-618), (-618));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripStart("", "Search and Replace array lengths don't match: nz?7D(!gu");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.join((Object[]) null, "", (-618), (-334));
      assertNull(string2);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      String string3 = StringUtils.join(booleanArray0, ';', 127, 127);
      assertNotNull(string3);
      assertEquals(7, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true, true}, booleanArray0));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)90;
      byteArray0[0] = (byte)0;
      Comparator<CharBuffer> comparator0 = (Comparator<CharBuffer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>(comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Iterator<CharBuffer> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      
      String string0 = StringUtils.join(iterator0, 'W');
      assertNotNull(string0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("", string0);
      
      String string1 = StringUtils.wrap("1NAAo\"S4'{\"LA_S", '~');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("~1NAAo\"S4'{\"LA_S~", string1);
      
      String string2 = StringUtils.stripStart("i/4k#i/4k#", "Object varargs must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("i/4k#i/4k#", string2);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("~1NAAo\"S4'{\"LA_S~", "", 8192);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.trimToEmpty("*&!95I1_7");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("*&!95I1_7", string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "*&!95I1_7", 11);
      assertEquals(10, int0);
      
      String string5 = StringUtils.uncapitalize(" in an array of ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals(" in an array of ", string5);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string6 = StringUtils.join((Object[]) null, "", 108, 1645);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.repeat('b', 1187);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha(string0);
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfter(string0, 1187);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank(string0, supplier0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.rightPad(string0, 108, '&');
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAlphaSpace(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.center(string0, 1187, ".");
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) ".";
      charSequenceArray0[1] = (CharSequence) string3;
      charSequenceArray0[2] = (CharSequence) string3;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) string3;
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.leftPad("Ac%K6/VR?26", 2405, 'O');
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited((String) null, 'O');
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("L4**c>4|Pt[go4D8", "#");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("#L4**c>4|Pt[go4D8#", string2);
      
      String string3 = StringUtils.defaultString("Minimum abbreviation width with offset is %d", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string3);
      
      String string4 = StringUtils.removeStart("k=L':&C{6ojdm>sK4tY", string0);
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("k=L':&C{6ojdm>sK4tY", string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("k=L':&C{6ojdm>sK4tY", 'O');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.right("LB6b", (-1091));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "\r");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      charArray0[1] = '}';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ":2Z:W;3X=r[gy|fvx", charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'}', '}'}, charArray0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "\r", charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'}', '}'}, charArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.stripAccents("Strings must not be null");
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      String string1 = StringUtils.substringAfterLast("Strings must not be null", 65);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeStart("", "Strings must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Strings must not be null", 1819);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Hn>d!DG;P8iJnhmcHA");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Strings must not be null", (CharSequence) "Hn>d!DG;P8iJnhmcHA", 95);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("Hn>d!DG;P8iJnhmcHA").when(supplier0).get();
      String string3 = StringUtils.getIfBlank("", supplier0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Hn>d!DG;P8iJnhmcHA", string3);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.substringAfter("", (-1));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", 1819);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      Object[] objectArray0 = new Object[0];
      String string5 = StringUtils.join(objectArray0, 'S');
      assertNotNull(string5);
      assertEquals(0, objectArray0.length);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      
      String string6 = StringUtils.replaceOnceIgnoreCase("Hn>d!DG;P8iJnhmcHA", "Hn>d!DG;P8iJnhmcHA", "pEzw");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("pEzw", string6);
      
      char[] charArray0 = new char[0];
      String string7 = StringUtils.valueOf(charArray0);
      assertNotNull(string7);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertEquals("", string7);
      
      Locale locale1 = Locale.KOREA;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("KR", locale1.getCountry());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      int int3 = StringUtils.getFuzzyDistance("Hn>d!DG;P8iJnhmcHA", "Strings must not be null", locale0);
      assertNotSame(locale0, locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(locale0.equals((Object)locale1));
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Strings must not be null", "Myi", 8);
      assertNotNull(string0);
      assertEquals("StrinMyi", string0);
      
      String string1 = StringUtils.trimToEmpty("yS)");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("yS)", string1);
      
      boolean boolean0 = StringUtils.isNumeric("yS)");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceChars("Ow0x9qA?", (String) null, "Pg9W:#JjOurHZlV/");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Ow0x9qA?", string2);
      
      String string3 = StringUtils.substringAfter("Comparator should not be", 2861);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      byte[] byteArray0 = new byte[0];
      String string4 = StringUtils.join(byteArray0, 'X', 2861, 8);
      assertNotNull(string4);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      int int0 = StringUtils.countMatches((CharSequence) "Strings must not be null", (CharSequence) "");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      String string5 = StringUtils.join(charArray0, 'G', 2861, 99);
      assertNotNull(string5);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.lowerCase("mons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("mons.lang3.stringutils", string0);
      
      String string1 = StringUtils.defaultString("mons.lang3.StringUtils", "mons.lang3.StringUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("mons.lang3.StringUtils", string1);
      
      String string2 = StringUtils.replaceOnce("", "mons.lang3.StringUtils", "mons.lang3.stringutils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("mons.lang3.StringUtils", "mons.lang3.stringutils");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("mons.lang3.stringutilsmons.lang3.StringUtilsmons.lang3.stringutils", string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "mons.lang3.stringutils", (CharSequence) "mons.lang3.StringUtils");
      assertEquals(11, int0);
      
      String string4 = StringUtils.reverseDelimited("", '\u0081');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.center("Search and Replace array lengths don't match: ", 11);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match: ", string5);
      
      String string6 = StringUtils.stripEnd("Search and Replace array lengths don't match: ", "");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("Search and Replace array lengths don't match: ", string6);
      
      String string7 = StringUtils.leftPad("Ac%K6/VR?26", 2405, 'O');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      
      String string8 = StringUtils.deleteWhitespace((String) null);
      assertNull(string8);
      
      int int1 = StringUtils.compareIgnoreCase("", (String) null, false);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", "mons.lang3.StringUtils");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ");
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.replaceOnce("", "", "lW@jQd[hga~K.mF$>?'|");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "nDk`'zgL)~U", charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>((Comparator<? super CharBuffer>) null);
      assertNotNull(treeSet0);
      
      String string1 = StringUtils.join((Iterable<?>) treeSet0, "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = treeSet0.containsAll(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(""));
      
      int int1 = StringUtils.lastOrdinalIndexOf("lW@jQd[hga~K.mF$>?'|", "", 3);
      assertFalse(int1 == int0);
      assertEquals(20, int1);
      
      String string2 = StringUtils.stripToEmpty("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Ky@[p{InCombiningDiacriticalMarks}+", "]vP)*V)5KQ`:7>W!", 872);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("]vP)*V)5KQ`:7>W!", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Ky@[p{InCombiningDiacriticalMarks}+", "}hA2N+@[G");
      assertEquals(0.43, double0, 0.01);
      
      String string0 = StringUtils.truncate("Aborting to protect against StackOverflowError - output of one loop is the input of another", 71);
      assertNotNull(string0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is ", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, 'L');
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, '4');
      assertEquals(0, int0);
      
      String string1 = StringUtils.unwrap("Ld*@WcC", "Ld*@WcC");
      assertNotNull(string1);
      assertEquals("Ld*@WcC", string1);
      
      String string2 = StringUtils.substringBetween("u/;$iqNQ|6[xPMJ", "Ld*@WcC", "(OINg_Y;*+q");
      assertNull(string2);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "{6d5^_HBdkO eX[t,");
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string3 = StringUtils.remove((String) null, '4');
      assertNull(string3);
      
      String string4 = StringUtils.stripAccents("Ld*@WcC");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertEquals("Ld*@WcC", string4);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "u/;$iqNQ|6[xPMJ";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "{6d5^_HBdkO eX[t,";
      objectArray0[3] = (Object) "{6d5^_HBdkO eX[t,";
      String string5 = StringUtils.joinWith("Ld*@WcC", objectArray0);
      assertNotNull(string5);
      assertEquals(4, objectArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("u/;$iqNQ|6[xPMJLd*@WcCLd*@WcC{6d5^_HBdkO eX[t,Ld*@WcC{6d5^_HBdkO eX[t,", string5);
      
      String string6 = StringUtils.abbreviate("8R}f%00x.'", (String) null, 32767);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("8R}f%00x.'", string6);
      
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "(OINg_Y;*+q");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // (OINg_Y;*+q
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string1);
      assertEquals(5, stringArray0.length);
      
      byte[] byteArray0 = StringUtils.getBytes(string0, (String) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = StringUtils.truncate("org.apache.commons.lang3.StringUtils", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[18];
      charArray0[16] = 'K';
      charArray0[1] = 'K';
      PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Iterator<CharBuffer> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      
      String string1 = StringUtils.join(iterator0, '1');
      assertNotNull(string1);
      assertEquals(0, priorityQueue0.size());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.repeat("OV=", 1007);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.unwrap((String) null, "...");
      assertNull(string3);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = string2;
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = "...";
      stringArray0[8] = null;
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string4);
      assertEquals(9, stringArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Kb58ANS0sp Y!", "Kb58ANS0sp Y!");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("}?6<^]?5Yoc", (-2382));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("}?6<^]?5Yoc", string1);
      
      String string2 = StringUtils.stripEnd("Kb58ANS0sp Y!", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Kb58ANS0sp Y!", string2);
      
      String string3 = StringUtils.unwrap("uCO5L", 'I');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("uCO5L", string3);
      
      String string4 = StringUtils.substring("uCO5L", 21);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.repeat('I', (-2382));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string6 = StringUtils.replaceIgnoreCase((String) null, "", "uCO5L", 97);
      assertNull(string6);
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "Kb58ANS0sp Y!";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.reverseDelimited(">;q){&`?jarsJQ$", 'G');
      assertNotNull(string0);
      assertEquals(">;q){&`?jarsJQ$", string0);
      
      String string1 = StringUtils.center("Qe5\"", 2405);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.stripEnd(string1, string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.leftPad("Qe5\"", 2405, 'O');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.deleteWhitespace("Search and Replace array lengths don't match: ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("SearchandReplacearraylengthsdon'tmatch:", string4);
      
      int int0 = StringUtils.compareIgnoreCase("uJEul<h", "6OvV?~@N&F0-", false);
      assertEquals(63, int0);
      
      boolean boolean0 = StringUtils.isNumeric("Ac%K6/VR?26");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) string3, "Locale must not be null");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = StringUtils.defaultString("lW@ store ", "JE");
      assertNotNull(string0);
      assertEquals("lW@ store ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Y-Pi";
      charSequenceArray0[1] = (CharSequence) ",dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/dKX'o/";
      charSequenceArray0[3] = (CharSequence) "Y-Pi";
      String string1 = StringUtils.appendIfMissing(",dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/dKX'o/", "JE", charSequenceArray0);
      assertNotNull(string1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals(",dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/dKX'o/", string1);
      
      String string2 = StringUtils.replaceAll("Y-Pi", ",dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/dKX'o/", "lW@ store ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Y-Pi", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "JE", (CharSequence) "Y-Pi");
      assertEquals(0, int0);
      
      String string3 = StringUtils.unwrap("JE", '-');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("JE", string3);
      
      boolean boolean0 = StringUtils.isAllUpperCase("JE");
      assertTrue(boolean0);
      
      String string4 = StringUtils.trimToEmpty(",dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/dKX'o/");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(",dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/dKX'o/", string4);
      
      boolean boolean1 = StringUtils.contains(charSequenceArray0[0], charSequenceArray0[1]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.removeStart("d[hga~K.mF$>?'|", "lW@ store ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("d[hga~K.mF$>?'|", string5);
      
      String string6 = StringUtils.defaultIfBlank("J6R%do", "+7>r(3/");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("J6R%do", string6);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.defaultString("lW@jQ", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("lW@jQ", string1);
      
      String string2 = StringUtils.wrap("JE", "je");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("jeJEje", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) ",dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/dKX'o/";
      charSequenceArray0[2] = (CharSequence) "je";
      charSequenceArray0[3] = (CharSequence) "";
      String string3 = StringUtils.appendIfMissing(",dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/dKX'o/", "JE", charSequenceArray0);
      assertNotNull(string3);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(",dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/dKX'o/", string3);
      
      String string4 = StringUtils.replaceAll("", ",dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/dKX'o/", "lW@jQ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "JE", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("/P5ExIpa/", 's');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.unwrap("JE", '-');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("JE", string5);
      
      boolean boolean0 = StringUtils.isAllUpperCase("JE");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("je");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.removeEnd("@<&c'3HV2BFL", "");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("@<&c'3HV2BFL", string6);
      
      String string7 = StringUtils.remove("jeJEje", "ch");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertEquals("jeJEje", string7);
      
      String string8 = StringUtils.trimToEmpty(",dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/dKX'o/");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertEquals(",dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/dKX'o/", string8);
      
      boolean boolean2 = StringUtils.isAlpha("ch");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string9 = StringUtils.removeStart("d[hga~K.mF$>?'|", "lW@jQ");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertEquals("d[hga~K.mF$>?'|", string9);
      
      String string10 = StringUtils.defaultIfBlank("J6R%do", "+7>r(3/");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertEquals("J6R%do", string10);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = StringUtils.substring("", 49, 4);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("org.apache.commons.lang3.LocaleUtils", 100, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                                org.apache.commons.lang3.LocaleUtils                                ", string1);
      
      String string2 = StringUtils.replaceEach("", (String[]) null, (String[]) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.repeat('N', (int) 'N');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN", string3);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMJE", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("nz?7D(!gu", "p{InCombiningDiacriticalMJE");
      assertNotNull(string0);
      assertEquals("p{InCombiningDiacriticalMJEnz?7D(!gup{InCombiningDiacriticalMJE", string0);
      
      String string1 = StringUtils.replaceFirst("v>sb", "org.apache.commons.lang3.CharUtils", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("v>sb", string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("v>sb");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("v>sb", "nz?7D(!gu");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.CharUtils", "@g-5zJn`]");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("org.apache.commons.lang3.CharUtils");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(11, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.CharUtils", (CharSequence) "@g-5zJn`]", 15);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.getDigits("u)[9ubX");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("9", string2);
      
      String string3 = StringUtils.wrap("Search and Replace array lengths don't match: ", 'b');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("bSearch and Replace array lengths don't match: b", string3);
      
      boolean boolean3 = StringUtils.isAllEmpty(stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean4 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string4 = StringUtils.difference("@g-5zJn`]", (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("@g-5zJn`]", string4);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.defaultString("o\"S4'{\"LA_S", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("o\"S4'{\"LA_S", string1);
      
      String string2 = StringUtils.replaceOnce("", "o\"S4'{\"LA_S", "je");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "je", (CharSequence) "o\"S4'{\"LA_S");
      assertEquals(0, int0);
      
      String string3 = StringUtils.reverseDelimited("", '\u0080');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.center("je", 2331);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.deleteWhitespace("");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String string6 = StringUtils.removeEndIgnoreCase("je", "");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("je", string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "A.Dw+Ef<1";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string7 = StringUtils.EMPTY;
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      
      String string8 = StringUtils.substring("", 2331, 0);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertEquals("", string8);
      
      boolean boolean1 = StringUtils.endsWithAny("", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = StringUtils.substring("Z", (-981), (-981));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("", 21, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                     ", string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Z");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "nO[9)lmh.Ix~T%H");
      assertNull(stringArray0);
      
      String string2 = StringUtils.chomp("                     ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("                     ", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "Z", 5360, 5360);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.substringsBetween("JrP", "                     ", "                     ");
      assertNull(stringArray1);
      
      String string3 = StringUtils.abbreviateMiddle("h;Me\"-E,#", "JrP", 1082);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("h;Me\"-E,#", string3);
      
      int int1 = StringUtils.compare((String) null, "X:F{F", true);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Comparator<CharBuffer> comparator0 = (Comparator<CharBuffer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(java.nio.CharBuffer.class) , any(java.nio.CharBuffer.class));
      PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>(comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(90);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(90, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(90, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(90, charBuffer0.capacity());
      assertEquals(90, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      
      boolean boolean0 = priorityQueue0.add(charBuffer0);
      assertEquals(1, priorityQueue0.size());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(90, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(90, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(90, charBuffer0.capacity());
      assertEquals(90, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains(charBuffer0));
      
      boolean boolean1 = priorityQueue0.add(charBuffer0);
      assertEquals(2, priorityQueue0.size());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(90, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(90, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(90, charBuffer0.capacity());
      assertEquals(90, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains(charBuffer0));
      
      String string0 = StringUtils.substring("0", 64);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer1);
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.capacity());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      
      Iterator<CharBuffer> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(2, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(charBuffer1));
      assertTrue(priorityQueue0.contains(charBuffer0));
      
      String string1 = StringUtils.join(iterator0, '');
      assertNotNull(string1);
      assertEquals(2, priorityQueue0.size());
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertFalse(priorityQueue0.contains(charBuffer1));
      assertTrue(priorityQueue0.contains(charBuffer0));
      
      String string2 = StringUtils.repeat("0", 64);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0000000000000000000000000000000000000000000000000000000000000000", string2);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = StringUtils.rotate("LNuk>Qz|sjw", 2109);
      assertNotNull(string0);
      assertEquals("k>Qz|sjwLNu", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("L", "Arr", " has no clone methodorg.apache.commons.lang3.ArrayUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L", string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "LNuk>Qz|sjw", (CharSequence) "L");
      assertEquals(1, int0);
      
      String string2 = StringUtils.replaceIgnoreCase("L", "L", "k>Qz|sjwLNu", 2109);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("k>Qz|sjwLNu", string2);
      
      int int1 = StringUtils.countMatches((CharSequence) "LNuk>Qz|sjw", 'u');
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("L");
      assertFalse(boolean0);
      
      String string3 = StringUtils.wrap("Arr", 'u');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("uArru", string3);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(263);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("L"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      priorityQueue0.clear();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("L"));
      
      boolean boolean1 = priorityQueue0.add("L");
      assertEquals(1, priorityQueue0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains("L"));
      assertFalse(priorityQueue0.contains(2109));
      
      boolean boolean2 = priorityQueue0.add("L");
      assertEquals(2, priorityQueue0.size());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(priorityQueue0.contains("L"));
      assertFalse(priorityQueue0.contains(2109));
      
      String string4 = StringUtils.join((Iterable<?>) priorityQueue0, 'p');
      assertNotNull(string4);
      assertEquals(2, priorityQueue0.size());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("LpL", string4);
      assertTrue(priorityQueue0.contains("L"));
      assertFalse(priorityQueue0.contains(2109));
      
      String string5 = StringUtils.replace("wyxN1x\">phOXGne(Mk", "uArru", "org.apache.commons.lang3.LocaleUtils", 1);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("wyxN1x\">phOXGne(Mk", string5);
      
      int int2 = StringUtils.indexOf((CharSequence) "wyxN1x\">phOXGne(Mk", 263, 2522);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string6 = StringUtils.defaultIfBlank(", '", "k>Qz|sjwLNu");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals(", '", string6);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.center(".ZeF!kLt.ZeF!kLt", 2);
      assertNotNull(string0);
      assertEquals(".ZeF!kLt.ZeF!kLt", string0);
      
      String string1 = StringUtils.lowerCase("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{incombiningdiacriticalmarks}+", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase(" is not in the range '0' - '9'", ".ZeF!kLt.ZeF!kLt");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" is not in the range '0' - '9'", string2);
      
      char[] charArray0 = new char[0];
      String string3 = StringUtils.join(charArray0, 'q');
      assertNotNull(string3);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(".ZeF!kLt.ZeF!kLt");
      assertTrue(boolean0);
      
      String string4 = StringUtils.wrap("0l<", 'q');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("q0l<q", string4);
      
      String string5 = StringUtils.center("9G1*2*0+.$\"w{cFp", 2, "q0l<q");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("9G1*2*0+.$\"w{cFp", string5);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = StringUtils.chomp("V");
      assertNotNull(string0);
      assertEquals("V", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "V";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("V", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = StringUtils.overlay("jA).[", (String) null, (-1077), 41);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("M`J^:'", "", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("M`J^:'", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      String string1 = StringUtils.replaceIgnoreCase("M`J^:'", "C", "SvNMkhr");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("M`J^:'", string1);
      
      boolean boolean0 = StringUtils.isBlank("K");
      assertFalse(boolean0);
      
      String string2 = StringUtils.chomp("C");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("C", string2);
      
      boolean boolean1 = StringUtils.isEmpty("C");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.center("cqym<2PJL#E8o*", 3, 'p');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("cqym<2PJL#E8o*", string3);
      
      int int0 = StringUtils.ordinalIndexOf("M`J^:'", "C", 15);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.overlay("h)^zk^mi36$U`Hsv", (String) null, (-1), (-694));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("h)^zk^mi36$U`Hsv", string4);
      
      String string5 = StringUtils.replaceEach("C", (String[]) null, (String[]) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("C", string5);
      
      String string6 = StringUtils.repeat('p', (-694));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String string0 = StringUtils.stripStart("ch", "ch");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = 'H';
      charArray0[2] = 'h';
      int int0 = StringUtils.indexOfAny((CharSequence) "ch", charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'v', 'H', 'h'}, charArray0);
      assertEquals(1, int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ch";
      stringArray0[1] = "";
      stringArray0[2] = "ch";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.substringBetween("", "Supplied value must be a valid byte literal between -32768 and 32767: [", "");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.endsWithAny("", stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean0);
      
      String string2 = StringUtils.capitalize("U{AXlV2(");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("U{AXlV2(", string2);
      
      String string3 = StringUtils.trimToNull("ch");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("ch", string3);
      
      int int1 = StringUtils.compare("", "Supplied value must be a valid byte literal between -32768 and 32767: [", false);
      assertFalse(int1 == int0);
      assertEquals((-71), int1);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "ch", charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'v', 'H', 'h'}, charArray0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", 0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.startsWithAny("ch", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(9, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string4 = StringUtils.normalizeSpace("ch");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("ch", string4);
      
      boolean boolean3 = StringUtils.isNumeric("U{AXlV2(");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("M`J^:'", "", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("M`J^:'", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      String string1 = StringUtils.wrapIfMissing("", 'f');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.compare("M`J^:'", "", true);
      assertEquals(6, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.unwrap("Ky@[", 'G');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Ky@[", string2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = StringUtils.rotate("", 1345);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      
      String string1 = StringUtils.reverseDelimited("&!M&HUb(VKFc3", 'W');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("&!M&HUb(VKFc3", string1);
      
      String string2 = StringUtils.substringBefore("(QWfyj", (-92));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("(QWfyj", string2);
      
      boolean boolean0 = StringUtils.isWhitespace("]");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Comparator<CharBuffer> comparator0 = (Comparator<CharBuffer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>(comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(90);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(90, charBuffer0.limit());
      assertEquals(90, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(90, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(90, charBuffer0.remaining());
      
      boolean boolean0 = priorityQueue0.add(charBuffer0);
      assertEquals(1, priorityQueue0.size());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(90, charBuffer0.limit());
      assertEquals(90, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(90, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(90, charBuffer0.remaining());
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains(charBuffer0));
      
      String string0 = StringUtils.substring("0", 64);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer1);
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      
      Iterator<CharBuffer> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(charBuffer1));
      assertTrue(priorityQueue0.contains(charBuffer0));
      
      String string1 = StringUtils.join(iterator0, '');
      assertNotNull(string1);
      assertEquals(1, priorityQueue0.size());
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", string1);
      assertFalse(priorityQueue0.contains(charBuffer1));
      assertTrue(priorityQueue0.contains(charBuffer0));
      
      String string2 = StringUtils.repeat("0", 64);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0000000000000000000000000000000000000000000000000000000000000000", string2);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(90);
      assertNotNull(charBuffer0);
      assertEquals(90, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(90, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(90, charBuffer0.length());
      assertEquals(90, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      
      String string0 = StringUtils.substring("0", 64);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer1);
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      
      String string1 = StringUtils.repeat("0", 64);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0000000000000000000000000000000000000000000000000000000000000000", string1);
      
      String string2 = StringUtils.stripToEmpty("0");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0", string2);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = StringUtils.removeAll("ch", "ch");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrapIfMissing("", "y%hp2+6qT;SoUv]O");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("-f#n", "|[U(rl<zma?do5DH", 4);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "-f#n", supplier0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertEquals("-f#n", charSequence0);
      
      String string2 = StringUtils.reverseDelimited("-f#n", '~');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)charSequence0));
      assertEquals("-f#n", string2);
      
      String string3 = StringUtils.center("-f#n", 4);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("-f#n", string3);
      
      String string4 = StringUtils.stripEnd((String) null, "y%hp2+6qT;SoUv]O");
      assertNull(string4);
      
      String string5 = StringUtils.deleteWhitespace("Yy'");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Yy'", string5);
      
      int int0 = StringUtils.compareIgnoreCase(")/?#I", "Mtr-4^&-`co##", false);
      assertEquals((-68), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "y%hp2+6qT;SoUv]O", (CharSequence) "-f#n", 1434);
      assertFalse(int1 == int0);
      assertEquals(16, int1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Mtr-4^&-`co##");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'Y';
      charArray0[1] = 'U';
      charArray0[2] = 'F';
      charArray0[3] = '9';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Y', 'U', 'F', '9'}, charArray0);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeFirst("il_2Px}l", "il_2Px}l");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("j?],K5t{]Ckd>(=", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("j?],K5t{]Ckd>(=", string1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.substringAfter("Invalid lformat: ", (-2382));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Invalid lformat: ", "-4_-4_U]vY(hWgcBUt");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "-4_-4_U]vY(hWgcBUt";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "-4_-4_U]vY(hWgcBUt";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, "-4_-4_U]vY(hWgcBUt");
      assertNotNull(string1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-4_-4_U]vY(hWgcBUt-4_-4_U]vY(hWgcBUt-4_-4_U]vY(hWgcBUt-4_-4_U]vY(hWgcBUt-4_-4_U]vY(hWgcBUt-4_-4_U]vY(hWgcBUt", string1);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chop("1NA");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1N", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("R[%u(");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string2 = StringUtils.repeat("1N", 2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("1N1N", string2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = '-';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '-'}, charArray0);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", " ", (-80));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = StringUtils.contains((CharSequence) " ", (-80));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Comparator should not be^6VX`^m>Bd;R23c65", "Comparator should not be^6VX`^m>Bd;R23c65");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.getCommonPrefix(stringArray1);
      assertNotNull(string0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-99);
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)81;
      String string1 = StringUtils.join(byteArray0, 'y', 1186, (int) (byte)81);
      assertNotNull(string1);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)118, (byte)0, (byte)16, (byte) (-69), (byte) (-72), (byte) (-99), (byte) (-26), (byte)81}, byteArray0);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = StringUtils.remove(", Length: ", "org.apache.commons.lang3.ObjectUtilsfkY9.Z1");
      assertNotNull(string0);
      assertEquals(", Length: ", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) ", Length: ", (CharSequence) "]vP)*V)5KQ`:7>W!");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals(", Length: ", charSequence0);
      
      String string1 = StringUtils.defaultString("}hA2N+@[G", ", Length: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("}hA2N+@[G", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-53);
      String string2 = StringUtils.join(byteArray0, 'W');
      assertNotNull(string2);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)125, (byte)107, (byte)4, (byte) (-53)}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("7W125W107W4W-53", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Ky@[p{InCombiningDiacriticalMarks}+", "]vP)*V)5KQ`:7>W!", 872);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("]vP)*V)5KQ`:7>W!", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceOnce("}hA2N+@[G", "7W125W107W4W-53", ", Length: ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("}hA2N+@[G", string3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      charArray0[3] = 'W';
      charArray0[4] = 'W';
      charArray0[5] = 'W';
      charArray0[6] = 'W';
      charArray0[7] = 'W';
      int int0 = StringUtils.indexOfAny((CharSequence) "}hA2N+@[G", charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W'}, charArray0);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringAfterLast("Ky@[p{InCombiningDiacriticalMarks}+", (int) (byte)107);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("s}+", string4);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = StringUtils.remove(", Length: ", "org.apache.commons.lang3.ObjectUtilsfkY9.Z1");
      assertNotNull(string0);
      assertEquals(", Length: ", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) ", Length: ", (CharSequence) "]vP)*V)5KQ`:7>W!");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals(", Length: ", charSequence0);
      
      String string1 = StringUtils.defaultString("}hA2N+@[G", ", Length: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("}hA2N+@[G", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-53);
      String string2 = StringUtils.join(byteArray0, 'W');
      assertNotNull(string2);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte)125, (byte)107, (byte)4, (byte) (-53)}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("7W125W107W4W-53", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Ky@[p{InCombiningDiacriticalMarks}+", "]vP)*V)5KQ`:7>W!", 872);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("]vP)*V)5KQ`:7>W!", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.rotate("JmTPV&,,\"=R$4jOZ", 135);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("=R$4jOZJmTPV&,,\"", string3);
      
      String string4 = StringUtils.replaceOnce("}hA2N+@[G", "7W125W107W4W-53", ", Length: ");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("}hA2N+@[G", string4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = 'W';
      charArray0[3] = 'W';
      charArray0[4] = 'W';
      charArray0[5] = 'W';
      charArray0[6] = 'W';
      charArray0[7] = 'W';
      int int0 = StringUtils.indexOfAny((CharSequence) "}hA2N+@[G", charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'W', 'W', 'W', 'W', 'W', 'W', 'W', 'W'}, charArray0);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substringAfterLast("Ky@[p{InCombiningDiacriticalMarks}+", (int) (byte)107);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("s}+", string5);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Tz!9o!u6_jlt *PA#&/p[8n~s%G", "#", 32);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("Tz!9o!u6_jlt *PA#&/p[8n~s%G");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.getDigits("F1r`?gDGq,+aRl-");
      assertNotNull(string0);
      assertEquals("1", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, int0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("#", (String) null, 5);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripToNull("hw}OML3Z");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("hw}OML3Z", string1);
      
      String string2 = StringUtils.join((short[]) null, '[', 32, 5);
      assertNull(string2);
      
      String string3 = StringUtils.rotate("cl(~E", 32);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("~Ecl(", string3);
      
      int int1 = StringUtils.compare("]bnoJ", "#", false);
      assertFalse(int1 == int0);
      assertEquals(58, int1);
      
      String[] stringArray3 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray3);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      
      boolean boolean1 = vector0.add(charBuffer0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(vector0.contains(charBuffer0));
      
      String string4 = StringUtils.replacePattern("Tz!9o!u6_jlt *PA#&/p[8n~s%G", "hw}OML3Z", "hw}OML3Z");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Tz!9o!u6_jlt *PA#&/p[8n~s%G", string4);
      
      String string5 = StringUtils.uncapitalize("Strings must not be null");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("strings must not be null", string5);
      
      int int2 = StringUtils.lastIndexOfAny("Tz!9o!u6_jlt *PA#&/p[8n~s%G", (CharSequence[]) null);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String[] stringArray1 = Locale.getISOLanguages();
      assertNotNull(stringArray1);
      assertEquals(188, stringArray1.length);
      
      String string1 = StringUtils.wrapIfMissing("V", 'U');
      assertNotNull(string1);
      assertEquals("UVU", string1);
      
      String string2 = StringUtils.stripEnd((String) null, "4[u-`Sbi;!5#c7`%d");
      assertNull(string2);
      
      String string3 = StringUtils.unwrap((String) null, 'U');
      assertNull(string3);
      
      String string4 = StringUtils.uncapitalize((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.toRootUpperCase((String) null);
      assertNull(string5);
      
      boolean boolean3 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      double[] doubleArray0 = new double[0];
      String string6 = StringUtils.join(doubleArray0, 'z', 904, 90);
      assertNotNull(string6);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      String string7 = StringUtils.join((float[]) null, 'z', 904, (-1852));
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = StringUtils.substring("\r", (-981), (-981));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("", 21, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                     ", string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\r");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "nO[9)lmh.Ix~T%H");
      assertNull(stringArray0);
      
      String string2 = StringUtils.chomp("                     ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("                     ", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "\r", 5360, 5360);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.substringsBetween("JrP", "                     ", "                     ");
      assertNull(stringArray1);
      
      String string3 = StringUtils.abbreviateMiddle("h;Me\"-E,#", "JrP", 1082);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("h;Me\"-E,#", string3);
      
      int int1 = StringUtils.compare((String) null, "X:F{F", false);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string4 = StringUtils.leftPad("", (-981));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.mid("", 701, 3503);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = StringUtils.stripEnd("ls", "rkmRe,wS1_dIUHx%g2");
      assertNotNull(string0);
      assertEquals("ls", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isBlank("ls");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = StringUtils.join(byteArray0, 'X', (-1), (-535));
      assertNotNull(string1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("ls", "ls", "F2Y?6S@BD2z7>");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("F2Y?6S@BD2z7>", string2);
      
      String string3 = StringUtils.chomp("rkmRe,wS1_dIUHx%g2", "F2Y?6S@BD2z7>");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("rkmRe,wS1_dIUHx%g2", string3);
      
      String string4 = StringUtils.uncapitalize("ls");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("ls", string4);
      
      String string5 = StringUtils.substringBetween("ls", "t'neY&h73(tJL");
      assertNull(string5);
      
      String string6 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.StringUtils", "ls", (-1));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.StringUtils", string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "F2Y?6S@BD2z7>";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[2] = (CharSequence) "ls";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "ls", (CharSequence) "F2Y?6S@BD2z7>");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Class<CharBuffer> class0 = CharBuffer.class;
      ServiceLoader<CharBuffer> serviceLoader0 = ServiceLoader.load(class0);
      assertNotNull(serviceLoader0);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Class<String> class1 = String.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class1, classLoader0);
      assertNotNull(serviceLoader1);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      
      Iterator<CharBuffer> iterator0 = serviceLoader0.iterator();
      assertNotNull(iterator0);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      
      String string7 = StringUtils.join(iterator0, 'X');
      assertNotNull(string7);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
      
      String string8 = StringUtils.stripToEmpty("org.apache.commons.lang3.StringUtils74");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.StringUtils74", string8);
      
      String string9 = StringUtils.replace("", "Locale must not be null", "}r");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertEquals("", string9);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing(",rs", 'p');
      assertNotNull(string0);
      assertEquals("p,rsp", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) ",rs";
      charSequenceArray0[1] = (CharSequence) ",rs";
      charSequenceArray0[2] = (CharSequence) ",rs";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], charSequenceArray0[0], (-1));
      assertEquals(3, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.lowerCase("qSN#]L|}5qZ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("qsn#]l|}5qz", string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      charArray0[3] = 'p';
      charArray0[4] = 'p';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      charArray0[7] = 'f';
      charArray0[8] = 'p';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "p,rsp", charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'f', 'f', 'f', 'p', 'p', 'f', 'f', 'f', 'p'}, charArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase(charSequenceArray0[1], charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "qsn#]l|}5qz", charSequenceArray0[2], (-1));
      assertEquals(3, charSequenceArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.repeat('p', 14);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("pppppppppppppp", string2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.defaultString("(OI", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(OI", string1);
      
      String string2 = StringUtils.replaceOnce("", "(OI", "je");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("JE", "je");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("jeJEje", string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "je", (CharSequence) "(OI");
      assertEquals(0, int0);
      
      String string4 = StringUtils.reverseDelimited("", '\u0081');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.isAlphanumeric("(OI");
      assertFalse(boolean0);
      
      String string5 = StringUtils.chomp("(OI");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertEquals("(OI", string5);
      
      String string6 = StringUtils.wrapIfMissing("(OI", "Ng_Y;*+q");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("Ng_Y;*+q(OINg_Y;*+q", string6);
      
      String string7 = StringUtils.repeat("VSPArray and element cannot both be null", "(OI", 1550);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '\u0081';
      intArray0[1] = (int) '\u0081';
      intArray0[2] = 0;
      intArray0[3] = (int) '\u0081';
      intArray0[4] = (int) '\u0081';
      intArray0[5] = (-53);
      intArray0[6] = (int) '\u0081';
      intArray0[7] = (int) '\u0081';
      String string8 = StringUtils.join(intArray0, 'T', 1550, 0);
      assertNotNull(string8);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {129, 129, 0, 129, 129, (-53), 129, 129}, intArray0);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertEquals("", string8);
      
      int int1 = StringUtils.indexOf((CharSequence) "Ng_Y;*+q(OINg_Y;*+q", (CharSequence) "(OI");
      assertFalse(int1 == int0);
      assertEquals(8, int1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.defaultIfBlank("}aT@[wAFDPT", "}aT@[wAFDPT");
      assertNotNull(string0);
      assertEquals("}aT@[wAFDPT", string0);
      
      String string1 = StringUtils.wrapIfMissing("}aT@[wAFDPT", 'F');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("F}aT@[wAFDPTF", string1);
      
      String string2 = StringUtils.stripEnd("}aT@[wAFDPT", "}aT@[wAFDPT");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "F}aT@[wAFDPTF", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) ">Uq3J>2uE", (CharSequence) "}aT@[wAFDPT");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "2;BIQS", (char[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = (CharSequence) ">Uq3J>2uE";
      charSequenceArray0[3] = (CharSequence) "}aT@[wAFDPT";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) ">Uq3J>2uE";
      charSequenceArray0[6] = (CharSequence) "}aT@[wAFDPT";
      boolean boolean3 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.containsAny(charSequenceArray0[2], (CharSequence) null);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = StringUtils.right("FPV[w8ya{a5a;v?8WJs", 2231);
      assertNotNull(string0);
      assertEquals("FPV[w8ya{a5a;v?8WJs", string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.unwrap("L L", '9');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("L L", string2);
      
      String string3 = StringUtils.left(" ", 1575);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" ", string3);
      
      String string4 = StringUtils.deleteWhitespace(" ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      int int0 = StringUtils.compare(">m+:j0}\"<}1h", "FPV[w8ya{a5a;v?8WJs", true);
      assertEquals((-8), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Ky@[");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      String string5 = StringUtils.unwrap("", '5');
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.appendIfMissing("Tz!9o!u6_jlt *PA#", "p{InCombiningDiacriticalMarks}+", stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("Tz!9o!u6_jlt *PA#p{InCombiningDiacriticalMarks}+", string0);
      
      String string1 = StringUtils.center((String) null, 22);
      assertNull(string1);
      
      String string2 = StringUtils.lowerCase((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase((String) null, "dJoQb1*");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.rightPad("A.DwS+Ef<T1", 22, "Cannot store ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertEquals("A.DwS+Ef<T1Cannot stor", string4);
      
      String string5 = StringUtils.EMPTY;
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String string6 = StringUtils.substring("Cannot store ", 22, 22);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("yS)");
      assertNotNull(string0);
      assertEquals("yS)", string0);
      
      boolean boolean0 = StringUtils.isNumeric("yS)");
      assertFalse(boolean0);
      
      String string1 = StringUtils.difference("M]9", "M]9");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "yS)";
      String string2 = StringUtils.join(objectArray0, '', 536, 536);
      assertNotNull(string2);
      assertEquals(1, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.left((String) null, 536);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'fL{[xV^C3e]";
      stringArray0[1] = "'fL{[xV^C3e]";
      stringArray0[2] = "'fL{[xV^C3e]";
      stringArray0[3] = "'fL{[xV^C3e]";
      stringArray0[4] = "'fL{[xV^C3e]";
      boolean boolean0 = StringUtils.isMixedCase("'fL{[xV^C3e]");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compare("null/empty items", "'fL{[xV^C3e]", false);
      assertEquals(71, int0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(5, stringArray0.length);
      assertEquals("'fL{[xV^C3e]", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "}#3U=";
      String string1 = null;
      String string2 = StringUtils.CR;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("\r", string2);
      
      char char0 = 'u';
      int int0 = StringUtils.countMatches((CharSequence) null, 'u');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\r");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("}#3U=", "}#3U=", "\r");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\r", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\r";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "\r";
      charSequenceArray0[3] = (CharSequence) "\r";
      charSequenceArray0[4] = (CharSequence) "\r";
      String string4 = StringUtils.remove((String) null, 'u');
      assertNull(string4);
      
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "\r";
      String string5 = StringUtils.wrap("RDj<;/Y", 'u');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("uRDj<;/Yu", string5);
      
      charSequenceArray0[7] = (CharSequence) "uRDj<;/Yu";
      String string6 = StringUtils.replace("p{InCombiningDiacriticalMarks}+", "p^JfllODLM<", "}#3U=");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("p{InCombiningDiacriticalMarks}+", string6);
      
      charSequenceArray0[8] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      String string7 = StringUtils.join(booleanArray0, 'u', 0, (-1747));
      assertNotNull(string7);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      
      PriorityQueue<Object> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Object>(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = StringUtils.truncate("org.apache.commons.lang3.StringUtils", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[18];
      charArray0[16] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'p';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals(18, charArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWithAny("org.apache.commons.lang3.StringUtils", (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = StringUtils.center(".ZeF!kLt.ZeF!kLt", 2);
      assertNotNull(string0);
      assertEquals(".ZeF!kLt.ZeF!kLt", string0);
      
      String string1 = StringUtils.lowerCase("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{incombiningdiacriticalmarks}+", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase(" is not in the range '0' - '9'", ".ZeF!kLt.ZeF!kLt");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" is not in the range '0' - '9'", string2);
      
      String string3 = StringUtils.rightPad(",ft", 2, "A.Dw+Ef<1");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(",ft", string3);
      
      String string4 = StringUtils.EMPTY;
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.substring("E`G)2r$/8U", 2, 2);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String string6 = StringUtils.getDigits("?^v!AcS#&)!(l,h");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      String string7 = StringUtils.difference(",ft", ",ft");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      
      String string8 = StringUtils.reverseDelimited("p{incombiningdiacriticalmarks}+", '\\');
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertEquals("p{incombiningdiacriticalmarks}+", string8);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains("p{InCombiningDiacriticalMarks}+"));
      
      String string9 = StringUtils.join((List<?>) vector0, " is not in the range '0' - '9'", 2, 2);
      assertNotNull(string9);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertEquals("", string9);
      assertFalse(vector0.contains("p{InCombiningDiacriticalMarks}+"));
      
      boolean boolean0 = StringUtils.isAlpha(".ZeF!kLt.ZeF!kLt");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.defaultString("(OI", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(OI", string1);
      
      String string2 = StringUtils.replaceOnce("Strings must not be null", "(OI", "je");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Strings must not be null", string2);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("@g2Cr$AX`");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Strings must not be null");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      
      boolean boolean0 = stack0.add("gq-'8g)jM=");
      assertFalse(stack0.isEmpty());
      assertEquals("[gq-'8g)jM=]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      assertTrue(stack0.contains("gq-'8g)jM="));
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) stack0);
      assertNotNull(list0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[gq-'8g)jM=]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(stack0.contains("gq-'8g)jM="));
      assertFalse(list0.contains("gq-'8g)jM="));
      
      String string0 = StringUtils.join(list0, 'd', 280, (-1799));
      assertNotNull(string0);
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals("[gq-'8g)jM=]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("", string0);
      assertTrue(stack0.contains("gq-'8g)jM="));
      assertFalse(stack0.contains(string0));
      assertFalse(list0.contains("gq-'8g)jM="));
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string1 = StringUtils.stripStart("gq-'8g)jM=", "gq-'8g)jM=");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("gq-'8g)jM=", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
      
      String string0 = "Tz!9o!u6_jlt *PA#";
      int int0 = StringUtils.indexOf((CharSequence) null, 65536, 65536);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop("Tz!9o!u6_jlt *PA#");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Tz!9o!u6_jlt *PA", string1);
      
      char[] charArray0 = null;
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Tz!9o!u6_jlt *PA", (char[]) null);
      assertTrue(boolean0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "6`qS$_YV/|H43N?", (CharSequence) "Tz!9o!u6_jlt *PA#", 4196);
      assertFalse(int1 == int0);
      assertEquals(18, int1);
      
      String string2 = ", Length: 0";
      // Undeclared exception!
      try { 
        StringUtils.truncate("org.apache.commons.lang3.LocaleUtils-GS<b7i#k", (-1), 4196);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.swapCase(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\U", string1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-286L);
      longArray0[1] = (-2419L);
      longArray0[2] = (-4492L);
      String string2 = StringUtils.join(longArray0, '\\');
      assertNotNull(string2);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-286L), (-2419L), (-4492L)}, longArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-286\\-2419\\-4492", string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "U", string0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("U");
      assertFalse(boolean0);
      
      String string3 = StringUtils.difference("%uW", "=EU%3");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("=EU%3", string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "RcK\u0003;", (CharSequence) "-286-2419-4492", 19);
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      int int2 = StringUtils.compare("D21G", "%uW", true);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(31, int2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)116;
      shortArray0[1] = (short)250;
      shortArray0[2] = (short)321;
      shortArray0[3] = (short) (-1583);
      shortArray0[4] = (short)45;
      shortArray0[5] = (short)45;
      String string4 = StringUtils.join(shortArray0, '\\', Integer.MAX_VALUE, (-1009));
      assertNotNull(string4);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)116, (short)250, (short)321, (short) (-1583), (short)45, (short)45}, shortArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "=EU%3", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.unwrap("L L", '9');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L L", string1);
      
      String string2 = StringUtils.join((Iterable<?>) null, 'p');
      assertNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = 'S';
      charArray0[2] = 'q';
      charArray0[3] = 'T';
      charArray0[4] = '|';
      String string0 = StringUtils.join(charArray0, ',');
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'%', 'S', 'q', 'T', '|'}, charArray0);
      assertEquals("%,S,q,T,|", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("%,S,q,T,|");
      assertTrue(boolean0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>(318, comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean1 = priorityQueue0.add(locale_Category0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(priorityQueue0.contains(locale_Category0));
      
      String string1 = StringUtils.join((Iterable<?>) priorityQueue0, (String) null);
      assertNotNull(string1);
      assertEquals(1, priorityQueue0.size());
      assertFalse(string1.equals((Object)string0));
      assertEquals("DISPLAY", string1);
      assertTrue(priorityQueue0.contains(locale_Category0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = StringUtils.substring("\r", (-981), (-981));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("", 21, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                     ", string1);
      
      String string2 = StringUtils.trimToNull("\r");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\r");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "nO[9)lmh.Ix~T%H");
      assertNull(stringArray0);
      
      String string3 = StringUtils.getDigits("");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.trim(",v3@b=_OU_ULU:wqR");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string5 = StringUtils.removeEnd("                     ", "!Ze{N#MU");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("                     ", string5);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.substring("                     ", (-1511), (-1162));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (-981);
      doubleArray0[1] = (double) (-1511);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) (-981);
      doubleArray0[5] = (double) (-1162);
      doubleArray0[6] = (double) (-1162);
      String string7 = StringUtils.join(doubleArray0, 'y', 13, (-1511));
      assertNotNull(string7);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {(-981.0), (-1511.0), 0.0, 0.0, (-981.0), (-1162.0), (-1162.0)}, doubleArray0, 0.01);
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      
      int int2 = StringUtils.indexOf((CharSequence) "                     ", (CharSequence) "", 51);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(21, int2);
      
      String string8 = StringUtils.overlay("...", "org.apache.commons.lang3.StringUtilsException cloning Cloneable type ", 21, 57);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertEquals("...org.apache.commons.lang3.StringUtilsException cloning Cloneable type ", string8);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = StringUtils.join((float[]) null, '*');
      assertNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 1801);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      String string1 = StringUtils.joinWith((String) null, charSequenceArray0);
      assertNotNull(string1);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("", string1);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = "\\u";
      String string2 = StringUtils.wrap(string1, "8");
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("8\\u8", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "je", (CharSequence) string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, int0);
      
      String string3 = StringUtils.reverseDelimited("dF6%^2{lXr]w", '<');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("dF6%^2{lXr]w", string3);
      
      String string4 = StringUtils.center("dF6%^2{lXr]w", 128);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("                                                          dF6%^2{lXr]w                                                          ", string4);
      
      String string5 = StringUtils.stripEnd("                                                          dF6%^2{lXr]w                                                          ", "Search and Replace array lengths don't match: ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("                                                          dF6%^2{lXr]w", string5);
      
      String string6 = StringUtils.leftPad("                                                          dF6%^2{lXr]w", (-149), '>');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("                                                          dF6%^2{lXr]w", string6);
      
      String string7 = StringUtils.deleteWhitespace("dF6%^2{lXr]w");
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertEquals("dF6%^2{lXr]w", string7);
      
      int int1 = StringUtils.compareIgnoreCase("Ac%K6/VR?26", "je", false);
      assertFalse(int1 == int0);
      assertEquals((-9), int1);
      
      String string8 = StringUtils.wrapIfMissing(" has no clone methodorg.apache.commons.lang3.ArrayUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", "?^v!AcS#&)!(l,h");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertEquals("?^v!AcS#&)!(l,h has no clone methodorg.apache.commons.lang3.ArrayUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils?^v!AcS#&)!(l,h", string8);
      
      String string9 = StringUtils.join((float[]) null, '>');
      assertNull(string9);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "dF6%^2{lXr]w", (CharSequence) null);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string10 = StringUtils.defaultString(" has no clone methodorg.apache.commons.lang3.ArrayUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", "vje6JdHe\"3p#Jrtr[");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertEquals(" has no clone methodorg.apache.commons.lang3.ArrayUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", string10);
      
      String string11 = StringUtils.strip("#", "Ac%K6/VR?26");
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string4));
      assertEquals("#", string11);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[0] = (byte)90;
      Comparator<CharBuffer> comparator0 = (Comparator<CharBuffer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.removeStart("1NAAo\"S4'{\"LA_S", "M]9");
      assertNotNull(string0);
      assertEquals("1NAAo\"S4'{\"LA_S", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "1NAAo\"S4'{\"LA_S", (CharSequence) "1NAAo\"S4'{\"LA_S");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join(byteArray0, 'W');
      assertNotNull(string1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)0}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("90W0", string1);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.center("=dgu|t(q$x{#:*", (int) (byte)90, "L4**c>4|Pt[go4D8#");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("L4**c>4|Pt[go4D8#L4**c>4|Pt[go4D8#L4=dgu|t(q$x{#:*L4**c>4|Pt[go4D8#L4**c>4|Pt[go4D8#L4", string2);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Tz!9o!u6_jlt *PA#&/p[8n~s%G", "#", 11);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.remove((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.substringBetween("+l_]na7Q9H-'?0", "\r");
      assertNull(string1);
      
      String string2 = StringUtils.toRootUpperCase((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "+l_]na7Q9H-'?0", 2540);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "#", 19);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.split("Tz!9o!u6_jlt *PA#&/p[8n~s%G");
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      
      String string0 = StringUtils.getDigits("F1r`?gDGq,+aRl-");
      assertNotNull(string0);
      assertEquals("1", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertEquals(2, stringArray1.length);
      assertEquals(0, int0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("#", (String) null, 5);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripToNull("hw}OML3Z");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("hw}OML3Z", string1);
      
      String string2 = StringUtils.join((short[]) null, '[', 32, 5);
      assertNull(string2);
      
      String string3 = StringUtils.rotate("cl(~E", 32);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("~Ecl(", string3);
      
      int int1 = StringUtils.compare("]bnoJ", "#", false);
      assertFalse(int1 == int0);
      assertEquals(58, int1);
      
      String[] stringArray3 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray3);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      
      boolean boolean1 = vector0.add(charBuffer0);
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("[]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(vector0.contains(charBuffer0));
      
      String string4 = StringUtils.replacePattern("Tz!9o!u6_jlt *PA#&/p[8n~s%G", "hw}OML3Z", "hw}OML3Z");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Tz!9o!u6_jlt *PA#&/p[8n~s%G", string4);
      
      String string5 = StringUtils.uncapitalize("Strings must not be null");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("strings must not be null", string5);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 't';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\r", charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'t', 't'}, charArray0);
      assertEquals(0, int0);
      
      String string0 = StringUtils.substringAfter((String) null, 8192);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("\r", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = StringUtils.substring("\r", 49, 4);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.leftPad("org.apache.commons.lang3.LocaleUtils", 122, "\r");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\rorg.apache.commons.lang3.LocaleUtils", string1);
      
      String string2 = StringUtils.trimToNull("T3j,G>6rcwZn!$_V");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("T3j,G>6rcwZn!$_V", string2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "org.apache.commons.lang3.LocaleUtils", charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.defaultString("(OI", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(OI", string1);
      
      String string2 = StringUtils.replaceOnce("", "(OI", "je");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("JE", "je");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("jeJEje", string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "je", (CharSequence) "(OI");
      assertEquals(0, int0);
      
      String string4 = StringUtils.reverseDelimited("", '\u0081');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.isMixedCase("JE");
      assertFalse(boolean0);
      
      String string5 = StringUtils.wrapIfMissing("nz?7D(!gu", "Search and Replace array lengths don't match: ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Search and Replace array lengths don't match: nz?7D(!guSearch and Replace array lengths don't match: ", string5);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("u)[9ubX", "(OI");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Search and Replace array lengths don't match: ", "\n");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("oYWm)6");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "Ky@[", 15);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.getDigits("@g-5zJn`]");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("5", string6);
      
      String string7 = StringUtils.wrap("Strings must not be nullComparator should not be null.", 'G');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertEquals("GStrings must not be nullComparator should not be null.G", string7);
      
      boolean boolean3 = StringUtils.isAllEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean4 = StringUtils.isNumericSpace("nz?7D(!gu");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string8 = StringUtils.difference("Supplied value must be a valid byte literal between -32768 and 32767: [", "Search and Replace array lengths don't match: ");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertEquals("earch and Replace array lengths don't match: ", string8);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.defaultString("o\"S4'{\"LA_S", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("o\"S4'{\"LA_S", string1);
      
      String string2 = StringUtils.replaceOnce("", "o\"S4'{\"LA_S", "je");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "je", (CharSequence) "o\"S4'{\"LA_S");
      assertEquals(0, int0);
      
      String string3 = StringUtils.reverseDelimited("", '\u0081');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isMixedCase("JE");
      assertFalse(boolean0);
      
      String string4 = StringUtils.wrapIfMissing("nz?7D(!gu", "Search and Replace array lengths don't match: ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Search and Replace array lengths don't match: nz?7D(!guSearch and Replace array lengths don't match: ", string4);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("u)[9ubX", "o\"S4'{\"LA_S");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Search and Replace array lengths don't match: ", "\n");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("oYWm)6");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "Ky@[", 15);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.getDigits("@g-5zJn`]");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("5", string5);
      
      boolean boolean3 = StringUtils.isAllEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean4 = StringUtils.isNumericSpace("nz?7D(!gu");
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String string6 = StringUtils.difference("Supplied value must be a valid byte literal between -32768 and 32767: [", "Search and Replace array lengths don't match: ");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("earch and Replace array lengths don't match: ", string6);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[19];
      charSequenceArray0[0] = (CharSequence) "V[aBj";
      String string0 = StringUtils.reverseDelimited("V[aBj", 'c');
      assertNotNull(string0);
      assertEquals("V[aBj", string0);
      
      String string1 = StringUtils.center("lNN`OjD/:<C*eI*L", 95);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                                       lNN`OjD/:<C*eI*L                                        ", string1);
      
      String string2 = StringUtils.stripEnd("V[aBj", "lNN`OjD/:<C*eI*L");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("V[aB", string2);
      
      String string3 = StringUtils.deleteWhitespace("V[aBj");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("V[aBj", string3);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "s_5hFk|b", false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("xdvRIg@", "xdvRIg@");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = 9;
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 9);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.repeat('A', 51);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", string1);
      
      String string2 = StringUtils.substringBefore("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.endsWithAny("xdvRIg@", (CharSequence[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-90);
      String string3 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertNotNull(string3);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)18, (byte) (-90)}, byteArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\uFFFD\u0012\uFFFD", string3);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertNotNull(string4);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)18, (byte) (-90)}, byteArray0);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\uFFFD\u0012\uFFFD", string4);
      
      // Undeclared exception!
      try { 
        Charset.forName("Comparator should not be");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Comparator should not be
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = StringUtils.substringBefore("...", "...");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("CNT(|2-8j:qR}P", '\"');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("CNT(|2-8j:qR}P", string1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = StringUtils.right("FPV[w8ya{a5a;v?8WJs", 2231);
      assertNotNull(string0);
      assertEquals("FPV[w8ya{a5a;v?8WJs", string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.unwrap("L L", '9');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("L L", string2);
      
      String string3 = StringUtils.left(" ", 2231);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" ", string3);
      
      String string4 = StringUtils.deleteWhitespace(" ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      int int0 = StringUtils.compare(">m+:j0}\"<}1h", "FPV[w8ya{a5a;v?8WJs", true);
      assertEquals((-8), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Ky@[");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      String string5 = StringUtils.unwrap("", '5');
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      int int1 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals(4, stringArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("=2tVj5xn-,hAP*+$Q[y", "=2tVj5xn-,hAP*+$Q[y", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("nDk`'zgL)~U", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "=2tVj5xn-,hAP*+$Q[y", "nDk`'zgL)~U");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("Zr).apav()*V)5KQ`:7>W!", 'p');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("pZr).apav()*V)5KQ`:7>W!p", string1);
      
      String string2 = StringUtils.stripToNull("nDk`'zgL)~U");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("nDk`'zgL)~U", string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("L4**c>4|Pt[go4D8", "Zr).apav()*V)5KQ`:7>W!");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("L4**c>4|Pt[go4D8", string3);
      
      int int0 = StringUtils.indexOf((CharSequence) ", Length: ", (-999), (-1683));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("L4**c>4|Pt[go4D8", "Zr).apav()*V)5KQ`:7>W!", "org.apache.commons.lang3.Charsetorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.Charset");
      assertNull(stringArray0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfBlank("org.apache.commons.lang3.CharSequenceUtils", supplier0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string4);
      
      String string5 = StringUtils.chop("SYTzUfU<|vx6/:'G");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("SYTzUfU<|vx6/:'", string5);
      
      double double0 = StringUtils.getJaroWinklerDistance("SYTzUfU<|vx6/:'", "org.apache.commons.lang3.CharSequenceUtils");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = StringUtils.truncate("org.apache.commons.lang3.StringUtils", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.appendIfMissing((String) null, "", (CharSequence[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.trimToNull((String) null);
      assertNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("q_QE", 'Q');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string4 = StringUtils.unwrap("~T", 'J');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertEquals("~T", string4);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("#");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.removeEnd("", "");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String string6 = StringUtils.remove((String) null, (String) null);
      assertNull(string6);
      
      String string7 = StringUtils.trimToEmpty("org.apache.commons.lang3.StringUtils");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertEquals("org.apache.commons.lang3.StringUtils", string7);
      
      boolean boolean2 = StringUtils.isAlpha(".U5NRk~");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string8 = StringUtils.removeStart("", (String) null);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string0));
      assertEquals("", string8);
      
      String string9 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) ", Length: ";
      charSequenceArray0[2] = (CharSequence) "/r\"wgsW%t~or%qa?L";
      charSequenceArray0[3] = (CharSequence) "/r\"wgsW%t~or%qa?L";
      charSequenceArray0[4] = (CharSequence) "/r\"wgsW%t~or%qa?L";
      charSequenceArray0[5] = (CharSequence) ", Length: ";
      charSequenceArray0[6] = (CharSequence) ", Length: ";
      int int0 = StringUtils.indexOfAny((CharSequence) ", Length: ", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isEmpty(charSequenceArray0[5]);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.chomp("Strings must not be null");
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      String string1 = StringUtils.wrapIfMissing("Comparator should not be null.", "Strings must not be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be nullComparator should not be null.Strings must not be null", string1);
      
      String string2 = StringUtils.repeat("Comparator should not be null.", 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0[5], charSequenceArray0[3]);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = StringUtils.substring("\r", (-981), (-981));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("", (-981), "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.trimToNull("\r");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\r");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "nO[9)lmh.Ix~T%H");
      assertNull(stringArray0);
      
      String string3 = StringUtils.chomp("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "\r", 5360, 5360);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.substringsBetween("JrP", (String) null, "");
      assertNull(stringArray1);
      
      String string4 = StringUtils.removeStartIgnoreCase((String) null, "JrP");
      assertNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "h;Me\"-E,#", 618, 125);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray2 = StringUtils.substringsBetween("", (String) null, (String) null);
      assertNull(stringArray2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string5 = StringUtils.getIfBlank((String) null, supplier0);
      assertNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("nO[9)lmh.Ix~T%H", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = StringUtils.leftPad("A.DwS+Ef<T1", 46, "5*(7.+Jt8(");
      assertNotNull(string0);
      assertEquals("5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7.A.DwS+Ef<T1", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1";
      charSequenceArray0[2] = (CharSequence) "5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1";
      charSequenceArray0[3] = (CharSequence) "5*(7.+Jt8(";
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1"));
      
      priorityQueue0.clear();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1"));
      
      boolean boolean0 = priorityQueue0.add(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertFalse(arrayList0.contains("5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1"));
      assertFalse(priorityQueue0.contains("5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1"));
      
      String string1 = StringUtils.join((Iterable<?>) arrayList0, 'p');
      assertNotNull(string1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertFalse(arrayList0.contains(string1));
      
      String string2 = StringUtils.abbreviate("5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1", 46, 46);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 46, 2522);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = StringUtils.getIfEmpty((String) null, (Supplier<String>) null);
      assertNull(string0);
      
      String string1 = StringUtils.mid("!F[M]", 2228, 2228);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfterLast((String) null, 2228);
      assertNull(string2);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "!F[M]";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "!F[M]";
      objectArray0[6] = (Object) null;
      objectArray0[7] = (Object) null;
      String string3 = StringUtils.joinWith((String) null, objectArray0);
      assertNotNull(string3);
      assertEquals(8, objectArray0.length);
      assertFalse(string3.equals((Object)string1));
      
      int[] intArray0 = StringUtils.toCodePoints("!F[M]");
      assertNotNull(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {33, 70, 91, 77, 93, 127}, intArray0);
      
      String string4 = StringUtils.chomp("1~pLyWVGBjC", "!F[M]");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("1~pLyWVGBjC", string4);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "1~pLyWVGBjC");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.leftPad((String) null, 15, '%');
      assertNull(string5);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.trimToNull(".ZeF!kLt(^-0mtVcC[>=!p%|RNV");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals(".ZeF!kLt(^-0mtVcC[>=!p%|RNV", string6);
      
      int int2 = StringUtils.ordinalIndexOf("!F[M]java.lang.Object@21c933fbjava.lang.Object@13d52ce5!F[M]", (CharSequence) null, 37);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("!F[M]"));
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      HashSet<String> hashSet0 = new HashSet<String>(set0);
      assertNotNull(hashSet0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(set0.contains("!F[M]"));
      assertFalse(hashSet0.contains("!F[M]"));
      
      String string7 = StringUtils.join((Iterable<?>) hashSet0, "");
      assertNotNull(string7);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      assertFalse(set0.contains("!F[M]"));
      assertFalse(hashSet0.contains("!F[M]"));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = StringUtils.overlay((String) null, (String) null, (-115), (-115));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("Myi", "Myi", "Myi", 3);
      assertNotNull(string0);
      assertEquals("Myi", string0);
      
      String string1 = StringUtils.trimToEmpty("x}L_w5A+.^ yF<R");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("x}L_w5A+.^ yF<R", string1);
      
      boolean boolean0 = StringUtils.isNumeric("Myi");
      assertFalse(boolean0);
      
      String string2 = StringUtils.reverseDelimited("x}L_w5A+.^ yF<R", '\\');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("x}L_w5A+.^ yF<R", string2);
      
      String[] stringArray0 = new String[9];
      stringArray0[1] = "K";
      stringArray0[2] = " yF<Rx}L_w5A+.^";
      stringArray0[3] = "Myi";
      stringArray0[4] = " yF<Rx}L_w5A+.^";
      stringArray0[5] = " yF<Rx}L_w5A+.^";
      stringArray0[6] = "x}L_w5A+.^ yF<R";
      stringArray0[7] = "Myi";
      stringArray0[8] = "x}L_w5A+.^ yF<R";
      String string3 = StringUtils.replaceEach("x}L_w5A+.^ yF<R", stringArray0, stringArray0);
      assertNotNull(string3);
      assertEquals(9, stringArray0.length);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("x}L_w5A+.^ yF<R", string3);
      
      boolean boolean1 = StringUtils.isAsciiPrintable(" yF<Rx}L_w5A+.^");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrap("Object varargs must not be null", '`');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`Object varargs must not be null`", string1);
      
      String string2 = StringUtils.capitalize("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.stripStart("(^-", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("(^-", string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = (-1739);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "(^-", 32, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = StringUtils.wrap("clone", 'p');
      assertNotNull(string0);
      assertEquals("pclonep", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "pclonep";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "pclonep", (-1598));
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny(charSequenceArray0[1], (CharSequence[]) null);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.rotate((String) null, 'p');
      assertNull(string1);
      
      String string2 = StringUtils.substringBefore("\n", "\n");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int0 = StringUtils.compare("rw4", "rw4", false);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("q{7+", "Supplied value must be a valid byte literal between -32768 and 32767: [", (-2180), 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 72
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[0] = (byte) (-39);
      String string0 = StringUtils.join(byteArray0, 'W');
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-39), (byte)0}, byteArray0);
      assertEquals("-39W0", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("hJg|3PZ[]", "hJg|3PZ[]", "K");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("K", string1);
      
      boolean boolean0 = StringUtils.isBlank(" ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.chomp("h)^zk^mi36$U`Hsv");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("h)^zk^mi36$U`Hsv", string2);
      
      String string3 = StringUtils.center("Supplied value must be a valid byte literal between -128 and 127: [", (int) 'W', 'X');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("XXXXXXXXXXSupplied value must be a valid byte literal between -128 and 127: [XXXXXXXXXX", string3);
      
      String string4 = StringUtils.overlay("K", "L4** c>4|Pt[go4D8#", 21, (byte) (-39));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("L4** c>4|Pt[go4D8#", string4);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "L4** c>4|Pt[go4D8#";
      stringArray0[1] = "h)^zk^mi36$U`Hsv";
      stringArray0[2] = " ";
      stringArray0[3] = "L4** c>4|Pt[go4D8#";
      stringArray0[4] = "XXXXXXXXXXSupplied value must be a valid byte literal between -128 and 127: [XXXXXXXXXX";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = StringUtils.unwrap("=6@dh", "Hb^VR`UQGV");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.upperCase("");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = StringUtils.substring("", 49, 4);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("org.apache.commons.lang3.LocaleUtils", 100, "org.apache.commons.lang3.Charsets");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.Charsetorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.Charset", string1);
      
      byte[] byteArray0 = new byte[0];
      String string2 = StringUtils.join(byteArray0, '^', 100, (int) '^');
      assertNotNull(string2);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.chomp("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string4 = StringUtils.difference("", "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.LocaleUtils", string4);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = StringUtils.removeEnd(":R.JF!", ":R.JF!");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBetween("", "", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "");
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.defaultString("", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.stripToNull("h");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("h", string2);
      
      charSequenceArray0[3] = (CharSequence) "h";
      String string3 = StringUtils.removeStartIgnoreCase("h", "h");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      charSequenceArray0[4] = (CharSequence) "";
      CharBuffer charBuffer0 = CharBuffer.allocate(97);
      assertNotNull(charBuffer0);
      assertEquals(97, charBuffer0.capacity());
      assertEquals(97, charBuffer0.length());
      assertEquals(97, charBuffer0.remaining());
      assertEquals(97, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      
      String string4 = StringUtils.removeAll("", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "h", charSequenceArray0[0]);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("h");
      assertTrue(boolean0);
      
      String string5 = StringUtils.rightPad("", (-917), "Bw>SPw.$");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 97;
      String string6 = StringUtils.join(longArray0, 'a', 1257, (-917));
      assertNotNull(string6);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {97L}, longArray0);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      
      String string7 = StringUtils.substringBeforeLast("org.apache.commons.lang3.StringUtils", "");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.StringUtils", string7);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "org.apache.commons.lang3.StringUtils", 64);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("!nl;s[B[U(G*!c");
      assertNotNull(string0);
      assertEquals("!nl;s[B[U(G*!c", string0);
      
      String string1 = StringUtils.trim("F2Y?6S@BD2z7>");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("F2Y?6S@BD2z7>", string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("!nl;s[B[U(G*!c", "F2Y?6S@BD2z7>", 319);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.repeat("8TM", "F2Y?6S@BD2z7>", (-1));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("8TM", "F2Y?6S@BD2z7>");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "F2Y?6S@BD2z7>", (CharSequence) "!nl;s[B[U(G*!c");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "!nl;s[B[U(G*!c";
      charSequenceArray0[1] = (CharSequence) "8TM";
      charSequenceArray0[2] = (CharSequence) "!nl;s[B[U(G*!c";
      String string3 = StringUtils.replaceFirst("", "qS9vKy", "qS9vKy");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      Locale locale1 = Locale.TAIWAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(locale1.equals((Object)locale0));
      
      String string4 = locale0.getDisplayLanguage(locale1);
      assertNotNull(string4);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\u4E2D\u6587", string4);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertNotSame(locale0, locale1);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(locale0.equals((Object)locale1));
      
      String string5 = StringUtils.upperCase("Invalid locale format", locale0);
      assertNotNull(string5);
      assertNotSame(locale0, locale1);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("INVALID LOCALE FORMAT", string5);
      
      charSequenceArray0[4] = (CharSequence) "INVALID LOCALE FORMAT";
      charSequenceArray0[5] = (CharSequence) "!nl;s[B[U(G*!c";
      charSequenceArray0[6] = (CharSequence) "F2Y?6S@BD2z7>";
      charSequenceArray0[7] = (CharSequence) "F2Y?6S@BD2z7>";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string6 = StringUtils.right("F2Y?6S@BD2z7>", 0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("", charSequenceArray0[7]);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string7 = StringUtils.substring(" vs ", 319, (-1));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertEquals("", string7);
      
      String string8 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string8);
      
      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.swapCase("T\"]N9V");
      assertNotNull(string0);
      assertEquals("t\"]n9v", string0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      Object[] objectArray0 = new Object[0];
      String string2 = StringUtils.join(objectArray0, "48ch", 14, 14);
      assertNotNull(string2);
      assertEquals(0, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.replacePattern("", "", (String) null);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.stripStart("48ch", (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("48ch", string4);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string5 = StringUtils.replaceIgnoreCase("Locale must not be null", "48ch", "S)xkv}8L1]Rg%EXHP");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Locale must not be null", string5);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "T\"]N9V";
      stringArray0[1] = null;
      stringArray0[2] = "48ch";
      stringArray0[3] = null;
      stringArray0[4] = "Locale must not be null";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string6 = StringUtils.substringBetween("Minimum abbreviation width with offset is %dch", (String) null, "Locale must not be null");
      assertNull(string6);
      
      String string7 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "oNW~";
      String string1 = StringUtils.chomp("oNW~");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("oNW~", string1);
      
      String string2 = StringUtils.stripToNull("iDQV,0=E");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("iDQV,0=E", string2);
      
      int int0 = 0;
      String string3 = StringUtils.truncate((String) null, 0);
      assertNull(string3);
      
      String string4 = StringUtils.getDigits((String) null);
      assertNull(string4);
      
      String string5 = "Minimum abbreviation width is %d";
      String string6 = StringUtils.leftPad("iDQV,0=E", 994, "Minimum abbreviation width is %d");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("Minimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation widthiDQV,0=E", string6);
      
      String string7 = StringUtils.wrapIfMissing("\"_~sZ||<i^:6Byan", "AF");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertEquals("AF\"_~sZ||<i^:6ByanAF", string7);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "Minimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation width is %dMinimum abbreviation widthiDQV,0=E", (CharSequence) "\"_~sZ||<i^:6Byan");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 792);
      assertNull(string0);
      
      String string1 = StringUtils.lowerCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("Search and Replace array lengths don't match: ", "N|`(K*V");
      assertNotNull(string2);
      assertEquals("Search and Replace array lengths don't match: ", string2);
      
      boolean boolean0 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      int int0 = 65536;
      // Undeclared exception!
      StringUtils.rightPad("A.DwS+Ef<T1", 65536, (String) null);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.appendIfMissing("Tz!9o!u6_jlt *PA#", "p{InCombiningDiacriticalMarks}+", stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("Tz!9o!u6_jlt *PA#p{InCombiningDiacriticalMarks}+", string0);
      
      String string1 = StringUtils.stripEnd("XH+eJB", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("XH+eJB", string1);
      
      String string2 = StringUtils.substringBefore("#C0bGmYHD^8y", "XH+eJB");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("#C0bGmYHD^8y", string2);
      
      boolean boolean0 = StringUtils.isMixedCase("#C0bGmYHD^8y");
      assertTrue(boolean0);
      
      String string3 = StringUtils.wrapIfMissing("Ky@[", "XH+eJB");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("XH+eJBKy@[XH+eJB", string3);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("#C0bGmYHD^8y");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("@g-5zJn`]", "Exception cloning Cloneable type ");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Tz!9o!u6_jlt *PA#", "XH+eJB");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("Exception cloning Cloneable type ");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(8, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      String string4 = StringUtils.wrapIfMissing("Tz!9o!u6_jlt *PA#", 'B');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("BTz!9o!u6_jlt *PA#B", string4);
      
      String string5 = StringUtils.stripEnd("#C0bGmYHD^8y", "wS.`H4%,JrP49;c)");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertEquals("#C0bGmYHD^8y", string5);
      
      String string6 = StringUtils.unwrap("Exception cloning Cloneable type ", 'B');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("Exception cloning Cloneable type ", string6);
      
      String string7 = StringUtils.uncapitalize("E^bBWNeF@FP>");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals("e^bBWNeF@FP>", string7);
      
      String string8 = StringUtils.getCommonPrefix(stringArray2);
      assertNotNull(string8);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(8, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertEquals("", string8);
      
      boolean boolean3 = StringUtils.isMixedCase("XH+eJB");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      int int0 = StringUtils.compare("Tz!9o!u6_jlt *PA#p{InCombiningDiacriticalMarks}+", "ls", true);
      assertEquals((-24), int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\r", charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'f', 'f'}, charArray0);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      String string0 = StringUtils.substringBetween("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-853));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.getDigits("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals("", string1);
      
      String string2 = StringUtils.wrap("clone", 'p');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("pclonep", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "pclonep";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean1 = StringUtils.isNumericSpace(charSequenceArray0[0]);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.difference("", " vs ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" vs ", string3);
      
      boolean boolean2 = StringUtils.isAlphanumeric("clone");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string4 = StringUtils.substringAfterLast("", (-853));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)charSequence0));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Arguments cannot both be null", "Strings must no");
      assertNotNull(string0);
      assertEquals("Arguments cannot both be null", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Strings must no";
      charSequenceArray0[1] = (CharSequence) "Strings must no";
      charSequenceArray0[2] = (CharSequence) "Strings must no";
      boolean boolean0 = StringUtils.isAlphanumeric(charSequenceArray0[0]);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("Arguments cannot both be null", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 11;
      intArray0[1] = 2091;
      intArray0[2] = 2;
      intArray0[3] = 48;
      intArray0[4] = 1371;
      intArray0[5] = 19;
      intArray0[6] = 76;
      String[] stringArray0 = StringUtils.split((String) null, "Invalid locale format: ");
      assertNull(stringArray0);
      
      String string1 = StringUtils.wrapIfMissing(".ZeF!kLt", "(^-0mtVcC[>=!p%|RNV");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(^-0mtVcC[>=!p%|RNV.ZeF!kLt(^-0mtVcC[>=!p%|RNV", string1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[0] = (byte) (-39);
      String string0 = StringUtils.join(byteArray0, 'W');
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-39), (byte)0}, byteArray0);
      assertEquals("-39W0", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("hJg|3PZ[]", "hJg|3PZ[]", "K");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("K", string1);
      
      boolean boolean0 = StringUtils.isBlank(", '");
      assertFalse(boolean0);
      
      String string2 = StringUtils.chomp("h)^zk^mi36$U`Hsv");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("h)^zk^mi36$U`Hsv", string2);
      
      boolean boolean1 = StringUtils.isEmpty("-39W0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.ordinalIndexOf("h)^zk^mi36$U`Hsv", "-39W0", 3);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.overlay("h)^zk^mi36$U`Hsv", "L4**c>4|Pt[go4D8#", 21, 50);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("h)^zk^mi36$U`HsvL4**c>4|Pt[go4D8#", string3);
      
      String string4 = StringUtils.replaceEach("h", (String[]) null, (String[]) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("h", string4);
      
      String string5 = StringUtils.repeat("-39W0", 64);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0-39W0", string5);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (int) (byte) (-39);
      intArray0[1] = (-1);
      intArray0[2] = 3429;
      intArray0[3] = 159;
      intArray0[4] = (int) (byte)90;
      intArray0[5] = (int) 'X';
      String string6 = StringUtils.join(intArray0, 'X', 64, 48);
      assertNotNull(string6);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {(-39), (-1), 3429, 159, 90, 88}, intArray0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      
      boolean boolean2 = StringUtils.isMixedCase(", '");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.swapCase("T\"]N9V");
      assertNotNull(string0);
      assertEquals("t\"]n9v", string0);
      
      String string1 = StringUtils.capitalize("H[KqABKMk](");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("H[KqABKMk](", string1);
      
      String string2 = StringUtils.unwrap("H[KqABKMk](", "t\"]n9v");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("H[KqABKMk](", string2);
      
      String string3 = StringUtils.replaceChars("h'", "H[KqABKMk](", "H[KqABKMk](");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("h'", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[1] = (CharSequence) "h'";
      charSequenceArray0[2] = (CharSequence) "t\"]n9v";
      charSequenceArray0[3] = (CharSequence) "H[KqABKMk](";
      charSequenceArray0[4] = (CharSequence) "h'";
      String string4 = StringUtils.repeat("h'", "H[KqABKMk](", 2905);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      charSequenceArray0[5] = (CharSequence) string4;
      charSequenceArray0[6] = (CharSequence) "H[KqABKMk](";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.center(string4, 2905);
      assertNotNull(string5);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.unwrap("The type must not be null", 'P');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("The type must not be null", string6);
      
      int int0 = StringUtils.countMatches((CharSequence) "iqQ", charSequenceArray0[5]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string7 = StringUtils.wrapIfMissing("T\"]N9V", '=');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("=T\"]N9V=", string7);
      
      int int1 = StringUtils.lastIndexOfAny("Search and Replace array lengths don't match: ", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      assertNotNull(byteBuffer0);
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      assertNotNull(byteBuffer1);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(byteBuffer1.isDirect());
      assertFalse(byteBuffer1.hasRemaining());
      assertEquals(0, byteBuffer1.limit());
      assertEquals(0, byteBuffer1.remaining());
      assertEquals(0, byteBuffer1.capacity());
      assertTrue(byteBuffer1.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer1.toString());
      assertEquals(0, byteBuffer1.position());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertFalse(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.equals((Object)byteBuffer0));
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Tz!9o!u6_jlt *PA#&/p[8n~s%G", "#", 32);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("Tz!9o!u6_jlt *PA#&/p[8n~s%G");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.substringAfter("#", 118);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.getDigits("F1r`?gDGq,+aRl-");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, int0);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("#", (String) null, 118);
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripToNull("hw}OML3Z");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("hw}OML3Z", string2);
      
      String string3 = StringUtils.join((short[]) null, '[', 32, 118);
      assertNull(string3);
      
      String string4 = StringUtils.rotate("cl(~E", 32);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("~Ecl(", string4);
      
      int int1 = StringUtils.compare("]bnoJ", "#", false);
      assertFalse(int1 == int0);
      assertEquals(58, int1);
      
      String[] stringArray3 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray3);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      char char0 = '3';
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 32, 1645);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) ", Length: ";
      charSequenceArray0[1] = (CharSequence) ", Length: ";
      charSequenceArray0[2] = (CharSequence) "/r-\"w=sW%t~or%qa?L";
      charSequenceArray0[3] = (CharSequence) "/r-\"w=sW%t~or%qa?L";
      charSequenceArray0[4] = (CharSequence) "/r-\"w=sW%t~or%qa?L";
      charSequenceArray0[5] = (CharSequence) ", Length: ";
      charSequenceArray0[6] = (CharSequence) ", Length: ";
      int int0 = StringUtils.indexOfAny((CharSequence) ", Length: ", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(charSequenceArray0[6]);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.chomp("Strings must not be null");
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      String string1 = StringUtils.wrapIfMissing("Comparator should not be null.", "Strings must not be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be nullComparator should not be null.Strings must not be null", string1);
      
      String string2 = StringUtils.repeat("Strings must not be nullComparator should not be null.Strings must not be null", ")T2Bd_x>An", (-1217));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0[5], charSequenceArray0[3]);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("org.apache.commons.lang3.CharUtils", "uUzbz&S");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharBuffer charBuffer0 = StringUtils.getIfBlank((CharBuffer) null, supplier0);
      assertNull(charBuffer0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-835));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfterLast("Strings must not be null", 65);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.removeStart("", "Strings must not be null");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Strings must not be null", 1819);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("pEzw", "", "Hn>d!DG;P8iJnhmcHA");
      assertNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "Hn>d!DG;P8iJnhmcHA", 95);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string3 = StringUtils.getIfBlank("", supplier0);
      assertNull(string3);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      assertEquals(250, stringArray1.length);
      
      String string4 = StringUtils.substringAfter("", (-1));
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", 1819);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      Object[] objectArray0 = new Object[0];
      String string5 = StringUtils.join(objectArray0, 'S');
      assertNotNull(string5);
      assertEquals(0, objectArray0.length);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "Strings must not be null", "Strings must not be null");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.reverse((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeAll("#", "Strings must not be null");
      assertNotNull(string1);
      assertEquals("#", string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("1P<N$cmni`$1/]P49", "p{InCombiningDiacriticalMarks}+", "&`>g.5$;");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // p{InCombiningDiacriticalMarks}+
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "}?6<^]?5Yoc");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.right("}?6<^]?5Yoc", 67);
      assertNotNull(string0);
      assertEquals("}?6<^]?5Yoc", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "}?6<^]?5Yoc");
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("W", '>');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("W", string1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "=2tVj5xn-,hAP*+$Q[y";
      String string1 = "";
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("", "nDk`'zgL)~U");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 7
         // nDk`'zgL)~U
         //        ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBeforeLast("Exceptioncloning Clone null", "Exceptioncloning Clone null");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "R[%u(", 2);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      String string0 = StringUtils.replaceChars((String) null, '<', '<');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("h", "rkmRe,wS1_dIUHx%g2F2Y?6S@BD2z7>");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripToEmpty("");
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substring("rkmRe,wS1_dIUHx%g2F2Y?6S@BD2z7>", 14, 14);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.countMatches((CharSequence) null, ' ');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("#6~O='o:kw#s&O93mM");
      assertNotNull(string0);
      assertEquals("#6~O='o:kw#s&O93mM", string0);
      
      int int0 = 57;
      String string1 = StringUtils.join((byte[]) null, 'k', 57, 57);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "#6~O='o:kw#s&O93mM", (char[]) null);
      assertFalse(boolean0);
      
      String string2 = "&";
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "#6~O='o:kw#s&O93mM";
      String string3 = StringUtils.prependIfMissing("&", "#6~O='o:kw#s&O93mM", charSequenceArray0);
      assertNotNull(string3);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("#6~O='o:kw#s&O93mM&", string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "#6~O='o:kw#s&O93mM&", (char[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.substringBetween("#6~O='o:kw#s&O93mM", "#6~O='o:kw#s&O93mM");
      assertNull(string4);
      
      String string5 = StringUtils.trimToNull((String) null);
      assertNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "&", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.right("FPV[w8ya{a5a;v?8WJs", 2231);
      assertNotNull(string0);
      assertEquals("FPV[w8ya{a5a;v?8WJs", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("FPV[w8ya{a5a;v?8WJs");
      assertNotNull(stringArray0);
      assertEquals(17, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "FPV[w8ya{a5a;v?8WJs", (CharSequence) "FPV[w8ya{a5a;v?8WJs", 847);
      assertEquals(0, int0);
      
      String string1 = StringUtils.getDigits("}`e");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.wrap("4j?SIuA{yPheB0aKt]", 'E');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("E4j?SIuA{yPheB0aKt]E", string2);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(17, stringArray0.length);
      assertFalse(boolean0);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean1 = StringUtils.isNumericSpace("HSgB1hN6;Pm64b-3;");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.difference("E4j?SIuA{yPheB0aKt]E", "4j?SIuA{yPheB0aKt]");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("4j?SIuA{yPheB0aKt]", string3);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.substringAfter("}#3U=", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("|O:JkGPva", "b)", "");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 0
         // b)
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.right("ln}?6<^]?5Yocln}?6<^]?5Yoc", 7);
      assertNotNull(string0);
      assertEquals("^]?5Yoc", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("^]?5Yoc", "^]?5Yoc", 7);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("ln}?6<^]?5Yocln}?6<^]?5Yoc", "^]?5Yoc");
      assertFalse(int1 == int0);
      assertEquals(33, int1);
      
      String string1 = StringUtils.stripToEmpty("^]?5Yoc");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("^]?5Yoc", string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "^]?5Yoc", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substring("&)n~s%-jd'oG", (-1), 7);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int2 = StringUtils.countMatches((CharSequence) null, 'Z');
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("&)n~s%-jd'oG", supplier0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("&)n~s%-jd'oG", string3);
      
      String string4 = StringUtils.join((Iterable<?>) null, "&)n~s%-jd'oG");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      String string0 = StringUtils.rotate("*^LW{MO", 535);
      assertNotNull(string0);
      assertEquals("^LW{MO*", string0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      String string1 = StringUtils.deleteWhitespace("^LW{MO*");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("^LW{MO*", string1);
      
      String string2 = StringUtils.trimToNull("^LW{MO*");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("^LW{MO*", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "*^LW{MO", (CharSequence) "*^LW{MO");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("M`J^:'", "", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("M`J^:'", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      String string1 = StringUtils.replaceOnce("", "M`J^:'", "M`J^:'");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "nDk`'zgL)~U");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "M`J^:'", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.lowerCase("qSN#]L|}5qZ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("qsn#]l|}5qz", string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "qsn#]l|}5qz", charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'p', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(boolean0);
      
      int int2 = StringUtils.countMatches((CharSequence) "", '[');
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.right("ln}?6<^]?5Yocln}?6<^]?5Yoc", 7);
      assertNotNull(string0);
      assertEquals("^]?5Yoc", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("^]?5Yoc", "^]?5Yoc", 7);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("ln}?6<^]?5Yocln}?6<^]?5Yoc", "^]?5Yoc");
      assertFalse(int1 == int0);
      assertEquals(33, int1);
      
      String string1 = StringUtils.strip("^]?5Yoc", "^]?5Yoc");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceOnce("d", (String) null, "EyxwOS@5ukw)m1uua");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("d", string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("$?k_d`k\"G!8<vHCf]K", "d");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("$?k_d`k\"G!8<vHCf]K", string3);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-76);
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-96);
      String string0 = StringUtils.toRootLowerCase("b5kR\u0003|6J|CDPpX3_WY");
      assertNotNull(string0);
      assertEquals("b5kr\u0003|6j|cdppx3_wy", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("b5kr\u0003|6j|cdppx3_wy", "b5kr\u0003|6j|cdppx3_wy");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.defaultString("Kv`M~#De ", "JE");
      assertNotNull(string0);
      assertEquals("Kv`M~#De ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" vs ", "JE");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.appendIfMissing("Kv`M~#De ", " vs ", charSequenceArray0);
      assertNotNull(string1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Kv`M~#De  vs ", string1);
      
      String string2 = StringUtils.center("", 1586);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.lowerCase("offset cannot be negative");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("offset cannot be negative", string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("v~()n~s%-jd'o-jd'oG", "v~()n~s%-jd'o-jd'oG");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.rightPad("\r", 32, "Tz!9o!u6_jlt *PA#");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("\rTz!9o!u6_jlt *PA#Tz!9o!u6_jlt", string5);
      
      String string6 = StringUtils.EMPTY;
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      
      String string7 = StringUtils.substring("Threshold must not be negative", 32, 4142);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Kv`M~#De ", (CharSequence) "offset cannot be negative");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("Kv`M~#De  vs ", "Kv`M~#De ");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.endsWith("", "v~()n~s%-jd'o-jd'oG");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Cannot store ", (CharSequence) null, (-634));
      assertEquals((-1), int0);
      
      String string8 = StringUtils.replaceChars((String) null, "Search and Replace array lengths don't match: ", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNull(string8);
      
      String string9 = StringUtils.substringBetween("Comparator should not be null.Strings must not be null", (String) null, "Q.#vLdICX<6`4#Ra");
      assertNull(string9);
      
      String string10 = StringUtils.chomp("Tz!9o!u6_jlt *PA#", "&/p[8n~s%G");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertEquals("Tz!9o!u6_jlt *PA#", string10);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.repeat('<', 54);
      assertNotNull(string0);
      assertEquals("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", string0);
      
      String string1 = StringUtils.replaceIgnoreCase(" is not in the range '0' - '9'", "Ie6;@l$*#", "?L");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" is not in the range '0' - '9'", string1);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.chomp(" is not in the range '0' - '9'");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" is not in the range '0' - '9'", string2);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.center("/7rhH,38Gw8OJoa", 5, 'M');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("/7rhH,38Gw8OJoa", string3);
      
      int int0 = StringUtils.ordinalIndexOf("p{InCombiningDiacriticalMarks}+", ", '", 54);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.overlay("hJg|3PZ[]", " is not in the range '0' - '9'", 32, 4505);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("hJg|3PZ[] is not in the range '0' - '9'", string4);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = StringUtils.containsNone((CharSequence) "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string5 = StringUtils.replaceEach("Ie6;@l$*#", (String[]) null, (String[]) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Ie6;@l$*#", string5);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("Exception cloning Cloneable type ", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils");
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray1);
      assertEquals(30, stringArray1.length);
      
      String string2 = StringUtils.wrapIfMissing("V", 'U');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("UVU", string2);
      
      String string3 = StringUtils.stripEnd((String) null, "4[u-`Sbi;!5#c7`%d");
      assertNull(string3);
      
      String string4 = StringUtils.unwrap("org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", 'U');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", string4);
      
      String string5 = StringUtils.uncapitalize((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      
      boolean boolean3 = StringUtils.isMixedCase((CharSequence) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string7 = StringUtils.normalizeSpace("4[u-`Sbi;!5#c7`%d");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertEquals("4[u-`Sbi;!5#c7`%d", string7);
      
      String string8 = StringUtils.replace((String) null, (String) null, "nDk`'zgL)~U");
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      String string0 = StringUtils.join(booleanArray0, '\'', 275, 275);
      assertNotNull(string0);
      assertEquals(4, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false}, booleanArray0));
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string1 = StringUtils.substringBefore("", 275);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("nDk`'zgL)~U", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "nDk`'zgL)~U";
      String string1 = StringUtils.replaceEach("nDk`'zgL)~U", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("nDk`'zgL)~U", string1);
      
      boolean boolean0 = StringUtils.endsWithAny("nDk`'zgL)~U", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("nDk`'zgL)~U");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.appendIfMissing("nDk`'zgL)~U", "nDk`'zgL)~U", stringArray0);
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("nDk`'zgL)~U", string2);
      
      String string3 = StringUtils.substringAfterLast("nDk`'zgL)~U", "org.apache.commons.lang3.exception.CloneFailedException");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "nDk`'zgL)~U", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      String string0 = StringUtils.substring("\r", (-981), (-981));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("", 21, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                     ", string1);
      
      String string2 = StringUtils.trimToNull("\r");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\r");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "nO[9)lmh.Ix~T%H");
      assertNull(stringArray0);
      
      String string3 = StringUtils.chomp("                     ");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("                     ", string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "\r", 5360, 5360);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.substringsBetween("JrP", (String) null, "                     ");
      assertNull(stringArray1);
      
      String string4 = StringUtils.abbreviateMiddle("h;Me\"-E,#", "JrP", 1082);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("h;Me\"-E,#", string4);
      
      int int1 = StringUtils.compare((String) null, "X:F{F", false);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(" vs ", " vs ", " vs ");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.compare(" vs ", " vs ");
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints(" vs ");
      assertNotNull(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {32, 118, 115, 32}, intArray0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.repeat(",", "dKX'o/", (int) (byte)10);
      assertNotNull(string0);
      assertEquals(",dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "dKX'o/";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "dKX'o/");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) ",dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,dKX'o/,", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "Arr");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("Arr");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, "org.apache.commons.lang3.StringUtils");
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Arr");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null, 5);
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.StringUtils", (String) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray1);
      
      String string2 = StringUtils.center("}?6<^]?5Yoc", 239);
      assertNotNull(string2);
      assertEquals("                                                                                                                 }?6<^]?5Yoc                                                                                                                  ", string2);
      
      String string3 = StringUtils.stripEnd("                                                                                                                 }?6<^]?5Yoc                                                                                                                  ", "4[u-`Sbi;!5#c7`%d");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertEquals("                                                                                                                 }?6<^]?5Yoc                                                                                                                  ", string3);
      
      String string4 = StringUtils.leftPad((String) null, 5);
      assertNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.StringUtils", (String) null);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray1);
      
      String string1 = StringUtils.wrapIfMissing("V", 'U');
      assertNotNull(string1);
      assertEquals("UVU", string1);
      
      String string2 = StringUtils.stripEnd((String) null, "4[u-`Sbi;!5#c7`%d");
      assertNull(string2);
      
      String string3 = StringUtils.unwrap((String) null, 'U');
      assertNull(string3);
      
      String string4 = StringUtils.uncapitalize((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      
      boolean boolean3 = StringUtils.isMixedCase((CharSequence) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = ']';
      String string0 = StringUtils.trimToNull("0WB");
      assertNotNull(string0);
      assertEquals("0WB", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\"j]`|");
      assertFalse(boolean0);
      
      String string1 = StringUtils.getDigits("0WB");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "e%o,=$t", (-149), 73);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("OcN", "P;zE=8lyT~9", "0");
      assertNull(stringArray0);
      
      String string2 = StringUtils.replaceOnce("0WB", "jA).[", "Strings must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("0WB", string2);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) '1';
      floatArray0[1] = (float) (-149);
      floatArray0[2] = (float) ']';
      floatArray0[3] = (float) (-149);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) ']';
      floatArray0[7] = (float) (-149);
      floatArray0[8] = 0.0F;
      String string3 = StringUtils.join(floatArray0, 'o', 73, (-2367));
      assertNotNull(string3);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {49.0F, (-149.0F), 93.0F, (-149.0F), (-1.0F), 0.0F, 93.0F, (-149.0F), 0.0F}, floatArray0, 0.01F);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "0WB", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "0WB";
      charSequenceArray0[1] = (CharSequence) "";
      String string4 = StringUtils.prependIfMissingIgnoreCase((String) null, "\"j]`|", charSequenceArray0);
      assertNull(string4);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = StringUtils.leftPad("A.DwS+Ef<T1", 46, "5*(7.+Jt8(");
      assertNotNull(string0);
      assertEquals("5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7.A.DwS+Ef<T1", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1";
      charSequenceArray0[2] = (CharSequence) "5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1";
      charSequenceArray0[3] = (CharSequence) "5*(7.+Jt8(";
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(46));
      
      priorityQueue0.clear();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(46));
      
      boolean boolean0 = priorityQueue0.add(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertFalse(arrayList0.contains("5*(7.+Jt8("));
      assertFalse(priorityQueue0.contains(46));
      
      String string1 = StringUtils.leftPad("5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1", 46);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" 5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1", string1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 46;
      doubleArray0[1] = (double) 'p';
      doubleArray0[2] = (double) 'p';
      doubleArray0[3] = (double) 46;
      doubleArray0[5] = (double) 'p';
      int int0 = StringUtils.indexOf((CharSequence) "5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1", 46);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.remove(", Length: ", "org.apache.commons.lang3.ObjectUtilsfkY9.Z1");
      assertNotNull(string0);
      assertEquals(", Length: ", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) ", Length: ", (CharSequence) "]vP)*V)5KQ`:7>W!");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals(", Length: ", charSequence0);
      
      String string1 = StringUtils.defaultString("}hA2N+@[G", ", Length: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("}hA2N+@[G", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "}hA2N+@[G";
      stringArray0[1] = "maxWith cannot be negative";
      stringArray0[2] = "}hA2N+@[G";
      stringArray0[3] = "r6G%~=rCE++g$VF{HuM";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, ".[jA)");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.removeEnd(", Length: ", "\n");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(", Length: ", string2);
      
      String string3 = StringUtils.rightPad("}hA2N+@[G", (-1350));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("}hA2N+@[G", string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "}hA2N+@[G", (CharSequence) "n~");
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      
      String string4 = StringUtils.join((byte[]) null, '5');
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = StringUtils.right("FPV[w8ya{a5a;v?8Js", 2231);
      assertNotNull(string0);
      assertEquals("FPV[w8ya{a5a;v?8Js", string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.unwrap("L L", '9');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("L L", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 2231, 2231);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "FPV[w8ya{a5a;v?8Js";
      String string3 = StringUtils.strip("Qxw$>ol");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Qxw$>ol", string3);
      
      charSequenceArray0[1] = (CharSequence) "Qxw$>ol";
      String string4 = StringUtils.rotate("[4vSZ^vx_S..MY8A", 2231);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("S..MY8A[4vSZ^vx_", string4);
      
      charSequenceArray0[2] = (CharSequence) "S..MY8A[4vSZ^vx_";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "FPV[w8ya{a5a;v?8Js";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) "L L";
      charSequenceArray0[8] = (CharSequence) "FPV[w8ya{a5a;v?8Js";
      boolean boolean1 = StringUtils.containsAny((CharSequence) "FPV[w8ya{a5a;v?8Js", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "");
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.defaultString("", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = "h";
      String string3 = StringUtils.stripToNull("h");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("h", string3);
      
      charSequenceArray0[3] = (CharSequence) "h";
      String string4 = StringUtils.removeStartIgnoreCase("h", "h");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertEquals("", string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(charSequenceArray0[0], charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string5 = StringUtils.strip("", "h");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char char0 = ';';
      int int0 = StringUtils.countMatches((CharSequence) "h", ';');
      assertEquals(0, int0);
      
      String string6 = StringUtils.wrap("\r", "org.apache.commons.lang3.CharSequenceUtils");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.CharSequenceUtils\rorg.apache.commons.lang3.CharSequenceUtils", string6);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Search and Replace array lengths don't match: ", 97, (-48));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      String string0 = StringUtils.right("FPV[w8ya{a5a;v?8Js", 2231);
      assertNotNull(string0);
      assertEquals("FPV[w8ya{a5a;v?8Js", string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.unwrap("L L", '9');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("L L", string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("FPV[w8ya{a5a;v?8Js", "Comparator should not be^6VX`^m>Bd;R23c65", "\n");
      assertNull(stringArray0);
      
      String string3 = StringUtils.abbreviateMiddle((String) null, (String) null, (-514));
      assertNull(string3);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)126;
      byteArray0[5] = (byte) (-128);
      String string4 = StringUtils.join(byteArray0, '<');
      assertNotNull(string4);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)67, (byte)27, (byte) (-70), (byte)5, (byte)126, (byte) (-128)}, byteArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("67<27<-70<5<126<-128", string4);
      
      String[] stringArray1 = StringUtils.split((String) null, '<');
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("M`J^:'", "", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("M`J^:'", string0);
      
      String string1 = StringUtils.rightPad("$Or(j", 3962, 'P');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'P');
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isWhitespace("M`J^:'");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String string0 = StringUtils.wrap("clone", 'p');
      assertNotNull(string0);
      assertEquals("pclonep", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "pclonep";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean1 = StringUtils.isNumericSpace(charSequenceArray0[0]);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.difference("", " 's ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" 's ", string1);
      
      boolean boolean2 = StringUtils.isAlphanumeric("clone");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.containsIgnoreCase("", "clone");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "clone", (-853), (-853));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.trimToEmpty("clone");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("clone", string2);
      
      String string3 = StringUtils.rightPad("%:),u:N4#fXWEc'", 3962, 'p');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = StringUtils.replaceChars("p{InComrray element ", "p{InComrray element ", "p{InComrray element ");
      assertNotNull(string0);
      assertEquals("p{InComrray element ", string0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)88;
      shortArray0[3] = (short)88;
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "p{InComrray element ", (CharSequence) "p{InComrray element ", 36);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString("!$0w(Nv#IYm:X9bmf", "\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("!$0w(Nv#IYm:X9bmf", string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "!$0w(Nv#IYm:X9bmf", (CharSequence) "!$0w(Nv#IYm:X9bmf", (int) (short)88);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.normalizeSpace("!$0w(Nv#IYm:X9bmf");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("!$0w(Nv#IYm:X9bmf", string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "g|$q67_`U(u", (CharSequence) "!$0w(Nv#IYm:X9bmf");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("\n");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("!$0w(Nv#IYm:X9bmf");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.right("LB6b", (-1091));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "\r");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("", " in an array of ");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable(":2Z:W;3X=r[gy|fvx");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("-qR65noE`xU.", "cIV+s%3", 322);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.StringUtils", "rkmRe,wS1_dIUHx%g2F2Y?6S@BD2z7>");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.StringUtils", "-qR65noE`xU.");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(12, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.substringBefore("", "^X#$PyYP");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.center("", (-1091));
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.stripEnd("", "W'u O\"1F=CdRnZJguJ");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.unwrap("}?6<^]?5Yoc", 'I');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("}?6<^]?5Yoc", string5);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[19];
      charSequenceArray0[0] = (CharSequence) "V[aBj";
      charSequenceArray0[2] = (CharSequence) "V[aBj";
      charSequenceArray0[7] = (CharSequence) "V[aBj";
      boolean boolean0 = StringUtils.isAllLowerCase(charSequenceArray0[7]);
      assertEquals(19, charSequenceArray0.length);
      assertFalse(boolean0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(32);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("V[aBj"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.substringBefore("&`xF^T", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.leftPad("A.DwS+Ef<T1", 46, "5*(7.+Jt8(");
      assertNotNull(string0);
      assertEquals("5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7.A.DwS+Ef<T1", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1";
      charSequenceArray0[2] = (CharSequence) "5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1";
      charSequenceArray0[3] = (CharSequence) "5*(7.+Jt8(";
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("5*(7.+Jt8("));
      
      priorityQueue0.clear();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("5*(7.+Jt8("));
      
      boolean boolean0 = priorityQueue0.add(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertFalse(arrayList0.contains(string0));
      assertFalse(priorityQueue0.contains("5*(7.+Jt8("));
      
      String string1 = StringUtils.leftPad("5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1", 46);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" 5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1", string1);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 46;
      doubleArray0[1] = (double) 'p';
      doubleArray0[2] = (double) 'p';
      doubleArray0[3] = (double) 46;
      doubleArray0[4] = (double) 46;
      doubleArray0[5] = (double) 'p';
      doubleArray0[6] = (double) 46;
      doubleArray0[7] = (double) 'p';
      doubleArray0[8] = (double) 'p';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'p', 46, 947);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 46
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.truncate("org.apache.commons.lang3.StringUtils", 0, 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'J';
      String string2 = StringUtils.stripStart("ln}?6<^]?5YocA.DwS+Ef<T1", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ln}?6<^]?5YocA.DwS+Ef<T1", string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("ln}?6<^]?5YocA.DwS+Ef<T1");
      assertFalse(boolean0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = (-1739);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "org.apache.commons.lang3.StringUtils", (-1739), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.substring(",rs", (-618), (-618));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.mid("", (-618), (-3642));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      String string0 = "Threshold must not be negative";
      ByteBuffer byteBuffer0 = charset0.encode("Threshold must not be negative");
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=30 cap=33]", byteBuffer0.toString());
      assertEquals(30, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(30, byteBuffer0.remaining());
      assertEquals(33, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      
      byte[] byteArray0 = StringUtils.getBytes("'fL{[xV^C3e]", charset0);
      assertNotNull(byteArray0);
      assertEquals(12, byteArray0.length);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      String string1 = StringUtils.rightPad("dtkK:J_g:6{", 22);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("dtkK:J_g:6{           ", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "'fL{[xV^C3e]";
      charSequenceArray0[1] = (CharSequence) "'fL{[xV^C3e]";
      // Undeclared exception!
      try { 
        StringUtils.removeAll("'fL{[xV^C3e]", "dtkK:J_g:6{           ");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 9
         // dtkK:J_g:6{           
         //          ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("d[hga~K.mF");
      assertNotNull(string0);
      assertEquals("d[hga~K.mF", string0);
      
      String string1 = StringUtils.leftPad("d[hga~K.mF", (-2119), '?');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("d[hga~K.mF", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "d[hga~K.mF";
      charSequenceArray0[1] = (CharSequence) "d[hga~K.mF";
      int int0 = StringUtils.indexOfAny((CharSequence) "d[hga~K.mF", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringBeforeLast("9;nV7x", "d[hga~K.mF");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("9;nV7x", string2);
      
      String string3 = StringUtils.joinWith("d[hga~K.mF", charSequenceArray0);
      assertNotNull(string3);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("d[hga~K.mFd[hga~K.mFd[hga~K.mF", string3);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) ", Length: ";
      charSequenceArray0[1] = (CharSequence) ", Length: ";
      int int0 = StringUtils.indexOfAny((CharSequence) ", Length: ", ", Length: ");
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean0 = StringUtils.isNumericSpace(charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.difference("/r-\"w=sW%t~or%qa?L", "/r-\"w=sW%t~or%qa?L");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("/r-\"w=sW%t~or%qa?L");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.getDigits("0WB");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("0", string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "0", (-149), 36);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "P;zE=8lyT~9");
      assertNull(stringArray0);
      
      String string3 = StringUtils.replaceOnce("", (String) null, (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.left("ch", 871);
      assertNotNull(string0);
      assertEquals("ch", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "ch", 56, (-648));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "ch", (CharSequence) "ch");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.replaceFirst("ch", "ch", "[");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[", string1);
      
      String string2 = StringUtils.uncapitalize((String) null);
      assertNull(string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'b';
      charArray0[1] = 'F';
      charArray0[2] = 'D';
      charArray0[3] = 'e';
      charArray0[4] = ' ';
      charArray0[5] = 'k';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'b', 'F', 'D', 'e', ' ', 'k'}, charArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2;
      shortArray0[1] = (short)23;
      shortArray0[2] = (short) (-1407);
      shortArray0[3] = (short)322;
      shortArray0[4] = (short)98;
      shortArray0[5] = (short)127;
      shortArray0[6] = (short)1862;
      shortArray0[7] = (short)95;
      shortArray0[8] = (short)267;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'c', (int) (short)23, 1748);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'P';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'P'}, charArray0);
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfter("k", 150);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.trimToNull("A.DwS+Ef<T1");
      assertNotNull(string0);
      assertEquals("A.DwS+Ef<T1", string0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 52;
      String string1 = StringUtils.join(intArray0, '8', 52, 52);
      assertNotNull(string1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {52}, intArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1330);
      shortArray0[1] = (short)473;
      shortArray0[2] = (short)3328;
      shortArray0[3] = (short) (-1667);
      String string2 = StringUtils.join(shortArray0, '8');
      assertNotNull(string2);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short) (-1330), (short)473, (short)3328, (short) (-1667)}, shortArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-13308473833288-1667", string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("f^h'*(gC:2Z}", supplier0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("f^h'*(gC:2Z}", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "A.DwS+Ef<T1";
      charSequenceArray0[1] = (CharSequence) "A.DwS+Ef<T1";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "A.DwS+Ef<T1";
      charSequenceArray0[4] = (CharSequence) "f^h'*(gC:2Z}";
      String string4 = StringUtils.appendIfMissing("-13308473833288-1667", "", charSequenceArray0);
      assertNotNull(string4);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("-13308473833288-1667", string4);
      
      String string5 = StringUtils.defaultString("f^h'*(gC:2Z}");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("f^h'*(gC:2Z}", string5);
      
      String string6 = StringUtils.abbreviate(" in an array of ", (String) null, 52);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals(" in an array of ", string6);
      
      String string7 = StringUtils.remove("DCcheN;B/", '8');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertEquals("DCcheN;B/", string7);
      
      String string8 = StringUtils.join((Integer[]) null);
      assertNull(string8);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "A.DwS+Ef<T1", charSequenceArray0[1], 52);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("-13308473833288-1667");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "&)n~s%-jd'oG");
      assertNull(string0);
      
      String string1 = StringUtils.defaultIfEmpty("&)n~s%-jd'oG", "+^u}jCJ<<?/R");
      assertNotNull(string1);
      assertEquals("&)n~s%-jd'oG", string1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.substringAfter(" has no clone method", 64);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfterLast("\n", " has no clone method");
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) " has no clone method", "5MAoSc4,V;}OaDkx>Z");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string2 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertNotNull(string2);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrapIfMissing("Uln}?6<^]?5Yocln}?6<^]?5YocU^]?5Yoc", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Uln}?6<^]?5Yocln}?6<^]?5YocU^]?5Yoc", string3);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Minimum abbreviation width with offset is %d";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Minimum abbreviation width with offset is %d");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeEnd("Comparator should not be null.", "Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("Comparator should not be null.", string0);
      
      String string1 = StringUtils.abbreviateMiddle("Ba).xf~|M", "Invalid locale format: ", 2498);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ba).xf~|M", string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) ", Length: /r-\"w=sW%t~or%qa?L");
      assertFalse(int1 == int0);
      assertEquals(39, int1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens((String) null, "org.apache.commons.lang3.ArrayUtils", (-682));
      assertNull(stringArray2);
      
      boolean boolean0 = StringUtils.equalsAny("org.apache.commons.lang3.ArrayUtils", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "]vP)*V)5KQ`:7>W!");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.lang3.StringUtils";
      stringArray0[1] = "org.apache.commons.lang3.StringUtils";
      stringArray0[3] = "org.apache.commons.lang3.StringUtils";
      String string2 = StringUtils.substringBetween((String) null, "]vP)*V)5KQ`:7>W!");
      assertNull(string2);
      
      String string3 = StringUtils.stripAccents("org.apache.commons.lang3.StringUtils");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)charSequence0));
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[1], (char[]) null);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "#");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      
      String string5 = StringUtils.substringBetween("org.apache.commons.lang3.Charsetorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.Charset", "', has a length less than 2");
      assertNull(string5);
      
      String string6 = StringUtils.toRootUpperCase("                     !Ze{N#MU");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("                     !ZE{N#MU", string6);
      
      String string7 = StringUtils.prependIfMissing((String) null, "org.apache.commons.lang3.StringUtils", charSequenceArray0);
      assertNull(string7);
      assertEquals(8, charSequenceArray0.length);
      
      String string8 = StringUtils.appendIfMissing("org.apache.commons.lang3.StringUtils", charSequenceArray0[1], stringArray0);
      assertNotNull(string8);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(7, stringArray0.length);
      assertTrue(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string4));
      assertEquals("org.apache.commons.lang3.StringUtils", string8);
      
      String string9 = StringUtils.join((Object[]) charSequenceArray0, '\"', 1269, (-4891));
      assertNotNull(string9);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)charSequence0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertEquals("", string9);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "]vP)*V)5KQ`:7>W!");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.stripEnd("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("", string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.removeStart("h", "qSN#]L|}5qZ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("h", string2);
      
      String string3 = StringUtils.capitalize("~X");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("~X", string3);
      
      String string4 = StringUtils.strip("org.apache.commons.lang3.StringUtils");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("...", "", "ojM!o{5YRxhUkH");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("...", string5);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)77;
      String string6 = StringUtils.join(byteArray0, 'V', (int) (byte)14, (int) (byte)14);
      assertNotNull(string6);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-53), (byte) (-16), (byte) (-14), (byte)14, (byte)32, (byte)77}, byteArray0);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)charSequence0));
      assertEquals("", string6);
      
      String string7 = StringUtils.difference("org.apache.commons.lang3.StringUtils", "fOc.[>xxX:]&O](%Ob");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals("fOc.[>xxX:]&O](%Ob", string7);
      
      String string8 = StringUtils.trim("h");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string2));
      assertEquals("h", string8);
      
      String string9 = StringUtils.substringBeforeLast("qSN#]L|}5qZ", "*rj?0w");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)charSequence0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertEquals("qSN#]L|}5qZ", string9);
      
      String string10 = StringUtils.center("fOc.[>xxX:]&O](%Ob", (int) (byte) (-16), "");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)charSequence0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertEquals("fOc.[>xxX:]&O](%Ob", string10);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("=2tVj5xn-,hAP*+$Q[y", "=2tVj5xn-,hAP*+$Q[y", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("nDk`'zgL)~U", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "=2tVj5xn-,hAP*+$Q[y", "nDk`'zgL)~U");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("Zr).apav()*V)5KQ`:7>W!", 'p');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("pZr).apav()*V)5KQ`:7>W!p", string1);
      
      String string2 = StringUtils.stripToNull("nDk`'zgL)~U");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("nDk`'zgL)~U", string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("L4**c>4|Pt[go4D8", "Zr).apav()*V)5KQ`:7>W!");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("L4**c>4|Pt[go4D8", string3);
      
      int int0 = StringUtils.indexOf((CharSequence) ", Length: ", (-999), (-1683));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("L4**c>4|Pt[go4D8", "Zr).apav()*V)5KQ`:7>W!", "org.apache.commons.lang3.Charsetorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.Charset");
      assertNull(stringArray0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfBlank("org.apache.commons.lang3.CharSequenceUtils", supplier0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("nDk`'zgL)~U", "org.apache.commons.lang3.CharSequenceUtils");
      assertEquals(0.24, double0, 0.01);
      
      int int1 = StringUtils.compareIgnoreCase("}kMghm.[bK~:aB#B", "Zr).apav()*V)5KQ`:7>W!", false);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.unwrap("maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
      
      String[] stringArray0 = StringUtils.split("maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[1];
      String string1 = StringUtils.removeFirst("p{InCombiningDiacriticalMarks}+", "9vKy");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("maxWith cannot be negative", "p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
      
      String string2 = StringUtils.trim("maxWith cannot be negative");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string2);
      
      String string3 = StringUtils.replace("maxWith cannot be negative", "maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "maxWith cannot be negative", (CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.replaceChars("maxWith cannot be negative", '\u0000', 'p');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "9vKy", charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("4Kb;iiB]%IY}I7_R", "Strings must not be nullComparator should not be null.", 127);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string5 = StringUtils.removePattern((String) null, "=EU%3U@GT]|h0dI3B`0r]Cb=");
      assertNull(string5);
      
      double double0 = StringUtils.getJaroWinklerDistance("p{InCombiningDiacriticalMarks}+", "maxWith cannot be negative");
      assertEquals(0.52, double0, 0.01);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "=EU%3U@GT]|h0dI3B`0r]Cb=", (CharSequence) "maxWith cannot be negative");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.swapCase("7;Qv+w!q]1?mS{lrvbO");
      assertNotNull(string0);
      assertEquals("7;qV+W!Q]1?Ms{LRVBo", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("7;qV+W!Q]1?Ms{LRVBo", "7;Qv+w!q]1?mS{lrvbO");
      assertEquals(0.65, double0, 0.01);
      
      String string1 = StringUtils.stripAccents("7;qV+W!Q]1?Ms{LRVBo");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("7;qV+W!Q]1?Ms{LRVBo", string1);
      
      Object[] objectArray0 = new Object[21];
      objectArray0[1] = (Object) "7;Qv+w!q]1?mS{lrvbO";
      objectArray0[2] = (Object) "7;Qv+w!q]1?mS{lrvbO";
      objectArray0[3] = (Object) "7;qV+W!Q]1?Ms{LRVBo";
      objectArray0[6] = (Object) "7;qV+W!Q]1?Ms{LRVBo";
      boolean boolean0 = StringUtils.isEmpty("7;qV+W!Q]1?Ms{LRVBo");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing((String) null, "8");
      assertNull(string0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      String string1 = StringUtils.join(booleanArray0, 'i', (-1526), 2147483645);
      assertNotNull(string1);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, true, false}, booleanArray0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isBlank("ovM~#De4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.right("ln}?6<^]?5Yocln}?6<^]?5Yoc", 7);
      assertNotNull(string0);
      assertEquals("^]?5Yoc", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("^]?5Yoc", "^]?5Yoc", 7);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrapIfMissing("ln}?6<^]?5Yocln}?6<^]?5Yoc", 'U');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Uln}?6<^]?5Yocln}?6<^]?5YocU", string1);
      
      String string2 = StringUtils.stripToNull("^]?5Yoc");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("^]?5Yoc", string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("&guvt;\"Ysi!/0", "&guvt;\"Ysi!/0");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.trim("Uln}?6<^]?5Yocln}?6<^]?5YocU");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Uln}?6<^]?5Yocln}?6<^]?5YocU", string4);
      
      boolean boolean0 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.removeEnd("Uln}?6<^]?5Yocln}?6<^]?5YocU", "^]?5Yoc");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("Uln}?6<^]?5Yocln}?6<^]?5YocU", string5);
      
      int int2 = StringUtils.indexOf((CharSequence) "&guvt;\"Ysi!/0", (CharSequence) "Uln}?6<^]?5Yocln}?6<^]?5YocU");
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string6 = StringUtils.substring("^]?5Yoc", (-1), 7);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("c", string6);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 'U';
      doubleArray0[2] = (double) 7;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 'U';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'U', (-1), 1066);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.rotate("", 1345);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      String string1 = locale0.getDisplayLanguage();
      assertNotNull(string1);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertFalse(string1.equals((Object)string0));
      assertEquals("German", string1);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("de_DE", locale1.toString());
      
      String string2 = StringUtils.replacePattern("", "German", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = locale0.getDisplayVariant(locale0);
      assertNotNull(string3);
      assertSame(locale0, locale1);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.upperCase("", locale0);
      assertNotNull(string4);
      assertSame(locale0, locale1);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.strip("X#Ic:;iaX");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("X#Ic:;iaX", string5);
      
      String string6 = StringUtils.truncate("", 57);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      String string7 = StringUtils.join((char[]) null, '2', 1345, (-238));
      assertNull(string7);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 83);
      assertEquals((-1), int0);
      
      String string8 = StringUtils.leftPad((String) null, (-238), "3Fd!gI");
      assertNull(string8);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("The String must not be empty");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(11, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "n~s%-jd'oG", (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isEmpty("&)");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat("n~s%-jd'oG", (-1));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.wrapIfMissing("&)", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("&)", string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Comparator should not be null.", (CharSequence) "&)");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.leftPad((String) null, (-1), "n~s%-jd'oG");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = StringUtils.right("})644Mv/;Q<~:d", (-432));
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = 'q';
      String string1 = StringUtils.join(charArray0, 'U');
      assertNotNull(string1);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'U', 'q'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("UUq", string1);
      
      byte[] byteArray0 = StringUtils.getBytes("vy1Ty6mt<A4rTxIH}*", (Charset) null);
      assertNotNull(byteArray0);
      assertEquals(18, byteArray0.length);
      
      String string2 = StringUtils.removeFirst("UUq", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("UUq", string2);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      String string3 = StringUtils.abbreviateMiddle("", "vy1Ty6mt<A4rTxIH}*", 76);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.rightPad("Search and Replace array lengths don't match: ", 76);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Search and Replace array lengths don't match:                               ", string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "]vP)*V)5KQ`:7>W!", (CharSequence) "})644Mv/;Q<~:d");
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.EMPTY;
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.wrapIfMissing("", "org.apache.commons.lang3.Charsets");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "TKk'^";
      charSequenceArray0[7] = (CharSequence) "TKk'^";
      String string0 = StringUtils.prependIfMissingIgnoreCase("TKk'^", (CharSequence) null, charSequenceArray0);
      assertNotNull(string0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("TKk'^", string0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.substringBetween("0s_0'F@^k", "p{InCombiningDiacriticalMarks}+", (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "0s_0'F@^k";
      stringArray1[1] = null;
      String string1 = StringUtils.replaceEachRepeatedly((String) null, stringArray1, stringArray0);
      assertNull(string1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.indexOfDifference((CharSequence) string0, (CharSequence) string0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.replaceFirst((String) null, "|ZokM0u\"{?HJoRRyi", "ch");
      assertNull(string2);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens((String) null, "p{InCombiningDiacriticalMarks}+");
      assertNull(stringArray2);
      
      PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Iterator<CharBuffer> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = StringUtils.abbreviate("7r(Pn6k/(", "{}", 100, 100);
      assertNotNull(string0);
      assertEquals("7r(Pn6k/(", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "7r(Pn6k/(", (CharSequence) "7r(Pn6k/(");
      assertEquals(0, int0);
      
      String string1 = StringUtils.swapCase("offset cannot be negative");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("OFFSET CANNOT BE NEGATIVE", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("7r(Pn6k/(", "7r(Pn6k/(");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)1;
      shortArray0[2] = (short)32;
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 100;
      longArray0[1] = (long) (short)1;
      longArray0[3] = (long) (short)1;
      longArray0[4] = (long) (short)1;
      String string2 = StringUtils.join(longArray0, 'e');
      assertNotNull(string2);
      assertEquals(5, longArray0.length);
      assertArrayEquals(new long[] {100L, 1L, 0L, 1L, 1L}, longArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("100e1e0e1e1", string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, "7r(Pn6k/(", 0, (int) (short)1);
      assertNotNull(string3);
      assertEquals(2, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceAll("100e1e0e1e1", "OFFSET CANNOT BE NEGATIVE", "7r(Pn6k/(");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("100e1e0e1e1", string4);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      String string5 = StringUtils.rightPad("OFFSET CANNOT BE NEGATIVE", (int) (short)1, 'T');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertEquals("OFFSET CANNOT BE NEGATIVE", string5);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-39);
      String string0 = StringUtils.join(byteArray0, 'W');
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-39)}, byteArray0);
      assertEquals("90W-39", string0);
      
      String string1 = StringUtils.truncate("#@~i3Y%", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "#@~i3Y%";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "#@~i3Y%");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray1);
      
      String string2 = StringUtils.substringBetween("Search and Replace array lengths don't match: ", "", "90W-39");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = StringUtils.substring("\r", 49, 4);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("org.apache.commons.lang3.LocaleUtils", 100, "org.apache.commons.lang3.Charsets");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.Charsetorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.Charset", string1);
      
      String string2 = StringUtils.trimToNull("T3j,G>6rcwZn!$_V");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("T3j,G>6rcwZn!$_V", string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "T3j,G>6rcwZn!$_V", "}hA2N+@[G");
      assertEquals(4, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("org.apache.commons.lang3.Charsetorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.Charset");
      assertFalse(boolean0);
      
      String string3 = StringUtils.difference("&)n~s%-jd'oG", "W#mIx2~.");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("W#mIx2~.", string3);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.removeEnd("Qy\\cTgKq'QB", "org.apache.commons.lang3.Charsetorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.Charset");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Qy\\cTgKq'QB", string4);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = StringUtils.removeAll("ch", "ch");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceChars("", '=', '=');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "ho{Nrgt/+c[VP]mx", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.strip("ch", "Q]O7Q h=r(IQAfERq");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("c", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Q]O7Q h=r(IQAfERq", (CharSequence) "ho{Nrgt/+c[VP]mx");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceOnce("FLsUo3:Cd6qH)m4", "", "ch");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("FLsUo3:Cd6qH)m4", string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("Q]O7Q h=r(IQAfERq", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Q]O7Q h=r(IQAfERq", string4);
      
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Set<String> set0 = hashMap0.keySet();
      assertNotNull(set0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string1));
      
      String string5 = StringUtils.join((Iterable<?>) set0, "`7i9hS");
      assertNotNull(string5);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      assertFalse(set0.contains(string1));
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = StringUtils.rotate("LNuk>Qz|sjw", 2109);
      assertNotNull(string0);
      assertEquals("k>Qz|sjwLNu", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("L", "Arr", " has no clone methodorg.apache.commons.lang3.ArrayUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L", string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "LNuk>Qz|sjw", (CharSequence) "L");
      assertEquals(1, int0);
      
      String string2 = StringUtils.substringAfter("\r", "k>Qz|sjwLNu");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      String string3 = StringUtils.valueOf(charArray0);
      assertNotNull(string3);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'[', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("[\u0000\u0000\u0000\u0000\u0000\u0000", string3);
      
      String string4 = StringUtils.wrapIfMissing(" has no clone methodorg.apache.commons.lang3.ArrayUtils", "Exception cloning Cloneable type org.apache.commons.lang3.StringUtils");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Exception cloning Cloneable type org.apache.commons.lang3.StringUtils has no clone methodorg.apache.commons.lang3.ArrayUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Exception cloning Cloneable type org.apache.commons.lang3.StringUtils has no clone methodorg.apache.commons.lang3.ArrayUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", " in an array of ", 104);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "L", (CharSequence) "\r", 11);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      String string5 = StringUtils.uncapitalize("Exception cloning Cloneable type org.apache.commons.lang3.StringUtils");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("exception cloning Cloneable type org.apache.commons.lang3.StringUtils", string5);
      
      boolean boolean0 = StringUtils.isAlpha("exception cloning Cloneable type org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "L", 1046, 11);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string6 = StringUtils.repeat("|w]B1llO3urOl&b}", 11);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("|w]B1llO3urOl&b}|w]B1llO3urOl&b}|w]B1llO3urOl&b}|w]B1llO3urOl&b}|w]B1llO3urOl&b}|w]B1llO3urOl&b}|w]B1llO3urOl&b}|w]B1llO3urOl&b}|w]B1llO3urOl&b}|w]B1llO3urOl&b}|w]B1llO3urOl&b}", string6);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) ", '", (-3280), (-1961));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.defaultString(", '");
      assertNotNull(string0);
      assertEquals(", '", string0);
      
      String string1 = StringUtils.trimToEmpty("bd!aAE4E@/\"/~hmz@g");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("bd!aAE4E@/\"/~hmz@g", string1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String string0 = StringUtils.removeAll("ch", "ch");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceChars("", '=', '=');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "ho{Nrgt/+c[VP]mx", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.strip("ch", "Q]O7Q h=r(IQAfERq");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("c", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Q]O7Q h=r(IQAfERq", (CharSequence) "ho{Nrgt/+c[VP]mx");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2419L);
      doubleArray0[1] = (double) (-4492L);
      String string3 = StringUtils.join(doubleArray0, '\\', (-1), (-287));
      assertNotNull(string3);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {(-2419.0), (-4492.0)}, doubleArray0, 0.01);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, 'p');
      assertNotNull(string4);
      assertEquals(0, stringArray0.length);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, '=', 2518, 8192);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 8192
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = ']';
      String string0 = "\"j]`|";
      String string1 = StringUtils.center("\"j]`|", 15, (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("     \"j]`|     ", string1);
      
      String string2 = "0WB";
      boolean boolean0 = StringUtils.isAlphanumericSpace("\"j]`|");
      assertFalse(boolean0);
      
      String string3 = "e%o,=$t";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("     \"j]`|     ", "     \"j]`|     ", 15);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.getDigits("     \"j]`|     ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "e%o,=$t", (-149), 15);
      assertEquals((-1), int0);
      
      String string5 = "P;zE=8lyT~9";
      String[] stringArray1 = StringUtils.substringsBetween("OcN", "P;zE=8lyT~9", "");
      assertNull(stringArray1);
      
      String string6 = StringUtils.replaceOnce("Array and element cannot both be null", "jA).[", "Strings must not be null");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("Array and element cannot both be null", string6);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(15));
      
      // Undeclared exception!
      try { 
        stack0.listIterator((-1773));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1773
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\r";
      stringArray0[1] = "\r";
      stringArray0[2] = "]`}xH:A";
      stringArray0[0] = "\r";
      stringArray0[8] = "\r";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(9, stringArray0.length);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isMixedCase(stringArray0[3]);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.defaultIfBlank("]`}xH:A", "]D2\b%(");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]`}xH:A", string1);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "\r", (String) null);
      assertNull(stringArray1);
      
      String string2 = StringUtils.stripToNull(" ");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("#L4**c>4|Pt[go4D8", ".#9U[O@L$");
      assertNotNull(string0);
      assertEquals("#L4**c>4|Pt[go4D8", string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "#L4**c>4|Pt[go4D8", charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "#L4**c>4|Pt[go4D8";
      stringArray0[1] = "#L4**c>4|Pt[go4D8";
      stringArray0[2] = ".#9U[O@L$";
      stringArray0[3] = "#L4**c>4|Pt[go4D8";
      stringArray0[4] = ".#9U[O@L$";
      stringArray0[5] = ".#9U[O@L$";
      stringArray0[6] = "#L4**c>4|Pt[go4D8";
      stringArray0[7] = "#L4**c>4|Pt[go4D8";
      stringArray0[8] = ".#9U[O@L$";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string1);
      assertEquals(9, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("#L4**c>4|Pt[go4D8", string1);
      
      String string2 = StringUtils.rightPad("#L4**c>4|Pt[go4D8", (-1), "uq?k8rO@ujR");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("#L4**c>4|Pt[go4D8", string2);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = StringUtils.trim("qSN#]L|}5qZ");
      assertNotNull(string0);
      assertEquals("qSN#]L|}5qZ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("qSN#]L|}5qZ"));
      
      boolean boolean1 = arrayList0.removeAll(vector0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(vector0.contains("qSN#]L|}5qZ"));
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(string0));
      
      String string1 = Locale.lookupTag(arrayList0, set0);
      assertNull(string1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(string0));
      
      int int0 = StringUtils.getFuzzyDistance("qSN#]L|}5qZ", "qSN#]L|}5qZ", locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals(31, int0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = '$';
      charArray0[2] = 'h';
      charArray0[3] = 'h';
      charArray0[4] = 'h';
      charArray0[5] = 'h';
      charArray0[6] = 'h';
      charArray0[7] = 'h';
      charArray0[8] = 'h';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "qSN#]L|}5qZ", charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'h', '$', 'h', 'h', 'h', 'h', 'h', 'h', 'h'}, charArray0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.lastOrdinalIndexOf("qSN#]L|}5qZ", "Xw+!rjJ.s+E`G`m", 0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = StringUtils.abbreviate("i}", 11, 2566);
      assertNotNull(string0);
      assertEquals("i}", string0);
      
      String string1 = StringUtils.center((String) null, 2566, 'U');
      assertNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase((String) null, "Cannot store ", (String) null);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "i}", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'U'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "~O6Whj](?&*fiJxPF@";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = " ";
      stringArray0[6] = null;
      stringArray0[7] = "Cannot store ";
      stringArray0[8] = "}hA2N+@[Gorg.apache.commons.lang3.ObjectUtilsfkY9.Z1";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.defaultString("(OI", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(OI", string1);
      
      String string2 = StringUtils.replaceOnce("", "(OI", "je");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("JE", "je");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("jeJEje", string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "je", (CharSequence) "(OI");
      assertEquals(0, int0);
      
      String string4 = StringUtils.reverseDelimited("", '\u0081');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.center("Search and Replace array lengths don't match: ", 0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match: ", string5);
      
      String string6 = StringUtils.join((double[]) null, 'G');
      assertNull(string6);
      
      String string7 = StringUtils.stripEnd("Search and Replace array lengths don't match: ", "");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string7);
      
      String string8 = StringUtils.leftPad("Ac%K6/VR?26", 2405, 'O');
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      
      String string9 = StringUtils.deleteWhitespace((String) null);
      assertNull(string9);
      
      int int1 = StringUtils.compareIgnoreCase("", (String) null, false);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "(OI", (CharSequence) "", 1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Search and Replace array lengths don't match: ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("Exception cloning Cloneable type ", (String) null, "Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("Exception cloning Cloneable type ", string0);
      
      String string1 = StringUtils.wrapIfMissing("(T", "a{a5a;v?8WJs");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("a{a5a;v?8WJs(Ta{a5a;v?8WJs", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("q", "a{a5a;v?8WJs(Ta{a5a;v?8WJs", 1148);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "q", (CharSequence) " has no clone methodorg.apache.commons.lang3.ArrayUtils", 49);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.uncapitalize("Ap[7MqI4,2TO1Ky/");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ap[7MqI4,2TO1Ky/", string2);
      
      boolean boolean0 = StringUtils.isAlpha("Ap[7MqI4,2TO1Ky/");
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((Object[]) stringArray0, "\n", 49, (-32768));
      assertNotNull(string3);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.defaultString("7(OI", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7(OI", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "JE", "7(OI");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("JE", "je");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("jeJEje", string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "je", (CharSequence) "7(OI");
      assertEquals(0, int0);
      
      String string4 = StringUtils.reverseDelimited("", '\u0081');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.center("Search and Replace array lengths don't match: ", 0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Search and Replace array lengths don't match: ", string5);
      
      String string6 = StringUtils.join((double[]) null, 'G');
      assertNull(string6);
      
      String string7 = StringUtils.defaultString("Search and Replace array lengths don't match: ");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("Search and Replace array lengths don't match: ", string7);
      
      String string8 = StringUtils.leftPad("Ac%K6/VR?26", 2405, 'O');
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      
      String string9 = StringUtils.deleteWhitespace((String) null);
      assertNull(string9);
      
      int int1 = StringUtils.compareIgnoreCase("", (String) null, false);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string10 = StringUtils.wrapIfMissing("L4**c>4|Pt[go4D8", "#");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string4));
      assertEquals("#L4**c>4|Pt[go4D8#", string10);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string11 = StringUtils.defaultString("Minimum abbreviation width with offset is %d", (String) null);
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string4));
      assertEquals("Minimum abbreviation width with offset is %d", string11);
      
      String string12 = StringUtils.strip((String) null, "#");
      assertNull(string12);
      
      String string13 = StringUtils.repeat("org.apache.commons.lang3.CharSequenceUtils", 52);
      assertNotNull(string13);
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string11));
      assertFalse(string13.equals((Object)string1));
      assertFalse(string13.equals((Object)string10));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string8));
      assertFalse(string13.equals((Object)string5));
      assertFalse(string13.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.replaceChars("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)88;
      shortArray0[1] = (short)88;
      shortArray0[2] = (short)88;
      shortArray0[3] = (short)88;
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "p{InCombiningDiacriticalMarks}+", 36);
      assertEquals((-1), int0);
      
      String string1 = "\n";
      String string2 = StringUtils.defaultString("!$0w(Nv#IYm:X9bmf", "\n");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("!$0w(Nv#IYm:X9bmf", string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "!$0w(Nv#IYm:X9bmf", (CharSequence) "!$0w(Nv#IYm:X9bmf", (int) (short)88);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.normalizeSpace("!$0w(Nv#IYm:X9bmf");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("!$0w(Nv#IYm:X9bmf", string3);
      
      String string4 = "g|$q67_`U(u";
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("!$0w(Nv#IYm:X9bmf", "!$0w(Nv#IYm:X9bmf", "g|$q67_`U(u");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 17
         // !$0w(Nv#IYm:X9bmf
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string0 = StringUtils.appendIfMissing("Tz!9o!u6_jlt *PA#", "p{InCombiningDiacriticalMarks}+", stringArray0);
      assertNotNull(string0);
      assertEquals(250, stringArray0.length);
      assertEquals("Tz!9o!u6_jlt *PA#p{InCombiningDiacriticalMarks}+", string0);
      
      String string1 = StringUtils.lowerCase("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{incombiningdiacriticalmarks}+", string1);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(250, stringArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray1 = Locale.getISOLanguages();
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(188, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.unwrap("BS[", '\u001A');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("BS[", string2);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      boolean boolean1 = StringUtils.contains((CharSequence) "BS[", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("p{InCombiningDiacriticalMarks}+", "Tz!9o!u6_jlt *PA#");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.upperCase(" vs ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" VS ", string3);
      
      boolean boolean3 = StringUtils.endsWith(" VS ", "82`+-4~");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "p{incombiningdiacriticalmarks}+", (CharSequence) "82`+-4~", 2);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string4);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(250, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = "Tp7f{MZ=wf9#";
      // Undeclared exception!
      try { 
        Charset.forName("Minimum abbreviation width with offset is %d");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Minimum abbreviation width with offset is %d
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.lang3.StringUtils";
      stringArray0[1] = "org.apache.commons.lang3.StringUtils";
      stringArray0[2] = "org.apache.commons.lang3.StringUtils";
      stringArray0[3] = "org.apache.commons.lang3.StringUtils";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("org.apache.commons.lang3.StringUtils");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compare("null/empty items", "org.apache.commons.lang3.Charsets", true);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeEnd((String) null, "org.apache.commons.lang3.StringUtils");
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAlphaSpace("uq(JCoa=bwe<GPz%-9W");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.left((String) null, 2259);
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "org.apache.commons.lang3.StringUtils");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.unwrap("maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
      
      char[] charArray0 = new char[1];
      String string1 = StringUtils.removeFirst("p{InCombiningDiacriticalMarks}+", "9vKy");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("maxWith cannot be negative", "p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
      
      String string2 = StringUtils.trim("maxWith cannot be negative");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string2);
      
      String string3 = StringUtils.substringBeforeLast("9vKy", "maxWith cannot be negative");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("9vKy", string3);
      
      String string4 = StringUtils.replaceChars("maxWith cannot be negative", '\u0000', 'p');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("maxWith cannot be negative", string4);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "9vKy", charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      
      CharBuffer charBuffer1 = charBuffer0.append('p');
      assertNotNull(charBuffer1);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'p'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.capacity());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1, charBuffer1.position());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(1, charBuffer1.limit());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      
      charBufferArray0[0] = charBuffer0;
      CharBuffer charBuffer2 = StringUtils.firstNonBlank(charBufferArray0);
      assertNull(charBuffer2);
      assertEquals(1, charBufferArray0.length);
      
      String string5 = StringUtils.wrap("Exception cloning Cloneable type ", '+');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("+Exception cloning Cloneable type +", string5);
      
      String string6 = StringUtils.stripStart("A.DwS+Ef<T1", "9vKy");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("A.DwS+Ef<T1", string6);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "9vKy";
      stringArray0[1] = "maxWith cannot be negative";
      stringArray0[2] = "9vKy";
      stringArray0[3] = "A.DwS+Ef<T1";
      stringArray0[4] = ">MQ=V1\"jZKI_";
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string7);
      assertEquals(5, stringArray0.length);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.rotate("", 1345);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string1 = locale0.getDisplayLanguage();
      assertNotNull(string1);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(string1.equals((Object)string0));
      assertEquals("German", string1);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("DEU", locale1.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de_DE", locale1.toString());
      
      String string2 = StringUtils.replacePattern("", "German", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = locale0.getDisplayVariant(locale0);
      assertNotNull(string3);
      assertSame(locale0, locale1);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.upperCase("", locale0);
      assertNotNull(string4);
      assertSame(locale0, locale1);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.strip("X#Ic:;iaX");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("X#Ic:;iaX", string5);
      
      String string6 = StringUtils.truncate("", 57);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      String string7 = StringUtils.join((char[]) null, '2', 1345, (-238));
      assertNull(string7);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 83);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("", "org.apache.commons.lang3.StringUtils");
      assertFalse(int1 == int0);
      assertEquals((-36), int1);
      
      String string8 = StringUtils.join(stringArray0);
      assertNotNull(string8);
      assertEquals(4, stringArray0.length);
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string2));
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToEmpty("LNuk>Qz|sjw");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("LNuk>Qz|sjw", string1);
      
      String[] stringArray0 = StringUtils.split(".ZeF!kLt", '<');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.chop("Vg-u[mXNP_K");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Vg-u[mXNP_", string2);
      
      String string3 = StringUtils.join(charArray0, '<', 186, (-1698));
      assertNotNull(string3);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'<', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "LNuk>Qz|sjw", (CharSequence) "Vg-u[mXNP_");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("Vg-u[mXNP_", "7r(Pn6k/(", true);
      assertEquals(63, int0);
      
      String[] stringArray1 = StringUtils.split("");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains((-1698)));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, 'B', 28, 63);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 63
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = StringUtils.join((List<?>) arrayList0, ".sqpE%", 711, 321);
      assertNotNull(string0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", string0);
      assertFalse(arrayList0.contains(711));
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = StringUtils.replaceChars("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)88;
      shortArray0[2] = (short)88;
      shortArray0[3] = (short)88;
      shortArray0[4] = (short)88;
      boolean boolean0 = StringUtils.equals((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substring("&)n~s%-jd'oG", (int) (short)0, (int) (short)88);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("&)n~s%-jd'oG", string1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "7;Qv+w!+q]1?mSlrvbO", 1819);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Array element ", "pEzw", "ator should not be null.");
      assertNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Hn>d!DGP8iJnhmcHA", (CharSequence) "Hn>d!DGP8iJnhmcHA", 95);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = StringUtils.getIfBlank("zG#%'!", (Supplier<String>) null);
      assertNotNull(string0);
      assertEquals("zG#%'!", string0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      assertEquals(250, stringArray1.length);
      
      String string1 = StringUtils.upperCase("ator should not be null.", locale0);
      assertNotNull(string1);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(string1.equals((Object)string0));
      assertEquals("ATOR SHOULD NOT BE NULL.", string1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, 13);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.join((Object[]) null, 'S');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 65, "Strings must not be null");
      assertNull(string0);
      
      String string1 = StringUtils.substringAfterLast("Strings must not be null", 65);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.removeStart("", "Strings must not be null");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Strings must not be null", 1819);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("pEzw", "@", "Hn>d!DGP8iJnhmcHA");
      assertNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "Hn>d!DGP8iJnhmcHA", 95);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfBlank("@", supplier0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("@", string3);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      assertEquals(250, stringArray1.length);
      
      String string4 = StringUtils.upperCase("pEzw", locale0);
      assertNotNull(string4);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("PEZW", string4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "@", 1819);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      Object[] objectArray0 = new Object[0];
      String string5 = StringUtils.join(objectArray0, 'S');
      assertNotNull(string5);
      assertEquals(0, objectArray0.length);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.strip("_~Vkm'Y|@[YUT!l,b");
      assertNotNull(string0);
      assertEquals("_~Vkm'Y|@[YUT!l,b", string0);
      
      boolean boolean0 = StringUtils.isNumeric("_~Vkm'Y|@[YUT!l,b");
      assertFalse(boolean0);
      
      String string1 = "^`(zM(IR-g";
      String string2 = StringUtils.strip("_~Vkm'Y|@[YUT!l,b", "^`(zM(IR-g");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("_~Vkm'Y|@[YUT!l,b", string2);
      
      String string3 = StringUtils.strip("^`(zM(IR-g", "_~Vkm'Y|@[YUT!l,b");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("^`(zM(IR-g", string3);
      
      int int0 = 577;
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "^`(zM(IR-g", 577);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.stripEnd((String) null, "Arr");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase("Arr");
      assertTrue(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("Exception cloning Cloneable type ", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertEquals("org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Arr");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Exception cloning Cloneable type ", (String) null, 5);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray1);
      
      String string3 = StringUtils.join((Object[]) stringArray0, "org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils");
      assertNotNull(string3);
      assertEquals(5, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertEquals("Exceptionorg.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtilscloningorg.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtilsCloneableorg.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtilstypeorg.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", string3);
      
      String string4 = StringUtils.trimToNull("JSc>");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("JSc>", string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "JSc>", 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = ">l2@Z'c>l2@Z'c";
      String string1 = StringUtils.leftPad(">l2@Z'c>l2@Z'c", 211, ">l2@Z'c>l2@Z'c");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(">l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>>l2@Z'c>l2@Z'c", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) ">l2@Z'c>l2@Z'c", (CharSequence) ">l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>>l2@Z'c>l2@Z'c");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) ">l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>>l2@Z'c>l2@Z'c", (CharSequence) ">l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>l2@Z'c>>l2@Z'c>l2@Z'c");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.containsWhitespace(">l2@Z'c>l2@Z'c");
      assertFalse(boolean0);
      
      String string2 = StringUtils.abbreviate(">l2@Z'c>l2@Z'c", 13, 211);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(">l2@Z'c>l2@Z'c", string2);
      
      int int2 = StringUtils.indexOf((CharSequence) ">l2@Z'c>l2@Z'c", (-1), 13);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("8\u0007Mo=!\"fHyJLu{XGK");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("^6VX`^m>Bd;R23c65Comparator should not be", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = StringUtils.substringBefore(",rs", (-618));
      assertNotNull(string0);
      assertEquals(",rs", string0);
      
      boolean boolean0 = StringUtils.isWhitespace(",rs");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(",rs");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.appendIfMissing("Tz!9o!u6_jlt *PA#", "p{InCombiningDiacriticalMarks}+", stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("Tz!9o!u6_jlt *PA#p{InCombiningDiacriticalMarks}+", string0);
      
      String string1 = StringUtils.center((String) null, 32);
      assertNull(string1);
      
      String string2 = StringUtils.lowerCase((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase((String) null, "dJoQb1*");
      assertNull(string3);
      
      String string4 = StringUtils.defaultIfBlank((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.getDigits((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.right("tA5T;", 8192);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertEquals("tA5T;", string6);
      
      String string7 = StringUtils.replace("Tz!9o!u6_jlt *PA#p{InCombiningDiacriticalMarks}+", "Minimum abbreviation width with offset is %d", "fY#'/bhGMYW\"@_\"NN$-");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertEquals("Tz!9o!u6_jlt *PA#p{InCombiningDiacriticalMarks}+", string7);
      
      String string8 = StringUtils.defaultIfBlank("/r-\"w=sW%t~or%qa?L", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertEquals("/r-\"w=sW%t~or%qa?L", string8);
      
      String string9 = StringUtils.abbreviate((String) null, 7, 7);
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.complementOf(enumSet0);
      assertNotNull(enumSet1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(enumSet1.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet1.iterator();
      assertNotNull(iterator0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(enumSet1.contains(locale_Category0));
      
      String string0 = StringUtils.join(iterator0, "7qo");
      assertNotNull(string0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertEquals("FORMAT", string0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(enumSet1.contains(locale_Category0));
      
      String string1 = StringUtils.rightPad("7qo", 1, '-');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7qo", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("7qo");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace("FORMAT");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      
      String string0 = locale0.getScript();
      assertNotNull(string0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", string0);
      
      String string1 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string1);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.remove((String) null, (String) null);
      assertNull(string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "]vP)*V)5KQ`:7>W!", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertNotNull(charSequence0);
      assertEquals("]vP)*V)5KQ`:7>W!", charSequence0);
      
      String string2 = StringUtils.stripEnd((String) null, "]vP)*V)5KQ`:7>W!");
      assertNull(string2);
      
      String string3 = StringUtils.removeStart((String) null, "h");
      assertNull(string3);
      
      String string4 = StringUtils.capitalize("Strings must not be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertEquals("Strings must not be null", string4);
      
      String string5 = StringUtils.strip("Strings must not be null");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      assertEquals("Strings must not be null", string5);
      
      String string6 = StringUtils.replaceOnceIgnoreCase((String) null, (String) null, (String) null);
      assertNull(string6);
      
      String string7 = StringUtils.join(byteArray0, 'q', (int) (byte)90, (int) (byte)90);
      assertNotNull(string7);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)90}, byteArray0);
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      
      String string8 = StringUtils.difference("#SBFDd", "]vP)*V)5KQ`:7>W!");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)charSequence0));
      assertEquals("]vP)*V)5KQ`:7>W!", string8);
      
      String string9 = StringUtils.trim("#SBFDd");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)charSequence0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertEquals("#SBFDd", string9);
      
      String string10 = StringUtils.substringBeforeLast("}?6<^]?5Yoc", "u38>kLqi(k\"tkxK1");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)charSequence0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertEquals("}?6<^]?5Yoc", string10);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("Exception cloning Cloneable type ", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils");
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray1);
      
      String string2 = StringUtils.wrapIfMissing("V", 'U');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("UVU", string2);
      
      String string3 = StringUtils.center("}?6<^]?5Yoc", 239);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("                                                                                                                 }?6<^]?5Yoc                                                                                                                  ", string3);
      
      String string4 = StringUtils.stripEnd("                                                                                                                 }?6<^]?5Yoc                                                                                                                  ", "4[u-`Sbi;!5#c7`%d");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("                                                                                                                 }?6<^]?5Yoc                                                                                                                  ", string4);
      
      String string5 = StringUtils.unwrap("org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", 'U');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", string5);
      
      String string6 = StringUtils.uncapitalize("                                                                                                                 }?6<^]?5Yoc                                                                                                                  ");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("                                                                                                                 }?6<^]?5Yoc                                                                                                                  ", string6);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.appendIfMissing("Tz!9o!u6_jlt *PA#", "p{InCombiningDiacriticalMarks}+", stringArray0);
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      assertEquals("Tz!9o!u6_jlt *PA#p{InCombiningDiacriticalMarks}+", string1);
      
      String string2 = StringUtils.center((String) null, 0);
      assertNull(string2);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      String string3 = StringUtils.join(booleanArray0, '7');
      assertNotNull(string3);
      assertEquals(5, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("false7false7false7false7false", string3);
      
      boolean boolean1 = StringUtils.equals((CharSequence) null, (CharSequence) "false7false7false7false7false");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string4);
      assertEquals(1, stringArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Tz!9o!u6_jlt *PA#", (CharSequence) "p{InCombiningDiacriticalMarks}+", (-995));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "#*I";
      charSequenceArray0[1] = (CharSequence) "#*I";
      charSequenceArray0[2] = (CharSequence) "#*I";
      charSequenceArray0[3] = (CharSequence) "#*I";
      charSequenceArray0[4] = (CharSequence) "#*I";
      String string0 = StringUtils.appendIfMissingIgnoreCase("#*I", "#*I", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("#*I", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.chomp("Tz!9o!u6_jlt *PA#");
      assertNotNull(string0);
      assertEquals("Tz!9o!u6_jlt *PA#", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", 65536, 65536);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.substringsBetween("p{InCombiningDiacriticalMarks}+", "6`qS$_YV/|H43N?", "LE<6T(g");
      assertNull(stringArray1);
      
      String string1 = StringUtils.abbreviateMiddle("6`qS$_YV/|H43N?", "\r", 57);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("6`qS$_YV/|H43N?", string1);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("JE", "Strings must not be null", "Strings must not be null");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = ']';
      String string0 = StringUtils.center("\"j]`|", 15, (String) null);
      assertNotNull(string0);
      assertEquals("     \"j]`|     ", string0);
      
      String string1 = StringUtils.trimToNull("0WB");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0WB", string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\"j]`|");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("     \"j]`|     ", "     \"j]`|     ", 15);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.getDigits("0WB");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "e%o,=$t", (-149), 15);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.substringsBetween("OcN", "P;zE=8lyT~9", "0");
      assertNull(stringArray1);
      
      String string3 = StringUtils.replaceOnce("Array and element cannot both be null", "jA).[", "Strings must not be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Array and element cannot both be null", string3);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'H';
      String string0 = StringUtils.substringBeforeLast("LNuk>Qz|sjw", "LNuk>Qz|sjw");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("LNuk>Qz|sjw", "LNuk>Qz|sjw", "7.ZeF!kLt");
      assertNull(stringArray0);
      
      String string1 = StringUtils.removeEnd("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("LNuk>Qz|sjw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[19];
      charSequenceArray0[0] = (CharSequence) "V[aBj";
      charSequenceArray0[2] = (CharSequence) "V[aBj";
      charSequenceArray0[4] = (CharSequence) "V[aBj";
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[6] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[7] = (CharSequence) "V[aBj";
      boolean boolean0 = StringUtils.endsWithAny("Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertEquals(19, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.right("_~pw;iY*w", 7);
      assertNotNull(string0);
      assertEquals("pw;iY*w", string0);
      
      boolean boolean1 = StringUtils.startsWith("Minimum abbreviation width with offset is %d", charSequenceArray0[0]);
      assertEquals(19, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-39);
      String string0 = StringUtils.join(byteArray0, 'W');
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-39)}, byteArray0);
      assertEquals("90W-39", string0);
      
      String string1 = StringUtils.truncate("#@~i3Y%", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "#@~i3Y%");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "#@~i3Y%", (CharSequence) "90W-39");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsOnly(charSequenceArray0[0], (char[]) null);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[0] = (byte) (-39);
      String string0 = StringUtils.join(byteArray0, 'W');
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-39), (byte)0}, byteArray0);
      assertEquals("-39W0", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("hJg|3PZ[]", "hJg|3PZ[]", "K");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("K", string1);
      
      boolean boolean0 = StringUtils.isBlank(", '");
      assertFalse(boolean0);
      
      String string2 = StringUtils.chomp("h)^zk^mi36$U`Hsv");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("h)^zk^mi36$U`Hsv", string2);
      
      boolean boolean1 = StringUtils.isEmpty("-39W0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.center("Supplied value must be a valid byte literal between -128 and 127: [", 3, 'X');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string3);
      
      int int0 = StringUtils.ordinalIndexOf("h)^zk^mi36$U`Hsv", "-39W0", 3);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.overlay("K", "L4**c>4|Pt[go4D8#", 21, 50);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("KL4**c>4|Pt[go4D8#", string4);
      
      String string5 = StringUtils.replaceEach("h", (String[]) null, (String[]) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("h", string5);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Minimum abbreviation width with offset is %d";
      String string0 = StringUtils.stripEnd("Qmpg*", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string0);
      assertEquals("Qmpg*", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("Qmpg*");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", "74");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("74org.apache.commons.lang3.StringUtils74", string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("org.apache.commons.lang3.StringUtils");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("V0@T_pguUHKmb>A\"Xg#T", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "V0@T_pguUHKmb>A\"Xg#T", (String) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(11, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      String string2 = StringUtils.chop("74org.apache.commons.lang3.StringUtils74");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("74org.apache.commons.lang3.StringUtils7", string2);
      
      String string3 = StringUtils.stripEnd("\"jJVnmvr1>PG\"jJVnmvr1>PG", "qSN#]L|}5qZh");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\"jJVnmvr1>PG\"jJVnmvr1>PG", string3);
      
      String string4 = StringUtils.unwrap("V", 't');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("V", string4);
      
      String string5 = StringUtils.uncapitalize("74");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("74", string5);
      
      String string6 = StringUtils.getCommonPrefix(stringArray2);
      assertNotNull(string6);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(11, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      
      boolean boolean3 = StringUtils.isMixedCase("Qmpg*");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertTrue(boolean0);
      
      String string0 = StringUtils.unwrap("", '}');
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.defaultString("Kv`M~#De ", "JE");
      assertNotNull(string0);
      assertEquals("Kv`M~#De ", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "JE", (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "Kv`M~#De ";
      String string1 = StringUtils.repeat('M', 54);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string1);
      
      String string2 = StringUtils.truncate("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.center((String) null, 4);
      assertNull(string3);
      
      String string4 = StringUtils.stripEnd("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", (String) null);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string4);
      
      String string5 = StringUtils.unwrap((String) null, 'N');
      assertNull(string5);
      
      boolean boolean2 = StringUtils.equalsAny(charSequenceArray0[1], charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String[] stringArray0 = StringUtils.split("SFpOaH");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string6 = StringUtils.substringBeforeLast(" vs ", "");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals(" vs ", string6);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)4;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.chop("Strings must not be null");
      assertNotNull(string0);
      assertEquals("Strings must not be nul", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Strings must not be nul", "Strings must not be null");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.unwrap("ln}?6<^]?5Yoc", "\"tcuf~Dd|l");
      assertNotNull(string0);
      assertEquals("ln}?6<^]?5Yoc", string0);
      
      String string1 = StringUtils.removeIgnoreCase("Q2y+", "6Qgv");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Q2y+", string1);
      
      String string2 = StringUtils.unwrap("ln}?6<^]?5Yoc", "@;");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ln}?6<^]?5Yoc", string2);
      
      String string3 = StringUtils.replacePattern("M]9", "jo", "h||DNr");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("M]9", string3);
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      String string4 = locale0.getScript();
      assertNotNull(string4);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      Locale locale1 = Locale.JAPANESE;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      
      String string5 = locale0.getDisplayVariant(locale1);
      assertNotNull(string5);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      
      String string6 = StringUtils.upperCase("1>iZB", locale1);
      assertNotNull(string6);
      assertNotSame(locale1, locale0);
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("1>IZB", string6);
      
      String string7 = StringUtils.strip("1>IZB");
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertEquals("1>IZB", string7);
      
      String string8 = StringUtils.truncate((String) null, 53);
      assertNull(string8);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Q2y+");
      assertFalse(boolean0);
      
      String string9 = StringUtils.join((char[]) null, 'N', 32, 53);
      assertNull(string9);
      
      int int0 = StringUtils.indexOf((CharSequence) "M]9", (-1328));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.reverse(", Lengt$: ");
      assertNotNull(string0);
      assertEquals(" :$tgneL ,", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) ", Lengt$: ";
      charSequenceArray0[0] = (CharSequence) ", Lengt$: ";
      charSequenceArray0[2] = (CharSequence) ", Lengt$: ";
      String string1 = StringUtils.removeAll(", Lengt$: ", ", Lengt$: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", Lengt$: ", string1);
      
      charSequenceArray0[3] = (CharSequence) ", Lengt$: ";
      boolean boolean0 = StringUtils.containsAny((CharSequence) " :$tgneL ,", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ", Lengt$: ", "");
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      boolean boolean1 = StringUtils.isNumericSpace(charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.EMPTY;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      String string0 = StringUtils.joinWith("", objectArray0);
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      int int0 = 1276;
      String string1 = StringUtils.abbreviate("", 1276);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = "";
      String string3 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.stripStart("", "");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int1 = (-3103);
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "", (-3103), 1814);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3103
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\n";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("\n", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("\n");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare("\n", "H1]upu?NnA<_", true);
      assertEquals((-62), int0);
      
      String string1 = StringUtils.left("\n", (-62));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("=tVj5xn-,hAP*+$Q[y", "", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("=tVj5xn-,hAP*+$Q[y", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("=tVj5xn-,hAP*+$Q[y", "}?6<^]?5Yoc");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string1 = StringUtils.swapCase("nDk`'zgL)~U");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("NdK`'ZGl)~u", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "nDk`'zgL)~U", (CharSequence) "nDk`'zgL)~U", Integer.MIN_VALUE);
      assertEquals(0, int0);
      
      String string2 = StringUtils.left("=tVj5xn-,hAP*+$Q[y", 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.substring("NdK`'ZGl)~u", 1451, 57);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "]vP)*V)5KQ`:7>W!");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The Array must not be null", "]vP)*V)5KQ`:7>W!");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.swapCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ORG.APACHE.COMMONS.LANG3.sTRINGuTILS", string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.StringUtils", charSequenceArray0[1], 1451);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.left("ORG.APACHE.COMMONS.LANG3.sTRINGuTILS", (-1));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.substring("Supplied value must be a valid byte literal between -128 and 127: [", (-926), 1451);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string4);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.stripEnd("7r(Pn6k/(", "c*");
      assertNotNull(string0);
      assertEquals("7r(Pn6k/(", string0);
      
      String string1 = StringUtils.remove("7r(Pn6k/(", "^");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("7r(Pn6k/(", string1);
      
      String string2 = StringUtils.removeIgnoreCase("7r(Pn6k/(", "^");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("7r(Pn6k/(", string2);
      
      String string3 = StringUtils.getDigits("7r(Pn6k/(");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("76", string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "7r(Pn6k/(";
      objectArray0[1] = (Object) "c*";
      objectArray0[2] = (Object) "76";
      String string4 = StringUtils.join(objectArray0, "H?OK|!~Dl1~y", 12, 12);
      assertNotNull(string4);
      assertEquals(3, objectArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      char[] charArray0 = new char[8];
      charArray0[2] = 'h';
      charArray0[3] = ':';
      charArray0[4] = '5';
      charArray0[5] = '[';
      charArray0[6] = '\"';
      charArray0[7] = '-';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "7r(Pn6k/(", charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'h', ':', '5', '[', '\"', '-'}, charArray0);
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "7r(Pn6k/(", (CharSequence) "7r(Pn6k/(");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "H?OK|!~Dl1~y";
      stringArray0[1] = "7r(Pn6k/(";
      stringArray0[2] = "";
      stringArray0[3] = "7r(Pn6k/(";
      stringArray0[4] = " vs ";
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string5);
      assertEquals(5, stringArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\r";
      stringArray0[1] = "\r";
      stringArray0[2] = "]`}xH:A";
      stringArray0[0] = "\r";
      stringArray0[7] = "\r";
      stringArray0[8] = "\r";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(9, stringArray0.length);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isMixedCase(stringArray0[3]);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, 'B');
      assertNotNull(string0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      
      String string1 = StringUtils.join((short[]) null, 'g');
      assertNull(string1);
      
      String string2 = StringUtils.trimToEmpty("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)charSequence0));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceChars("", "", "dP>Rul<WaC");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)charSequence0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)88;
      shortArray0[2] = (short)88;
      shortArray0[3] = (short)88;
      shortArray0[4] = (short)88;
      shortArray0[5] = (short)88;
      String string0 = StringUtils.join(shortArray0, '`');
      assertNotNull(string0);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)88, (short)0, (short)88, (short)88, (short)88, (short)88}, shortArray0);
      assertEquals("88`0`88`88`88`88", string0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isNumeric("88`0`88`88`88`88");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceChars("!$0w(Nv#IYm:X9bmf", "Array element ", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("!$0w(Nv#IY:X9bf", string2);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.unwrap("ln}?6<^]?5Yoc", "\"tcuf~Dd|l");
      assertNotNull(string0);
      assertEquals("ln}?6<^]?5Yoc", string0);
      
      String string1 = StringUtils.chomp("ln}?6<^]?5Yoc", "A.DwS+Ef<T1");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("ln}?6<^]?5Yoc", string1);
      
      String string2 = StringUtils.swapCase((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.unwrap("Search and Replace array lengths don't match: ", "^4`");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ln}?6<^]?5Yoc");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.replace("Cannot store ", "Search and Replace array lengths don't match: ", "Locale must not be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Cannot store ", string4);
      
      int int0 = StringUtils.countMatches((CharSequence) "Cannot store ", (CharSequence) "ln}?6<^]?5Yoc");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Cannot store ", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.removePattern("%Mggiuf$<*LrQS&J_#", "ln}?6<^]?5Yoc");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("%Mggiuf$<*LrQS&J_#", string5);
      
      String string6 = StringUtils.replaceOnce("Locale must not be null", "Search and Replace array lengths don't match: ", (String) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("Locale must not be null", string6);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.ArrayUtils", "K");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string7 = StringUtils.trim("");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean0);
      
      String string8 = StringUtils.rightPad("org.apache.commons.lang3.ArrayUtils", 0, 'i');
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string8);
      
      int int2 = StringUtils.ordinalIndexOf("K", "K", (-1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean1 = StringUtils.startsWithAny("org.apache.commons.lang3.ArrayUtils", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("Locale must not be null");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string9 = StringUtils.wrapIfMissing("ln}?6<^]?5Yoc", 'T');
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertEquals("Tln}?6<^]?5YocT", string9);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "Cannot store ");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(1, stringArray2.length);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[19];
      charSequenceArray0[0] = (CharSequence) "V[aBj";
      charSequenceArray0[2] = (CharSequence) "V[aBj";
      charSequenceArray0[7] = (CharSequence) "V[aBj";
      boolean boolean0 = StringUtils.endsWithAny("Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertEquals(19, charSequenceArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny(charSequenceArray0[2], charArray0);
      assertEquals(19, charSequenceArray0.length);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.overlay("Minimum abbreviation width with offset is %d", "V[aBj", 4427, (-1));
      assertNotNull(string0);
      assertEquals("V[aBj", string0);
      
      String string1 = StringUtils.replaceEach("Exception cloning Cloneable type ", (String[]) null, (String[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Exception cloning Cloneable type ", string1);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.defaultString("f0p=}]=guLAv^vQ", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string0);
      assertEquals("f0p=}]=guLAv^vQ", string0);
      
      int int0 = StringUtils.compareIgnoreCase("Locale must not be null", "Locale must not be null");
      assertEquals(0, int0);
      
      String string1 = StringUtils.leftPad("5*(7.+Jt8(", 0, "Locale must not be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("5*(7.+Jt8(", string1);
      
      String string2 = StringUtils.overlay("Locale must not be null", ", Length: \n", 88, 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(", Length: \n", string2);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.defaultString("Kv`M~#De ", "JE");
      assertNotNull(string0);
      assertEquals("Kv`M~#De ", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "JE", (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "Kv`M~#De ";
      String string1 = StringUtils.repeat('M', 54);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string1);
      
      String string2 = StringUtils.replaceIgnoreCase(", '", (String) null, "Kv`M~#De ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(", '", string2);
      
      boolean boolean1 = StringUtils.isBlank(charSequenceArray0[0]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.chomp((String) null);
      assertNull(string3);
      
      boolean boolean2 = StringUtils.isEmpty("hJg|3PZ[]");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.center((String) null, 54, 'X');
      assertNull(string4);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 54);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.overlay("l{5JJJIO=", "}#U9p[hyRTV `t:h", 844, (-1));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("}#U9p[hyRTV `t:h", string5);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToEmpty("LNuk>Qz|sjw");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("LNuk>Qz|sjw", string1);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '<';
      charArray1[1] = '^';
      charArray1[2] = '<';
      charArray1[3] = '^';
      charArray1[4] = '<';
      charArray1[5] = '^';
      charArray1[6] = '3';
      charArray1[7] = '<';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray1);
      assertNotSame(charArray1, charArray0);
      assertEquals(8, charArray1.length);
      assertArrayEquals(new char[] {'<', '^', '<', '^', '<', '^', '3', '<'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      String string3 = StringUtils.join(intArray0, '<', 1883, 1883);
      assertNotNull(string3);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "LNuk>Qz|sjw";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = "@";
      String string1 = StringUtils.replaceOnceIgnoreCase("@", "@", "@");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("@", string1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 2831;
      int int0 = (-566);
      intArray0[1] = (-566);
      int int1 = 23;
      intArray0[2] = 23;
      char char0 = 'i';
      String string2 = StringUtils.join(intArray0, 'i', 23, (-566));
      assertNotNull(string2);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {2831, (-566), 23}, intArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      ArrayDeque<CharBuffer> arrayDeque0 = null;
      try {
        arrayDeque0 = new ArrayDeque<CharBuffer>((Collection<? extends CharBuffer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.stripEnd("@JE", "@JE");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultString("(OI", "@JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(OI", string1);
      
      String string2 = StringUtils.replaceOnce("", "(OI", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("@JE", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("@JE", string3);
      
      String string4 = StringUtils.reverseDelimited("", '\u0081');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.deleteWhitespace((String) null);
      assertNull(string5);
      
      int int0 = StringUtils.compareIgnoreCase("", (String) null, false);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, string0);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("$'aCt5h{JPEovDiq#+F", string0);
      assertEquals(1, int0);
      
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string1);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.substringAfter(" has no clone method", 64);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultIfBlank((String) null, " has no clone method");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" has no clone method", string1);
      
      String string2 = StringUtils.replacePattern(" has no clone method", "fzWp8", "&)n~s%-jd'oG");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" has no clone method", string2);
      
      String string3 = StringUtils.getDigits((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.right((String) null, 63);
      assertNull(string4);
      
      String string5 = StringUtils.replace("(gk+](%^Pne7lg", (String) null, "r4a%~B%");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("(gk+](%^Pne7lg", string5);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(string0));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, 'S', 63, 2475);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2475
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.rotate("LNuk>Qz|sjw", 2109);
      assertNotNull(string0);
      assertEquals("k>Qz|sjwLNu", string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("L", "Arr", " has no clone methodorg.apache.commons.lang3.ArrayUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L", string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "LNuk>Qz|sjw", (CharSequence) "L");
      assertEquals(1, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) " has no clone methodorg.apache.commons.lang3.ArrayUtils", (CharSequence) "L", 1);
      assertFalse(int1 == int0);
      assertEquals(9, int1);
      
      String string2 = StringUtils.stripToEmpty("org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.StringUtils", string2);
      
      String string3 = StringUtils.strip("L");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("L", string3);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("k>Qz|sjwLNu", "qSN#]L|}5qZh", "L");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("k>Qz|sjwLNu", string4);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-42);
      String string5 = StringUtils.join(byteArray0, 'V', 30, 1);
      assertNotNull(string5);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)8, (byte) (-2), (byte)31, (byte)103, (byte) (-42)}, byteArray0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      
      String string6 = StringUtils.difference("Jv&`_a", "...");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("...", string6);
      
      boolean boolean1 = StringUtils.isNumericSpace(" has no clone methodorg.apache.commons.lang3.ArrayUtils");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.replacePattern("Hj:*\"6@I4RMPf}<", "Hj:*\"6@I4RMPf}<", "Hj:*\"6@I4RMPf}<");
      assertNotNull(string0);
      assertEquals("Hj:*\"6@I4RMPf}<", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Hj:*\"6@I4RMPf}<", "Threshold must not be negative", "/r-\"w=sW%t~or%qa?L");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Hj:*\"6@I4RMPf}<", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Hj:*\"6@I4RMPf}<";
      charSequenceArray0[1] = (CharSequence) "Threshold must not be negative";
      int int0 = StringUtils.indexOfAny((CharSequence) "Hj:*\"6@I4RMPf}<", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty((String) null, "l<0l*LOA,rlX7.");
      assertNotNull(string0);
      assertEquals("l<0l*LOA,rlX7.", string0);
      
      String string1 = StringUtils.unwrap("org.apache.commons.lang3.RegExUtils", " ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.RegExUtils", string1);
      
      String[] stringArray0 = StringUtils.split("l<0l*LOA,rlX7.", "=vzf");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = "9vKy";
      String string3 = StringUtils.removeFirst("org.apache.commons.lang3.RegExUtils", "comparator");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.RegExUtils", string3);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", "comparator");
      assertFalse(boolean0);
      
      String string4 = StringUtils.trim("=vzf");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("=vzf", string4);
      
      String string5 = "org.apache.commons.lang3.Charsets";
      String string6 = StringUtils.substringBeforeLast((String) null, "org.apache.commons.lang3.Charsets");
      assertNull(string6);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "org.apache.commons.lang3.RegExUtils", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.replaceChars("[xi&K`,", 'p', 'O');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("[xi&K`,", string7);
      
      int int1 = 2023;
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'p', (-1), 2023);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = ':';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', ':'}, charArray0);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-80), Integer.MIN_VALUE);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.trimToEmpty("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad((String) null, (int) ':', "");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-54);
      byteArray0[3] = (byte) (-43);
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)7;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte) (-50);
      byteArray0[8] = (byte)49;
      String string0 = StringUtils.join(byteArray0, 'I', 2856, 19);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)11, (byte) (-87), (byte) (-54), (byte) (-43), (byte) (-56), (byte)7, (byte)102, (byte) (-50), (byte)49}, byteArray0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (int) (byte) (-87), (int) (byte)7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.right("ln}?6<^]?5Yocl|?6<^]?5Yoc", 7);
      assertNotNull(string0);
      assertEquals("^]?5Yoc", string0);
      
      String string1 = StringUtils.stripToEmpty("^]?5Yoc");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("^]?5Yoc", string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "^]?5Yoc", (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'Z');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.capitalize("5_4PJne0");
      assertNotNull(string0);
      assertEquals("5_4PJne0", string0);
      
      String string1 = StringUtils.substringAfter("2+*EboK[oU'pBG", "6dv{");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.normalizeSpace("5_4PJne0");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("5_4PJne0", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "6dv{", (-2954));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "5_4PJne0", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "5_4PJne0";
      stringArray0[1] = ">Uq3J>2uE";
      stringArray0[2] = "5_4PJne0";
      stringArray0[3] = "5_4PJne0";
      stringArray0[4] = "2+*EboK[oU'pBG";
      stringArray0[5] = "5_4PJne0";
      stringArray0[6] = "6dv{";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.substringBetween("6dv{", "5_4PJne0", "5_4PJne0");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.swapCase(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\U", string1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-286L);
      longArray0[1] = (-2419L);
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(string1));
      
      String string2 = StringUtils.join((List<?>) stack0, '%', 2173, 49);
      assertNotNull(string2);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertFalse(stack0.contains(string1));
      
      String string3 = StringUtils.chop("U");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.defaultIfEmpty(string0, "");
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\\u", string4);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.rotate("LNuk>Qz|sjw", 2109);
      assertNotNull(string0);
      assertEquals("k>Qz|sjwLNu", string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripEnd("LNuk>Qz|sjw", " has no clone methodorg.apache.commons.lang3.ArrayUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("LNuk>Qz|sjw", string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "LNuk>Qz|sjw", (CharSequence) "LNuk>Qz|sjw");
      assertEquals((-1), int0);
      
      int int1 = 263;
      String string2 = StringUtils.substringAfter("\r", "k>Qz|sjwLNu");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      char char0 = '\\';
      int int2 = StringUtils.countMatches((CharSequence) "LNuk>Qz|sjw", '\\');
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      boolean boolean1 = StringUtils.isAllLowerCase("LNuk>Qz|sjw");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("\r");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.truncate("LNuk>Qz|sjw", 0, (int) '\\');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("LNuk>Qz|sjw", string3);
      
      PriorityQueue<Object> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Object>((-2417));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = "B_\\s.'A qD+GXOo";
      String string1 = null;
      int int0 = StringUtils.compareIgnoreCase((String) null, "B_s.'A qD+GXOo", true);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[10];
      longArray0[0] = (long) (-1);
      longArray0[1] = (-142L);
      longArray0[2] = (long) (-1);
      longArray0[2] = (long) (-1);
      longArray0[4] = (long) (-1);
      longArray0[5] = (-1L);
      longArray0[6] = (long) (-1);
      longArray0[7] = (long) (-1);
      longArray0[8] = (long) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'I', (-421), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -421
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '7', 1850, 115);
      assertNotNull(string0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.unwrap("maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
      
      String[] stringArray0 = StringUtils.split("maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[1];
      String string1 = StringUtils.removeFirst("p{InCombiningDiacriticalMarks}+", "9vKy");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("maxWith cannot be negative", "p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
      
      String string2 = StringUtils.trim("maxWith cannot be negative");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string2);
      
      String string3 = StringUtils.substringBeforeLast("9vKy", "maxWith cannot be negative");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("9vKy", string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "9vKy", (CharSequence[]) stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.replaceChars("maxWith cannot be negative", '\u0000', 'p');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string4);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'I';
      longArray0[1] = (long) (-421);
      longArray0[2] = (-261L);
      longArray0[3] = (long) 'I';
      longArray0[4] = (long) (-421);
      longArray0[5] = (long) (-1);
      String string5 = StringUtils.join(longArray0, 'C', 2023, 37);
      assertNotNull(string5);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {73L, (-421L), (-261L), 73L, (-421L), (-1L)}, longArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      String string6 = StringUtils.deleteWhitespace("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string6);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.StringUtils", "\r", (-421));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("1]qjH", "1]qjH");
      assertNotNull(string0);
      assertEquals("1]qjH", string0);
      
      String string1 = StringUtils.reverse(" is not in the range '0' - '9'");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("'9' - '0' egnar eht ni ton si ", string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'v';
      charArray0[2] = 'd';
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      String string2 = StringUtils.join(byteArray0, '!', 97, (-1952412364));
      assertNotNull(string2);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.difference("l!]nH5ZKw", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.trim(")");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(")", string4);
      
      String string5 = StringUtils.substringBeforeLast("itYozh@E._-S_4r6!", "1]qjH");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("itYozh@E._-S_4r6!", string5);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("=tVj5xn-,hAP*+$Q[y", "", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("=tVj5xn-,hAP*+$Q[y", string0);
      
      String string1 = StringUtils.removeStart("#)1.`2c?adoy", "k6x");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("#)1.`2c?adoy", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "nDk`'zgL)~U", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.left("Ky@[", 122);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Ky@[", string2);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.stripAccents("7;Qv+w!+q]1?mSlrvbO");
      assertNotNull(string0);
      assertEquals("7;Qv+w!+q]1?mSlrvbO", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("7;Qv+w!+q]1?mSlrvbO", "7;Qv+w!+q]1?mSlrvbO");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.replaceAll("q3>hP62~9jF$U46z QK", "iuEp<&h.S&H9zIg", "Object varargs must not be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("q3>hP62~9jF$U46z QK", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "q3>hP62~9jF$U46z QK";
      charSequenceArray0[1] = (CharSequence) "q3>hP62~9jF$U46z QK";
      charSequenceArray0[2] = (CharSequence) "q3>hP62~9jF$U46z QK";
      charSequenceArray0[3] = (CharSequence) "iuEp<&h.S&H9zIg";
      charSequenceArray0[4] = (CharSequence) "tJtdD^0:-m";
      charSequenceArray0[5] = (CharSequence) "tsse{@xuP`JYMhyx";
      charSequenceArray0[6] = (CharSequence) "Object varargs must not be null";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '<';
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("LNuk>Qz|sjw", "LNuk>Qz|sjw");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.split(".ZeF!kLt", ".ZeF!kLt");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.wrapIfMissing(".ZeF!kLt", ".ZeF!kLt");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(".ZeF!kLt", string2);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = ']';
      charArray0[2] = 'q';
      charArray0[4] = 'H';
      String string0 = StringUtils.valueOf(charArray0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'1', ']', 'q', '\u0000', 'H'}, charArray0);
      assertEquals("1]q\u0000H", string0);
      
      String string1 = StringUtils.wrapIfMissing("1]q\u0000H", ", Length: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", Length: 1]q\u0000H, Length: ", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("1]q\u0000H", "1]q\u0000H", 52);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ", Length: 1]q\u0000H, Length: ", (CharSequence) ", Length: ", 48);
      assertEquals(15, int0);
      
      String string2 = StringUtils.uncapitalize("qSN#]L|}5qZ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("qSN#]L|}5qZ", string2);
      
      boolean boolean0 = StringUtils.isAlpha(", Length: ");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 'H';
      longArray0[1] = (long) 'q';
      longArray0[2] = (long) '1';
      longArray0[3] = (long) 'H';
      longArray0[4] = (long) '1';
      longArray0[5] = (long) 15;
      longArray0[6] = 1717L;
      String string3 = StringUtils.join(longArray0, '}');
      assertNotNull(string3);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {72L, 113L, 49L, 72L, 49L, 15L, 1717L}, longArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("72}113}49}72}49}15}1717", string3);
      
      int int1 = StringUtils.compareIgnoreCase("qSN#]L|}5qZ", "qSN#]L|}5qZ", false);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.replaceIgnoreCase("U=", "U=", "qSN#]L|}5qZ", 52);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("qSN#]L|}5qZ", string4);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.replacePattern("Hj:*\"6@I4RMPf}<", "Hj:*\"6@I4RMPf}<", "Hj:*\"6@I4RMPf}<");
      assertNotNull(string0);
      assertEquals("Hj:*\"6@I4RMPf}<", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Hj:*\"6@I4RMPf}<", "Threshold must not be negative", "/r-\"w=sW%t~or%qa?L");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Hj:*\"6@I4RMPf}<", string1);
      
      String string2 = StringUtils.repeat('M', 54);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string2);
      
      String string3 = StringUtils.replaceIgnoreCase("hJg|3PZ[]", "Threshold must not be negative", "PZqS)U= FO!.D>{H]qHj]");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("hJg|3PZ[]", string3);
      
      boolean boolean0 = StringUtils.isBlank("Hj:*\"6@I4RMPf}<");
      assertFalse(boolean0);
      
      String string4 = StringUtils.chomp("/r-\"w=sW%t~or%qa?L");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("/r-\"w=sW%t~or%qa?L", string4);
      
      boolean boolean1 = StringUtils.isEmpty("PZqS)U= FO!.D>{H]qHj]");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.center("/r-\"w=sW%t~or%qa?L", 54, '$');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("$$$$$$$$$$$$$$$$$$/r-\"w=sW%t~or%qa?L$$$$$$$$$$$$$$$$$$", string5);
      
      int int0 = StringUtils.ordinalIndexOf("hJg|3PZ[]", "PZqS)U= FO!.D>{H]qHj]", 54);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.overlay("/r-\"w=sW%t~or%qa?L", "`(@\"QHdLmU61S", 844, 844);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals("/r-\"w=sW%t~or%qa?L`(@\"QHdLmU61S", string6);
      
      String string7 = StringUtils.truncate((String) null, 429, 54);
      assertNull(string7);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string8 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string8);
      
      boolean boolean2 = StringUtils.contains((CharSequence) null, (-1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.stripStart("ch", "ch");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      int int0 = StringUtils.indexOfAny((CharSequence) "ch", charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'H', 'H'}, charArray0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ch";
      stringArray0[0] = "";
      stringArray0[2] = "ch";
      stringArray0[4] = "";
      String string1 = StringUtils.overlay("", "ch", (-1), 1846);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ch", string1);
      
      String string2 = StringUtils.replaceEach("p{InCombiningDiacriticalMarks}+", stringArray0, (String[]) null);
      assertNotNull(string2);
      assertEquals(8, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "ch");
      assertNull(stringArray1);
      
      String string3 = StringUtils.truncate((String) null, 64);
      assertNull(string3);
      
      String string4 = StringUtils.trimToEmpty("K");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("K", string4);
      
      int int1 = StringUtils.countMatches((CharSequence) "K", '&');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.chomp("\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[1];
      String string1 = StringUtils.join(floatArray0, '7');
      assertNotNull(string1);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "\r");
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("0.0", "");
      assertEquals(0.0, double0, 0.01);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string2 = StringUtils.getIfEmpty("", supplier0);
      assertNull(string2);
      
      String string3 = StringUtils.stripToEmpty("\r");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("org.apache.commons.lang3Charsets");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("org.apache.commons.lang3Charsets");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.repeat("/`^'%:R(SR", 15);
      assertNotNull(string0);
      assertEquals("/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR/`^'%:R(SR");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.appendIfMissing("Tz!9o!u6_jlt *PA#", "p{InCombiningDiacriticalMarks}+", stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("Tz!9o!u6_jlt *PA#p{InCombiningDiacriticalMarks}+", string0);
      
      String string1 = StringUtils.lowerCase((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      String string2 = StringUtils.unwrap("BS[", '\u001A');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("BS[", string2);
      
      boolean[] booleanArray0 = new boolean[8];
      String string3 = StringUtils.join(booleanArray0, '5');
      assertNotNull(string3);
      assertEquals(8, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("false5false5false5false5false5false5false5false", string3);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'o', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, charBuffer0.position());
      assertEquals("o\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(6, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.length());
      
      CharBuffer charBuffer1 = charBuffer0.append('o');
      assertNotNull(charBuffer1);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'o', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(6, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(5, charBuffer0.length());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(5, charBuffer1.length());
      assertEquals(1, charBuffer1.position());
      assertEquals(5, charBuffer1.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(6, charBuffer1.capacity());
      assertEquals(6, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      
      CharBuffer[] charBufferArray0 = new CharBuffer[3];
      charBufferArray0[0] = charBuffer1;
      charBufferArray0[1] = charBuffer0;
      charBufferArray0[2] = charBuffer1;
      CharBuffer charBuffer2 = StringUtils.firstNonBlank(charBufferArray0);
      assertNotNull(charBuffer2);
      assertSame(charBuffer2, charBuffer1);
      assertSame(charBuffer2, charBuffer0);
      assertEquals(3, charBufferArray0.length);
      assertEquals(5, charBuffer2.length());
      assertTrue(charBuffer2.hasArray());
      assertEquals(6, charBuffer2.capacity());
      assertEquals(6, charBuffer2.limit());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000", charBuffer2.toString());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals(5, charBuffer2.remaining());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(1, charBuffer2.position());
      assertFalse(charBuffer2.isDirect());
      
      String string4 = StringUtils.wrap((String) null, ')');
      assertNull(string4);
      
      String string5 = StringUtils.stripStart((String) null, "K_1'VaWMZ1>A84?OZaW");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.swapCase("T\"]N9V");
      assertNotNull(string0);
      assertEquals("t\"]n9v", string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '[';
      charArray0[1] = '2';
      charArray0[2] = 'a';
      charArray0[3] = 'B';
      charArray0[4] = '#';
      charArray0[5] = 'p';
      charArray0[6] = '?';
      charArray0[7] = 'g';
      charArray0[8] = '9';
      int int0 = StringUtils.indexOfAny((CharSequence) "t\"]n9v", charArray0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'[', '2', 'a', 'B', '#', 'p', '?', 'g', '9'}, charArray0);
      assertEquals(4, int0);
      
      String string1 = StringUtils.replacePattern("T\"]N9V", "B=7uzi/UiY%RTnq", "Array and element cannot both be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("T\"]N9V", string1);
      
      int int1 = StringUtils.compare("t\"]n9v", "Array and element cannot both be null");
      assertFalse(int1 == int0);
      assertEquals(51, int1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "T\"]N9V";
      stringArray0[1] = "T\"]N9V";
      stringArray0[2] = "Array and element cannot both be null";
      stringArray0[3] = "T\"]N9V";
      stringArray0[4] = "Array and element cannot both be null";
      String string2 = StringUtils.replaceEach("t\"]n9v", stringArray0, stringArray0);
      assertNotNull(string2);
      assertEquals(5, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("t\"]n9v", string2);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.substring("\r", 49, 4);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToNull("T3j,G>6rcwZn!$_V");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("T3j,G>6rcwZn!$_V", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "T3j,G>6rcwZn!$_V", "}hA2N+@[G");
      assertEquals(4, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.difference("&)n~s%-jd'oG", "W#mIx2~.");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("W#mIx2~.", string2);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.removeEnd("}hA2N+@[G", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("}hA2N+@[G", string3);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.remove(", Length: ", "org.apache.commons.lang3.ObjectUtilsfkY9.Z1");
      assertNotNull(string0);
      assertEquals(", Length: ", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) ", Length: ", (CharSequence) "]vP)*V)5KQ`:7>W!");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals(", Length: ", charSequence0);
      
      String string1 = StringUtils.defaultString("}hA2N+@[G", ", Length: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("}hA2N+@[G", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) ", Length: ";
      charSequenceArray0[1] = (CharSequence) ", Length: ";
      charSequenceArray0[2] = (CharSequence) "}hA2N+@[G";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean1 = StringUtils.isNumericSpace(", Length: ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.chop("org.apache.commons.lang3.ObjectUtilsfkY9.Z1");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.ObjectUtilsfkY9.Z", string2);
      
      boolean boolean2 = StringUtils.isAlphanumeric("org.apache.commons.lang3.ObjectUtilsfkY9.Z1");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.replaceChars("Search and Replace array lengths don't match: ", "org.apache.commons.lang3.exception.CloneFailedException", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("S  R y  ' : ", string3);
      
      boolean boolean3 = StringUtils.isAlphaSpace("Search and Replace array lengths don't match: ");
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string4 = StringUtils.trim("lW@ store aMqXi$MX");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("lW@ store aMqXi$MX", string4);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "lW@ store aMqXi$MX", 75, 75);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.trimToEmpty("org.apache.commons.lang3.ObjectUtilsfkY9.Z");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("org.apache.commons.lang3.ObjectUtilsfkY9.Z", string5);
      
      String string6 = StringUtils.rightPad(" 's ", (-2425), 'd');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals(" 's ", string6);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.chop("Strings must not be null");
      assertNotNull(string0);
      assertEquals("Strings must not be nul", string0);
      
      String string1 = StringUtils.stripToEmpty("Strings must not be nul");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Strings must not be nul", string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.defaultIfBlank("}aT@[wAFDPT", "Pf3<h)M;:P^o^]j");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("}aT@[wAFDPT", string2);
      
      String string3 = StringUtils.replacePattern("Strings must not be nul", "maxWith cannot be negative", "Strings must not be nul");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("Strings must not be nul", string3);
      
      String string4 = StringUtils.getDigits("r4a%~B%");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("4", string4);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Strings must not be null", (CharSequence) null);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Strings must not be nul";
      charSequenceArray0[1] = (CharSequence) "}aT@[wAFDPT";
      String string5 = StringUtils.wrap("K", ' ');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals(" K ", string5);
      
      charSequenceArray0[2] = (CharSequence) " K ";
      charSequenceArray0[3] = null;
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      // Undeclared exception!
      try { 
        EnumSet.copyOf((Collection<Locale.Category>) hashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Collection is empty
         //
         verifyException("java.util.EnumSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      long[] longArray0 = new long[7];
      longArray0[0] = 0L;
      longArray0[1] = (-393L);
      longArray0[2] = 237L;
      longArray0[3] = (-1L);
      longArray0[4] = (-1288L);
      longArray0[5] = (-1392L);
      longArray0[6] = 171L;
      String string0 = StringUtils.join(longArray0, 'L');
      assertNotNull(string0);
      assertEquals(7, longArray0.length);
      assertArrayEquals(new long[] {0L, (-393L), 237L, (-1L), (-1288L), (-1392L), 171L}, longArray0);
      assertEquals("0L-393L237L-1L-1288L-1392L171", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("0L-393L237L-1L-1288L-1392L171");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.chop("Exception cloning Cloneable type ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Exception cloning Cloneable type", string2);
      
      CharBuffer charBuffer0 = StringUtils.getIfEmpty((CharBuffer) null, (Supplier<CharBuffer>) null);
      assertNull(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = "org.apache.commons.lang3.Charsets";
      String string2 = StringUtils.trimToNull("org.apache.commons.lang3.Charsets");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.Charsets", string2);
      
      char[] charArray0 = new char[0];
      String string3 = StringUtils.reverseDelimited("-d)9mtkLI", '~');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("-d)9mtkLI", string3);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "je";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "je";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.Charsets";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.Charsets";
      charSequenceArray0[3] = (CharSequence) "-d)9mtkLI";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.Charsets";
      charSequenceArray0[5] = (CharSequence) "je";
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "-d)9mtkLI", (Supplier<CharSequence>) null);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertEquals("-d)9mtkLI", charSequence0);
      
      charSequenceArray0[6] = (CharSequence) "-d)9mtkLI";
      charSequenceArray0[7] = (CharSequence) "je";
      // Undeclared exception!
      try { 
        StringUtils.truncate("org.apache.commons.lang3.CharUtils", (-150));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.left("nDk`'zgL)~U", 16);
      assertNotNull(string0);
      assertEquals("nDk`'zgL)~U", string0);
      
      String string1 = StringUtils.deleteWhitespace(" vOORzZKQO=9/P");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("vOORzZKQO=9/P", string1);
      
      int int0 = StringUtils.compare("nDk`'zgL)~U", "$V+5e6?h", false);
      assertEquals(74, int0);
      
      String string2 = StringUtils.stripAccents(" vOORzZKQO=9/P");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" vOORzZKQO=9/P", string2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "$V+5e6?h";
      stringArray0[1] = " vOORzZKQO=9/P";
      stringArray0[2] = " vOORzZKQO=9/P";
      stringArray0[3] = "nDk`'zgL)~U";
      stringArray0[4] = "$V+5e6?h";
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = " vOORzZKQO=9/P";
      stringArray1[1] = "KEV_Y1";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach(" vOORzZKQO=9/P", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 5 vs 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.lowerCase("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("p{incombiningdiacriticalmarks}+", string0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string1 = StringUtils.unwrap("p{InCombiningDiacriticalMarks}+", '\u001A');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      
      String string2 = StringUtils.left("p{InCombiningDiacriticalMarks}+", 2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("p{", string2);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) ')';
      String string0 = StringUtils.wrap("U=", ')');
      assertNotNull(string0);
      assertEquals(")U=)", string0);
      
      String string1 = StringUtils.defaultString("6~#[TMmG+sWdx", "U=");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("6~#[TMmG+sWdx", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "6~#[TMmG+sWdx";
      int int0 = StringUtils.lastIndexOfAny("6~#[TMmG+sWdx", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isBlank("7r(Pn6k/(");
      assertFalse(boolean0);
      
      String string2 = StringUtils.left(")U=)", 403);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(")U=)", string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "7r(Pn6k/(", (CharSequence) "6~#[TMmG+sWdx");
      assertFalse(int1 == int0);
      assertEquals(13, int1);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.StringUtils", "Exception cloning Cloneable type ");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.stripAccents("c%uE%-Gq{#\",\"n54[");
      assertNotNull(string0);
      assertEquals("c%uE%-Gq{#\",\"n54[", string0);
      
      String string1 = StringUtils.substringBetween("JHL@U,\"`)u%4Kov?", (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("{B%y&Ex00");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("{B%Y&EX00", string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = '5';
      String string3 = StringUtils.join(charArray0, '5');
      assertNotNull(string3);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'5', '5'}, charArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("555", string3);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1779.29);
      doubleArray0[1] = 0.7;
      doubleArray0[2] = (-444.12108741008);
      doubleArray0[3] = (-3014.555222451508);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 888.0;
      String string0 = StringUtils.join(doubleArray0, 'b', 72, 72);
      assertNotNull(string0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1779.29), 0.7, (-444.12108741008), (-3014.555222451508), (-1.0), 888.0}, doubleArray0, 0.01);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "Threshold must not be negative", (-1397));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Threshold must not be negative", (CharSequence) "Threshold must not be negative", 13);
      assertEquals(0, int0);
      
      String string1 = StringUtils.uncapitalize("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceChars("V0l^{*.c\u0007,|c", "", "c");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("V0l^{*.c\u0007,|c", string2);
      
      boolean boolean0 = StringUtils.isAlpha("V0l^{*.c\u0007,|c");
      assertFalse(boolean0);
      
      String string3 = StringUtils.wrap("\tY}f14~", 'Y');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Y\tY}f14~Y", string3);
      
      String string4 = StringUtils.stripEnd("6},~nz", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("6},~nz", string4);
      
      String string5 = StringUtils.leftPad("6},~nz", 13, '\'');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("'''''''6},~nz", string5);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 'J');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "7r(Pn6k/(", (String) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substring("", 4, 100);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.center("", 4, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("    ", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("org.apache.commons.lang3.StringUtilsException cloning Cloneable type ", (-2199), 100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(" vs ", " vs ", " vs ");
      assertNull(stringArray0);
      
      int int0 = StringUtils.compare(" vs ", " vs ");
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints(" vs ");
      assertNotNull(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {32, 118, 115, 32}, intArray0);
      
      String string0 = StringUtils.mid(" vs ", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) " vs ", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) " vs ";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'r', 0, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.center("org.apache.commons.lang3.Charsets", 44, "org.apache.commons.lang3.Charsets");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.aorg.apache.commons.lang3.Charsetsorg.ap", string1);
      
      String string2 = StringUtils.trimToNull("org.apache.commons.lang3.Charsets");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.Charsets", string2);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "org.aorg.apache.commons.lang3.Charsetsorg.ap", charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
      
      String string3 = StringUtils.reverseDelimited("-d)9mtkLI", '~');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("-d)9mtkLI", string3);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "je";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "-d)9mtkLI";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'H', (-150), 44);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -150
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = "-uD";
      Object[] objectArray0 = null;
      // Undeclared exception!
      try { 
        StringUtils.joinWith("-uD", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[19];
      charSequenceArray0[0] = (CharSequence) "V[aBj";
      charSequenceArray0[2] = (CharSequence) "V[aBj";
      charSequenceArray0[4] = (CharSequence) "V[aBj";
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[6] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[7] = (CharSequence) "V[aBj";
      charSequenceArray0[8] = (CharSequence) "Minimum abbreviation width with offset is %d";
      boolean boolean0 = StringUtils.endsWithAny("Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertEquals(19, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(charSequenceArray0[2]);
      assertEquals(19, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
      
      String string0 = StringUtils.getDigits("YH;&B8r<lX5");
      assertNotNull(string0);
      assertEquals("85", string0);
      
      int int0 = StringUtils.indexOf(charSequenceArray0[5], 3785, 1165);
      assertEquals(19, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray1 = new String[8];
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      stringArray1[3] = "V[aBj";
      stringArray1[4] = "V[aBj";
      stringArray1[5] = "V[aBj";
      stringArray1[6] = "YH;&B8r<lX5";
      stringArray1[7] = "YH;&B8r<lX5";
      String string1 = StringUtils.replaceEachRepeatedly("", stringArray1, stringArray1);
      assertNotNull(string1);
      assertEquals(8, stringArray1.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.swapCase("T\"]N9V");
      assertNotNull(string0);
      assertEquals("t\"]n9v", string0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      Object[] objectArray0 = new Object[0];
      String string2 = StringUtils.join(objectArray0, "482W|Ffd", 53, 53);
      assertNotNull(string2);
      assertEquals(0, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.replacePattern("", "", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.upperCase("r$#nOA+Q#62Y-Pi");
      assertNotNull(string0);
      assertEquals("R$#NOA+Q#62Y-PI", string0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Stream<Locale.LanguageRange> stream0 = stack0.parallelStream();
      assertNotNull(stream0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(stack0, hashMap0);
      assertNotNull(list0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.replaceAll("n~", "The Array must not be null", "Cannot store ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("n~", string1);
      
      String string2 = "}#3U=\\u";
      String string3 = StringUtils.mid(string2, (-2122), 3);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("}#3", string3);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.defaultIfBlank("}aT@[wAFDPT", "}aT@[wAFDPT");
      assertNotNull(string0);
      assertEquals("}aT@[wAFDPT", string0);
      
      String string1 = StringUtils.wrapIfMissing("}aT@[wAFDPT", 'F');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("F}aT@[wAFDPTF", string1);
      
      Locale locale0 = new Locale("null/empty items", "=g");
      assertNotNull(locale0);
      assertEquals("null/empty items", locale0.getLanguage());
      assertEquals("=G", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("null/empty items_=G", locale0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("org.apache.commons.lang3.StringUtils74", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", ']');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) ']';
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) ']';
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      
      String string1 = locale0.getDisplayScript();
      assertNotNull(string1);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.lowerCase("", locale0);
      assertNotNull(string2);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase((String) null, "", stringArray0);
      assertNull(string3);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isEmpty("&)");
      assertFalse(boolean0);
      
      String string1 = StringUtils.repeat("n~s%-jd'oG", (-1));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultString("", (String) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Comparator should not be null.", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("_", "");
      assertNotNull(string0);
      assertEquals("_", string0);
      
      String[] stringArray0 = StringUtils.split("]=-hhPpj2$/7", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.removeEnd("FPV[w8ya{a5a;v?8WJs", "[:vo~^");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("FPV[w8ya{a5a;v?8WJs", string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("LNuk>Qz|sjw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = StringUtils.lowerCase("mons.lang3.Strp{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("mons.lang3.strp{incombiningdiacriticalmarks}+", string0);
      
      String string1 = StringUtils.defaultString("mons.lang3.Strp{InCombiningDiacriticalMarks}+", "mons.lang3.Strp{InCombiningDiacriticalMarks}+");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("mons.lang3.Strp{InCombiningDiacriticalMarks}+", string1);
      
      String string2 = StringUtils.replaceOnce("", "mons.lang3.Strp{InCombiningDiacriticalMarks}+", "mons.lang3.strp{incombiningdiacriticalmarks}+");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("mons.lang3.Strp{InCombiningDiacriticalMarks}+", "mons.lang3.strp{incombiningdiacriticalmarks}+");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("mons.lang3.strp{incombiningdiacriticalmarks}+mons.lang3.Strp{InCombiningDiacriticalMarks}+mons.lang3.strp{incombiningdiacriticalmarks}+", string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "mons.lang3.strp{incombiningdiacriticalmarks}+", (CharSequence) "mons.lang3.Strp{InCombiningDiacriticalMarks}+");
      assertEquals(11, int0);
      
      String string4 = StringUtils.reverseDelimited("", '\u0081');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.rightPad("", (-3713), '\u0081');
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("K");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace("mons.lang3.strp{incombiningdiacriticalmarks}+");
      assertFalse(boolean0);
      
      String string6 = StringUtils.replaceIgnoreCase("mons.lang3.Strp{InCombiningDiacriticalMarks}+", "", "");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("mons.lang3.Strp{InCombiningDiacriticalMarks}+", string6);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "");
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.defaultString("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("", string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.stripToNull("h");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("h", string2);
      
      charSequenceArray0[3] = (CharSequence) "h";
      String string3 = StringUtils.removeStartIgnoreCase("h", "h");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string4 = StringUtils.truncate("v", 97);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("v", string4);
      
      charSequenceArray0[5] = (CharSequence) "v";
      String string5 = StringUtils.rotate("", 97);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)32;
      String string6 = StringUtils.join(byteArray0, 'a', 4309, 81);
      assertNotNull(string6);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)32, (byte)32}, byteArray0);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)charSequence0));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      
      String string7 = StringUtils.difference("org.apache.commons.lang3.ObjectUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertEquals("StringUtils", string7);
      
      String string8 = StringUtils.trim("qSN#]L|}5qZh");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertEquals("qSN#]L|}5qZh", string8);
      
      String string9 = StringUtils.substringBeforeLast("StringUtils", (String) null);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)charSequence0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertEquals("StringUtils", string9);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[2];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      String string10 = StringUtils.join(locale_CategoryArray0);
      assertNotNull(string10);
      assertEquals(2, locale_CategoryArray0.length);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)charSequence0));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertEquals("DISPLAYFORMAT", string10);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, false);
      assertEquals(0, int0);
      
      String string1 = StringUtils.wrapIfMissing("M]9", "M]9");
      assertNotNull(string1);
      assertEquals("M]9", string1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.defaultString("#", "/;^Uv");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("#", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("/;^Uv", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.substringAfter("}#3U=", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rotate("'fL{[xV^C3e]", (-17));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("xV^C3e]'fL{[", string1);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("'fL{[xV^C3e]", "org.apache.commons.lang3.StringUtils ", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("'fL{[xV^C3e]", string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) " has no clone methodorg.apache.commons.lang3.ArrayUtils");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringAfter("Cw1U*FnJR-]\"Cg[ay<", " has no clone methodorg.apache.commons.lang3.ArrayUtils");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'Y');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean1 = StringUtils.isAllLowerCase(" has no clone methodorg.apache.commons.lang3.ArrayUtils");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string4 = StringUtils.stripToEmpty("");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(263);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("Cw1U*FnJR-]\"Cg[ay<"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      priorityQueue0.clear();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("Cw1U*FnJR-]\"Cg[ay<"));
      
      boolean boolean3 = priorityQueue0.add("'fL{[xV^C3e]");
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertFalse(priorityQueue0.contains("Cw1U*FnJR-]\"Cg[ay<"));
      assertTrue(priorityQueue0.contains("'fL{[xV^C3e]"));
      
      String string5 = StringUtils.join((Iterable<?>) priorityQueue0, 'p');
      assertNotNull(string5);
      assertEquals(1, priorityQueue0.size());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("'fL{[xV^C3e]", string5);
      assertFalse(priorityQueue0.contains("Cw1U*FnJR-]\"Cg[ay<"));
      assertTrue(priorityQueue0.contains("'fL{[xV^C3e]"));
      
      String string6 = StringUtils.replace("", "'fL{[xV^C3e]", "qSN#]L|}5qZ", (-17));
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      
      int int2 = StringUtils.indexOf((CharSequence) "xV^C3e]'fL{[", 0, 275);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = StringUtils.substring(",rs", (-618), (-618));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) ",rs";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isEmpty(charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "Arr");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("Arr");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("Exception cloning Cloneable type ", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Arr");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Exception cloning Cloneable type ", (String) null, 5);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray1);
      
      String string2 = StringUtils.substringBefore("Exception cloning Cloneable type ", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("Exception cloning Cloneable type ", string2);
      
      String string3 = StringUtils.center("}?6<^]?5Yoc", 239);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("                                                                                                                 }?6<^]?5Yoc                                                                                                                  ", string3);
      
      String string4 = StringUtils.stripEnd("                                                                                                                 }?6<^]?5Yoc                                                                                                                  ", "4[u-`Sbi;!5#c7`%d");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("                                                                                                                 }?6<^]?5Yoc                                                                                                                  ", string4);
      
      String string5 = StringUtils.unwrap("org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", 'I');
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", string5);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("object", "org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      boolean boolean3 = StringUtils.isAllEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray2);
      assertEquals(5, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("", 32, 'r');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.rightPad("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", 2, "~gzeX6RG*]H~/~x;");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", string2);
      
      String string3 = StringUtils.EMPTY;
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", (CharSequence) "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      int int1 = StringUtils.compareIgnoreCase("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", "");
      assertFalse(int1 == int0);
      assertEquals(32, int1);
      
      boolean boolean2 = StringUtils.endsWith("~gzeX6RG*]H~/~x;", "~gzeX6RG*]H~/~x;");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", (CharSequence) "", 2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, int2);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("ln}?6<^]?5Yocln}?6<^]?5Yoc", "ln}?6<^]?5Yocln}?6<^]?5Yoc", 7);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "ln}?6<^]?5Yocln}?6<^]?5Yoc", (CharSequence) "", (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        Charset.forName("Supplied value must be a valid byte literal between -128 and 127: [");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Supplied value must be a valid byte literal between -128 and 127: [
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.abbreviate("7r(Pn6k/(", "{}", 100, 100);
      assertNotNull(string0);
      assertEquals("7r(Pn6k/(", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "7r(Pn6k/(", (CharSequence) "7r(Pn6k/(");
      assertEquals(0, int0);
      
      String string1 = StringUtils.swapCase("offset cannot be negative");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("OFFSET CANNOT BE NEGATIVE", string1);
      
      String string2 = StringUtils.toRootLowerCase("{}");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{}", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{}", "7r(Pn6k/(");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)54;
      shortArray0[2] = (short)32;
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("7r(Pn6k/("));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, 'Z', (int) (short)32, 100);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 100
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToEmpty("LNuk>Qz|sjw");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("LNuk>Qz|sjw", string1);
      
      String[] stringArray0 = StringUtils.split(".ZeF!kLt", ".ZeF!kLt");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.wrapIfMissing(".ZeF!kLt", ".ZeF!kLt");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(".ZeF!kLt", string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "LNuk>Qz|sjw");
      assertFalse(boolean0);
      
      String string3 = "}#3U=\\u";
      String string4 = StringUtils.replaceOnce(">>>", "K", string3);
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals(">>>", string4);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty((String) null, "l<0l*LOA,rlX7.");
      assertNotNull(string0);
      assertEquals("l<0l*LOA,rlX7.", string0);
      
      String string1 = StringUtils.difference(" ", "null/empty items");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("null/empty items", string1);
      
      String string2 = StringUtils.repeat('v', 11);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("vvvvvvvvvvv", string2);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      String string3 = StringUtils.join(booleanArray0, 'v');
      assertNotNull(string3);
      assertEquals(6, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false, false}, booleanArray0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("falsevfalsevtruevfalsevfalsevfalse", string3);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      String string0 = StringUtils.substringBetween("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = ':';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', ':'}, charArray0);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", " ", (-80));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = StringUtils.contains((CharSequence) " ", (-80));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Comparator should not be^6VX`^m>Bd;R23c65", "Comparator should not be^6VX`^m>Bd;R23c65");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) " ", charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', ':'}, charArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = StringUtils.unwrap("i/4k#", (String) null);
      assertNotNull(string0);
      assertEquals("i/4k#", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "i/4k#", (String) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replace((String) null, "i/4k#", "i/4k#", (-1));
      assertNull(string1);
      
      String string2 = StringUtils.stripToNull("");
      assertNull(string2);
      
      int int1 = StringUtils.countMatches((CharSequence) null, '1');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOf((CharSequence) "i/4k#", 1512, 1563);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) null, (-1));
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
      
      String string3 = StringUtils.stripEnd("i/4k#", "offset cannot be negative");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertEquals("i/4k#", string3);
      
      String string4 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string4);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Z';
      charArray0[1] = '1';
      charArray0[2] = '1';
      int int4 = StringUtils.indexOfAnyBut((CharSequence) "i/4k#", charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'Z', '1', '1'}, charArray0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals(0, int4);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String[] stringArray2 = StringUtils.split("gVK", 'Z');
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      int int0 = StringUtils.compare((String) null, (String) null);
      assertEquals(0, int0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = '<';
      charArray0[2] = '9';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'`', '<', '9'}, charArray0);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", " ", (-80));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern("fy!oM&tpm/", "fC<JoTV`J})|vN_}|H");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 9
         // fC<JoTV`J})|vN_}|H
         //          ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = ':';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", " ", (int) ':');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) " ", (int) ':');
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Comparator should not be^6VX`^m>Bd;R23c65", "Comparator should not be^6VX`^m>Bd;R23c65");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = StringUtils.substring("fzWp8", 64, 48);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.right("5MAoSc4,V;}OaDkx>Z", 64);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("5MAoSc4,V;}OaDkx>Z", string1);
      
      String string2 = StringUtils.trim("nYehG!Mw5");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("nYehG!Mw5", string2);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Stream<Locale.LanguageRange> stream0 = stack0.parallelStream();
      assertNotNull(stream0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(stack0, hashMap0);
      assertNotNull(list0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) arrayList0);
      assertNotNull(list1);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Locale> list2 = Locale.filter(list0, (Collection<Locale>) linkedList0);
      assertNotNull(list2);
      assertNotSame(list2, list1);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.equals((Object)list1));
      
      String string3 = StringUtils.replaceAll("A.DwS+Ef<T1", "n~", "offset cannot be negative");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("A.DwS+Ef<T1", string3);
      
      String string4 = "}#3U=\\u";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("rZ)K'$2Zj!}'!55*H", string4);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean0 = StringUtils.isNumeric("fzWp8");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = StringUtils.unwrap("ln}?6<^]?5Yoc", "\"tcuf~Dd|l");
      assertNotNull(string0);
      assertEquals("ln}?6<^]?5Yoc", string0);
      
      String string1 = StringUtils.chomp("ln}?6<^]?5Yoc", "ln}?6<^]?5Yoc");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.unwrap("Search and Replace array lengths don't match: ", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string2);
      
      String string3 = StringUtils.removePattern("%Mggiuf$<*LrQS&J_#", "ln}?6<^]?5Yoc");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("%Mggiuf$<*LrQS&J_#", string3);
      
      String string4 = StringUtils.replaceOnce("Locale must not be null", "Search and Replace array lengths don't match: ", (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Locale must not be null", string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("k5,j", "K");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.trim("");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      
      int int0 = StringUtils.getFuzzyDistance("\"tcuf~Dd|l", "ln}?6<^]?5Yoc", locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      short[] shortArray0 = new short[14];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)54;
      shortArray0[7] = (short)54;
      String string0 = StringUtils.defaultString("ikNlSH", "'f[{HKU`Jrg.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("ikNlSH", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "ikNlSH", (CharSequence) "ikNlSH");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBetween("ikNlSH", (String) null, "'f[{HKU`Jrg.apache.commons.lang3.StringUtils");
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "ikNlSH";
      charSequenceArray0[1] = (CharSequence) "ikNlSH";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean1 = hashSet0.add(locale_Category0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(hashSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet0 = EnumSet.copyOf((Collection<Locale.Category>) hashSet0);
      assertNotNull(enumSet0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, enumSet0.size());
      assertTrue(hashSet0.contains(locale_Category0));
      assertTrue(enumSet0.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category1, locale_Category1);
      assertNotNull(enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(1, enumSet1.size());
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(enumSet1.contains(locale_Category0));
      assertTrue(enumSet1.contains(locale_Category1));
      
      EnumSet<Locale.Category> enumSet2 = enumSet1.clone();
      assertNotNull(enumSet2);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(1, enumSet1.size());
      assertEquals(1, enumSet2.size());
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(enumSet2.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(enumSet1.contains(locale_Category0));
      assertTrue(enumSet1.contains(locale_Category1));
      assertFalse(enumSet2.contains(locale_Category0));
      assertTrue(enumSet2.contains(locale_Category1));
      
      Iterator<Locale.Category> iterator0 = enumSet1.iterator();
      assertNotNull(iterator0);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(1, enumSet1.size());
      assertTrue(enumSet1.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(enumSet1.contains(locale_Category0));
      assertTrue(enumSet1.contains(locale_Category1));
      
      String string2 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string2);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(locale_Category1, locale_Category0);
      assertEquals(1, enumSet1.size());
      assertTrue(enumSet1.equals((Object)enumSet2));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertEquals("FORMAT", string2);
      assertFalse(enumSet1.contains(locale_Category0));
      assertTrue(enumSet1.contains(locale_Category1));
      
      String string3 = StringUtils.leftPad((String) null, (int) (short)1);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("g[@Eut0N7}+>q\"tjo?:", "v7-q\"]", "v7-q\"]");
      assertNotNull(string0);
      assertEquals("g[@Eut0N7}+>q\"tjo?:", string0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>(vector0);
      assertNotNull(hashSet0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      String string1 = StringUtils.join((Iterable<?>) hashSet0, "bX:&W&yK[");
      assertNotNull(string1);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "g[@Eut0N7}+>q\"tjo?:", (CharSequence) "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.appendIfMissing("Tz!9o!u6_jlt *PA#", "p{InCombiningDiacriticalMarks}+", stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("Tz!9o!u6_jlt *PA#p{InCombiningDiacriticalMarks}+", string0);
      
      String string1 = StringUtils.center((String) null, 32);
      assertNull(string1);
      
      String string2 = StringUtils.lowerCase((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase((String) null, "dJoQb1*");
      assertNull(string3);
      
      String string4 = StringUtils.wrap((String) null, "A.DwS+Ef<T1");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = '\"';
      charArray0[2] = 'U';
      charArray0[3] = 'o';
      charArray0[4] = 'U';
      charArray0[5] = 'o';
      int int0 = StringUtils.indexOfAny((CharSequence) "Tz!9o!u6_jlt *PA#", charArray0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'o', '\"', 'U', 'o', 'U', 'o'}, charArray0);
      assertEquals(5, int0);
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(int0));
      
      Iterator<Integer> iterator0 = linkedHashSet0.iterator();
      assertNotNull(iterator0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(int0));
      
      String string5 = StringUtils.join(iterator0, "%7&OExn&&Q| +XU7[u");
      assertNotNull(string5);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      assertFalse(linkedHashSet0.contains(int0));
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = StringUtils.chop(";.");
      assertNotNull(string0);
      assertEquals(";", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ";.", (CharSequence) ";.");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "]vP)*V)5KQ`:7>W!");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.lang3.StringUtils";
      stringArray0[1] = "org.apache.commons.lang3.StringUtils";
      stringArray0[3] = "org.apache.commons.lang3.StringUtils";
      stringArray0[4] = "r6G%~=rCE++g$VF{HuM";
      stringArray0[5] = "org.apache.commons.lang3.StringUtils";
      stringArray0[6] = "org.apache.commons.lang3.StringUtils";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "maxWith cannot be negative");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.removeEnd(", Length: /r-\"w=sW%t~or%qa?L", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertEquals(", Length: /r-\"w=sW%t~or%qa?L", string2);
      
      String string3 = StringUtils.abbreviateMiddle("Hh<", "_^i", 31);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Hh<", string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "A.DwS+Ef<T1";
      String string0 = StringUtils.center(" vs ", 2427, "gagKO')RJSdLAaLEb");
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("A.DwS+Ef<T1", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.prependIfMissing(" vs ", "gagKO')RJSdLAaLEb", charSequenceArray0);
      assertNotNull(string1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("gagKO')RJSdLAaLEb vs ", string1);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "ArePr");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("ArePr");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("Exception cloning Cloneable type ", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("ArePr");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray1);
      
      String string2 = StringUtils.substringBefore("Exception cloning Cloneable type ", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("Exception cloning Cloneable type ", string2);
      
      String string3 = StringUtils.center("}?6<^]?5Yoc", 239);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("                                                                                                                 }?6<^]?5Yoc                                                                                                                  ", string3);
      
      String string4 = StringUtils.stripEnd("                                                                                                                 }?6<^]?5Yoc                                                                                                                  ", "4[u-`Sbi;!5#c7`%d");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("                                                                                                                 }?6<^]?5Yoc                                                                                                                  ", string4);
      
      String string5 = StringUtils.unwrap("org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", 'I');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", string5);
      
      String string6 = StringUtils.substringBetween("0D<>aYZg9,DyqKJ", "}?6<^]?5Yoc", "org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils");
      assertNull(string6);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "}#3U=", (CharSequence) null, (-3920));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripToEmpty("hSsnR3");
      assertNotNull(string0);
      assertEquals("hSsnR3", string0);
      
      String string1 = "\\u";
      String string2 = StringUtils.chomp("}#3U=", string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("}#3U=", string2);
      
      String string3 = StringUtils.swapCase("qSN#]L|}5qZh");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Qsn#]l|}5QzH", string3);
      
      String string4 = StringUtils.unwrap("ch", "}#3U=");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("ch", string4);
      
      String string5 = StringUtils.removePattern(")h;;-]2Z", (String) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals(")h;;-]2Z", string5);
      
      String string6 = StringUtils.replaceOnce("VSP1]qjH", "hSsnR3", "}#3U=");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("VSP1]qjH", string6);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Y,xT~f0k&AB4z,}", "h||DNr");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string7 = StringUtils.trim("$L[^lZb@RWK|H]7");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("$L[^lZb@RWK|H]7", string7);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      
      int int1 = StringUtils.getFuzzyDistance("VSP1]qjH", "Locale must noA be null", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "7r(Pn6k/(", (String) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceChars(" ", "Z5", "Z5");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean1 = StringUtils.containsWhitespace("7r(Pn6k/(");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.reverseDelimited("b|A8 9O", 'H');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("b|A8 9O", string1);
      
      String string2 = StringUtils.center("Z5", 493);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("                                                                                                                                                                                                                                                     Z5                                                                                                                                                                                                                                                     ", string2);
      
      double[] doubleArray0 = new double[0];
      String string3 = StringUtils.join(doubleArray0, '7');
      assertNotNull(string3);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.stripEnd("The type must not be null", "qsnTU2@`'r?");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("The type must not be null", string4);
      
      String string5 = StringUtils.leftPad((String) null, 100, '+');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = StringUtils.substring("", 49, 4);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("org.apache.commons.lang3.LocaleUtils", 100, "org.apache.commons.lang3.Charsets");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.Charsetorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.Charset", string1);
      
      String string2 = StringUtils.substring("", 1722);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = "Object varargs must not be null";
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "Object varargs must not be null", (-2835), (-2));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2835
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.appendIfMissing("Tz!9o!u6_jlt *PA#", (CharSequence) null, (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("Tz!9o!u6_jlt *PA#", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("Tz!9o!u6_jlt *PA#", "dJoQb1*");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Tz!9o!u6_jlt *PA#", string1);
      
      boolean boolean0 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.rightPad("A.DwS+Ef<T1", (-4), "Cannot store ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("A.DwS+Ef<T1", string2);
      
      String string3 = StringUtils.EMPTY;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.substring("Cannot store ", (-4), (-4));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(string0));
      
      Stack stack1 = (Stack)stack0.clone();
      assertNotNull(stack1);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertFalse(stack0.contains(string0));
      
      boolean boolean0 = stack0.add("");
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      assertTrue(stack0.contains(string0));
      
      String string1 = StringUtils.join((List<?>) stack0, 'p', 13, 13);
      assertNotNull(string1);
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertTrue(stack0.contains(string0));
      
      String string2 = StringUtils.chop("1dI+4lPi8S");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("1dI+4lPi8", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "1dI+4lPi8";
      charSequenceArray0[2] = (CharSequence) "1dI+4lPi8";
      charSequenceArray0[3] = (CharSequence) "";
      String string3 = StringUtils.prependIfMissing("", "]cw?TE+'J)2SP?<", charSequenceArray0);
      assertNotNull(string3);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "1dI+4lPi8S", (CharSequence) "]cw?TE+'J)2SP?<", 13);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("", 32, 'r');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", string1);
      
      String string2 = StringUtils.abbreviateMiddle("~gzeX6RG*]H~/~x;", "", 32);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("~gzeX6RG*]H~/~x;", string2);
      
      String string3 = StringUtils.EMPTY;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", (CharSequence) "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = 'r';
      charArray0[4] = 'r';
      charArray0[5] = 'r';
      charArray0[6] = 'r';
      charArray0[7] = 'Z';
      String string4 = StringUtils.join(charArray0, '8', 225, 2);
      assertNotNull(string4);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'r', 'r', 'r', 'r', 'r', 'r', 'r', 'Z'}, charArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      boolean boolean2 = StringUtils.isAlpha("");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.reverseDelimited("", 'r');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String string0 = StringUtils.wrap("clone", 'p');
      assertNotNull(string0);
      assertEquals("pclonep", string0);
      
      String string1 = StringUtils.abbreviateMiddle("pclonep", (String) null, 'p');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("pclonep", string1);
      
      int int0 = StringUtils.compare("(cFQx", "@PP", false);
      assertEquals((-24), int0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.leftPad("A.DwS+Ef<T1", 46, "5*(7.+Jt8(");
      assertNotNull(string0);
      assertEquals("5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7.A.DwS+Ef<T1", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1";
      boolean boolean0 = arrayList0.add((String) null);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      assertFalse(arrayList0.contains("5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1"));
      
      charSequenceArray0[2] = (CharSequence) "5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1";
      charSequenceArray0[3] = (CharSequence) "5*(7.+Jt8(";
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("5*(7.+Jt8("));
      
      boolean boolean1 = priorityQueue0.add(arrayList0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(arrayList0.contains("5*(7.+Jt8("));
      assertFalse(priorityQueue0.contains("5*(7.+Jt8("));
      
      String string1 = StringUtils.join((Iterable<?>) arrayList0, 'p');
      assertNotNull(string1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertFalse(arrayList0.contains("5*(7.+Jt8("));
      
      String string2 = StringUtils.abbreviate("5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1", 46, 46);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("5*(7.+Jt8(5*(7.+Jt8(5*(7.+Jt8(5*(7A.DwS+Ef<T1", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 46, 2522);
      assertEquals((-1), int0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.substring((String) null, 1276);
      assertNull(string1);
      
      String string2 = StringUtils.abbreviate((String) null, 1276);
      assertNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("", (String) null);
      assertNotNull(string3);
      assertEquals("", string3);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(""));
      
      boolean boolean0 = stack0.add((Object) null);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertTrue(boolean0);
      assertFalse(stack0.contains(""));
      
      String string4 = StringUtils.join((List<?>) stack0, '!', 1276, 889);
      assertNotNull(string4);
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[null]", stack0.toString());
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertFalse(stack0.contains(""));
      
      char[] charArray0 = new char[6];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = '!';
      charArray0[3] = '!';
      charArray0[4] = ']';
      charArray0[5] = '!';
      String string5 = StringUtils.join(charArray0, '!', 1276, 6);
      assertNotNull(string5);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'!', '!', '!', '!', ']', '!'}, charArray0);
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.compareIgnoreCase("", "", false);
      assertEquals(0, int0);
      
      String string6 = StringUtils.abbreviate("QF3iW", 889);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("QF3iW", string6);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.defaultString("(OI", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(OI", string1);
      
      String string2 = StringUtils.wrap("JE", "je");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("jeJEje", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "je", (CharSequence) "(OI");
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "(OI", (CharSequence) "(OI", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.uncapitalize("y:l5XfKP >DNHR/hV");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("y:l5XfKP >DNHR/hV", string3);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "jeJEje", 704, 0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.repeat("je", 7428);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.substringBefore(string4, "Search and Replace array lengths don't match: ");
      assertNotNull(string5);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      int int3 = StringUtils.compare("Minimum abbreviation width with offset is %d", "nz?7D(!gu", true);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-33), int3);
      
      String string6 = StringUtils.replaceIgnoreCase("y:l5XfKP >DNHR/hV", "y:l5XfKP >DNHR/hV", "JE", 4673);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("JE", string6);
      
      String string7 = StringUtils.replaceIgnoreCase("(OI", "(OI", "je");
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertEquals("je", string7);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = StringUtils.containsIgnoreCase("A.DwS+Ef<T1", "A.DwS+Ef<T1");
      assertTrue(boolean0);
      
      String string0 = StringUtils.trim("nYehG!Mw5");
      assertNotNull(string0);
      assertEquals("nYehG!Mw5", string0);
      
      String string1 = "maxWith cannot be negative";
      String string2 = StringUtils.repeat("maxWith cannot be negative", 22);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative", string2);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Stream<Locale.LanguageRange> stream0 = stack0.parallelStream();
      assertNotNull(stream0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("A.DwS+Ef<T1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=a.dws+ef<t1
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.defaultString("(OI", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(OI", string1);
      
      String string2 = StringUtils.replaceOnce("Strings must not be null", "(OI", "je");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Strings must not be null", string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("Strings must not be null", "JE", (CharSequence[]) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("JEStrings must not be null", string3);
      
      boolean boolean0 = StringUtils.isBlank("(OI");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = StringUtils.removePattern("vP?,", "vP?,");
      assertNotNull(string0);
      assertEquals("vP?,", string0);
      
      char char0 = 'H';
      String string1 = StringUtils.wrapIfMissing("vP?,", 'H');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("HvP?,H", string1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      ByteBuffer byteBuffer0 = null;
      // Undeclared exception!
      try { 
        charset0.decode((ByteBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = StringUtils.substringAfter("}#3U=", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'u');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("}#3U=");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'a';
      intArray0[1] = (-314);
      intArray0[2] = 0;
      intArray0[3] = (int) 'u';
      intArray0[4] = 0;
      intArray0[5] = 32767;
      intArray0[6] = (int) 'a';
      String string2 = StringUtils.abbreviate("", "", 0, 117);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "}#3U=", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      
      String string3 = StringUtils.toRootLowerCase("VSP");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("vsp", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("/r-\"w=sW%t~or%qa?L", "lijk`##UOd.HD,");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("VSP"));
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, 'W', 0, 21);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 21
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = StringUtils.leftPad(",rs", (-618), 'O');
      assertNotNull(string0);
      assertEquals(",rs", string0);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("Search and Replace array lengths don't match: ", (String) null, false);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.wrapIfMissing("D", "D");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("D", string2);
      
      Object[] objectArray0 = new Object[0];
      String string3 = StringUtils.join(objectArray0);
      assertNotNull(string3);
      assertEquals(0, objectArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "L4**c>4|Pt[go4D8", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.strip("", (String) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String string6 = StringUtils.wrap("Object varargs must not be null", "8quHh!oQ<L9J$P");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals("8quHh!oQ<L9J$PObject varargs must not be null8quHh!oQ<L9J$P", string6);
      
      boolean boolean0 = StringUtils.isEmpty("8quHh!oQ<L9J$PObject varargs must not be null8quHh!oQ<L9J$P");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chop("Exceptioncloning Clone null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Exceptioncloning Clone nul", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "Exceptioncloning Clone nul");
      assertNull(stringArray0);
      
      String string2 = StringUtils.wrapIfMissing((String) null, "Exceptioncloning Clone null");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "]vP)*V)5KQ`:7>W!");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string2 = StringUtils.stripToNull("h");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("h", string2);
      
      charSequenceArray0[3] = (CharSequence) "h";
      String string3 = StringUtils.removeStartIgnoreCase("h", "h");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string4 = StringUtils.trim("h");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("h", string4);
      
      charSequenceArray0[5] = (CharSequence) "h";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h";
      stringArray0[1] = "org.apache.commons.lang3.StringUtils";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray1.length);
      assertEquals(2, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string5 = StringUtils.removeEnd("org.apache.commons.lang3.RegExUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.RegExUtils", string5);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "org.apache.commons.lang3.RegExUtils", (-1));
      assertNull(stringArray2);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.FORMAT;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category6;
      Locale.Category locale_Category7 = Locale.Category.DISPLAY;
      locale_CategoryArray0[7] = locale_Category7;
      Locale.Category locale_Category8 = Locale.Category.DISPLAY;
      locale_CategoryArray0[8] = locale_Category8;
      String string6 = StringUtils.join(locale_CategoryArray0);
      assertNotNull(string6);
      assertEquals(9, locale_CategoryArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("DISPLAYFORMATDISPLAYFORMATDISPLAYFORMATDISPLAYDISPLAYDISPLAY", string6);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      float[] floatArray0 = new float[1];
      String string0 = StringUtils.difference("/r-\"w=sW%t~or%qa?L", "/r-\"w=sW%t~or%qa?L");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeEnd("jR", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("jR", string1);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{}", "^R/Q[", 100);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "7r(Pn6k/(", "{}");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("maxWith cannot be negative", "?1e!XO!75XZ(G");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.stripToNull("LdR6y-*u8LM");
      assertNotNull(string0);
      assertEquals("LdR6y-*u8LM", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("?1e!XO!75XZ(G", "{}");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("?1e!XO!75XZ(G", string1);
      
      String string2 = StringUtils.trim("LdR6y-*u8LM");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("LdR6y-*u8LM", string2);
      
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "LdR6y-*u8LM");
      assertNotNull(stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.removeEnd("Xw+!rjJ.s+E`G`m", "maxWith cannot be negative");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Xw+!rjJ.s+E`G`m", string3);
      
      String string4 = StringUtils.abbreviateMiddle("LdR6y-*u8LM", "?1e!XO!75XZ(G", 491);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("LdR6y-*u8LM", string4);
      
      boolean boolean2 = StringUtils.isNumeric("?1e!XO!75XZ(G");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAsciiPrintable("Xw+!rjJ.s+E`G`m");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 92;
      floatArray0[1] = (float) '<';
      floatArray0[6] = (float) 92;
      floatArray0[3] = (float) 92;
      floatArray0[4] = (float) 84;
      floatArray0[5] = (float) '<';
      floatArray0[6] = (float) 84;
      String string0 = StringUtils.join(floatArray0, '<', 4849, 84);
      assertNotNull(string0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {92.0F, 60.0F, 0.0F, 92.0F, 84.0F, 60.0F, 84.0F}, floatArray0, 0.01F);
      assertEquals("", string0);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast("org.apache.commons.lang3.ArrayUtils", (String) null);
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "]vP)*V)5KQ`:7>W!");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string2 = StringUtils.stripToNull("h");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("h", string2);
      
      charSequenceArray0[3] = (CharSequence) "h";
      String string3 = StringUtils.replaceOnce("org.apache.commons.lang3.StringUtils", "maxWith cannot be negative", "h");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)charSequence0));
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      
      String string4 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", 'p');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertEquals("porg.apache.commons.lang3.StringUtilsp", string4);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "nDk`'zgL)~U", (CharSequence) null, (-467));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      
      String string6 = StringUtils.substringAfterLast("v)-Pp}MvL'o", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String[] stringArray0 = new String[8];
      String string0 = "&)";
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'S', 49, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 49
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = "=2tVj5xn-,hAP*+$Q[y";
      String string1 = "{{|V2#fP)pz\"\\QDH^^";
      String string2 = StringUtils.removeStartIgnoreCase("=2tVj5xn-,hAP*+$Q[y", "{{|V2#fP)pz\"QDH^^");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("=2tVj5xn-,hAP*+$Q[y", string2);
      
      String string3 = "v";
      String string4 = "SZ5S?+yw\\<tWDa";
      String string5 = StringUtils.trim("SZ5S?+yw<tWDa");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("SZ5S?+yw<tWDa", string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      char[] charArray0 = new char[8];
      charArray0[0] = '(';
      charArray0[1] = '-';
      charArray0[2] = '0';
      charArray0[3] = 'D';
      charArray0[4] = ']';
      charArray0[4] = '<';
      charArray0[6] = '1';
      charArray0[7] = '/';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '/', (-1539), 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1539
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("=2tVj5xn-,hAP*+$Q[y", "", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("=2tVj5xn-,hAP*+$Q[y", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("=2tVj5xn-,hAP*+$Q[y", "", (-999));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "?1e!XO!75XZ(G");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("=2tVj5xn-,hAP*+$Q[y", "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", 'p');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("porg.apache.commons.lang3.StringUtilsp", string1);
      
      String string2 = StringUtils.stripToNull("=2tVj5xn-,hAP*+$Q[y");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("=2tVj5xn-,hAP*+$Q[y", string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("L4**c>4|Pt[go4D8", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("L4**c>4|Pt[go4D8", string3);
      
      String string4 = StringUtils.trim(", Length: ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(", Length:", string4);
      
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "?1e!XO!75XZ(G");
      assertNotNull(stringArray2);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string5 = StringUtils.removeEnd("nDk`'zgL)~U", "L4**c>4|Pt[go4D8");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("nDk`'zgL)~U", string5);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "L4**c>4|Pt[go4D8");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.substring(" vs ", (-999), (-999));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'p';
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'p', (-999), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -999
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = StringUtils.removeAll("ch", "ch");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compare("ho{Nrgt/+cVPx]mx", "ch", true);
      assertEquals(5, int0);
      
      String string1 = StringUtils.replaceChars("", '=', '=');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "ch", 5);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "ho{Nrgt/+cVPx]mx", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "Q]O7Q h=r(IQAfERq");
      assertNotNull(string2);
      assertEquals(0, stringArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Q]O7Q h=r(IQAfERq", (CharSequence) "ho{Nrgt/+cVPx]mx");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string3 = StringUtils.stripToEmpty("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.removeAll("Q]O7Q h=r(IQAfERq", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Q]O7Q h=r(IQAfERq", string4);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "Q]O7Q h=r(IQAfERq", "o+QC8wz+");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string5 = StringUtils.substring("", 32767, (-5));
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      
      boolean boolean4 = StringUtils.containsAnyIgnoreCase("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String string6 = StringUtils.center("", (-6400), 'y');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-43);
      byteArray0[3] = (byte)43;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "ho{Nrgt/+cVPx]mx");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ho{Nrgt/+cVPx]mx
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("1]qjH, Length: ");
      assertNotNull(string0);
      assertEquals("1]qjH, Length:", string0);
      
      String string1 = StringUtils.rightPad("1]qjH, Length:", 272);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1]qjH, Length:                                                                                                                                                                                                                                                                  ", string1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("1]qjH, Length:"));
      
      boolean boolean0 = linkedList0.add("7;(\"|Mu}{*.c\u0007,|c");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("7;(\"|Mu}{*.c\u0007,|c"));
      assertFalse(linkedList0.contains("1]qjH, Length:"));
      
      boolean boolean1 = linkedList0.add("...");
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains("7;(\"|Mu}{*.c\u0007,|c"));
      assertFalse(linkedList0.contains("1]qjH, Length: "));
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(2, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(linkedList0.contains("7;(\"|Mu}{*.c\u0007,|c"));
      assertFalse(linkedList0.contains("1]qjH, Length: "));
      
      boolean boolean2 = linkedList0.add("7;(\"|Mu}{*.c\u0007,|c");
      assertEquals(3, linkedList0.size());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(linkedList0.contains("7;(\"|Mu}{*.c\u0007,|c"));
      assertFalse(linkedList0.contains("1]qjH, Length: "));
      
      Object[] objectArray0 = linkedList0.toArray();
      assertNotNull(objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(3, linkedList0.size());
      assertTrue(linkedList0.contains("7;(\"|Mu}{*.c\u0007,|c"));
      assertFalse(linkedList0.contains("1]qjH, Length: "));
      
      String string2 = StringUtils.join((List<?>) linkedList0, 'e', 272, (-217));
      assertNotNull(string2);
      assertEquals(3, linkedList0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertTrue(linkedList0.contains("7;(\"|Mu}{*.c\u0007,|c"));
      assertFalse(linkedList0.contains("1]qjH, Length: "));
      
      String string3 = StringUtils.removeIgnoreCase("", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "1]qjH, Length: ", (-217));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.ordinalIndexOf("1]qjH, Length:", "1]qjH, Length:", 272);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.defaultString("T7|Y@");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("T7|Y@", string4);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "T7|Y@", (CharSequence) "1]qjH, Length: ");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string5 = StringUtils.trimToEmpty("...");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("...", string5);
      
      String string6 = StringUtils.replaceChars("7;(\"|Mu}{*.c\u0007,|c", (String) null, "");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("7;(\"|Mu}{*.c\u0007,|c", string6);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "|";
      charSequenceArray0[1] = (CharSequence) "5*(7.+Jlt8";
      charSequenceArray0[2] = (CharSequence) "d[hga~K.mF";
      charSequenceArray0[3] = (CharSequence) "5*(7.+Jlt8";
      charSequenceArray0[4] = (CharSequence) "|";
      charSequenceArray0[5] = (CharSequence) "d[hga~K.mF";
      charSequenceArray0[6] = (CharSequence) "5*(7.+Jlt8";
      String string0 = StringUtils.prependIfMissingIgnoreCase("d[hga~K.mF", "5*(7.+Jlt8", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals("d[hga~K.mF", string0);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "s!`If]2QR9";
      stringArray0[2] = "s!`If]2QR9";
      String string0 = StringUtils.strip("s!`If]2QR9");
      assertNotNull(string0);
      assertEquals("s!`If]2QR9", string0);
      
      String string1 = StringUtils.defaultString("f0p=}]=guLAv^vQ", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("f0p=}]=guLAv^vQ", string1);
      
      int int0 = StringUtils.compareIgnoreCase("Locale must not be null", "Locale must not be null");
      assertEquals(0, int0);
      
      String string2 = StringUtils.leftPad("5*(7.+Jt8(", 0, "Locale must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("5*(7.+Jt8(", string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase("A.DwS+Ef<T1", "5*(7.+Jt8(", stringArray0);
      assertNotNull(string3);
      assertEquals(3, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("5*(7.+Jt8(A.DwS+Ef<T1", string3);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("Cannot clone Cloneable type ");
      assertNotNull(string0);
      assertEquals("cannot clone cloneable type ", string0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("Cannot clone Cloneable type "));
      
      String string1 = StringUtils.join((List<?>) stack0, 'p', 13, 13);
      assertNotNull(string1);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertFalse(stack0.contains("Cannot clone Cloneable type "));
      
      String string2 = StringUtils.chop("1dI+4lPi8S");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("1dI+4lPi8", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (-823);
      floatArray0[2] = (float) (-997);
      floatArray0[3] = (float) 'p';
      floatArray0[4] = (float) (-823);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) 13;
      floatArray0[7] = (float) (-997);
      String string3 = StringUtils.join(floatArray0, 'p', 2926, 13);
      assertNotNull(string3);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-823.0F), (-997.0F), 112.0F, (-823.0F), 0.0F, 13.0F, (-997.0F)}, floatArray0, 0.01F);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "1dI+4lPi8";
      String string4 = StringUtils.trim("1dI+4lPi8S");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("1dI+4lPi8S", string4);
      
      charSequenceArray0[2] = (CharSequence) "1dI+4lPi8S";
      charSequenceArray0[3] = (CharSequence) "cannot clone cloneable type ";
      String string5 = StringUtils.prependIfMissing("", "]cw?TE+'J)2SP?<", charSequenceArray0);
      assertNotNull(string5);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.swapCase(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\U", string1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-286L);
      longArray0[1] = (-2419L);
      longArray0[2] = (-4492L);
      String string2 = StringUtils.join(longArray0, '\\');
      assertNotNull(string2);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-286L), (-2419L), (-4492L)}, longArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-286\\-2419\\-4492", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "-286-2419-4492", 0, (-2304));
      assertNotNull(string3);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceAll("-286-2419-4492", "", "U");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("U-U2U8U6U-U2U4U1U9U-U4U4U9U2U", string4);
      
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[4] = '\\';
      charArray0[5] = '\\';
      charArray0[6] = '\\';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "U", charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'\\', '\\', '\\', '\\', '\\', '\\', '\\'}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.center("", (-1108));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      
      ByteBuffer byteBuffer0 = charset0.encode("Threshold must not be negative");
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(30, byteBuffer0.limit());
      assertEquals(30, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=30 cap=33]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(33, byteBuffer0.capacity());
      
      byte[] byteArray0 = StringUtils.getBytes("'fL{[xV^C3e]", charset0);
      assertNotNull(byteArray0);
      assertEquals(12, byteArray0.length);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      String string0 = StringUtils.rightPad("Threshold must not be negative", 22);
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "'fL{[xV^C3e]";
      charSequenceArray0[1] = (CharSequence) "'fL{[xV^C3e]";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      Locale locale0 = new Locale("org.apache.commons.lang3.StringUtils74", "Threshold must not be negative");
      assertNotNull(locale0);
      assertEquals("org.apache.commons.lang3.stringutils74", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("THRESHOLD MUST NOT BE NEGATIVE", locale0.getCountry());
      assertEquals("org.apache.commons.lang3.stringutils74_THRESHOLD MUST NOT BE NEGATIVE", locale0.toString());
      
      int int0 = StringUtils.getFuzzyDistance(charSequenceArray0[0], charSequenceArray0[0], locale0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("org.apache.commons.lang3.stringutils74", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("THRESHOLD MUST NOT BE NEGATIVE", locale0.getCountry());
      assertEquals("org.apache.commons.lang3.stringutils74_THRESHOLD MUST NOT BE NEGATIVE", locale0.toString());
      assertEquals(34, int0);
      
      String string1 = StringUtils.substringBefore("'fL{[xV^C3e]", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("'fL{[xV^C3e]", string1);
      
      boolean boolean1 = StringUtils.endsWithAny("'fL{[xV^C3e]", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "|,");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("|,");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("Exception cloning Cloneable type ", "Exception cloning Cloneable type ");
      assertNotNull(string1);
      assertEquals("Exception cloning Cloneable type ", string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("|,");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) null, "Exception cloning Cloneable type ");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("'F%@(", (String) null);
      assertNotNull(string0);
      assertEquals("'F%@(", string0);
      
      String string1 = StringUtils.stripEnd("U#/]GwFXl2Z]wz", "|I.");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("U#/]GwFXl2Z]wz", string1);
      
      String string2 = StringUtils.remove("'F%@(", "^");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("'F%@(", string2);
      
      String string3 = StringUtils.removeIgnoreCase("^", "dv~(e+Dm_r1!B%x_dBF");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("^", string3);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)104;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte)15;
      String string4 = StringUtils.join(byteArray0, 'C', (int) (byte)99, (-889));
      assertNotNull(string4);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)104, (byte)99, (byte)15}, byteArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.uncapitalize("^");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("^", string5);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("|,");
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("Exception cloning Cloneable type ", "Exception cloning Cloneable type ");
      assertNotNull(string0);
      assertEquals("Exception cloning Cloneable type ", string0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("|,");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.unwrap("|,", '\u001A');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("|,", string1);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)5;
      byteArray0[0] = (byte) (-118);
      byteArray0[3] = (byte)115;
      byteArray0[2] = (byte) (-30);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[7] = true;
      String string0 = StringUtils.join(booleanArray0, '.', (int) (byte)0, (int) (byte)5);
      assertNotNull(string0);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, true, false}, booleanArray0));
      assertEquals("false.false.false.false.false", string0);
      
      String string1 = StringUtils.removeIgnoreCase("9_xgH,aR8^yOy2_)U#|", ", Length: /r-\"w=sW%t~or%qa?L");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("9_xgH,aR8^yOy2_)U#|", string1);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.swapCase(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\U", string1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-286L);
      longArray0[1] = (-2419L);
      longArray0[2] = (-4492L);
      String string2 = StringUtils.join(longArray0, '\\');
      assertNotNull(string2);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-286L), (-2419L), (-4492L)}, longArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-286\\-2419\\-4492", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "-286-2419-4492", 0, (-2316));
      assertNotNull(string3);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceAll("-286-2419-4492", "", "U");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("U-U2U8U6U-U2U4U1U9U-U4U4U9U2U", string4);
      
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = StringUtils.removeAll("ch", "ch");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compare("ho{Nrgt/+cVPx]mx", "ch", true);
      assertEquals(5, int0);
      
      String string1 = StringUtils.replaceChars("", '=', '=');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "ch", 5);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "ho{Nrgt/+cVPx]mx", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "Q]O7Q h=r(IQAfERq");
      assertNotNull(string2);
      assertEquals(0, stringArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Q]O7Q h=r(IQAfERq", (CharSequence) "ho{Nrgt/+cVPx]mx");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.replaceOnce("FLsUo3:Cd6qH)m4", "", "ch");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("FLsUo3:Cd6qH)m4", string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("Q]O7Q h=r(IQAfERq", "S[*<feiq6.Y");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Q]O7Q h=r(IQAfERq", string4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", 5);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "]vP)*V)5KQ`:7>W!");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The Array must not be null", "]vP)*V)5KQ`:7>W!");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.swapCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ORG.APACHE.COMMONS.LANG3.sTRINGuTILS", string2);
      
      boolean boolean0 = StringUtils.equals(charSequenceArray0[0], (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.right("org.apache.commons.lang3.StringUtils", (-1091));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.endsWith("org.apache.commons.lang3.StringUtils", "ORG.APACHE.COMMONS.LANG3.sTRINGuTILS");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.unwrap("org.apache.commons.lang3.StringUtils", '\"');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(":2Z:W;3X=r[gy|fvx");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '}';
      charArray0[2] = '\"';
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[2], charArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\"', '}', '\"'}, charArray0);
      assertEquals(0, int0);
      
      String string5 = StringUtils.center("yqJQ-hm;$I", 0, "org.apache.commons.lang3.StringUtils");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("yqJQ-hm;$I", string5);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      String string0 = StringUtils.mid(" vOORzZKQ=O=94P", (byte) (-112), (byte) (-112));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = StringUtils.mid("V2?{I", 3742, 3742);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      int int0 = StringUtils.compare(" vs ", " vs ");
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints(" vs ");
      assertNotNull(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {32, 118, 115, 32}, intArray0);
      
      String string0 = StringUtils.mid(" vs ", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(" vs ", " vs ", " vs ");
      assertNull(stringArray0);
      
      int int0 = StringUtils.compare(" vs ", " vs ");
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints(" vs ");
      assertNotNull(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {32, 118, 115, 32}, intArray0);
      
      String string0 = StringUtils.mid("\"jJVnmvr1>PG\"jJVnmvr1>PG", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      boolean boolean0 = StringUtils.isWhitespace("<4C)X9[Db{R");
      assertFalse(boolean0);
      
      String string0 = StringUtils.mid("}?6<^]?5Yoc", 1467, 1291);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = new String[8];
      boolean boolean0 = StringUtils.endsWithAny("maxWith cannot be negative", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWith("maxWith cannot be negative", ".[jA)");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsWhitespace("maxWith cannot be negative");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string0 = StringUtils.mid("HbO:nd&z+Ix=l}OaH", 38, 3088);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfter("N4}$b\u0005$V<~ACh2", 38);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.reverse("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("slitUgnirtS.3gnal.snommoc.ehcapa.gro", string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, '\\');
      assertNotNull(string1);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\\\\\\\\\\\\\", string1);
      
      String string2 = StringUtils.substringAfter("/r-\"w=sW%t~or%qa?L", 2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "slitUgnirtS.3gnal.snommoc.ehcapa.gro", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertEquals(34, int0);
      
      String string3 = StringUtils.repeat("/r-\"w=sW%t~or%qa?L", "slitUgnirtS.3gnal.snommoc.ehcapa.gro", (int) '\\');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.countMatches((CharSequence) "/r-\"w=sW%t~or%qa?L", '\"');
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "/r-\"w=sW%t~or%qa?L", 1, 1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = StringUtils.rotate("LNuk>Qz|sjw", 2109);
      assertNotNull(string0);
      assertEquals("k>Qz|sjwLNu", string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("L", "Arr", " has no clone methodorg.apache.commons.lang3.ArrayUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L", string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "LNuk>Qz|sjw", (CharSequence) "L");
      assertEquals(1, int0);
      
      int int1 = 263;
      String string2 = StringUtils.substringAfter("\r", "k>Qz|sjwLNu");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int2 = StringUtils.countMatches((CharSequence) "LNuk>Qz|sjw", 'u');
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      boolean boolean1 = StringUtils.isAllLowerCase("L");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("\r");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.stripToEmpty("k>Qz|sjwLNu");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("k>Qz|sjwLNu", string3);
      
      PriorityQueue<Object> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Object>((-2417));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("1]qjH", "1]qjH");
      assertNotNull(string0);
      assertEquals("1]qjH", string0);
      
      String string1 = StringUtils.reverse(" is not in the range '0' - '9'");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("'9' - '0' egnar eht ni ton si ", string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'Z';
      charArray0[1] = 'v';
      charArray0[2] = 'd';
      charArray0[3] = ')';
      String string2 = StringUtils.valueOf(charArray0);
      assertNotNull(string2);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'Z', 'v', 'd', ')'}, charArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Zvd)", string2);
      
      String string3 = StringUtils.wrapIfMissing("VSP", "1]qjH");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("1]qjHVSP1]qjH", string3);
      
      String string4 = StringUtils.uncapitalize("VSP");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("vSP", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "vSP";
      charSequenceArray0[1] = (CharSequence) "vSP";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.StringUtils";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.swapCase("1]qjHVSP1]qjH");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("1]QJhvsp1]QJh", string5);
      
      boolean boolean1 = StringUtils.isNotEmpty(charSequenceArray0[1]);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1779.29);
      doubleArray0[1] = 0.7;
      doubleArray0[2] = (-444.12108741008);
      doubleArray0[3] = (-3014.555222451508);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 888.0;
      String string0 = StringUtils.join(doubleArray0, 'b', 72, 72);
      assertNotNull(string0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1779.29), 0.7, (-444.12108741008), (-3014.555222451508), (-1.0), 888.0}, doubleArray0, 0.01);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 116);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "Threshold must not be negative", (-1397));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Threshold must not be negative", (CharSequence) "Threshold must not be negative", 13);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.uncapitalize("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceChars("V0l^bAW1JZUc kw", "", "c");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("V0l^bAW1JZUc kw", string2);
      
      boolean boolean0 = StringUtils.isAlpha("V0l^bAW1JZUc kw");
      assertFalse(boolean0);
      
      String string3 = StringUtils.wrap("\tY}f14~", 'Y');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Y\tY}f14~Y", string3);
      
      String string4 = StringUtils.defaultString("5UMPHa91aP}JN5O%", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("5UMPHa91aP}JN5O%", string4);
      
      int int2 = StringUtils.lastIndexOfAny("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean1 = StringUtils.isBlank("V0l^bAW1JZUc kw");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = StringUtils.substringAfter(" has no clone method", 64);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string1 = "fzWp8";
      String string2 = StringUtils.substring("fzWp8", 14, 48);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfterLast("\n", " has no clone method");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) " has no clone method", "5MAoSc4,V;}OaDkx>Z");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.unwrap("", "oH7rE.jYCOjXjv");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("", "");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string5 = StringUtils.trim("nYehG!Mw5");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("nYehG!Mw5", string5);
      
      String string6 = "offset cannot be negative";
      String string7 = StringUtils.repeat("", 22);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertEquals("", string7);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Stream<Locale.LanguageRange> stream0 = stack0.parallelStream();
      assertNotNull(stream0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange(" has no clone method");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range= has no clone method
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = StringUtils.removeAll("ch", "ch");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.uncapitalize("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.repeat("", "", 39);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.uncapitalize("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.repeat("L", 12);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("LLLLLLLLLLLL", string4);
      
      String string5 = StringUtils.substringBefore((String) null, "}?6<^]?5Yoc");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.rotate("LNuk>Qz|sjw", 2109);
      assertNotNull(string0);
      assertEquals("k>Qz|sjwLNu", string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("L", "Arr", " has no clone methodorg.apache.commons.lang3.ArrayUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L", string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "LNuk>Qz|sjw", (CharSequence) "L");
      assertEquals(1, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) " has no clone methodorg.apache.commons.lang3.ArrayUtils", (CharSequence) "L", 263);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.stripToEmpty("org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.StringUtils", string2);
      
      String string3 = StringUtils.strip("L");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("L", string3);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("k>Qz|sjwLNu", "qSN#]L|}5qZh", "L");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("k>Qz|sjwLNu", string4);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-2);
      byteArray0[3] = (byte)31;
      byteArray0[4] = (byte)103;
      byteArray0[5] = (byte) (-42);
      String string5 = StringUtils.join(byteArray0, 'V', 30, 1);
      assertNotNull(string5);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-10), (byte)8, (byte) (-2), (byte)31, (byte)103, (byte) (-42)}, byteArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      String string6 = StringUtils.difference("Jv&`_a", "...");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("...", string6);
      
      boolean boolean1 = StringUtils.isNumericSpace(" has no clone methodorg.apache.commons.lang3.ArrayUtils");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "LNuk>Qz|sjw";
      objectArray0[1] = (Object) (byte)103;
      objectArray0[2] = (Object) "";
      String string7 = StringUtils.joinWith("Strings must not be null", objectArray0);
      assertNotNull(string7);
      assertEquals(3, objectArray0.length);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertEquals("LNuk>Qz|sjwStrings must not be null103Strings must not be null", string7);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(" vs ", " vs ", " vs ");
      assertNull(stringArray0);
      
      int int0 = StringUtils.compare(" vs ", " vs ");
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints(" vs ");
      assertNotNull(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {32, 118, 115, 32}, intArray0);
      
      String string0 = StringUtils.mid(" vs ", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) " vs ", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) " vs ";
      boolean boolean0 = StringUtils.isWhitespace(" vs ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceChars("16h?*t]} X[(V a]sIB", "^cx@'!*.vHXsjZ h>F<", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("16?t]}[(Va]IB", string1);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      Comparator<CharBuffer> comparator0 = (Comparator<CharBuffer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>(comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      String string0 = StringUtils.capitalize("PZqS)U= FO!.D>");
      assertNotNull(string0);
      assertEquals("PZqS)U= FO!.D>", string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("PZqS)U= FO!.D>"));
      
      Spliterator<Object> spliterator0 = stack0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("PZqS)U= FO!.D>"));
      
      Stream<Object> stream0 = stack0.parallelStream();
      assertNotNull(stream0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("PZqS)U= FO!.D>"));
      
      String string1 = StringUtils.join((List<?>) stack0, 'x', (int) 'x', (int) 'x');
      assertNotNull(string1);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertFalse(stack0.contains('x'));
      
      String string2 = StringUtils.rightPad("PZqS)U= FO!.D>", 11, "!alMW M1^");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("PZqS)U= FO!.D>", string2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "!alMW M1^";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[2] = object1;
      objectArray0[4] = (Object) "!alMW M1^";
      String string3 = StringUtils.join(objectArray0, 'K');
      assertNotNull(string3);
      assertEquals(5, objectArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.deleteWhitespace("$\"4");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("$\"4", string4);
      
      String string5 = StringUtils.uncapitalize("$\"4");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("$\"4", string5);
      
      boolean boolean0 = StringUtils.isWhitespace("PZqS)U= FO!.D>");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "offset cannot be negative", " ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "offset cannot be negative";
      stringArray0[6] = "offset cannot be negative";
      String string1 = StringUtils.substringBetween("", "", "offset cannot be negative");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string2);
      assertEquals(7, stringArray0.length);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) string1, (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.replaceFirst("", "", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String[] stringArray1 = StringUtils.split("|", (String) null);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      
      String string4 = StringUtils.lowerCase("", locale0);
      assertNotNull(string4);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "", "");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.chomp("i/4k#", "i/4k#");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (String) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chomp("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int1 = StringUtils.countMatches((CharSequence) "", '1');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = StringUtils.truncate("org.apache.commons.lang3.StringUtils", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'X';
      charArray0[1] = '?';
      charArray0[2] = 'p';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'X', '?', 'p'}, charArray0);
      assertEquals((-1), int0);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(0));
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(vector0);
      assertNotNull(arrayList0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(vector0.contains(0));
      assertFalse(arrayList0.contains(0));
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      
      boolean boolean0 = arrayList0.add(integer0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(integer0.equals((Object)int0));
      assertTrue(boolean0);
      assertFalse(vector0.contains(0));
      assertTrue(arrayList0.contains((-1)));
      assertFalse(arrayList0.contains(0));
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(arrayList0);
      assertNotNull(linkedHashSet0);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(vector0.contains(0));
      assertTrue(arrayList0.contains((-1)));
      assertFalse(arrayList0.contains(0));
      assertTrue(linkedHashSet0.contains((-1)));
      assertFalse(linkedHashSet0.contains('?'));
      
      String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, 'O');
      assertNotNull(string1);
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(string1.equals((Object)string0));
      assertEquals("-1", string1);
      assertFalse(vector0.contains(0));
      assertTrue(arrayList0.contains((-1)));
      assertFalse(arrayList0.contains(0));
      assertTrue(linkedHashSet0.contains((-1)));
      assertFalse(linkedHashSet0.contains('?'));
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = StringUtils.substringAfter("}#3U=", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'u');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("}#3U=");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'a';
      intArray0[1] = (-314);
      intArray0[2] = 0;
      intArray0[3] = (int) 'u';
      intArray0[4] = 0;
      intArray0[5] = 32767;
      intArray0[6] = (int) 'a';
      intArray0[7] = (int) 'u';
      String string2 = StringUtils.join(intArray0, 'a');
      assertNotNull(string2);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {97, (-314), 0, 117, 0, 32767, 97, 117}, intArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("97a-314a0a117a0a32767a97a117", string2);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "}#3U=", "");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.substring("The Array must not be null", 97, 55);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = StringUtils.right("FPV[w8ya{a5a;v?8WJs", 2231);
      assertNotNull(string0);
      assertEquals("FPV[w8ya{a5a;v?8WJs", string0);
      
      String string1 = StringUtils.trimToEmpty("FPV[w8ya{a5a;v?8WJs");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("FPV[w8ya{a5a;v?8WJs", string1);
      
      String string2 = StringUtils.unwrap("L L", '9');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("L L", string2);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "FPV[w8ya{a5a;v?8WJs", charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = StringUtils.right("FPV[w8ya{a5a;v?8WJs", 2231);
      assertNotNull(string0);
      assertEquals("FPV[w8ya{a5a;v?8WJs", string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.unwrap("L L", '9');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("L L", string2);
      
      String string3 = StringUtils.join((Iterable<?>) null, 'p');
      assertNull(string3);
      
      String string4 = StringUtils.abbreviate("Arguments cannot both be null", 2231, 31);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Arguments cannot both be null", string4);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 13, 427);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)54;
      shortArray0[2] = (short)54;
      shortArray0[3] = (short)1;
      String string0 = StringUtils.join(shortArray0, 'Z', 0, 0);
      assertNotNull(string0);
      assertEquals(4, shortArray0.length);
      assertArrayEquals(new short[] {(short)1, (short)54, (short)54, (short)1}, shortArray0);
      assertEquals("", string0);
      
      String string1 = StringUtils.right("", (short)1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.substringBetween("T\"]N9V", "T\"]N9V");
      assertNull(string0);
      
      String string1 = StringUtils.capitalize("H[KqABKMk](");
      assertNotNull(string1);
      assertEquals("H[KqABKMk](", string1);
      
      String string2 = StringUtils.unwrap("H[KqABKMk](", (String) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("H[KqABKMk](", string2);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("H[KqABKMk](", (CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.normalizeSpace("T\"]N9V");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("T\"]N9V", string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "H[KqABKMk](", (CharSequence) null, (-2150));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.unwrap("$?k_d`k\"G!8<vHCf]K", "~gzeX6RG*]H~/~x;");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$?k_d`k\"G!8<vHCf]K", string1);
      
      String[] stringArray0 = StringUtils.split("$?k_d`k\"G!8<vHCf]K", "3vb@F6ax.}");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.removeFirst((String) null, "$?k_d`k\"G!8<vHCf]K");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("$?k_d`k\"G!8<vHCf]K", "~gzeX6RG*]H~/~x;");
      assertFalse(boolean0);
      
      String string3 = StringUtils.trim((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.substringBeforeLast("Comparator should not be null.Strings must not be null", "Comparator should not be null.Strings must not be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.replaceChars((String) null, 'E', 'E');
      assertNull(string5);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 0;
      String string6 = StringUtils.join(longArray0, 'C', 32, (-1173));
      assertNotNull(string6);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {0L}, longArray0);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      
      String string7 = StringUtils.deleteWhitespace((String) null);
      assertNull(string7);
      
      String string8 = StringUtils.abbreviate("a\"", "\r", 1667);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertEquals("a\"", string8);
      
      boolean boolean1 = StringUtils.isNumericSpace("$?k_d`k\"G!8<vHCf]K");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("\r", (CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = StringUtils.wrap("clone", 'p');
      assertNotNull(string0);
      assertEquals("pclonep", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "pclonep";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean1 = StringUtils.isNumericSpace(charSequenceArray0[0]);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.difference("", " 's ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" 's ", string1);
      
      boolean boolean2 = StringUtils.isAlphanumeric("clone");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.containsIgnoreCase((CharSequence) null, "clone");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "clone", (-853), (-853));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.trimToEmpty("clone");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("clone", string2);
      
      String string3 = StringUtils.rightPad("%:),u:N4#fXWEc'", 3962, 'p');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = StringUtils.removeEnd("\"jJVnmvr1>PG", "\"jJVnmvr1>PG");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("", (-29), '');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {''}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.substringBefore("Threshold must not be negative", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.reverse("...");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("...", string3);
      
      String string4 = StringUtils.substringBefore("\"jJVnmvr1>PG", "<Pq?W.e:\"G-J[");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("\"jJVnmvr1>PG", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "\"jJVnmvr1>PG";
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("PNB+M3HcEr4L{n");
      assertNotNull(stringArray0);
      assertEquals(12, stringArray0.length);
      
      String string5 = StringUtils.repeat('F', 22);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("FFFFFFFFFFFFFFFFFFFFFF", string5);
      
      String string6 = StringUtils.trim("");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      
      String string7 = StringUtils.left("Threshold must not be negative", 22);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("Threshold must not be ", string7);
      
      boolean boolean3 = StringUtils.containsIgnoreCase("\"jJVnmvr1>PG", "Threshold must not be ");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = StringUtils.remove(", Length: ", "org.apache.commons.lang3.ObjectUtilsfkY9.Z1");
      assertNotNull(string0);
      assertEquals(", Length: ", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) ", Length: ", (CharSequence) "]vP)*V)5KQ`:7>W!");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals(", Length: ", charSequence0);
      
      String string1 = StringUtils.defaultString("}hA2N+@[G", ", Length: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("}hA2N+@[G", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Ky@[p{InCombiningDiacriticalMarks}+", "]vP)*V)5KQ`:7>W!", 872);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("]vP)*V)5KQ`:7>W!", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.rotate("}hA2N+@[G", 135);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("}hA2N+@[G", string2);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      String string3 = StringUtils.substringBefore(", Length: ", "\n");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(", Length: ", string3);
      
      int int0 = StringUtils.compare("}hA2N+@[G", ", Length: ", false);
      assertEquals(81, int0);
      
      String string4 = StringUtils.abbreviate("}hA2N+@[G", "Comparator should not be null.Exception cloning Cloneable type ", (-2180), 64);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("}hA2N+@[G", string4);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("A.DwS+Ef<T1", "L4**c>4|Pt[go4D8#", false);
      assertEquals((-11), int0);
      
      String string0 = StringUtils.wrapIfMissing("7r(Pn6k/(", "M]9");
      assertNotNull(string0);
      assertEquals("M]97r(Pn6k/(M]9", string0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "A.DwS+Ef<T1", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.defaultString("L4**c>4|Pt[go4D8#", "L4**c>4|Pt[go4D8#");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L4**c>4|Pt[go4D8#", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "M]9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = StringUtils.rotate("LNuk>Qz|sjw", 2109);
      assertNotNull(string0);
      assertEquals("k>Qz|sjwLNu", string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripEnd("LNuk>Qz|sjw", " has no clone methodorg.apache.commons.lang3.ArrayUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("LNuk>Qz|sjw", string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "LNuk>Qz|sjw", (CharSequence) "LNuk>Qz|sjw");
      assertEquals((-1), int0);
      
      int int1 = 263;
      String string2 = StringUtils.substringAfter("\r", "k>Qz|sjwLNu");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int2 = StringUtils.countMatches((CharSequence) "LNuk>Qz|sjw", '\\');
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      boolean boolean1 = StringUtils.isAllLowerCase("LNuk>Qz|sjw");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("\r");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.stripToEmpty("k>Qz|sjwLNu");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("k>Qz|sjwLNu", string3);
      
      PriorityQueue<Object> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Object>((-2417));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = StringUtils.leftPad("Cloneable type ", 112, "Cloneable type ");
      assertNotNull(string0);
      assertEquals("Cloneable type Cloneable type Cloneable type Cloneable type Cloneable type Cloneable type CloneabCloneable type ", string0);
      
      boolean boolean0 = StringUtils.startsWith("Cloneable type Cloneable type Cloneable type Cloneable type Cloneable type Cloneable type CloneabCloneable type ", "Cloneable type Cloneable type Cloneable type Cloneable type Cloneable type Cloneable type CloneabCloneable type ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceOnce("J?dHYFI}/lG3m", "Cloneable type ", "J?dHYFI}/lG3m");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("J?dHYFI}/lG3m", string1);
      
      String string2 = StringUtils.rotate("Cloneable type Cloneable type Cloneable type Cloneable type Cloneable type Cloneable type CloneabCloneable type ", 112);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Cloneable type Cloneable type Cloneable type Cloneable type Cloneable type Cloneable type CloneabCloneable type ", string2);
      
      String string3 = StringUtils.leftPad((String) null, 112);
      assertNull(string3);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "J?dHYFI}/lG3m", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string4 = null;
      String string5 = StringUtils.chop((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.substring((String) null, (-1), 98);
      assertNull(string6);
      
      String string7 = StringUtils.stripStart((String) null, "Object varargs must not be null");
      assertNull(string7);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase((CharSequence) null, "Cloneable type ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumericSpace((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string8 = "h";
      String string9 = StringUtils.uncapitalize("h");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string8));
      assertEquals("h", string9);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("h", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("Oj", "|[U(rl<zma?do5DHj;s`Oa1,7|I", 57);
      assertNotNull(string0);
      assertEquals("Oj", string0);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{}", "^R/Q[", 100);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "7r(Pn6k/(", "{}");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("maxWith cannot be negative", "?1e!XO!75XZ(G");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.wrapIfMissing((String) null, 'w');
      assertNull(string0);
      
      String string1 = StringUtils.stripToNull("LdR6y-*u8LM");
      assertNotNull(string1);
      assertEquals("LdR6y-*u8LM", string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("?1e!XO!75XZ(G", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("?1e!XO!75XZ(G", string2);
      
      String string3 = StringUtils.trim("LdR6y-*u8LM");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("LdR6y-*u8LM", string3);
      
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "LdR6y-*u8LM");
      assertNotNull(stringArray2);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string4 = StringUtils.removeEnd("Xw+!rjJ.s+E`G`m", "maxWith cannot be negative");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Xw+!rjJ.s+E`G`m", string4);
      
      String string5 = StringUtils.abbreviateMiddle("LdR6y-*u8LM", "org.apache.commons.lang3.StringUtils", 491);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertEquals("LdR6y-*u8LM", string5);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = ']';
      charArray0[2] = 'q';
      charArray0[3] = 'j';
      String string0 = StringUtils.abbreviate((String) null, 157, 256);
      assertNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("g~mB^j<", (String) null);
      assertNotNull(string1);
      assertEquals("g~mB^j<", string1);
      
      String string2 = StringUtils.replaceOnce((String) null, "\r", "g~mB^j<");
      assertNull(string2);
      
      String string3 = StringUtils.defaultString("org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.StringUtils", "offset cannot be negative");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.StringUtils", string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "clone", (CharSequence) "clone", 891);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = StringUtils.remove("Kn)Q2c1*O%hh7", 'Y');
      assertNotNull(string0);
      assertEquals("Kn)Q2c1*O%hh7", string0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      intArray0[1] = (int) 'Y';
      intArray0[2] = (int) 'Y';
      intArray0[3] = (int) 'Y';
      intArray0[4] = (int) 'Y';
      intArray0[5] = (int) 'Y';
      intArray0[6] = (int) 'Y';
      intArray0[7] = (int) 'Y';
      String string1 = StringUtils.join(intArray0, 'Y', 89, 89);
      assertNotNull(string1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {89, 89, 89, 89, 89, 89, 89, 89}, intArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.split("Kn)Q2c1*O%hh7");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.removeStart("Array and element cannot both be null", "VSP");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Array and element cannot both be null", string2);
      
      String string3 = StringUtils.capitalize("VM.|k:rqS[s*^;f@4_f");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.strip((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.join((char[]) null, 'K', (-23), 2048);
      assertNull(string5);
      
      String string6 = StringUtils.removeAll((String) null, "VM.|k:rqS[s*^;f@4_f");
      assertNull(string6);
      
      String string7 = StringUtils.center("PZqS)U= FO!.D>{H]qHj]", 2048, "HY}>T{hXzl");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      
      String string8 = StringUtils.substringAfter("?E}\"'+4!kW@aoL)ip", 64);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertEquals("aoL)ip", string8);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "]vP)*V)5KQ`:7>W!");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string2 = StringUtils.removeStart("h", "qSN#]L|}5qZ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("h", string2);
      
      String string3 = StringUtils.swapCase("h");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("H", string3);
      
      String string4 = StringUtils.trimToEmpty("H[KqABKMk](");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("H[KqABKMk](", string4);
      
      int int0 = StringUtils.compare("H[KqABKMk](", (String) null, true);
      assertEquals(1, int0);
      
      String string5 = StringUtils.chop((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.truncate(", Length: 1]q\u0000H", 1, 1);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)charSequence0));
      assertEquals(" ", string6);
      
      String string7 = StringUtils.replaceFirst("H[KqABKMk](", "qSN#]L|}5qZ", (String) null);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertEquals("H[KqABKMk](", string7);
      
      String string8 = StringUtils.removeEndIgnoreCase("H[KqABKMk](", "H[KqABKMk](");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)charSequence0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      Comparator<CharBuffer> comparator0 = (Comparator<CharBuffer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>(comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      String string0 = StringUtils.capitalize("PZqS)U= FO!.D>");
      assertNotNull(string0);
      assertEquals("PZqS)U= FO!.D>", string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("PZqS)U= FO!.D>"));
      
      Stream<Object> stream0 = stack0.parallelStream();
      assertNotNull(stream0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("PZqS)U= FO!.D>"));
      
      String string1 = StringUtils.join((List<?>) stack0, 'x', 889, 889);
      assertNotNull(string1);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertFalse(stack0.contains('x'));
      
      String string2 = StringUtils.rightPad("PZqS)U= FO!.D>", 11, "!alMW M1^");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("PZqS)U= FO!.D>", string2);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "!alMW M1^";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[2] = object1;
      objectArray0[3] = (Object) "PZqS)U= FO!.D>";
      objectArray0[4] = (Object) "!alMW M1^";
      String string3 = StringUtils.join(objectArray0, 'K');
      assertNotNull(string3);
      assertEquals(5, objectArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.deleteWhitespace("$\"4");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("$\"4", string4);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String string0 = StringUtils.stripAccents("*^L.W{mO");
      assertNotNull(string0);
      assertEquals("*^L.W{mO", string0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string1 = StringUtils.deleteWhitespace("*^L.W{mO");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("*^L.W{mO", string1);
      
      String string2 = StringUtils.trimToNull("*^L.W{mO");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("*^L.W{mO", string2);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = StringUtils.upperCase(", Length: /r-\"w=sW%t~or%qa?Lorg.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals(", LENGTH: /R-\"W=SW%T~OR%QA?LORG.APACHE.COMMONS.LANG3.STRINGUTILS", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) ", LENGTH: /R-\"W=SW%T~OR%QA?LORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[1] = (CharSequence) ", LENGTH: /R-\"W=SW%T~OR%QA?LORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[2] = (CharSequence) ", LENGTH: /R-\"W=SW%T~OR%QA?LORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[3] = (CharSequence) ", Length: /r-\"w=sW%t~or%qa?Lorg.apache.commons.lang3.StringUtils";
      charSequenceArray0[4] = (CharSequence) ", Length: /r-\"w=sW%t~or%qa?Lorg.apache.commons.lang3.StringUtils";
      charSequenceArray0[5] = (CharSequence) ", LENGTH: /R-\"W=SW%T~OR%QA?LORG.APACHE.COMMONS.LANG3.STRINGUTILS";
      charSequenceArray0[6] = (CharSequence) ", Length: /r-\"w=sW%t~or%qa?Lorg.apache.commons.lang3.StringUtils";
      charSequenceArray0[7] = (CharSequence) ", Length: /r-\"w=sW%t~or%qa?Lorg.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.prependIfMissingIgnoreCase(", LENGTH: /R-\"W=SW%T~OR%QA?LORG.APACHE.COMMONS.LANG3.STRINGUTILS", ", LENGTH: /R-\"W=SW%T~OR%QA?LORG.APACHE.COMMONS.LANG3.STRINGUTILS", charSequenceArray0);
      assertNotNull(string1);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals(", LENGTH: /R-\"W=SW%T~OR%QA?LORG.APACHE.COMMONS.LANG3.STRINGUTILS", string1);
      
      String string2 = StringUtils.unwrap(", LENGTH: /R-\"W=SW%T~OR%QA?LORG.APACHE.COMMONS.LANG3.STRINGUTILS", 'Y');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(", LENGTH: /R-\"W=SW%T~OR%QA?LORG.APACHE.COMMONS.LANG3.STRINGUTILS", string2);
      
      String string3 = StringUtils.strip(", LENGTH: /R-\"W=SW%T~OR%QA?LORG.APACHE.COMMONS.LANG3.STRINGUTILS", "!<1[;_oDzQ8WaPUn");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals(", LENGTH: /R-\"W=SW%T~OR%QA?LORG.APACHE.COMMONS.LANG3.STRINGUTILS", string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "!<1[;_oDzQ8WaPUn", "rg=!o{_x^`");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[5], (CharSequence) ", LENGTH: /R-\"W=SW%T~OR%QA?LORG.APACHE.COMMONS.LANG3.STRINGUTILS");
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny(charSequenceArray0[4], charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.replaceChars("rg=!o{_x^`", "org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.StringUtils", ", LENGTH: /R-\"W=SW%T~OR%QA?LORG.APACHE.COMMONS.LANG3.STRINGUTILS");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(" L=!,{_R^`", string4);
      
      String string5 = StringUtils.deleteWhitespace(", LENGTH: /R-\"W=SW%T~OR%QA?LORG.APACHE.COMMONS.LANG3.STRINGUTILS");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals(",LENGTH:/R-\"W=SW%T~OR%QA?LORG.APACHE.COMMONS.LANG3.STRINGUTILS", string5);
      
      String string6 = StringUtils.leftPad("rg=!o{_x^`", 57, 'Y');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYrg=!o{_x^`", string6);
      
      CharSequence[] charSequenceArray1 = new CharSequence[0];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      int int1 = StringUtils.indexOfAny((CharSequence) "YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYrg=!o{_x^`", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(0, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      String string0 = StringUtils.deleteWhitespace("Invalid locale format: ");
      assertNotNull(string0);
      assertEquals("Invalidlocaleformat:", string0);
      
      String string1 = StringUtils.trimToNull("ch");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ch", string1);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.wrap("K", ' ');
      assertNotNull(string0);
      assertEquals(" K ", string0);
      
      charSequenceArray0[2] = (CharSequence) " K ";
      charSequenceArray0[3] = null;
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean2 = StringUtils.isNumericSpace(" K ");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      boolean boolean0 = StringUtils.isNumericSpace("A.DwS+Ef<T1");
      assertFalse(boolean0);
      
      String string0 = StringUtils.difference("mXR?rHvy~@@t&2{^O", "A.DwS+Ef<T1");
      assertNotNull(string0);
      assertEquals("A.DwS+Ef<T1", string0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = StringUtils.upperCase("r$#nOA+Q#62Y-Pi");
      assertNotNull(string0);
      assertEquals("R$#NOA+Q#62Y-PI", string0);
      
      String string1 = StringUtils.remove((String) null, "Hh5+,6!8K9jz");
      assertNull(string1);
      
      String string2 = StringUtils.rotate("R$#NOA+Q#62Y-PI", 127);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("#62Y-PIR$#NOA+Q", string2);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) "#62Y-PIR$#NOA+Q");
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string2));
      assertEquals("#62Y-PIR$#NOA+Q", charSequence0);
      
      String string3 = StringUtils.defaultString("#62Y-PIR$#NOA+Q", "]vP)*V)5KQ`:7>W!");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("#62Y-PIR$#NOA+Q", string3);
      
      String string4 = StringUtils.stripToNull("#62Y-PIR$#NOA+Q");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("#62Y-PIR$#NOA+Q", string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("Hh5+,6!8K9jz", (String) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Hh5+,6!8K9jz", string5);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("org.apache.commons.lang3.ObjectUtils", (-3442));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-1.0F);
      String string0 = StringUtils.join(floatArray0, 'e', 270, 95);
      assertNotNull(string0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertEquals("", string0);
      
      int int0 = StringUtils.ordinalIndexOf("", (CharSequence) null, (-1692));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.LocaleUtils", "4", false);
      assertFalse(int1 == int0);
      assertEquals(59, int1);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String string0 = StringUtils.chomp(", Length: ", "/r-\"w=sW%t~or%qa?L");
      assertNotNull(string0);
      assertEquals(", Length: ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) ", Length: ";
      charSequenceArray0[1] = (CharSequence) ", Length: ";
      String string1 = StringUtils.removeAll(", Length: ", ", Length: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAny((CharSequence) ", Length: ", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ", Length: ", ", Length: ");
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean1 = StringUtils.isNumericSpace(charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.difference("/r-\"w=sW%t~or%qa?L", "/r-\"w=sW%t~or%qa?L");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      
      String string3 = StringUtils.upperCase("/r-\"=sW%t~or%qa?L", locale0);
      assertNotNull(string3);
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("/R-\"=SW%T~OR%QA?L", string3);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      char char0 = 'A';
      String[] stringArray0 = new String[4];
      stringArray0[0] = ", Length: ";
      stringArray0[1] = "{}";
      String string0 = "CdhLqA^en;4Zq(#";
      stringArray0[2] = "CdhLqA^en;4Zq(#";
      stringArray0[3] = "j-";
      String[] stringArray1 = arrayList0.toArray(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("j-"));
      
      String string1 = StringUtils.join((List<?>) arrayList0, 'A', 8192, 8192);
      assertNotNull(string1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertFalse(arrayList0.contains("j-"));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 8192);
      assertEquals(0, int0);
      
      String string2 = "nDk`'zgL)~U";
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "{}");
      assertNotNull(predicate0);
      
      // Undeclared exception!
      try { 
        predicate0.or((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = StringUtils.removeAll("ch", "ch");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("ho{Nrgt/+cVPx]mx", "ch", true);
      assertEquals(5, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((List<?>) null, "}?6<^]?5Yoc", 5, 4654);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAlpha("ch");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = StringUtils.chomp("\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripStart("=4o,cLlIeTkX]1PW", "=4o,cLlIeTkX]1PW");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBefore("\r", (-89));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\r", string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "\r", 'w');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("\n");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\n", (CharSequence) "\n");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = StringUtils.right("FPV[w8ya{a5a;v?8WJs", 2231);
      assertNotNull(string0);
      assertEquals("FPV[w8ya{a5a;v?8WJs", string0);
      
      String string1 = StringUtils.trimToEmpty("FPV[w8ya{a5a;v?8WJs");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("FPV[w8ya{a5a;v?8WJs", string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "FPV[w8ya{a5a;v?8WJs");
      assertFalse(boolean0);
      
      String string2 = StringUtils.defaultString("", "FPV[w8ya{a5a;v?8WJs");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Minimum abbreviation width with offset is %d");
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.removeEnd("FPV[w8ya{a5a;v?8WJs", "Minimum abbreviation width with offset is %d");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("FPV[w8ya{a5a;v?8WJs", string3);
      
      String string4 = StringUtils.rightPad("n~", 2053);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.LF;
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("\n", string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "\n", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String string0 = StringUtils.chomp("\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[1];
      String string1 = StringUtils.join(floatArray0, '7');
      assertNotNull(string1);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0", string1);
      
      String string2 = StringUtils.rightPad("\r", 265, "\r");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r", string2);
      
      String[] stringArray0 = new String[16];
      boolean boolean0 = StringUtils.isNotBlank("\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r\r");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "\r", (CharSequence) "");
      assertEquals(1, int0);
      
      String string3 = StringUtils.substringBetween("\r", ", '");
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        Charset.forName("0.0");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 0.0
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String string0 = StringUtils.right((String) null, (-1091));
      assertNull(string0);
      
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, "\r");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split((String) null, (String) null, (-1091));
      assertNull(stringArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      charArray0[1] = '}';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ":2Z:W;3X=r[gy|fvx", charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'}', '}'}, charArray0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "\r", charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'}', '}'}, charArray0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.substring((String) null, 1276);
      assertNull(string1);
      
      String string2 = StringUtils.abbreviate((String) null, 1276);
      assertNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("", (String) null);
      assertNotNull(string3);
      assertEquals("", string3);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(1276));
      
      String string4 = StringUtils.join((List<?>) stack0, '!', 1276, 889);
      assertNotNull(string4);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertFalse(stack0.contains(1276));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) '!';
      floatArray0[3] = (float) '!';
      floatArray0[4] = (float) 1276;
      floatArray0[5] = (float) '!';
      floatArray0[6] = (float) 1276;
      floatArray0[7] = (float) 1276;
      String string5 = StringUtils.swapCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("aBORTING TO PROTECT AGAINST sTACKoVERFLOWeRROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string5);
      
      String string6 = StringUtils.trimToEmpty("aBORTING TO PROTECT AGAINST sTACKoVERFLOWeRROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertEquals("aBORTING TO PROTECT AGAINST sTACKoVERFLOWeRROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", string6);
      
      int int0 = StringUtils.compare("aBORTING TO PROTECT AGAINST sTACKoVERFLOWeRROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER", (String) null, true);
      assertEquals(1, int0);
      
      String string7 = StringUtils.chop("aBORTING TO PROTECT AGAINST sTACKoVERFLOWeRROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHER");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertEquals("aBORTING TO PROTECT AGAINST sTACKoVERFLOWeRROR - OUTPUT OF ONE LOOP IS THE INPUT OF ANOTHE", string7);
      
      String string8 = StringUtils.truncate("3BnNj|{", 1276, 1);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("JE", "JE", "JE");
      assertNotNull(string0);
      assertEquals("JE", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.SPACE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      String string2 = StringUtils.defaultString("Kv`M~#De ", "JE");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Kv`M~#De ", string2);
      
      int int0 = StringUtils.compare(" ", (String) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      int[] intArray0 = new int[8];
      String string0 = StringUtils.join(intArray0, 'Y', 0, 0);
      assertNotNull(string0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("Array and element cannot both be null", "VSP");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Array and element cannot both be null", string1);
      
      String string2 = StringUtils.capitalize("VM.|k:rqS[s*^;f@4_f");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.strip((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.join((char[]) null, 'K', (-10), (-258));
      assertNull(string4);
      
      String string5 = StringUtils.substring("VSP", (-10));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("VSP", string5);
      
      String string6 = StringUtils.swapCase("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("P{iNcOMBININGdIACRITICALmARKS}+", string6);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) '7';
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) '7';
      floatArray0[4] = (float) '7';
      String string1 = StringUtils.join(floatArray0, 'i');
      assertNotNull(string1);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 55.0F, 0.0F, 55.0F, 55.0F}, floatArray0, 0.01F);
      assertEquals("0.0i55.0i0.0i55.0i55.0", string1);
      
      String string2 = StringUtils.rightPad("", 265, "$E,]je~MG");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]je~MG$E,]", string2);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "0.0i55.0i0.0i55.0i55.0";
      stringArray1[1] = null;
      stringArray1[2] = "0.0i55.0i0.0i55.0i55.0";
      stringArray1[3] = "0.0i55.0i0.0i55.0i55.0";
      stringArray1[4] = " vs ";
      stringArray1[5] = " G$!\"[&+";
      String string3 = StringUtils.replaceEachRepeatedly(" G$!\"[&+", stringArray0, stringArray1);
      assertNotNull(string3);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(" G$!\"[&+", string3);
      
      boolean boolean0 = StringUtils.isNotBlank(string0);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "$E,]je~MG", " G$!\"[&+");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.toRootUpperCase("");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (long) 265;
      longArray0[2] = (long) 265;
      longArray0[3] = (long) '7';
      longArray0[4] = (long) '7';
      longArray0[5] = (long) 'i';
      longArray0[6] = (long) '7';
      longArray0[7] = (long) '7';
      longArray0[8] = (long) 'i';
      String string5 = StringUtils.join(longArray0, '7');
      assertNotNull(string5);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {0L, 265L, 265L, 55L, 55L, 105L, 55L, 55L, 105L}, longArray0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("07265726575575571057557557105", string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "07265726575575571057557557105", (CharSequence) "0.0i55.0i0.0i55.0i55.0", 265);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("=tVj5xn-,hAP*+$Q[y", "", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("=tVj5xn-,hAP*+$Q[y", string0);
      
      char[] charArray0 = new char[4];
      charArray0[1] = 'G';
      charArray0[2] = 'h';
      charArray0[3] = '}';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "=tVj5xn-,hAP*+$Q[y", charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'G', 'h', '}'}, charArray0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviate("2CgLF", 160, 160);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("2CgLF", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      charSequenceArray0[0] = (CharSequence) "2CgLF";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "2CgLF";
      charSequenceArray0[4] = (CharSequence) "=tVj5xn-,hAP*+$Q[y";
      charSequenceArray0[5] = (CharSequence) "=tVj5xn-,hAP*+$Q[y";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.equals(charSequenceArray0[3], (CharSequence) "");
      assertEquals(10, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.chop("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.join(charArray0, 'G', 160, 160);
      assertNotNull(string3);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', 'G', 'h', '}'}, charArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "]vP)*V)5KQ`:7>W!");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string2 = StringUtils.removeStart("h", "qSN#]L|}5qZ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("h", string2);
      
      String string3 = StringUtils.capitalize("~X");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("~X", string3);
      
      String string4 = StringUtils.strip("org.apache.commons.lang3.StringUtils");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)charSequence0));
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("...", "org.apache.commons.lang3.StringUtils", "ojM!o{5YRxhUkH");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("...", string5);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)32;
      byteArray0[5] = (byte)77;
      String string6 = StringUtils.join(byteArray0, 'V', (int) (byte)14, (int) (byte)14);
      assertNotNull(string6);
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-53), (byte) (-16), (byte) (-14), (byte)14, (byte)32, (byte)77}, byteArray0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)charSequence0));
      assertEquals("", string6);
      
      String string7 = StringUtils.difference("org.apache.commons.lang3.StringUtils", "fOc.[>xxX:]&O](%Ob");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)charSequence0));
      assertEquals("fOc.[>xxX:]&O](%Ob", string7);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.defaultString("(OI", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(OI", string1);
      
      String string2 = StringUtils.replaceOnce("", "(OI", "je");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.rightPad("je", 1, '<');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("je", string3);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = '<';
      String string4 = StringUtils.valueOf(charArray0);
      assertNotNull(string4);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', '<'}, charArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("<<<<<<", string4);
      
      boolean boolean1 = StringUtils.equalsAny("(OI", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-39);
      String string0 = StringUtils.join(byteArray0, 'W');
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-39)}, byteArray0);
      assertEquals("90W-39", string0);
      
      String string1 = StringUtils.truncate("#@~i3Y%", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.center("{}vy1Ty6mt<A4rTxIH}*", 14);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{}vy1Ty6mt<A4rTxIH}*", string2);
      
      String string3 = StringUtils.stripEnd("4[u-`Sbi;!5#c7`%d", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("4[u-`Sbi;!5#c7`%d", string3);
      
      String string4 = StringUtils.unwrap("iGoID45wpb<dtR[W-uQ", 'W');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("iGoID45wpb<dtR[W-uQ", string4);
      
      boolean boolean1 = StringUtils.equalsAny("{}vy1Ty6mt<A4rTxIH}*", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.split("90W-39");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String string0 = StringUtils.rotate("LNuk>Qz|sjw", 2109);
      assertNotNull(string0);
      assertEquals("k>Qz|sjwLNu", string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("L", "Arr", " has no clone methodorg.apache.commons.lang3.ArrayUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L", string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "LNuk>Qz|sjw", (CharSequence) "L");
      assertEquals(1, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) " has no clone methodorg.apache.commons.lang3.ArrayUtils", (CharSequence) "L", 263);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.stripToEmpty("org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.StringUtils", string2);
      
      String string3 = StringUtils.removeIgnoreCase("7D*~z;Qc-SmzQ:w8", "7D*~z;Qc-SmzQ:w8");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.unwrap("Strings must not be null", "3*)K{C;r0*{");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Strings must not be null", string4);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = new String[7];
      stringArray0[2] = "Cannot store ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Cannot store ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String string0 = StringUtils.remove("Kn)Q2c1*O%hh7", 'Y');
      assertNotNull(string0);
      assertEquals("Kn)Q2c1*O%hh7", string0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      intArray0[1] = (int) 'Y';
      intArray0[2] = (int) 'Y';
      intArray0[3] = (int) 'Y';
      intArray0[4] = (int) 'Y';
      intArray0[5] = (int) 'Y';
      intArray0[6] = (int) 'Y';
      intArray0[7] = (int) 'Y';
      String string1 = StringUtils.join(intArray0, 'Y', 89, 89);
      assertNotNull(string1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {89, 89, 89, 89, 89, 89, 89, 89}, intArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.split("Kn)Q2c1*O%hh7");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.removeStart("Array and element cannot both be null", "VSP");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Array and element cannot both be null", string2);
      
      String string3 = StringUtils.capitalize("VM.|k:rqS[s*^;f@4_f");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.strip((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.join((char[]) null, 'K', (-1), 4269);
      assertNull(string5);
      
      String string6 = StringUtils.removeAll((String) null, "VM.|k:rqS[s*^;f@4_f");
      assertNull(string6);
      
      String string7 = StringUtils.center("PZqS)U= FO!.D>{H]qHj]", 4269, "HY}>T{hXzl");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.compare("o@14bry@z1:G+S", "ZdA{x\"kjg4", true);
      assertEquals(21, int0);
      
      String string2 = StringUtils.chop("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.defaultString("(OI", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(OI", string1);
      
      String string2 = StringUtils.replaceOnce("", "(OI", "je");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("1]qjH", "je");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("je1]qjHje", string3);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'p';
      charArray0[4] = 'D';
      charArray0[6] = '\u0081';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "je1]qjHje", charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'G', 'G', 'p', '\u0000', 'D', '\u0000', '\u0081'}, charArray0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "je", (CharSequence) "(OI");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.reverseDelimited("", '\u0081');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.center("Search and Replace array lengths don't match: ", 0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Search and Replace array lengths don't match: ", string5);
      
      String string6 = StringUtils.join((double[]) null, 'G');
      assertNull(string6);
      
      String string7 = StringUtils.stripEnd("Search and Replace array lengths don't match: ", "");
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertEquals("Search and Replace array lengths don't match: ", string7);
      
      String string8 = StringUtils.leftPad("Ac%K6/VR?26", 2405, 'O');
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = StringUtils.replaceChars("k0<5&GR", "V[aBj", "Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("k0<5&GR", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("k0<5&GR");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "V[aBj";
      charSequenceArray0[1] = (CharSequence) "k0<5&GR";
      charSequenceArray0[2] = (CharSequence) "V[aBj";
      charSequenceArray0[3] = (CharSequence) "k0<5&GR";
      int[] intArray0 = new int[0];
      String string1 = StringUtils.join(intArray0, ')');
      assertNotNull(string1);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("", 32, 'r');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.rightPad("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", 2, "~gzeX6RG*]H~/~x;");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", string2);
      
      String string3 = StringUtils.EMPTY;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", (CharSequence) "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = 'r';
      charArray0[4] = 'r';
      charArray0[5] = 'r';
      charArray0[6] = 'r';
      charArray0[7] = 'Z';
      String string4 = StringUtils.join(charArray0, '8', 225, 2);
      assertNotNull(string4);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'r', 'r', 'r', 'r', 'r', 'r', 'r', 'Z'}, charArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      boolean boolean2 = StringUtils.isAlpha("");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.reverseDelimited("", '`');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("|", "5*(7.+Jt8(", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("5*(7.+Jt8(|", string0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, ';', (-3695), (-3695));
      assertNotNull(string1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        Charset.forName("5*(7.+Jt8(");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 5*(7.+Jt8(
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("gl");
      assertNotNull(string0);
      assertEquals("gl", string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)53;
      byteArray0[1] = (byte)3;
      String string1 = StringUtils.join(byteArray0, '(');
      assertNotNull(string1);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)53, (byte)3}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("53(3", string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '(';
      charArray0[1] = 'z';
      charArray0[2] = '(';
      charArray0[3] = '(';
      String string2 = StringUtils.valueOf(charArray0);
      assertNotNull(string2);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'(', 'z', '(', '('}, charArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("(z((", string2);
      
      int int0 = StringUtils.compareIgnoreCase("j3iF82@4Bq4J/", "gl", true);
      assertEquals(3, int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("j3iF82@4Bq4J/", "53(3", 23);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "gl";
      charSequenceArray0[1] = (CharSequence) "j3iF82@4Bq4J/";
      charSequenceArray0[2] = (CharSequence) "(z((";
      String string3 = StringUtils.appendIfMissingIgnoreCase("[J*G34GZE&}{sW8%0qi", "gl", charSequenceArray0);
      assertNotNull(string3);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("[J*G34GZE&}{sW8%0qigl", string3);
      
      int int2 = StringUtils.compare("_e;", "gl", true);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-8), int2);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.repeat((String) null, Integer.MAX_VALUE);
      assertNull(string1);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Stream<Locale.LanguageRange> stream0 = stack0.parallelStream();
      assertNotNull(stream0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("FPV[w8ya{a5a;v?8WJs[:vo~^", "FPV[w8ya{a5a;v?8WJs[:vo~^");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      double double0 = StringUtils.getJaroWinklerDistance("FPV[w8ya{a5a;v?8WJs[:vo~^", "FPV[w8ya{a5a;v?8WJs[:vo~^");
      assertEquals(1.0, double0, 0.01);
      
      String string0 = StringUtils.rightPad("FPV[w8ya{a5a;v?8WJs[:vo~^", (-855), 'Y');
      assertNotNull(string0);
      assertEquals("FPV[w8ya{a5a;v?8WJs[:vo~^", string0);
      
      String string1 = StringUtils.leftPad("FPV[w8ya{a5a;v?8WJs[:vo~^", (-855), "org.apache.commons.lang3.CharSequenceUtils");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("FPV[w8ya{a5a;v?8WJs[:vo~^", string1);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 'J');
      assertNull(string0);
      
      String string1 = StringUtils.join((int[]) null, '&');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "v>{)Ki('-OP");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("v>{)Ki('-OP", (String) null, 7);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String string0 = StringUtils.truncate("", 8, 114);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      String string1 = StringUtils.join(booleanArray0, 'P', 711, 0);
      assertNotNull(string1);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {true, false}, booleanArray0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("nzG(f", "nzG(f", 1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      String string0 = StringUtils.abbreviate("LNuk>Qz|sjw", "LNuk>Qz|sjw", 2109);
      assertNotNull(string0);
      assertEquals("LNuk>Qz|sjw", string0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("LNuk>Qz|sjw"));
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("LNuk>Qz|sjw"));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      boolean boolean0 = predicate1.test("LNuk>Qz|sjw");
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertTrue(boolean0);
      
      Predicate<String> predicate3 = Predicate.isEqual((Object) predicate1);
      assertNotNull(predicate3);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate4 = predicate1.and(predicate0);
      assertNotNull(predicate4);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate2));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'M'}, charArray0);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals("M", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      
      boolean boolean1 = predicate4.test(charBuffer0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'M'}, charArray0);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals("M", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = arrayList0.removeIf(predicate4);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate2));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertFalse(arrayList0.contains("LNuk>Qz|sjw"));
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("LNuk>Qz|sjw"));
      
      String string1 = StringUtils.join((List<?>) arrayList0, "LNuk>Qz|sjw", 1006, 1006);
      assertNotNull(string1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertFalse(arrayList0.contains("LNuk>Qz|sjw"));
      
      String string2 = StringUtils.removeFirst((String) null, "LNuk>Qz|sjw");
      assertNull(string2);
      
      boolean boolean3 = StringUtils.isMixedCase("");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.containsWhitespace("LNuk>Qz|sjw");
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = StringUtils.removeAll("ch", "ch");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compare("ho{Nrgt/+cVPx]mx", "ch", true);
      assertEquals(5, int0);
      
      String string1 = StringUtils.replaceChars("", '=', '=');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "ch", 5);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "ho{Nrgt/+cVPx]mx", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.strip("ch", "Q]O7Q h=r(IQAfERq");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("c", string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Q]O7Q h=r(IQAfERq", (CharSequence) "ho{Nrgt/+cVPx]mx");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.replaceOnce("FLsUo3:Cd6qH)m4", "", "ch");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("FLsUo3:Cd6qH)m4", string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("Q]O7Q h=r(IQAfERq", "S[*<feiq6.Y");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Q]O7Q h=r(IQAfERq", string4);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "]vP)*V)5KQ`:7>W!");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The Array must not be null", "]vP)*V)5KQ`:7>W!");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.swapCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ORG.APACHE.COMMONS.LANG3.sTRINGuTILS", string2);
      
      boolean boolean0 = StringUtils.equals(charSequenceArray0[0], (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.right("org.apache.commons.lang3.StringUtils", (-1091));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("The Array must not be null", "ORG.APACHE.COMMONS.LANG3.sTRINGuTILS");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.unwrap("org.apache.commons.lang3.StringUtils", '\"');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(":2Z:W;3X=r[gy|fvx");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '}';
      charArray0[2] = '\"';
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[2], charArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\"', '}', '\"'}, charArray0);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAnyBlank(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean2);
      
      String string5 = StringUtils.rotate("org.apache.commons.lang3.StringUtils", 2757);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
      assertEquals("ons.lang3.StringUtilsorg.apache.comm", string5);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      String string0 = StringUtils.replaceChars("k0<5&GR", "V[aBj", "Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("k0<5&GR", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("k0<5&GR");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "V[aBj";
      charSequenceArray0[1] = (CharSequence) "k0<5&GR";
      charSequenceArray0[2] = (CharSequence) "V[aBj";
      charSequenceArray0[3] = (CharSequence) "k0<5&GR";
      charSequenceArray0[4] = (CharSequence) "V[aBj";
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[6] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[7] = (CharSequence) "V[aBj";
      String string1 = StringUtils.reverseDelimited("Strings must not be null", '`');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      
      String string2 = StringUtils.center("Strings must not be null", 8192);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2405;
      String string3 = StringUtils.join(doubleArray0, 'e');
      assertNotNull(string3);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {2405.0}, doubleArray0, 0.01);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("2405.0", string3);
      
      String string4 = StringUtils.stripEnd("~MX}^\"tkGf", "1]\u0000jH");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("~MX}^\"tkGf", string4);
      
      String string5 = StringUtils.leftPad("]3*>\"hj[ACgmP", 1266, 'e');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      String string0 = StringUtils.substring("", 49, 4);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("org.apache.commons.lang3.LocaleUtils", 100, "org.apache.commons.lang3.Charsets");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.Charsetorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.Charset", string1);
      
      byte[] byteArray0 = new byte[0];
      String string2 = StringUtils.join(byteArray0, '^', 100, (-320));
      assertNotNull(string2);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrapIfMissing("org.apache.commons.lang3.Charsetorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.Charset", "org.apache.commons.lang3.Charsets");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.Charsetorg.apache.commons.lang3.Charsets", string3);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("'F%@(", (String) null);
      assertNotNull(string0);
      assertEquals("'F%@(", string0);
      
      String string1 = StringUtils.join((int[]) null, 'A');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "'F%@(", "H92~%");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substring("H92~%", 32767, 65);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.center((String) null, Integer.MAX_VALUE, "H92~%");
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("^X(", (String) null, 321);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "]vP)*V)5KQ`:7>W!");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The Array must not be null", "]vP)*V)5KQ`:7>W!");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.swapCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ORG.APACHE.COMMONS.LANG3.sTRINGuTILS", string2);
      
      boolean boolean0 = StringUtils.equals(charSequenceArray0[0], (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.right("org.apache.commons.lang3.StringUtils", (-1091));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("The Array must not be null", "ORG.APACHE.COMMONS.LANG3.sTRINGuTILS");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.unwrap("org.apache.commons.lang3.StringUtils", '\"');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)charSequence0));
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(":2Z:W;3X=r[gy|fvx");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\"';
      charArray0[1] = '}';
      charArray0[2] = '\"';
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[2], charArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\"', '}', '\"'}, charArray0);
      assertEquals(0, int0);
      
      String string5 = StringUtils.center("yqJQ-hm;$I", 0, "org.apache.commons.lang3.StringUtils");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("yqJQ-hm;$I", string5);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("=2tVj5xn-,hAP*+$Q[y", "", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("=2tVj5xn-,hAP*+$Q[y", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      String string1 = StringUtils.wrapIfMissing("", 'f');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(10, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "=2tVj5xn-,hAP*+$Q[y", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOf((CharSequence) "", 57, (-3779));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOf((CharSequence) "", (CharSequence) "=2tVj5xn-,hAP*+$Q[y");
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      boolean boolean0 = StringUtils.isNotEmpty(charSequenceArray0[0]);
      assertEquals(10, charSequenceArray0.length);
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[0];
      String string2 = StringUtils.join(floatArray0, '~');
      assertNotNull(string2);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(10, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\"-'x~vipx9Pw", "\"-'x~vipx9Pw");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substring((String) null, (-2696), (-2696));
      assertNull(string0);
      
      String string1 = StringUtils.center(" in an array of ", 9, " in an array of ");
      assertNotNull(string1);
      assertEquals(" in an array of ", string1);
      
      String string2 = StringUtils.chomp("~Yk`D/m}-qV`Tm]wUborg.apache.commons.lang3.ObjectUtilsfkY9.Z1");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("~Yk`D/m}-qV`Tm]wUborg.apache.commons.lang3.ObjectUtilsfkY9.Z1", string2);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEachRepeatedly("Kv`M~#D1$l1#s", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Kv`M~#D1$l1#s", string1);
      
      String string2 = StringUtils.defaultString("Kv`M~#D1$l1#s", "JE");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Kv`M~#D1$l1#s", string2);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "");
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[0];
      String string3 = StringUtils.join(floatArray0, 'j');
      assertNotNull(string3);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      String string0 = StringUtils.rotate("", 1435);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      
      String string1 = StringUtils.replaceAll("", "", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = locale0.getDisplayLanguage();
      assertNotNull(string2);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("German", string2);
      
      Locale locale1 = Locale.JAPAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ja_JP", locale1.toString());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      
      Locale locale2 = locale1.stripExtensions();
      assertNotNull(locale2);
      assertSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertEquals("ja_JP", locale1.toString());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("JP", locale2.getCountry());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("ja_JP", locale2.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      
      String string3 = locale0.getDisplayLanguage(locale2);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("JP", locale2.getCountry());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("ja_JP", locale2.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\u30C9\u30A4\u30C4\u8A9E", string3);
      
      String string4 = locale0.getDisplayName();
      assertNotNull(string4);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("German (Germany)", string4);
      
      String string5 = locale0.getDisplayVariant(locale1);
      assertNotNull(string5);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JP", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String string6 = StringUtils.upperCase("", locale0);
      assertNotNull(string6);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      
      String string7 = StringUtils.strip("X#Ic:;iaX");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("X#Ic:;iaX", string7);
      
      String string8 = StringUtils.truncate("", 57);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertEquals("", string8);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      String string9 = StringUtils.join((char[]) null, '2', 1435, 26);
      assertNull(string9);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", '2');
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "Arr");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("Arr");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("Exception cloning Cloneable type ", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Arr");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.wrapIfMissing("Arr", 'f');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("fArrf", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "fArrf";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[3] = (CharSequence) "Exception cloning Cloneable type ";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[5] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[6] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], charSequenceArray0[5], 0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.substringAfterLast("Exception cloning Cloneable type ", "y[+SC+iE?:$_q");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.abbreviate("", (-2006), 52);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      String string0 = StringUtils.chomp(", Length: ", "/r-\"w=sW%t~or%qa?L");
      assertNotNull(string0);
      assertEquals(", Length: ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) ", Length: ";
      String string1 = StringUtils.removeAll(", Length: ", ", Length: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) ", Length: ", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ", Length: ", "");
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      boolean boolean1 = StringUtils.isNumericSpace(charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.difference("/r-\"w=sW%t~or%qa?L", "/r-\"w=sW%t~or%qa?L");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = "/r-\"=sW%t~or%qa?L";
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        locale0.getDisplayName((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "}#3U=", (CharSequence) null, (-3930));
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.join(objectArray0, "Bzx5B7a#g-t%[z", 2305, (-1237));
      assertNotNull(string0);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      Comparator<CharBuffer> comparator0 = (Comparator<CharBuffer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)12;
      shortArray0[1] = (short)122;
      shortArray0[2] = (short) (-803);
      shortArray0[3] = (short) (-4876);
      shortArray0[4] = (short)398;
      shortArray0[5] = (short)21848;
      shortArray0[6] = (short)5;
      String string0 = StringUtils.join(shortArray0, 'i', (int) (short)21848, (-3398));
      assertNotNull(string0);
      assertEquals(7, shortArray0.length);
      assertArrayEquals(new short[] {(short)12, (short)122, (short) (-803), (short) (-4876), (short)398, (short)21848, (short)5}, shortArray0);
      assertEquals("", string0);
      
      String string1 = StringUtils.right("", (-1979));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)32;
      shortArray0[1] = (short)7;
      shortArray0[2] = (short)2;
      String string0 = StringUtils.join(shortArray0, 'D', 1502, 5);
      assertNotNull(string0);
      assertEquals(3, shortArray0.length);
      assertArrayEquals(new short[] {(short)32, (short)7, (short)2}, shortArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      String string0 = StringUtils.substringAfter("}=8#3U=", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("}=8#3U=");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceOnce("_", "_", "7r(Pn6k/(");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7r(Pn6k/(", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("}=8#3U=", "7r(Pn6k/(");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("}=8#3U=", string2);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = StringUtils.substring("", 49, 4);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("org.apache.commons.lang3.LocaleUtils", 100, "org.apache.commons.lang3.Charsets");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.Charsetorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.Charset", string1);
      
      byte[] byteArray0 = new byte[0];
      String string2 = StringUtils.join(byteArray0, '^', 100, (-320));
      assertNotNull(string2);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.chomp("");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1779.29);
      doubleArray0[1] = 0.7;
      doubleArray0[2] = (-444.12108741008);
      doubleArray0[3] = (-3014.555222451508);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 888.0;
      String string0 = StringUtils.join(doubleArray0, 'b', 72, 72);
      assertNotNull(string0);
      assertEquals(6, doubleArray0.length);
      assertArrayEquals(new double[] {(-1779.29), 0.7, (-444.12108741008), (-3014.555222451508), (-1.0), 888.0}, doubleArray0, 0.01);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 116);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string1 = StringUtils.uncapitalize("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = ']';
      charArray0[2] = 'q';
      charArray0[3] = 'j';
      charArray0[4] = 'H';
      String string0 = StringUtils.valueOf(charArray0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'1', ']', 'q', 'j', 'H'}, charArray0);
      assertEquals("1]qjH", string0);
      
      String string1 = StringUtils.wrapIfMissing("1]qjH", ", Length: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", Length: 1]qjH, Length: ", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("1]qjH", "1]qjH", 52);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ", Length: 1]qjH, Length: ", (CharSequence) ", Length: ", 48);
      assertEquals(15, int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("1]qjH", "qSN#]L|}5qZ");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "1]qjH", (CharSequence) "1]qjH");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "qSN#]L|}5qZ");
      assertNotNull(string2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("qSN#]L|}5qZ", string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, "]JE]JE");
      assertNotNull(string3);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("]JE]JE", string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "]JE]JE", (CharSequence) "qSN#]L|}5qZ");
      assertFalse(boolean0);
      
      String string4 = StringUtils.replaceOnce("QC//bo6zZ", "qSN#]L|}5qZ", "{}");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("QC//bo6zZ", string4);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String string0 = StringUtils.substring("\r", (-28));
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\r", 2);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("=tVj5xn-,hAP*+$Q[y", "", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("=tVj5xn-,hAP*+$Q[y", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = 'G';
      charArray0[2] = 'h';
      charArray0[3] = '}';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "=tVj5xn-,hAP*+$Q[y", charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'p', 'G', 'h', '}'}, charArray0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviate("2CgLF", 160, 160);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("2CgLF", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "2CgLF";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "2CgLF";
      charSequenceArray0[4] = (CharSequence) "=tVj5xn-,hAP*+$Q[y";
      charSequenceArray0[5] = (CharSequence) "=tVj5xn-,hAP*+$Q[y";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "2CgLF";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.wrap("rZ94z3ki?hr`B", "Locale must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Locale must not be nullrZ94z3ki?hr`BLocale must not be null", string2);
      
      String string3 = StringUtils.removeIgnoreCase("org.apache.commons.lang3.exception.CloneFailedException", "2'4QR(O&:aJ5UuNh+Q\"");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string3);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String string0 = StringUtils.defaultString("Kv`M~#De ", "Kv`M~#De ");
      assertNotNull(string0);
      assertEquals("Kv`M~#De ", string0);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("?%");
      assertNotNull(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {63, 37}, intArray0);
      
      String string2 = StringUtils.substringBeforeLast("Kv`M~#De ", "BGB#rg2W~R$uyt");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("Kv`M~#De ", string2);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "7r(Pn6k/(", (String) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.substring("", 4, 100);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("", 4, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("    ", string1);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.substring((String) null, 1276);
      assertNull(string1);
      
      String string2 = StringUtils.abbreviate((String) null, 1276);
      assertNull(string2);
      
      String string3 = StringUtils.capitalize("");
      assertNotNull(string3);
      assertEquals("", string3);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(""));
      
      String string4 = StringUtils.join((List<?>) stack0, '!', 1276, 889);
      assertNotNull(string4);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertFalse(stack0.contains(""));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) '!';
      floatArray0[2] = (float) 889;
      floatArray0[3] = (float) '!';
      floatArray0[4] = (float) 1276;
      floatArray0[5] = (float) '!';
      floatArray0[6] = (float) 1276;
      floatArray0[7] = (float) 1276;
      floatArray0[8] = 0.0F;
      String string5 = StringUtils.rightPad("\n", 88, "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("\n                                                                                       ", string5);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) 1276.0F;
      objectArray0[4] = (Object) stack0;
      objectArray0[5] = (Object) null;
      String string6 = StringUtils.join(objectArray0, 'n');
      assertNotNull(string6);
      assertEquals(6, objectArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("nnn1276.0n[]n", string6);
      
      String string7 = StringUtils.deleteWhitespace((String) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      String string0 = StringUtils.left("_:(:b._3voWx(C3", (-2363));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("_:(:b._3voWx(C3");
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((byte[]) null, 'R');
      assertNull(string1);
      
      String string2 = StringUtils.rightPad("Exception cloning Cloneable type ", (-2363), "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Exception cloning Cloneable type ", string2);
      
      String string3 = StringUtils.substring("", 4);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.uncapitalize("^-}6;$^A0c:F`]b");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("^-}6;$^A0c:F`]b", string4);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeAll("", "FZ8woUAR<;y!jT=s");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.unwrap("4JE", '!');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("4JE", string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, '!', 99, (-281));
      assertNotNull(string3);
      assertEquals(4, stringArray0.length);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("=2tVj5xn-,hAP*+$Q[y", "", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("=2tVj5xn-,hAP*+$Q[y", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string1 = StringUtils.wrapIfMissing("", 'f');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "=2tVj5xn-,hAP*+$Q[y", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfterLast("\n", "nDk`'zgL)~U");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("=2tVj5xn-,hAP*+$Q[y", "", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("=2tVj5xn-,hAP*+$Q[y", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      String string1 = StringUtils.wrapIfMissing("", 'f');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "=2tVj5xn-,hAP*+$Q[y");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNotEmpty("=2tVj5xn-,hAP*+$Q[y");
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[0];
      String string2 = StringUtils.join(floatArray0, '~');
      assertNotNull(string2);
      assertEquals(0, floatArray0.length);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("=2tVj5xn-,hAP*+$Q[y", "", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("=2tVj5xn-,hAP*+$Q[y", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string1 = StringUtils.wrapIfMissing("", 'f');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "=2tVj5xn-,hAP*+$Q[y", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOf((CharSequence) "", 57, (-3779));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOf((CharSequence) "", (CharSequence) "=2tVj5xn-,hAP*+$Q[y");
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      boolean boolean0 = StringUtils.isNotEmpty(charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.substring((String) null, 1276);
      assertNull(string1);
      
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.capitalize("");
      assertNotNull(string3);
      assertEquals("", string3);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(1276));
      
      String string4 = StringUtils.join((List<?>) stack0, '!', (int) '!', (int) '!');
      assertNotNull(string4);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertFalse(stack0.contains(1276));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-21.808422F);
      floatArray0[1] = (float) '!';
      floatArray0[2] = (float) 889;
      floatArray0[3] = (float) '!';
      floatArray0[4] = (float) 1276;
      floatArray0[5] = (float) '!';
      floatArray0[6] = (float) 1276;
      floatArray0[7] = (float) 1276;
      floatArray0[8] = 0.0F;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'o', 889, 1276);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 889
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = StringUtils.capitalize("5_4PJne0");
      assertNotNull(string0);
      assertEquals("5_4PJne0", string0);
      
      String string1 = StringUtils.substringAfter("2+*EboK[oU'pBG", "6dv{");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.normalizeSpace("5_4PJne0");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("5_4PJne0", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "6dv{", (-2954));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "5_4PJne0", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "5_4PJne0";
      stringArray0[1] = ">Uq3J>2uE";
      stringArray0[2] = "5_4PJne0";
      stringArray0[4] = "2+*EboK[oU'pBG";
      stringArray0[5] = "5_4PJne0";
      boolean boolean0 = StringUtils.equals((CharSequence) "5_4PJne0", (CharSequence) "5_4PJne0");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) ">Uq3J>2uE", (char[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Compar#tov ", "Compar#tov ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Compar#tov ";
      charSequenceArray0[1] = (CharSequence) "Compar#tov ";
      charSequenceArray0[2] = (CharSequence) "Compar#tov ";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "<+@4FtKGZ^JO\"YWF'";
      stringArray0[1] = "{}";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "<+@4FtKGZ^JO\"YWF'");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.abbreviateMiddle("<+@4FtKGZ^JO\"YWF'", "<+@4FtKGZ^JO\"YWF'", 1);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("=tVj5xn-,hAP*+$Q[y", "", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("=tVj5xn-,hAP*+$Q[y", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = 'G';
      charArray0[2] = 'h';
      charArray0[3] = 'p';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "=tVj5xn-,hAP*+$Q[y", charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'p', 'G', 'h', 'p'}, charArray0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("", "", 64);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("=tVj5xn-,hAP*+$Q[y", "=tVj5xn-,hAP*+$Q[y", "");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 18
         // =tVj5xn-,hAP*+$Q[y
         //                   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.difference("-3?O7wnW?D_W", (String) null);
      assertNotNull(string0);
      assertEquals("-3?O7wnW?D_W", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "-3?O7wnW?D_W";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "-3?O7wnW?D_W";
      charSequenceArray0[3] = (CharSequence) "-3?O7wnW?D_W";
      charSequenceArray0[4] = (CharSequence) "-3?O7wnW?D_W";
      String string1 = StringUtils.prependIfMissing("-3?O7wnW?D_W", "-3?O7wnW?D_W", charSequenceArray0);
      assertNotNull(string1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("-3?O7wnW?D_W", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("|Hbx.8Q?.@8I*hgOc", "-,) 14S=ox9|q*", " has no clone method");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 1
         // -,) 14S=ox9|q*
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String string0 = StringUtils.difference("n~s%-jd'o-jd'oG", (String) null);
      assertNotNull(string0);
      assertEquals("n~s%-jd'o-jd'oG", string0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      String string0 = StringUtils.stripStart("ch", "ch");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[3];
      charArray0[2] = 'H';
      String string1 = StringUtils.substringBefore((String) null, "H=et?#@eY$/)");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "H=et?#@eY$/)", (CharSequence) "_~pw;iY*w");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.removeStartIgnoreCase("LNuk>Qz|sjw", "9BjqlOe%f4$vrT");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("LNuk>Qz|sjw", string1);
      
      charSequenceArray0[1] = (CharSequence) "LNuk>Qz|sjw";
      charSequenceArray0[2] = (CharSequence) "LNuk>Qz|sjw";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string2 = StringUtils.deleteWhitespace("h>{$duJojx6Vf30B");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("h>{$duJojx6Vf30B", string2);
      
      charSequenceArray0[5] = (CharSequence) "h>{$duJojx6Vf30B";
      String string3 = StringUtils.prependIfMissingIgnoreCase("LNuk>Qz|sjw", "", charSequenceArray0);
      assertNotNull(string3);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("LNuk>Qz|sjw", string3);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String string0 = StringUtils.overlay("Z]G|Vn#", "Z]G|Vn#", 41, 41);
      assertNotNull(string0);
      assertEquals("Z]G|Vn#Z]G|Vn#", string0);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      String string0 = StringUtils.replacePattern("Hj:*\"6@I4RMPf}<", "Hj:*\"6@I4RMPf}<", "Hj:*\"6@I4RMPf}<");
      assertNotNull(string0);
      assertEquals("Hj:*\"6@I4RMPf}<", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("Hj:*\"6@I4RMPf}<", "Threshold must not be negative", "/r-\"w=sW%t~or%qa?L");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Hj:*\"6@I4RMPf}<", string1);
      
      int int0 = StringUtils.compareIgnoreCase("Hj:*\"6@I4RMPf}<", "#", false);
      assertEquals(69, int0);
      
      String string2 = StringUtils.repeat('M', 54);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM", string2);
      
      String string3 = StringUtils.replaceIgnoreCase("hJg|3PZ[]", "#", "PZqS)U= FO!.D>{H]qHj]");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("hJg|3PZ[]", string3);
      
      boolean boolean0 = StringUtils.isBlank("Hj:*\"6@I4RMPf}<");
      assertFalse(boolean0);
      
      String string4 = StringUtils.chomp("/r-\"w=sW%t~or%qa?L");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("/r-\"w=sW%t~or%qa?L", string4);
      
      boolean boolean1 = StringUtils.isEmpty("PZqS)U= FO!.D>{H]qHj]");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.center("/r-\"w=sW%t~or%qa?L", 54, '$');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("$$$$$$$$$$$$$$$$$$/r-\"w=sW%t~or%qa?L$$$$$$$$$$$$$$$$$$", string5);
      
      int int1 = StringUtils.ordinalIndexOf("hJg|3PZ[]", "PZqS)U= FO!.D>{H]qHj]", 54);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.overlay("/r-\"w=sW%t~or%qa?L", "`(@\"QHdLmU61S", 844, 844);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("/r-\"w=sW%t~or%qa?L`(@\"QHdLmU61S", string6);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      String string0 = StringUtils.abbreviate("LNuk>Qz|sjw", "LNuk>Qz|sjw", 2109);
      assertNotNull(string0);
      assertEquals("LNuk>Qz|sjw", string0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string0));
      
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      assertNotNull(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      boolean boolean0 = predicate1.test("LNuk>Qz|sjw");
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertTrue(boolean0);
      
      Predicate<String> predicate3 = Predicate.isEqual((Object) predicate1);
      assertNotNull(predicate3);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate4 = predicate1.and(predicate0);
      assertNotNull(predicate4);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      
      Predicate<Object> predicate5 = predicate0.and(predicate1);
      assertNotNull(predicate5);
      assertNotSame(predicate5, predicate4);
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'M'}, charArray0);
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals("M", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      
      boolean boolean1 = predicate4.test(charBuffer0);
      assertNotSame(predicate4, predicate5);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'M'}, charArray0);
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals("M", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = arrayList0.removeIf(predicate4);
      assertNotSame(predicate4, predicate5);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(boolean2);
      assertFalse(arrayList0.contains("LNuk>Qz|sjw"));
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("LNuk>Qz|sjw"));
      
      String string1 = StringUtils.join((List<?>) arrayList0, "LNuk>Qz|sjw", 1006, 1006);
      assertNotNull(string1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertFalse(arrayList0.contains("LNuk>Qz|sjw"));
      
      String string2 = StringUtils.removeFirst((String) null, "LNuk>Qz|sjw");
      assertNull(string2);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-51);
      byteArray0[5] = (byte)17;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)24;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertNotNull(byteBuffer0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-89), (byte)66, (byte)127, (byte) (-51), (byte)17, (byte) (-1), (byte)24}, byteArray0);
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(8, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(8, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=8 cap=8]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-89), (byte)66, (byte)127, (byte) (-51), (byte)17, (byte) (-1), (byte)24}, byteArray0);
      assertEquals("\u0000\uFFFDB\uFFFD\u0011\uFFFD\u0018", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertEquals(8, charBuffer1.length());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertEquals(8, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      assertEquals(8, charBuffer1.capacity());
      assertEquals(8, charBuffer1.remaining());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals(8, byteBuffer0.capacity());
      assertEquals(8, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=8 lim=8 cap=8]", byteBuffer0.toString());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(8, byteBuffer0.position());
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) charBuffer1, (CharSequence) charBuffer1, (-1989));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(751);
      assertNotNull(byteBuffer0);
      assertEquals(0, byteBuffer0.position());
      assertEquals(751, byteBuffer0.limit());
      assertEquals(751, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=751 cap=751]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(751, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(751, byteBuffer0.position());
      assertEquals(751, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=751 lim=751 cap=751]", byteBuffer0.toString());
      assertEquals(751, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(751, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(751, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(751, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(751, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      
      boolean boolean0 = StringUtils.isAllLowerCase(charBuffer0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(751, byteBuffer0.position());
      assertEquals(751, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=751 lim=751 cap=751]", byteBuffer0.toString());
      assertEquals(751, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(751, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(751, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(751, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(751, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank(charBuffer0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(751, byteBuffer0.position());
      assertEquals(751, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=751 lim=751 cap=751]", byteBuffer0.toString());
      assertEquals(751, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(751, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(751, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(751, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(751, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = (-1220);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) charBuffer0, (CharSequence) charBuffer0, (-1220));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      Locale locale0 = new Locale("(%93(% -", "+:X^x)", "^M$BkDI[dk]");
      assertNotNull(locale0);
      assertEquals("+:X^X)", locale0.getCountry());
      assertEquals("(%93(% -", locale0.getLanguage());
      assertEquals("^M$BkDI[dk]", locale0.getVariant());
      assertEquals("(%93(% -_+:X^X)_^M$BkDI[dk]", locale0.toString());
      
      int int0 = StringUtils.getFuzzyDistance("Tz!9o!u6_jlt *PA#&/p[8n~s%G", "#", locale0);
      assertEquals("+:X^X)", locale0.getCountry());
      assertEquals("(%93(% -", locale0.getLanguage());
      assertEquals("^M$BkDI[dk]", locale0.getVariant());
      assertEquals("(%93(% -_+:X^X)_^M$BkDI[dk]", locale0.toString());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      String string0 = StringUtils.trim("qSN#]L|}5qZ");
      assertNotNull(string0);
      assertEquals("qSN#]L|}5qZ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      
      int int0 = StringUtils.getFuzzyDistance("qSN#]L|}5qZ", "qSN#]L|}5qZ", locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals(31, int0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("Xw+!rjJ.s+E`G`m", " Bav/8-D", "qSN#]L|}5qZ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Xw+!rjJ.s+E`G`m", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Xw+!rjJ.s+E`G`m", "qSN#]L|}5qZ", 76);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      
      int int0 = StringUtils.getFuzzyDistance("Strings must not be null", "Strings must not be null", locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals(70, int0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      String string0 = StringUtils.unwrap("ln}?6<^]?5Yoc", "\"tcuf~Dd|l");
      assertNotNull(string0);
      assertEquals("ln}?6<^]?5Yoc", string0);
      
      String string1 = StringUtils.chomp("ln}?6<^]?5Yoc", "A.DwS+Ef<T1");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("ln}?6<^]?5Yoc", string1);
      
      String string2 = StringUtils.swapCase((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.unwrap("Search and Replace array lengths don't match: ", "^4`");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      
      String string4 = StringUtils.replace("\"tcuf~Dd|l", "Search and Replace array lengths don't match: ", "Locale must not be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\"tcuf~Dd|l", string4);
      
      String string5 = StringUtils.removePattern("%Mggiuf$<*LrQS&J_#", "ln}?6<^]?5Yoc");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("%Mggiuf$<*LrQS&J_#", string5);
      
      String string6 = StringUtils.replaceOnce("Locale must not be null", "Search and Replace array lengths don't match: ", (String) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("Locale must not be null", string6);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.ArrayUtils", "K");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string7 = StringUtils.trim("");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      
      int int0 = StringUtils.getFuzzyDistance("A.DwS+Ef<T1", "ln}?6<^]?5Yoc", locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      String string0 = "mEGI8X}.L~KIAal^$c";
      String string1 = "*;'3<5SzU[TXRY'w";
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("mEGI8X}.L~KIAal^$c", "*;'3<5SzU[TXRY'w", "mEGI8X}.L~KIAal^$c");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 0
         // *;'3<5SzU[TXRY'w
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("|^");
      assertNotNull(string0);
      assertEquals("|^", string0);
      
      boolean[] booleanArray0 = new boolean[0];
      String string1 = StringUtils.join(booleanArray0, '5', 3, 3);
      assertNotNull(string1);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceChars("PZqS)U= FO!.D>", '[', '[');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("PZqS)U= FO!.D>", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "PZqS)U= FO!.D>", 322);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("9vKy", "4");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "PZqS)U= FO!.D>", (CharSequence) "|^");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.join((Object[]) stringArray0, "9vKy");
      assertNotNull(string3);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("9vKy", string3);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "4", (CharSequence) "PZqS)U= FO!.D>");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.replaceOnce("Q]O7Q h=r(IQAfERq", "PZqS)U= FO!.D>", "9vKy");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Q]O7Q h=r(IQAfERq", string4);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      String string0 = StringUtils.replaceChars("p{InComrray element ", "p{InComrray element ", "p{InComrray element ");
      assertNotNull(string0);
      assertEquals("p{InComrray element ", string0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)88;
      shortArray0[3] = (short)88;
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "p{InComrray element ", (CharSequence) "p{InComrray element ", 36);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString("p{InComrray element ", "\n");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("p{InComrray element ", string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "p{InComrray element ", (CharSequence) "p{InComrray element ", (int) (short)88);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isBlank("\n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-39);
      String string0 = StringUtils.join(byteArray0, 'W');
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-39)}, byteArray0);
      assertEquals("90W-39", string0);
      
      String string1 = StringUtils.truncate("#@~i3Y%", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isBlank("90W-39");
      assertFalse(boolean0);
      
      String string2 = StringUtils.center("{}vy1Ty6mt<A4rTxIH}*", 14);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{}vy1Ty6mt<A4rTxIH}*", string2);
      
      String string3 = StringUtils.stripEnd("4[u-`Sbi;!5#c7`%d", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("4[u-`Sbi;!5#c7`%d", string3);
      
      String string4 = StringUtils.unwrap("iGoID45wpb<dtR[W-uQ", 'W');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("iGoID45wpb<dtR[W-uQ", string4);
      
      String string5 = StringUtils.abbreviate(" has no clone method", (String) null, 71, 2611);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(" has no clone method", string5);
      
      boolean boolean1 = StringUtils.isNotBlank("4[u-`Sbi;!5#c7`%d");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.defaultString("(OI", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(OI", string1);
      
      String string2 = StringUtils.replaceOnce("", "(OI", "je");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("1]qjH", "je");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("je1]qjHje", string3);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'p';
      charArray0[4] = 'D';
      charArray0[6] = '\u0081';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "je1]qjHje", charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'G', 'G', 'p', '\u0000', 'D', '\u0000', '\u0081'}, charArray0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "je", (CharSequence) "(OI");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'G';
      intArray0[1] = (int) 'p';
      String string4 = StringUtils.join(intArray0, 'a');
      assertNotNull(string4);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {71, 112}, intArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("71a112", string4);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      String string0 = StringUtils.rotate("", 1482);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      String string1 = locale0.getScript();
      assertNotNull(string1);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = locale0.getDisplayLanguage();
      assertNotNull(string2);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("German", string2);
      
      Locale locale1 = Locale.JAPAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JP", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      
      Locale locale2 = locale1.stripExtensions();
      assertNotNull(locale2);
      assertNotSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JP", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("JP", locale2.getCountry());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("ja_JP", locale2.toString());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      
      String string3 = locale0.getDisplayLanguage(locale2);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JP", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("JP", locale2.getCountry());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("ja_JP", locale2.toString());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\u30C9\u30A4\u30C4\u8A9E", string3);
      
      String string4 = locale0.getDisplayName();
      assertNotNull(string4);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("German (Germany)", string4);
      
      String string5 = locale0.getDisplayVariant(locale1);
      assertNotNull(string5);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertNotSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JP", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      
      String string6 = StringUtils.upperCase("", locale0);
      assertNotNull(string6);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      
      String string7 = StringUtils.removePattern("", "");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      
      String string8 = StringUtils.truncate("", 57);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", string8);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      String string9 = StringUtils.join((char[]) null, '2', 1482, 26);
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.defaultString("f0p=}]=guLAv^vQ", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string0);
      assertEquals("f0p=}]=guLAv^vQ", string0);
      
      int int0 = StringUtils.compareIgnoreCase("Locale must not beL~", "Locale must not beL~");
      assertEquals(0, int0);
      
      String string1 = StringUtils.leftPad("5*(7.+Jt]", 0, "Locale must not beL~");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("5*(7.+Jt]", string1);
      
      String string2 = StringUtils.wrapIfMissing((String) null, 'H');
      assertNull(string2);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 'H';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '}', 0, 3718);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      Comparator<CharBuffer> comparator0 = (Comparator<CharBuffer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>(comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      String string0 = StringUtils.substring("0", 64);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      
      boolean boolean0 = priorityQueue0.add(charBuffer0);
      assertEquals(1, priorityQueue0.size());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains(charBuffer0));
      
      Iterator<CharBuffer> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains(charBuffer0));
      
      String string1 = StringUtils.join(iterator0, 'x');
      assertNotNull(string1);
      assertEquals(1, priorityQueue0.size());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertTrue(priorityQueue0.contains(charBuffer0));
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      priorityQueue0.clear();
      assertEquals(0, priorityQueue0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = priorityQueue0.add(object0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains(object0));
      
      String string0 = StringUtils.join((Iterable<?>) enumSet0, 'p');
      assertNotNull(string0);
      assertEquals(1, enumSet0.size());
      assertEquals("DISPLAY", string0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("object", 2453, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.swapCase(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\U", string1);
      
      long[] longArray0 = new long[3];
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string0));
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      assertEquals(Locale.Category.DISPLAY, locale_Category0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) locale_Category0);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<Object> predicate2 = predicate1.negate();
      assertNotNull(predicate2);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate2, predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      boolean boolean0 = arrayList0.removeIf(predicate2);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate2, predicate1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(boolean0);
      assertFalse(arrayList0.contains(string0));
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string0));
      
      String string2 = StringUtils.join((List<?>) arrayList0, string0, (-966), (-2733));
      assertNotNull(string2);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertFalse(arrayList0.contains(string0));
      
      String string3 = StringUtils.removeFirst(" ~4^S", "Minimum abbreviation width with offset is %d");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" ~4^S", string3);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      String string0 = StringUtils.removeAll("ch", "ch");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.normalizeSpace("by1^dEcgea9pu*lj");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("by1^dEcgea9pu*lj", string1);
      
      int int0 = StringUtils.ordinalIndexOf("", "by1^dEcgea9pu*lj", 14);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.removeStart("n~s%-jd'o-jd'oG", "v~()");
      assertNotNull(string0);
      assertEquals("n~s%-jd'o-jd'oG", string0);
      
      String string1 = StringUtils.capitalize("n~s%-jd'o-jd'oG");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("N~s%-jd'o-jd'oG", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string2 = StringUtils.prependIfMissingIgnoreCase("n~s%-jd'o-jd'oG", "N~s%-jd'o-jd'oG", charSequenceArray0);
      assertNotNull(string2);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("n~s%-jd'o-jd'oG", string2);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("M`J^:'", "", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("M`J^:'", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      String string1 = StringUtils.wrapIfMissing("", 'p');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.join((double[]) null, 'p', (-257), (-738));
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("1]qjH", "1]qjH");
      assertNotNull(string0);
      assertEquals("1]qjH", string0);
      
      String string1 = StringUtils.reverse(" is not in the range '0' - '9'");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("'9' - '0' egnar eht ni ton si ", string1);
      
      int int0 = (-1602);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("VSP", 87, (-1602));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("Object varargs must not be null", "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object2));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      
      String string0 = StringUtils.removeAll(" in an array of ", " in an array of ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) " in an array of ", (CharSequence[]) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", " in an array of ");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isNumericSpace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.difference("!\"AJ2He :Wz@g4=;", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "RcK\u0003;", (CharSequence) null, 19);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = ']';
      charArray0[4] = 'q';
      charArray0[3] = 'j';
      charArray0[4] = 'H';
      String string0 = StringUtils.valueOf(charArray0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'1', ']', '\u0000', 'j', 'H'}, charArray0);
      assertEquals("1]\u0000jH", string0);
      
      String string1 = StringUtils.wrapIfMissing("1]\u0000jH", ", Length: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", Length: 1]\u0000jH, Length: ", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("1]\u0000jH", "1]\u0000jH", 52);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      String string0 = StringUtils.removeFirst("p{InCombiningDiacriticalMarks}+", "9vKy");
      assertNotNull(string0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      
      String string1 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "|");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("|", string1);
      
      String string2 = StringUtils.trimToEmpty("|");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("|", string2);
      
      String[] stringArray0 = StringUtils.split("p{InCombiningDiacriticalMarks}+", 'K');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string3);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      
      String string4 = StringUtils.removeStart("|", "|");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      String string0 = StringUtils.substringAfter(" has no clone method", 64);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring("fzWp8", 14, 48);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfterLast("\n", " has no clone method");
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) " has no clone method", "5MAoSc4,V;}OaDkx>Z");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.unwrap("", "oH7rE.jYCOjXjv");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("", "");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string4 = StringUtils.trim("nYehG!Mw5");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("nYehG!Mw5", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "nYehG!Mw5";
      charSequenceArray0[1] = (CharSequence) "";
      String string5 = StringUtils.wrapIfMissing("offset cannot be negative", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("offset cannot be negative", string5);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.RegExUtils", "hJg|3PZ[]", 64);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.defaultString("(OI", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(OI", string1);
      
      String string2 = StringUtils.replaceOnce("", "(OI", "je");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("JE", "je");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("jeJEje", string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "je", (CharSequence) "(OI");
      assertEquals(0, int0);
      
      String string4 = StringUtils.reverseDelimited("", '\u0081');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.mid("", '\u0081', '\u0081');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String string6 = StringUtils.deleteWhitespace("JE");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("JE", string6);
      
      int int1 = StringUtils.compareIgnoreCase("...", "(OI", false);
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      
      String string7 = StringUtils.wrapIfMissing("", "0qp>B:IA2Om");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "(OI", (CharSequence) "(OI");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string8 = StringUtils.defaultString("", "_");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      String string0 = StringUtils.substring("", 49, 4);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("org.apache.commons.lang3.LocaleUtils", 100, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                                org.apache.commons.lang3.LocaleUtils                                ", string1);
      
      String string2 = StringUtils.wrapIfMissing("                                org.apache.commons.lang3.LocaleUtils                                ", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("                                org.apache.commons.lang3.LocaleUtils                                ", string2);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      String string0 = StringUtils.stripToNull("eO6M|U]Za");
      assertNotNull(string0);
      assertEquals("eO6M|U]Za", string0);
      
      String string1 = StringUtils.center("xH`FY3`z4`jcH", (-1958), "NKOOg!K/G/%");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("xH`FY3`z4`jcH", string1);
      
      String string2 = StringUtils.join((char[]) null, 'y');
      assertNull(string2);
      
      String string3 = StringUtils.remove("NKOOg!K/G/%", 'y');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("NKOOg!K/G/%", string3);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("=tVj5xn-,hAP*+$Q[y", "", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("=tVj5xn-,hAP*+$Q[y", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtilsException cloning Cloneable type ", "hJg|3PZ[]", 7);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("=tVj5xn-,hAP*+$Q[y", "", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("=tVj5xn-,hAP*+$Q[y", string0);
      
      char[] charArray0 = new char[4];
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("=tVj5xn-,hAP*+$Q[y", "vy1Ty6mt<A4rTxIH}*");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "vy1Ty6mt<A4rTxIH}*", (CharSequence) "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.right("<)=[Qwj]\"6u'!Hj7zF", (-1582));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.join(charArray0, 'U');
      assertNotNull(string2);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\u0000U\u0000U\u0000U\u0000", string2);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("Gy*'3Rlc?/#1?7=", "\u0000U\u0000U\u0000U\u0000");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string3);
      assertEquals(6, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("=", string3);
      
      byte[] byteArray0 = StringUtils.getBytes("", (Charset) null);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      String string4 = StringUtils.getDigits("vy1Ty6mt<A4rTxIH}*");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("164", string4);
      
      String string5 = StringUtils.join((List<?>) null, '7', Integer.MAX_VALUE, 50);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-39);
      String string0 = StringUtils.join(byteArray0, 'W');
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-39)}, byteArray0);
      assertEquals("90W-39", string0);
      
      String string1 = StringUtils.truncate("#@~i3Y%", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = '}';
      charArray0[2] = 'p';
      charArray0[3] = 'G';
      charArray0[4] = '}';
      charArray0[5] = 'h';
      charArray0[6] = 'W';
      charArray0[7] = 'p';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "#@~i3Y%", charArray0);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'G', '}', 'p', 'G', '}', 'h', 'W', 'p'}, charArray0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("", "", (-412));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      String string0 = StringUtils.substringAfter("o@dJoQb1*", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 4);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "o@dJoQb1*");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '{';
      charArray0[1] = 'H';
      charArray0[2] = ']';
      charArray0[3] = 'q';
      charArray0[4] = 'H';
      charArray0[5] = 'j';
      charArray0[6] = ']';
      String string2 = StringUtils.valueOf(charArray0);
      assertNotNull(string2);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'{', 'H', ']', 'q', 'H', 'j', ']'}, charArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("{H]qHj]", string2);
      
      String string3 = StringUtils.wrapIfMissing("{H]qHj]", "PZqS)U= FO!.D>");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("PZqS)U= FO!.D>{H]qHj]PZqS)U= FO!.D>", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", ", Length: ", 0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      String string0 = StringUtils.remove("Kn)Q2c1*O%hh7", 'Y');
      assertNotNull(string0);
      assertEquals("Kn)Q2c1*O%hh7", string0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      intArray0[1] = (int) 'Y';
      intArray0[2] = (int) 'Y';
      intArray0[3] = (int) 'Y';
      intArray0[4] = (int) 'Y';
      intArray0[5] = (int) 'Y';
      intArray0[6] = (int) 'Y';
      intArray0[7] = (int) 'Y';
      String string1 = StringUtils.join(intArray0, 'Y', 89, 89);
      assertNotNull(string1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {89, 89, 89, 89, 89, 89, 89, 89}, intArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.split("Kn)Q2c1*O%hh7");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.removeStart("Array and element cannot both be null", "VSP");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Array and element cannot both be null", string2);
      
      String string3 = StringUtils.capitalize("VM.|k:rqS[s*^;f@4_f");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.strip((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.join((char[]) null, 'K', (-1), 4269);
      assertNull(string5);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte) (-29);
      String string6 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertNotNull(string6);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-54), (byte) (-29)}, byteArray0);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("\u0000\uFFFD\uFFFD", string6);
      
      String[] stringArray1 = StringUtils.split((String) null, "aofaz~^,4y\"Tgccb", 4269);
      assertNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare("Kn)Q2c1*O%hh7", "Array and element cannot both be null");
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      String string0 = StringUtils.lowerCase("J");
      assertNotNull(string0);
      assertEquals("j", string0);
      
      String string1 = StringUtils.defaultString("(OI", "J");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(OI", string1);
      
      String string2 = StringUtils.wrap("J", "j");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("jJj", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "j", (CharSequence) "(OI");
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "(OI", (CharSequence) "(OI", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.uncapitalize("y:l5XfKP >DNHR/hV");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("y:l5XfKP >DNHR/hV", string3);
      
      int int2 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.difference("y:l5XfKP >DNHR/hV", (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("y:l5XfKP >DNHR/hV", string4);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      String string0 = StringUtils.substringBeforeLast("|[U(rl<zma?do5DH", "|[U(rl<zma?do5DH");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 682);
      assertEquals(0, int0);
      
      String string1 = StringUtils.uncapitalize("7JL");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7JL", string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertNotNull(string2);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "1B>]5id9", 271, 10);
      assertNotNull(string3);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.reverse("t#5#");
      assertNotNull(string0);
      assertEquals("#5#t", string0);
      
      String string1 = StringUtils.removeAll("org.apache.commons.lang3.StringUtils", "/r-\"w=sW%t~or%qa?L");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "org.apache.commons.lang3.StringUtils", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isNumericSpace("org.apache.commons.lang3.StringUtils");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.difference((String) null, "RcK\u0003;");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("RcK\u0003;", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) null, 19);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Gq", "Gq");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("Gq");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Gq", 2);
      assertEquals(2, int0);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "Gq", (-808));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = ']';
      charArray0[2] = 'q';
      charArray0[3] = 'j';
      charArray0[4] = 'H';
      String string0 = StringUtils.valueOf(charArray0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'1', ']', 'q', 'j', 'H'}, charArray0);
      assertEquals("1]qjH", string0);
      
      String string1 = StringUtils.wrapIfMissing("1]qjH", ", Length: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", Length: 1]qjH, Length: ", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("1]qjH", "1]qjH", 52);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ", Length: 1]qjH, Length: ", (CharSequence) ", Length: ", 48);
      assertEquals(15, int0);
      
      String string2 = StringUtils.uncapitalize("qSN#]L|}5qZ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("qSN#]L|}5qZ", string2);
      
      boolean boolean0 = StringUtils.isAlpha(", Length: ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.wrap("s#9Sk'G$^k;U]_", 'o');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("os#9Sk'G$^k;U]_o", string3);
      
      int int1 = StringUtils.lastIndexOfAny("os#9Sk'G$^k;U]_o", stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(int1 == int0);
      assertEquals(16, int1);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      char[] charArray0 = new char[1];
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      String string0 = StringUtils.wrapIfMissing("", 'f');
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(10, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "M`J^:'", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.lowerCase("qSN#]L|};5qZ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("qsn#]l|};5qz", string1);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.wrap("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare("org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", "~_i5LiA@J;vF$XS@|", false);
      assertEquals((-15), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils", (-15));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\r";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.getCommonPrefix(stringArray1);
      assertNotNull(string0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\r", (CharSequence) "", 4);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.join((long[]) null, 'x', 2887, 9);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.substringBefore((String) null, 52);
      assertNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'x';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'h', 'x'}, charArray0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.abbreviate((String) null, (-32768), 0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      int int0 = 0;
      String string0 = "=adyA(Ezi >";
      String[] stringArray0 = StringUtils.split("=adyA(Ezi >", "org.apache.commons.lang3.ObjectUtils", (-1532));
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string1 = "?*R6W\"@D~-rmM'B/;";
      // Undeclared exception!
      try { 
        StringUtils.truncate("?*R6W\"@D~-rmM'B/;", (-1532));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      String string0 = StringUtils.substring("@<&0", (-72));
      assertNotNull(string0);
      assertEquals("@<&0", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("@<&0", 127, (-72));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      String string0 = StringUtils.removeEnd("]JE", "]JE");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEachRepeatedly("Kv`M~#D1$l1#s", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Kv`M~#D1$l1#s", string1);
      
      String string2 = StringUtils.defaultString(", '", "]JE");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(", '", string2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[3] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = '8';
      charArray0[5] = '8';
      charArray0[6] = 'j';
      charArray0[7] = '8';
      charArray0[8] = 'k';
      String string3 = StringUtils.join(charArray0, 'T', 13, (-162043092));
      assertNotNull(string3);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'-', '\u0000', '8', '8', '8', '8', 'j', '8', 'k'}, charArray0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAlpha("]JE");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase(", '", "", true);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.join((int[]) null, 'p', 271, 271);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      String string2 = StringUtils.swapCase((String) null);
      assertNull(string2);
      
      charSequenceArray0[2] = (CharSequence) null;
      String string3 = StringUtils.removeEndIgnoreCase("", "}PXcKa");
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.wrap("", (String) null);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = 'o';
      charArray0[3] = 'p';
      charArray0[4] = 'p';
      charArray0[5] = 'o';
      int int0 = StringUtils.indexOfAny(charSequenceArray0[3], charArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'p', 'p', 'o', 'p', 'p', 'o'}, charArray0);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.removeEnd("{}", "vy1Ty6mt<A4rTxIH}*");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("{}", string5);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("\n", "vy1Ty6mt<A4rTxIH}*", (-2959));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "]vP)*V)5KQ`:7>W!");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string2 = StringUtils.stripToNull("h");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals("h", string2);
      
      charSequenceArray0[3] = (CharSequence) "h";
      String string3 = StringUtils.removeStartIgnoreCase("h", "h");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string4 = StringUtils.truncate("v", 97);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("v", string4);
      
      charSequenceArray0[5] = (CharSequence) "v";
      String string5 = StringUtils.rotate("", 97);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      
      charSequenceArray0[6] = (CharSequence) "";
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = ':';
      charArray0[2] = '$';
      charArray0[3] = ']';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'a', ':', '$', ']'}, charArray0);
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("a:$]", charBuffer0.toString());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      
      charSequenceArray0[7] = (CharSequence) charBuffer0;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string6 = StringUtils.join((Object[]) charSequenceArray0, ':', 0, 2);
      assertNotNull(string6);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("org.apache.commons.lang3.StringUtils:org.apache.commons.lang3.StringUtils", string6);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMJE", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.center(".ZeF!kLt.ZeF!kLt", 2);
      assertNotNull(string0);
      assertEquals(".ZeF!kLt.ZeF!kLt", string0);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase(" is not in the range '0' - '9'", ".ZeF!kLt.ZeF!kLt");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(" is not in the range '0' - '9'", string2);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.EMPTY;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.substring("E`G)2r$/8U", 2, 2);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.endsWithAny(".ZeF!kLt.ZeF!kLt", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.right("VSP", (-70));
      assertNotNull(string0);
      assertEquals("", string0);
      
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-2003));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[19];
      charSequenceArray0[0] = (CharSequence) "V[aBj";
      charSequenceArray0[7] = (CharSequence) "V[aBj";
      boolean boolean0 = StringUtils.endsWithAny("V[aBj", charSequenceArray0);
      assertEquals(19, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "V[aBj", (CharSequence) "V[aBj");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string1 = StringUtils.swapCase("Tz!9o!u6_jlt *PA#");
      assertNotNull(string1);
      assertEquals("tZ!9O!U6_JLT *pa#", string1);
      
      boolean[] booleanArray0 = new boolean[8];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Tz!9o!u6_jlt *PA#", (CharSequence) "8x&d'F:*mlaAqvI");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      String string0 = " c19[-Nf1+m(";
      String string1 = StringUtils.substringAfterLast(" c19[-Nf1+m(", " c19[-Nf1+m(");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = (-1345);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1345));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      String string0 = "LNuk>Qz|sjw";
      int int0 = 2109;
      String string1 = StringUtils.rotate("LNuk>Qz|sjw", 2109);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("k>Qz|sjwLNu", string1);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string2 = "Arr";
      String string3 = StringUtils.replaceOnceIgnoreCase("L", "Arr", " has no clone methodorg.apache.commons.lang3.ArrayUtils");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("L", string3);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "LNuk>Qz|sjw", (CharSequence) "L");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string4 = "Search and Replace array lengths don't match: ";
      String[] stringArray0 = StringUtils.split("L", "Search and Replace array lengths don't match: ", (-1532));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("Search and Replace array lengths don't match: ", (-1532));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "\r";
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("\r");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.equalsAny("\r", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.unwrap("", "...");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("\r");
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {13}, intArray0);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      assertNotNull(enumSet0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      assertNotNull(enumSet1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet1.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet1.iterator();
      assertNotNull(iterator0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet1.contains(locale_Category0));
      
      String string0 = StringUtils.strip("7qo", "7qo");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.center(", Length: 0", 3, "7qo");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", Length: 0", string1);
      
      CharSequence[] charSequenceArray1 = new CharSequence[3];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) ", Length: 0";
      charSequenceArray1[1] = (CharSequence) ", Length: 0";
      charSequenceArray1[2] = (CharSequence) "";
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("gagKO')RJSdLAaLEb", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(3, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.swapCase("gagKO')RJSdLAaLEb");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("GAGko')rjsDlaAleB", string2);
      
      String string3 = StringUtils.prependIfMissing(" vs ", "GAGko')rjsDlaAleB", charSequenceArray1);
      assertNotNull(string3);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(3, charSequenceArray1.length);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" vs ", string3);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "]vP)*V)5KQ`:7>W!");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string2 = StringUtils.stripToNull("h");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("h", string2);
      
      charSequenceArray0[3] = (CharSequence) "h";
      String string3 = StringUtils.removeStartIgnoreCase("h", "h");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("", string3);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string4 = StringUtils.trim("h");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("h", string4);
      
      charSequenceArray0[5] = (CharSequence) "h";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h";
      stringArray0[1] = "org.apache.commons.lang3.StringUtils";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray1.length);
      assertEquals(2, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string5 = StringUtils.removeEnd("org.apache.commons.lang3.RegExUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertEquals("org.apache.commons.lang3.RegExUtils", string5);
      
      boolean boolean1 = StringUtils.containsIgnoreCase(charSequenceArray0[0], charSequenceArray0[0]);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string6 = StringUtils.substringAfterLast("org.apache.commons.lang3.StringUtils", "");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "]vP)*V)5KQ`:7>W!", charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'o', 'o'}, charArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEachRepeatedly("Kv`M~#D1$l1#s", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Kv`M~#D1$l1#s", string1);
      
      boolean[] booleanArray0 = new boolean[0];
      String string2 = StringUtils.join(booleanArray0, 'j');
      assertNotNull(string2);
      assertEquals(0, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Kv`M~#D1$l1#s", charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("jA)", ".[");
      assertNotNull(string0);
      assertEquals(".[jA).[", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.ArrayUtils", ".[jA).[", 2418);
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.appendIfMissing("Tz!9o!u6_jlt *EA#", "p{InCombiningDiacriticalMarks}+", (CharSequence[]) null);
      assertNotNull(string0);
      assertEquals("Tz!9o!u6_jlt *EA#p{InCombiningDiacriticalMarks}+", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "p{InCombiningDiacriticalMarks}+", "Tz!9o!u6_jlt *EA#p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("ln}?6<^]?5YocA.DwS+Ef<T1");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string1 = StringUtils.replaceIgnoreCase("Tz!9o!u6_jlt *EA#", (String) null, (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Tz!9o!u6_jlt *EA#", string1);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      String string0 = StringUtils.substringAfter(" has no clone method", 64);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring("fzWp8", 14, 48);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfterLast("\n", " has no clone method");
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) " has no clone method", "5MAoSc4,V;}OaDkx>Z");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.unwrap("", "oH7rE.jYCOjXjv");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("", "");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string4 = StringUtils.trim("nYehG!Mw5");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("nYehG!Mw5", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "nYehG!Mw5";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "oH7rE.jYCOjXjv";
      boolean boolean3 = StringUtils.endsWithAny("oH7rE.jYCOjXjv", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "oH7rE.jYCOjXjv", (CharSequence) "\n");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("Search and Replace array lengths don't match: ", "oH7rE.jYCOjXjv", (-1751));
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean4 = StringUtils.containsIgnoreCase("Search and Replace array lengths don't match: ", charSequenceArray0[1]);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.compare("nYehG!Mw5", "\n", true);
      assertFalse(int1 == int0);
      assertEquals(100, int1);
      
      String string5 = StringUtils.wrapIfMissing(" has no clone method", "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.ArrayUtils has no clone methodorg.apache.commons.lang3.ArrayUtils", string5);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      String string0 = StringUtils.substringAfter("DW3SH-]%%_Ue=", "");
      assertNotNull(string0);
      assertEquals("DW3SH-]%%_Ue=", string0);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      String string0 = StringUtils.rotate("", 1345);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      
      String string1 = StringUtils.replaceChars("", "", "#L4**c>4|Pt[go4D8");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "#L4**c>4|Pt[go4D8", charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Supplied value must be a valid byte literal between -32768 and 32767: [", "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.toRootUpperCase("LNuk>Qz|sjw");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("LNUK>QZ|SJW", string1);
      
      String string2 = StringUtils.replaceChars("", "P ", "\n");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      String string3 = StringUtils.join(objectArray0, '@');
      assertNotNull(string3);
      assertEquals(1, objectArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) '@';
      floatArray0[1] = (float) '@';
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) '@';
      floatArray0[4] = (float) '@';
      floatArray0[5] = (float) '@';
      floatArray0[6] = 0.0F;
      floatArray0[7] = (float) '@';
      String string4 = StringUtils.join(floatArray0, '@', 32, 32);
      assertNotNull(string4);
      assertEquals(8, floatArray0.length);
      assertArrayEquals(new float[] {64.0F, 64.0F, (-1.0F), 64.0F, 64.0F, 64.0F, 0.0F, 64.0F}, floatArray0, 0.01F);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", "", "lW@jQd[hga~K.mF$>?'|");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "nDk`'zgL)~U", charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("lW@jQd[hga~K.mF$>?'|", "", 18);
      assertFalse(int1 == int0);
      assertEquals(20, int1);
      
      String string1 = StringUtils.stripToEmpty("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "lW@jQd[hga~K.mF$>?'|", (CharSequence) "", (-1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("=tVj5xn-,hAP*+$Q[y", "", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("=tVj5xn-,hAP*+$Q[y", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      charArray0[1] = 'G';
      charArray0[2] = 'h';
      charArray0[3] = '}';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "=tVj5xn-,hAP*+$Q[y", charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'p', 'G', 'h', '}'}, charArray0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("", "", 64);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chop("Vg-u[mXNP_K");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Vg-u[mXNP_", string1);
      
      float[] floatArray0 = new float[2];
      String string2 = StringUtils.join(floatArray0, '<', (int) '<', (int) '<');
      assertNotNull(string2);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 't', 1, (int) 't');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Cannot store ";
      String string0 = StringUtils.join((List<?>) linkedList0, '!', 882, 108);
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      assertFalse(linkedList0.contains('!'));
      
      String string1 = StringUtils.join((List<?>) linkedList0, '!', 882, 1);
      assertNotNull(string1);
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
      assertFalse(linkedList0.contains("Cannot store "));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)46;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-108);
      byteArray0[3] = (byte)46;
      byteArray0[4] = (byte)15;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)101;
      byteArray0[7] = (byte) (-108);
      byteArray0[8] = (byte)82;
      String string2 = StringUtils.join(byteArray0, '!', 882, 29);
      assertNotNull(string2);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte) (-108), (byte)46, (byte)15, (byte) (-108), (byte)101, (byte) (-108), (byte)82}, byteArray0);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha("&)");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceEach("6j9|q", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      assertEquals("6j9|q", string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("n~s%-jd'oG");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      int int0 = 10;
      String string0 = StringUtils.replaceIgnoreCase("Minimum abbreviation width with offset is %d", "P,x)q#4iSe6JS?%n", "3J5/#Smi_&_qkqU2ilE", 10);
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      String string1 = StringUtils.substringBetween("Minimum abbreviation width with offset is %d", "Locale must not be null");
      assertNull(string1);
      
      char char0 = '/';
      String string2 = StringUtils.join((Iterator<?>) null, '/');
      assertNull(string2);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 10;
      longArray0[1] = (long) '/';
      longArray0[2] = (long) 10;
      longArray0[3] = 1L;
      longArray0[4] = (-1L);
      longArray0[5] = 0L;
      longArray0[6] = (long) '/';
      longArray0[7] = (long) '/';
      longArray0[8] = (long) '/';
      String string3 = StringUtils.join(longArray0, '+', 10, 10);
      assertNotNull(string3);
      assertEquals(9, longArray0.length);
      assertArrayEquals(new long[] {10L, 47L, 10L, 1L, (-1L), 0L, 47L, 47L, 47L}, longArray0);
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[9];
      int int1 = 17;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, 17, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Iterator<String> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      
      String string0 = StringUtils.join(iterator0, '5');
      assertNotNull(string0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("", string0);
      assertFalse(priorityQueue0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Comparator<CharBuffer> comparator0 = (Comparator<CharBuffer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>(comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Iterator<CharBuffer> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      
      String string0 = StringUtils.join(iterator0, 'x');
      assertNotNull(string0);
      assertEquals(0, priorityQueue0.size());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "offset cannot be negative", " ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "offset cannot be negative";
      stringArray0[6] = "offset cannot be negative";
      String string1 = StringUtils.substringBetween("", "", "offset cannot be negative");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string2);
      assertEquals(7, stringArray0.length);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) string1, (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.replaceFirst("", "", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String[] stringArray1 = StringUtils.split("|", (String) null);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string4 = StringUtils.lowerCase("\r", locale0);
      assertNotNull(string4);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\r", string4);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "\r", "");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        Charset.forName("\r");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \r
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[2] = (CharSequence) "/r\"wgsWh%t~or%qa?L";
      charSequenceArray0[3] = (CharSequence) "/r\"wgsWh%t~or%qa?L";
      charSequenceArray0[4] = (CharSequence) "/r\"wgsWh%t~or%qa?L";
      String string0 = StringUtils.chomp("Stringsnegative");
      assertNotNull(string0);
      assertEquals("Stringsnegative", string0);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[5], charSequenceArray0[3]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object2));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object2));
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertNotNull(object7);
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object1));
      
      objectArray0[7] = object7;
      String string0 = StringUtils.join(objectArray0, 'o');
      assertNotNull(string0);
      assertEquals(8, objectArray0.length);
      
      String string1 = StringUtils.substringAfter("java.lang.Object@44e7009dojava.lang.Object@6aed006aojava.lang.Object@166088a8ojava.lang.Object@15b76423ojava.lang.Object@69286de0ojava.lang.Object@6b44deffojava.lang.Object@79732ef7ojava.lang.Object@574bdb86", 1734);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.repeat("", "java.lang.Object@44e7009dojava.lang.Object@6aed006aojava.lang.Object@166088a8ojava.lang.Object@15b76423ojava.lang.Object@69286de0ojava.lang.Object@6b44deffojava.lang.Object@79732ef7ojava.lang.Object@574bdb86", 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("p{InCombiningDiacriticalMarks}+", "The Array must not be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "The Array must not be null";
      charSequenceArray0[3] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      PriorityQueue<Locale.Category> priorityQueue0 = new PriorityQueue<Locale.Category>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>(priorityQueue0);
      assertNotNull(linkedList0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(object5));
      
      String string4 = StringUtils.join((Iterable<?>) linkedList0, 'w');
      assertNotNull(string4);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      assertFalse(linkedList0.contains(object5));
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[19];
      charSequenceArray0[0] = (CharSequence) "Miimum abbreviation wdth with offset is#%d";
      charSequenceArray0[5] = (CharSequence) "VOc";
      charSequenceArray0[0] = (CharSequence) "Miimum abbreviation wdth with offset is#%d";
      String string0 = StringUtils.substringBetween("Miimum abbreviation wdth with offset is#%d", "', has a length less than 2");
      assertNull(string0);
      
      String string1 = StringUtils.stripAccents("...");
      assertNotNull(string1);
      assertEquals("...", string1);
      
      String string2 = StringUtils.remove("40fOCb3-6", "=>'wDTr]/");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("40fOCb3-6", string2);
      
      String string3 = StringUtils.substringBetween("=>'wDTr]/", "=>'wDTr]/");
      assertNull(string3);
      
      String string4 = StringUtils.toRootUpperCase("Miimum abbreviation wdth with offset is#%d");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("MIIMUM ABBREVIATION WDTH WITH OFFSET IS#%D", string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "40fOCb3-6", (CharSequence) "=>'wDTr]/", 53);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertEquals(19, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.trimToNull("org.apache.commons.lang3.Charsets");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.Charsets", string1);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.reverseDelimited("-d)9mtkLI", '~');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-d)9mtkLI", string2);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "je";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.Charsets";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.Charsets";
      charSequenceArray0[3] = (CharSequence) "-d)9mtkLI";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.Charsets";
      charSequenceArray0[5] = (CharSequence) "je";
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "-d)9mtkLI", (Supplier<CharSequence>) null);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("-d)9mtkLI", charSequence0);
      
      charSequenceArray0[6] = (CharSequence) "-d)9mtkLI";
      charSequenceArray0[7] = (CharSequence) "je";
      charSequenceArray0[8] = (CharSequence) "-d)9mtkLI";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("org.apache.commons.lang3.Charsets", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("_0oB?N");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (-317));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.removePattern("\"q7d ]AZRX", "\"q7d ]AZRX");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceOnce("4>$PKH{?", "", "4>$PKH{?");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("4>$PKH{?", string2);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string3 = StringUtils.difference("Comparator should not be null.x_._Ry6q[Cj((w`D`;", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Comparator should not be null.x_._Ry6q[Cj((w`D`;", string3);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(188, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = StringUtils.ordinalIndexOf(charSequenceArray0[0], charSequenceArray0[0], 97);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean2 = StringUtils.startsWithAny("Comparator should not be null.x_._Ry6q[Cj((w`D`;", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.equalsAnyIgnoreCase("Exceptioncloning Clone null", stringArray0);
      assertEquals(188, stringArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string4 = StringUtils.stripEnd((String) null, "");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.right((String) null, (-1610));
      assertNull(string1);
      
      String string2 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string2);
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, "");
      assertFalse(boolean0);
      
      String string3 = StringUtils.unwrap("FPV[w8ya{a5a;v?8Js", '9');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertEquals("FPV[w8ya{a5a;v?8Js", string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '9';
      charArray0[1] = '9';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "FPV[w8ya{a5a;v?8Js", charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'9', '9'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) ",rs";
      charSequenceArray0[1] = (CharSequence) ",rs";
      charSequenceArray0[2] = (CharSequence) ",rs";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.ordinalIndexOf(charSequenceArray0[2], charSequenceArray0[2], 1680);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.startsWithAny(",rs", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase(",rs", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.join((long[]) null, 'x', 2887, 9);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.substringBefore((String) null, 52);
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], charSequenceArray0[0], Integer.MAX_VALUE);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.compare("", "", false);
      assertEquals(0, int0);
      
      String string2 = StringUtils.chop((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      String string0 = StringUtils.substringAfter("o@dJoQb1*", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 4);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "o@dJoQb1*");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.swapCase("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      int int1 = StringUtils.compare("fQgC&f", "Index: ", false);
      assertFalse(int1 == int0);
      assertEquals(29, int1);
      
      String[] stringArray0 = StringUtils.split("p", '6');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.chop("Exception cloning Cloneable type ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Exception cloning Cloneable type", string4);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      String string0 = StringUtils.chop("ik/h>s8}oa3f 'q7");
      assertNotNull(string0);
      assertEquals("ik/h>s8}oa3f 'q", string0);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("xQ~.$Xq", ']');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceOnceIgnoreCase("xQ~.$Xq", "xQ~.$Xq", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) ']';
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) ']';
      String string1 = StringUtils.join(doubleArray0, ']');
      assertNotNull(string1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {93.0, 0.0, 93.0}, doubleArray0, 0.01);
      assertFalse(string1.equals((Object)string0));
      assertEquals("93.0]0.0]93.0", string1);
      
      String string2 = StringUtils.substringAfter("xQ~.$Xq", (-571));
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.substringBefore("93.0]0.0]93.0", 0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("93.0]0.0]93.0", string3);
      
      boolean boolean0 = StringUtils.isAlpha("93.0]0.0]93.0");
      assertFalse(boolean0);
      
      String string4 = StringUtils.normalizeSpace("Array and element cannot both be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Array and element cannot both be null", string4);
      
      try { 
        StringUtils.getBytes("Search and Replace array lengths don't match: ", "93.0]0.0]93.0");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-39);
      String string0 = StringUtils.join(byteArray0, 'W');
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-39)}, byteArray0);
      assertEquals("90W-39", string0);
      
      String string1 = StringUtils.truncate("#@~i3Y%", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "#@~i3Y%");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "#@~i3Y%", (CharSequence) "90W-39");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.right("Gy*'3Rlc?/#1?7=", 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("", "");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string3 = StringUtils.unwrap("The String must not be empty", 'W');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("The String must not be empty", string3);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "]vP)*V)5KQ`:7>W!");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.swapCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ORG.APACHE.COMMONS.LANG3.sTRINGuTILS", string2);
      
      boolean boolean0 = StringUtils.equals(charSequenceArray0[0], (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.right("org.apache.commons.lang3.StringUtils", (-1091));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.endsWith("org.apache.commons.lang3.StringUtils", "ORG.APACHE.COMMONS.LANG3.sTRINGuTILS");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(":2Z:W;3X=r[gy|fvx");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      char[] charArray0 = new char[3];
      charArray0[1] = '}';
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[2], charArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '}', '\u0000'}, charArray0);
      assertEquals(0, int0);
      
      String string4 = StringUtils.center("yqJQ-hm;$I", 0, "org.apache.commons.lang3.StringUtils");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("yqJQ-hm;$I", string4);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)88;
      String string5 = StringUtils.join(shortArray0, '}');
      assertNotNull(string5);
      assertEquals(1, shortArray0.length);
      assertArrayEquals(new short[] {(short)88}, shortArray0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("88", string5);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      String string0 = "{}";
      String string1 = StringUtils.toRootLowerCase("{}");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("{}", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("{}", "7r(Pn6k/(");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      short[] shortArray0 = new short[4];
      short short0 = (short)1;
      shortArray0[0] = (short)1;
      shortArray0[1] = (short)54;
      shortArray0[2] = (short)32;
      shortArray0[3] = (short) (-2697);
      char char0 = 'Z';
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'Z', 0, 54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (byte) (-76);
      shortArray0[1] = (short) (byte) (-76);
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '(', 31, 64);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 31
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = StringUtils.split((String) null, (String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Hi7\"#Hj=", (-4476));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("-:4g?V3CHC");
      assertNotNull(string0);
      assertEquals("-:4g?V3CHC", string0);
      
      String string1 = StringUtils.uncapitalize("-:4g?V3CHC");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("-:4g?V3CHC", string1);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, 'S', (-21), (-21));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      byte[] byteArray0 = StringUtils.getBytes("Strings must not be null", charset0);
      assertNotNull(byteArray0);
      assertEquals(24, byteArray0.length);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("Strings must not be null", (-26), 65);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-39);
      String string0 = StringUtils.join(byteArray0, 'W');
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte) (-39)}, byteArray0);
      assertEquals("90W-39", string0);
      
      String string1 = StringUtils.truncate("#@~i3Y%", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "#@~i3Y%");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "#@~i3Y%", (CharSequence) "90W-39");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.right("Gy*'3Rlc?/#1?7=", 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string3);
      assertEquals(0, stringArray0.length);
      
      byte[] byteArray1 = StringUtils.getBytes("-`Cg!hC2dy", (Charset) null);
      assertNotNull(byteArray1);
      assertNotSame(byteArray1, byteArray0);
      assertEquals(10, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)45, (byte)96, (byte)67, (byte)103, (byte)33, (byte)104, (byte)67, (byte)50, (byte)100, (byte)121}, byteArray1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      
      String string4 = StringUtils.getDigits("r$QlK]'d2!");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("2", string4);
      
      String string5 = StringUtils.join((List<?>) null, 'W', 1949, 1949);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Object varargs must not be null", "Object varargs must not be null");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Object varargs must not be null");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String string0 = StringUtils.replaceIgnoreCase((String) null, "Object varargs must not be null", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("V", '\"');
      assertNotNull(string0);
      assertEquals("\"V\"", string0);
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.defaultString("Kv`M~#De ", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Kv`M~#De ", string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("je");
      assertTrue(boolean0);
      
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", "Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Zy \"1{x;$%iuxN#dM@");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      String string0 = StringUtils.substringAfter("q{IxV8'[[r=mc/2*", 14);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", " is not in the range '0' - '9'");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      String[] stringArray0 = new String[2];
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(stringArray0[0]);
      assertNull(stringArray1);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray2 = StringUtils.substringsBetween("\r", stringArray0[0], "\r");
      assertNull(stringArray2);
      assertEquals(2, stringArray0.length);
      
      int int0 = 13;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\r", "D6}Cympu}cR60,I7_3", 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 19
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "Arr");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("Arr");
      assertTrue(boolean0);
      
      String string1 = StringUtils.uncapitalize("Arr");
      assertNotNull(string1);
      assertEquals("arr", string1);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      String string0 = StringUtils.upperCase("r$#nOA+Q#62Y-Pi");
      assertNotNull(string0);
      assertEquals("R$#NOA+Q#62Y-PI", string0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 5033;
      intArray0[1] = 0;
      intArray0[2] = 101;
      intArray0[3] = 0;
      intArray0[4] = (-2122);
      intArray0[5] = 16;
      intArray0[6] = 98;
      intArray0[7] = 0;
      String string1 = StringUtils.join(intArray0, 's', 0, 0);
      assertNotNull(string1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {5033, 0, 101, 0, (-2122), 16, 98, 0}, intArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "r$#nOA+Q#62Y-Pi";
      charSequenceArray0[1] = (CharSequence) "r$#nOA+Q#62Y-Pi";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string2 = StringUtils.prependIfMissingIgnoreCase("R$#NOA+Q#62Y-PI", "r$#nOA+Q#62Y-Pi", charSequenceArray0);
      assertNotNull(string2);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("R$#NOA+Q#62Y-PI", string2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "R$#NOA+Q#62Y-PI";
      stringArray0[1] = "R$#NOA+Q#62Y-PI";
      stringArray0[2] = "R$#NOA+Q#62Y-PI";
      stringArray0[3] = "R$#NOA+Q#62Y-PI";
      stringArray0[4] = "R$#NOA+Q#62Y-PI";
      stringArray0[5] = "";
      stringArray0[6] = "R$#NOA+Q#62Y-PI";
      stringArray0[7] = "r$#nOA+Q#62Y-Pi";
      stringArray0[8] = "r$#nOA+Q#62Y-Pi";
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string3);
      assertEquals(9, stringArray0.length);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("R$#NOA+Q#62Y-PI", string3);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      String string0 = StringUtils.stripAccents("7;Qv+w!+q]1?mSlrvbO");
      assertNotNull(string0);
      assertEquals("7;Qv+w!+q]1?mSlrvbO", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("7;Qv+w!+q]1?mSlrvbO", "7;Qv+w!+q]1?mSlrvbO");
      assertEquals(1.0, double0, 0.01);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "7;Qv+w!+q]1?mSlrvbO";
      stringArray0[1] = "7;Qv+w!+q]1?mSlrvbO";
      stringArray0[2] = "7;Qv+w!+q]1?mSlrvbO";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string1);
      assertEquals(3, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("7;Qv+w!+q]1?mSlrvbO", string1);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.abbreviate((String) null, 1276);
      assertNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string2);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(1276));
      
      String string3 = StringUtils.join((List<?>) stack0, '!', 1276, 889);
      assertNotNull(string3);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("", string3);
      assertFalse(stack0.contains(889));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) '!';
      floatArray0[3] = (float) '!';
      floatArray0[4] = (float) 1276;
      floatArray0[5] = (float) '!';
      floatArray0[6] = (float) 1276;
      floatArray0[7] = (float) 1276;
      floatArray0[8] = 1.4462501F;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '}', 889, 1276);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 889
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.substring((String) null, 1276);
      assertNull(string1);
      
      String string2 = StringUtils.abbreviate((String) null, 1276);
      assertNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("", (String) null);
      assertNotNull(string3);
      assertEquals("", string3);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(""));
      
      String string4 = StringUtils.join((List<?>) stack0, '!', 1276, 889);
      assertNotNull(string4);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      assertFalse(stack0.contains('!'));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) '!';
      floatArray0[3] = (float) '!';
      floatArray0[4] = (float) 1276;
      floatArray0[5] = (float) '!';
      floatArray0[6] = (float) 1276;
      floatArray0[7] = (float) 1276;
      floatArray0[8] = 1.4462501F;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '}', 889, 1276);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 889
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.join((int[]) null, 'p', 271, 271);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      String string2 = StringUtils.swapCase((String) null);
      assertNull(string2);
      
      charSequenceArray0[2] = (CharSequence) null;
      String string3 = StringUtils.removeEndIgnoreCase("", "}PXcKa");
      assertNotNull(string3);
      assertEquals("", string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.wrap("", (String) null);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.rotate((String) null, 271);
      assertNull(string5);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'a'}, charArray0);
      assertEquals("a", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split((String) null, (String) null, 0);
      assertNull(stringArray0);
      
      String string6 = StringUtils.replaceOnce("0)p*9{/", "rL&\"YIV", "ElLEn RR");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("0)p*9{/", string6);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      String string0 = StringUtils.substringBefore(".ZeF!kLt.ZeF!kLt", 2);
      assertNotNull(string0);
      assertEquals(".ZeF!kLt.ZeF!kLt", string0);
      
      String string1 = StringUtils.remove(" is not in the range '0' - '9'", " is not in the range '0' - '9'");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.EMPTY;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.substring("E`G)2r$/8U", 2, 2);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(".ZeF!kLt.ZeF!kLt", ".ZeF!kLt.ZeF!kLt");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "]vP)*V)5KQ`:7>W!");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", "Eg@D!nJIaKZjJwL");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Eg@D!nJIaKZjJwL", string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Eg@D!nJIaKZjJwL", (CharSequence) "org.apache.commons.lang3.StringUtils", 4259);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      String string0 = StringUtils.trimToNull("T3j,G>6rcwZn!$_V");
      assertNotNull(string0);
      assertEquals("T3j,G>6rcwZn!$_V", string0);
      
      String string1 = StringUtils.removeStart("\r", "L-0`o*k24cn#V9DX_z");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      
      String string2 = StringUtils.defaultIfBlank("+7>r(3/", ":3<~A8ZtQ=PhSU");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("+7>r(3/", string2);
      
      boolean boolean0 = StringUtils.isMixedCase("T3j,G>6rcwZn!$_V");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) ", Length: ";
      charSequenceArray0[1] = (CharSequence) ", Length: ";
      int int0 = StringUtils.indexOfAny((CharSequence) ", Length: ", ", Length: ");
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      boolean boolean0 = StringUtils.isNumericSpace(charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.difference("/r-\"w=sW%t~or%qa?L", "/r-\"w=sW%t~or%qa?L");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.removeEnd("jR", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("jR", string1);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("=2tVj5xn-,hAP*+$Q[y", "=2tVj5xn-,hAP*+$Q[y", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("nDk`'zgL)~U", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'p';
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string1 = StringUtils.wrapIfMissing("=2tVj5xn-,hAP*+$Q[y", 'f');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("f=2tVj5xn-,hAP*+$Q[yf", string1);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "=2tVj5xn-,hAP*+$Q[y", (CharSequence) "=2tVj5xn-,hAP*+$Q[y", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      String string0 = StringUtils.unwrap("\n", "]JE]JE");
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.stripToNull("lb`cO=X#A+IS");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("lb`cO=X#A+IS", string1);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("\r", "lb`cO=X#A+IS");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceChars("KvZ", "lb`cO=X#A+IS", "_9v>Om");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("KvZ", string2);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("=2tVj5xn-,hAP*+$Q[y", "", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("=2tVj5xn-,hAP*+$Q[y", string0);
      
      String string1 = StringUtils.wrapIfMissing("", 'f');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfterLast("\n", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      float[] floatArray0 = new float[2];
      String string0 = StringUtils.join(floatArray0, '<', 186, 186);
      assertNotNull(string0);
      assertEquals(2, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals("", string0);
      
      String string1 = StringUtils.reverse("Comparator should not be null.Exception cloning Cloneable type ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" epyt elbaenolC gninolc noitpecxE.llun eb ton dluohs rotarapmoC", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) " epyt elbaenolC gninolc noitpecxE.llun eb ton dluohs rotarapmoC", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Comparator should not be null.Exception cloning Cloneable type ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      String string0 = "9_xgH,aR8^yOy2_)U#|";
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[0] = (byte) (-118);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-30);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[7] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, '.', (int) (byte) (-30), (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -30
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      String string0 = "9_xgH,aR8^yOy2_)U#|";
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-30);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[7] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, '.', (int) (byte) (-30), (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -30
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      charArray0[1] = ']';
      charArray0[2] = 'q';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string0 = StringUtils.join(booleanArray0, ']', 181, 181);
      assertNotNull(string0);
      assertEquals(2, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.defaultString(", '", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", '", string1);
      
      String string2 = StringUtils.replaceOnce("", ", '", "je");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("1]qjH", "je");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("je1]qjHje", string3);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'p';
      charArray0[4] = 'D';
      charArray0[5] = '}';
      charArray0[6] = '}';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "je1]qjHje", charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'G', 'G', 'p', '\u0000', 'D', '}', '}'}, charArray0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      String string0 = StringUtils.chomp("maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      String string1 = StringUtils.join(floatArray0, '7');
      assertNotNull(string1);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0", string1);
      
      String string2 = StringUtils.rightPad("maxWith cannot be negative", 265, "maxWith cannot be negative");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWi", string2);
      
      String[] stringArray0 = new String[1];
      String string3 = StringUtils.replaceEachRepeatedly(" vs ", stringArray0, stringArray0);
      assertNotNull(string3);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" vs ", string3);
      
      boolean boolean0 = StringUtils.isNotBlank("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWi");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) " vs ", "maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWi");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      String string0 = StringUtils.upperCase("r$#nOA+Q#62Y-Pi");
      assertNotNull(string0);
      assertEquals("R$#NOA+Q#62Y-PI", string0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 5033;
      intArray0[1] = 0;
      intArray0[2] = 101;
      intArray0[3] = 0;
      intArray0[5] = 16;
      intArray0[6] = 98;
      intArray0[7] = 0;
      String string1 = StringUtils.join(intArray0, 's', 0, 0);
      assertNotNull(string1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {5033, 0, 101, 0, 0, 16, 98, 0}, intArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("r$#nOA+Q#62Y-Pi", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("lW@ store ", "aMqXi$MX");
      assertNotNull(string0);
      assertEquals("aMqXi$MXlW@ store aMqXi$MX", string0);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("1]qjH, Length: ");
      assertNotNull(string0);
      assertEquals("1]qjH, Length:", string0);
      
      String string1 = StringUtils.right("7;(\"|Mu}{*.c\u0007,|c", 272);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7;(\"|Mu}{*.c\u0007,|c", string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("7;(\"|Mu}{*.c\u0007,|c");
      assertFalse(boolean0);
      
      String string2 = StringUtils.difference("7;(\"|Mu}{*.c\u0007,|c", "offset cannot be negative");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("offset cannot be negative", string2);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      String string0 = StringUtils.chomp(", Length: ", "/r-\"w=sW%t~or%qa?L");
      assertNotNull(string0);
      assertEquals(", Length: ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) ", Length: ";
      charSequenceArray0[1] = (CharSequence) ", Length: ";
      charSequenceArray0[2] = (CharSequence) ", Length: ";
      String string1 = StringUtils.removeAll(", Length: ", ", Length: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAny((CharSequence) ", Length: ", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ", Length: ", "");
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      boolean boolean1 = StringUtils.isNumericSpace(charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.difference("/r-\"w=sW%t~or%qa?L", "/r-\"w=sW%t~or%qa?L");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      char[] charArray0 = new char[5];
      int[] intArray0 = new int[6];
      intArray0[1] = (int) '\u0000';
      intArray0[2] = (-2839);
      intArray0[3] = (int) '<';
      intArray0[4] = 10;
      intArray0[5] = (int) '<';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'N', 0, 7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      String string0 = StringUtils.substring("", (-1));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "offset cannot be negative", " ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "offset cannot be negative";
      stringArray0[5] = "offset cannot be negative";
      stringArray0[6] = "offset cannot be negative";
      String string1 = StringUtils.substringBetween("", "", "offset cannot be negative");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string2 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string2);
      assertEquals(7, stringArray0.length);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.replaceFirst("", "Hj", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String[] stringArray1 = StringUtils.split("|", (String) null);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      String string4 = StringUtils.lowerCase("\r", locale0);
      assertNotNull(string4);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("\r", string4);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "\r", "Hj");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        Charset.forName("\r");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \r
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, false);
      assertEquals(0, int0);
      
      String string1 = StringUtils.wrapIfMissing("M]9", "M]9");
      assertNotNull(string1);
      assertEquals("M]9", string1);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.compareIgnoreCase((String) null, "M]9", true);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.wrapIfMissing("org.apache.commons.lang3.StringUtils", ", Length: \n");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(", Length: \norg.apache.commons.lang3.StringUtils, Length: \n", string2);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) ", Length: \n", (CharSequence) ", Length: \n");
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      String string3 = StringUtils.defaultString((String) null, "{}");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("{}", string3);
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      
      String string4 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string4);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("/;^Uv", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.defaultIfBlank("}aT@[wAFDPT", "}aT@[wAFDPT");
      assertNotNull(string0);
      assertEquals("}aT@[wAFDPT", string0);
      
      String string1 = StringUtils.wrapIfMissing("}aT@[wAFDPT", 'F');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("F}aT@[wAFDPTF", string1);
      
      String string2 = StringUtils.stripEnd("}aT@[wAFDPT", "}aT@[wAFDPT");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.unwrap("2;BIQS", '');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("2;BIQS", string3);
      
      String string4 = StringUtils.uncapitalize("F}aT@[wAFDPTF");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("f}aT@[wAFDPTF", string4);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "2;BIQS";
      stringArray0[1] = "E^bBWNeF@FP>";
      stringArray0[2] = "}aT@[wAFDPT";
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string5);
      assertEquals(3, stringArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      boolean boolean1 = StringUtils.isMixedCase("wS.`H4%,JrP49;c)");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "}aT@[wAFDPT", (CharSequence) null);
      assertEquals(0, int0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      // Undeclared exception!
      try { 
        linkedList0.listIterator((-449));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -449, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string0 = StringUtils.lowerCase("]u)?fYsE@G7*3Np/xl", locale0);
      assertNotNull(string0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("]u)?fyse@g7*3np/xl", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "]u)?fyse@g7*3np/xl";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "]u)?fyse@g7*3np/xl";
      String string1 = StringUtils.appendIfMissingIgnoreCase("]u)?fYsE@G7*3Np/xl", ", Length: ", charSequenceArray0);
      assertNotNull(string1);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]u)?fYsE@G7*3Np/xl", string1);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      String string0 = StringUtils.difference("maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string1 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "FLsUo3:Cd6qH)m4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.difference("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("L", ".sg2eWe%%", " ");
      assertNotNull(string0);
      assertEquals("L", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "L";
      stringArray0[1] = " ";
      stringArray0[2] = "L";
      stringArray0[3] = "L";
      stringArray0[4] = ".sg2eWe%%";
      stringArray0[5] = ".sg2eWe%%";
      stringArray0[6] = ".sg2eWe%%";
      int int0 = StringUtils.length("L");
      assertEquals(1, int0);
      
      String string1 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string1);
      assertEquals(7, stringArray0.length);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "L", (CharSequence) "L");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.replaceFirst("", "Hj", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray1 = StringUtils.split("|", (String) null);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      
      String string3 = StringUtils.lowerCase("\r", locale0);
      assertNotNull(string3);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\r", string3);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "\r", "Hj");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      // Undeclared exception!
      try { 
        Charset.forName("\r");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \r
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.defaultString("%Cx2;ajeVIfC.[", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("%Cx2;ajeVIfC.[", string1);
      
      String string2 = StringUtils.replaceOnce("Strings must not be null", "%Cx2;ajeVIfC.[", "je");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Strings must not be null", string2);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.rightPad("je", 1, '-');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("je", string3);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(";I%lNQ4~4l::Qm!O[a-");
      assertNotNull(stringArray0);
      assertEquals(16, stringArray0.length);
      
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(16, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.compare("fQgC&f", "Index: ", false);
      assertEquals(29, int0);
      
      String string2 = StringUtils.chop("Exception cloning Cloneable type ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Exception cloning Cloneable type", string2);
      
      String string3 = StringUtils.strip("Exception cloning Cloneable type", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Exception cloning Cloneable type", string3);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      String string0 = StringUtils.trimToNull("T3j,G>6rcwZn!$_V");
      assertNotNull(string0);
      assertEquals("T3j,G>6rcwZn!$_V", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "T3j,G>6rcwZn!$_V", "org.apache.commons.lang3.ObjectUtils$Null");
      assertEquals(1, int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("\r", "T3j,G>6rcwZn!$_V");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.stripToEmpty("org.apache.commons.lang3.ObjectUtils$Null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string1);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      String string0 = StringUtils.stripStart("h=Ie_", "h=Ie_");
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("o", "o", (-1568));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      String string1 = StringUtils.removeStart(string0, string0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, true);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[10];
      longArray0[0] = (long) 0;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category1, locale_Category2, locale_Category1);
      assertNotNull(enumSet0);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertSame(locale_Category1, locale_Category0);
      assertSame(locale_Category1, locale_Category2);
      assertSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category2));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category2);
      assertNotNull(enumSet1);
      assertSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(1, enumSet1.size());
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet1.contains(locale_Category2));
      
      EnumSet<Locale.Category> enumSet2 = EnumSet.copyOf(enumSet0);
      assertNotNull(enumSet2);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertSame(locale_Category1, locale_Category0);
      assertSame(locale_Category1, locale_Category2);
      assertSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet2.size());
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet0.contains(locale_Category2));
      assertTrue(enumSet2.contains(locale_Category2));
      
      Iterator<Locale.Category> iterator0 = enumSet2.iterator();
      assertNotNull(iterator0);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertSame(locale_Category1, locale_Category0);
      assertSame(locale_Category1, locale_Category2);
      assertSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet2.size());
      assertTrue(enumSet0.equals((Object)enumSet2));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet0.contains(locale_Category2));
      assertTrue(enumSet2.contains(locale_Category2));
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Iterator<String> iterator1 = linkedList0.iterator();
      assertNotNull(iterator1);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join(iterator1, (String) null);
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      assertFalse(linkedList0.contains(string0));
      
      String string1 = StringUtils.remove("", '\\');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      String string0 = StringUtils.removeStart("Comparator should not be", ", Length: \n");
      assertNotNull(string0);
      assertEquals("Comparator should not be", string0);
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = 'S';
      charArray0[2] = 'q';
      charArray0[3] = 'T';
      charArray0[4] = 'q';
      String string0 = StringUtils.removeStart("org.apache.commons.lang3.LocaleUtils", (String) null);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.LocaleUtils", string0);
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", "", 1828, 1828);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("xCNT(|2$-8j:qR}P", '\"');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("xCNT(|2$-8j:qR}P", string1);
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'Y';
      String string0 = StringUtils.repeat('Y', (int) 'Y');
      assertNotNull(string0);
      assertEquals("YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", string0);
      
      String[] stringArray0 = StringUtils.split("t_.k8- -!");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.removeStart(", Length: /r-\"w=sW%t~or%qa?L", "org.apache.commons.lang3.ObjectUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", Length: /r-\"w=sW%t~or%qa?L", string1);
      
      String string2 = StringUtils.capitalize("YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("YYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY", string2);
      
      String string3 = StringUtils.strip("Strings must not be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Strings must not be null", string3);
      
      String string4 = StringUtils.join((char[]) null, '\"', 89, 58);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.capitalize("H[KqABKMk](");
      assertNotNull(string0);
      assertEquals("H[KqABKMk](", string0);
      
      String string1 = StringUtils.replaceChars("H[KqABKMk](", "xLC2$tF{{S=k/=4/", "H[KqABKMk](");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("H[KqABKM](", string1);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      String string0 = StringUtils.lowerCase("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("p{incombiningdiacriticalmarks}+", string0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string1 = StringUtils.unwrap("p{InCombiningDiacriticalMarks}+", '\u001A');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      
      String string2 = StringUtils.left("p{InCombiningDiacriticalMarks}+", 2572);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "p{InCombiningDiacriticalMarks}+", 2572, 8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2572
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      String string0 = StringUtils.replaceAll((String) null, "'F%@(", (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.stripEnd("U#/]GwFXl2Z]wz", "|I.");
      assertNotNull(string1);
      assertEquals("U#/]GwFXl2Z]wz", string1);
      
      String string2 = StringUtils.remove((String) null, "");
      assertNull(string2);
      
      String string3 = StringUtils.removeIgnoreCase("", "dv~(e+Dm_r1!B%x_dBF");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.strip("Minimum abbreviation width with offset is %d");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Minimum abbreviation width with offset is %d", string4);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "dv~(e+Dm_r1!B%x_dBF";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "|I.";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "Minimum abbreviation width with offset is %d";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, (String) null, (-3103), 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3103
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.chomp("Tz!9o!u6_jlt *PA#");
      assertNotNull(string0);
      assertEquals("Tz!9o!u6_jlt *PA#", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", 65536, 65536);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(32, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean0);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", stringArray1);
      assertNotNull(string1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(32, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      
      String string2 = StringUtils.upperCase((String) null);
      assertNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "Tz!9o!u6_jlt *PA#", (CharSequence) "p{InCombiningDiacriticalMarks}+", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[0] = (byte)90;
      String string0 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (byte)90;
      String string1 = StringUtils.join(intArray0, '|', 90, (int) (byte)90);
      assertNotNull(string1);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {90}, intArray0);
      assertEquals("", string1);
      
      String string2 = StringUtils.chomp("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      String string0 = StringUtils.upperCase("r$#nOA+Q#62Y-Pi");
      assertNotNull(string0);
      assertEquals("R$#NOA+Q#62Y-PI", string0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      int int0 = StringUtils.getFuzzyDistance("R$#NOA+Q#62Y-PI", "r$#nOA+Q#62Y-Pi", locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(43, int0);
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = (int) ')';
      intArray0[1] = 100;
      intArray0[2] = 7;
      String string0 = StringUtils.join(intArray0, '@');
      assertNotNull(string0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {41, 100, 7}, intArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "7r(Pn6k/(", "7r(Pn6k/(");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      String string0 = StringUtils.substring("Z{", 100, 100);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      String string0 = StringUtils.substring("Z.+*i6M,QMHa", 1851, 1851);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substring("Array element ", 1851, 5814);
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-123);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-76);
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "=u7:D$Vr");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // =u7:D$Vr
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, ']');
      assertNotNull(string0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBefore("clone", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("clone", string1);
      
      String string2 = StringUtils.repeat('P', 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      assertNotNull(byteBuffer0);
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      
      CharBuffer charBuffer1 = StringUtils.getIfBlank(charBuffer0, (Supplier<CharBuffer>) null);
      assertNull(charBuffer1);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.DirectByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      String string0 = StringUtils.substring(",rs", (-618), (-618));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.normalizeSpace("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      String string0 = "LB6b";
      String string1 = StringUtils.right("LB6b", (-1091));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.endsWith("", "\r");
      assertFalse(boolean0);
      
      String string2 = ":2Z:W;3X=r[gy|fvx";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("vR.x");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '}';
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "\r", (-1091));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.defaultString("vR.x", "2x(0US]kk$f|d$2z");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("vR.x", string3);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\n", (CharSequence) "vR.x", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.normalizeSpace("\n");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = "g|$q67_`U(u";
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("", "g|$q67_`U(u", "v~(/p[8n~s%-jd'oG");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 11
         // g|$q67_`U(u
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("a\"/w70XeE?87{hKn'n", "", " XE&:$9kV(<xB#");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 9
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.substringAfter("Invalid locale format: ", (-2382));
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "-4_U]vY(hWgcBUt";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "-4_U]vY(hWgcBUt";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((Object[]) charSequenceArray0, "-4_U]vY(hWgcBUt");
      assertNotNull(string1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-4_U]vY(hWgcBUt-4_U]vY(hWgcBUt-4_U]vY(hWgcBUt-4_U]vY(hWgcBUt-4_U]vY(hWgcBUt-4_U]vY(hWgcBUt", string1);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      String string0 = StringUtils.right("FPV[w8ya{a5a;v?8Js", 2231);
      assertNotNull(string0);
      assertEquals("FPV[w8ya{a5a;v?8Js", string0);
      
      String string1 = StringUtils.rightPad("FPV[w8ya{a5a;v?8Js", 2231);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "FPV[w8ya{a5a;v?8Js", (CharSequence) "FPV[w8ya{a5a;v?8Js");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      String string0 = StringUtils.replaceAll((String) null, "", (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.repeat('F', (-1720));
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-1720));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      String string2 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      assertNotNull(string2);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.contains(charSequenceArray0[0], (-365));
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceAll("", (String) null, "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1955.9854F);
      floatArray0[1] = (float) 'F';
      floatArray0[2] = (float) (-1);
      String string4 = StringUtils.join(floatArray0, 'F');
      assertNotNull(string4);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {(-1955.9854F), 70.0F, (-1.0F)}, floatArray0, 0.01F);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("-1955.9854F70.0F-1.0", string4);
      
      String string5 = StringUtils.rightPad("", (-1720));
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String string6 = StringUtils.appendIfMissing("", (CharSequence) null, charSequenceArray0);
      assertNotNull(string6);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      
      String string7 = StringUtils.substringBefore("Ds_Cw-}W2", (-1720));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals("Ds_Cw-}W2", string7);
      
      String string8 = StringUtils.normalizeSpace("");
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string6));
      assertEquals("", string8);
      
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.appendIfMissing("je", "p{InCombiningDiacriticalMarks}+", stringArray0);
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("je", string1);
      
      boolean boolean0 = StringUtils.isBlank("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "JE", 101);
      assertEquals(31, int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, 3377);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.uncapitalize("je");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("je", string2);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, 'q', (-771), (int) 'q');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -771
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string1);
      assertEquals(5, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween((String) null, string0, "0n/A");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "Strings must not be null", "Strings must not be null");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 100.0;
      doubleArray0[2] = (-3323.623540743626);
      String string0 = StringUtils.join(doubleArray0, '_');
      assertNotNull(string0);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 100.0, (-3323.623540743626)}, doubleArray0, 0.01);
      assertEquals("0.0_100.0_-3323.623540743626", string0);
      
      try { 
        StringUtils.getBytes("Strings must not be null", "0.0_100.0_-3323.623540743626");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte)80;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      String string0 = StringUtils.toEncodedString(byteArray0, charset0);
      assertNotNull(string0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)78, (byte)0, (byte)0, (byte)1, (byte)0, (byte)51, (byte)0, (byte)8, (byte)80}, byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("N\u0000\u0000\u0001\u00003\u0000\bP", string0);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(" vs ", " vs ", " vs ");
      assertNull(stringArray0);
      
      int int0 = StringUtils.compare(" vs ", " vs ");
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints(" vs ");
      assertNotNull(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {32, 118, 115, 32}, intArray0);
      
      String string0 = StringUtils.mid(" vs ", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) " vs ";
      int int2 = StringUtils.countMatches((CharSequence) "", '*');
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      byte[] byteArray0 = new byte[0];
      String string1 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertNotNull(string1);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join((List<?>) linkedList0, "clone", 4434, (-2));
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlpha("clone");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      String string0 = StringUtils.trim("7r(Pn6k/(");
      assertNotNull(string0);
      assertEquals("7r(Pn6k/(", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "7r(Pn6k/(";
      charSequenceArray0[1] = (CharSequence) "7r(Pn6k/(";
      charSequenceArray0[2] = (CharSequence) "7r(Pn6k/(";
      charSequenceArray0[3] = (CharSequence) "{}";
      charSequenceArray0[4] = (CharSequence) "7r(Pn6k/(";
      charSequenceArray0[5] = (CharSequence) "7r(Pn6k/(";
      charSequenceArray0[6] = (CharSequence) "7r(Pn6k/(";
      String string1 = StringUtils.trim("[<X{Bt");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[<X{Bt", string1);
      
      charSequenceArray0[7] = (CharSequence) "[<X{Bt";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.rightPad("7r(Pn6k/(", 160, 'i');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("7r(Pn6k/(iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", string2);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(160));
      
      ListIterator<Integer> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(stack0.contains(160));
      
      String string3 = StringUtils.join((Iterator<?>) listIterator0, "org.apache.commons.lang3.ObjectUtils$Null");
      assertNotNull(string3);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      assertFalse(stack0.contains(160));
      
      int int0 = StringUtils.ordinalIndexOf("", "[<X{Bt", 100);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.startsWithAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeAll("", "hSg~");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "hSg~", "cX9#4qam=,M~BDn=");
      assertEquals(3, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "cX9#4qam=,M~BDn=";
      String string2 = StringUtils.toRootLowerCase((String) null);
      assertNull(string2);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "cX9#4qam=,M~BDn=";
      charSequenceArray0[3] = (CharSequence) "cX9#4qam=,M~BDn=";
      charSequenceArray0[4] = (CharSequence) "hSg~";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("hSg~", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.join((double[]) null, ';', 3, 1737);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Strings must not be null", 65);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Strings must not be null", 65);
      assertEquals((-1), int0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string1 = StringUtils.substring("", (-1));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.equalsAny("", stringArray0);
      assertEquals(250, stringArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)2305;
      shortArray0[1] = (short)915;
      shortArray0[2] = (short) (-3384);
      shortArray0[3] = (short)33;
      shortArray0[4] = (short) (-1821);
      shortArray0[5] = (short)2469;
      String string3 = StringUtils.join(shortArray0, '#');
      assertNotNull(string3);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)2305, (short)915, (short) (-3384), (short)33, (short) (-1821), (short)2469}, shortArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("2305#915#-3384#33#-1821#2469", string3);
      
      boolean boolean1 = StringUtils.startsWithAny("Strings must not be null", stringArray0);
      assertEquals(250, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      String string0 = StringUtils.truncate("|V<EH", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "|V<EH";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("iqQ", 14);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("     iqQ      ", string1);
      
      String string2 = StringUtils.unwrap("#@~i3Y%", 'P');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("#@~i3Y%", string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "#@~i3Y%", (CharSequence) "#@~i3Y%");
      assertEquals(1, int0);
      
      String string3 = StringUtils.wrapIfMissing("#@~i3Y%", 'f');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("f#@~i3Y%f", string3);
      
      int int1 = StringUtils.lastIndexOfAny("#@~i3Y%", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(7, int1);
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      String string0 = StringUtils.substringAfter("}#3U=", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.overlay("", "}#3U=", 21, 21);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("}#3U=", string1);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      
      String string2 = StringUtils.unwrap("L4**c>4|Pt[go4D8#", "}#3U=");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("L4**c>4|Pt[go4D8#", string2);
      
      String string3 = StringUtils.stripToEmpty("");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.removePattern("*^LW{MO", "*^LW{MO");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 0
         // *^LW{MO
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("|V<$EH");
      assertNotNull(string0);
      assertEquals("|V<$EH", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "|V<$EH";
      charSequenceArray0[1] = (CharSequence) "|V<$EH";
      boolean boolean0 = StringUtils.startsWithAny(charSequenceArray0[1], charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d", (-3403));
      assertNotNull(stringArray0);
      assertEquals(45, stringArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Minimum abbreviation width with offset is %d", (-3403));
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens(", '", "Strings must not be null");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "|V<EH";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.center("iqQ", 14);
      assertNotNull(string0);
      assertEquals("     iqQ      ", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "#@~i3Y%", (CharSequence) "#@~i3Y%");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      String string0 = "<4C)X9[\\Db{R";
      boolean boolean0 = StringUtils.isWhitespace("<4C)X9[Db{R");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.rightPad("k0<5&GR", (-375), 'i');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("k0<5&GR", string1);
      
      int int0 = StringUtils.ordinalIndexOf("k0<5&GR", (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.startsWithAny("k0<5&GR", (CharSequence[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      // Undeclared exception!
      try { 
        StringUtils.removeAll("         ", "_[?B7");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 4
         // _[?B7
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      String string0 = StringUtils.rotate("LNuk>Qz|sjw", 2109);
      assertNotNull(string0);
      assertEquals("k>Qz|sjwLNu", string0);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("L", "Arr", " has no clone methodorg.apache.commons.lang3.ArrayUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L", string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("L", "Search and Replace array lengths don't match: ", (-1532));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.capitalize("Arr");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Arr", string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("LNuk>Qz|sjw");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.compare("\n", "Search and Replace array lengths don't match: ", true);
      assertFalse(int1 == int0);
      assertEquals((-73), int1);
      
      String string3 = StringUtils.substring((String) null, (-1));
      assertNull(string3);
      
      String string4 = StringUtils.overlay("Array element ", "9N", 2109, 16);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Array element 9N", string4);
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      String string0 = StringUtils.right("ln}?6<^]?5Yocln}?6<^]?5Yoc", 7);
      assertNotNull(string0);
      assertEquals("^]?5Yoc", string0);
      
      String string1 = StringUtils.stripToEmpty("^]?5Yoc");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("^]?5Yoc", string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "^]?5Yoc", (CharSequence) "^]?5Yoc");
      assertTrue(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "^]?5Yoc", 'Z');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      String string0 = StringUtils.truncate("#@~i3Y%", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "#@~i3Y%");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.right("", 0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      short[] shortArray0 = new short[18];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)1;
      String string0 = StringUtils.right("", (short)0);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.abbreviateMiddle("~gzeX6RG*]H~/~x;", "~gzeX6RG*]H~/~x;", 2);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("~gzeX6RG*]H~/~x;", string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("~gzeX6RG*]H~/~x;", "");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "R[%u(", 2);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string1);
      assertEquals(5, stringArray0.length);
      
      String string2 = StringUtils.replacePattern(string0, "Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '5', 26, 29);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 26
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      String string0 = StringUtils.rotate("*^LW{MO", (-249));
      assertNotNull(string0);
      assertEquals("^LW{MO*", string0);
      
      String string1 = StringUtils.defaultString("^LW{MO*", "*^LW{MO");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("^LW{MO*", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 3028, 10);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-688));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      HashSet<Locale.Category> hashSet0 = new LinkedHashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      String string0 = StringUtils.prependIfMissingIgnoreCase("|", "5*(7.+Jt8(", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("5*(7.+Jt8(|", string0);
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      String string0 = StringUtils.swapCase("7;Qv+w!q]1?mS{lrvbO");
      assertNotNull(string0);
      assertEquals("7;qV+W!Q]1?Ms{LRVBo", string0);
      
      String string1 = StringUtils.stripAccents("7;qV+W!Q]1?Ms{LRVBo");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("7;qV+W!Q]1?Ms{LRVBo", string1);
      
      Object[] objectArray0 = new Object[21];
      objectArray0[1] = (Object) "7;Qv+w!q]1?mS{lrvbO";
      objectArray0[6] = (Object) "7;qV+W!Q]1?Ms{LRVBo";
      boolean boolean0 = StringUtils.isEmpty("7;qV+W!Q]1?Ms{LRVBo");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.defaultString("(OI", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(OI", string1);
      
      String string2 = StringUtils.replaceOnce("", "(OI", "je");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("JE", "je");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("jeJEje", string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "je", (CharSequence) "(OI");
      assertEquals(0, int0);
      
      String string4 = StringUtils.center("Search and Replace array lengths don't match: ", 0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string4);
      
      String string5 = StringUtils.stripEnd("Search and Replace array lengths don't match: ", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string5);
      
      String string6 = StringUtils.leftPad("Ac%K6/VR?26", 2405, 'O');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.reverseDelimited((String) null, 'O');
      assertNull(string7);
      
      int int1 = StringUtils.compareIgnoreCase("", (String) null, false);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string8 = StringUtils.wrapIfMissing("L4**c>4|Pt[go4D8", "#");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertEquals("#L4**c>4|Pt[go4D8#", string8);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) null);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string9 = StringUtils.defaultString("Minimum abbreviation width with offset is %d", (String) null);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertEquals("Minimum abbreviation width with offset is %d", string9);
      
      String string10 = StringUtils.strip("L4**c>4|Pt[go4D8", "Search and Replace array lengths don't match: ");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertEquals("L4**c>4|Pt[go4D8", string10);
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      String string0 = StringUtils.stripEnd("ls", "rkmRe,wS1_dIUHx%g2");
      assertNotNull(string0);
      assertEquals("ls", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "ls", (CharSequence) "ls", Integer.MIN_VALUE);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isBlank("ls");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("ls", "ls", 41);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("ls", string1);
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = (-1L);
      String string0 = StringUtils.join(longArray0, '.');
      assertNotNull(string0);
      assertEquals(1, longArray0.length);
      assertArrayEquals(new long[] {(-1L)}, longArray0);
      assertEquals("-1", string0);
      
      boolean boolean0 = StringUtils.isBlank("-1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      String string0 = StringUtils.swapCase("T\"]N9V");
      assertNotNull(string0);
      assertEquals("t\"]n9v", string0);
      
      String string1 = StringUtils.remove((String) null, '>');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "Arr");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("Arr");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("Exception cloning Cloneable type ", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Arr");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Exception cloning Cloneable type ", (String) null, 5);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray1);
      
      String string2 = StringUtils.wrapIfMissing("V", 'I');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("IVI", string2);
      
      String string3 = StringUtils.stripToNull("4rP");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("4rP", string3);
      
      String string4 = StringUtils.removeStartIgnoreCase(", Length: ", "...");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(", Length: ", string4);
      
      String string5 = StringUtils.trim("Exception cloning Cloneable type ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Exception cloning Cloneable type", string5);
      
      boolean boolean3 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "xk9~uq(y+LnKE ");
      assertNotNull(stringArray2);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string6 = StringUtils.removeEnd("", "@V0,n~PFZ]jcb$<^I#");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chop("Exceptioncloning Cloneable type ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Exceptioncloning Cloneable type", string1);
      
      String string2 = StringUtils.reverseDelimited("fgl", '5');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("fgl", string2);
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.join((double[]) null, '`', 20, 8192);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.prependIfMissing("org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.StringUtils", charSequenceArray0);
      assertNotNull(string1);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.StringUtils", string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '`';
      charArray0[1] = 'i';
      charArray0[2] = 'z';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.StringUtils", charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {'`', 'i', 'z'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      String string0 = "\\u";
      String string1 = StringUtils.swapCase(string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\\U", string1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-286L);
      longArray0[1] = (-2419L);
      longArray0[2] = (-4492L);
      String string2 = StringUtils.join(longArray0, '\\');
      assertNotNull(string2);
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {(-286L), (-2419L), (-4492L)}, longArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-286\\-2419\\-4492", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "U";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (-4492L);
      doubleArray0[1] = (double) (-2419L);
      doubleArray0[2] = (double) '\\';
      doubleArray0[3] = (double) '\\';
      String string3 = StringUtils.join(doubleArray0, 'V', (-544), (-544));
      assertNotNull(string3);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-4492.0), (-2419.0), 92.0, 92.0}, doubleArray0, 0.01);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) string0;
      charSequenceArray0[3] = (CharSequence) "U";
      charSequenceArray0[4] = (CharSequence) "-286-2419-4492";
      charSequenceArray0[5] = (CharSequence) "U";
      String string4 = StringUtils.appendIfMissingIgnoreCase("-286-2419-4492", "-286-2419-4492", charSequenceArray0);
      assertNotNull(string4);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("-286-2419-4492", string4);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, 'J');
      assertNotNull(string5);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("UJJ\\uJUJ-286-2419-4492JU", string5);
      
      String string6 = StringUtils.reverseDelimited("]3*>\"hj[ACgmP", '&');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("]3*>\"hj[ACgmP", string6);
      
      String string7 = StringUtils.center("T{Q1P<GD9Fpv10p9N", 2405);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      
      String string8 = StringUtils.join(doubleArray0, '&');
      assertNotNull(string8);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-4492.0), (-2419.0), 92.0, 92.0}, doubleArray0, 0.01);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertEquals("-4492.0&-2419.0&92.0&92.0", string8);
      
      String string9 = StringUtils.stripEnd("U", "-286-2419-4492");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertEquals("U", string9);
      
      String string10 = StringUtils.leftPad("", 0, 'M');
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertEquals("", string10);
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEachRepeatedly("Kv`M~#D1$l1#s", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Kv`M~#D1$l1#s", string1);
      
      String string2 = StringUtils.defaultString(", '", "JE");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(", '", string2);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      String string0 = StringUtils.removeFirst("p{InCombiningDiacriticalMarks}+", "9vKy");
      assertNotNull(string0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      
      String string1 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "|^");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("|^", string1);
      
      String string2 = StringUtils.trimToEmpty("|^");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("|^", string2);
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      String string0 = StringUtils.defaultString("aBG]Eg>GHRafI}lF7", "aBG]Eg>GHRafI}lF7");
      assertNotNull(string0);
      assertEquals("aBG]Eg>GHRafI}lF7", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "aBG]Eg>GHRafI}lF7";
      charSequenceArray0[1] = null;
      String string1 = StringUtils.wrapIfMissing("aBG]Eg>GHRafI}lF7", "...");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...aBG]Eg>GHRafI}lF7...", string1);
      
      charSequenceArray0[2] = (CharSequence) "...aBG]Eg>GHRafI}lF7...";
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = (CharSequence) "aBG]Eg>GHRafI}lF7";
      int int0 = StringUtils.lastIndexOfAny("aBG]Eg>GHRafI}lF7", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isBlank(charSequenceArray0[0]);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "...aBG]Eg>GHRafI}lF7...", (CharSequence) "...");
      assertFalse(int1 == int0);
      assertEquals(20, int1);
      
      String string2 = StringUtils.replace("W$WG*", "aBG]Eg>GHRafI}lF7", "@nAGuW/go");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("W$WG*", string2);
      
      int int2 = StringUtils.lastIndexOfAny("W$WG*", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "]vP)*V)5KQ`:7>W!");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.apache.commons.lang3.StringUtils";
      stringArray0[1] = "org.apache.commons.lang3.StringUtils";
      stringArray0[2] = "]vP)*V)5KQ`:7>W!";
      stringArray0[3] = null;
      String string2 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string2);
      assertEquals(4, stringArray0.length);
      
      String string3 = StringUtils.defaultString((String) null, "N<NhL4ir|qn");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("N<NhL4ir|qn", string3);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "org.apache.commons.lang3.StringUtils");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.leftPad("A.DwS+Ef<T1", (-1), (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("A.DwS+Ef<T1", string4);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("N<NhL4ir|qn", "org.apache.commons.lang3.StringUtils", stringArray0);
      assertNotNull(string5);
      assertEquals(4, stringArray0.length);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtilsN<NhL4ir|qn", string5);
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      String string0 = StringUtils.defaultString("offset cannot be negative", "!{?{F>,G");
      assertNotNull(string0);
      assertEquals("offset cannot be negative", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[1] = (CharSequence) "Zr).apav()*V)5KQ`:7>W!";
      charSequenceArray0[2] = (CharSequence) "offset cannot be negative";
      int int0 = StringUtils.lastIndexOfAny("Zr).apav()*V)5KQ`:7>W!", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isBlank("nDk`'zgL)~U");
      assertFalse(boolean0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Zr).apav()*V)5KQ`:7>W!", (CharSequence) "offset cannot be negative");
      assertFalse(int1 == int0);
      assertEquals(24, int1);
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("Mm<DfXw w|r'r[)MfPr");
      assertNotNull(string0);
      assertEquals("Mm<DfXw w|r'r[)MfPr", string0);
      
      boolean boolean0 = StringUtils.isAlpha("Mm<DfXw w|r'r[)MfPr");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween("Mm<DfXw w|r'r[)MfPr", "Mm<DfXw w|r'r[)MfPr");
      assertNull(string1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = (-321.82126F);
      floatArray0[4] = 0.0F;
      floatArray0[5] = (-1508.23F);
      floatArray0[6] = 526.03516F;
      floatArray0[7] = 0.0F;
      floatArray0[8] = 654.8F;
      String string2 = StringUtils.join(floatArray0, ':');
      assertNotNull(string2);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, (-321.82126F), 0.0F, (-1508.23F), 526.03516F, 0.0F, 654.8F}, floatArray0, 0.01F);
      assertFalse(string2.equals((Object)string0));
      assertEquals("0.0:0.0:0.0:-321.82126:0.0:-1508.23:526.03516:0.0:654.8", string2);
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      String string0 = StringUtils.removeStart("n~s%-jd'o-jd'oG", "v~()");
      assertNotNull(string0);
      assertEquals("n~s%-jd'o-jd'oG", string0);
      
      String string1 = StringUtils.capitalize("n~s%-jd'o-jd'oG");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("N~s%-jd'o-jd'oG", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string2 = StringUtils.prependIfMissingIgnoreCase("n~s%-jd'o-jd'oG", "N~s%-jd'o-jd'oG", charSequenceArray0);
      assertNotNull(string2);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("n~s%-jd'o-jd'oG", string2);
      
      String string3 = StringUtils.substringBefore("p8Inm`R2'NX", "cV");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("p8Inm`R2'NX", string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("p8Inm`R2'NX");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("org.apache.commons.lang3.ObjectUtils$Null", "Ns8-7/Od%l", "ug:'o;kAPbnF");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.apache.commons.lang3.ObjectUtils$Null", charArray0);
      assertEquals(0, charArray0.length);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastOrdinalIndexOf("ug:'o;kAPbnF", "Ns8-7/Od%l", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.removeStartIgnoreCase("Tz!9o!u6_jlt *PA#", "Tz!9o!u6_jlt *PA#");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center((String) null, 32);
      assertNull(string1);
      
      String string2 = StringUtils.stripToNull((String) null);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEachRepeatedly("Kv`M~#D1$l1#s", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Kv`M~#D1$l1#s", string1);
      
      String string2 = StringUtils.stripAccents("Kv`M~#D1$l1#s");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Kv`M~#D1$l1#s", string2);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      String string0 = StringUtils.capitalize("5_4PJne0");
      assertNotNull(string0);
      assertEquals("5_4PJne0", string0);
      
      String string1 = StringUtils.substringAfter("2+*EboK[oU'pBG", "6dv{");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.normalizeSpace("5_4PJne0");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("5_4PJne0", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "6dv{", (-2954));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "5_4PJne0", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "5_4PJne0";
      stringArray0[1] = ">Uq3J>2uE";
      stringArray0[2] = "5_4PJne0";
      stringArray0[4] = "2+*EboK[oU'pBG";
      stringArray0[5] = "5_4PJne0";
      boolean boolean0 = StringUtils.equals((CharSequence) "5_4PJne0", (CharSequence) "5_4PJne0");
      assertTrue(boolean0);
      
      int int2 = StringUtils.compare(")J i#Hzt4nF`8", "The String must not be empty", true);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-43), int2);
      
      String string3 = StringUtils.substringAfterLast("", 1923);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.center("5_4PJne0", (-2954), 'c');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("5_4PJne0", string4);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) ">Uq3J>2uE", (CharSequence) ">Uq3J>2uE");
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-30);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)115;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)85;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      String string5 = StringUtils.toEncodedString(byteArray0, charset0);
      assertNotNull(string5);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-30), (byte)104, (byte)115, (byte) (-96), (byte)85}, byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("\uFFFDhs\uFFFDU", string5);
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      String string0 = StringUtils.stripToNull("fXYc{.jDgt0@?K85L|]");
      assertNotNull(string0);
      assertEquals("fXYc{.jDgt0@?K85L|]", string0);
      
      int int0 = StringUtils.ordinalIndexOf("fXYc{.jDgt0@?K85L|]", "fXYc{.jDgt0@?K85L|]", (-144));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'['}, charArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllLowerCase("fXYc{.jDgt0@?K85L|]");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int[] intArray0 = StringUtils.toCodePoints("fXYc{.jDgt0@?K85L|]");
      assertNotNull(intArray0);
      assertEquals(19, intArray0.length);
      
      String string1 = StringUtils.substringAfterLast("\n", (-1));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean3 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int1 = StringUtils.indexOf((CharSequence) "0", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean4 = StringUtils.containsAny((CharSequence) "fXYc{.jDgt0@?K85L|]", charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'['}, charArray0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", (-1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string2 = StringUtils.substringBetween("+7cnF`$X!!zQA3TWp", "tJF(PUOu8/-");
      assertNull(string2);
      
      String string3 = StringUtils.stripAccents((String) null);
      assertNull(string3);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'['}, charArray0);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      String string4 = StringUtils.remove((String) null, "");
      assertNull(string4);
      
      String string5 = StringUtils.leftPad("fXYc{.jDgt0@?K85L|]", (-1), "L~");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("fXYc{.jDgt0@?K85L|]", string5);
      
      String string6 = StringUtils.substringBetween("", "L~");
      assertNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "+7cnF`$X!!zQA3TWp";
      charSequenceArray0[5] = (CharSequence) "";
      String string7 = StringUtils.toRootUpperCase("");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "tJF(PUOu8/-";
      int int4 = StringUtils.lastIndexOfAny("fXYc{.jDgt0@?K85L|]", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(19, int4);
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints(" vs ");
      assertNotNull(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {32, 118, 115, 32}, intArray0);
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.swapCase("T\"]N9V");
      assertNotNull(string0);
      assertEquals("t\"]n9v", string0);
      
      String string1 = StringUtils.defaultString("H[KqABKMk](", "t\"]n9v");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("H[KqABKMk](", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("H[KqABKMk](", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isBlank("t\"]n9v");
      assertFalse(boolean0);
      
      String string2 = StringUtils.left("H[KqABKMk](", (-1));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "H[KqABKMk](", (CharSequence) "6~#[TMmG+sWdx");
      assertFalse(int1 == int0);
      assertEquals(12, int1);
      
      String string3 = StringUtils.substringBefore("t\"]n9v", 13);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("t\"]n9v", string3);
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, 99);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      String string0 = StringUtils.replaceChars("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)88;
      shortArray0[1] = (short)88;
      shortArray0[2] = (short)88;
      shortArray0[3] = (short)88;
      shortArray0[4] = (short)88;
      shortArray0[5] = (short)88;
      String string1 = StringUtils.join(shortArray0, '`');
      assertNotNull(string1);
      assertEquals(6, shortArray0.length);
      assertArrayEquals(new short[] {(short)88, (short)88, (short)88, (short)88, (short)88, (short)88}, shortArray0);
      assertFalse(string1.equals((Object)string0));
      assertEquals("88`88`88`88`88`88", string1);
      
      String string2 = StringUtils.trimToEmpty("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isNumeric("88`88`88`88`88`88");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceChars("!$0w(Nv#IYm:X9bmf", "Array element ", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("!$0w(Nv#IY:X9bf", string3);
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      int int0 = StringUtils.lastOrdinalIndexOf("ln}?6<^]?5Yocln}?6<^]?5Yoc", "ln}?6<^]?5Yocln}?6<^]?5Yoc", 7);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripToEmpty("ln}?6<^]?5Yocln}?6<^]?5Yoc");
      assertNotNull(string0);
      assertEquals("ln}?6<^]?5Yocln}?6<^]?5Yoc", string0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "ln}?6<^]?5Yocln}?6<^]?5Yoc", (CharSequence) "ln}?6<^]?5Yocln}?6<^]?5Yoc", (-1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      String string0 = StringUtils.stripAccents("7;Qv+w!+q]1?mSlrvbO");
      assertNotNull(string0);
      assertEquals("7;Qv+w!+q]1?mSlrvbO", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("7;Qv+w!+q]1?mSlrvbO", "7;Qv+w!+q]1?mSlrvbO");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.truncate("7;Qv+w!+q]1?mSlrvbO", 16);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7;Qv+w!+q]1?mSlr", string1);
      
      String string2 = StringUtils.substringAfterLast("7;Qv+w!+q]1?mSlrvbO", 965);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      String string0 = StringUtils.substringBetween("v7-q\"]4", "v7-q\"]4");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      String string0 = StringUtils.substringBefore("?*CEG|\"|QM07gw0", "`x`g|xVk5MP91F");
      assertNotNull(string0);
      assertEquals("?*CEG|\"|QM07gw0", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("?*CEG|\"|QM07gw0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      String string0 = StringUtils.substringAfter("kMLMAl)!", 64);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "kMLMAl)!");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      String string0 = StringUtils.leftPad("Y\"e]{5{", 56, "Y\"e]{5{");
      assertNotNull(string0);
      assertEquals("Y\"e]{5{Y\"e]{5{Y\"e]{5{Y\"e]{5{Y\"e]{5{Y\"e]{5{Y\"e]{5{Y\"e]{5{", string0);
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '1';
      char char0 = ']';
      charArray0[1] = ']';
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'r');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (-1205L);
      longArray0[1] = (long) '1';
      longArray0[2] = (long) 0;
      longArray0[3] = (long) '1';
      longArray0[4] = (long) 0;
      longArray0[5] = (-2015L);
      String string1 = StringUtils.join(longArray0, 'u');
      assertNotNull(string1);
      assertEquals(6, longArray0.length);
      assertArrayEquals(new long[] {(-1205L), 49L, 0L, 49L, 0L, (-2015L)}, longArray0);
      assertEquals("-1205u49u0u49u0u-2015", string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("-1205u49u0u49u0u-2015");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripToEmpty("-1205u49u0u49u0u-2015");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("-1205u49u0u49u0u-2015", string2);
      
      PriorityQueue<Object> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Object>(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      String string0 = StringUtils.stripToNull("xq]lP9O3");
      assertNotNull(string0);
      assertEquals("xq]lP9O3", string0);
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[19];
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[6] = (CharSequence) "Minimum abbreviation width with offset is %d";
      String string0 = StringUtils.substringBetween("Minimum abbreviation width with offset is %d", "', has a length less than 2");
      assertNull(string0);
      
      String string1 = StringUtils.stripAccents((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.remove("40f$Cb3D-$6", "=>'wDTr]/");
      assertNotNull(string2);
      assertEquals("40f$Cb3D-$6", string2);
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.appendIfMissing("Tz!9o!u6_jlt *PA#", "p{InCombiningDiacriticalMarks}+", stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("Tz!9o!u6_jlt *PA#p{InCombiningDiacriticalMarks}+", string0);
      
      String string1 = StringUtils.lowerCase((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray1 = Locale.getISOLanguages();
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(188, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.unwrap("BS[", '\u001A');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("BS[", string2);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[4] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "BS[", 4);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.leftPad("Comparator should not be null.", (-1), "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Comparator should not be null.", string3);
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      String string0 = StringUtils.chomp("\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[1];
      String string1 = StringUtils.join(floatArray0, '7');
      assertNotNull(string1);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0", string1);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.remove("org.apache.commons.lang3.StringUtils", "]vP)*V)5KQ`:7>W!");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", charSequence0);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      String string2 = StringUtils.stripToNull("h");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("h", string2);
      
      charSequenceArray0[3] = (CharSequence) "h";
      String string3 = StringUtils.removeStartIgnoreCase("h", "h");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string4 = StringUtils.trim("h");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("h", string4);
      
      charSequenceArray0[5] = (CharSequence) "h";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "h";
      stringArray0[1] = "org.apache.commons.lang3.StringUtils";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(2, stringArray1.length);
      assertEquals(2, stringArray0.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      Locale locale0 = Locale.lookup(vector0, (Collection<Locale>) null);
      assertNull(locale0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      String string5 = StringUtils.upperCase("...", (Locale) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("...", string5);
      
      String string6 = StringUtils.abbreviateMiddle("', has a length less than 2", "org.apache.commons.lang3.StringUtils", 75);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("', has a length less than 2", string6);
      
      boolean boolean1 = StringUtils.isAllUpperCase("org.apache.commons.lang3.StringUtils");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      String string0 = StringUtils.stripToNull("fXYc{.jDgt0@?K85L|]");
      assertNotNull(string0);
      assertEquals("fXYc{.jDgt0@?K85L|]", string0);
      
      int int0 = StringUtils.ordinalIndexOf("fXYc{.jDgt0@?K85L|]", "fXYc{.jDgt0@?K85L|]", (-144));
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'['}, charArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllLowerCase("fXYc{.jDgt0@?K85L|]");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int[] intArray0 = StringUtils.toCodePoints("fXYc{.jDgt0@?K85L|]");
      assertNotNull(intArray0);
      assertEquals(19, intArray0.length);
      
      String string1 = StringUtils.substringAfterLast("\n", (-1));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.lowerCase("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean3 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean4 = StringUtils.containsAny((CharSequence) "fXYc{.jDgt0@?K85L|]", charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'['}, charArray0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", (-1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string3 = StringUtils.substringBetween("+7cnF`$X!!zQA3TWp", "tJF(PUOu8/-");
      assertNull(string3);
      
      String string4 = StringUtils.stripAccents((String) null);
      assertNull(string4);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'['}, charArray0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      String string5 = StringUtils.remove((String) null, "");
      assertNull(string5);
      
      String string6 = StringUtils.leftPad("fXYc{.jDgt0@?K85L|]", (-1), "L~");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("fXYc{.jDgt0@?K85L|]", string6);
      
      String string7 = StringUtils.substringBetween("", "L~");
      assertNull(string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "+7cnF`$X!!zQA3TWp";
      charSequenceArray0[5] = (CharSequence) "";
      String string8 = StringUtils.toRootUpperCase("");
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertEquals("", string8);
      
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "tJF(PUOu8/-";
      int int4 = StringUtils.lastIndexOfAny("fXYc{.jDgt0@?K85L|]", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(19, int4);
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      String string0 = StringUtils.unwrap("ln}?6<^]?5Yoc", "\"tcuf~Dd|l");
      assertNotNull(string0);
      assertEquals("ln}?6<^]?5Yoc", string0);
      
      String string1 = StringUtils.chomp("ln}?6<^]?5Yoc", "A.DwS+Ef<T1");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("ln}?6<^]?5Yoc", string1);
      
      String string2 = StringUtils.swapCase((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.unwrap("Search and Replace array lengths don't match: ", "^4`");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ln}?6<^]?5Yoc");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.replace("Cannot store ", "Search and Replace array lengths don't match: ", "Locale must not be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Cannot store ", string4);
      
      int int0 = StringUtils.countMatches((CharSequence) "Cannot store ", (CharSequence) "ln}?6<^]?5Yoc");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Cannot store ", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.removePattern("%Mggiuf$<*LrQS&J_#", "ln}?6<^]?5Yoc");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("%Mggiuf$<*LrQS&J_#", string5);
      
      String string6 = StringUtils.replaceOnce("Locale must not be null", "Search and Replace array lengths don't match: ", (String) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("Locale must not be null", string6);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.ArrayUtils", "K");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string7 = StringUtils.trim("");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string8 = StringUtils.rightPad("org.apache.commons.lang3.ArrayUtils", 0, 'i');
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string8);
      
      int int2 = StringUtils.ordinalIndexOf("K", "K", (-1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean2 = StringUtils.startsWithAny("org.apache.commons.lang3.ArrayUtils", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.leftPad("je", (-490), "L4**c>4|Pt[go4D8");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("je", string1);
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, (String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      String string1 = StringUtils.abbreviate("", (String) null, 2973);
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[8] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.lowerCase("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      String string3 = StringUtils.join(booleanArray0, 'h');
      assertNotNull(string3);
      assertEquals(9, booleanArray0.length);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, false, false, false}, booleanArray0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("falsehtruehfalsehfalsehtruehfalsehfalsehfalsehfalse", string3);
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = "hy3)EroN6t<";
      stringArray0[2] = "Kv`M~#D1$l1#s";
      String string0 = "!Vv";
      stringArray0[3] = "!Vv";
      stringArray0[4] = null;
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("hy3)EroN6t<", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Cannot store ";
      stringArray0[2] = "Cannot store ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Cannot store ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      String string0 = StringUtils.chomp("Strings must not be nullComparator should not be null.");
      assertNotNull(string0);
      assertEquals("Strings must not be nullComparator should not be null.", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Strings must not be nullComparator should not be null.";
      String string1 = StringUtils.replaceEachRepeatedly(" vsj ", stringArray0, stringArray0);
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" vsj ", string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " vsj ", "FLsUo3:Cd6qH)m4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Cannot store ";
      stringArray0[1] = "Cannot store ";
      stringArray0[2] = "Cannot store ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Cannot store ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      String string0 = "L7\\";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "L7";
      stringArray0[1] = "1@A&+'&x";
      stringArray0[2] = " vsj ";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "=tVj5xn-,hAP*+$Q[y";
      stringArray0[6] = "L7";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("L7", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String string1 = StringUtils.defaultString("(OI", "JE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(OI", string1);
      
      String string2 = StringUtils.replaceOnce("", "(OI", "je");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("1]qjH", "je");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("je1]qjHje", string3);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'G';
      charArray0[2] = 'p';
      charArray0[4] = 'D';
      charArray0[6] = '\u0081';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "je1]qjHje", charArray0);
      assertEquals(7, charArray0.length);
      assertArrayEquals(new char[] {'G', 'G', 'p', '\u0000', 'D', '\u0000', '\u0081'}, charArray0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "je", (CharSequence) "(OI");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'G';
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(71);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains('p'));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PriorityQueue<Object> priorityQueue1 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue1);
      assertEquals(0, priorityQueue1.size());
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(priorityQueue1.contains(object0));
      
      priorityQueue1.clear();
      assertNotSame(priorityQueue1, priorityQueue0);
      assertEquals(0, priorityQueue1.size());
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(priorityQueue1.contains(object0));
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      boolean boolean0 = priorityQueue0.add(object1);
      assertNotSame(object1, object0);
      assertNotSame(priorityQueue0, priorityQueue1);
      assertEquals(1, priorityQueue0.size());
      assertFalse(object1.equals((Object)object0));
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertTrue(boolean0);
      assertTrue(priorityQueue0.contains(object1));
      assertFalse(priorityQueue0.contains(object0));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(string2));
      
      String string4 = StringUtils.join((Iterable<?>) arrayDeque0, 'p');
      assertNotNull(string4);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      assertFalse(arrayDeque0.contains(string2));
      
      String string5 = StringUtils.replace("1]\u0000jH", "je", "", 0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("1]\u0000jH", string5);
      
      int int2 = StringUtils.indexOf((CharSequence) "", 1444, 0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      String string0 = StringUtils.chomp("maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      String string1 = StringUtils.join(floatArray0, '7');
      assertNotNull(string1);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0", string1);
      
      String string2 = StringUtils.rightPad("maxWith cannot be negative", 265, "maxWith cannot be negative");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWi", string2);
      
      String[] stringArray0 = new String[1];
      String string3 = StringUtils.replaceEachRepeatedly(" vs ", stringArray0, stringArray0);
      assertNotNull(string3);
      assertEquals(1, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" vs ", string3);
      
      boolean boolean0 = StringUtils.isNotBlank("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWi");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) " vs ", "FLsUo3:Cd6qH)m4");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.difference("maxWith cannot be negative", "0.0");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("0.0", string4);
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      String string0 = "L";
      String string1 = StringUtils.replaceOnceIgnoreCase("L", ".sg2eWe%%", " ");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("L", string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "L";
      stringArray0[1] = "L";
      stringArray0[2] = "L";
      stringArray0[3] = "L";
      stringArray0[4] = ".sg2eWe%%";
      stringArray0[5] = ".sg2eWe%%";
      stringArray0[6] = ".sg2eWe%%";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(".sg2eWe%%", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      String string0 = StringUtils.stripToNull(",rs");
      assertNotNull(string0);
      assertEquals(",rs", string0);
      
      String string1 = StringUtils.removeAll("Ng_Y;*+q(OI", "ator should not be null.");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ng_Y;*+q(OI", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Ng_Y;*+q(OI", (String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.chomp("comparator", ">#;F");
      assertNotNull(string0);
      assertEquals("comparator", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) ">#;F", '?');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[19];
      boolean boolean0 = StringUtils.endsWithAny("Minimum abbreviation width with offset is %d", charSequenceArray0);
      assertEquals(19, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWith("Minimum abbreviation width with offset is %d", charSequenceArray0[0]);
      assertEquals(19, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.removeEnd("Minimum abbreviation width with offset is %d", "ch");
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'Y';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'Y', (-287), 89);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -287
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.appendIfMissing("je", "p{InCombiningDiacriticalMarks}+", stringArray0);
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("je", string1);
      
      String string2 = StringUtils.lowerCase("l?K:#x/BMTbD[");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("l?k:#x/bmtbd[", string2);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = Locale.getISOLanguages();
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(188, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, (String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      String string1 = StringUtils.abbreviate("", (String) null, 2973);
      assertNotNull(string1);
      assertEquals("", string1);
      
      charSequenceArray0[8] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.lowerCase("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = 'E';
      charArray0[1] = 'k';
      charArray0[2] = 'f';
      charArray0[3] = '#';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'E', 'k', 'f', '#'}, charArray0);
      assertEquals((-1), int0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      String string0 = StringUtils.join(intArray0, 'L', (-1), (-1));
      assertNotNull(string0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      String string0 = StringUtils.substring("\r", (-981), (-981));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("", 21, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                     ", string1);
      
      String string2 = StringUtils.trimToNull("\r");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\r");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "nO[9)lmh.Ix~T%H");
      assertNull(stringArray0);
      
      String string3 = StringUtils.getDigits("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "\r", 5360, 5360);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.substringsBetween("Arr", (String) null, "                     ");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.stripStart((String) null, "p{InCombiningDiacriticalMarks}+");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      boolean boolean0 = StringUtils.endsWithAny("(OI", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("JE", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.join((int[]) null, '{', (-152), 11);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("LNuk>Qz|sjw");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceOnce("org.apache.commons.lang3.exception.CloneFailedException", "_", "_");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "sH<;#");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1699;
      shortArray0[1] = (short)105;
      shortArray0[2] = (short)127;
      shortArray0[3] = (short)1750;
      String string0 = StringUtils.removeFirst("nDk`'zgL)~U", ",e`SZOyi?GlDH EDhVE");
      assertNotNull(string0);
      assertEquals("nDk`'zgL)~U", string0);
      
      boolean boolean0 = StringUtils.endsWithAny("nDk`'zgL)~U", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.right("YOQ/0y/C%Jtu>6K", (short)1750);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("YOQ/0y/C%Jtu>6K", string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "YOQ/0y/C%Jtu>6K";
      stringArray0[1] = "YOQ/0y/C%Jtu>6K";
      stringArray0[2] = "YOQ/0y/C%Jtu>6K";
      stringArray0[3] = "nDk`'zgL)~U";
      stringArray0[4] = "nDk`'zgL)~U";
      String string2 = StringUtils.join(stringArray0);
      assertNotNull(string2);
      assertEquals(5, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("YOQ/0y/C%Jtu>6KYOQ/0y/C%Jtu>6KYOQ/0y/C%Jtu>6KnDk`'zgL)~UnDk`'zgL)~U", string2);
      
      boolean boolean1 = StringUtils.startsWith("_~pw;iY*w", "YOQ/0y/C%Jtu>6KYOQ/0y/C%Jtu>6KYOQ/0y/C%Jtu>6KnDk`'zgL)~UnDk`'zgL)~U");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.substringAfter("vy5t$z`skwBD@SZ", (-1022));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.stripToEmpty("YOQ/0y/C%Jtu>6KYOQ/0y/C%Jtu>6KYOQ/0y/C%Jtu>6KnDk`'zgL)~UnDk`'zgL)~U");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("YOQ/0y/C%Jtu>6KYOQ/0y/C%Jtu>6KYOQ/0y/C%Jtu>6KnDk`'zgL)~UnDk`'zgL)~U", string4);
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      CharSequence charSequence0 = null;
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = "Jl)aGW";
      String string1 = "Umod)k%skx";
      String string2 = StringUtils.unwrap("Jl)aGW", "Umod)k%skx");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Jl)aGW", string2);
      
      charSequenceArray0[0] = (CharSequence) "Jl)aGW";
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = null;
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance(charSequenceArray0[4], charSequenceArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      String string0 = StringUtils.substringBetween("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)1699;
      shortArray0[1] = (short)105;
      String string0 = StringUtils.rightPad((String) null, 19);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      String string0 = StringUtils.rightPad("LB6b", (-403), '}');
      assertNotNull(string0);
      assertEquals("LB6b", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Array element ");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace("LB6b");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.removeStart("n~s%-jd'o-jd'oG", "v~()");
      assertNotNull(string0);
      assertEquals("n~s%-jd'o-jd'oG", string0);
      
      String string1 = StringUtils.capitalize("n~s%-jd'o-jd'oG");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("N~s%-jd'o-jd'oG", string1);
      
      String string2 = StringUtils.toRootLowerCase("<Dr[O_R;G8rY|l");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("<dr[o_r;g8ry|l", string2);
      
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string3);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "<dr[o_r;g8ry|l", (CharSequence) "<Dr[O_R;G8rY|l");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      String string0 = StringUtils.replace("org.apache.commons.lang3.StringUtils", "", (String) null);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "org.apache.commons.lang3.StringUtils");
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Bt!,{FS[T$C\"\"");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("Bt!,{FS[T$C\"\""));
      
      String string0 = StringUtils.join((List<?>) vector0, 'q', (-2918), (-2918));
      assertNotNull(string0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("", string0);
      assertFalse(vector0.contains("Bt!,{FS[T$C\"\""));
      
      String[] stringArray1 = StringUtils.split("Bt!,{FS[T$C\"\"");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.join((Object[]) stringArray0, "!j|CU4U", 351, (-4643));
      assertNotNull(string1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeEnd("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = StringUtils.split("aofaz~^,4y\"Tgccb", "aofaz~^,4y\"Tgccb", 0);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("aofaz~^,4y\"Tgccb", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("aofaz~^,4y\"Tgccb", (-586), (-589));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.replaceOnceIgnoreCase("'fL{[xV^C3e]", "%t~or%qa?L", (String) null);
      assertNotNull(string0);
      assertEquals("'fL{[xV^C3e]", string0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      String string0 = StringUtils.removeEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Bt!,{FS[T$C\"\"");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.contains("Bt!,{FS[T$C\"\""));
      
      String string0 = StringUtils.join((List<?>) vector0, 'q', (-2918), (-2918));
      assertNotNull(string0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals("", string0);
      assertFalse(vector0.contains((-2918)));
      
      String[] stringArray1 = StringUtils.split("Bt!,{FS[T$C\"\"");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.join((Object[]) stringArray0, "!j|CU4U", 351, (-4643));
      assertNotNull(string1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(1, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeEnd("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("Bt!,{FS[T$C\"\"", "Bt!,{FS[T$C\"\"", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Bt!,{FS[T$C\"\"", string3);
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      String string0 = StringUtils.rotate("", 1345);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("#L4**c>4|Pt[go4D8");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.appendIfMissing("Tz!9o!u6_jlt *PA#", "p{InCombiningDiacriticalMarks}+", stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("Tz!9o!u6_jlt *PA#p{InCombiningDiacriticalMarks}+", string0);
      
      String string1 = StringUtils.wrap((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.lowerCase((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase((String) null, "dJoQb1*");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.rightPad("A.DwS+Ef<T1", 22, "Cannot store ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertEquals("A.DwS+Ef<T1Cannot stor", string4);
      
      String string5 = StringUtils.EMPTY;
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String string6 = StringUtils.substring("Cannot store ", 22, 22);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'Y');
      assertEquals(0, int0);
      
      String string7 = StringUtils.rotate("Cloneable type ", 0);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals("Cloneable type ", string7);
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      String string0 = StringUtils.lowerCase("JE");
      assertNotNull(string0);
      assertEquals("je", string0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.join((List<?>) linkedList0, "Cannot clone Cloneable type ", 1133, 1133);
      assertNotNull(string1);
      assertEquals(0, linkedList0.size());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAlpha("je");
      assertTrue(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "Cannot clone Cloneable type ", 'U');
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      String string0 = StringUtils.chomp("maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = " vsj ";
      String string1 = StringUtils.strip("maxWith cannot be negative");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "maxWith cannot be negative", "\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      String string0 = StringUtils.chomp("maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = " vsj ";
      String string1 = StringUtils.uncapitalize("]CfsS");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]CfsS", string1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" vsj ", string2);
      
      boolean boolean0 = StringUtils.isMixedCase("maxWith cannot be negative");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compare("uq(JCoa=bwe<GPz%-9W", " vsj ", true);
      assertEquals(85, int0);
      
      String string3 = StringUtils.removeEnd("]CfsS", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("]CfsS", string3);
      
      boolean boolean1 = StringUtils.isAlphaSpace(" vsj ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      String string0 = StringUtils.rightPad("\"NRy-Y?S-:", 51, "Cannot store ");
      assertNotNull(string0);
      assertEquals("\"NRy-Y?S-:Cannot store Cannot store Cannot store Ca", string0);
      
      String string1 = StringUtils.truncate("ZZ", 51);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ZZ", string1);
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("}aT@[wAFDPT");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      String string0 = StringUtils.chomp("maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "maxWith cannot be negative";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("maxWith cannot be negative", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      String string0 = StringUtils.replaceEach("vAnGO~OBsA~", (String[]) null, (String[]) null);
      assertNotNull(string0);
      assertEquals("vAnGO~OBsA~", string0);
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      String string0 = StringUtils.rotate("", 1482);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      
      String string1 = locale0.getScript();
      assertNotNull(string1);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = locale0.getDisplayLanguage();
      assertNotNull(string2);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("German", string2);
      
      Locale locale1 = Locale.JAPAN;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja_JP", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      
      Locale locale2 = locale1.stripExtensions();
      assertNotNull(locale2);
      assertSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("JP", locale2.getCountry());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("ja_JP", locale2.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      
      String string3 = locale0.getDisplayLanguage(locale2);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("JP", locale2.getCountry());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("JPN", locale2.getISO3Country());
      assertEquals("ja_JP", locale2.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\u30C9\u30A4\u30C4\u8A9E", string3);
      
      String string4 = locale0.getDisplayName();
      assertNotNull(string4);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("German (Germany)", string4);
      
      String string5 = locale0.getDisplayVariant(locale1);
      assertNotNull(string5);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja_JP", locale1.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String string6 = StringUtils.upperCase("", locale0);
      assertNotNull(string6);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertEquals("", string6);
      
      String string7 = StringUtils.strip("X#Ic:;iaX");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertEquals("X#Ic:;iaX", string7);
      
      String string8 = StringUtils.truncate("", 57);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertEquals("", string8);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "Cannot store ";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "X#Ic:;iaX";
      String string9 = locale1.getDisplayLanguage();
      assertNotNull(string9);
      assertSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja_JP", locale1.toString());
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("Japanese", string9);
      
      stringArray0[6] = "X#Ic:;iaX";
      stringArray0[7] = "";
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "X#Ic:;iaX";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("German", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 8 vs 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.toRootLowerCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "Strings must not be null", "Strings must not be null");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.rotate("=EU%3", 9);
      assertNotNull(string0);
      assertEquals("EU%3=", string0);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      
      String string1 = locale0.getDisplayLanguage();
      assertNotNull(string1);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertFalse(string1.equals((Object)string0));
      assertEquals("Korean", string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Strings must not be null", (char[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.rightPad("2e %v~qm>0T^", 9, "Strings must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("2e %v~qm>0T^", string2);
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      String string0 = StringUtils.remove(", Length: ", "org.apache.commons.lang3.ObjectUtilsfkY9.Z1");
      assertNotNull(string0);
      assertEquals(", Length: ", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) ", Length: ", (CharSequence) "]vP)*V)5KQ`:7>W!");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals(", Length: ", charSequence0);
      
      String string1 = StringUtils.defaultString("}hA2N+@[G", ", Length: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("}hA2N+@[G", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "}hA2N+@[G";
      stringArray0[1] = "maxWith cannot be negative";
      stringArray0[2] = "}hA2N+@[G";
      stringArray0[3] = "r6G%~=rCE++g$VF{HuM";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, ".[jA)");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.removeEnd(", Length: ", "\n");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(", Length: ", string2);
      
      String string3 = StringUtils.abbreviateMiddle("n~", "}hA2N+@[G", (-981));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("n~", string3);
      
      String string4 = StringUtils.rightPad("}hA2N+@[G", (-1350));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("}hA2N+@[G", string4);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "}hA2N+@[G", (CharSequence) "n~");
      assertFalse(int1 == int0);
      assertEquals(9, int1);
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      String string0 = "=2tVj5xn-,hAP*+$Q[y";
      String string1 = StringUtils.replaceOnce("=2tVj5xn-,hAP*+$Q[y", "=2tVj5xn-,hAP*+$Q[y", "nDk`'zgL)~U");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("nDk`'zgL)~U", string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      
      char char0 = '-';
      String string2 = StringUtils.join((Object[]) null, '-');
      assertNull(string2);
      
      String string3 = StringUtils.substringAfter((String) null, 963);
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "nDk`'zgL)~U", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Tz!9o!u6_jlt *PA#&/p[8n~s%G", "#", 32);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.remove("Tz!9o!u6_jlt *PA#&/p[8n~s%G", (String) null);
      assertNotNull(string0);
      assertEquals("Tz!9o!u6_jlt *PA#&/p[8n~s%G", string0);
      
      String string1 = StringUtils.substringBetween("+l_]na7Q9H-'?0", "\r");
      assertNull(string1);
      
      String string2 = StringUtils.toRootUpperCase("Tz!9o!u6_jlt *PA#&/p[8n~s%G");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("TZ!9O!U6_JLT *PA#&/P[8N~S%G", string2);
      
      boolean boolean0 = StringUtils.isWhitespace("TZ!9O!U6_JLT *PA#&/P[8N~S%G");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "+l_]na7Q9H-'?0", 2540);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      char[] charArray0 = new char[5];
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.strip("LNuk>Qz|sjw");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("LNuk>Qz|sjw", string1);
      
      String string2 = StringUtils.chop("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.join(charArray0, '\u0000', 186, (-1698));
      assertNotNull(string3);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "LNuk>Qz|sjw", (CharSequence) "");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("", "7r(Pn6k/(", false);
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.CharUtils", (CharSequence) "uUzbz&S");
      assertEquals(34, int0);
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      String string0 = StringUtils.rightPad("%sR", 1065, "-O=bG(");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      String string0 = StringUtils.chomp("maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      String string1 = StringUtils.join(floatArray0, '7');
      assertNotNull(string1);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0.0", string1);
      
      String string2 = StringUtils.rightPad("maxWith cannot be negative", 265, "maxWith cannot be negative");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWi", string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = " vs ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(" vs ", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrapIfMissing("(^-0mtVcC[>=!p%|RNV", "UPk");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("UPk(^-0mtVcC[>=!p%|RNVUPk", string1);
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripToEmpty("2N~!#.)_{S");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("2N~!#.)_{S", string1);
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      String string0 = StringUtils.leftPad("Exception cloning Cloneable type ", (-505), 'U');
      assertNotNull(string0);
      assertEquals("Exception cloning Cloneable type ", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Exception cloning Cloneable type ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      char[] charArray0 = new char[13];
      charArray0[2] = 'q';
      String string0 = StringUtils.join(charArray0, ',');
      assertNotNull(string0);
      assertEquals(13, charArray0.length);
      assertEquals("\u0000,\u0000,q,\u0000,\u0000,\u0000,\u0000,\u0000,\u0000,\u0000,\u0000,\u0000,\u0000", string0);
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      int int0 = StringUtils.compare("LNuk>Qz|sjw", "LNuk>Qz|sjw", true);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "ho{Nrgt/+cVPx]mx");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("}?6<^]?5Yoc");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      String string0 = StringUtils.removeAll("ch", "ch");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceChars("", '=', '=');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "ho{Nrgt/+c[VP]mx", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.strip("ch", "Q]O7Q h=r(IQAfERq");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("c", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Q]O7Q h=r(IQAfERq", (CharSequence) "ho{Nrgt/+c[VP]mx");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceOnce("FLsUo3:Cd6qH)m4", "", "ch");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("FLsUo3:Cd6qH)m4", string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("Q]O7Q h=r(IQAfERq", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Q]O7Q h=r(IQAfERq", string4);
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("org.apache.commons.lang3.CharUtils", "uUzbz&S");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("uUzbz&S", '%');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("uUzbz&S", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "uUzbz&S", (CharSequence) "uUzbz&S");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.unwrap("Minimum abbreviation width with offset is %d", '');
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = "Minimum abbreviation width with offset is %d";
      stringArray0[2] = "Minimum abbreviation width with offset is %d";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertEquals(7, stringArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare("A.DwS+Ef<T1", (String) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.wrap("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare("org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", false);
      assertEquals(72, int0);
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      String string0 = StringUtils.removeAll("ch", "ch");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.stripToEmpty("L");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L", string1);
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 487, 160);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.truncate("Minimum abbreviation width is %d", 487);
      assertNotNull(string1);
      assertEquals("Minimum abbreviation width is %d", string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Minimum abbreviation width is %d", (CharSequence) null, (-472));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, 46);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.leftPad((String) null, 487, '\'');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      String string0 = StringUtils.valueOf(charArray0);
      assertNotNull(string0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'T'}, charArray0);
      assertEquals("T", string0);
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      
      int int0 = StringUtils.getFuzzyDistance("T", "T", locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("nDk`'zgL)~U", "nDk`'zgL)~U", "nDk`'zgL)~U");
      assertNotNull(string0);
      assertEquals("nDk`'zgL)~U", string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '|';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "nDk`'zgL)~U", charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'|'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, 'p');
      assertNull(string0);
      
      String string1 = StringUtils.substringBefore("\n", "\n");
      assertNotNull(string1);
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("q{7+", "Supplied value must be a valid byte literal between -32768 and 32767: [", (-2170), 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 72
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      String string0 = StringUtils.substring(",rs", (-594), (-594));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", "O=cM&a", (-594));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      String string0 = "7r(Pn6k/(";
      String string1 = "{}";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("7r(Pn6k/(", "{}", 100, (-3935));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      String string0 = "1\\`=:-&''SP '8!/";
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_CA", locale1.toString());
      
      String string1 = locale0.getDisplayName();
      assertNotNull(string1);
      assertSame(locale0, locale1);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertFalse(string1.equals((Object)string0));
      assertEquals("English (Canada)", string1);
      
      String string2 = StringUtils.upperCase("1`=:-&''SP '8!/", locale0);
      assertNotNull(string2);
      assertSame(locale0, locale1);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("1`=:-&''SP '8!/", string2);
      
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("1`=:-&''SP '8!/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: 1`=:-&''SP '8!/
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      
      String string0 = StringUtils.upperCase("}t[l|IgF&%c'6WWBh'", locale0);
      assertNotNull(string0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("}T[L|IGF&%C'6WWBH'", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "}T[L|IGF&%C'6WWBH'", 'p');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "}T[L|IGF&%C'6WWBH'", (CharSequence) "}T[L|IGF&%C'6WWBH'");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      String string0 = StringUtils.substring("@<&c'3HV2BFL", (-1));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      String string0 = StringUtils.left("nDk`'zgL)~U", 16);
      assertNotNull(string0);
      assertEquals("nDk`'zgL)~U", string0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-112);
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "nDk`'zgL)~U");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // nDk`'zgL)~U
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\r";
      stringArray0[1] = "\r";
      stringArray0[2] = "]`}xH:A";
      stringArray0[3] = "\r";
      stringArray0[4] = " has no clone method";
      stringArray0[5] = "\r";
      stringArray0[6] = "\r";
      stringArray0[7] = "\r";
      stringArray0[8] = "\r";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(9, stringArray0.length);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      String[] stringArray0 = new String[10];
      stringArray0[0] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string1);
      assertEquals(10, stringArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)101;
      String string2 = StringUtils.toString(byteArray0, string0);
      assertNotNull(string2);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)101}, byteArray0);
      assertEquals("e", string2);
  }

  @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("$?k_d`k\"G!8<vHCf]K", "$?k_d`k\"G!8<vHCf]K");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.wrap("", ']');
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("$?k_d`k\"G!8<vHCf]K");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeFirst("$?k_d`k\"G!8<vHCf]K", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$?k_d`k\"G!8<vHCf]K", string1);
  }

  @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      String string0 = StringUtils.wrap("", 'E');
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceFirst("9_xgH,aR8^yOy2_)U#|", "", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("9_xgH,aR8^yOy2_)U#|", string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)58;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-118);
      byteArray0[3] = (byte)115;
      byteArray0[4] = (byte) (-30);
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.join((List<?>) arrayList0, 'V', (-771), (-771));
      assertNotNull(string0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", string0);
      assertFalse(arrayList0.contains('V'));
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], charSequenceArray0[0], Integer.MAX_VALUE);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", ']');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.wrap("K", ']');
      assertNotNull(string0);
      assertEquals("]K]", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.difference("K", ", Length: org.apache.commons.lang3.RegExUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", Length: org.apache.commons.lang3.RegExUtils", string1);
      
      String string2 = StringUtils.substringBefore(", Length: org.apache.commons.lang3.RegExUtils", "Cloneable type ");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(", Length: org.apache.commons.lang3.RegExUtils", string2);
      
      String string3 = StringUtils.appendIfMissing("]K]", ", Length: org.apache.commons.lang3.RegExUtils", stringArray0);
      assertNotNull(string3);
      assertEquals(0, stringArray0.length);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("]K], Length: org.apache.commons.lang3.RegExUtils", string3);
      
      String string4 = StringUtils.trimToEmpty(")");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(")", string4);
  }

  @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "maxWith cannot be negative";
      stringArray0[1] = ".[jA)";
      stringArray0[2] = "maxWith cannot be negative";
      stringArray0[3] = "maxWith cannot be negative";
      stringArray0[5] = ".[jA)";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "\n");
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.appendIfMissing(".[jA)", "maxWith cannot be negative", stringArray0);
      assertNotNull(string0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(6, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(".[jA)", string0);
  }

  @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.appendIfMissing("Tz!9o!u6_jlt *PA#", "p{InCombiningDiacriticalMarks}+", stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("Tz!9o!u6_jlt *PA#p{InCombiningDiacriticalMarks}+", string0);
      
      String string1 = StringUtils.center((String) null, 22);
      assertNull(string1);
      
      String string2 = StringUtils.lowerCase((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.removeEndIgnoreCase((String) null, "dJoQb1*");
      assertNull(string3);
      
      String string4 = StringUtils.removeEnd("nN8=s_fw}3dXF", (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertEquals("nN8=s_fw}3dXF", string4);
  }

  @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("qSN#]L|}5qZh", "rOH");
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.split("Threshold must not be negative", "\n");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.substringAfter("Invalid locale format: ", (-2382));
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "Invalid locale format: ", "...");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "...";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.center("...", (-2382));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      
      String string2 = StringUtils.stripEnd("Invalid locale format: ", "VV[?'NB<uLLtnK{");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Invalid locale format: ", string2);
  }

  @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      String string0 = StringUtils.lowerCase("l?K:#x/BMTbD[");
      assertNotNull(string0);
      assertEquals("l?k:#x/bmtbd[", string0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string1 = StringUtils.wrapIfMissing("l?K:#x/BMTbD[", '\u001A');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\u001Al?K:#x/BMTbD[\u001A", string1);
      
      String string2 = StringUtils.unwrap("B\"w7n!", 'X');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("B\"w7n!", string2);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string3);
      assertEquals(188, stringArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAny((CharSequence) null, stringArray0);
      assertEquals(188, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 4, 'D');
      assertNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 4);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.overlay((String) null, "?l%w)(0q!lS{.", 4, 4);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[0] = (byte)90;
      String string0 = StringUtils.join(byteArray0, 'W');
      assertNotNull(string0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)90, (byte)0}, byteArray0);
      assertEquals("90W0", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("90W0", "90W0", (int) (byte)90);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("90W0", stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase(",rs", "R", "org.apace.commons.lang3.ObjectUtils", 3742);
      assertNotNull(string0);
      assertEquals(",org.apace.commons.lang3.ObjectUtilss", string0);
      
      String string1 = StringUtils.center("R", 3742);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase((String) null);
      assertNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string1);
      assertEquals(5, stringArray0.length);
      
      String string2 = StringUtils.leftPad(string0, 32, ';');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("hJg|3PZ[]", "fy!oM&tpm/", 1086);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray1);
      
      String string1 = StringUtils.stripEnd((String) null, "4[u-`Sbi;!5#c7`%d");
      assertNull(string1);
      
      String string2 = StringUtils.unwrap((String) null, 'U');
      assertNull(string2);
      
      String string3 = StringUtils.uncapitalize((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string4);
      assertEquals("", string4);
      
      String string5 = StringUtils.wrap("4[u-`Sbi;!5#c7`%d", (String) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertEquals("4[u-`Sbi;!5#c7`%d", string5);
  }

  @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      String string0 = StringUtils.substringAfter(" has no clone mee method", 64);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring("fzWp8", 64, 64);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfterLast("\n", " has no clone mee method");
      assertNotNull(string2);
      assertEquals("", string2);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'R', (-2397), 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2397
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.reverseDelimited("]3*>\"hj[ACgmP", 'S');
      assertNotNull(string0);
      assertEquals("]3*>\"hj[ACgmP", string0);
      
      String string1 = StringUtils.center("T{Q1P<GD9Fpv10p9N", 2405);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((double[]) null, '&');
      assertNull(string2);
      
      String string3 = StringUtils.stripEnd((String) null, "X");
      assertNull(string3);
      
      String string4 = StringUtils.leftPad("]3*>\"hj[ACgmP", 8, 'L');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("]3*>\"hj[ACgmP", string4);
  }

  @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("LNuk>Qz|sjw", "Arr", " has no clone methodorg.apache.commons.lang3.ArrayUtils");
      assertNotNull(string0);
      assertEquals("LNuk>Qz|sjw", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "LNuk>Qz|sjw", (CharSequence) "LNuk>Qz|sjw");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrapIfMissing(" has no clone methodorg.apache.commons.lang3.ArrayUtils", "Exception cloning Cloneable type org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Exception cloning Cloneable type org.apache.commons.lang3.StringUtils has no clone methodorg.apache.commons.lang3.ArrayUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", string1);
      
      double[] doubleArray0 = new double[0];
      String string2 = StringUtils.join(doubleArray0, '(', 150, (-1));
      assertNotNull(string2);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      char[] charArray0 = new char[5];
      int[] intArray0 = new int[6];
      String string0 = StringUtils.normalizeSpace(" TXnSWr#<:U'\"I");
      assertNotNull(string0);
      assertEquals("TXnSWr#<:U'\"I", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "TXnSWr#<:U'\"I", (CharSequence) "TXnSWr#<:U'\"I", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = StringUtils.isAlpha("\r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("trf(k8|TGVStpM", "trf(k8|TGVStpM", "gHrA|c1)~gTQ0\"3%");
      assertNotNull(string0);
      assertEquals("gHrA|c1)~gTQ0\"3%", string0);
      
      String string1 = StringUtils.substringAfter("Arr", "gHrA|c1)~gTQ0\"3%");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.stripToEmpty("7;Qv+w!+q]1?mSlrvbO");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("7;Qv+w!+q]1?mSlrvbO", string2);
  }

  @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(" vs ", " vs ", " vs ");
      assertNull(stringArray0);
      
      int int0 = StringUtils.compare(" vs ", " vs ");
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints(" vs ");
      assertNotNull(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {32, 118, 115, 32}, intArray0);
      
      String string0 = StringUtils.mid(" vs ", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) " vs ", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) " vs ";
      String string1 = StringUtils.unwrap("", '_');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.normalizeSpace(" vs ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("vs", string2);
  }

  @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Comparator should not be null.", (-15));
      assertNotNull(string0);
      assertEquals("Comparator should not be null.", string0);
  }

  @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Strings must not be null", 65);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Strings must not be null", 65);
      assertEquals((-1), int0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string1 = StringUtils.substringAfter("", (-1));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Object[] objectArray0 = new Object[0];
  }

  @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 't';
      charArray0[1] = 't';
      try { 
        StringUtils.getBytes("C<&`", "org.apache.commons.lang3.CharUtils");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", ']');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) ']';
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) ']';
      String string1 = StringUtils.join(doubleArray0, ']');
      assertNotNull(string1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {93.0, 0.0, 93.0}, doubleArray0, 0.01);
      assertFalse(string1.equals((Object)string0));
      assertEquals("93.0]0.0]93.0", string1);
      
      String string2 = StringUtils.substringAfter("", (-571));
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.substringBefore("93.0]0.0]93.0", 0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("93.0]0.0]93.0", string3);
      
      boolean boolean0 = StringUtils.isAlpha("93.0]0.0]93.0");
      assertFalse(boolean0);
      
      String string4 = StringUtils.normalizeSpace("Array and element cannot both be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Array and element cannot both be null", string4);
      
      try { 
        StringUtils.getBytes("Search and Replace array lengths don't match: ", "93.0]0.0]93.0");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test817()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", ']');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) ']';
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) ']';
      String string1 = StringUtils.join(doubleArray0, ']');
      assertNotNull(string1);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {93.0, 0.0, 93.0}, doubleArray0, 0.01);
      assertFalse(string1.equals((Object)string0));
      assertEquals("93.0]0.0]93.0", string1);
      
      String string2 = StringUtils.substringAfter("", (-571));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.substring("", (-571));
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test818()  throws Throwable  {
      String string0 = StringUtils.replace("{EBh7q>Z]", "{EBh7q>Z]", "{EBh7q>Z]");
      assertNotNull(string0);
      assertEquals("{EBh7q>Z]", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "{EBh7q>Z]", (-1667));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test819()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("", 32, 'r');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.rightPad("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", 2, "~gzeX6RG*]H~/~x;");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", string2);
      
      String string3 = StringUtils.EMPTY;
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr", (CharSequence) "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'r';
      charArray0[3] = 'r';
      charArray0[4] = 'r';
      charArray0[5] = 'r';
      charArray0[6] = 'r';
      charArray0[7] = 'Z';
      String string4 = StringUtils.join(charArray0, '8', 225, 2);
      assertNotNull(string4);
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'r', 'r', 'r', 'r', 'r', 'r', 'r', 'Z'}, charArray0);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("Object varargs must not be null", "~gzeX6RG*]H~/~x;", "u!Ziox}");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Object varargs must not be null", string5);
  }

  @Test(timeout = 4000)
  public void test820()  throws Throwable  {
      String string0 = StringUtils.substring("nP", (-1));
      assertNotNull(string0);
      assertEquals("P", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("*2A=gT&h^No,Z(kIqs9", "*2A=gT&h^No,Z(kIqs9", "P", (-1));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("P", string1);
  }

  @Test(timeout = 4000)
  public void test821()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("1]qjH, Length: ");
      assertNotNull(string0);
      assertEquals("1]qjH, Length:", string0);
      
      String string1 = StringUtils.right("7;(\"|Mu}{*.c\u0007,|c", 272);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7;(\"|Mu}{*.c\u0007,|c", string1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("7;(\"|Mu}{*.c\u0007,|c"));
      
      boolean boolean0 = linkedList0.add("7;(\"|Mu}{*.c\u0007,|c");
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains("7;(\"|Mu}{*.c\u0007,|c"));
      assertFalse(linkedList0.contains(string0));
      
      boolean boolean1 = linkedList0.add("...");
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains("7;(\"|Mu}{*.c\u0007,|c"));
      assertFalse(linkedList0.contains(string0));
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(2, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(linkedList0.contains("7;(\"|Mu}{*.c\u0007,|c"));
      assertFalse(linkedList0.contains(string0));
      
      boolean boolean2 = linkedList0.add("7;(\"|Mu}{*.c\u0007,|c");
      assertEquals(3, linkedList0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(linkedList0.contains("7;(\"|Mu}{*.c\u0007,|c"));
      assertFalse(linkedList0.contains(string0));
      
      String string2 = StringUtils.join((List<?>) linkedList0, 'e', 272, (-217));
      assertNotNull(string2);
      assertEquals(3, linkedList0.size());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertTrue(linkedList0.contains("7;(\"|Mu}{*.c\u0007,|c"));
      assertFalse(linkedList0.contains(string2));
      
      String string3 = StringUtils.removeIgnoreCase("", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "1]qjH, Length: ", 51);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.ordinalIndexOf("1]qjH, Length:", "1]qjH, Length:", 51);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.defaultString("T7|Y@");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("T7|Y@", string4);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "T7|Y@", (CharSequence) "1]qjH, Length: ");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string5 = StringUtils.trimToEmpty("...");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("...", string5);
      
      String string6 = StringUtils.replaceChars("7;(\"|Mu}{*.c\u0007,|c", (String) null, "");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("7;(\"|Mu}{*.c\u0007,|c", string6);
  }

  @Test(timeout = 4000)
  public void test822()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, 'B');
      assertNotNull(string0);
      assertEquals(0, longArray0.length);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-36));
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.normalizeSpace("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceFirst("C<XdBotrmW%c4}", "", "C<XdBotrmW%c4}");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("C<XdBotrmW%c4}C<XdBotrmW%c4}", string2);
  }

  @Test(timeout = 4000)
  public void test823()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("g[@Eut0N7}+>q\"tjo?:", "v7-q\"]4", "v7-q\"]4");
      assertNotNull(string0);
      assertEquals("g[@Eut0N7}+>q\"tjo?:", string0);
  }

  @Test(timeout = 4000)
  public void test824()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chop("Exceptioncloning Clone null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Exceptioncloning Clone nul", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Exceptioncloning Clone nul", "R[%u(", 2);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.repeat("Exceptioncloning Clone nul", 2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Exceptioncloning Clone nulExceptioncloning Clone nul", string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "Exceptioncloning Clone nulExceptioncloning Clone nul");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.rightPad((String) null, (-2494), "Exceptioncloning Clone nul");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test825()  throws Throwable  {
      String string0 = StringUtils.chomp("maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
      
      String string1 = StringUtils.replaceOnce("maxWith cannot be negative", "maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string1);
  }

  @Test(timeout = 4000)
  public void test826()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("'F%@(", (String) null);
      assertNotNull(string0);
      assertEquals("'F%@(", string0);
      
      String string1 = StringUtils.stripEnd("U#/]GwFXl2Z]wz", "|I.");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("U#/]GwFXl2Z]wz", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "|I.";
      boolean boolean0 = StringUtils.endsWithAny("|I.", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.toRootUpperCase((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "U#/]GwFXl2Z]wz", 988);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test827()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test828()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.stripToEmpty("Supplied value must be a valid byte literal between -128 and 127: [");
      assertNotNull(string0);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string0);
  }

  @Test(timeout = 4000)
  public void test829()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      String string0 = "VCU-";
      String string1 = StringUtils.stripToEmpty("VCU-");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("VCU-", string1);
      
      String string2 = StringUtils.removeIgnoreCase("VCU-", "VCU-");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)108;
      byteArray0[4] = (byte) (-126);
      byteArray0[5] = (byte)123;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-98);
      byteArray0[8] = (byte) (-77);
      // Undeclared exception!
      try { 
        Charset.forName("]B0a.TeW");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ]B0a.TeW
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test830()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '<';
      float[] floatArray0 = new float[2];
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '<', 84, 186);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 84
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test831()  throws Throwable  {
      String string0 = StringUtils.chomp(", Length: ", "/r-\"w=sW%t~or%qa?L");
      assertNotNull(string0);
      assertEquals(", Length: ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) ", Length: ";
      charSequenceArray0[1] = (CharSequence) ", Length: ";
      charSequenceArray0[2] = (CharSequence) ", Length: ";
      String string1 = StringUtils.removeAll(", Length: ", ", Length: ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAny((CharSequence) ", Length: ", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ", Length: ", "");
      assertEquals((-1), int0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) (-1);
      String string2 = StringUtils.join(floatArray0, 'x');
      assertNotNull(string2);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {(-1.0F)}, floatArray0, 0.01F);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-1.0", string2);
  }

  @Test(timeout = 4000)
  public void test832()  throws Throwable  {
      String string0 = StringUtils.substring("\r", 49, 4);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("org.apache.commons.lang3.LocaleUtils", 100, "org.apache.commons.lang3.Charsets");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.Charsetorg.apache.commons.lang3.LocaleUtilsorg.apache.commons.lang3.Charset", string1);
      
      String string2 = StringUtils.trimToNull("T3j,G>6rcwZn!$_V");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("T3j,G>6rcwZn!$_V", string2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '^';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "org.apache.commons.lang3.LocaleUtils", charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'^'}, charArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test833()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.removeStart("n~s%-jd'oG", "&)");
      assertNotNull(string1);
      assertEquals("n~s%-jd'oG", string1);
      
      String string2 = StringUtils.capitalize("n~s%-jd'oG");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("N~s%-jd'oG", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      String string3 = StringUtils.prependIfMissingIgnoreCase("n~s%-jd'oG", "N~s%-jd'oG", charSequenceArray0);
      assertNotNull(string3);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("n~s%-jd'oG", string3);
  }

  @Test(timeout = 4000)
  public void test834()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, 'q', (-771), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -771
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test835()  throws Throwable  {
      String string0 = StringUtils.rotate("LNuk>Qz|sjw", 2109);
      assertNotNull(string0);
      assertEquals("k>Qz|sjwLNu", string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("L", "Arr", " has no clone methodorg.apache.commons.lang3.ArrayUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L", string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "LNuk>Qz|sjw", (CharSequence) "L");
      assertEquals(1, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) " has no clone methodorg.apache.commons.lang3.ArrayUtils", (CharSequence) "L", 91);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.stripToEmpty("org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.RegExUtilsorg.apache.commons.lang3.StringUtils", string2);
      
      String string3 = StringUtils.removeIgnoreCase("7D*~z;Qc-SmzQ:w8", "7D*~z;Qc-SmzQ:w8");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.unwrap("Strings must not be null", "L");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Strings must not be null", string4);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("lijk`##UOd.HD,", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test836()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 'o';
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) (-771);
      floatArray0[3] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 1.0F;
      String string0 = StringUtils.join(floatArray0, 'q', (-771), (-771));
      assertNotNull(string0);
      assertEquals(7, floatArray0.length);
      assertArrayEquals(new float[] {111.0F, 0.0F, (-771.0F), 0.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test837()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.capitalize("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.wrapIfMissing("", "org.apache.commons.lang3.Charsets");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test838()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.join((List<?>) linkedList0, 'q', (int) 'q', 0);
      assertNotNull(string0);
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      assertFalse(linkedList0.contains('q'));
  }

  @Test(timeout = 4000)
  public void test839()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(" vs ", " vs ", " vs ");
      assertNull(stringArray0);
      
      int int0 = StringUtils.compare(" vs ", " vs ");
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints(" vs ");
      assertNotNull(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {32, 118, 115, 32}, intArray0);
      
      String string0 = StringUtils.mid(" vs ", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) " vs ", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) " vs ";
      String string1 = StringUtils.leftPad("", 0, '=');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.joinWith(" vs ", objectArray0);
      assertNotNull(string2);
      assertEquals(1, objectArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" vs ", string2);
  }

  @Test(timeout = 4000)
  public void test840()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      float[] floatArray0 = new float[5];
      String string0 = StringUtils.join(floatArray0, 'x');
      assertNotNull(string0);
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals("0.0x0.0x0.0x0.0x0.0", string0);
  }

  @Test(timeout = 4000)
  public void test841()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 3883);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substring("", Integer.MAX_VALUE);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test842()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.joinWith("", objectArray0);
      assertNotNull(string0);
      assertEquals(0, objectArray0.length);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("", 1276);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.strip("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "", (-3103), 1814);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3103
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test843()  throws Throwable  {
      String string0 = StringUtils.substring((String) null, 1276);
      assertNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
  }

  @Test(timeout = 4000)
  public void test844()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("g[@Eut0N7}+>q\"tjo?:", "", "");
      assertNotNull(string0);
      assertEquals("g[@Eut0N7}+>q\"tjo?:", string0);
  }

  @Test(timeout = 4000)
  public void test845()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "Arr");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("Arr");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("Exception cloning Cloneable type ", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertEquals("org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Arr");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Exception cloning Cloneable type ", (String) null, 5);
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray1);
      
      String string2 = StringUtils.wrapIfMissing("V", 'I');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("IVI", string2);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("[_wxF,pq", "[_wxF,pq");
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(9, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string3 = StringUtils.swapCase("V");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("v", string3);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "Arr", (CharSequence) "v");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string4 = StringUtils.right("Exception cloning Cloneable type ", (-1091));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      boolean boolean4 = StringUtils.equalsIgnoreCase("v", "Exception cloning Cloneable type ");
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string5 = StringUtils.unwrap("Locale must not be null", '4');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Locale must not be null", string5);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray3);
  }

  @Test(timeout = 4000)
  public void test846()  throws Throwable  {
      String string0 = StringUtils.defaultString("Kv`M~#De ", "JE");
      assertNotNull(string0);
      assertEquals("Kv`M~#De ", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "JE", (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "Kv`M~#De ";
      charSequenceArray0[2] = (CharSequence) "JE";
      charSequenceArray0[3] = (CharSequence) "Kv`M~#De ";
      charSequenceArray0[4] = (CharSequence) "Kv`M~#De ";
      charSequenceArray0[5] = (CharSequence) "Kv`M~#De ";
      int int0 = StringUtils.indexOfAny((CharSequence) "JE", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test847()  throws Throwable  {
      String string0 = StringUtils.chomp("ln}?6<^]?5Yoc", "\"tcuf~Dd|l");
      assertNotNull(string0);
      assertEquals("ln}?6<^]?5Yoc", string0);
      
      String string1 = StringUtils.stripStart("ln}?6<^]?5Yoc", "VE(!T");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("ln}?6<^]?5Yoc", string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      int int0 = StringUtils.indexOfAny((CharSequence) "ln}?6<^]?5Yoc", charArray0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'h', 'h'}, charArray0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.overlay("...", "ln}?6<^]?5Yoc", 1846, (-1));
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("ln}?6<^]?5Yoc", string2);
      
      String string3 = StringUtils.replaceEach("VE(!T", (String[]) null, (String[]) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("VE(!T", string3);
      
      String string4 = StringUtils.leftPad("VE(!T", 1846, 'h');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test848()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[2] = 'q';
      charArray0[3] = 'q';
      charArray0[4] = '|';
      String string0 = StringUtils.join(charArray0, 'q');
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', 'q', 'q', '|'}, charArray0);
      assertEquals("\u0000q\u0000qqqqq|", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\u0000q\u0000qqqqq|";
      stringArray0[1] = "\u0000q\u0000qqqqq|";
      stringArray0[2] = "\u0000q\u0000qqqqq|";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string1);
      assertEquals(3, stringArray0.length);
      assertTrue(string1.equals((Object)string0));
      assertEquals("\u0000q\u0000qqqqq|", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "\u0000q\u0000qqqqq|", (CharSequence) "\u0000q\u0000qqqqq|");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test849()  throws Throwable  {
      String string0 = StringUtils.abbreviate("[4,?p:|pnovjq", "[4,?p:|pnovjq", 45, 45);
      assertNotNull(string0);
      assertEquals("[4,?p:|pnovjq", string0);
      
      String string1 = StringUtils.capitalize("[4,?p:|pnovjq");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("[4,?p:|pnovjq", string1);
      
      String string2 = StringUtils.substringAfter((String) null, 45);
      assertNull(string2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "[4,?p:|pnovjq", charArray0);
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'s'}, charArray0);
      assertFalse(boolean0);
      
      String string3 = StringUtils.mid((String) null, (-137), 16);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test850()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, Integer.MAX_VALUE);
      assertEquals((-1), int0);
      
      String string0 = "Object varargs must not be null";
      String string1 = StringUtils.upperCase("Object varargs must not be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("OBJECT VARARGS MUST NOT BE NULL", string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string2 = StringUtils.appendIfMissingIgnoreCase((String) null, "OBJECT VARARGS MUST NOT BE NULL", charSequenceArray0);
      assertNull(string2);
      assertEquals(0, charSequenceArray0.length);
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(string1));
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test851()  throws Throwable  {
      String string0 = StringUtils.center(".ZeF!kLt.ZeF!kLt", 2);
      assertEquals(".ZeF!kLt.ZeF!kLt", string0);
      
      StringUtils.lowerCase("p{InCombiningDiacriticalMarks}+");
      String string1 = StringUtils.removeEndIgnoreCase(" is not in the range '0' - '9'", ".ZeF!kLt.ZeF!kLt");
      assertEquals(" is not in the range '0' - '9'", string1);
      
      String string2 = StringUtils.rightPad(",ft", 2, "A.Dw+Ef<1");
      assertEquals(",ft", string2);
      
      String string3 = StringUtils.EMPTY;
      String string4 = StringUtils.substring("E`G)2r$/8U", 2, 2);
      assertEquals("", string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " is not in the range '0' - '9'", (CharSequence) null, 2);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.getDigits("?^v!AcS#&)!(l,h");
      String string6 = StringUtils.wrap("b.%Gg)54Z", 't');
      assertEquals("tb.%Gg)54Zt", string6);
      
      HashSet<Locale.Category> hashSet0 = new HashSet<Locale.Category>();
      String string7 = StringUtils.difference(",ft", ",ft");
      assertTrue(string7.equals((Object)string5));
      
      String string8 = StringUtils.reverseDelimited("p{incombiningdiacriticalmarks}+", '\\');
      assertEquals("p{incombiningdiacriticalmarks}+", string8);
      
      String string9 = StringUtils.substringBefore("Array element ", 14);
      assertEquals("Array element ", string9);
  }

  @Test(timeout = 4000)
  public void test852()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "Arr");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("Arr");
      String string1 = StringUtils.wrapIfMissing("Exception cloning Cloneable type ", "org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", string1);
      
      StringUtils.isAsciiPrintable("Arr");
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Exception cloning Cloneable type ", (String) null, 5);
      assertEquals(5, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils");
      assertFalse(boolean1 == boolean0);
      
      StringUtils.splitPreserveAllTokens((String) null, (String) null);
      String string2 = StringUtils.wrapIfMissing("V", 'I');
      assertEquals("IVI", string2);
      
      String string3 = StringUtils.center("}?6<^]?5Yoc", 239);
      assertEquals("                                                                                                                 }?6<^]?5Yoc                                                                                                                  ", string3);
      
      StringUtils.stripEnd("                                                                                                                 }?6<^]?5Yoc                                                                                                                  ", "4[u-`Sbi;!5#c7`%d");
      String string4 = StringUtils.unwrap("org.apache.commons.lang3.StringUtilsException cloning Cloneable type org.apache.commons.lang3.StringUtils", 'I');
      assertTrue(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test853()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("k0<5&GR", "k0<5&GR");
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric("k0<5&GR");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test854()  throws Throwable  {
      StringUtils.replacePattern("Hj:*\"6@I4RMPf}<", "Hj:*\"6@I4RMPf}<", "Hj:*\"6@I4RMPf}<");
      String string0 = StringUtils.replaceIgnoreCase("Hj:*\"6@I4RMPf}<", "Threshold must not be negative", "/r-\"w=sW%t~or%qa?L");
      assertEquals("Hj:*\"6@I4RMPf}<", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "Threshold must not be negative";
      int int0 = StringUtils.indexOfAny((CharSequence) "Hj:*\"6@I4RMPf}<", charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test855()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", ']');
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "Tu");
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) ']';
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      String string1 = StringUtils.join(booleanArray0, '\'');
      assertEquals("true'false'false'false'false", string1);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      String string2 = StringUtils.replaceChars("", 'x', ']');
      assertTrue(string2.equals((Object)string0));
      
      CharBuffer[] charBufferArray0 = new CharBuffer[0];
      StringUtils.firstNonBlank(charBufferArray0);
      boolean boolean1 = StringUtils.startsWithIgnoreCase("true'false'false'false'false", "true'false'false'false'false");
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.wrapIfMissing("", '3');
      String string4 = StringUtils.reverse("");
      assertTrue(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test856()  throws Throwable  {
      String string0 = StringUtils.unwrap("maxWith cannot be negative", "maxWith cannot be negative");
      String[] stringArray0 = StringUtils.split("maxWith cannot be negative", "maxWith cannot be negative");
      char[] charArray0 = new char[1];
      String string1 = StringUtils.removeFirst("p{InCombiningDiacriticalMarks}+", "9vKy");
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      
      StringUtils.endsWithIgnoreCase("maxWith cannot be negative", "p{InCombiningDiacriticalMarks}+");
      String string2 = StringUtils.trim("maxWith cannot be negative");
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringBeforeLast("9vKy", "maxWith cannot be negative");
      assertEquals("9vKy", string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "9vKy", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      
      StringUtils.replaceChars("maxWith cannot be negative", '\u0000', 'p');
      boolean boolean0 = StringUtils.containsAny((CharSequence) "9vKy", charArray0);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string4 = StringUtils.join(booleanArray0, '5');
      assertEquals("false", string4);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean1 == boolean0);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.append('p');
      charBufferArray0[0] = charBuffer0;
      CharBuffer charBuffer1 = StringUtils.firstNonBlank(charBufferArray0);
      assertNull(charBuffer1);
      
      String string5 = StringUtils.wrap("Exception cloning Cloneable type ", '+');
      assertEquals("+Exception cloning Cloneable type +", string5);
      
      String string6 = StringUtils.stripStart("A.DwS+Ef<T1", "9vKy");
      assertEquals("A.DwS+Ef<T1", string6);
  }

  @Test(timeout = 4000)
  public void test857()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string0 = StringUtils.join(booleanArray0, '%');
      assertNotNull(string0);
      assertEquals("false%false", string0);
  }

  @Test(timeout = 4000)
  public void test858()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      StringUtils.joinWith("", objectArray0);
      StringUtils.containsWhitespace("");
      StringUtils.trimToNull("");
      StringUtils.abbreviate((String) null, 1276);
      StringUtils.substringBeforeLast("", (String) null);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      StringUtils.join((List<?>) stack0, '!', 1276, 882);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) '!';
      StringUtils.join((List<?>) stack0, '!', 882, 882);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)99;
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte) (-108);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '!', (int) (byte) (-108), (int) (byte)99);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -108
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test859()  throws Throwable  {
      String[] stringArray0 = new String[5];
      StringUtils.isAnyBlank(stringArray0);
      String string0 = StringUtils.join((boolean[]) null, 'I');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test860()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      String string0 = StringUtils.join(byteArray0, 'W');
      assertEquals("90W0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test861()  throws Throwable  {
      String string0 = StringUtils.chomp("maxWith cannot be negative");
      assertEquals("maxWith cannot be negative", string0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 0.0F;
      String string1 = StringUtils.join(floatArray0, '7');
      assertEquals("0.0", string1);
      
      String[] stringArray0 = new String[1];
      String string2 = StringUtils.replaceEachRepeatedly(" vs ", stringArray0, stringArray0);
      assertEquals(" vs ", string2);
      
      boolean boolean0 = StringUtils.isNotBlank("0.0");
      boolean boolean1 = StringUtils.containsOnly((CharSequence) " vs ", "FLsUo3:Cd6qH)m4");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test862()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll("", "");
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test863()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase(")% ", ", Length: ");
      assertEquals(")% ", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) ")% ", (CharSequence) ")% ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test864()  throws Throwable  {
      String string0 = StringUtils.unwrap("maxWith cannot be negative", "maxWith cannot be negative");
      StringUtils.split("maxWith cannot be negative", "maxWith cannot be negative");
      Class<Object> class0 = Object.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      String string1 = StringUtils.join((Iterable<?>) serviceLoader0, '{');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test865()  throws Throwable  {
      String[] stringArray0 = new String[8];
      StringUtils.firstNonBlank(stringArray0);
      StringUtils.normalizeSpace("&)");
      StringUtils.getBytes("&)", (String) null);
      String string0 = StringUtils.overlay((String) null, "#0Im]1!dwBc^N'YIn[", 41, 41);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test866()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("", "Strings must not be null", "Strings must not be null");
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "Strings must not be null", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test867()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.join((Object[]) charSequenceArray0, "Arr", 2465, 12);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test868()  throws Throwable  {
      StringUtils.toRootLowerCase((String) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      StringUtils.firstNonEmpty(stringArray0);
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.defaultString("1");
      assertEquals("1", string0);
  }

  @Test(timeout = 4000)
  public void test869()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) null, 'X');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test870()  throws Throwable  {
      String string0 = StringUtils.trim("Strings must not be null");
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
  }

  @Test(timeout = 4000)
  public void test871()  throws Throwable  {
      String string0 = StringUtils.replaceChars("78R~j8", ']', ']');
      assertEquals("78R~j8", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test872()  throws Throwable  {
      String string0 = StringUtils.removeStart("FPV[w8ya{a5a;v?8WJs[:vo~^", "^K]K");
      assertEquals("FPV[w8ya{a5a;v?8WJs[:vo~^", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width with offset is %d", 'I');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test873()  throws Throwable  {
      String string0 = StringUtils.rotate(",rs", 3742);
      assertEquals("s,r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("org.apace.commons.ln3.ObjectUtils", ",rs");
      assertEquals("org.apace.commons.ln3.ObjectUtils", string1);
  }

  @Test(timeout = 4000)
  public void test874()  throws Throwable  {
      StringUtils.unwrap("ln}?6<^]?5Yoc", "\"tcuf~Dd|l");
      String string0 = StringUtils.chomp("ln}?6<^]?5Yoc", "A.DwS+Ef<T1");
      assertEquals("ln}?6<^]?5Yoc", string0);
      
      String string1 = StringUtils.swapCase((String) null);
      assertNull(string1);
      
      StringUtils.unwrap("Search and Replace array lengths don't match: ", (String) null);
      String string2 = StringUtils.removePattern("%Mggiuf$<*LrQS&J_#", "ln}?6<^]?5Yoc");
      assertEquals("%Mggiuf$<*LrQS&J_#", string2);
      
      String string3 = StringUtils.replaceOnce("Locale must not be null", "Search and Replace array lengths don't match: ", (String) null);
      assertEquals("Locale must not be null", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("k5,j", "K");
      String string4 = StringUtils.trim("");
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      Locale locale0 = Locale.CANADA;
      int int0 = StringUtils.getFuzzyDistance("A.DwS+Ef<T1", "ln}?6<^]?5Yoc", locale0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test875()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("4");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test876()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.appendIfMissingIgnoreCase("p{InCombiningDiacriticalMarks}+", (CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test877()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(", Length: 1]q\u0000H", 'p');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.endsWithAny(", Length: 1]q\u0000H", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test878()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      String string0 = StringUtils.join(booleanArray0, '%');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test879()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Sxmu~WA3[.");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test880()  throws Throwable  {
      String string0 = "\\p{InCombiningDiacriticalMarks}+";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", (String) null);
      StringUtils.appendIfMissing("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", stringArray0);
      StringUtils.lowerCase((String) null);
      StringUtils.isNoneEmpty(stringArray0);
      char char0 = 'd';
      StringUtils.replaceChars("NR|cA5sAAt?+", 'd', 'p');
      char[] charArray0 = new char[0];
      StringUtils.containsAny((CharSequence) "p{InCombiningDiacriticalMarks}+", charArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        charBuffer0.append('B');
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test881()  throws Throwable  {
      StringUtils.unwrap("maxWith cannot be negative", "maxWith cannot be negative");
      String[] stringArray0 = StringUtils.split("maxWith cannot be negative", "maxWith cannot be negative");
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      StringUtils.indexOfAny((CharSequence) "maxWith cannot be negative", charArray0);
      StringUtils.removeFirst("p{InCombiningDiacriticalMarks}+", "9vKy");
      StringUtils.endsWithIgnoreCase("maxWith cannot be negative", "p{InCombiningDiacriticalMarks}+");
      StringUtils.trim("maxWith cannot be negative");
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("maxWith cannot be negative", '3');
      StringUtils.substringBeforeLast("9vKy", "maxWith cannot be negative");
      StringUtils.indexOfAny((CharSequence) "9vKy", (CharSequence[]) stringArray0);
      StringUtils.join((Object[]) stringArray1, (String) null);
      StringUtils.replaceChars("maxWith cannot be negative", '3', 'p');
      StringUtils.containsAny((CharSequence) "9vKy", charArray0);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      StringUtils.join(booleanArray0, '5');
      StringUtils.isNoneBlank(stringArray0);
      StringUtils.appendIfMissing("maxWith cannot be negative", (CharSequence) null, stringArray1);
      CharBuffer[] charBufferArray0 = new CharBuffer[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBufferArray0[0] = charBuffer0;
      CharBuffer charBuffer1 = StringUtils.firstNonBlank(charBufferArray0);
      assertEquals(1, charBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test882()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "-4_U]vY(hWgcBUt";
      charSequenceArray0[3] = (CharSequence) "-4_U]vY(hWgcBUt";
      String string0 = StringUtils.join((Object[]) charSequenceArray0, "-4_U]vY(hWgcBUt");
      assertNotNull(string0);
      assertEquals("-4_U]vY(hWgcBUt-4_U]vY(hWgcBUt-4_U]vY(hWgcBUt-4_U]vY(hWgcBUt-4_U]vY(hWgcBUt-4_U]vY(hWgcBUt", string0);
  }

  @Test(timeout = 4000)
  public void test883()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      String string0 = "Object varargs must not be null";
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "Object varargs must not be null", (-2816), 29);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2816
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test884()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("7;Qv+w!+q]1?mSlrvbO", "7;Qv+w!+q]1?mSlrvbO", "7;Qv+w!+q]1?mSlrvbO");
      assertEquals("7;Qv+w!+q]1?mSlrvbO", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("7;Qv+w!+q]1?mSlrvbO", "7;Qv+w!+q]1?mSlrvbO");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test885()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      String string0 = StringUtils.join((List<?>) stack0, "Exception cloning Cloneable type org.apache.commons.lang3.StringUtils has no clone methodorg.apache.commons.lang3.ArrayUtils", 30, 30);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test886()  throws Throwable  {
      String string0 = StringUtils.abbreviate("v6,g#v{_u0MnE", "maxWith cannot be negative", 2907);
      assertEquals("v6,g#v{_u0MnE", string0);
  }

  @Test(timeout = 4000)
  public void test887()  throws Throwable  {
      StringUtils.toRootLowerCase((String) null);
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[2] = null;
      stringArray0[4] = null;
      String string0 = StringUtils.removeFirst((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test888()  throws Throwable  {
      String string0 = StringUtils.replaceChars("The String must not be empty", "6orzVf=9t}'", "a6l'];A%Pm>Wt,");
      assertEquals("The Sm'ing musm nlm be empmy", string0);
      
      String string1 = StringUtils.trimToNull("The String must not be empty");
      assertEquals("The String must not be empty", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test889()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string0 = StringUtils.replaceChars("xLC2$tF{{S=k/=4/", "\n", "0!W<)N5LUKq");
      assertEquals("xLC2$tF{{S=k/=4/", string0);
  }

  @Test(timeout = 4000)
  public void test890()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "V[aBj";
      charSequenceArray0[2] = (CharSequence) "V[aBj";
      charSequenceArray0[4] = (CharSequence) "V[aBj";
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[6] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[7] = (CharSequence) "V[aBj";
      charSequenceArray0[8] = (CharSequence) "Minimum abbreviation width with offset is %d";
      StringUtils.endsWithAny("Minimum abbreviation width with offset is %d", charSequenceArray0);
      StringUtils.isAlphanumericSpace(charSequenceArray0[2]);
      StringUtils.stripAll((String[]) null, "");
      StringUtils.getDigits("YH;&B8r<lX5");
      int int0 = StringUtils.indexOf(charSequenceArray0[5], 3785, 1165);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test891()  throws Throwable  {
      StringUtils.isAlphanumeric((CharSequence) null);
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "}aT@[wAFDPT", 18);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.getDigits("r4a%~B%");
      assertEquals("4", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      StringUtils.join((long[]) null, 'L');
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test892()  throws Throwable  {
      StringUtils.indexOfIgnoreCase((CharSequence) "}#3U=", (CharSequence) null, (-3920));
      String string0 = StringUtils.stripToEmpty("hSsnR3");
      assertEquals("hSsnR3", string0);
      
      String string1 = StringUtils.removeIgnoreCase((String) null, "!/Ut)8ZW?2\"Fe7A");
      assertNull(string1);
      
      StringUtils.unwrap("Locale must not be null", "!/Ut)8ZW?2\"Fe7A");
      StringUtils.startsWithIgnoreCase("!/Ut)8ZW?2\"Fe7A", "Locale must not be null");
      String string2 = StringUtils.replaceChars("o<T 6&PE h", "wz5;Ew+tJ@~.u(R#", "qSN#]L|}5qZ");
      assertEquals("o<T 6&P] h", string2);
  }

  @Test(timeout = 4000)
  public void test893()  throws Throwable  {
      String string0 = StringUtils.trimToNull("Exception cloning Cloneable type org.apache.commons.lang3.StringUtils has no clone methodorg.apache.commons.lang3.ArrayUtils");
      assertNotNull(string0);
      assertEquals("Exception cloning Cloneable type org.apache.commons.lang3.StringUtils has no clone methodorg.apache.commons.lang3.ArrayUtils", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Exception cloning Cloneable type org.apache.commons.lang3.StringUtils has no clone methodorg.apache.commons.lang3.ArrayUtils");
      boolean boolean1 = StringUtils.isMixedCase("nO[9)lmh.Ix~T%H");
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.substringAfter("<gz8k'uqlxQ5`Bn8N1", (-25));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test894()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.prependIfMissingIgnoreCase("B_s.'A qD+GXOo", "B_s.'A qD+GXOo", charSequenceArray0);
      assertEquals("B_s.'A qD+GXOo", string0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test895()  throws Throwable  {
      StringUtils.substringBeforeLast("Arguments cannot both be null", "Strings must no");
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Strings must no";
      charSequenceArray0[1] = (CharSequence) "Strings must no";
      charSequenceArray0[2] = (CharSequence) "Strings must no";
      StringUtils.endsWithAny("Arguments cannot both be null", charSequenceArray0);
      StringUtils.endsWithAny("Arguments cannot both be null", charSequenceArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 11;
      intArray0[1] = 2091;
      intArray0[2] = 2;
      intArray0[3] = 48;
      intArray0[4] = 1371;
      intArray0[5] = 19;
      intArray0[6] = 76;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '{', 644, 2091);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 644
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test896()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.join((int[]) null, 'p', 271, 271);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      StringUtils.lowerCase((String) null);
      charSequenceArray0[2] = (CharSequence) null;
      String string2 = StringUtils.removeEndIgnoreCase("", "}PXcKa");
      charSequenceArray0[3] = (CharSequence) "";
      String string3 = StringUtils.wrap("", (String) null);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertSame(stringArray1, stringArray0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      charArray0[2] = 'o';
      charArray0[3] = 'p';
      charArray0[4] = 'p';
      charArray0[5] = 'p';
      int int0 = StringUtils.indexOfAny(charSequenceArray0[3], charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test897()  throws Throwable  {
      StringUtils.toRootLowerCase((String) null);
      StringUtils.repeat((String) null, (String) null, (-238));
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      StringUtils.indexOfAny((CharSequence) null, charArray0);
      StringUtils.replacePattern("u~)dw,6Lzu gqtbaz~", "k:'4)R}a9`", (String) null);
      String string0 = StringUtils.replaceIgnoreCase((String) null, "t{x+", "=feXV");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test898()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      StringUtils.defaultString("f0p=}]=guLAv^vQ", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      String string0 = StringUtils.replaceChars("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("Minimum abbreviation width with offset is %d");
      int[] intArray0 = new int[0];
      StringUtils.join(intArray0, 'K');
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is %d", "f0p=}]=guLAv^vQ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.replace("Invalid locale format: ", "ch", "R]s%bfoZb<4T", 698);
      assertEquals("Invalid locale format: ", string1);
  }

  @Test(timeout = 4000)
  public void test899()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 0);
      assertNull(string0);
      
      StringUtils.isAsciiPrintable((CharSequence) null);
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", (String) null);
      String string1 = StringUtils.appendIfMissing("Tz!9o!u6_jlt *PA#", "p{InCombiningDiacriticalMarks}+", stringArray0);
      assertEquals("Tz!9o!u6_jlt *PA#p{InCombiningDiacriticalMarks}+", string1);
      
      String string2 = StringUtils.center((String) null, 0);
      assertNull(string2);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      StringUtils.lowerCase((String) null);
      String string3 = StringUtils.removeEndIgnoreCase((String) null, "14bry@z1:G+S");
      assertNull(string3);
      
      String string4 = StringUtils.wrap((String) null, "A.DwS+Ef<T1");
      assertNull(string4);
      
      StringUtils.isNoneEmpty(stringArray0);
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'o';
      charArray0[1] = '%';
      charArray0[2] = 'U';
      charArray0[3] = 'o';
      charArray0[4] = 'o';
      charArray0[5] = 'o';
      int int0 = StringUtils.indexOfAny((CharSequence) "Tz!9o!u6_jlt *PA#", charArray0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test900()  throws Throwable  {
      String string0 = "}#3U=";
      StringUtils.substringAfter("}#3U=", (String) null);
      char char0 = 'u';
      StringUtils.countMatches((CharSequence) null, 'u');
      StringUtils.isAllLowerCase("}#3U=");
      StringUtils.isAlphanumericSpace("");
      StringUtils.stripToEmpty((String) null);
      PriorityQueue<Object> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Object>(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test901()  throws Throwable  {
      boolean boolean0 = StringUtils.containsAny((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("\r", "L4**c>4|Pt[go4D8#", false);
      assertEquals((-95), int0);
  }

  @Test(timeout = 4000)
  public void test902()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      StringUtils.joinWith("", objectArray0);
      StringUtils.containsWhitespace("");
      StringUtils.trimToNull("");
      StringUtils.substring((String) null, 1276);
      StringUtils.abbreviate((String) null, 1276);
      StringUtils.capitalize("");
      Stack<Object> stack0 = new Stack<Object>();
      StringUtils.join((List<?>) stack0, '!', 1276, 889);
      float[] floatArray0 = new float[9];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) '!';
      floatArray0[2] = (float) 889;
      floatArray0[3] = (float) '!';
      floatArray0[4] = (float) 1276;
      floatArray0[5] = (float) '!';
      floatArray0[6] = (float) 1276;
      floatArray0[7] = (float) 1276;
      floatArray0[8] = 0.0F;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'o', 889, 1276);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 889
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test903()  throws Throwable  {
      String string0 = StringUtils.truncate("org.apache.commons.lang3.StringUtils", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'N';
      charArray0[1] = '?';
      charArray0[2] = 'p';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test904()  throws Throwable  {
      String string0 = StringUtils.getDigits("offset cannot be negative");
      StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "offset cannot be negative", (-483));
      String string1 = StringUtils.replace("", "<r{n#u@UIVrStKp2<#", "<r{n#u@UIVrStKp2<#", (-483));
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test905()  throws Throwable  {
      String string0 = StringUtils.stripEnd("ls", "rkmRe,wS1_dIUHx%g2");
      assertEquals("ls", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "ls", (CharSequence) "ls", Integer.MIN_VALUE);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isBlank("ls");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "rkmRe,wS1_dIUHx%g2", Integer.MIN_VALUE, 145);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test906()  throws Throwable  {
      String string0 = StringUtils.replaceChars("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      String string1 = StringUtils.unwrap("org.apache.commons.lang3.StringUtils", '5');
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test907()  throws Throwable  {
      String string0 = StringUtils.unwrap("|[U(rl<zma?do5DH", "|[U(rl<zma?do5DH");
      assertEquals("|[U(rl<zma?do5DH", string0);
  }

  @Test(timeout = 4000)
  public void test908()  throws Throwable  {
      String string0 = StringUtils.trimToNull("");
      assertNull(string0);
      
      String string1 = StringUtils.replaceChars(">.TG/#?Q/UgS$ZY", "", "0l2BBM6Hkw`84I |");
      assertEquals(">.TG/#?Q/UgS$ZY", string1);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, (-338));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test909()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String string0 = StringUtils.removeEnd(">l2@Z'c", ">l2@Z'c");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test910()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      StringUtils.indexOf((CharSequence) "", (-1115), (-1115));
      long[] longArray0 = new long[4];
      longArray0[0] = (long) (-1115);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-1115);
      longArray0[3] = 0L;
      int int0 = 1202;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'N', (-1115), 1202);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1115
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test911()  throws Throwable  {
      StringUtils.abbreviate("J<$9:SN", 2147483645, 2147483645);
      StringUtils.toCodePoints("J<$9:SN");
      StringUtils.mid("J<$9:SN", 2147483645, 2147483645);
      StringUtils.join((short[]) null, '[', 2147483645, (-374));
      Stack<Object> stack0 = new Stack<Object>();
      ListIterator<Object> listIterator0 = stack0.listIterator();
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test912()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'H';
      String string0 = StringUtils.substringBeforeLast("LNuk>Qz|sjw", "LNuk>Qz|sjw");
      String[] stringArray0 = StringUtils.split("7.ZeF!kLt", "7.ZeF!kLt");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.removeEnd("", "");
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsWhitespace("LNuk>Qz|sjw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test913()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", (String) null);
      StringUtils.appendIfMissing("Tz!9o!u6_jlt *PA#", "p{InCombiningDiacriticalMarks}+", stringArray0);
      StringUtils.stripEnd("XH+eJB", "p{InCombiningDiacriticalMarks}+");
      StringUtils.center("XH+eJB", 2441);
      StringUtils.stripEnd("p{InCombiningDiacriticalMarks}+", "M]9 ");
      StringUtils.deleteWhitespace("#C0bGmYHD^8y");
      StringUtils.compareIgnoreCase((String) null, ">lWeP<$h(^v&Jt2", false);
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test914()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "DnT#Y");
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String string0 = StringUtils.appendIfMissing("DnT#Y", "DnT#Y", stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals("DnT#Y", string0);
  }

  @Test(timeout = 4000)
  public void test915()  throws Throwable  {
      StringUtils.replaceChars("k0<5&GR", "V[aBj", "Minimum abbreviation width with offset is %d");
      StringUtils.containsWhitespace("k0<5&GR");
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "V[aBj";
      charSequenceArray0[1] = (CharSequence) "k0<5&GR";
      charSequenceArray0[2] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[3] = (CharSequence) "k0<5&GR";
      charSequenceArray0[4] = (CharSequence) "V[aBj";
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[6] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[7] = (CharSequence) "V[aBj";
      charSequenceArray0[8] = (CharSequence) "Minimum abbreviation width with offset is %d";
      StringUtils.endsWithAny("Minimum abbreviation width with offset is %d", charSequenceArray0);
      int int0 = StringUtils.compareIgnoreCase("`Q", " |FX<AnP,N pPOvl", false);
      StringUtils.truncate(" |FX<AnP,N pPOvl", 64, 1405);
      StringUtils.join((short[]) null, '7', 64, 3785);
      StringUtils.isAlphanumericSpace(charSequenceArray0[2]);
      StringUtils.stripAll((String[]) null, "");
      StringUtils.repeat("YH;&B8r<lX5", "Minimum abbreviation width with offset is %d", 64);
      StringUtils.getDigits("FIF6&0Dy['k}N^[&");
      int int1 = StringUtils.indexOf(charSequenceArray0[5], 3785, 1165);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test916()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[19];
      boolean boolean0 = StringUtils.isAlphanumericSpace("null/empty items");
      assertFalse(boolean0);
      
      String string0 = StringUtils.toRootUpperCase("null/empty items");
      assertNotNull(string0);
      assertEquals("NULL/EMPTY ITEMS", string0);
  }

  @Test(timeout = 4000)
  public void test917()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      StringUtils.joinWith("", objectArray0);
      StringUtils.containsWhitespace("");
      StringUtils.trimToNull("");
      StringUtils.abbreviate((String) null, 1276);
      String string0 = StringUtils.substringBeforeLast("", (String) null);
      Stack<Object> stack0 = new Stack<Object>();
      stack0.add((Object) null);
      StringUtils.defaultString((String) null, "org.apache.commons.lang3.ObjectUtils, Length: /r-\"w=sW%t~or%qa?L");
      StringUtils.compareIgnoreCase("", "org.apache.commons.lang3.ObjectUtils, Length: /r-\"w=sW%t~or%qa?L");
      String string1 = StringUtils.leftPad("m_j=ZS", 1276, "org.apache.commons.lang3.ArrayUtils");
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test918()  throws Throwable  {
      String string0 = StringUtils.defaultString("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "p{InCombiningDiacriticalMarks}+", '\'');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test919()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = "";
      StringUtils.defaultString("", "");
      charSequenceArray0[0] = (CharSequence) "";
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charSequenceArray0[0], (-1), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
}
