/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:26:58 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.Buffer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EmptyStackException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.regex.PatternSyntaxException;
import java.util.stream.IntStream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String string0 = StringUtils.wrap("", 'B');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.toRootUpperCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.repeat("[[", "", 1204);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.center("both be null", 1669, 'T');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("dl-c(bu )+09f1Kk1");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, ')');
      assertNotNull(string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.substringBeforeLast("dl-c(bu )+09f1Kk1", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("dl-c(bu )+09f1Kk1", string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer(126);
      assertNotNull(integer0);
      assertEquals(126, (int)integer0);
      
      Integer integer1 = new Integer(126);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(126, (int)integer1);
      
      String string2 = StringUtils.replacePattern("dl-c(bu )+09f1Kk1", (String) null, "dl-c(bu )+09f1Kk1");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("dl-c(bu )+09f1Kk1", string2);
      
      String string3 = StringUtils.mid((String) null, 52, 1408);
      assertNull(string3);
      
      String string4 = StringUtils.substringBetween("Index: ", "$@!jS&{:Cf0%?XgO) vs )s|;}~M", (String) null);
      assertNull(string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "dl-c(bu )+09f1Kk1", (CharSequence) "]b7<T", 13);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("]b7<T");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string5 = StringUtils.unwrap("$@!jS&{:Cf0%?XgO) vs )s|;}~M", 'k');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("$@!jS&{:Cf0%?XgO) vs )s|;}~M", string5);
      
      String string6 = StringUtils.center("gO)", 1408);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = StringUtils.strip("66i(''U8tN");
      assertNotNull(string0);
      assertEquals("66i(''U8tN", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[2];
      charArray0[1] = '5';
      int int0 = StringUtils.indexOfDifference((CharSequence) "66i(''U8tN", (CharSequence) "66i(''U8tN");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("66i(''U8tN", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "66i(''U8tN", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("dl-c(bu )+09f1Kk1...", (String) null, (-1));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase((String) null, "dl-c(bu )+09f1Kk1...", charSequenceArray0);
      assertNull(string1);
      assertEquals(0, charSequenceArray0.length);
      
      String string2 = StringUtils.unwrap("@", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("@", string2);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "', has a length less than 2", (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = StringUtils.removeFirst("clone", "clone");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compareIgnoreCase("", "", true);
      assertEquals(0, int0);
      
      String string1 = StringUtils.left("", (-2669));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeFirst("qhe character ", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("qhe character ", string2);
      
      String string3 = StringUtils.substringBetween("TB3+vjG?Xi", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.chop((String) null);
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '=');
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("clone");
      assertTrue(boolean0);
      
      int int1 = StringUtils.compare("qhe character ", "", true);
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.removeFirst("'/7jnpNEzcWw+aTN1ot", "J@ F`'NA:");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("'/7jnpNEzcWw+aTN1ot", string5);
      
      String string6 = StringUtils.substringBetween("", (String) null);
      assertNull(string6);
      
      String string7 = StringUtils.chop("Hx]TNkm',M;");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertEquals("Hx]TNkm',M", string7);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.ObjectUtils$Null", '=');
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      boolean boolean2 = StringUtils.isAlphanumeric("qhe character ");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int2 = StringUtils.compare("Minimum abbreviation width with offset is %d", "Hx]TNkm',M;", false);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(5, int2);
      
      boolean boolean3 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string8 = StringUtils.replaceEachRepeatedly("", stringArray1, stringArray1);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertEquals(1, stringArray1.length);
      assertEquals("", string8);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "'/7jnpNEzcWw+aTN1ot", (CharSequence) "org.apache.commons.lang3.ObjectUtils$Null", 1123);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      int int4 = StringUtils.indexOf((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "", 894);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(44, int4);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string0 = StringUtils.join((Iterable<?>) arrayList0, ' ');
      assertNotNull(string0);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", string0);
      
      String string1 = StringUtils.lowerCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.join((long[]) null, '0');
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.abbreviate("", "", 112, 112);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) '0';
      String string4 = StringUtils.join(intArray0, '&', 112, 48);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertArrayEquals(new int[] {48}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.containsWhitespace(charSequenceArray0[4]);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, "/g8", (-685), (-685));
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertEquals(5, charSequenceArray0.length);
      assertEquals("", string5);
      
      String string6 = StringUtils.unwrap("&75Rw1D7", '0');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("&75Rw1D7", string6);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "&75Rw1D7", charSequenceArray0[4]);
      assertFalse(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("?K", supplier0);
      assertNotNull(string0);
      assertEquals("?K", string0);
      
      boolean boolean0 = StringUtils.isBlank("?K");
      assertFalse(boolean0);
      
      int int0 = (-1);
      String string1 = StringUtils.mid("?K", (-1), (-1));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("?K");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int1 = (-1579);
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("?K", "?K", (-1579));
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("clone", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = StringUtils.strip("66i(''U8tN");
      assertNotNull(string0);
      assertEquals("66i(''U8tN", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[2];
      charArray0[1] = '5';
      int int0 = StringUtils.indexOfDifference((CharSequence) "66i(''U8tN", (CharSequence) "66i(''U8tN");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("66i(''U8tN", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "66i(''U8tN", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.compareIgnoreCase("66i(''U8tN", (String) null, true);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 10;
      String string0 = StringUtils.join(doubleArray0, '=', 2, 6);
      assertNotNull(string0);
      assertArrayEquals(new double[] {10.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals("0.0=0.0=0.0=0.0", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("0.0=0.0=0.0=0.0");
      assertNotNull(intArray0);
      assertEquals(15, intArray0.length);
      
      String string1 = StringUtils.upperCase("yvk8kWBCLM6.D)0OH");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("YVK8KWBCLM6.D)0OH", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "YVK8KWBCLM6.D)0OH", (CharSequence) "0.0=0.0=0.0=0.0");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      String string0 = StringUtils.leftPad("", 8192, 'm');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "Lzu3`*^(] ";
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "z_a<{9no";
      boolean boolean0 = StringUtils.endsWithAny("Lzu3`*^(] ", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.trim((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.chomp("Lzu3`*^(] ", "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("Lzu3`*^(] ", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("J`nb;e0h_0[yw*RMc");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
      
      String string3 = "";
      String string4 = "B{ ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("J`nb;e0h_0[yw*RMc", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.rightPad("]hT95!St~v*=SD", 520);
      assertNotNull(string0);
      assertEquals("]hT95!St~vstring0);
      
      String string1 = StringUtils.unwrap("Comparator should not be null.dl-c(bu )+09f1Kk1", '\u001A');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Comparator should not be null.dl-c(bu )+09f1Kk1", string1);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      byte[] byteArray0 = new byte[0];
      String string2 = StringUtils.substringBefore((String) null, "I{]");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "I{]";
      charSequenceArray0[2] = (CharSequence) "Comparator should not be null.dl-c(bu )+09f1Kk1";
      charSequenceArray0[5] = (CharSequence) "]hT95!St~v*=SD";
      boolean boolean1 = StringUtils.endsWithAny("]hT95!St~vcharSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.center("", 321);
      assertNotNull(string0);
      assertEquals("                                                                                                                                                                                                                                                                                                                                 ", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 99, 99);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(")*Eq7OY)R\"R2U_Ae&k, TB3+vjG?Xiw0(ZR4{Js@", ")*Eq7OY)R\"R2U_Ae&k, TB3+vjG?Xiw0(ZR4{Js@", 99);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.substringAfterLast("                                                                                                                                                                                                                                                                                                                                 ", ")*Eq7OY)R\"R2U_Ae&k, TB3+vjG?Xiw0(ZR4{Js@");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(")s|;}~M", 'U');
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.wrapIfMissing("[wl", "ND ELEMENT CANNOT BOTH BE NULL");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("ND ELEMENT CANNOT BOTH BE NULL[wlND ELEMENT CANNOT BOTH BE NULL", string3);
      
      String string4 = StringUtils.defaultString("");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      float[] floatArray0 = new float[0];
      String string5 = StringUtils.join(floatArray0, 'E');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = StringUtils.repeat("", 53);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrapIfMissing("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split((String) null, "");
      assertNull(stringArray0);
      
      int int0 = StringUtils.countMatches(charSequenceArray0[1], (CharSequence) null);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.rightPad("", (-813), "[^y");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(33);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(33, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(33, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(33, charBuffer0.capacity());
      assertEquals(33, charBuffer0.length());
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 53);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.substringBefore("X=@b]T'_l", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.endsWithAny("", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1);
      
      int int2 = StringUtils.compareIgnoreCase("", "[^y", true);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-3), int2);
      
      String string4 = StringUtils.stripStart("", "");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.rightPad("@qK7b]Q0O ~Go_u", 751);
      assertNotNull(string0);
      assertEquals("@qK7b]Q0O ~Go_ustring0);
      
      char[] charArray0 = new char[0];
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@qK7b]Q0O ~Go_u
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(751));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "@qK7b]Q0O ~Go_uqK7b]Q0O ~Go_u");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeEndIgnoreCase("KF^\"R/'7GH2Bj&Ur", "@qK7b]Q0O ~Go_u
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("KF^\"R/'7GH2Bj&Ur", string1);
      
      String string2 = StringUtils.replaceOnce("@qK7b]Q0O ~Go_utN'U8t _B", "KF^\"R/'7GH2Bj&Ur");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("@qK7b]Q0O ~Go_ustring2);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StringUtils.rightPad("@qK7b]Q0O ~Go_u", 751);
      assertNotNull(string0);
      assertEquals("@qK7b]Q0O ~Go_ustring0);
      
      String string1 = StringUtils.removeEnd("@qK7b]Q0O ~Go_uqK7b]Q0O ~Go_u
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "@qK7b]Q0O ~Go_u                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "@qK7b]Q0O ~Go_uqK7b]Q0O ~Go_u");
      assertTrue(boolean0);
      
      String string2 = StringUtils.removeEndIgnoreCase("KF^\"R/'7GH2Bj&Ur", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("KF^\"R/'7GH2Bj&Ur", string2);
      
      String string3 = StringUtils.replaceOnce("", "U8tN'U8t _B", "KF^\"R/'7GH2Bj&Ur");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = ';';
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      String string0 = StringUtils.join(booleanArray0, 'b', (-711), (-711));
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-11));
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.defaultIfEmpty("", "hw~u]7Ep`|");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("hw~u]7Ep`|", string1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = (double) ';';
      doubleArray0[2] = (double) ';';
      doubleArray0[3] = (double) 'b';
      String string2 = StringUtils.join(doubleArray0, ';', 2897, 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new double[] {3.0, 59.0, 59.0, 98.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals("", string2);
      
      int[] intArray0 = StringUtils.toCodePoints("hw~u]7Ep`|");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {104, 119, 126, 117, 93, 55, 69, 112, 96, 124}, intArray0);
      assertEquals(10, intArray0.length);
      
      String string3 = StringUtils.upperCase("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "hw~u]7Ep`|", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", ">_?58~~");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ">_?58~~", charArray0);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) ">_?58~~";
      String string1 = StringUtils.removeEnd(">_?58~~", " ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(">_?58~~", string1);
      
      charSequenceArray0[1] = (CharSequence) ">_?58~~";
      charSequenceArray0[2] = (CharSequence) " ";
      boolean boolean1 = StringUtils.startsWithAny(" ", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string2 = StringUtils.substring((String) null, 3, 3);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) " ", charArray0);
      assertArrayEquals(new char[] {' '}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = StringUtils.stripToNull(";rks}+");
      assertNotNull(string0);
      assertEquals(";rks}+", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "(";
      charSequenceArray0[1] = (CharSequence) ";rks}+";
      charSequenceArray0[2] = (CharSequence) ";rks}+";
      charSequenceArray0[3] = (CharSequence) ";rks}+";
      charSequenceArray0[2] = (CharSequence) ";rks}+";
      charSequenceArray0[5] = (CharSequence) "(";
      String string1 = StringUtils.appendIfMissing("(", ";rks}+", charSequenceArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, charSequenceArray0.length);
      assertEquals("(", string1);
      
      String string2 = StringUtils.getDigits("nR^/YyzOP\"z");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.difference(";rks}+", ";rks}+");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = 'A';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "(", charArray0);
      assertArrayEquals(new char[] {'5', '5', 'A'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) ";rks}+", (CharSequence) "(", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.wrapIfMissing((String) null, '\\');
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = StringUtils.rightPad("vn", 1797, "vn");
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast(string0, "\r");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.reverse("vn");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("nv", string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("nv");
      assertTrue(boolean0);
      
      String string3 = StringUtils.left("vn", (-2770));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "vn";
      objectArray0[1] = (Object) "t=+MU0U";
      objectArray0[2] = (Object) string0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "vn";
      String string4 = StringUtils.join(objectArray0, "vn", (-2660), (-2660));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(7, objectArray0.length);
      assertEquals("", string4);
      
      String string5 = StringUtils.wrap("\r", 'j');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("j\rj", string5);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = StringUtils.substringBefore("...", "CV$WdO{r+");
      assertNotNull(string0);
      assertEquals("...", string0);
      
      String string1 = StringUtils.wrapIfMissing("CV$WdO{r+", '!');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("!CV$WdO{r+!", string1);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      
      String string2 = StringUtils.deleteWhitespace("\n");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "...", (CharSequence) "...", 1106);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.center("!CV$WdO{r+!", 175, '/');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("/////////////////////////////////////////////////////////////////////////////////!CV$WdO{r+!//////////////////////////////////////////////////////////////////////////////////", string3);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.uncapitalize("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "Lzu3`*uQT]";
      String string1 = "z_a<{9no";
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "z_a<{9no", (CharSequence) "Lzu3`*uQT]");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("z_a<{9no", charSequence0);
      
      String string2 = null;
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string3 = StringUtils.stripToNull("Lzu3`*uQT]");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("Lzu3`*uQT]", string3);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Lzu3`*uQT]", "Lzu3`*uQT]");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("Lzu3`*uQT]", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("7T.E|lr7%B|");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripStart("5<Ax", "HPBIFU^5t?M");
      assertNotNull(string0);
      assertEquals("<Ax", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "7T.E|lr7%B|", (CharSequence) "<Ax", 952);
      assertEquals(11, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = ';';
      charArray0[2] = '4';
      charArray0[3] = '';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "HPBIFU^5t?M", charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'g', ';', '4', ''}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[6];
      stringArray0[1] = "<Ax";
      stringArray0[2] = "5<Ax";
      stringArray0[3] = "7T.E|lr7%B|";
      stringArray0[4] = "HPBIFU^5t?M";
      stringArray0[5] = "5<Ax";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "=1r1h%i5*4[Fz>`i}uJ");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = arrayList0.add("PU");
      assertTrue(arrayList0.contains("PU"));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      boolean boolean1 = arrayList0.add("', has a length less than 2', has a length less than 2");
      assertTrue(arrayList0.contains("', has a length less than 2', has a length less than 2"));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      
      String string0 = StringUtils.removeStartIgnoreCase("PU", "PU");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean2 = arrayList0.add("");
      assertTrue(arrayList0.contains(string0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAllUpperCase("");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("', has a length less than 2', has a length less than 2", "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(37, stringArray0.length);
      
      String string1 = StringUtils.trim("PU");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("PU", string1);
      
      String string2 = StringUtils.abbreviateMiddle("PU ', has a length less than 2', has a length less than 2 Minimum abbreviation width is %d", "Gm o~", 13);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("PU 'Gm o~ %d", string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, "object", 32, (-1779));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(37, stringArray0.length);
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.substring((String) null, 22);
      assertNull(string0);
      
      String string1 = StringUtils.rotate((String) null, 22);
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      String string2 = StringUtils.leftPad("Supplied value must be a valid byte literal between -128 and 127: [", 22, (String) null);
      assertNotNull(string2);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string2);
      
      charSequenceArray0[2] = (CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [";
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      String string3 = StringUtils.valueOf(charArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new char[] {'['}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("[", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("offset cannot be negative", (String) null, 3);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("q>mh\"L'P>&dxnX2 ^In", "[", charSequenceArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(5, charSequenceArray0.length);
      assertEquals("[q>mh\"L'P>&dxnX2 ^In", string4);
      
      String string5 = StringUtils.uncapitalize("@");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("@", string5);
      
      String string6 = StringUtils.unwrap("object", (String) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals("object", string6);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [", (CharSequence) "@", 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.stripToNull("; },4qtW");
      assertNotNull(string0);
      assertEquals("; },4qtW", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "(";
      charSequenceArray0[1] = (CharSequence) "; },4qtW";
      charSequenceArray0[2] = (CharSequence) "; },4qtW";
      charSequenceArray0[3] = (CharSequence) "; },4qtW";
      charSequenceArray0[4] = (CharSequence) "; },4qtW";
      charSequenceArray0[5] = (CharSequence) "(";
      String string1 = StringUtils.getDigits("nR^/YyzOP\"z");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.difference("; },4qtW", "; },4qtW");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("5+i:I46u", "5+i:I46u");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.reverseDelimited("h!g", '6');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("h!g", string4);
      
      int int0 = StringUtils.compare("maxWith cannot be negative", "sM!pXyc\"UDLI%_UrU", false);
      assertEquals((-6), int0);
      
      String string5 = StringUtils.substringAfter("", "h!g");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "54\".54\".");
      assertNotNull(string0);
      assertFalse(stack0.contains("54\".54\"."));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviateMiddle("", "54\".54\".", 16);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "UoVFR)l;$5C=hV]J";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "@qK7b]Q0O ~Go_uhe character ";
      charSequenceArray0[3] = (CharSequence) "54\".54\".";
      String string2 = StringUtils.prependIfMissingIgnoreCase("", "UoVFR)l;$5C=hV]J", charSequenceArray0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "UoVFR)l;$5C=hV]J", (CharSequence) "", 3300);
      assertEquals(17, int0);
      
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)48;
      String string3 = StringUtils.join(byteArray0, '|');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)48}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("48", string3);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("UoVFR)l;$5C=hV]J");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        Charset.forName("@Zy[})^D!L(_~m2<--x");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // @Zy[})^D!L(_~m2<--x
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Array element ";
      charSequenceArray0[1] = (CharSequence) "Array element ";
      String string0 = StringUtils.removePattern("Array element ", (String) null);
      assertNotNull(string0);
      assertEquals("Array element ", string0);
      
      charSequenceArray0[2] = (CharSequence) "Array element ";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfterLast("Array element ", "ZWX9'?pB<R2o|91*>I");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.reverse("m");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("m", string2);
      
      String string3 = StringUtils.replaceOnce("X?lu<RR|`", "m", "8!'c");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("X?lu<RR|`", string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("X?lu<RR|`");
      assertFalse(boolean0);
      
      String string4 = StringUtils.left("'4z{", 4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("'4z{", string4);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[17];
      charSequenceArray0[0] = (CharSequence) "l";
      boolean boolean0 = StringUtils.isNotEmpty("l");
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 109;
      String string0 = StringUtils.wrapIfMissing("l", '!');
      assertNotNull(string0);
      assertEquals("!l!", string0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "l", charSequenceArray0[2], 160);
      assertEquals(17, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.center(" ", 160, '!');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", string2);
      
      String string3 = StringUtils.center((String) null, (-2));
      assertNull(string3);
      
      String string4 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.strip("66i(''U8tN");
      assertNotNull(string0);
      assertEquals("66i(''U8tN", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      long[] longArray0 = new long[7];
      longArray0[1] = (long) ':';
      String string1 = StringUtils.join(longArray0, '\'', 53, 53);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {0L, 58L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals("", string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\'';
      charArray0[1] = '\'';
      charArray0[2] = ':';
      charArray0[3] = ':';
      charArray0[4] = '\'';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "66i(''U8tN", charArray0);
      assertArrayEquals(new char[] {'\'', '\'', ':', ':', '\''}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringBetween("66i(''U8tN", "", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String string0 = StringUtils.strip("66i(''U8tN");
      assertNotNull(string0);
      assertEquals("66i(''U8tN", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[2];
      charArray0[1] = '5';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "66i(''U8tN", charArray0);
      assertArrayEquals(new char[] {'\u0000', '5'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "66i(''U8tN", (CharSequence) "66i(''U8tN");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("66i(''U8tN", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "66i(''U8tN", charSequenceArray0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int2);
      
      String string1 = StringUtils.stripEnd("]", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]", string1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = StringUtils.replace("bwoFQ#T6t(7qG@F0", "bwoFQ#T6t(7qG@F0", "bwoFQ#T6t(7qG@F0");
      assertNotNull(string0);
      assertEquals("bwoFQ#T6t(7qG@F0", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("bwoFQ#T6t(7qG@F0", (String) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("bwoFQ#T6t(7qG@F0", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string2 = StringUtils.join((Object[]) charSequenceArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(9, charSequenceArray0.length);
      assertEquals("", string2);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "bwoFQ#T6t(7qG@F0";
      charSequenceArray0[2] = (CharSequence) "bwoFQ#T6t(7qG@F0";
      charSequenceArray0[3] = (CharSequence) "bwoFQ#T6t(7qG@F0";
      charSequenceArray0[4] = (CharSequence) null;
      String string3 = StringUtils.upperCase("bwoFQ#T6t(7qG@F0");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("BWOFQ#T6T(7QG@F0", string3);
      
      charSequenceArray0[5] = (CharSequence) "BWOFQ#T6T(7QG@F0";
      String string4 = StringUtils.overlay((String) null, "Locale must not be null", 771, 771);
      assertNull(string4);
      
      charSequenceArray0[6] = (CharSequence) null;
      String string5 = StringUtils.joinWith("/ 4htd=", charSequenceArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(9, charSequenceArray0.length);
      assertEquals("/ 4htd=bwoFQ#T6t(7qG@F0/ 4htd=bwoFQ#T6t(7qG@F0/ 4htd=bwoFQ#T6t(7qG@F0/ 4htd=/ 4htd=BWOFQ#T6T(7QG@F0/ 4htd=/ 4htd=/ 4htd=", string5);
      
      charSequenceArray0[7] = (CharSequence) "/ 4htd=bwoFQ#T6t(7qG@F0/ 4htd=bwoFQ#T6t(7qG@F0/ 4htd=bwoFQ#T6t(7qG@F0/ 4htd=/ 4htd=BWOFQ#T6T(7QG@F0/ 4htd=/ 4htd=/ 4htd=";
      charSequenceArray0[8] = (CharSequence) "'";
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.wrap("", 'B');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.toRootUpperCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.repeat("", "", Integer.MIN_VALUE);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.abbreviate("\r", "", 55, 8);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\r", string3);
      
      String string4 = StringUtils.removeAll((String) null, "#");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAlphaSpace("#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2313);
      String string0 = StringUtils.removeAll("h<m:*H*+~", "BUFoMKGdDR5");
      assertNotNull(string0);
      assertEquals("h<m:*H*+~", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "h<m:*H*+~", charArray0);
      assertArrayEquals(new char[] {'5', '5', '5'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "h<m:*H*+~", (CharSequence) "BUFoMKGdDR5");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "BUFoMKGdDR5";
      String string1 = StringUtils.wrap("BUFoMKGdDR5", "=lTyLB4VEN4");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("=lTyLB4VEN4BUFoMKGdDR5=lTyLB4VEN4", string1);
      
      charSequenceArray0[1] = (CharSequence) "=lTyLB4VEN4BUFoMKGdDR5=lTyLB4VEN4";
      charSequenceArray0[2] = (CharSequence) "h<m:*H*+~";
      charSequenceArray0[3] = (CharSequence) "BUFoMKGdDR5";
      charSequenceArray0[4] = (CharSequence) "h<m:*H*+~";
      charSequenceArray0[5] = (CharSequence) "BUFoMKGdDR5";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("BUFoMKGdDR5", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int2 = StringUtils.indexOfAny(charSequenceArray0[4], charSequenceArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "h<m:*H*+~";
      stringArray0[1] = "h<m:*H*+~";
      stringArray0[2] = "@qK7b]Q0O ~Go_u
      stringArray0[3] = "=lTyLB4VEN4BUFoMKGdDR5=lTyLB4VEN4";
      stringArray0[4] = "=lTyLB4VEN4";
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "XWMy]l/51/LA'<5;&?";
      stringArray1[1] = "=lTyLB4VEN4BUFoMKGdDR5=lTyLB4VEN4";
      stringArray1[2] = "=lTyLB4VEN4";
      stringArray1[3] = "h<m:*H*+~";
      stringArray1[4] = "BUFoMKGdDR5";
      String string2 = StringUtils.replaceEachRepeatedly("=lTyLB4VEN4", stringArray0, stringArray1);
      assertNotNull(string2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("BUFoMKGdDR5", string2);
      
      String string3 = StringUtils.uncapitalize("$;(J");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("$;(J", string3);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) ':';
      String[] stringArray0 = new String[8];
      stringArray0[0] = "zZCi5q!ycf,";
      stringArray0[1] = "zZCi5q!ycf,";
      stringArray0[2] = "zZCi5q!ycf,";
      stringArray0[3] = "zZCi5q!ycf,";
      stringArray0[4] = "DFN! g5ia}x7X#8?UC";
      stringArray0[5] = "zZCi5q!ycf,";
      stringArray0[6] = " [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[";
      stringArray0[7] = "zZCi5q!ycf,";
      String[] stringArray1 = new String[8];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = " [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[";
      stringArray1[1] = "DFN! g5ia}x7X#8?UC";
      stringArray1[2] = "DFN! g5ia}x7X#8?UC";
      stringArray1[3] = "DFN! g5ia}x7X#8?UC";
      stringArray1[4] = "DFN! g5ia}x7X#8?UC";
      stringArray1[5] = " [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[";
      stringArray1[6] = "DFN! g5ia}x7X#8?UC";
      stringArray1[7] = "zZCi5q!ycf,";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("zZCi5q!ycf,", stringArray0, stringArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.defaultString(")", ")");
      assertNotNull(string0);
      assertEquals(")", string0);
      
      boolean boolean0 = StringUtils.isMixedCase(")");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ")", (CharSequence) ")", 8192);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[21];
      booleanArray0[0] = true;
      String string1 = StringUtils.stripToEmpty("S_");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("S_", string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "S_", (-203), (-203));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(">m", "= hgaJ/", 8192);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.substringAfterLast("S_", "l");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.isMixedCase(">m");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) ")");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string3 = StringUtils.substringAfterLast("efiGY/dfl@,X~#cW", "efiGY/dfl@,X~#cW");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("object", 'U');
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.defaultString((String) null, "");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.defaultString("Array element ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Array element ", string5);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.chomp("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfterLast("", 19);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "ZzN1P_d<bqZH7[!RSv>?5QH{L");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double double0 = StringUtils.getJaroWinklerDistance("7[tive", "");
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "", 19);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.join((Object[]) stringArray0, '=');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertSame(stringArray0, stringArray1);
      assertEquals("", string3);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "}A/Sl!O$17");
      assertNotNull(stringArray2);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray2.length);
      assertSame(stringArray0, stringArray2);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "7[tive", (CharSequence) "");
      assertEquals(6, int0);
      
      String string4 = StringUtils.replacePattern("ZzN1P_d<bqZH7[!RSv>?5QH{L", ",nc%y8!", "i,w&UTN");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("ZzN1P_d<bqZH7[!RSv>?5QH{L", string4);
      
      String string5 = StringUtils.stripToNull("ZzN1P_d<bqZH7[!RSv>?5QH{L");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("ZzN1P_d<bqZH7[!RSv>?5QH{L", string5);
      
      String string6 = StringUtils.substringBetween(",nc%y8!", "66i(''U8tN", "ccK?!");
      assertNull(string6);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "i,w&UTN", 19);
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string7 = StringUtils.leftPad("t%XYs ", 288, "66i(''U8tN");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals("66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66i(''U8tN66t%XYs ", string7);
      
      String string8 = StringUtils.wrapIfMissing("Z6W5KL9N{", ':');
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertEquals(":Z6W5KL9N{:", string8);
      
      String string9 = StringUtils.leftPad("0~r8O;D],'Ay", 12, ':');
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertEquals("0~r8O;D],'Ay", string9);
      
      char[] charArray0 = new char[7];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = '=';
      charArray0[3] = ':';
      charArray0[4] = '=';
      charArray0[5] = '=';
      charArray0[6] = '=';
      String string10 = StringUtils.join(charArray0, '1', 288, 7);
      assertNotNull(string10);
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string0));
      assertArrayEquals(new char[] {':', ':', '=', ':', '=', '=', '='}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("", string10);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = StringUtils.removeFirst("clone", "clone");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compareIgnoreCase("", "", true);
      assertEquals(0, int0);
      
      String string1 = StringUtils.left("", (-2669));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeFirst("qhe character ", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("qhe character ", string2);
      
      String string3 = StringUtils.substringBetween("TB3+vjG?Xi", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.chop((String) null);
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '=');
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("clone");
      assertTrue(boolean0);
      
      int int1 = StringUtils.compare("qhe character ", "", true);
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.replaceEachRepeatedly("qhe character ", (String[]) null, (String[]) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("qhe character ", string5);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "dl-c(bu )+09f1Kk1";
      String string1 = StringUtils.substringAfter("dl-c(bu )+09f1Kk1", "dl-c(bu )+09f1Kk1");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isNotBlank("dl-c(bu )+09f1Kk1");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      String string2 = "*1sR_\"_,8S";
      String string3 = StringUtils.replacePattern((String) null, ",nc%y8!", "*1sR_\"_,8S");
      assertNull(string3);
      
      String string4 = StringUtils.stripToNull("*1sR_\"_,8S");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("*1sR_\"_,8S", string4);
      
      String string5 = StringUtils.substringBetween((String) null, "Index: ", (String) null);
      assertNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Index: ", (CharSequence) null, 37);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '\'');
      assertNotNull(string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "", 518);
      assertNull(stringArray0);
      
      String string1 = StringUtils.truncate("", 4);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Locale must not be null", '4');
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.compare("Locale must not be null", "Locale must not be null", false);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("', has a length less than 2", '3');
      assertNotNull(string0);
      assertEquals("3', has a length less than 23", string0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      int int0 = 32;
      Integer integer0 = new Integer(32);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(32, (int)integer0);
      
      boolean boolean0 = hashSet0.add(integer0);
      assertTrue(hashSet0.contains(integer0));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "clone";
      stringArray1[1] = "Strings must not be null";
      stringArray1[2] = ", Length: ";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Strings must not be null", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 188 vs 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.strip("66i(''U8tN");
      assertNotNull(string0);
      assertEquals("66i(''U8tN", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.join((byte[]) null, 'x', 24, 5);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Array element ";
      charSequenceArray0[1] = (CharSequence) "Array element ";
      String string0 = StringUtils.removePattern("Array element ", (String) null);
      assertNotNull(string0);
      assertEquals("Array element ", string0);
      
      charSequenceArray0[2] = (CharSequence) "Array element ";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = 4868;
      String string1 = StringUtils.left("tju*5+VCgP", 4868);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("tju*5+VCgP", string1);
      
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.chomp("Array element ");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Array element ", string3);
      
      boolean boolean0 = StringUtils.startsWithAny("tju*5+VCgP", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, (CharSequence) null, (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("Te,i.");
      assertNotNull(string0);
      assertEquals("Te,i.", string0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 27;
      intArray0[1] = (int) 'p';
      intArray0[2] = (int) 'p';
      intArray0[3] = (int) 'p';
      String string1 = StringUtils.join(intArray0, 'u');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new int[] {27, 112, 112, 112}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals("27u112u112u112", string1);
      
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "Te,i.";
      charSequenceArray0[3] = (CharSequence) "Te,i.";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "27u112u112u112";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) "Te,i.";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 0L;
      longArray0[1] = (long) 27;
      longArray0[2] = (long) 112;
      String string3 = StringUtils.join(longArray0, 'u', 112, 27);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new long[] {0L, 27L, 112L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("", string3);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance(charSequenceArray0[4], "Te,i.", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = StringUtils.repeat('J', 9);
      assertNotNull(string0);
      assertEquals("JJJJJJJJJ", string0);
      
      String string1 = StringUtils.leftPad((String) null, 9, "JJJJJJJJJ");
      assertNull(string1);
      
      String string2 = StringUtils.center("JJJJJJJJJ", 166);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("                                                                              JJJJJJJJJ                                                                               ", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("U7LB=F{9bE", (String) null, 9);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "JJJJJJJJJ");
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "                                                                              JJJJJJJJJ                                                                               ");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.wrapIfMissing("JJJJJJJJJ", "u!R.|_[*&SdP [r");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("u!R.|_[*&SdP [rJJJJJJJJJu!R.|_[*&SdP [r", string3);
      
      boolean boolean0 = StringUtils.isAlpha("                                                                              JJJJJJJJJ                                                                               ");
      assertFalse(boolean0);
      
      String string4 = StringUtils.removeStart("[fj{:}+G8 ,b+7T", "                                                                              JJJJJJJJJ                                                                               ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("[fj{:}+G8 ,b+7T", string4);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "U7LB=F{9bE", (CharSequence) "                                                                              JJJJJJJJJ                                                                               ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = 'J';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      charArray0[6] = 'J';
      charArray0[7] = 'J';
      int int1 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'J', 'J', 'J', 'J', 'J', 'J', 'J', 'J'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = '?';
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'X';
      String string0 = StringUtils.join(longArray0, '?', 6, 6);
      assertNotNull(string0);
      assertArrayEquals(new long[] {88L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare(", Length: ", "p{InCombiningDiacriticalMarks}+", false);
      assertEquals((-68), int0);
      
      String string1 = StringUtils.replace("$0ONH)]n[vZPl$", "Ju!39=$}+LLV", "both be null", 6);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$0ONH)]n[vZPl$", string1);
      
      boolean boolean1 = StringUtils.isWhitespace("$0ONH)]n[vZPl$");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.stripStart("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.right((String) null, (-533));
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean2 = StringUtils.endsWithAny("org.apache.commons.lang3.StringUtils", charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Integer integer0 = new Integer((-4450));
      assertNotNull(integer0);
      assertEquals((-4450), (int)integer0);
      
      boolean boolean0 = StringUtils.isNumeric("STe,i.");
      assertFalse(boolean0);
      
      Integer integer1 = new Integer((-25));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-25), (int)integer1);
      
      String string0 = StringUtils.abbreviate((String) null, (String) null, 37, (-807));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = StringUtils.defaultString("k", "k");
      assertNotNull(string0);
      assertEquals("k", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("k");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("k");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.compareIgnoreCase("k", "k");
      assertEquals(0, int0);
      
      String string1 = StringUtils.truncate("k", 0, 363);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("k", string1);
      
      String[] stringArray0 = new String[12];
      stringArray0[0] = "k";
      stringArray0[1] = "k";
      stringArray0[2] = "k";
      stringArray0[3] = "k";
      stringArray0[4] = "7N:j7FFPtRDX";
      String string2 = StringUtils.replaceEach("offset cannot be negative", stringArray0, stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(12, stringArray0.length);
      assertEquals("offset cannot be negative", string2);
      
      String string3 = StringUtils.leftPad("2f5", 8192, '5');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.center("offset cannot be negative", 8192, "k");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.chomp("\n");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String string6 = StringUtils.strip("\r");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      String string7 = StringUtils.truncate("k", 363, 24);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.strip("66i(''U8tN");
      assertNotNull(string0);
      assertEquals("66i(''U8tN", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.abbreviateMiddle("66i(''U8tN", "-fYS8<$@OEPgvP", 71);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("66i(''U8tN", string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("66i(''U8tN", "-fYS8<$@OEPgvP", (CharSequence[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-fYS8<$@OEPgvP66i(''U8tN", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "66i(''U8tN", (CharSequence) "-fYS8<$@OEPgvP66i(''U8tN", 14);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)14;
      String string3 = StringUtils.join(byteArray0, '|');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)14}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("14", string3);
      
      boolean boolean1 = StringUtils.isAlpha("14");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.substringAfter("66i(''U8tN", "66i(''U8tN");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("-fYS8<$@OEPgvP66i(''U8tN"));
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) set0);
      assertNotNull(list0);
      assertFalse(set0.contains("-fYS8<$@OEPgvP66i(''U8tN"));
      assertFalse(list0.contains("-fYS8<$@OEPgvP66i(''U8tN"));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) stack0, (Collection<String>) list0);
      assertNotNull(list1);
      assertFalse(set0.contains("-fYS8<$@OEPgvP66i(''U8tN"));
      assertFalse(list0.contains("-fYS8<$@OEPgvP66i(''U8tN"));
      assertFalse(list1.contains("-fYS8<$@OEPgvP66i(''U8tN"));
      assertTrue(list1.equals((Object)list0));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      
      String string5 = StringUtils.join(list1, '|', 14, (-638));
      assertNotNull(string5);
      assertFalse(set0.contains("-fYS8<$@OEPgvP66i(''U8tN"));
      assertFalse(list0.contains("-fYS8<$@OEPgvP66i(''U8tN"));
      assertFalse(list1.contains("-fYS8<$@OEPgvP66i(''U8tN"));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals("", string5);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "", 71);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = StringUtils.removeFirst("clone", "clone");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compareIgnoreCase("", "", true);
      assertEquals(0, int0);
      
      String string1 = StringUtils.left("", (-2669));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeFirst("qhe character ", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("qhe character ", string2);
      
      String string3 = StringUtils.substringBetween("", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.chop((String) null);
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      String string5 = StringUtils.substringBetween("clone", (String) null, "T9");
      assertNull(string5);
      
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string6 = StringUtils.left("ch", (-2669));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      
      String string7 = StringUtils.substringAfter((String) null, 0);
      assertNull(string7);
      
      String string8 = StringUtils.join((Object[]) charSequenceArray0, ']', 117, (-3664));
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      assertEquals(6, charSequenceArray0.length);
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "it";
      stringArray0[1] = "Locale must not be null";
      stringArray0[2] = "qs9q([`iZ";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(3, stringArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("", (-1178), 3);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Locale must not be null", (CharSequence) "");
      assertFalse(boolean0);
      
      String string2 = StringUtils.left("rK@eszr,A6q}", 3);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("rK@", string2);
      
      String string3 = StringUtils.abbreviateMiddle("it", "f another", (-712));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("it", string3);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("it", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "rK", 56, 3);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("it", "p{InCombiningDiacriticalMarks}+", "");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // p{InCombiningDiacriticalMarks}+
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = ';';
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string0));
      
      boolean boolean0 = treeSet0.add("");
      assertTrue(treeSet0.contains(string0));
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing(";5uVtYO", ';');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(";5uVtYO;", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("y", (-2529));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "z_a<{9no";
      boolean boolean0 = StringUtils.endsWithAny("Lzu3`*^(] ", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chomp("Lzu3`*^(] ", "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string1);
      assertEquals("Lzu3`*^(] ", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("J`nb;e0h_0[yw*RMc");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
      
      String string2 = StringUtils.substringBeforeLast("", "B{ ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfter("J`nb;e0h_0[yw*RMc", 52);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("STe,i.");
      assertNotNull(string0);
      assertEquals("STe,i.", string0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.of(locale_FilteringMode1, locale_FilteringMode0, locale_FilteringMode1);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertEquals(2, enumSet1.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(enumSet1, enumSet0);
      
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean0 = enumSet1.add(locale_FilteringMode2);
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode0));
      assertEquals(2, enumSet1.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode2);
      assertSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(enumSet1, enumSet0);
      assertSame(locale_FilteringMode2, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode0);
      assertFalse(boolean0);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet1.iterator();
      assertNotNull(iterator0);
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertEquals(2, enumSet1.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode2);
      assertSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(enumSet1, enumSet0);
      
      String string1 = StringUtils.join(iterator0, "STe,i.");
      assertNotNull(string1);
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, enumSet1.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode2);
      assertSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(enumSet1, enumSet0);
      assertEquals("IGNORE_EXTENDED_RANGESSTe,i.REJECT_EXTENDED_RANGES", string1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.removeStartIgnoreCase("PU", "PU");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = arrayList0.add("");
      assertTrue(arrayList0.contains(""));
      assertFalse(arrayList0.contains("PU"));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Iterable<?>) arrayList0, ' ');
      assertNotNull(string1);
      assertTrue(arrayList0.contains(""));
      assertFalse(arrayList0.contains("PU"));
      assertTrue(string1.equals((Object)string0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("", string1);
      
      String string2 = StringUtils.lowerCase("'_TAmdkN]W3mx@\"");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("'_tamdkn]w3mx@\"", string2);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string3);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.join((long[]) null, '0');
      assertNull(string4);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("'_TAmdkN]W3mx@\"", "~", (-1612));
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string5 = StringUtils.truncate("Array eement ", 4);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Arra", string5);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "'_tamdkn]w3mx@\"");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("4u!g>Uy", '4');
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(2, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      boolean boolean2 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.compare("%);Fq{]x*0@lb/`xM2", (String) null, false);
      assertEquals((-1), int0);
      
      boolean boolean3 = StringUtils.isWhitespace("'_TAmdkN]W3mx@\"");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.join((Iterable<?>) arrayList0, ' ');
      assertNotNull(string0);
      assertFalse(arrayList0.contains(string0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", string0);
      
      String string1 = StringUtils.lowerCase("'_TAmdkN]W3mx@\"");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("'_tamdkn]w3mx@\"", string1);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.join((long[]) null, '0');
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("'_tamdkn]w3mx@\"", ' ');
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.truncate("Array eement ", 4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("Arra", string4);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("4u!g>Uy", '4');
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(2, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare((String) null, (String) null, false);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isWhitespace("'_TAmdkN]W3mx@\"");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int int0 = StringUtils.compareIgnoreCase("xk/Vt?'x9@;|5.r%Y", (String) null, false);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "66i(''U8tN}A/Sl!O$17LB:a$=0GA";
      String string1 = StringUtils.unwrap("66i(''U8tN}A/Sl!O$17LB:a$=0GA", "66i(''U8tN}A/Sl!O$17LB:a$=0GA");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("66i(''U8tN}A/Sl!O$17LB:a$=0GA", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "66i(''U8tN}A/Sl!O$17LB:a$=0GA", (CharSequence) "66i(''U8tN}A/Sl!O$17LB:a$=0GA", 7);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "66i(''U8tN}A/Sl!O$17LB:a$=0GA", (CharSequence) "66i(''U8tN}A/Sl!O$17LB:a$=0GA", (-4505));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.replaceChars("66i(''U8tN}A/Sl!O$17LB:a$=0GA", "66i(''U8tN}A/Sl!O$17LB:a$=0GA", "OV3");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("OO3", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "66i(''U8tN}A/Sl!O$17LB:a$=0GA", (-4505));
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      ByteBuffer byteBuffer0 = charset0.encode("66i(''U8tN}A/Sl!O$17LB:a$=0GA");
      assertNotNull(byteBuffer0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=29 cap=31]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertEquals(31, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(29, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(29, byteBuffer0.remaining());
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = StringUtils.defaultString(")", ")");
      assertNotNull(string0);
      assertEquals(")", string0);
      
      boolean boolean0 = StringUtils.isMixedCase(")");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ")", (CharSequence) ")", 8192);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[21];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      String string1 = StringUtils.join(booleanArray0, '*');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(21, booleanArray0.length);
      assertEquals("true*true*true*true*true*false*false*false*false*false*false*false*false*false*false*false*false*false*false*false*false", string1);
      
      String string2 = StringUtils.stripToNull(")");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(")", string2);
      
      String string3 = StringUtils.repeat(")", 8192);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("P`;n*<s(r<@", '*');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string4 = StringUtils.defaultString((String) null, "(*q;5I;$Wqz.p*\tf3&");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("(*q;5I;$Wqz.p*\tf3&", string4);
      
      String string5 = StringUtils.defaultString("8wL");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("8wL", string5);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = StringUtils.center("p]#br", 2449);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, 2449, 63);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, "p]#br", 63);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.substringAfterLast("p]#br", string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isMixedCase("p]#br");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) string0, (CharSequence) "p]#br");
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.substringAfterLast("95#?l/\r{5:!Mn9s", string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "95#?l/\r{5:!Mn9s", "95#?l/\r{5:!Mn9s");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.removeIgnoreCase("", "95#?l/\r{5:!Mn9s");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.leftPad("", (-1), 'U');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.replace("b/NAA9H\"", "(hT9}|)!^WhEnXQe", "_/GYGlss,r2b/O>yzo");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("b/NAA9H\"", string5);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Mini]um abbreviation width is %d");
      assertNotNull(string0);
      assertEquals("Mini]umabbreviationwidthis%d", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Mini]umabbreviationwidthis%d", (CharSequence) "Mini]um abbreviation width is %d", 0);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Mini]um abbreviation width is %d";
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      
      int[] intArray0 = new int[2];
      intArray0[0] = 6;
      intArray0[1] = (-1);
      String string1 = StringUtils.join(intArray0, 'L');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new int[] {6, (-1)}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals("6L-1", string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("Lzu`^( ", (String) null, "6L-1");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Lzu`^( ", string2);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 6;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 6;
      longArray0[4] = (long) 'L';
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) 6;
      String string3 = StringUtils.join(longArray0, 'Q', 6, 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new long[] {0L, 6L, (-1L), 6L, 76L, (-1L), 6L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.SPACE;
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(" ", string4);
      
      int int2 = StringUtils.getFuzzyDistance("Lzu`^( ", " ", locale0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals(1, int2);
      
      int int3 = StringUtils.indexOf(charSequenceArray0[0], 0);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int3);
      
      String string5 = StringUtils.replaceFirst((String) null, "p]#br", "gE|i}Fri`I");
      assertNull(string5);
      
      boolean boolean0 = StringUtils.containsWhitespace(charSequenceArray0[0]);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.chomp("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfterLast("", 19);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "ZzN1P_d<bqZH7[!RSv>?5QH{L");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double double0 = StringUtils.getJaroWinklerDistance("7[tive", "");
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "", 19);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.join((Object[]) stringArray0, '=');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals(0, stringArray0.length);
      assertSame(stringArray0, stringArray1);
      assertEquals("", string3);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "}A/Sl!O$17");
      assertNotNull(stringArray2);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray2.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray0, stringArray2);
      assertSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "7[tive", (CharSequence) "");
      assertEquals(6, int0);
      
      String string4 = StringUtils.replacePattern("ZzN1P_d<bqZH7[!RSv>?5QH{L", ",nc%y8!", "i,w&N");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("ZzN1P_d<bqZH7[!RSv>?5QH{L", string4);
      
      String string5 = StringUtils.stripToNull("ZzN1P_d<bqZH7[!RSv>?5QH{L");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("ZzN1P_d<bqZH7[!RSv>?5QH{L", string5);
      
      String[] stringArray3 = StringUtils.split("::b~+!??", '=');
      assertNotNull(stringArray3);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertEquals(1, stringArray3.length);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      
      String string6 = StringUtils.unwrap("", "}A/Sl!O$17");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      
      int int1 = StringUtils.compareIgnoreCase("The String must not be emptyThe String must not be empty", "BOVz8N", false);
      assertFalse(int1 == int0);
      assertEquals(18, int1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = StringUtils.center("p]#br", 2449);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, 2449, 63);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, "p]#br", 63);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.substringAfterLast("p]#br", string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isMixedCase("p]#br");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) string0, (CharSequence) "p]#br");
      assertFalse(string0.equals((Object)string1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.substringAfterLast("95#?l/\r{5:!Mn9s", string0);
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", 'U');
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.defaultString(")&D4MIN@J\"V.~\"Y", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(")&D4MIN@J\"V.~\"Y", string3);
      
      String string4 = StringUtils.defaultString("E{n.)<1");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("E{n.)<1", string4);
      
      String[] stringArray2 = StringUtils.split("h!g", "\"");
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = StringUtils.capitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "TB-+vjZ ?i";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "f";
      objectArray0[4] = (Object) "TB-+vjZ ?i";
      objectArray0[5] = (Object) "TB-+vjZ ?i";
      objectArray0[6] = (Object) "";
      objectArray0[7] = (Object) "TB-+vjZ ?i";
      String string1 = StringUtils.joinWith("f", objectArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, objectArray0.length);
      
      String string2 = StringUtils.difference("", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "P`;n*<s(r<@";
      charSequenceArray0[1] = (CharSequence) "P`;n*<s(r<@";
      charSequenceArray0[2] = (CharSequence) "P`;n*<s(r<@";
      charSequenceArray0[3] = (CharSequence) "P`;n*<s(r<@";
      charSequenceArray0[4] = (CharSequence) "P`;n*<s(r<@";
      charSequenceArray0[5] = (CharSequence) "P`;n*<s(r<@";
      charSequenceArray0[6] = (CharSequence) "P`;n*<s(r<@";
      charSequenceArray0[7] = (CharSequence) "P`;n*<s(r<@";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("P`;n*<s(r<@", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split("Strings must not be null", "Sn ?:`NU8omC");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      int int0 = StringUtils.countMatches(charSequenceArray0[0], charSequenceArray0[7]);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(1, int0);
      
      String string0 = StringUtils.rightPad("`]:wRNT_Qv$]", 1, "dl-c(bu )+09f1Kk1");
      assertNotNull(string0);
      assertEquals("`]:wRNT_Qv$]", string0);
      
      int int1 = StringUtils.indexOf((CharSequence) "O:Vs6zG(w*H\"Zm", 549);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charSequenceArray0[1]);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(11, charBuffer0.remaining());
      assertEquals("P`;n*<s(r<@", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(11, charBuffer0.length());
      assertEquals(11, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(11, charBuffer0.capacity());
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.substringBeforeLast("`]:wRNT_Qv$]", "dl-c(bu )+09f1Kk1");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("`]:wRNT_Qv$]", string1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "`]:wRNT_Qv$]", (CharSequence) "O:Vs6zG(w*H\"Zm", 3004);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(14, int2);
      
      String string2 = StringUtils.removeStart(" tPiB}ZR~q;_$", "dl-c(bu )+09f1Kk1");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" tPiB}ZR~q;_$", string2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.strip("...", "...");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.rightPad("Object varargs must not be null", (-2));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Object varargs must not be null", string1);
      
      String string2 = StringUtils.removeEnd("J9m/abu\"y", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("J9m/abu\"y", string2);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny(charSequenceArray0[0], charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short) (-1124);
      shortArray0[2] = (short) (-2138);
      shortArray0[3] = (short)55;
      shortArray0[4] = (short)1335;
      shortArray0[5] = (short) (-977);
      shortArray0[6] = (short)348;
      shortArray0[7] = (short) (-1);
      String string3 = StringUtils.join(shortArray0, 'p');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new short[] {(short) (-1), (short) (-1124), (short) (-2138), (short)55, (short)1335, (short) (-977), (short)348, (short) (-1)}, shortArray0);
      assertEquals(8, shortArray0.length);
      assertEquals("-1p-1124p-2138p55p1335p-977p348p-1", string3);
      
      String string4 = StringUtils.rightPad((String) null, (-2), '(');
      assertNull(string4);
      
      int int1 = StringUtils.lastIndexOfAny("J9m/abu\"y", charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(9, int1);
      
      String string5 = StringUtils.leftPad("Object varargs must not be null", 10, '(');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Object varargs must not be null", string5);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", "\r", 2562);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("\r", "\r");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, "\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("\r");
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (Charset) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      CharBuffer charBuffer0 = StringUtils.firstNonEmpty((CharBuffer[]) null);
      assertNull(charBuffer0);
      
      String string0 = StringUtils.abbreviate("e@BI9Yr#n|y(!6K", "\r", 3);
      assertNotNull(string0);
      assertEquals("e@\r", string0);
      
      String string1 = StringUtils.strip("bl*", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("bl*", string1);
      
      String string2 = StringUtils.substringAfter((String) null, "tQq?mCG?m6>{J0+.~n");
      assertNull(string2);
      
      String string3 = StringUtils.deleteWhitespace("T#");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("T#", string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "T#", (CharSequence) "bl*", (-1371));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.trim("=5*DUfb.zY");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("=5*DUfb.zY", string4);
      
      String string5 = StringUtils.leftPad("ch", 8, "tQq?mCG?m6>{J0+.~n");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("tQq?mCch", string5);
      
      String string6 = StringUtils.substring("NG(2)shXkr?*hv_", 8, 28);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("kr?*hv_", string6);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = StringUtils.removeFirst("clone", "clone");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compareIgnoreCase("", "", true);
      assertEquals(0, int0);
      
      String string1 = StringUtils.left("", (-2669));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeFirst("The character ", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("The character ", string2);
      
      String string3 = StringUtils.substringBetween("TB3+vjG?Xi", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.chop((String) null);
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      String string5 = StringUtils.substringBetween("clone", (String) null, "T9");
      assertNull(string5);
      
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) null;
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string6 = StringUtils.left("ch", (-2669));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
      
      String string7 = StringUtils.mid("@qK7b]Q0O ~Go_u
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertEquals("", string7);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string8 = StringUtils.stripAccents("");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string6));
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("org.apache.commons.lang3.ObjectUtils$Null", supplier0);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      String string1 = StringUtils.repeat((String) null, 2);
      assertNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("xOWb!q", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("xOWb!q", string2);
      
      String string3 = StringUtils.substringBeforeLast("", "i^z7");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Lzu3`*^(] ");
      assertNotNull(string0);
      assertEquals("lzu3`*^(] ", string0);
      
      String string1 = StringUtils.substringBetween("lzu3`*^(] ", "Lzu3`*^(] ", "Lzu3`*^(] ");
      assertNull(string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Lzu3`*^(] ";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, stringArray0.length);
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "al*7#0(fh";
      String string3 = StringUtils.normalizeSpace("Lzu3`*^(] ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Lzu3`*^(]", string3);
      
      charSequenceArray0[1] = (CharSequence) "Lzu3`*^(]";
      charSequenceArray0[2] = (CharSequence) "Lzu3`*^(] ";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "Lzu3`*^(] ";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Lzu3`*^(] ", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.center("Lzu3`*^(]", 76, "lzu3`*^(] ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("lzu3`*^(] lzu3`*^(] lzu3`*^(] lzuLzu3`*^(]lzu3`*^(] lzu3`*^(] lzu3`*^(] lzu3", string4);
      
      String string5 = StringUtils.abbreviate((String) null, 52);
      assertNull(string5);
      
      String string6 = StringUtils.center("Lzu3`*^(] ", 1179, '?');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) ':';
      String string0 = StringUtils.join(doubleArray0, 'k', (int) ':', (int) ':');
      assertNotNull(string0);
      assertArrayEquals(new double[] {58.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", "bDUg'");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.join(doubleArray0, ':');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new double[] {58.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals("58.0:0.0:0.0:0.0:0.0:0.0", string2);
      
      String string3 = StringUtils.right("", 0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      
      Buffer buffer0 = charBuffer0.flip();
      assertNotNull(buffer0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, buffer0.arrayOffset());
      assertFalse(buffer0.isDirect());
      assertFalse(buffer0.isReadOnly());
      assertEquals(0, buffer0.capacity());
      assertEquals(0, buffer0.position());
      assertTrue(buffer0.hasArray());
      assertEquals(0, buffer0.limit());
      assertFalse(buffer0.hasRemaining());
      assertEquals(0, buffer0.remaining());
      
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertNotNull(charBuffer1);
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.length());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string0 = StringUtils.join((Iterable<?>) arrayList0, ' ');
      assertNotNull(string0);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", string0);
      
      String string1 = StringUtils.lowerCase("'_TAmdkN]W3mx@\"");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("'_tamdkn]w3mx@\"", string1);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.join((long[]) null, '0');
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("'_TAmdkN]W3mx@\"", "~", (-1612));
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.substringAfter("JhF r", "'_tamdkn]w3mx@\"");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 10;
      String string0 = StringUtils.join((boolean[]) null, ':', 1680, 2);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 1680;
      longArray0[1] = (long) 10;
      longArray0[2] = (long) '=';
      String string1 = StringUtils.join(longArray0, ':');
      assertNotNull(string1);
      assertArrayEquals(new long[] {1680L, 10L, 61L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("1680:10:61", string1);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(1680));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Object object0 = arrayDeque0.pollFirst();
      assertNull(object0);
      assertFalse(arrayDeque0.contains(1680));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string2 = StringUtils.join((Iterable<?>) arrayDeque0, 'V');
      assertNotNull(string2);
      assertFalse(arrayDeque0.contains(1680));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Lzu3`*^(] ");
      assertNotNull(string0);
      assertEquals("lzu3`*^(] ", string0);
      
      String string1 = StringUtils.substringBetween("lzu3`*^(] ", "Lzu3`*^(] ", "Lzu3`*^(] ");
      assertNull(string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Lzu3`*^(] ";
      stringArray0[1] = "lzu3`*^(] ";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("lzu3`*^(] "));
      assertEquals(0, linkedList0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      assertEquals(Locale.FilteringMode.EXTENDED_FILTERING, locale_FilteringMode0);
      
      boolean boolean0 = linkedList0.add((Object) locale_FilteringMode0);
      assertFalse(linkedList0.contains("lzu3`*^(] "));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      String string2 = StringUtils.join((boolean[]) null, 'k', 3, (-711));
      assertNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "lzu3`*^(] ", (-682));
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.uncapitalize((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty("ebu?x2", "The String must not be empty");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertEquals("ebu?x2", string4);
      
      boolean boolean2 = StringUtils.isBlank("Lzu3`*^(] ");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string5 = StringUtils.join((long[]) null, 'k');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = StringUtils.removeFirst("clone", "clone");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compareIgnoreCase("", "", true);
      assertEquals(0, int0);
      
      String string1 = StringUtils.left("", (-2669));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeFirst("The character ", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("The character ", string2);
      
      String string3 = StringUtils.substringBetween("TB3+vjG?Xi", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.chop((String) null);
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      String string5 = StringUtils.substringBetween("clone", (String) null, "T9");
      assertNull(string5);
      
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) null;
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string6 = StringUtils.left("ch", (-2669));
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
      
      String string7 = StringUtils.mid("@qK7b]Q0O ~Go_u                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (", 16, 0);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertEquals("", string7);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsAny("TB3+vjG?Xi", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("', has a length less than 2", '3');
      assertNotNull(string0);
      assertEquals("3', has a length less than 23", string0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string1 = StringUtils.replacePattern("', has a length less than 2", "3', has a length less than 23", ",nc%y8!");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("', has a length less than 2", string1);
      
      String string2 = StringUtils.stripToNull("i,w&N");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("i,w&N", string2);
      
      String string3 = StringUtils.substringBetween("', has a length less than 2", "', has a length less than 2", "3', has a length less than 23");
      assertNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "i,w&N", (CharSequence) "i,w&N", 3289);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = StringUtils.left("The character ", 1);
      assertNotNull(string0);
      assertEquals("T", string0);
      
      String string1 = StringUtils.substring("T", 1, 1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.reverseDelimited("T", 'n');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("T", string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "T";
      objectArray0[2] = (Object) "T";
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[3] = object1;
      objectArray0[4] = (Object) "T";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "", 3576, 4913);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3576
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = StringUtils.truncate((String) null, 3355, 44);
      assertNull(string0);
      
      String string1 = StringUtils.stripToNull("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string1);
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      
      String string2 = StringUtils.stripToEmpty("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      String string3 = StringUtils.join(booleanArray0, 'k', 44, (-711));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals("", string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "p{InCombiningDiacriticalMarks}+", 3);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string4 = StringUtils.uncapitalize((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.defaultIfEmpty("p{InCombiningDiacriticalMarks}+", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string5);
      
      boolean boolean1 = StringUtils.isBlank("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 44;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 3;
      longArray0[3] = (long) 44;
      longArray0[4] = (long) 44;
      String string6 = StringUtils.join(longArray0, 'k');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertArrayEquals(new long[] {44L, (-1L), 3L, 44L, 44L}, longArray0);
      assertEquals(5, longArray0.length);
      assertEquals("44k-1k3k44k44", string6);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "TB3+vjG?Xi";
      charSequenceArray0[2] = (CharSequence) "TB3+vjG?Xi";
      charSequenceArray0[4] = (CharSequence) "TB3+vjG?Xi";
      boolean boolean0 = StringUtils.isMixedCase(charSequenceArray0[1]);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.truncate((String) null, 110);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate(" ", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[2] = (CharSequence) " ";
      boolean boolean1 = StringUtils.startsWithAny("Strings must not be null", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string2 = StringUtils.substring((String) null, 0, 0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate(" ", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "`>*n0xkIk{M";
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) " ";
      boolean boolean1 = StringUtils.startsWithAny("Strings must not be null", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string2 = StringUtils.substring((String) null, 0, 0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = StringUtils.upperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("_", 10, '=');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("====_=====", string1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = StringUtils.substringBetween("66i(''U8tN", "66i(''U8tN", "66i(''U8tN");
      assertNull(string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("66i(''U8tN", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^( ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripEnd(";bIfd9g=Y>{9M'", "The character ");
      assertNotNull(string0);
      assertEquals(";bIfd9g=Y>{9M'", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ";bIfd9g=Y>{9M'", (CharSequence) "The character ");
      assertEquals(14, int0);
      
      String string1 = StringUtils.toRootLowerCase(";bIfd9g=Y>{9M'");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(";bifd9g=y>{9m'", string1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "null/empty items";
      objectArray0[1] = (Object) "null/empty items";
      objectArray0[2] = (Object) "null/empty items";
      objectArray0[3] = (Object) "null/empty items";
      objectArray0[4] = (Object) "null/empty items";
      objectArray0[5] = (Object) "null/empty items";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "null/empty items";
      objectArray0[8] = (Object) "null/empty items";
      String string0 = StringUtils.joinWith("null/empty items", objectArray0);
      assertNotNull(string0);
      assertEquals(9, objectArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "null/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsjava.lang.Object@47f413acnull/empty itemsnull/empty itemsnull/empty itemsnull/empty items", (CharSequence) "null/empty items", (-2460));
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("null/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsjava.lang.Object@47f413acnull/empty itemsnull/empty itemsnull/empty itemsnull/empty items");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsIgnoreCase("null/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsjava.lang.Object@47f413acnull/empty itemsnull/empty itemsnull/empty itemsnull/empty items", "null/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsjava.lang.Object@47f413acnull/empty itemsnull/empty itemsnull/empty itemsnull/empty items");
      assertTrue(boolean0);
      
      String string2 = StringUtils.normalizeSpace("null/empty items");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("null/empty items", string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "null/empty items", (CharSequence) "null/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsjava.lang.Object@47f413acnull/empty itemsnull/empty itemsnull/empty itemsnull/empty items");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("null/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsnull/empty itemsjava.lang.Object@47f413acnull/empty itemsnull/empty itemsnull/empty itemsnull/empty items");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.join((int[]) null, 'X');
      assertNull(string3);
      
      String string4 = StringUtils.center("+uUvRr,XOEZZAol(}", 6);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("+uUvRr,XOEZZAol(}", string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "null/empty items", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.substring((String) null, 22);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.rotate("`5Lz?K'hi/!lS1-", 1796);
      assertNotNull(string1);
      assertEquals("?K'hi/!lS1-`5Lz", string1);
      
      charSequenceArray0[1] = (CharSequence) "?K'hi/!lS1-`5Lz";
      String string2 = StringUtils.leftPad("Supplied value must be a valid byte literal between -128 and 127: [", 1796, "\n");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[2] = (CharSequence) string2;
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      String string3 = StringUtils.valueOf(charArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new char[] {'['}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("[", string3);
      
      charSequenceArray0[3] = (CharSequence) "[";
      String string4 = StringUtils.replaceOnceIgnoreCase("WNb{;81\u0007j!\"b65=R", "Strings must not be null", "Supplied value must be a valid byte literal between -128 and 127: [");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("WNb{;81\u0007j!\"b65=R", string4);
      
      charSequenceArray0[4] = (CharSequence) "WNb{;81\u0007j!\"b65=R";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.substring((String) null, 22);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.rotate("`5....", 1480);
      assertNotNull(string1);
      assertEquals("....`5", string1);
      
      charSequenceArray0[1] = (CharSequence) "....`5";
      String string2 = StringUtils.leftPad("Supplied value must be a valid byte literal between -128 and 127: [", 1480, "\n");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      String string3 = StringUtils.valueOf(charArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new char[] {'['}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("[", string3);
      
      charSequenceArray0[3] = (CharSequence) "[";
      String string4 = StringUtils.replaceOnceIgnoreCase("WNb{;81\u0007j!\"b65=R", "\n", "Supplied value must be a valid byte literal between -128 and 127: [");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("WNb{;81\u0007j!\"b65=R", string4);
      
      charSequenceArray0[4] = (CharSequence) "WNb{;81\u0007j!\"b65=R";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = StringUtils.removeEnd("3\"(&Y}vSs0jf\"_2zh", "The String must not be emptyThe String must not be empty");
      assertNotNull(string0);
      assertEquals("3\"(&Y}vSs0jf\"_2zh", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'v';
      charArray0[1] = '';
      charArray0[2] = '!';
      charArray0[3] = '@';
      charArray0[4] = ' ';
      charArray0[5] = 'I';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "3\"(&Y}vSs0jf\"_2zh", charArray0);
      assertArrayEquals(new char[] {'v', '', '!', '@', ' ', 'I'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.trimToNull("3\"(&Y}vSs0jf\"_2zh");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("3\"(&Y}vSs0jf\"_2zh", string1);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains('v'));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      boolean boolean1 = arrayDeque0.add("3\"(&Y}vSs0jf\"_2zh");
      assertFalse(arrayDeque0.contains('v'));
      assertTrue(arrayDeque0.contains("3\"(&Y}vSs0jf\"_2zh"));
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(boolean1);
      
      String string2 = StringUtils.join((Iterable<?>) arrayDeque0, "Pz'KUBJ");
      assertNotNull(string2);
      assertFalse(arrayDeque0.contains('v'));
      assertTrue(arrayDeque0.contains("3\"(&Y}vSs0jf\"_2zh"));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals("3\"(&Y}vSs0jf\"_2zh", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "3\"(&Y}vSs0jf\"_2zh";
      charSequenceArray0[1] = (CharSequence) "The String must not be emptyThe String must not be empty";
      charSequenceArray0[2] = (CharSequence) "Pz'KUBJ";
      String string3 = StringUtils.appendIfMissing("3\"(&Y}vSs0jf\"_2zh", "3\"(&Y}vSs0jf\"_2zh", charSequenceArray0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(9, charSequenceArray0.length);
      assertEquals("3\"(&Y}vSs0jf\"_2zh", string3);
      
      charSequenceArray0[3] = (CharSequence) "3\"(&Y}vSs0jf\"_2zh";
      boolean boolean2 = arrayDeque0.add(charSequenceArray0[3]);
      assertFalse(arrayDeque0.contains('v'));
      assertTrue(arrayDeque0.contains("3\"(&Y}vSs0jf\"_2zh"));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean2);
      
      charSequenceArray0[4] = (CharSequence) "The String must not be emptyThe String must not be empty";
      charSequenceArray0[5] = (CharSequence) "3\"(&Y}vSs0jf\"_2zh";
      charSequenceArray0[6] = (CharSequence) "3\"(&Y}vSs0jf\"_2zh";
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("v!@ I", charBuffer0.toString());
      assertEquals(6, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.length());
      assertArrayEquals(new char[] {'v', '', '!', '@', ' ', 'I'}, charArray0);
      assertEquals(6, charArray0.length);
      
      IntStream intStream0 = charBuffer0.chars();
      assertNotNull(intStream0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("v!@ I", charBuffer0.toString());
      assertEquals(6, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.length());
      assertArrayEquals(new char[] {'v', '', '!', '@', ' ', 'I'}, charArray0);
      assertEquals(6, charArray0.length);
      
      boolean boolean3 = arrayDeque0.add(charBuffer0);
      assertFalse(arrayDeque0.contains("The String must not be emptyThe String must not be empty"));
      assertTrue(arrayDeque0.contains("3\"(&Y}vSs0jf\"_2zh"));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("v!@ I", charBuffer0.toString());
      assertEquals(6, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(6, charBuffer0.length());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(3, arrayDeque0.size());
      assertArrayEquals(new char[] {'v', '', '!', '@', ' ', 'I'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean3);
      
      charSequenceArray0[7] = (CharSequence) "3\"(&Y}vSs0jf\"_2zh";
      charSequenceArray0[8] = (CharSequence) "Pz'KUBJ";
      int int0 = StringUtils.lastIndexOfAny("3\"(&Y}vSs0jf\"_2zh", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Supplied value must be a valid byte literal between -128 and 127: [", "T#NV7-5|2@");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [";
      charSequenceArray0[1] = (CharSequence) "T#NV7-5|2@";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [";
      charSequenceArray0[4] = (CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.substringAfterLast("org.apache.commons.lang3.ArrayUtils", "");
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.center("T#NV7-5|2@", 1821, 'h');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.overlay(string2, "!7[N7X60vQCp?B!", 4, 1);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray2 = StringUtils.substringsBetween((String) null, (String) null, "D'(YlGRi|)cs8|.4");
      assertNull(stringArray2);
      
      String string4 = StringUtils.reverse((String) null);
      assertNull(string4);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(1821));
      assertEquals(0, priorityQueue0.size());
      
      PriorityQueue<Integer> priorityQueue1 = new PriorityQueue<Integer>(priorityQueue0);
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue0.contains(1821));
      assertFalse(priorityQueue1.contains(1821));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, priorityQueue1.size());
      
      Integer integer0 = new Integer(4);
      assertNotNull(integer0);
      assertEquals(4, (int)integer0);
      
      boolean boolean2 = priorityQueue0.add(integer0);
      assertTrue(priorityQueue0.contains(4));
      assertFalse(priorityQueue0.contains(1821));
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, priorityQueue0.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertTrue(boolean2);
      
      Integer integer1 = new Integer(1821);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1821, (int)integer1);
      
      boolean boolean3 = priorityQueue0.add(integer1);
      assertTrue(priorityQueue0.contains(1821));
      assertFalse(priorityQueue0.contains(1));
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(2, priorityQueue0.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertTrue(boolean3);
      
      String string5 = StringUtils.join((Iterable<?>) priorityQueue1, ']');
      assertNotNull(string5);
      assertTrue(priorityQueue0.contains(1821));
      assertFalse(priorityQueue0.contains(1));
      assertFalse(priorityQueue1.contains(1821));
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals(2, priorityQueue0.size());
      assertEquals(0, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Ay[");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Ay[", (CharSequence) "The character ");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isMixedCase("Ay[");
      assertTrue(boolean0);
      
      String string0 = StringUtils.getDigits("Ay[");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.rotate("5C$84", 1017);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("845C$", string1);
      
      String string2 = StringUtils.substringAfter("5C$84", "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(" ").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) " ", supplier0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals(" ", charSequence0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", " ");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", " ", 278);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) " ");
      assertEquals(0, int0);
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", " ");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.chomp("null/empty items");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("null/empty items", string1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("null/empty items");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = 'L';
      charArray0[2] = 'E';
      String string2 = StringUtils.join(charArray0, 'L', 1897, 6);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new char[] {',', 'L', 'E'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("", string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("null/empty items", " ", (-149));
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "null/empty items", (CharSequence[]) stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertTrue(boolean3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string3 = StringUtils.join((Object[]) stringArray1, " ");
      assertNotNull(string3);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("null/empty items", string3);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = StringUtils.left("The character ", 1);
      assertNotNull(string0);
      assertEquals("T", string0);
      
      String string1 = StringUtils.difference("The character ", "T");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.rightPad("dl-c(bu )+09f1Kk1", 1, 'd');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("dl-c(bu )+09f1Kk1", string2);
      
      String string3 = StringUtils.deleteWhitespace("dl-c(bu )+09f1Kk1");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("dl-c(bu)+09f1Kk1", string3);
      
      String string4 = StringUtils.stripStart("T", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("T", string4);
      
      boolean boolean0 = StringUtils.isBlank("T");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      String string5 = StringUtils.valueOf(charArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertArrayEquals(new char[] {'\u0000', 'd', 'd'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("\u0000dd", string5);
      
      int int0 = StringUtils.lastOrdinalIndexOf("The character ", "\u0000dd", 1);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', 'd', 'd'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) null, locale_FilteringMode0);
      assertNotNull(list0);
      assertFalse(list0.contains(""));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string6 = StringUtils.join(list0, "\u0000dd", 114, (-1));
      assertNotNull(string6);
      assertFalse(list0.contains(""));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("", string6);
      
      String[] stringArray0 = new String[6];
      stringArray0[1] = "\r";
      stringArray0[2] = "";
      stringArray0[3] = "T";
      stringArray0[4] = "dl-c(bu)+09f1Kk1";
      stringArray0[5] = "dl-c(bu)+09f1Kk1";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string7 = StringUtils.substringBetween("", "NPC", "]");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = StringUtils.left("The character ", 1);
      assertNotNull(string0);
      assertEquals("T", string0);
      
      String string1 = StringUtils.difference("The character ", "T");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.rightPad("dl-c(bu )+09f1Kk1", 1, 'd');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("dl-c(bu )+09f1Kk1", string2);
      
      String string3 = StringUtils.deleteWhitespace("dl-c(bu )+09f1Kk1");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("dl-c(bu)+09f1Kk1", string3);
      
      String string4 = StringUtils.stripStart("T", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("T", string4);
      
      boolean boolean0 = StringUtils.isBlank("T");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      String string5 = StringUtils.valueOf(charArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertArrayEquals(new char[] {'\u0000', 'd', 'd'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("\u0000dd", string5);
      
      int int0 = StringUtils.lastOrdinalIndexOf("The character ", "\u0000dd", 1);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', 'd', 'd'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) null, locale_FilteringMode0);
      assertNotNull(list0);
      assertFalse(list0.contains(""));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string6 = StringUtils.join(list0, "\u0000dd", 114, (-1));
      assertNotNull(string6);
      assertFalse(list0.contains(""));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("", string6);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "dl-c(bu )+09f1Kk1";
      stringArray0[1] = "\r";
      stringArray0[2] = "";
      stringArray0[3] = "T";
      stringArray0[4] = "dl-c(bu)+09f1Kk1";
      stringArray0[5] = "dl-c(bu)+09f1Kk1";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string7 = StringUtils.substringBetween("{}", "NPC", "]");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = StringUtils.unwrap("dl-c(bu )+09f1Kk1", "dl-c(bu )+09f1Kk1");
      assertNotNull(string0);
      assertEquals("dl-c(bu )+09f1Kk1", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = '~';
      charArray0[4] = 'u';
      boolean boolean0 = StringUtils.isAllLowerCase("dl-c(bu )+09f1Kk1");
      assertFalse(boolean0);
      
      String string1 = StringUtils.left("dl-c(bu )+09f1Kk1", 4);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("dl-", string1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = StringUtils.truncate(" ", 15);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      
      int int0 = StringUtils.getFuzzyDistance("TB3+vjG?Xi", " ", locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals(0, int0);
      
      String string1 = StringUtils.normalizeSpace("TB3+vjG?Xi");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("TB3+vjG?Xi", string1);
      
      String string2 = StringUtils.defaultString("TB3+vjG?Xi");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("TB3+vjG?Xi", string2);
      
      int int1 = StringUtils.compareIgnoreCase("TB3+vjG?Xi", " ", true);
      assertFalse(int1 == int0);
      assertEquals(84, int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string3 = StringUtils.join((char[]) null, 'i');
      assertNull(string3);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) "TB3+vjG?Xi";
      charSequenceArray0[4] = (CharSequence) "TB3+vjG?Xi";
      charSequenceArray0[5] = (CharSequence) "TB3+vjG?Xi";
      charSequenceArray0[6] = (CharSequence) " ";
      charSequenceArray0[7] = (CharSequence) "TB3+vjG?Xi";
      int int2 = StringUtils.lastIndexOfAny("TB3+vjG?Xi", charSequenceArray0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int2);
      
      int int3 = StringUtils.indexOf(charSequenceArray0[5], 15);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>(2249);
      assertNotNull(vector0);
      assertFalse(vector0.contains(2249));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(2249, vector0.capacity());
      assertEquals(0, vector0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vector0.add(object0);
      assertFalse(vector0.contains(2249));
      assertTrue(vector0.contains(object0));
      assertEquals(2249, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((List<?>) vector0, "Exception cloning Cloneable type ", 2249, 542);
      assertNotNull(string0);
      assertFalse(vector0.contains(2249));
      assertTrue(vector0.contains(object0));
      assertEquals(2249, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("", string0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.substringBetween("NPC", "#t4i:!q(C,jFV#t4i:!q(C,jFV", "Minimum abbreviation width is %d");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", "", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string1 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.endsWithAny("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) " ");
      assertEquals(1, int0);
      
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = 0;
      String string2 = StringUtils.join(intArray0, 'N');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new int[] {(-1), 0, 0, 0, (-1), 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals("-1N0N0N0N-1N0", string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", "");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, '\"', 0, 1);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.unwrap("vM%{`(", 'Q');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("vM%{`(", string4);
      
      String string5 = StringUtils.stripAccents("org.apache.commons.lang3.CharUtils");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.CharUtils", string5);
      
      String string6 = StringUtils.substring("", (-122), 0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
      
      String string7 = StringUtils.center("Minimum abbreviation width is %d", 0, 'f');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals("Minimum abbreviation width is %d", string7);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = "I^[SC\\\\";
      String string1 = StringUtils.wrap("I^[SC\\", '4');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("4I^[SC\\4", string1);
      
      charSequenceArray0[6] = (CharSequence) "4I^[SC\\4";
      long[] longArray0 = new long[0];
      String string2 = StringUtils.join(longArray0, '4');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, '4', (-767), (-767));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(8, charSequenceArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.trim("I^[SC\\");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("I^[SC\\", string4);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string5 = StringUtils.normalizeSpace("d3Ug");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("d3Ug", string5);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance(charSequenceArray0[6], "I^[SC\\", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = "I^[SC\\\\";
      String string1 = StringUtils.wrap("I^[SC\\", '4');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("4I^[SC\\4", string1);
      
      charSequenceArray0[6] = (CharSequence) "4I^[SC\\4";
      long[] longArray0 = new long[0];
      String string2 = StringUtils.join(longArray0, '4');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string2);
      
      String string3 = StringUtils.trim("I^[SC\\");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("I^[SC\\", string3);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string4 = StringUtils.normalizeSpace("d3Ug");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("d3Ug", string4);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)56;
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance(charSequenceArray0[6], "I^[SC\\", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      String string0 = "Exception cloning Cloneable type ";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Exception cloning Cloneable type ", "Exception cloning Cloneable type ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>(stack0);
      assertNotNull(hashSet0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean0 = hashSet0.add(locale_FilteringMode0);
      assertFalse(stack0.contains(locale_FilteringMode0));
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      String string1 = ")k veyx`,0_2w,";
      String string2 = StringUtils.joinWith(")k veyx`,0_2w,", stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("", string2);
      
      int int0 = (-1274);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(")k veyx`,0_2w,", "Exception cloning Cloneable type ", (-1274));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 34
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = StringUtils.strip("vn");
      assertNotNull(string0);
      assertEquals("vn", string0);
      
      String string1 = StringUtils.abbreviate("vn", "vn", 4);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("vn", string1);
      
      String string2 = StringUtils.rightPad("Nb%a", 4, '6');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Nb%a", string2);
      
      String string3 = StringUtils.reverseDelimited("Nb%a", '6');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("Nb%a", string3);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 1637, "");
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "rt.%K7q9!Q";
      stringArray0[1] = "nTfhAgrf'w+k";
      stringArray0[2] = "NkI&sZy4e3rC";
      String string1 = StringUtils.rightPad("chT9}|z!^WhEnXQe", 3929, "kb_p}8u7#NB*QGh");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfterLast("kb_p}8u7#NB*QGh", 8192);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "kb_p}8u7#NB*QGh");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "kb_p}8u7#NB*QGh", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.leftPad("", 100, string1);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("chT9}|z!^WhEnXQekb_p}8u7#NB*QGhkb_p}8u7#NB*QGhkb_p}8u7#NB*QGhkb_p}8u7#NB*QGhkb_p}8u7#NB*QGhkb_p}8u7#", string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '*';
      charArray0[1] = 'i';
      String string4 = StringUtils.replace("rt.%K7q9!Q", "chT9}|z!^WhEnXQekb_p}8u7#NB*QGhkb_p}8u7#NB*QGhkb_p}8u7#NB*QGhkb_p}8u7#NB*QGhkb_p}8u7#NB*QGhkb_p}8u7#", "rt.%K7q9!Q", 8192);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("rt.%K7q9!Q", string4);
      
      String[] stringArray1 = StringUtils.split((String) null, '*');
      assertNull(stringArray1);
      
      String string5 = StringUtils.unwrap("rt.%K7q9!Q", "rt.%K7q9!Q");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("rt.%K7q9!Q", string5);
      
      String string6 = StringUtils.replaceFirst("NkI&sZy4e3rC", string0, "e{sGg");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertEquals("NkI&sZy4e3rC", string6);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "NkI&sZy4e3rC", (CharSequence) "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("dl-c(bu )+09f1Kk1");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '%');
      assertNotNull(string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.substringBeforeLast("dl-c(bu )+09f1Kk1", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("dl-c(bu )+09f1Kk1", string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("\r", "");
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "dl-c(bu )+09f1Kk1", (CharSequence) "dl-c(bu )+09f1Kk1", 1);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rightPad("dl-c(bu )+09f1Kk1", (-1), "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("dl-c(bu )+09f1Kk1", string2);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = StringUtils.difference(")&D4MIN@J\"V.~\"Yq", ")&D4MIN@J\"V.~\"Yq");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("X!]DI~e[W|v SHCf$$0", supplier0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("X!]DI~e[W|v SHCf$$0", string1);
      
      String string2 = StringUtils.wrap(")&D4MIN@J\"V.~\"Yq", ',');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(",)&D4MIN@J\"V.~\"Yq,", string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-11);
      byteArray0[0] = (byte)9;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)101;
      String string3 = StringUtils.join(byteArray0, ',');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)9, (byte) (-5), (byte) (-11), (byte)0, (byte)81, (byte) (-118), (byte)101}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("9,-5,-11,0,81,-118,101", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("9,-5,-11,0,81,-118,101", "", "X!]DI~e[W|v SHCf$$0");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("9,-5,-11,0,81,-118,101", string4);
      
      boolean boolean1 = StringUtils.endsWith("9,-5,-11,0,81,-118,101", "9,-5,-11,0,81,-118,101");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("}R1AMjL", "9,-5,-11,0,81,-118,101", "}R1AMjL");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("}R1AMjL", string5);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "}R1AMjL", "X!]DI~e[W|v SHCf$$0");
      assertEquals((-1), int0);
      
      String string6 = StringUtils.substringBetween((String) null, ",)&D4MIN@J\"V.~\"Yq,", "X!]DI~e[W|v SHCf$$0");
      assertNull(string6);
      
      String string7 = StringUtils.substringAfterLast("9,-5,-11,0,81,-118,101", "");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = StringUtils.repeat("The String must not be empty", 55);
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern("org.apache.commons.lang3.ObjectUtils", "org.apache.commons.lang3.ObjectUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(55));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains(55));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string2 = StringUtils.join(iterator0, '\\');
      assertNotNull(string2);
      assertFalse(arrayDeque0.contains(55));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceChars("org.apache.commons.lang3.ObjectUtils", "]b7<T", "Object varargs must not be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.ObjectUtils", string3);
      
      String string4 = StringUtils.stripStart("d@dj>1U{)tLw+>k'|", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String[] stringArray0 = StringUtils.substringsBetween("", "9~pfjH{X", "54\".54\".");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("maxWith cannot be negative", "Bq", 55);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      int[] intArray0 = new int[0];
      String string5 = StringUtils.join(intArray0, '\\');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("", string5);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      String string6 = StringUtils.mid((String) null, (-128), (-128));
      assertNull(string6);
      
      int int0 = StringUtils.lastIndexOfAny(string0, stringArray0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(0, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals((-1), int0);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("2");
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      String string7 = StringUtils.join((Object[]) stringArray2, '\\');
      assertNotNull(string7);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals("2", string7);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("&k~uo3CI<Ap0-O7l");
      assertNotNull(string0);
      assertEquals("&k~uo3CI<Ap0-O7l", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "&k~uo3CI<Ap0-O7l", '<');
      assertEquals(1, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "&k~uo3CI<Ap0-O7l", 23);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean0 = StringUtils.isEmpty("&k~uo3CI<Ap0-O7l");
      assertFalse(boolean0);
      
      String string1 = StringUtils.getIfBlank("&k~uo3CI<Ap0-O7l", (Supplier<String>) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("&k~uo3CI<Ap0-O7l", string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "&k~uo3CI<Ap0-O7l";
      stringArray0[1] = "&k~uo3CI<Ap0-O7l";
      stringArray0[2] = "&k~uo3CI<Ap0-O7l";
      stringArray0[3] = "&k~uo3CI<Ap0-O7l";
      stringArray0[4] = "&k~uo3CI<Ap0-O7l";
      stringArray0[5] = "";
      stringArray0[6] = "&k~uo3CI<Ap0-O7l";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("&k~uo3CI<Ap0-O7l", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String string0 = StringUtils.wrap("", 'B');
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[4] = '-';
      charArray0[5] = '-';
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string1 = StringUtils.join(booleanArray0, 'B');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals("falseBfalse", string1);
      
      String string2 = StringUtils.stripToNull("Minimum abbreviation width with offset is %d");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      
      String string3 = StringUtils.repeat("^|ZrT!JNq", 2396);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = null;
      // Undeclared exception!
      StringUtils.containsNone((CharSequence) string3, "Rg2w<@#'nLbPpPi3*t");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Array element ";
      objectArray0[1] = (Object) "Array element ";
      objectArray0[3] = (Object) "Array element ";
      objectArray0[4] = (Object) "Array element ";
      objectArray0[5] = (Object) "Array element ";
      objectArray0[6] = (Object) "Array element ";
      objectArray0[7] = (Object) "Array element ";
      String string0 = StringUtils.joinWith("Array element ", objectArray0);
      assertNotNull(string0);
      assertEquals(8, objectArray0.length);
      assertEquals("Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ", (CharSequence) "Array element ", 51);
      assertEquals(56, int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1051;
      shortArray0[1] = (short)6;
      String string1 = StringUtils.defaultString("Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ", string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ", "Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.normalizeSpace("Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element", string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Array element ", (CharSequence) "Array element ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("Array element ");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string3 = StringUtils.deleteWhitespace("ComparatL,ComparatL,");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("ComparatL,ComparatL,", string3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "ComparatL,ComparatL,", (CharSequence) "Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element", 1019);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.removeAll((String) null, (String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = StringUtils.rightPad("@qK7b]Q0O ~Go_u", 751);
      assertNotNull(string0);
      assertEquals("@qK7b]Q0O ~Go_ustring0);
      
      String string1 = StringUtils.removeEnd("@qK7b]Q0O ~Go_u
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("@qK7b]Q0O ~Go_ustring1);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      
      int int0 = StringUtils.getFuzzyDistance("@qK7b]Q0O ~Go_u", "(", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals(0, int0);
      
      String string2 = StringUtils.normalizeSpace("(");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("(", string2);
      
      String string3 = StringUtils.rightPad(" _B'U8tN'U8tN", 751, (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" _B'U8tN'U8tstring3);
      
      String string4 = StringUtils.stripStart("(", "(");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.reverse("(");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertEquals("(", string5);
      
      String string6 = StringUtils.left("@qK7b]Q0O ~Go_u
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      String string7 = StringUtils.rotate("(", 1);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals("(", string7);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNotBlank("dl-c(bu )+09f1Kk1");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, ')');
      assertNotNull(string1);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.split("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = "\\u";
      String string3 = StringUtils.substringBeforeLast(";sxj$sxL,", string2);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(";sxj$sxL,", string3);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("dl-c(bu )+09f1Kk1"));
      assertEquals(0, linkedList0.size());
      
      String string4 = StringUtils.overlay(";sxj$sxL,", "", (-2108), (-2108));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(";sxj$sxL,", string4);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "dl-c(bu )+09f1Kk1", (String) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.unwrap("fCn`b", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("fCn`b", string5);
      
      String string6 = StringUtils.replaceOnce("1<KYNIS7_", "6KZ.<", "");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("1<KYNIS7_", string6);
      
      boolean boolean2 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("[wl");
      assertNotNull(string0);
      assertEquals("[wl", string0);
      
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("[wl", "[wl");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      float[] floatArray0 = new float[8];
      String string2 = StringUtils.stripToNull("\n");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "[wl", (CharSequence) "Threshold must not be negative");
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Threshold must not be negative", "\n");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean1 = StringUtils.isNumeric("[wl");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      String string3 = StringUtils.trimToEmpty("\n");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("dl-c(bu )+09f1Kk1");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, ')');
      assertNotNull(string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.substringBeforeLast("dl-c(bu )+09f1Kk1", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("dl-c(bu )+09f1Kk1", string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Integer integer0 = new Integer(744);
      assertNotNull(integer0);
      assertEquals(744, (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      String string2 = StringUtils.join(integerArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, integerArray0.length);
      assertEquals("", string2);
      
      boolean boolean2 = StringUtils.isNumericSpace("");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = StringUtils.substringBefore("`Xlr<_Z`I=W/1", "LRh");
      assertNotNull(string0);
      assertEquals("`Xlr<_Z`I=W/1", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "`Xlr<_Z`I=W/1";
      stringArray0[1] = "LRh";
      stringArray0[2] = "LRh";
      stringArray0[3] = "LRh";
      stringArray0[4] = "`Xlr<_Z`I=W/1";
      stringArray0[6] = "`Xlr<_Z`I=W/1";
      stringArray0[2] = "org.apache.commons.lang3.ArrayUtils";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, stringArray0.length);
      assertEquals("", string1);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(464);
      assertNotNull(integer0);
      assertEquals(464, (int)integer0);
      
      integerArray0[0] = integer0;
      String string2 = StringUtils.join(integerArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, integerArray0.length);
      assertEquals("464", string2);
      
      boolean boolean0 = StringUtils.isNumericSpace("464");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Integer integer0 = new Integer((-1560));
      assertNotNull(integer0);
      assertEquals((-1560), (int)integer0);
      
      boolean boolean1 = hashSet0.add(integer0);
      assertTrue(hashSet0.contains(integer0));
      assertTrue(boolean1 == boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean1);
      
      Integer integer1 = new Integer(64);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(64, (int)integer1);
      
      boolean boolean2 = hashSet0.add(integer1);
      assertTrue(hashSet0.contains(integer0));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertTrue(boolean2);
      
      Integer integer2 = new Integer(10);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(10, (int)integer2);
      
      boolean boolean3 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string0 = StringUtils.join((Iterable<?>) hashSet0, '^');
      assertNotNull(string0);
      assertFalse(hashSet0.contains(10));
      assertTrue(hashSet0.contains(integer0));
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertEquals("64^-1560", string0);
      
      int int0 = 1408;
      Integer integer3 = new Integer(1408);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(1408, (int)integer3);
      
      boolean boolean4 = hashSet0.add(integer3);
      assertFalse(hashSet0.contains(10));
      assertTrue(hashSet0.contains(integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertTrue(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(3, hashSet0.size());
      assertTrue(boolean4);
      
      String string1 = StringUtils.remove("64^-1560", "64^-1560");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceEachRepeatedly("Strings must not be null", (String[]) null, (String[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Strings must not be null", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '', 22, 113);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean0 = arrayList0.add("PU");
      assertTrue(arrayList0.contains("PU"));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = arrayList0.add("', has a length less than 2', has a length less than 2");
      assertTrue(arrayList0.contains("', has a length less than 2', has a length less than 2"));
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean1);
      
      String string0 = StringUtils.removeStartIgnoreCase("PU", "PU");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean2 = arrayList0.add("");
      assertTrue(arrayList0.contains(""));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertTrue(boolean2);
      
      String string1 = StringUtils.join((Iterable<?>) arrayList0, ' ');
      assertNotNull(string1);
      assertTrue(arrayList0.contains("', has a length less than 2', has a length less than 2"));
      assertFalse(arrayList0.contains(string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertEquals("PU ', has a length less than 2', has a length less than 2 ", string1);
      
      String string2 = StringUtils.center("PU", (int) ' ', '!');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("!!!!!!!!!!!!!!!PU!!!!!!!!!!!!!!!", string2);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("7T.E| ");
      assertNotNull(string0);
      assertEquals("7T.E|", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("7T.E| ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.center((String) null, 114, "7T.E|");
      assertNull(string1);
      
      Vector<Object> vector0 = null;
      try {
        vector0 = new Vector<Object>((-1835), 114);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1835
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = StringUtils.removeFirst("clone", "clone");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compareIgnoreCase("", "", true);
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.left((String) null, (-2669));
      assertNull(string2);
      
      String string3 = StringUtils.removeFirst("The character ", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals("The character ", string3);
      
      String string4 = StringUtils.substringBetween("TB3+vjG?Xi", (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.chop((String) null);
      assertNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      String string6 = StringUtils.substringBetween("clone", (String) null, "T9");
      assertNull(string6);
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'G';
      doubleArray0[1] = (double) 'G';
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) (-2669);
      String string7 = StringUtils.join(doubleArray0, 'G');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertArrayEquals(new double[] {71.0, 71.0, 0.0, (-2669.0)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertEquals("71.0G71.0G0.0G-2669.0", string7);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "TB3+vjG?Xi";
      String string8 = StringUtils.replaceEachRepeatedly("chT#NV7-5|2", stringArray0, stringArray0);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertEquals(3, stringArray0.length);
      assertEquals("chT#NV7-5|2", string8);
      
      String string9 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string9);
      
      String string10 = StringUtils.substringBetween("\r", "The character ");
      assertNull(string10);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = StringUtils.remove("I/E#\"j]ae\"f`wU[[", "I/E#\"j]ae\"f`wU[[");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripStart("I/E#\"j]ae\"f`wU[[", "V=>WGN");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("I/E#\"j]ae\"f`wU[[", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("aF*I(:~", "PUdl-c(bu )+09f1K[FV%c-!1r|YFk9", "  M");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[17];
      charArray0[0] = '%';
      charArray0[1] = 'P';
      charArray0[2] = '*';
      charArray0[4] = '%';
      charArray0[5] = '%';
      String string2 = StringUtils.join(charArray0, '%');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(17, charArray0.length);
      assertEquals("%%P%*%\u0000%%%%%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000", string2);
      
      String[] stringArray1 = StringUtils.split("", '!');
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      String string3 = StringUtils.unwrap("Exception cloning Cloneable type ", "I/E#\"j]ae\"f`wU[[");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Exception cloning Cloneable type ", string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "aF*I(:~", charArray0);
      assertEquals(17, charArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = StringUtils.replace("comparator", "The character ", "^z", 9);
      assertNotNull(string0);
      assertEquals("comparator", string0);
      
      boolean boolean0 = StringUtils.endsWith("The character ", "comparator");
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize("comparator");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Comparator", string1);
      
      String string2 = StringUtils.wrap("comparator", '4');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("4comparator4", string2);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-1407L);
      longArray0[1] = (long) 9;
      longArray0[2] = (long) 9;
      longArray0[3] = 1L;
      longArray0[4] = (long) '4';
      longArray0[5] = (long) 9;
      longArray0[6] = (long) 9;
      longArray0[7] = (long) '4';
      String string3 = StringUtils.leftPad("Comparator", (int) '_');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("                                                                                     Comparator", string3);
      
      String string4 = StringUtils.normalizeSpace("Yy");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Yy", string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("comparator");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(250, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      CharBuffer charBuffer0 = StringUtils.getIfBlank((CharBuffer) null, (Supplier<CharBuffer>) null);
      assertNull(charBuffer0);
      
      String string5 = StringUtils.deleteWhitespace("The character ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Thecharacter", string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Bf,;IFP/XZ\"2peQn<", (CharSequence) "comparator", 9);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.trim("\r");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("org.apache.commons.lang3.RegExUtils", "org.apache.commons.lang3.RegExUtils", "org.apache.commons.lang3.RegExUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.RegExUtils", string0);
      
      char[] charArray0 = new char[1];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.RegExUtils", charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string1 = StringUtils.wrapIfMissing("", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      String string2 = StringUtils.toRootUpperCase("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ";z)\"Ev7_&n0rc", (CharSequence) "");
      assertEquals(0, int0);
      
      StringWriter stringWriter0 = new StringWriter(160);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      stringWriter0.write((-3474));
      assertEquals("\uF26E", stringWriter0.toString());
      
      // Undeclared exception!
      try { 
        stringWriter0.write(charArray0, 0, 9964);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[17];
      charSequenceArray0[3] = (CharSequence) "l";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(17, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 109;
      String string0 = StringUtils.wrapIfMissing("l", '!');
      assertNotNull(string0);
      assertEquals("!l!", string0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "l", charSequenceArray0[2], 160);
      assertEquals(17, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.center(" ", 160, '!');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", string2);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.rotate("", 3088);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string1 = StringUtils.replaceEachRepeatedly("", (String[]) null, stringArray0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals(2, stringArray0.length);
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.rightPad((String) null, 11);
      assertNull(string1);
      
      int int0 = StringUtils.compare("", "", true);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBetween("1", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastOrdinalIndexOf("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", 11);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(91, int2);
      
      boolean boolean2 = StringUtils.isWhitespace((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.trimToNull((String) null);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 91);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.trimToEmpty("...");
      assertNotNull(string4);
      assertEquals("...", string4);
      
      int int3 = StringUtils.compareIgnoreCase("...", "");
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(3, int3);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "...", 2262);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals((-1), int4);
      
      String[] stringArray1 = StringUtils.split("q2#V7Q7Et#v^v&=/");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      int int5 = StringUtils.lastIndexOf((CharSequence) "1", (CharSequence) "1");
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertTrue(int5 == int0);
      assertEquals(0, int5);
      
      boolean boolean3 = StringUtils.isMixedCase("");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string5 = StringUtils.getDigits("&C_9|S<f}teZ /i(M");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertEquals("9", string5);
      
      boolean boolean4 = StringUtils.isMixedCase("9");
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isAlphanumeric("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      
      String string6 = StringUtils.rotate("", 101);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", "", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'J';
      charArray0[1] = 'w';
      charArray0[2] = '(';
      charArray0[3] = 'j';
      charArray0[4] = 'i';
      charArray0[5] = 'j';
      charArray0[6] = '\'';
      charArray0[7] = '.';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(8, charBuffer0.capacity());
      assertEquals("Jw(jij'.", charBuffer0.toString());
      assertEquals(8, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(8, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertArrayEquals(new char[] {'J', 'w', '(', 'j', 'i', 'j', '\'', '.'}, charArray0);
      assertEquals(8, charArray0.length);
      
      Buffer buffer0 = charBuffer0.flip();
      assertNotNull(buffer0);
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, buffer0.limit());
      assertFalse(buffer0.hasRemaining());
      assertTrue(buffer0.hasArray());
      assertEquals(0, buffer0.remaining());
      assertEquals(8, buffer0.capacity());
      assertFalse(buffer0.isDirect());
      assertEquals(0, buffer0.arrayOffset());
      assertFalse(buffer0.isReadOnly());
      assertEquals(0, buffer0.position());
      assertArrayEquals(new char[] {'J', 'w', '(', 'j', 'i', 'j', '\'', '.'}, charArray0);
      assertEquals(8, charArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertArrayEquals(new char[] {'J', 'w', '(', 'j', 'i', 'j', '\'', '.'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.getDigits("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) charBuffer0;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) charBuffer0;
      charSequenceArray0[6] = (CharSequence) "";
      String string2 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(7, charSequenceArray0.length);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(" ").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) " ", supplier0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals(" ", charSequence0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", " ");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", " ", 278);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) " ");
      assertEquals(0, int0);
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", " ");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1);
      
      String string1 = "null/empty items";
      String string2 = StringUtils.chomp("null/empty items");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("null/empty items", string2);
      
      boolean boolean2 = StringUtils.isAlphaSpace("null/empty items");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Collection<String> collection0 = null;
      ArrayDeque<Object> arrayDeque0 = null;
      try {
        arrayDeque0 = new ArrayDeque<Object>((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "I{]";
      boolean boolean0 = StringUtils.containsNone((CharSequence) "I{]", "I{]");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("]hT95!St~v*=SD", "I{]", "I{]");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // I{]
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      
      String string0 = StringUtils.normalizeSpace("TB3+vjG?Xi");
      assertNotNull(string0);
      assertEquals("TB3+vjG?Xi", string0);
      
      String string1 = StringUtils.capitalize("rz");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Rz", string1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("org.apache.commons.lang3.RegExUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.RegExUtils", string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.RegExUtils", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string1 = StringUtils.wrapIfMissing("", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      String string2 = StringUtils.valueOf(charArray0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string2);
      
      String string3 = StringUtils.rightPad("", (-1691), "vs'jjAlUKKqc`_@");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", charSequenceArray0[2]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains(string1));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Vector<String> vector0 = new Vector<String>(hashSet0);
      assertNotNull(vector0);
      assertFalse(hashSet0.contains(string1));
      assertFalse(vector0.contains(string1));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      
      String string4 = StringUtils.join((Iterable<?>) vector0, '<');
      assertNotNull(string4);
      assertFalse(hashSet0.contains(string1));
      assertFalse(vector0.contains(string1));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("B6Rr+$gx");
      assertNotNull(string0);
      assertEquals("b6rr+$gx", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.ObjectUtils$Null", 'V');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAlphanumeric("org.apache.commons.lang3.ObjectUtils$Null");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare("T>I", "org.apache.commons.lang3.ObjectUtils", true);
      assertEquals((-27), int0);
      
      boolean boolean1 = StringUtils.isWhitespace(" _B");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)2438;
      shortArray0[1] = (short)96;
      String string1 = StringUtils.join(shortArray0, '^', (int) (short)96, 31);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new short[] {(short)2438, (short)96}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("org.apache.commons.lang3.ObjectUtils$Null", supplier0);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("org.apache.commons.lang3.ObjectUtils$Null", "org.apache.commons.lang3.ObjectUtils$Null", 55);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBefore("eur{N{Fec`*V1", "q`hzw9t~3{|g|");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("eur{N{Fec`*V1", string1);
      
      Vector<String> vector0 = new Vector<String>(1573, 2048);
      assertNotNull(vector0);
      assertFalse(vector0.contains("org.apache.commons.lang3.ObjectUtils$Null"));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(1573, vector0.capacity());
      
      boolean boolean0 = StringUtils.isNotBlank("org.apache.commons.lang3.ObjectUtils$Null");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "org.apache.commons.lang3.ObjectUtils$Null", "TO$17");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.unwrap("~6|6e\"On,k;9{I)", "q`hzw9t~3{|g|");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("~6|6e\"On,k;9{I)", string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)75;
      byteArray0[2] = (byte)3;
      byteArray0[3] = (byte) (-92);
      byteArray0[4] = (byte) (-9);
      String string3 = StringUtils.join(byteArray0, 'y');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)2, (byte)75, (byte)3, (byte) (-92), (byte) (-9)}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals("2y75y3y-92y-9", string3);
      
      String string4 = StringUtils.removePattern("2y75y3y-92y-9", "TO$17");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("2y75y3y-92y-9", string4);
      
      String string5 = StringUtils.wrap("!1)H0$7BA", "ComparatL,ComparatL,");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("ComparatL,ComparatL,!1)H0$7BAComparatL,ComparatL,", string5);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.ObjectUtils$Null", (CharSequence) "ComparatL,ComparatL,!1)H0$7BAComparatL,ComparatL,", (-910));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "HPBIFU^5t?M";
      boolean boolean0 = StringUtils.containsWhitespace("HPBIFU^5t?M");
      assertFalse(boolean0);
      
      String string1 = "";
      String string2 = StringUtils.stripStart("HPBIFU^5t?M", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("HPBIFU^5t?M", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "HPBIFU^5t?M", (CharSequence) "", (-741));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("org.apache.commons.lang3.ObjectUtils$Null", supplier0);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("org.apache.commons.lang3.ObjectUtils$Null", "org.apache.commons.lang3.ObjectUtils$Null", 55);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBefore("eur{N{Fec`*V1", "q`hzw9t~3{|g|");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("eur{N{Fec`*V1", string1);
      
      Vector<String> vector0 = new Vector<String>(1573, 2048);
      assertNotNull(vector0);
      assertFalse(vector0.contains("org.apache.commons.lang3.ObjectUtils$Null"));
      assertEquals(0, vector0.size());
      assertEquals(1573, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = StringUtils.isNotBlank("org.apache.commons.lang3.ObjectUtils$Null");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "org.apache.commons.lang3.ObjectUtils$Null", "TO$17");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.unwrap("~6|6e\"On,k;9{I)", "q`hzw9t~3{|g|");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("~6|6e\"On,k;9{I)", string2);
      
      int int1 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.StringUtils", "54\".54\".", true);
      assertFalse(int1 == int0);
      assertEquals(58, int1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = arrayList0.add(object0);
      assertTrue(arrayList0.contains(object0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, "");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.chomp("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfterLast("", 19);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "ZzN1P_d<bqZH7[!RSv>?5QH{L");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double double0 = StringUtils.getJaroWinklerDistance("7[tive", "");
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "", 19);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.join((Object[]) stringArray0, '=');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(0, stringArray0.length);
      assertSame(stringArray0, stringArray1);
      assertEquals("", string3);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "}A/Sl!O$17");
      assertNotNull(stringArray2);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray2.length);
      assertSame(stringArray0, stringArray2);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "7[tive", (CharSequence) "");
      assertEquals(6, int0);
      
      String string4 = StringUtils.replacePattern("ZzN1P_d<bqZH7[!RSv>?5QH{L", ",nc%y8!", "i,w&N");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("ZzN1P_d<bqZH7[!RSv>?5QH{L", string4);
      
      String string5 = StringUtils.stripToNull("ZzN1P_d<bqZH7[!RSv>?5QH{L");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("ZzN1P_d<bqZH7[!RSv>?5QH{L", string5);
      
      String string6 = StringUtils.stripAccents("Sx+tQ");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("Sx+tQ", string6);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.difference(")&D4MIN@J\"V.~\"Yq", ")&D4MIN@J\"V.~\"Yq");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWith(")&D4MIN@J\"V.~\"Yq", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      String string1 = StringUtils.join(booleanArray0, 'O');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals("falseOtrueOtrueOtrueOtrueOtrue", string1);
      
      String string2 = StringUtils.stripToNull("falseOtrueOtrueOtrueOtrueOtrue");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("falseOtrueOtrueOtrueOtrueOtrue", string2);
      
      String string3 = StringUtils.repeat("", 76);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "I{]", "");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string4 = StringUtils.unwrap("8w/h", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("8w/h", string4);
      
      short[] shortArray0 = new short[0];
      String string5 = StringUtils.join(shortArray0, '}');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals("", string5);
      
      String string6 = StringUtils.rightPad("", 76, '}');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}", string6);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) '}';
      doubleArray0[1] = (double) '}';
      doubleArray0[2] = 3475.457615282671;
      doubleArray0[3] = (double) 76;
      doubleArray0[4] = 1.5;
      String string7 = StringUtils.join(doubleArray0, 'O', 56, (-1356));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertArrayEquals(new double[] {125.0, 125.0, 3475.457615282671, 76.0, 1.5}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals("", string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string8 = StringUtils.join(booleanArray0, 'A');
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals("falseAtrueAtrueAtrueAtrueAtrue", string8);
      
      charSequenceArray0[0] = (CharSequence) "falseAtrueAtrueAtrueAtrueAtrue";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      // Undeclared exception!
      try { 
        ByteBuffer.wrap((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.left("The character ", 1);
      assertNotNull(string0);
      assertEquals("T", string0);
      
      String string1 = StringUtils.replace("T", "The character ", "T", 1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("T", string1);
      
      String string2 = StringUtils.rightPad("dl-c(bu )+09f1Kk1", 1, 'd');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("dl-c(bu )+09f1Kk1", string2);
      
      String string3 = StringUtils.deleteWhitespace("dl-c(bu )+09f1Kk1");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("dl-c(bu)+09f1Kk1", string3);
      
      String string4 = StringUtils.stripStart("T", "T");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      String string5 = StringUtils.valueOf(charArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertArrayEquals(new char[] {'\u0000', 'd', 'd'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("\u0000dd", string5);
      
      int int0 = StringUtils.lastOrdinalIndexOf("dl-c(bu )+09f1Kk1", "\u0000dd", 1);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "T", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', 'd', 'd'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1);
      
      boolean[] booleanArray0 = new boolean[0];
      String string6 = StringUtils.join(booleanArray0, 'd');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertEquals("", string6);
      
      String string7 = StringUtils.unwrap("os+=", "p2?B9uGd6Mj");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertEquals("os+=", string7);
      
      String string8 = StringUtils.substringAfterLast((String) null, (-1709));
      assertNull(string8);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        arrayList0.listIterator((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>(20, 771);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(20, vector0.capacity());
      assertEquals(0, vector0.size());
      
      String string0 = StringUtils.upperCase("]mB");
      assertNotNull(string0);
      assertEquals("]MB", string0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("]MB");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.replacePattern("]mB", "]MB", "Azns0&P{D2Y;izF");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]mB", string1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Lzu3`*^(] ");
      assertNotNull(string0);
      assertEquals("lzu3`*^(] ", string0);
      
      String string1 = StringUtils.substringBetween("z_a<{9no", "Lzu3`*^(] ", "Lzu3`*^(] ");
      assertNull(string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("z_a<{9no"));
      assertEquals(0, linkedList0.size());
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Lzu3`*^(] ", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      String string0 = StringUtils.left("The character ", 1);
      assertNotNull(string0);
      assertEquals("T", string0);
      
      String string1 = StringUtils.replace("T", "The character ", "T", 1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("T", string1);
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("dl-c(bu )+09f1Kk1", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((Object[]) null, "The character ", 127, 1);
      assertNull(string3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)52;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)28;
      byteArray0[8] = (byte)40;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      
      String string4 = StringUtils.toEncodedString(byteArray0, charset0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertArrayEquals(new byte[] {(byte)56, (byte)43, (byte)52, (byte)28, (byte)86, (byte)27, (byte) (-1), (byte)28, (byte)40}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertEquals("8+4\u001CV\u001B\uFFFD\u001C(", string4);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.right("54\".", 90);
      assertNotNull(string0);
      assertEquals("54\".", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("54\".");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "54\".";
      charSequenceArray0[1] = (CharSequence) "54\".";
      charSequenceArray0[2] = (CharSequence) "54\".";
      charSequenceArray0[3] = (CharSequence) "54\".";
      charSequenceArray0[4] = (CharSequence) "54\".";
      charSequenceArray0[5] = (CharSequence) "54\".";
      charSequenceArray0[6] = (CharSequence) "54\".";
      boolean boolean1 = StringUtils.endsWithAny("54\".", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.substring("Ca\"gdh .Giy", 90, 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.normalizeSpace("54\".");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("54\".", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.rightPad((String) null, 90, "");
      assertNull(string3);
      
      String string4 = StringUtils.trimToEmpty("org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string4);
      
      boolean boolean2 = StringUtils.isAllLowerCase(charSequenceArray0[0]);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean2);
      
      String string5 = StringUtils.substringAfter("54\".", 0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Array element ", "W!gMf/Iy(Q@");
      assertNotNull(string0);
      assertEquals("Array element ", string0);
      
      String string1 = StringUtils.substringAfter("ComparatL,ComparatL,", 34);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^r ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.left("Lzu`^r ", Integer.MAX_VALUE);
      assertNotNull(string0);
      assertEquals("Lzu`^r ", string0);
      
      String string1 = StringUtils.removeFirst("Lzu`^r ", "T~esG=");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Lzu`^r ", string1);
      
      String string2 = StringUtils.substringBetween("RpR(:sI(", "The character ");
      assertNull(string2);
      
      String string3 = StringUtils.chop((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.substringBetween((String) null, "", (String) null);
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "T~esG=";
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) Integer.MAX_VALUE;
      floatArray0[1] = (float) Integer.MAX_VALUE;
      floatArray0[2] = (float) Integer.MAX_VALUE;
      floatArray0[3] = (float) Integer.MAX_VALUE;
      String string5 = StringUtils.join(floatArray0, '\\', Integer.MAX_VALUE, 12);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertArrayEquals(new float[] {2.14748365E9F, 2.14748365E9F, 2.14748365E9F, 2.14748365E9F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals("", string5);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string6 = StringUtils.left("org.apache.commons.lang3.ObjectUtils", 0);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      Locale.setDefault(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      
      String string0 = StringUtils.abbreviate("both be null", "both be null", 127, 127);
      assertNotNull(string0);
      assertEquals("both be null", string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 127;
      floatArray0[1] = (float) 127;
      floatArray0[2] = (float) 127;
      floatArray0[3] = (float) 127;
      floatArray0[4] = (float) 127;
      String string1 = StringUtils.join(floatArray0, 'G');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new float[] {127.0F, 127.0F, 127.0F, 127.0F, 127.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals("127.0G127.0G127.0G127.0G127.0", string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "both be null", (CharSequence) "both be null");
      assertTrue(boolean0);
      
      String string2 = StringUtils.capitalize(";s~qOdEPsg7v=`6.4R");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(";s~qOdEPsg7v=`6.4R", string2);
      
      String string3 = StringUtils.left("...", (-960));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      int int0 = StringUtils.ordinalIndexOf(";s~qOdEPsg7v=`6.4R", "", 127);
      assertEquals(0, int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "...");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean1 = StringUtils.isNumeric("127.0G127.0G127.0G127.0G127.0");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.deleteWhitespace(";s~qOdEPsg7v=`6.4R");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals(";s~qOdEPsg7v=`6.4R", string4);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string3));
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((SortedSet<? extends String>) treeSet0);
      assertNotNull(priorityQueue0);
      assertFalse(treeSet0.contains(string3));
      assertFalse(priorityQueue0.contains(string3));
      assertEquals(0, priorityQueue0.size());
      
      String string5 = StringUtils.wrapIfMissing("127.0G127.0G127.0G127.0G127.0", 'G');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("G127.0G127.0G127.0G127.0G127.0G", string5);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      String string0 = StringUtils.join(booleanArray0, '$');
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, false, true, false, true, true}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertEquals("false$true$false$false$true$false$true$true", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "false$true$false$false$true$false$true$true", (CharSequence) "false$true$false$false$true$false$true$true");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.ordinalIndexOf("false$true$false$false$true$false$true$true", "false$true$false$false$true$false$true$true", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.repeat("p2?B9uGd6MjA&bE", 1846);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substring(string1, 1846);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.center(";sm", (-1), ";sm");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(";sm", string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("false$true$false$false$true$false$true$true");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(string1);
      assertTrue(boolean1 == boolean0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(boolean1);
      
      // Undeclared exception!
      StringUtils.swapCase(string1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("org.apache.commons.lang3.RegExUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.RegExUtils", string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.RegExUtils", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string1 = StringUtils.wrapIfMissing("", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      String string2 = StringUtils.lowerCase("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ";z)\"Ev7_&n0rc", (CharSequence) "");
      assertEquals(0, int0);
      
      StringWriter stringWriter0 = new StringWriter(160);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      // Undeclared exception!
      try { 
        stringWriter0.write(charArray0, 0, 9964);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertNotNull(string0);
      assertFalse(arrayList0.contains(""));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("T9}|z!^WhEnXQe", "ch");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("T9}|z!^WhEnXQe", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("'");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "'", 32);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, 'q');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("'", string2);
      
      String string3 = StringUtils.reverseDelimited("", 'q');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string4 = StringUtils.wrapIfMissing("O:Vs6zG(w*H\"Zm]b7<T", '?');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("?O:Vs6zG(w*H\"Zm]b7<T?", string4);
      
      String string5 = StringUtils.toRootLowerCase("'");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("'", string5);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "'", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[15];
      charArray0[0] = '.';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = '?';
      String string6 = StringUtils.join(stringArray0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals(1, stringArray0.length);
      assertEquals("'", string6);
      
      String string7 = StringUtils.replaceChars((String) null, "&+pXB?eC>ICBypyW,E", "x6/tRyP|Uk ;_\"");
      assertNull(string7);
      
      int int2 = StringUtils.indexOf((CharSequence) "'", (CharSequence) "'");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string0 = StringUtils.leftPad("", 0, "7[tive");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.CR;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("\r", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.chomp("Array and element cannot both be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Array and element cannot both be null", string2);
      
      String string3 = StringUtils.substringBefore("", 0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.substringAfterLast("Array and element cannot both be null", 19);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r", "ZzN1P_d<bqZH7[!RS}v(>?5QH{L");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      double double0 = StringUtils.getJaroWinklerDistance("7[tive", "");
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("\r", "\r", 19);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string5 = StringUtils.join((Object[]) stringArray0, '=');
      assertNotNull(string5);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals("\r", string5);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "}A/Sl!O$17");
      assertNotNull(stringArray2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      String string6 = StringUtils.substringBetween("", "");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "7[tive", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(6, int1);
      
      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) "7[tive");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.replacePattern("ZzN1P_d<bqZH7[!RS}v(>?5QH{L", ",nc%y8!", "i,w&N");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("ZzN1P_d<bqZH7[!RS}v(>?5QH{L", string7);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.upperCase("9(7-D5");
      assertNotNull(string0);
      assertEquals("9(7-D5", string0);
      
      charSequenceArray0[0] = (CharSequence) "9(7-D5";
      String string1 = StringUtils.substringBeforeLast(", '", "9(7-D5");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", '", string1);
      
      charSequenceArray0[1] = (CharSequence) ", '";
      String string2 = StringUtils.replaceIgnoreCase("", "...", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      charSequenceArray0[4] = (CharSequence) "";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("9(7-D5"));
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = linkedList0.offerLast(", '");
      assertFalse(linkedList0.contains("9(7-D5"));
      assertTrue(linkedList0.contains(", '"));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertFalse(linkedList0.contains("9(7-D5"));
      assertTrue(linkedList0.contains(", '"));
      assertEquals(1, linkedList0.size());
      
      String string3 = StringUtils.join(iterator0, ", '");
      assertNotNull(string3);
      assertFalse(linkedList0.contains("9(7-D5"));
      assertTrue(linkedList0.contains(", '"));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, linkedList0.size());
      assertEquals(", '", string3);
      
      String string4 = StringUtils.removeStart("", "Minimum abbreviation width with offset is %d");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "...", (char[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) ", '");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("...");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("aF*I(:~", "PUdl-c(bu )+09f1K[FV%c-!1r|YFk9", "  M");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[17];
      charArray0[0] = '%';
      charArray0[1] = 'P';
      charArray0[2] = '*';
      charArray0[4] = '%';
      String string0 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.of(locale_FilteringMode1, locale_FilteringMode2, locale_FilteringMode0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode0));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertEquals(3, enumSet1.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode0);
      assertNotSame(enumSet1, enumSet0);
      
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean0 = enumSet1.add(locale_FilteringMode3);
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode3));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode3.equals((Object)locale_FilteringMode0));
      assertEquals(4, enumSet1.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode3);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode3);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode3);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode3, locale_FilteringMode0);
      assertTrue(boolean0);
      
      boolean boolean1 = enumSet0.add(locale_FilteringMode1);
      assertFalse(enumSet0.contains(locale_FilteringMode3));
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode3));
      assertTrue(boolean1 == boolean0);
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode3);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode3);
      assertTrue(boolean1);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet1.iterator();
      assertNotNull(iterator0);
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode3));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertEquals(4, enumSet1.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode3);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode3);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode3);
      assertNotSame(enumSet1, enumSet0);
      
      String string1 = StringUtils.join(iterator0, (String) null);
      assertNotNull(string1);
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      assertFalse(string1.equals((Object)string0));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode3));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode0));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode3));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertEquals(4, enumSet1.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode3);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode3);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode3);
      assertNotSame(enumSet1, enumSet0);
      assertEquals("AUTOSELECT_FILTERINGIGNORE_EXTENDED_RANGESMAP_EXTENDED_RANGESREJECT_EXTENDED_RANGES", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "aF*I(:~", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.replaceChars("AZ9N_P.mV]Qk%?", 's', 's');
      assertNotNull(string0);
      assertEquals("AZ9N_P.mV]Qk%?", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("AZ9N_P.mV]Qk%?");
      assertNotNull(intArray0);
      assertEquals(14, intArray0.length);
      
      String string1 = StringUtils.rotate("AZ9N_P.mV]Qk%?", 0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("AZ9N_P.mV]Qk%?", string1);
      
      String string2 = StringUtils.defaultString("AZ9N_P.mV]Qk%?", (String) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("AZ9N_P.mV]Qk%?", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "AZ9N_P.mV]Qk%?", 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.difference(", :", "Ep5sc`&d>a");
      assertNotNull(string0);
      assertEquals("Ep5sc`&d>a", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)5;
      byteArray0[4] = (byte)0;
      String string1 = StringUtils.toString(byteArray0, (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)5, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals("\u0000\u0000\u0005\u0000\u0000", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) ", :", (CharSequence) "Ep5sc`&d>a");
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string2 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string2);
      
      String string3 = StringUtils.rotate("Pp]{Xn%%xhL2", (byte)0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Pp]{Xn%%xhL2", string3);
      
      String string4 = StringUtils.removeFirst("......", "\r");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("......", string4);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string0 = StringUtils.join(iterator0, ':');
      assertNotNull(string0);
      assertFalse(arrayDeque0.contains(':'));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceChars("", "", "Object varargs must not be null");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.stripStart("]b7<T", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("]b7<T", string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("Array element ", "eLp}3ht2\u0011@", "Array element ");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringBetween("9~pfjH{X", "Object varargs must not be null", "9~pfjH{X");
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast("{u[_x/]", "#\"%zy\"");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.CharSequenceUtils", (CharSequence) "eLp}3ht2\u0011@");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.substringBetween("7T.E|lr7%B|", "");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      
      int int2 = StringUtils.compare("{u[_x/]", " ", false);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(91, int2);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      String string0 = locale0.getScript();
      assertNotNull(string0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", string0);
      
      String string1 = StringUtils.upperCase("offset cannot be negative", locale0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("OFFSET CANNOT BE NEGATIVE", string1);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "OFFSET CANNOT BE NEGATIVE", (CharSequence) "offset cannot be negative", (-703));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("OFFSET CANNOT BE NEGATIVE");
      assertFalse(boolean0);
      
      String string2 = StringUtils.center("OFFSET CANNOT BE NEGATIVE", (-1), "OFFSET CANNOT BE NEGATIVE");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("OFFSET CANNOT BE NEGATIVE", string2);
      
      String string3 = StringUtils.substring("OFFSET CANNOT BE NEGATIVE", (-1));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("E", string3);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "E", (-703));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = " 0qt0Q!Qq$wIw3";
      stringArray0[1] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int2 = StringUtils.countMatches((CharSequence) "OFFSET CANNOT BE NEGATIVE", (CharSequence) "");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string2));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(string2));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      assertFalse(arrayList0.contains(string2));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string4 = StringUtils.join((Iterator<?>) listIterator0, "dl-c(bu )+09f1Kk1");
      assertNotNull(string4);
      assertFalse(arrayList0.contains(string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("", string4);
      
      String string5 = StringUtils.lowerCase("ch");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("ch", string5);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.replace("bwoFQ#T6t(7qG@F0", "bwoFQ#T6t(7qG@F0", "bwoFQ#T6t(7qG@F0");
      assertNotNull(string0);
      assertEquals("bwoFQ#T6t(7qG@F0", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("bwoFQ#T6t(7qG@F0", (String) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("bwoFQ#T6t(7qG@F0", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "bwoFQ#T6t(7qG@F0", 32, 32);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.center("'", 32, "bwoFQ#T6t(7qG@F0");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("bwoFQ#T6t(7qG@F'bwoFQ#T6t(7qG@F0", string2);
      
      Vector<Object> vector0 = null;
      try {
        vector0 = new Vector<Object>((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.replace("bwoFQ#T6t(7qG@F0", "bwoFQ#T6t(7qG@F0", "bwoFQ#T6t(7qG@F0");
      assertNotNull(string0);
      assertEquals("bwoFQ#T6t(7qG@F0", string0);
      
      String string1 = null;
      String string2 = StringUtils.substringAfter("bwoFQ#T6t(7qG@F0", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("", (String) null);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "bwoFQ#T6t(7qG@F0", 32, 108);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.center("'", 32, "bwoFQ#T6t(7qG@F0");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("bwoFQ#T6t(7qG@F'bwoFQ#T6t(7qG@F0", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      Vector<Object> vector0 = null;
      try {
        vector0 = new Vector<Object>((-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("[wl");
      assertNotNull(string0);
      assertEquals("[wl", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "[wl", (CharSequence) "[wl");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("[wl", charSequence0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("[wl", "[wl");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      float[] floatArray0 = new float[8];
      String string1 = StringUtils.stripToNull("[wl");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      assertEquals("[wl", string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "[wl", (CharSequence) "Threshold must not be negative");
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Threshold must not be negative", "[wl");
      assertEquals(0.46, double0, 0.01);
      
      boolean boolean1 = StringUtils.isNumeric("[wl");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      String string2 = StringUtils.trimToEmpty("[wl");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)charSequence0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("[wl", string2);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = 'C';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'{', 'C'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Integer integer0 = new Integer(10);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      boolean boolean1 = hashSet0.add(integer0);
      assertTrue(hashSet0.contains(10));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(boolean1);
      
      String string0 = StringUtils.join((Iterable<?>) hashSet0, '^');
      assertNotNull(string0);
      assertTrue(hashSet0.contains(10));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals("10", string0);
      
      Integer integer1 = new Integer(1408);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1408, (int)integer1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "jDTjDT", 1408);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("10");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "q2#V7Q7Et#v^v&=/", (CharSequence) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean2 = StringUtils.isMixedCase("10");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = StringUtils.getDigits("ZN7>");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7", string1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Array element ", "W!gMf/Iy(Q@");
      assertNotNull(string0);
      assertEquals("Array element ", string0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 34;
      longArray0[1] = 0L;
      longArray0[2] = (long) 34;
      longArray0[3] = (long) 4591;
      longArray0[4] = (long) 34;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, ';', 34, 4591);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 34
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>(20, 771);
      assertNotNull(vector0);
      assertEquals(20, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.unwrap("Azns0&P{D2Y;izF", "[a7]@(");
      assertNotNull(string0);
      assertEquals("Azns0&P{D2Y;izF", string0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 771;
      floatArray0[1] = (float) 20;
      floatArray0[2] = (float) 771;
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, "}A/Sl!O$17");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 0L;
      longArray0[1] = (long) 771;
      longArray0[2] = (long) 20;
      longArray0[3] = (long) 771;
      longArray0[4] = (long) ';';
      longArray0[5] = (long) 4591;
      longArray0[6] = (long) ';';
      longArray0[7] = (long) 20;
      longArray0[8] = (long) ';';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, ';', 44, 2063);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 44
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.difference(")&D4MIN@J\"V.~\"Yq", ")&D4MIN@J\"V.~\"Yq");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("X!]DI~e[W|v SHCf$$0", supplier0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("X!]DI~e[W|v SHCf$$0", string1);
      
      String string2 = StringUtils.wrap(")&D4MIN@J\"V.~\"Yq", ',');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(",)&D4MIN@J\"V.~\"Yq,", string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-11);
      byteArray0[0] = (byte)9;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)101;
      String string3 = StringUtils.join(byteArray0, ',');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)9, (byte) (-5), (byte) (-11), (byte)0, (byte)81, (byte) (-118), (byte)101}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("9,-5,-11,0,81,-118,101", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("9,-5,-11,0,81,-118,101", "", "X!]DI~e[W|v SHCf$$0");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("9,-5,-11,0,81,-118,101", string4);
      
      boolean boolean1 = StringUtils.endsWith("9,-5,-11,0,81,-118,101", "9,-5,-11,0,81,-118,101");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("}R1AMjL", "9,-5,-11,0,81,-118,101", "}R1AMjL");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("}R1AMjL", string5);
      
      String[] stringArray0 = StringUtils.split(" in an array of ", "9,-5,-11,0,81,-118,101", 256);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = StringUtils.isWhitespace("}R1AMjL");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string6 = StringUtils.mid("9,-5,-11,0,81,-118,101", (byte) (-11), (byte)9);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("9,-5,-11,", string6);
      
      int int0 = StringUtils.lastIndexOfAny("}R1AMjL", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("wb\"?/wl");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string7 = StringUtils.join((Object[]) stringArray0, 'w');
      assertNotNull(string7);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(" in an array of ", string7);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "SINCGMGhM#(t5_,:nt{";
      char char0 = ')';
      String string1 = StringUtils.center("SINCGMGhM#(t5_,:nt{", 1202, ')');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) string1;
      String string2 = "offset cannot be negative";
      String string3 = StringUtils.chomp("offset cannot be negative", "offset cannot be negative");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) string1;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "SINCGMGhM#(t5_,:nt{";
      charSequenceArray0[6] = (CharSequence) string1;
      String string4 = StringUtils.appendIfMissingIgnoreCase("", "SINCGMGhM#(t5_,:nt{", charSequenceArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals(7, charSequenceArray0.length);
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.isEmpty(charSequenceArray0[0]);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertFalse(stack0.contains("offset cannot be negative"));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      // Undeclared exception!
      try { 
        stack0.pop();
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertNotNull(string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("cor\u00E9en", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "cor\u00E9en";
      charSequenceArray0[2] = (CharSequence) "cor\u00E9en";
      charSequenceArray0[3] = (CharSequence) "cor\u00E9en";
      boolean boolean0 = StringUtils.equalsAny("cor\u00E9en", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "cor\u00E9en", charSequenceArray0[2], 1664);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string0 = StringUtils.join(booleanArray0, '0', 648, 0);
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals("", string0);
      
      int int0 = StringUtils.compare("", "HPBIFU^5t?M");
      assertEquals((-11), int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("HPBIFU^5t?M");
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("", (int) '0');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                                                ", string1);
      
      String string2 = StringUtils.stripStart("HPBIFU^5t?M", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("HPBIFU^5t?M", string2);
      
      String string3 = StringUtils.rotate("                                                ", (-1654));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("                                                ", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "                                                ";
      charSequenceArray0[1] = (CharSequence) "                                                ";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "                                                ";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "                                                ";
      charSequenceArray0[7] = (CharSequence) "HPBIFU^5t?M";
      boolean boolean1 = StringUtils.equalsAny("", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)81;
      String string0 = StringUtils.join(byteArray0, 'q');
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)74, (byte)0, (byte)81}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("74q0q81", string0);
      
      String string1 = StringUtils.trim("74q0q81");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("74q0q81", string1);
      
      String string2 = StringUtils.replaceOnce("Un", "mcSQ!-SQkf~.", "74q0q81");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Un", string2);
      
      String string3 = StringUtils.lowerCase("ad_u6UU_yr3<_!IW)");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("ad_u6uu_yr3<_!iw)", string3);
      
      String string4 = StringUtils.toRootUpperCase("org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("ORG.APACHE.COMMONS.LANG3.ARRAYUTILS", string4);
      
      String string5 = StringUtils.repeat("mcSQ!-SQkf~.", "ORG.APACHE.COMMONS.LANG3.ARRAYUTILS", (int) (byte)81);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.center("J5R~g mq60KZNLD@", 82, 'Z');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZJ5R~g mq60KZNLD@ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", string6);
      
      String string7 = StringUtils.lowerCase(string5);
      assertNotNull(string7);
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) string7, (CharSequence) "74q0q81");
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(" ").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) " ", supplier0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals(" ", charSequence0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(" ", " ");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", " ", 278);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) " ");
      assertEquals(0, int0);
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", " ");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.chomp("null/empty items");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("null/empty items", string1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("null/empty items");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = "\\u";
      String string3 = StringUtils.rightPad("null/empty items", 3929, string2);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) string3, (CharSequence) "null/empty items");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(int1 == int0);
      assertEquals(16, int1);
      
      int int2 = StringUtils.indexOf((CharSequence) string3, 1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.leftPad(" ", 278, " _B");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(" _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B  ", string4);
      
      String string5 = StringUtils.stripToNull(" _B");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("_B", string5);
      
      int int3 = StringUtils.indexOf((CharSequence) " _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B _B  ", 50);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      String string6 = StringUtils.replaceIgnoreCase("T9}|z!^WhEnXQe", "bw_xpio;Kwa ?h>L\"FQ", " _B", (-81));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertEquals("T9}|z!^WhEnXQe", string6);
      
      boolean boolean3 = StringUtils.isNumericSpace("T9}|z!^WhEnXQe");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      String string7 = StringUtils.join(floatArray0, 's', 50, 1);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string7);
      
      String string8 = StringUtils.replaceOnce((String) null, "The String must not be empty", (String) null);
      assertNull(string8);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      int int4 = StringUtils.indexOfAny((CharSequence) " ", charArray0);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertArrayEquals(new char[] {'s'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.left("The character ", 396);
      assertNotNull(string0);
      assertEquals("The character ", string0);
      
      String string1 = StringUtils.repeat("The character ", 396);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.remove((String) null, 'L');
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("8}eis5IQ)(:etB~lj", (String) null, 396);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.abbreviateMiddle((String) null, (String) null, 396);
      assertNull(string3);
      
      String[] stringArray2 = StringUtils.split("The character ");
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(2, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      String string4 = StringUtils.stripToNull("3,a!m$c0;");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("3,a!m$c0;", string4);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("The character ", "3,a!m$c0;", stringArray0);
      assertNotNull(string5);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals("The character 3,a!m$c0;", string5);
      
      String string6 = StringUtils.removeIgnoreCase("hould not be null.", ", Length: 0");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("hould not be null.", string6);
      
      String string7 = StringUtils.join((char[]) null, 'L', Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.join((char[]) null, 'j', (-2884), 160);
      assertNull(string0);
      
      String string1 = StringUtils.wrap(" vs ", '7');
      assertNotNull(string1);
      assertEquals("7 vs 7", string1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.wrap("", 'B');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[4] = '-';
      charArray0[5] = '-';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'B', 'B', 'B', '\u0000', '-', '-'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "dl-c(bu )+09f1Kk1";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean2 = StringUtils.containsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.split("dl-c(bu )+09f1Kk1", "org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "dl-c(bu )+09f1Kk1", (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertEquals(0, int0);
      
      String string2 = StringUtils.rightPad("", 1, "O:Vs6zG(w*H\"Zm");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[4], 9);
      assertFalse(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      
      // Undeclared exception!
      try { 
        charBuffer0.put(charArray0, (-1), 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      String string0 = StringUtils.replaceIgnoreCase("Nl&6N,.y`]E4L4b3O", (String) null, "Object varargs must not be null");
      assertNotNull(string0);
      assertEquals("Nl&6N,.y`]E4L4b3O", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("7[!RS}v(>?5QH{L", (CharSequence) null, charSequenceArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, charSequenceArray0.length);
      assertEquals("7[!RS}v(>?5QH{L", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Nl&6N,.y`]E4L4b3O", (CharSequence) "Nl&6N,.y`]E4L4b3O");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.removeStart("7[!RS}v(>?5QH{L", "ZzN1P_d<bqZH");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("7[!RS}v(>?5QH{L", string2);
      
      boolean boolean1 = StringUtils.isAllLowerCase("Object varargs must not be null");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.uncapitalize("G8");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("g8", string3);
      
      String string4 = StringUtils.chomp("Array and element cannot both be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Array and element cannot both be null", string4);
      
      int int1 = StringUtils.compare("(N{0aTC", (String) null, true);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string5 = StringUtils.chop("UZ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("U", string5);
      
      boolean boolean2 = StringUtils.isEmpty("Nl&6N,.y`]E4L4b3O");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "ZzN1P_d<bqZH", 561);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Nl&6N,.y`]E4L4b3O", "+7xJOgM", (-1));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int2 = StringUtils.countMatches((CharSequence) "Object varargs must not be null", (CharSequence) "Array and element cannot both be null");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "ZzN1P_d<bqZH", (CharSequence) "Nl&6N,.y`]E4L4b3O", 1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals((-1), int3);
      
      double[] doubleArray0 = new double[0];
      String string6 = StringUtils.join(doubleArray0, 'X');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '@', 39, 39);
      assertNotNull(string0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBefore("The String must not be emptyThe String must not be empty", "ch");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The String must not be emptyThe String must not be empty", string1);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The String must not be emptyThe String must not be empty";
      stringArray0[1] = "ch";
      stringArray0[2] = "ch";
      stringArray0[3] = "ch";
      stringArray0[4] = "The String must not be emptyThe String must not be empty";
      stringArray0[5] = "";
      stringArray0[6] = "The String must not be emptyThe String must not be empty";
      stringArray0[7] = "org.apache.commons.lang3.ArrayUtils";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(8, stringArray0.length);
      assertEquals("", string2);
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer(426);
      assertNotNull(integer0);
      assertEquals(426, (int)integer0);
      
      integerArray0[0] = integer0;
      String string3 = StringUtils.join(integerArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(1, integerArray0.length);
      assertEquals("426", string3);
      
      boolean boolean0 = StringUtils.isNumericSpace("426");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(" ").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) " ", supplier0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals(" ", charSequence0);
      
      boolean boolean0 = StringUtils.isAlpha(" ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", " ", 278);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase(" ", " ");
      assertEquals(0, int0);
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", " ");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.chomp("null/empty items");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("null/empty items", string1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("null/empty items");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = "\\u";
      String string3 = StringUtils.rightPad("null/empty items", 3929, string2);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) string3, (CharSequence) "null/empty items");
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(int1 == int0);
      assertEquals(16, int1);
      
      int int2 = StringUtils.indexOf((CharSequence) string3, 1);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.leftPad(" ", 278, " _..");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertEquals(" _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _..  ", string4);
      
      String string5 = StringUtils.stripToNull(" _..");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("_..", string5);
      
      int int3 = StringUtils.indexOf((CharSequence) " _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _.. _..  ", 50);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      String string6 = StringUtils.replaceIgnoreCase("T9}|z!^WhEnXQe", "bw_xpio;Kwa ?h>L\"FQ", " _..", (-81));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)charSequence0));
      assertEquals("T9}|z!^WhEnXQe", string6);
      
      boolean boolean3 = StringUtils.isNumericSpace("T9}|z!^WhEnXQe");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1;
      String string7 = StringUtils.join(floatArray0, 's', 50, 1);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)charSequence0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertArrayEquals(new float[] {1.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string7);
      
      String string8 = StringUtils.replaceOnce((String) null, "The String must not be empty", (String) null);
      assertNull(string8);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      int int4 = StringUtils.indexOfAny((CharSequence) " ", charArray0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertArrayEquals(new char[] {'s'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      String string0 = StringUtils.normalizeSpace("TB3+vjG?Xi");
      assertNotNull(string0);
      assertEquals("TB3+vjG?Xi", string0);
      
      String string1 = StringUtils.capitalize("Vz`</{C5");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Vz`</{C5", string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("TB3+vjG?Xi");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "^Sb\"er7Si";
      String string1 = StringUtils.stripEnd(" ", "^Sb\"er7Si");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = ' ';
      String string2 = StringUtils.left("Minimum abbreviation width is %d", ' ');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '@', (int) ' ', 160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = ' ';
      String string0 = StringUtils.valueOf(charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {' ', ' '}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("  ", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "  ", "  ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.unwrap("~WX+~", ".\"5-aJ^#rQW");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("~WX+~", string1);
      
      String string2 = StringUtils.trim("  ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ".\"5-aJ^#rQW", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("org.apache.commons.lang3.RegExUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.RegExUtils", string0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "org.apache.commons.lang3.RegExUtils", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string1 = StringUtils.wrapIfMissing("", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      String string2 = StringUtils.join((Object[]) charSequenceArray0, ";z)\"Ev7_&n0rc", (-682), (-682));
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(7, charSequenceArray0.length);
      assertEquals("", string2);
      
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ";z)\"Ev7_&n0rc", (CharSequence) "");
      assertEquals(0, int0);
      
      StringWriter stringWriter0 = new StringWriter(160);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      // Undeclared exception!
      try { 
        stringWriter0.write(charArray0, 0, 9964);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.left("The character ", 1);
      assertNotNull(string0);
      assertEquals("T", string0);
      
      String string1 = StringUtils.replace("T", "The character ", "T", 1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("T", string1);
      
      String string2 = StringUtils.rightPad("dl-c(bu )+09f1Kk1", 1, 'd');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("dl-c(bu )+09f1Kk1", string2);
      
      String string3 = StringUtils.deleteWhitespace("dl-c(bu )+09f1Kk1");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("dl-c(bu)+09f1Kk1", string3);
      
      String string4 = StringUtils.stripStart("T", "Cloneable type ");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("T", string4);
      
      boolean boolean0 = StringUtils.isBlank("T");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      String string5 = StringUtils.valueOf(charArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertArrayEquals(new char[] {'d', 'd', 'd'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("ddd", string5);
      
      int int0 = StringUtils.lastOrdinalIndexOf("dl-c(bu )+09f1Kk1", "ddd", 1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("[wl", "[wl", "Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Threshold must not be negative", (CharSequence) "Threshold must not be negative");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("Threshold must not be negative", charSequence0);
      
      int int0 = StringUtils.countMatches((CharSequence) "Threshold must not be negative", 'l');
      assertEquals(1, int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'l';
      floatArray0[1] = (float) 'l';
      floatArray0[2] = (float) 'l';
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 'l';
      floatArray0[4] = (float) 1;
      String string1 = StringUtils.join(floatArray0, 'J');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertArrayEquals(new float[] {108.0F, 108.0F, 108.0F, 1.0F, 1.0F, 108.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals("108.0J108.0J108.0J1.0J1.0J108.0J0.0J0.0", string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "[wl", (CharSequence) "Threshold must not be negative");
      assertFalse(boolean0);
      
      int int1 = StringUtils.ordinalIndexOf("[wl", "[wl", 1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = StringUtils.getJaroWinklerDistance("Threshold must not be negative", "Threshold must not be negative");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean1 = StringUtils.isNumeric("108.0J108.0J108.0J1.0J1.0J108.0J0.0J0.0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 108.0F;
      doubleArray0[1] = (double) 108.0F;
      doubleArray0[2] = (double) 1.0F;
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string2 = locale0.getExtension('A');
      assertNull(string2);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '1';
      doubleArray0[0] = (double) 'l';
      charArray0[2] = '1';
      charArray0[3] = 'A';
      charArray0[4] = '1';
      charArray0[5] = 'a';
      charArray0[6] = 'A';
      int int2 = StringUtils.indexOfAny((CharSequence) "Threshold must not be negative", charArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new char[] {'1', '\u0000', '1', 'A', '1', 'a', 'A'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(25, int2);
      
      String string3 = StringUtils.substring("108.0J108.0J108.0J1.0J1.0J108.0J0.0J0.0", 0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("108.0J108.0J108.0J1.0J1.0J108.0J0.0J0.0", string3);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.remove("I/E#\"j]ae\"f`wU[[", "I/E#\"j]ae\"f`wU[[");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripStart("I/E#\"j]ae\"f`wU[[", "V=>WGN");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("I/E#\"j]ae\"f`wU[[", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("aF*I(:~", "PUdl-c(bu )+09f1K[FV%c-!1r|YFk9", "  M");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[17];
      charArray0[0] = '%';
      charArray0[1] = 'P';
      charArray0[2] = '*';
      charArray0[4] = '%';
      charArray0[5] = '%';
      String string2 = StringUtils.join(charArray0, '%');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(17, charArray0.length);
      assertEquals("%%P%*%\u0000%%%%%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000", string2);
      
      String[] stringArray1 = StringUtils.split("", '!');
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      String string3 = StringUtils.unwrap("Exception cloning Cloneable type ", "I/E#\"j]ae\"f`wU[[");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Exception cloning Cloneable type ", string3);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray2);
      assertEquals(0, stringArray2.length);
      assertSame(stringArray2, stringArray1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "PUdl-c(bu )+09f1K[FV%c-!1r|YFk9");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.repeat("  b`{Q}D| `0M", 3);
      assertNotNull(string0);
      assertEquals("  b`{Q}D| `0M  b`{Q}D| `0M  b`{Q}D| `0M", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "P`;n*<s(r<@", "  b`{Q}D| `0M");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeIgnoreCase("  b`{Q}D| `0M", "n>/c(=");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("  b`{Q}D| `0M", string1);
      
      // Undeclared exception!
      StringUtils.leftPad("  b`{Q}D| `0M  b`{Q}D| `0M  b`{Q}D| `0M", 65536, '!');
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("k", (Locale) null);
      assertNotNull(string1);
      assertEquals("K", string1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      
      char[] charArray0 = new char[5];
      charArray0[1] = 'Z';
      String string2 = StringUtils.valueOf(charArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new char[] {'\u0000', 'Z', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("\u0000Z\u0000\u0000\u0000", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "\u0000Z\u0000\u0000\u0000", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.rightPad("\u0000Z\u0000\u0000\u0000", 1986, 'V');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\u0000Z\u0000\u0000\u0000", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', 'Z', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = StringUtils.strip("66i(''U8tN");
      assertNotNull(string0);
      assertEquals("66i(''U8tN", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[2];
      charArray0[1] = '$';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "66i(''U8tN", charArray0);
      assertArrayEquals(new char[] {'\u0000', '$'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "66i(''U8tN", (CharSequence) "66i(''U8tN");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("66i(''U8tN", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replace((String) null, "org.apache.commons.lang3.StringUtils", "n6wrAhZdc{#t~/>a\"D", 0);
      assertNull(string1);
      
      String string2 = StringUtils.replaceChars("", '$', '$');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int2 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "n6wrAhZdc{#t~/>a\"D");
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "66i(''U8tN");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("org.apache.commons.lang3.ObjectUtils$Null", supplier0);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("org.apache.commons.lang3.ObjectUtils$Null", "org.apache.commons.lang3.ObjectUtils$Null", 55);
      assertEquals((-1), int0);
      
      String string1 = "q`hzw9t~3{|g|";
      String string2 = StringUtils.substringBefore("eur{N{Fec`*V1", "q`hzw9t~3{|g|");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("eur{N{Fec`*V1", string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("q`hzw9t~3{|g|", "q`hzw9t~3{|g|", (CharSequence[]) null);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("q`hzw9t~3{|g|", string3);
      
      String string4 = "#";
      // Undeclared exception!
      try { 
        StringUtils.joinWith("Locale must not be null", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = StringUtils.substringBetween("                                                                              JJJJJJJJJ                                                                               [fj{:}+G8 ,b+7T", "                                                                              JJJJJJJJJ                                                                               [fj{:}+G8 ,b+7T");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("                                                                              JJJJJJJJJ                                                                               [fj{:}+G8 ,b+7T", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) " ", supplier0);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = 278;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", " ", 278);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      char[] charArray0 = new char[9];
      charArray0[0] = ':';
      charArray0[1] = 'f';
      charArray0[2] = ':';
      charArray0[3] = 'f';
      charArray0[4] = '3';
      charArray0[5] = '3';
      charArray0[6] = 'f';
      charArray0[7] = '3';
      charArray0[8] = '3';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {':', 'f', ':', 'f', '3', '3', 'f', '3', '3'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, (int) (byte)24);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string0 = StringUtils.join((Object[]) charSequenceArray0, 'q');
      assertNotNull(string0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("", string0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.wrapIfMissing("Exception cloning Cloneable type ", '3');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("3Exception cloning Cloneable type 3", string1);
      
      String string2 = StringUtils.toRootLowerCase("3Exception cloning Cloneable type 3");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("3exception cloning cloneable type 3", string2);
      
      boolean boolean3 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "Exception cloning Cloneable type ");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertArrayEquals(new char[] {':', 'f', ':', 'f', '3', '3', 'f', '3', '3'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals((-1), int3);
      
      String string3 = StringUtils.rightPad(", Length: ", (-1));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(", Length: ", string3);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = StringUtils.truncate((String) null, 3355, 44);
      assertNull(string0);
      
      String string1 = StringUtils.stripToNull("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string1);
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      
      String string2 = StringUtils.stripToEmpty("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("p{InCombiningDiacriticalMarks}+", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfAny(charSequenceArray0[4], charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Lzu3`*^(] ");
      assertNotNull(string0);
      assertEquals("lzu3`*^(] ", string0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, "lzu3`*^(] ");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.stripToEmpty("Lzu3`*^(] ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Lzu3`*^(]", string3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "Lzu3`*^(]");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.getDigits("o");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("7T.E|lr7%B|");
      assertNotNull(string0);
      assertEquals("7T.E|lr7%B|", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "7T.E|lr7%B|", (CharSequence) "7T.E|lr7%B|", 0);
      assertEquals(0, int0);
      
      Vector<String> vector0 = new Vector<String>(108, (-907));
      assertNotNull(vector0);
      assertFalse(vector0.contains("7T.E|lr7%B|"));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(108, vector0.capacity());
      assertEquals(0, vector0.size());
      
      String string1 = StringUtils.upperCase("7T.E|lr7%B|");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7T.E|LR7%B|", string1);
      
      boolean boolean0 = StringUtils.isNotBlank("7T.E|lr7%B|");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "7T.E|lr7%B|", "7T.E|lr7%B|");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertNotNull(string0);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("T9}|z!^WhEnXQe", "ch");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("T9}|z!^WhEnXQe", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("'");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "'", 32);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, 'q');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("'", string2);
      
      String string3 = StringUtils.reverseDelimited("", 'q');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string4 = StringUtils.wrapIfMissing("O:Vs6zG(w*H\"Zm]b7<T", '?');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("?O:Vs6zG(w*H\"Zm]b7<T?", string4);
      
      String string5 = StringUtils.toRootLowerCase("'");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertEquals("'", string5);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "'", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[15];
      charArray0[0] = '.';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = '?';
      charArray0[4] = '.';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "'", charArray0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(15, charArray0.length);
      assertEquals(0, int2);
      
      String string6 = StringUtils.rightPad((String) null, 0);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("...");
      assertNotNull(string0);
      assertEquals("...", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "...");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.normalizeSpace("rz");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("rz", string1);
      
      String string2 = StringUtils.rightPad("org.apache.commons.lang3.ArrayUtils", (-1), "w0(ZR4{Js@TB3+vjG?Xi");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int1 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.difference("rz", "66i(''U8tN}A/Sl!O$17LB:a$=0GA");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("66i(''U8tN}A/Sl!O$17LB:a$=0GA", string3);
      
      String string4 = StringUtils.swapCase("ttb8~B,8n_");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("TTB8~b,8N_", string4);
      
      String string5 = StringUtils.replaceOnce("...", "1aB=%88SOf/E2N8BF1f", (String) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("...", string5);
      
      String string6 = StringUtils.substringBetween("...", "...", "ttb8~B,8n_");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.repeat("The String must not be empty", 55);
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern("org.apache.commons.lang3.ObjectUtils", "org.apache.commons.lang3.ObjectUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains("The String must not be empty"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains("The String must not be empty"));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      String string2 = StringUtils.join(iterator0, '\\');
      assertNotNull(string2);
      assertFalse(arrayDeque0.contains('\\'));
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceChars("org.apache.commons.lang3.ObjectUtils", "]b7<T", "Object varargs must not be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ObjectUtils", string3);
      
      String string4 = StringUtils.stripStart("d@dj>1U{)tLw+>k'|", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.substringsBetween("", "9~pfjH{X", "54\".54\".");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "The String must not be empty", "org.apache.commons.lang3.ObjectUtils");
      assertEquals(1, int0);
      
      String string5 = StringUtils.substringBetween("T9", "T9", "Tyf:Rx.$$FlS!eoBw'");
      assertNull(string5);
      
      String string6 = StringUtils.substringAfterLast("xlNs'", "org.apache.commons.lang3.CharSequenceUtils");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "Tyf:Rx.$$FlS!eoBw'");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      int[] intArray0 = new int[7];
      String string0 = StringUtils.stripEnd("{S,p/'|i/,hq'vx;qv", "{S,p/'|i/,hq'vx;qv");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (-1309), 13);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.defaultIfBlank("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.rightPad("", (-1469), 'o');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = StringUtils.trimToNull("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      String string1 = StringUtils.leftPad(" E]>gT}+", 321, '\"');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEqualsgT}+", string1);
      
      String string2 = StringUtils.wrap("3", '\"');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\"3\"", string2);
      
      int int0 = StringUtils.compare("l", "org.apache.commons.lang3.StringUtils", true);
      assertEquals((-3), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequencegT}+";
      charSequenceArray0[1] = (CharSequence) "\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\" E]>gT}+";
      charSequenceArray0[2] = (CharSequence) "l";
      charSequenceArray0[3] = (CharSequence) "l";
      String string3 = StringUtils.stripToNull("org.apache.commons.lang3.StringUtils");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 109;
      intArray0[1] = (-3);
      intArray0[2] = 321;
      String string4 = StringUtils.join(intArray0, '!', 15, (-3018));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertArrayEquals(new int[] {109, (-3), 321}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("", string4);
      
      int int1 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.upperCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTILS", string5);
      
      String[] stringArray1 = StringUtils.split("\"3\"", "org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      try { 
        StringUtils.getBytes("{}{}", "{}{}");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("...", '3');
      assertNotNull(string0);
      assertEquals("3...3", string0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      String string1 = locale0.getExtension('a');
      assertNull(string1);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      short[] shortArray0 = new short[4];
      char[] charArray0 = new char[1];
      charArray0[0] = '1';
      int int0 = StringUtils.indexOfAny((CharSequence) "3...3", charArray0);
      assertArrayEquals(new char[] {'1'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "...";
      objectArray0[1] = (Object) set0;
      String string2 = StringUtils.join(objectArray0, '3');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, objectArray0.length);
      assertEquals("...3[]", string2);
      
      try { 
        StringUtils.getBytes("chTB3+vjG?Xi", "3...3");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Lzu3`*^(] ");
      assertNotNull(string0);
      assertEquals("lzu3`*^(] ", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Lzu3`*^(] ";
      stringArray0[1] = "lzu3`*^(] ";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("Lzu3`*^(] "));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, '-', 108, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(108) > toIndex(-2147483648)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.truncate("HScF%Ok~dHUT", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replace(" ", "HScF%Ok~dHUT", "`>*n0xkIk{M");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(" ", string2);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.truncate(" ", 0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("US", locale1.getCountry());
      assertEquals("en_US", locale1.toString());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      int int0 = StringUtils.getFuzzyDistance("HScF%Ok~dHUT", "Strings must not be null", locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertNotSame(locale0, locale1);
      assertEquals(2, int0);
      
      String string4 = StringUtils.substringBeforeLast((String) null, "");
      assertNull(string4);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = " ";
      String string5 = StringUtils.join(stringArray0);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals(1, stringArray0.length);
      assertEquals(" ", string5);
      
      int int1 = StringUtils.indexOf((CharSequence) " ", (CharSequence) "`>*n0xkIk{M");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) null, 2, 0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.indexOf((CharSequence) null, 0, 175);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = new String[4];
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      assertEquals(Locale.FilteringMode.EXTENDED_FILTERING, locale_FilteringMode0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringAfterLast(stringArray0[0], (-1));
      assertNull(string0);
      assertEquals(4, stringArray0.length);
      
      int int1 = StringUtils.countMatches((CharSequence) null, '-');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.wrap((String) null, '');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = StringUtils.wrap("", 'B');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.toRootUpperCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.repeat("[[", "", 1204);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfter("6N;]=|NfKmBiSJHn+ ", "tQq?mCG?m6>{J0+.~n");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.deleteWhitespace("UM!yO4%bNo|B");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("UM!yO4%bNo|B", string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "[[", (-226));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.trim("UM!yO4%bNo|B");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("UM!yO4%bNo|B", string5);
      
      String string6 = StringUtils.getDigits("");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Minimum abbreviation width is %d");
      assertNotNull(string0);
      assertEquals("Minimumabbreviationwidthis%d", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Minimumabbreviationwidthis%d", (CharSequence) "Minimum abbreviation width is %d", 0);
      assertEquals((-1), int0);
      
      String string1 = "eable type ";
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string3 = StringUtils.appendIfMissingIgnoreCase("eable type ", (CharSequence) null, charSequenceArray0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, charSequenceArray0.length);
      assertEquals("eable type ", string3);
      
      String string4 = StringUtils.replace("org.apache.commons.lang3.CharSequenceUtils", "org.apache.commons.lang3.RegExUtils", "Minimumabbreviationwidthis%d", 118);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string4);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "org.apache.commons.lang3.CharSequenceUtils", (CharSequence) "#");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '=';
      doubleArray0[1] = (double) '=';
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) '=';
      doubleArray0[4] = (double) (-633);
      doubleArray0[5] = (double) (-633);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 's', (-1661), 537);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1661
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 19;
      intArray0[1] = 54;
      intArray0[2] = 4;
      intArray0[3] = (-358);
      intArray0[4] = (-457);
      String string0 = StringUtils.uncapitalize("h!g");
      assertNotNull(string0);
      assertEquals("h!g", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "...", (CharSequence) "h!g");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      String string1 = StringUtils.abbreviate("...", "h!g", 13);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String string0 = StringUtils.strip("66i(''U8tN");
      assertNotNull(string0);
      assertEquals("66i(''U8tN", string0);
      
      char[] charArray0 = new char[8];
      charArray0[1] = '\u0000';
      charArray0[2] = 'E';
      charArray0[3] = '*';
      charArray0[4] = '-';
      charArray0[5] = 'v';
      String string1 = StringUtils.replaceChars((String) null, "x", "66i(''U8tN");
      assertNull(string1);
      
      String string2 = StringUtils.join((int[]) null, '+', Integer.MIN_VALUE, (-177));
      assertNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      int int0 = StringUtils.compare((String) null, "Array element ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      String string1 = StringUtils.join(booleanArray0, '-', Integer.MAX_VALUE, (-128));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray0));
      assertEquals(4, booleanArray0.length);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Lzu3`*^(] ");
      assertNotNull(string0);
      assertEquals("lzu3`*^(] ", string0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      String string1 = StringUtils.stripEnd("pOq,f", "'U8tN'U8tN _B");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("pOq,f", string1);
      
      String string2 = StringUtils.rightPad("XJ'X.Y(oJ/", 13);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("XJ'X.Y(oJ/   ", string2);
      
      String string3 = StringUtils.unwrap("", 'B');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, (String) null, (-2057));
      assertNull(stringArray0);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("Invalid locale format: ", "G9MLM", (CharSequence[]) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("G9MLMInvalid locale format: ", string4);
      
      String string5 = StringUtils.uncapitalize("Minimum abbreviation width is %d");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("minimum abbreviation width is %d", string5);
      
      String string6 = StringUtils.prependIfMissingIgnoreCase("XJ'X.Y(oJ/  ", "", (CharSequence[]) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("XJ'X.Y(oJ/  ", string6);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.rightPad((String) null, 11);
      assertNull(string1);
      
      int int0 = StringUtils.compare("", ",", true);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBetween("1", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.equals((CharSequence) ",", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastOrdinalIndexOf("Aborting to protect against StackOverflowError - output of one loop is the input of another", ",", 11);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean2 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.replaceIgnoreCase("", "`'T", "`'T");
      assertNotNull(string3);
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (-1));
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.trimToEmpty("...");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertEquals("...", string4);
      
      int int3 = StringUtils.compareIgnoreCase((String) null, "");
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "...", 2263);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals((-1), int4);
      
      String[] stringArray1 = StringUtils.split("q2#V7Q7Et#v^v&=/");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      int int5 = StringUtils.lastIndexOf((CharSequence) "1", (CharSequence) "1");
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertEquals(0, int5);
      
      boolean boolean3 = StringUtils.isMixedCase("");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string5 = StringUtils.getDigits("&C_9|S<f}teZ /i(M");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("9", string5);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Lzu3`*^(] ");
      assertNotNull(string0);
      assertEquals("lzu3`*^(] ", string0);
      
      String string1 = StringUtils.removePattern("Lzu3`*^(] ", "Strings must not be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Lzu3`*^(] ", string1);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains("Lzu3`*^(] "));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains("Lzu3`*^(] "));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      String string2 = StringUtils.join(iterator0, 'a');
      assertNotNull(string2);
      assertFalse(arrayDeque0.contains("Lzu3`*^(] "));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceChars("org.apache.commons.lang3.Charsetsorg.apache.commons.lang3.ObjectUtils", "org.apache.commons.lang3.Charsetsorg.apache.commons.lang3.ObjectUtils", "Lzu3`*^(] ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Lzu3`*`(] 3(LL3`u3]`z Lzu3`*`(] 3(LL3`u3 (", string3);
      
      String string4 = StringUtils.stripStart("#", "Supplied value must be a valid byte literal between -128 and 127: [");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("#", string4);
      
      String[] stringArray0 = StringUtils.substringsBetween("$yOgSG=&36O", "", "6,xZ9");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "Cannot clone Cloneable type ");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.substringBetween("Lzu3`*^(] ", "hould not be null.", ".6S1AK[W<M?x$vo:V");
      assertNull(string5);
      
      String string6 = StringUtils.substringAfterLast("mM8^P<{1W5'-K3}\"", "mM8^P<{1W5'-K3}\"");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      
      String string7 = StringUtils.join((String[]) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = StringUtils.stripToNull(", Length: ");
      assertNotNull(string0);
      assertEquals(", Length:", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "al*7#0(fh";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("al*7#0(fh", string1);
      
      String string2 = StringUtils.difference((String) null, "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.truncate("HScF%Ok~dHUT", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replace(" ", "HScF%Ok~dHUT", "`>*n0xkIk{M");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(" ", string2);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.truncate(" ", 0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("US", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      int int0 = StringUtils.getFuzzyDistance("HScF%Ok~dHUT", "Strings must not be null", locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertNotSame(locale0, locale1);
      assertEquals(2, int0);
      
      String string4 = StringUtils.substringBeforeLast((String) null, "");
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " ";
      int int1 = StringUtils.lastIndexOfAny("HScF%Ok~dHUT", charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.difference((String) null, (String) null);
      assertNull(string5);
      
      String string6 = StringUtils.swapCase(" ");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertEquals(" ", string6);
      
      String string7 = StringUtils.lowerCase((String) null);
      assertNull(string7);
      
      int int2 = StringUtils.indexOf((CharSequence) "", 52);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>(20, 771);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(20, vector0.capacity());
      assertEquals(0, vector0.size());
      
      String string0 = StringUtils.upperCase("]mB");
      assertNotNull(string0);
      assertEquals("]MB", string0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("]MB");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.wrap("Azns0&P{D2Y;izF", "]MB");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]MBAzns0&P{D2Y;izF]MB", string1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 771;
      floatArray0[1] = (float) 20;
      floatArray0[1] = (float) 771;
      floatArray0[4] = (float) 771;
      floatArray0[5] = (float) 20;
      floatArray0[6] = (float) 771;
      floatArray0[7] = (float) 771;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'x', 771, 2240);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 771
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>(20, 771);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(20, vector0.capacity());
      assertEquals(0, vector0.size());
      
      String string0 = StringUtils.upperCase("]mB");
      assertNotNull(string0);
      assertEquals("]MB", string0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("]MB");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.unwrap("Azns0&P{D2Y;izF", "[a7]@(");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Azns0&P{D2Y;izF", string1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 771;
      floatArray0[1] = (float) 20;
      floatArray0[2] = (float) 771;
      floatArray0[3] = (float) 771;
      floatArray0[4] = (float) 771;
      floatArray0[5] = (float) 771;
      floatArray0[6] = (float) 771;
      floatArray0[7] = (float) 771;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'x', 771, 2240);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 771
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      String string0 = StringUtils.valueOf(charArray0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'d', 'd', 'd'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("ddd", string0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = StringUtils.difference(")&D4MIN@J\"V.~\"Yq", ")&D4MIN@J\"V.~\"Yq");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("X!]DI~e[W|v SHCf$$0", supplier0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("X!]DI~e[W|v SHCf$$0", string1);
      
      String string2 = StringUtils.wrap(")&D4MIN@J\"V.~\"Yq", ',');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(",)&D4MIN@J\"V.~\"Yq,", string2);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("X!]DI~e[W|v SHCf$$0", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.ordinalIndexOf("X!]DI~e[W|v SHCf$$0", "X!]DI~e[W|v SHCf$$0", (byte)4);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replace("", "X!]DI~e[W|v SHCf$$0", (String) null, 240);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      boolean boolean2 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isMixedCase("");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string4 = StringUtils.mid("", (-1), Integer.MIN_VALUE);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.overlay(")&D4MIN@J\"V.~\"Yq", (String) null, 0, (-1113));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals(")&D4MIN@J\"V.~\"Yq", string5);
      
      String string6 = StringUtils.stripToEmpty("P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2T#NV7-5|2");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2P`;n*<s(r<@T#NV7-5|2T#NV7-5|2", string6);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      ByteBuffer byteBuffer0 = charset0.encode(")&D4MIN@J\"V.~\"Yq");
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(16, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=16 cap=17]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(17, byteBuffer0.capacity());
      assertEquals(16, byteBuffer0.remaining());
      
      // Undeclared exception!
      try { 
        ByteBuffer.wrap((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "dl-c(bu )+09f1Kk1", "e]br?,e%/uQT]");
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.split("e]br?,e%/uQT]", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = "\\u";
      String string2 = StringUtils.substringBeforeLast("&E2V6C", "dl-c(bu )+09f1Kk1");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("&E2V6C", string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase(";sxj$sxL,");
      assertFalse(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(";sxj$sxL,"));
      assertEquals(0, linkedList0.size());
      
      String string3 = StringUtils.overlay(string1, (String) null, (-2108), 1);
      assertNotNull(string3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("u", string3);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "e]br?,e%/uQT]", "O:M");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.unwrap("[wl", "&E2V6C");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("[wl", string4);
      
      String string5 = StringUtils.replaceOnce("O:M", "O:M", "[wl");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("[wl", string5);
      
      boolean boolean2 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^( ");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Lzu`^( ";
      objectArray0[3] = (Object) "The character ";
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)396;
      String string0 = StringUtils.join(shortArray0, '/');
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short)396}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("396", string0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("396");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.rightPad((String) null, 11);
      assertNull(string1);
      
      int int0 = StringUtils.compare("", "", true);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBetween("1", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastOrdinalIndexOf("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", 11);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(91, int2);
      
      boolean boolean2 = StringUtils.isWhitespace((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.replaceIgnoreCase("", "`'T", "`'T");
      assertNotNull(string3);
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 91);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.trimToEmpty("...");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertEquals("...", string4);
      
      int int3 = StringUtils.compareIgnoreCase((String) null, "");
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "...", 2262);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals((-1), int4);
      
      String[] stringArray1 = StringUtils.split("q2#V7Q7Et#v^v&=/");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      int int5 = StringUtils.lastIndexOf((CharSequence) "1", (CharSequence) "1");
      assertTrue(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertEquals(0, int5);
      
      boolean boolean3 = StringUtils.isMixedCase("");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string5 = StringUtils.getDigits("&C_9|S<f}teZ /i(M");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("9", string5);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.rightPad((String) null, 11);
      assertNull(string1);
      
      int int0 = StringUtils.compare("", "", true);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBetween("1", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastOrdinalIndexOf("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", 11);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(91, int2);
      
      boolean boolean2 = StringUtils.isWhitespace((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.trimToNull((String) null);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 91);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.trimToEmpty("...");
      assertNotNull(string4);
      assertEquals("...", string4);
      
      int int3 = StringUtils.compareIgnoreCase((String) null, "");
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "...", 2262);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals((-1), int4);
      
      String[] stringArray1 = StringUtils.split("q2#V7Q7Et#v^v&=/");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      int int5 = StringUtils.lastIndexOf((CharSequence) "1", (CharSequence) "1");
      assertFalse(int5 == int2);
      assertTrue(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertEquals(0, int5);
      
      boolean boolean3 = StringUtils.isMixedCase("");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string5 = StringUtils.getDigits("&C_9|S<f}teZ /i(M");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertEquals("9", string5);
      
      int int6 = StringUtils.indexOfAnyBut((CharSequence) "...", (CharSequence) "...");
      assertFalse(int6 == int0);
      assertTrue(int6 == int1);
      assertFalse(int6 == int5);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertFalse(int6 == int2);
      assertEquals((-1), int6);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^( ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.chop("Lzu`^( ");
      assertNotNull(string0);
      assertEquals("Lzu`^(", string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = '1';
      charArray0[2] = 'n';
      String string1 = StringUtils.stripStart("Iq", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Iq", string1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "Lzu`^(", false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, ')');
      assertNotNull(string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.substringBeforeLast(";sxj$sH@=Z 0", "ejxL,");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(";sxj$sH@=Z 0", string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      
      String string2 = StringUtils.unwrap("fCn`b", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("fCn`b", string2);
      
      String string3 = StringUtils.replaceOnce("1<KYNIS7_", "6KZ.<", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("1<KYNIS7_", string3);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase(";sxj$sH@=Z 0", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlpha("");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.strip("66i(''U8tN");
      assertNotNull(string0);
      assertEquals("66i(''U8tN", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[2];
      charArray0[0] = '5';
      charArray0[1] = '$';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "66i(''U8tN", charArray0);
      assertArrayEquals(new char[] {'5', '$'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "66i(''U8tN", (CharSequence) "66i(''U8tN");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("66i(''U8tN", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.replace((String) null, "org.apache.commons.lang3.StringUtils", "n6wrAhZdc{#t~/>a\"D", 0);
      assertNull(string1);
      
      String string2 = StringUtils.replaceChars("", '$', '$');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.swapCase("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNotNull(string0);
      assertEquals("sUPPLIED VALUE MUST BE A VALID BYTE LITERAL BETWEEN -32768 AND 32767: [", string0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.repeat("The String must not be empty", 55);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("...");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "...", (CharSequence) "...");
      assertEquals(0, int0);
      
      String string2 = StringUtils.normalizeSpace("org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string2);
      
      String string3 = StringUtils.rightPad("...", 0, string0);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("...", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.ArrayUtils";
      int int1 = StringUtils.lastIndexOfAny("The String must not be empty", charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.difference("66i(''U8tN", string0);
      assertNotNull(string4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.swapCase(" ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(" ", string5);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 10;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '=', 2, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("The String must no be empty");
      assertTrue(boolean0);
      
      String string0 = StringUtils.defaultString("The String must no be empty");
      assertNotNull(string0);
      assertEquals("The String must no be empty", string0);
      
      String string1 = StringUtils.rightPad("/ 4htd=", (-2025), 'e');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("/ 4htd=", string1);
      
      String string2 = StringUtils.substringBefore("/ 4htd=", "XH[XTLfs!xZ\"0");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("/ 4htd=", string2);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("org.apache.commons.lang3.ObjectUtils$Null", supplier0);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("org.apache.commons.lang3.ObjectUtils$Null", "org.apache.commons.lang3.ObjectUtils$Null", 55);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBefore("eur{N{Fec`*V1", "q`hzw9t~3{|g|");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("eur{N{Fec`*V1", string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("q`hzw9t~3{|g|", "q`hzw9t~3{|g|", (CharSequence[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("q`hzw9t~3{|g|", string2);
      
      String string3 = "Locale must not be null";
      String string4 = StringUtils.replace("#", "q`hzw9t~3{|g|", "Locale must not be null", 1);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("#", string4);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "eur{N{Fec`*V1", (CharSequence) "org.apache.commons.lang3.ObjectUtils$Null");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("#");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 55;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '=', (-633), 55);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -633
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", "", 1637);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "rt.%K7q9!Q";
      stringArray0[1] = "nTfhAgrf'w+k";
      stringArray0[2] = "NkI&sZy4e3rC";
      stringArray0[3] = "nTfhAgrf'w+k";
      String string1 = StringUtils.replaceChars("NkI&sZy4e3rC", "## K", "Qb>TXvyx/z`L0oH{Lk");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("NkI&sZy4e3rC", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (-888));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = StringUtils.difference(")&D4MIN@J\"V.~\"Yq", ")&D4MIN@J\"V.~\"Yq");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("X!]DI~e[W|v SHCf$$0", supplier0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("X!]DI~e[W|v SHCf$$0", string1);
      
      String string2 = StringUtils.wrap(")&D4MIN@J\"V.~\"Yq", ',');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(",)&D4MIN@J\"V.~\"Yq,", string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)101;
      String string3 = StringUtils.join(byteArray0, ',');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)4, (byte) (-5), (byte) (-11), (byte)9, (byte)81, (byte) (-118), (byte)101}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("4,-5,-11,9,81,-118,101", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("4,-5,-11,9,81,-118,101", "", "X!]DI~e[W|v SHCf$$0");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("4,-5,-11,9,81,-118,101", string4);
      
      boolean boolean1 = StringUtils.endsWith("4,-5,-11,9,81,-118,101", "4,-5,-11,9,81,-118,101");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("}R1AMjL", "4,-5,-11,9,81,-118,101", "}R1AMjL");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("}R1AMjL", string5);
      
      String[] stringArray0 = StringUtils.split(" in an array of ", "4,-5,-11,9,81,-118,101", 256);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = StringUtils.isWhitespace("}R1AMjL");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string6 = StringUtils.defaultIfEmpty("", "");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      int int0 = StringUtils.lastIndexOfAny("}R1AMjL", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string7);
      
      String string8 = StringUtils.toRootUpperCase("Jg?Hgxc=+t K1%t~");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertEquals("JG?HGXC=+T K1%T~", string8);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      String string0 = StringUtils.difference(")&D4MIN@J\"V.~\"Yq", ")&D4MIN@J\"V.~\"Yq");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWith(")&D4MIN@J\"V.~\"Yq", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      String string1 = StringUtils.join(booleanArray0, 'O');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals("falseOtrueOtrueOtrueOtrueOtrue", string1);
      
      String string2 = StringUtils.stripToNull("falseOtrueOtrueOtrueOtrueOtrue");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("falseOtrueOtrueOtrueOtrueOtrue", string2);
      
      String string3 = StringUtils.repeat("", 76);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "I{]", "");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string4 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.replace("org.apache.commons.lang3.CharSequenceUtils", ", Length: ", "T9}|z!^WhEnXQe");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string5);
      
      Integer[] integerArray0 = new Integer[0];
      String string6 = StringUtils.join(integerArray0);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertEquals(0, integerArray0.length);
      assertEquals("", string6);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "(`k[FV%c-!1r|YFk9", "  b`{Q}D| `0M");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      String string7 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string7);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.substring("AZ9N_P.mrV]Qk%?", 542);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceChars("AZ9N_P.mrV]Qk%?", 's', 's');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("AZ9N_P.mrV]Qk%?", string1);
      
      int[] intArray0 = StringUtils.toCodePoints("AZ9N_P.mrV]Qk%?");
      assertNotNull(intArray0);
      assertEquals(15, intArray0.length);
      
      String string2 = StringUtils.rightPad("", (-4448));
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.unwrap("", 'C');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(", Length: 0", "AZ9N_P.mrV]Qk%?", (-2369));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.repeat("I{]", 1876);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad("]hT95!SBt~vJ*=SD", 520);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]hT95!SBt~vstring1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string2 = StringUtils.join((boolean[]) null, 'f');
      assertNull(string2);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) string0;
      charSequenceArray0[2] = (CharSequence) "]hT95!SBt~v
      charSequenceArray0[3] = (CharSequence) string0;
      charSequenceArray0[4] = (CharSequence) string0;
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) charSequenceArray0[2];
      objectArray0[1] = (Object) "]hT95!SBt~v
      objectArray0[2] = (Object) "]hT95!SBt~vJ*=SD";
      objectArray0[3] = (Object) string0;
      objectArray0[4] = (Object) string0;
      String string3 = StringUtils.join(objectArray0, 'G', 2234, 1876);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(5, objectArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.trim("Comparator should not be null.dl-c(bu )+09f1Kk1");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Comparator should not be null.dl-c(bu )+09f1Kk1", string4);
      
      int int0 = StringUtils.compare("...", "Comparator should not be null.dl-c(bu )+09f1Kk1");
      assertEquals((-21), int0);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string5 = StringUtils.strip("t>&9HR<6hx@");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("t>&9HR<6hx@", string5);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = StringUtils.difference(")&D4MIN@J\"V.~\"Yq", ")&D4MIN@J\"V.~\"Yq");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWith(")&D4MIN@J\"V.~\"Yq", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      String string1 = StringUtils.join(booleanArray0, 'O');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals("falseOtrueOtrueOtrueOtrueOtrue", string1);
      
      String string2 = StringUtils.stripToNull("falseOtrueOtrueOtrueOtrueOtrue");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("falseOtrueOtrueOtrueOtrueOtrue", string2);
      
      String string3 = StringUtils.repeat("", 76);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "I{]", "");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string4 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.replace("org.apache.commons.lang3.CharSequenceUtils", ", Length: ", "T9}|z!^WhEnXQe");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string5);
      
      Integer[] integerArray0 = new Integer[0];
      String string6 = StringUtils.join(integerArray0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertEquals(0, integerArray0.length);
      assertEquals("", string6);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "(`k[FV%c-!1r|YFk9", "  b`{Q}D| `0M");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string7 = StringUtils.substringBeforeLast("GIzU/]Se4I\"50ZvT", "I{]");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertEquals("GIzU/]Se4I\"50ZvT", string7);
      
      String string8 = StringUtils.substringAfterLast((String) null, "{}{}");
      assertNull(string8);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "GIzU/]Se4I\"50ZvT", "  b`{Q}D| `0M");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string9 = StringUtils.substringBefore("d8 %iVSc%nN7},6_(u0", (String) null);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertEquals("d8 %iVSc%nN7},6_(u0", string9);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.mid("c+{)LDaykx", Integer.MIN_VALUE, 11);
      assertNotNull(string0);
      assertEquals("c+{)LDaykx", string0);
      
      String string1 = StringUtils.join((float[]) null, 'y', 11, 407);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.removeFirst("clone", "clone");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compareIgnoreCase("", "", true);
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.left((String) null, (-2669));
      assertNull(string2);
      
      String string3 = StringUtils.removeFirst("The character ", "clone");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals("The character ", string3);
      
      String string4 = StringUtils.substringBetween("TB3+vjG?Xi", (String) null);
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[1] = (CharSequence) "The character ";
      String string5 = StringUtils.substringBetween("clone", (String) null, "");
      assertNull(string5);
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string6 = StringUtils.left("ch", (-2669));
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      
      String string7 = StringUtils.substringAfterLast("ch", (-2669));
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      
      String string8 = StringUtils.repeat(',', (-2669));
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertEquals("", string8);
      
      String string9 = StringUtils.capitalize("Strings must not be null");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertEquals("Strings must not be null", string9);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "Strings must not be null", (String) null);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string10 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string0));
      assertEquals("", string10);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.substringBeforeLast("}A/Sl!O$17", (String) null);
      assertNotNull(string0);
      assertEquals("}A/Sl!O$17", string0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "ch", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.strip("...", "...");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.substringBeforeLast("...", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      
      charSequenceArray0[1] = (CharSequence) "...";
      String string2 = StringUtils.replaceIgnoreCase("", "..", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      charSequenceArray0[4] = (CharSequence) "";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("..", charSequenceArray0[5], charSequenceArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(6, charSequenceArray0.length);
      assertEquals("..", string3);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[4], (CharSequence) "");
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("...");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.uncapitalize((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.removeFirst("..", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("..", string5);
      
      int int1 = StringUtils.compare((String) null, "", true);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.remove("...", "");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("...", string6);
      
      boolean boolean2 = StringUtils.isAllUpperCase("");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.contains(charSequenceArray0[1], (-1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("?", "...", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertEquals((-1), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.truncate("HScF%Ok~dHUT", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replace(" ", "HScF%Ok~dHUT", "`>*n0xkIk{M");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(" ", string2);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.truncate(" ", 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en_US", locale1.toString());
      assertEquals("US", locale1.getCountry());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      int int0 = StringUtils.getFuzzyDistance("HScF%Ok~dHUT", "Strings must not be null", locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertNotSame(locale0, locale1);
      assertEquals(2, int0);
      
      String string4 = StringUtils.substringBeforeLast((String) null, "");
      assertNull(string4);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, 't', 0, 617);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 617
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("66i(''U8tN}A/Sl!O$17LB:a$=0GA", "66i(''U8tN}A/Sl!O$17LB:a$=0GA", "TB3+vjG?Xiw0(ZR4{Js@");
      assertNotNull(string0);
      assertEquals("TB3+vjG?Xiw0(ZR4{Js@", string0);
      
      int int0 = 116;
      int int1 = (-1584);
      // Undeclared exception!
      try { 
        StringUtils.truncate("TB3+vjG?Xiw0(ZR4{Js@", 116, (-1584));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "54\".54\".");
      assertNotNull(string0);
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfterLast("UoVFR)l;$5C=hV]J", 59);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$5C=hV]J", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("h!g", "54\".54\".");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("h!g", string2);
      
      String string3 = StringUtils.reverseDelimited("sM!pXyc\"UDLI%_UrU", '6');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("sM!pXyc\"UDLI%_UrU", string3);
      
      int int0 = StringUtils.compare("maxWith cannot be negative", "h!g", false);
      assertEquals(5, int0);
      
      String string4 = StringUtils.substringAfter("', is neither of type Map.Entry nor an Array", "maxWith cannot be negative");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.removeFirst("clone", "clone");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compareIgnoreCase("", "", true);
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.left((String) null, (-2669));
      assertNull(string2);
      
      String string3 = StringUtils.removeFirst("The character ", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals("The character ", string3);
      
      String string4 = StringUtils.substringBetween("TB3+vjG?Xi", (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.chop((String) null);
      assertNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      String string6 = StringUtils.substringBetween("clone", (String) null, "");
      assertNull(string6);
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string7 = StringUtils.left("ch", (-2669));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
      
      String string8 = StringUtils.substringAfterLast("ch", (-2669));
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 518;
      floatArray0[1] = (float) 518;
      floatArray0[2] = (float) '0';
      String string0 = StringUtils.join(floatArray0, '\\');
      assertNotNull(string0);
      assertArrayEquals(new float[] {518.0F, 518.0F, 48.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals("518.0\\518.0\\48.0", string0);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains('\\'));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains('\\'));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string1 = StringUtils.join(iterator0, '!');
      assertNotNull(string1);
      assertFalse(arrayDeque0.contains('\\'));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceChars("", "Object varargs must not be null", "518.0)8.0\u00048.0");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.stripStart("rz", "rz");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("T9", "org.apache.commons.lang3.CharSequenceUtils", "Object varargs must not be null");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "fljxESn)F^P;HU*^=d", "Object varargs must not be null");
      assertEquals(1, int0);
      
      String string4 = StringUtils.substringBetween("fljxESn)F^P;HU*^=d", "org.apache.commons.lang3.CharSequenceUtils", "fljxESn)F^P;HU*^=d");
      assertNull(string4);
      
      String string5 = StringUtils.substringAfterLast("rz", (String) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      String string0 = StringUtils.replaceChars((String) null, "TB3+vjG?Xiw0(ZR4{Js@", "");
      assertNull(string0);
      
      String string1 = StringUtils.stripStart("07`l2x6I", "fljxESn)F^P;HU*^=d");
      assertNotNull(string1);
      assertEquals("07`l2x6I", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("fljxESn)F^P;HU*^=d", (String) null, "WwaQfAo+,:R[aia");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "fljxESn)F^P;HU*^=d", (String) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfterLast("Locale must not be null", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((Object[]) null, 'f', (-1), (-1));
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.trimToNull("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "l", "T");
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains("org.apache.commons.lang3.StringUtils"));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, "l", (-3959), (-296));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -3959
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.truncate("\"ljDT", 65516, 65516);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", 'd');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.reverse("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.trimToNull("org.apache.commons.lang3.StringUtzN1P_d<bqZH7[!RSv>?5QH{L");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtzN1P_d<bqZH7[!RSv>?5QH{L", string0);
      
      String string1 = StringUtils.leftPad(" E]>gT}+", 321, '\"');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEqualsgT}+", string1);
      
      String string2 = StringUtils.wrap("3", '\"');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\"3\"", string2);
      
      int int0 = StringUtils.compare("l", "org.apache.commons.lang3.StringUtzN1P_d<bqZH7[!RSv>?5QH{L", true);
      assertEquals((-3), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequencegT}+";
      charSequenceArray0[1] = (CharSequencegT}+";
      charSequenceArray0[2] = (CharSequence) "l";
      charSequenceArray0[3] = (CharSequence) "l";
      String string3 = StringUtils.stripToNull("org.apache.commons.lang3.StringUtzN1P_d<bqZH7[!RSv>?5QH{L");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtzN1P_d<bqZH7[!RSv>?5QH{L", string3);
      
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.StringUtzN1P_d<bqZH7[!RSv>?5QH{L";
      boolean boolean0 = StringUtils.contains(charSequenceArray0[3], 321);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.StringUtzN1P_d<bqZH7[!RSv>?5QH{L", "org.apache.commons.lang3.StringUtzN1P_d<bqZH7[!RSv>?5QH{L");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.StringUtzN1P_d<bqZH7[!RSv>?5QH{L");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.upperCase("org.apache.commons.lang3.StringUtzN1P_d<bqZH7[!RSv>?5QH{L");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("ORG.APACHE.COMMONS.LANG3.STRINGUTZN1P_D<BQZH7[!RSV>?5QH{L", string4);
      
      String[] stringArray1 = StringUtils.split("\"3\"", "org.apache.commons.lang3.StringUtzN1P_d<bqZH7[!RSv>?5QH{L");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      int int2 = StringUtils.compare("org.apache.commons.lang3.StringUtzN1P_d<bqZH7[!RSv>?5QH{L", (String) null, false);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>(89, (-907));
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(89, vector0.capacity());
      assertEquals(0, vector0.size());
      
      boolean boolean0 = StringUtils.isNotBlank("7T.E|lr7%B|");
      assertTrue(boolean0);
      
      String string0 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null, 0);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      String string1 = StringUtils.trimToEmpty("7T.E|lr7%B|");
      assertNotNull(string1);
      assertEquals("7T.E|lr7%B|", string1);
      
      charSequenceArray0[4] = (CharSequence) "7T.E|lr7%B|";
      String string2 = StringUtils.removeStart("7T.E|lr7%B|", "Minimum abbreviation width with offset is %d");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("7T.E|lr7%B|", string2);
      
      charSequenceArray0[5] = (CharSequence) "7T.E|lr7%B|";
      charSequenceArray0[6] = (CharSequence) null;
      boolean boolean1 = StringUtils.endsWithAny("7T.E|lr7%B|", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1);
      
      int int0 = StringUtils.compare((String) null, ",sDw=JKdt)v)kvHC");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.upperCase("9(7-D5");
      assertNotNull(string0);
      assertEquals("9(7-D5", string0);
      
      charSequenceArray0[0] = (CharSequence) "9(7-D5";
      String string1 = StringUtils.substringBeforeLast(", '", "9(7-D5");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", '", string1);
      
      charSequenceArray0[1] = (CharSequence) ", '";
      String string2 = StringUtils.replaceIgnoreCase("", "...", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      charSequenceArray0[4] = (CharSequence) "";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("...", charSequenceArray0[5], charSequenceArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(6, charSequenceArray0.length);
      assertEquals("...", string3);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[4], (CharSequence) "9(7-D5");
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string4 = StringUtils.removeStart("!&sb!EDeb", "!&sb!EDeb");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.isAllLowerCase(", '");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.uncapitalize((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.chomp(", '");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertEquals(", '", string6);
      
      int int1 = StringUtils.compare((String) null, "", true);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.chop("");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      
      boolean boolean2 = StringUtils.isEmpty(", '");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.contains(charSequenceArray0[1], 561);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("?", ", '", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int2 = StringUtils.countMatches((CharSequence) ", '", (CharSequence) "...");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.abbreviate("oU)?(z", "oU)?(z", (int) '9', 1877);
      assertNotNull(string0);
      assertEquals("oU)?(z", string0);
      
      String string1 = StringUtils.deleteWhitespace("oU)?(z");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("oU)?(z", string1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = StringUtils.stripAccents("+I.\"X'mbdKCOC7lBL");
      assertNotNull(string0);
      assertEquals("+I.\"X'mbdKCOC7lBL", string0);
      
      boolean boolean0 = StringUtils.isNumeric("+I.\"X'mbdKCOC7lBL");
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      stringArray0[0] = "+I.\"X'mbdKCOC7lBL";
      stringArray0[1] = "+I.\"X'mbdKCOC7lBL";
      stringArray0[2] = "+I.\"X'mbdKCOC7lBL";
      stringArray0[3] = "+I.\"X'mbdKCOC7lBL";
      stringArray0[4] = "+I.\"X'mbdKCOC7lBL";
      stringArray0[5] = "org.apache.commons.lang3.CharSequenceUtils";
      String string1 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, stringArray0.length);
      assertEquals("", string1);
      
      String string2 = StringUtils.lowerCase("+I.\"X'mbdKCOC7lBL");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("+i.\"x'mbdkcoc7lbl", string2);
      
      CharBuffer charBuffer0 = StringUtils.defaultIfBlank((CharBuffer) null, (CharBuffer) null);
      assertNull(charBuffer0);
      
      String string3 = StringUtils.removeStart("u,^7v' :L2-", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("u,^7v' :L2-", string3);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "PU");
      assertNotNull(string0);
      assertFalse(arrayList0.contains(string0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals("", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("", charSequence0);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Iterable<?>) arrayList0, ' ');
      assertNotNull(string1);
      assertFalse(arrayList0.contains(""));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", string1);
      
      String string2 = StringUtils.lowerCase("'_TAmdkN]W3mx@\"");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("'_tamdkn]w3mx@\"", string2);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string3);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.join((long[]) null, 'F', (-847), (-847));
      assertNull(string4);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", (CharSequence) null, (-847));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "PU");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.right(" vs ", (-1));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)charSequence0));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = " [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[";
      String string1 = StringUtils.wrapIfMissing("[x", " [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[[x [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[", string1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) " [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[[x [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[", (CharSequence) " [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[[x [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals(" [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[[x [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[", charSequence0);
      
      int int0 = StringUtils.countMatches((CharSequence) " [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[[x [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[", 'l');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "[x", (CharSequence) " [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[");
      assertFalse(boolean0);
      
      // Undeclared exception!
      StringUtils.getJaroWinklerDistance(" [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[", " [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[[x [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[");
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      String string0 = StringUtils.strip("vn");
      assertNotNull(string0);
      assertEquals("vn", string0);
      
      String string1 = StringUtils.abbreviate("vn", "vn", 4);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("vn", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "vn", 4, 102);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.chop("Threshold must not be nega!RS}v(>?5Q");
      assertNotNull(string0);
      assertEquals("Threshold must not be nega!RS}v(>?5", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Threshold must not be nega!RS}v(>?5", (CharSequence) "Threshold must not be nega!RS}v(>?5");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("Threshold must not be nega!RS}v(>?5", charSequence0);
      
      int int0 = StringUtils.countMatches((CharSequence) "Threshold must not be nega!RS}v(>?5", 'l');
      assertEquals(1, int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'l';
      floatArray0[1] = (float) 'l';
      floatArray0[2] = (float) 'l';
      floatArray0[4] = (float) 1;
      floatArray0[7] = (float) 1;
      String string1 = StringUtils.join(floatArray0, 'J');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new float[] {108.0F, 108.0F, 108.0F, 0.0F, 1.0F, 0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals("108.0J108.0J108.0J0.0J1.0J0.0J0.0J1.0", string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "[wl", (CharSequence) "Threshold must not be nega!RS}v(>?5Q");
      assertFalse(boolean0);
      
      int int1 = StringUtils.ordinalIndexOf("[wl", "[wl", 1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = StringUtils.getJaroWinklerDistance("Threshold must not be nega!RS}v(>?5Q", "Threshold must not be nega!RS}v(>?5");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean1 = StringUtils.isNumeric("108.0J108.0J108.0J0.0J1.0J0.0J0.0J1.0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[0];
      int int2 = StringUtils.indexOfAny((CharSequence) "Threshold must not be nega!RS}v(>?5", charArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("[wl");
      assertNotNull(string0);
      assertEquals("[wl", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "[wl", (CharSequence) "[wl");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("[wl", charSequence0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("[wl", "[wl");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      float[] floatArray0 = new float[8];
      String string1 = StringUtils.join(floatArray0, 'J');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals("0.0J0.0J0.0J0.0J0.0J0.0J0.0J0.0", string1);
      
      String string2 = StringUtils.stripToNull("[wl");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[wl", string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "[wl", (CharSequence) "Threshold must not be negative");
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Threshold must not be negative", "[wl");
      assertEquals(0.46, double0, 0.01);
      
      boolean boolean1 = StringUtils.isNumeric("0.0J0.0J0.0J0.0J0.0J0.0J0.0J0.0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.left("[wl", (-1));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.left("The character ", 1);
      assertNotNull(string0);
      assertEquals("T", string0);
      
      String string1 = StringUtils.replace("T", "The character ", "T", 1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("T", string1);
      
      String string2 = StringUtils.rightPad("dl-c(bu )+09f1Kk1", 1, 'f');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("dl-c(bu )+09f1Kk1", string2);
      
      String string3 = StringUtils.deleteWhitespace("dl-c(bu )+09f1Kk1");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("dl-c(bu)+09f1Kk1", string3);
      
      String string4 = StringUtils.stripStart("T", "Cloneable type ");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("T", string4);
      
      boolean boolean0 = StringUtils.isBlank("T");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'f';
      int int0 = StringUtils.lastOrdinalIndexOf("dl-c(bu )+09f1Kk1", "dl-c(bu )+09f1Kk1", 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.remove("I/E#\"j]ae\"f`wU[[", "I/E#\"j]ae\"f`wU[[");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripStart("I/E#\"j]ae\"f`wU[[", "V=>WGN");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("I/E#\"j]ae\"f`wU[[", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("aF*I(:~", "PUdl-c(bu )+09f1K[FV%c-!1r|YFk9", "  M");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[17];
      charArray0[0] = '%';
      charArray0[1] = 'P';
      charArray0[2] = '*';
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)56;
      String string2 = StringUtils.toEncodedString(byteArray0, charset0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertArrayEquals(new byte[] {(byte)56}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("8", string2);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string3 = StringUtils.join((List<?>) linkedList0, '%', (int) (byte)56, (int) (byte)56);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals(0, linkedList0.size());
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^( ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.chop("Lzu`^( ");
      assertNotNull(string0);
      assertEquals("Lzu`^(", string0);
      
      boolean boolean1 = StringUtils.startsWith("Lzu`^(", "Lzu`^( ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = '1';
      charArray0[2] = 'n';
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.chomp("Lzu`^(");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("Lzu`^(", string2);
      
      int int0 = StringUtils.compare((String) null, (String) null, false);
      assertEquals(0, int0);
      
      String string3 = StringUtils.chop("', is neither of type Map.Entry nor an Array");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Arra", string3);
      
      boolean boolean2 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.remove("I/E#\"j]ae\"f`wU[[", "I/E#\"j]ae\"f`wU[[");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripStart("I/E#\"j]ae\"f`wU[[", "V=>WGN");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("I/E#\"j]ae\"f`wU[[", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("aF*I(:~", "PUdl-c(bu )+09f1K[FV%c-!1r|YFk9", "  M");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[17];
      charArray0[0] = '%';
      charArray0[1] = 'P';
      charArray0[2] = '*';
      charArray0[3] = 'i';
      charArray0[4] = '%';
      charArray0[5] = '%';
      String string2 = StringUtils.join(charArray0, '%');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(17, charArray0.length);
      assertEquals("%%P%*%i%%%%%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000", string2);
      
      String[] stringArray1 = StringUtils.split("", '!');
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.strip("66i(''U8n");
      assertNotNull(string0);
      assertEquals("66i(''U8n", string0);
      
      char[] charArray0 = new char[8];
      charArray0[3] = '*';
      charArray0[4] = '-';
      charArray0[5] = 'v';
      charArray0[6] = 'A';
      charArray0[0] = 't';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "66i(''U8n", "chT9}|z!^WhEnXQe");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "66i(''U8n", (CharSequence) "66i(''U8n");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertNotNull(stack0);
      assertFalse(stack0.contains('t'));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      
      // Undeclared exception!
      try { 
        stack0.listIterator(17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 17
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      String string0 = StringUtils.join((List<?>) vector0, "Exception cloning Cloneable type ", 57, 57);
      assertNotNull(string0);
      assertFalse(vector0.contains(string0));
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '?';
      charArray0[1] = '^';
      charArray0[2] = '$';
      charArray0[3] = '[';
      charArray0[4] = 'O';
      charArray0[5] = ':';
      charArray0[6] = 'G';
      charArray0[7] = '&';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Exception cloning Cloneable type ", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'?', '^', '$', '[', 'O', ':', 'G', '&'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean1);
      
      String string1 = StringUtils.wrap("/T", 'W');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("W/TW", string1);
      
      String string2 = StringUtils.join((boolean[]) null, '$');
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "/T";
      charSequenceArray0[1] = (CharSequence) "/T";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "Exception cloning Cloneable type ";
      boolean boolean2 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean2);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.repeat("  b`{Q}D| `0M", 3);
      assertNotNull(string0);
      assertEquals("  b`{Q}D| `0M  b`{Q}D| `0M  b`{Q}D| `0M", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "P`;n*<s(r<@", "  b`{Q}D| `0M");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeIgnoreCase(">^!MV-bw*%n+ibJh*_O", "n>/c(=");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(">^!MV-bw*%n+ibJh*_O", string1);
      
      String string2 = StringUtils.leftPad((String) null, 65536, '!');
      assertNull(string2);
      
      String string3 = StringUtils.replace("", "yyOCcKZBK/#JiL|", ">^!MV-bw*%n+ibJh*_O");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.defaultString("T#NV7-5|2", "org.apache.commons.lang3.Charsets");
      assertNotNull(string0);
      assertEquals("T#NV7-5|2", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("T#NV7-5|2");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.Charsets", (CharSequence) "T#NV7-5|2", 7);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      ByteBuffer byteBuffer0 = charset0.encode("Supplied value must be a valid byte literal between -128 and 127: [");
      assertNotNull(byteBuffer0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(67, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(73, byteBuffer0.capacity());
      assertEquals(67, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=67 cap=73]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-98);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte)33;
      byteArray0[4] = (byte) (-5);
      byteArray0[5] = (byte)56;
      byteArray0[6] = (byte)111;
      ByteBuffer byteBuffer1 = ByteBuffer.wrap(byteArray0);
      assertNotNull(byteBuffer1);
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertTrue(byteBuffer1.hasArray());
      assertEquals(7, byteBuffer1.limit());
      assertFalse(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(7, byteBuffer1.remaining());
      assertFalse(byteBuffer1.isDirect());
      assertEquals(0, byteBuffer1.position());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer1.toString());
      assertEquals(7, byteBuffer1.capacity());
      assertArrayEquals(new byte[] {(byte) (-98), (byte)99, (byte) (-51), (byte)33, (byte) (-5), (byte)56, (byte)111}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotSame(byteBuffer1, byteBuffer0);
      
      String string1 = StringUtils.substring("Minimum abbreviation width is %d", (-2829), (-1523));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 227.79922F;
      floatArray0[2] = 2436.5957F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1264.1965F);
      String string1 = StringUtils.join(floatArray0, 'z');
      assertNotNull(string1);
      assertArrayEquals(new float[] {0.0F, 227.79922F, 2436.5957F, 0.0F, (-1264.1965F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals("0.0z227.79922z2436.5957z0.0z-1264.1965", string1);
      
      String string2 = StringUtils.strip("CkM;vf");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("CkM;vf", string2);
      
      String string3 = StringUtils.trimToNull((String) null);
      assertNull(string3);
      
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader2 = classLoader0.getParent();
      assertNotNull(classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertSame(classLoader2, classLoader1);
      
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      assertNotNull(serviceLoader0);
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertSame(classLoader1, classLoader2);
      
      String string4 = StringUtils.join((Iterable<?>) serviceLoader0, "CkM;vf");
      assertNotNull(string4);
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertSame(classLoader1, classLoader2);
      assertEquals("", string4);
      
      byte byte0 = (byte) (-108);
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      
      byte[] byteArray0 = new byte[0];
      String string5 = StringUtils.toEncodedString(byteArray0, charset0);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string5);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, 'z', (-1792), (int) (byte) (-108));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1792
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = "jDT";
      int int0 = 65536;
      byte[] byteArray0 = new byte[0];
      char char0 = '`';
      String string1 = StringUtils.join(byteArray0, '`');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string1);
      
      String string2 = null;
      String string3 = "2ds% c";
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "2ds% c");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 2ds% c
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^( ");
      assertTrue(boolean0);
      
      String string0 = "The character ";
      String string1 = "Exception cloning Clon\r";
      Vector<String> vector0 = new Vector<String>(53, 76);
      assertNotNull(vector0);
      assertFalse(vector0.contains("Lzu`^( "));
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(53, vector0.capacity());
      
      String string2 = "k0%Kwhx";
      vector0.clear();
      assertFalse(vector0.contains("Lzu`^( "));
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(53, vector0.capacity());
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 13;
      longArray0[1] = (long) 53;
      longArray0[2] = (long) 13;
      longArray0[3] = (long) 53;
      longArray0[4] = (long) 13;
      longArray0[5] = (long) 13;
      longArray0[6] = (long) 13;
      longArray0[7] = (long) 13;
      longArray0[8] = (long) 13;
      String string3 = StringUtils.join(longArray0, '!', 76, 32);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new long[] {13L, 53L, 13L, 53L, 13L, 13L, 13L, 13L, 13L}, longArray0);
      assertEquals(9, longArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.repeat("Exception cloning Clon\r", (-1715));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, "k0%Kwhx", 13, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 32
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^( ");
      assertTrue(boolean0);
      
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, '8', 53, (-1418));
      assertNotNull(string0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("c%W9y%nTg");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.wrap("vn", ':');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(":vn:", string1);
      
      String string2 = StringUtils.rightPad("c%W9y%nTg", 54);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("c%W9y%nTg                                             ", string2);
      
      String string3 = StringUtils.removeEnd("The String must not be empty", "Exception cloning Cloneable type ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("The String must not be empty", string3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '}';
      charArray0[1] = '8';
      charArray0[2] = '8';
      charArray0[3] = '8';
      charArray0[4] = 'q';
      charArray0[5] = ':';
      charArray0[6] = 'I';
      charArray0[7] = ',';
      int int0 = StringUtils.indexOfAny((CharSequence) "The character ", charArray0);
      assertArrayEquals(new char[] {'}', '8', '8', '8', 'q', ':', 'I', ','}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.unwrap(",OZ]hQsZUU.y'", 'V');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals(",OZ]hQsZUU.y'", string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "The character ", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(14, int1);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1936;
      intArray0[1] = 1971;
      intArray0[2] = 0;
      intArray0[3] = 150;
      intArray0[4] = (-2678);
      Vector<String> vector0 = new Vector<String>(2804, 733);
      assertNotNull(vector0);
      assertEquals(2804, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      String string0 = StringUtils.join((List<?>) vector0, "k0%Kwhx", 32, (-123));
      assertNotNull(string0);
      assertFalse(vector0.contains("k0%Kwhx"));
      assertEquals(2804, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("k0%Kwhx");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "k0%Kwhx", "jDTjDT");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.unwrap("jDTjDT", "2kb[*o#~<D@x");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("jDTjDT", string1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "al*7#0(fh";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("al*7#0(fh", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("al*7#0(fh");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.defaultString("T#NV7-5|2", "org.apache.commons.lang3.Charsets");
      assertNotNull(string0);
      assertEquals("T#NV7-5|2", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("T#NV7-5|2");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.Charsets", (CharSequence) "T#NV7-5|2", 7);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string1 = StringUtils.join(booleanArray0, 't');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals("false", string1);
      
      String string2 = StringUtils.stripToNull("...");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("...", string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "al*7#0(fh";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("al*7#0(fh", string3);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("al*7#0(fh", stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 't';
      charArray0[4] = 'Z';
      charArray0[5] = 't';
      boolean boolean2 = StringUtils.containsNone((CharSequence) "...", charArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new char[] {'D', 't', 't', 't', 'Z', 't'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean2);
      
      String string4 = StringUtils.join((Object[]) stringArray0, "qQ^e.gAOzpC/", 7, (-1));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(1, stringArray0.length);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      char[] charArray0 = new char[15];
      charArray0[1] = '?';
      boolean boolean0 = StringUtils.isAlphanumeric("org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare("Ju!39=$}+LLV", "", false);
      assertEquals(13, int0);
      
      boolean boolean1 = StringUtils.isWhitespace("Ju!39=$}+LLV");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.stripStart("RbC;,Loc<I[PNf] %P", (String) null);
      assertNotNull(string0);
      assertEquals("RbC;,Loc<I[PNf] %P", string0);
      
      String string1 = StringUtils.right("org.apache.commons.lang3.StringUtils", (-94));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.wrapIfMissing((String) null, "Aborting to protect agjinst StackOverflowError - output of one loop is the input of anothery31Ys)D^I");
      assertNull(string2);
      
      boolean boolean2 = StringUtils.isAlphaSpace(">&wNezN0np");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.stripEnd(" ", ">_?58~0~");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) " ", '@');
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStart("!&sb!EDeb!&sb!EDeb", " ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("!&sb!EDeb!&sb!EDeb", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("!&sb!EDeb!&sb!EDeb", "/ 4htd=");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.stripEnd("maxWith cannot be negative", " ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string2);
      
      String string3 = StringUtils.trimToEmpty(" ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(1, stringArray0.length);
      assertEquals("!&sb!EDeb!&sb!EDeb", string4);
      
      boolean boolean0 = StringUtils.isAlpha("/ 4htd=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.removeStartIgnoreCase("PU", "PU");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = arrayList0.add("");
      assertTrue(arrayList0.contains(string0));
      assertFalse(arrayList0.contains("PU"));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Iterable<?>) arrayList0, ' ');
      assertNotNull(string1);
      assertTrue(arrayList0.contains(string0));
      assertFalse(arrayList0.contains("PU"));
      assertTrue(string1.equals((Object)string0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("", string1);
      
      String string2 = StringUtils.lowerCase("'_TAmdkN]W3mx@\"");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("'_tamdkn]w3mx@\"", string2);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string3);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.join((long[]) null, 'O', (-847), (-847));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "PU");
      assertNotNull(string0);
      assertFalse(arrayList0.contains("PU"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals("", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Iterable<?>) arrayList0, ' ');
      assertNotNull(string1);
      assertFalse(arrayList0.contains(string1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", string1);
      
      String string2 = StringUtils.lowerCase("'_TAmdkN]W3mx@\"");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("'_tamdkn]w3mx@\"", string2);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string3);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.join((long[]) null, 'F', (-847), (-847));
      assertNull(string4);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, (-847));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "PU");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.right(" vs ", (-1));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace(stringArray0[0]);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = ", Length: 0";
      stringArray0[1] = ", Length: 0";
      String string0 = StringUtils.replaceEach(", Length: 0", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      assertEquals(", Length: 0", string0);
      
      String string1 = StringUtils.leftPad("9c}_O", (-1), 't');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("9c}_O", string1);
      
      String string2 = StringUtils.center("!Z=K}T", (-2325), "7T.E|lr7%B|");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("!Z=K}T", string2);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("k");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "k", (CharSequence) "k", 8192);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "k";
      stringArray0[2] = "k";
      stringArray0[4] = "7N:j7FFPtRDX";
      String string0 = StringUtils.replaceEach("Aborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals(5, stringArray0.length);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      String string1 = StringUtils.deleteWhitespace("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("AbortingtoprotectagainstStackOverflowError-outputofoneloopistheinputofanother", string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "k", (CharSequence) "7N:j7FFPtRDX");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.defaultString("T#NV7-5|2", "org.apache.commons.lang3.Charsets");
      assertNotNull(string0);
      assertEquals("T#NV7-5|2", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("T#NV7-5|2");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.Charsets", (CharSequence) "T#NV7-5|2", 7);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string1 = StringUtils.join(booleanArray0, 't');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals("false", string1);
      
      String string2 = StringUtils.stripToNull("...");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("...", string2);
      
      String string3 = StringUtils.repeat("!B0mm4v|7", 3935);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "P`;n*<s(r<@", "T9");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.removeIgnoreCase("!B0mm4v|7", "org.apache.commons.lang3.Charsets");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("!B0mm4v|7", string4);
      
      String string5 = StringUtils.leftPad("2^", 8192, '');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.replace("false", string5, "false");
      assertNotNull(string6);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("false", string6);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.replace("bwoFQ#T6t(7qG@F0", "bwoFQ#T6t(7qG@F0", "bwoFQ#T6t(7qG@F0");
      assertNotNull(string0);
      assertEquals("bwoFQ#T6t(7qG@F0", string0);
      
      String string1 = StringUtils.substringAfter((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase((String) null, (String) null);
      assertNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "bwoFQ#T6t(7qG@F0", 32, 108);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.center("bwoFQ#T6t(7qG@F0", 32, "bwoFQ#T6t(7qG@F0");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals("bwoFQ#T6bwoFQ#T6t(7qG@F0bwoFQ#T6", string3);
      
      String string4 = StringUtils.removeEnd((String) null, "bwoFQ#T6bwoFQ#T6t(7qG@F0bwoFQ#T6");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", "\r", 2562);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("\r", "\r");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, "\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("\r");
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (Charset) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      boolean boolean2 = StringUtils.isMixedCase((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string0 = StringUtils.getDigits(".x8]i");
      assertNotNull(string0);
      assertEquals("8", string0);
      
      boolean boolean3 = StringUtils.isAllUpperCase((CharSequence) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.replace("bwoFQ#T6t(7qG@F0", "bwoFQ#T6t(7qG@F0", "bwoFQ#T6t(7qG@F0");
      assertNotNull(string0);
      assertEquals("bwoFQ#T6t(7qG@F0", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("bwoFQ#T6t(7qG@F0", (String) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("bwoFQ#T6t(7qG@F0", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "bwoFQ#T6t(7qG@F0", 32, 32);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceOnce("bwoFQ#T6t(7qG@F0", "bwoFQ#T6t(7qG@F0", (String) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("bwoFQ#T6t(7qG@F0", string2);
      
      Vector<Object> vector0 = null;
      try {
        vector0 = new Vector<Object>((-1), 32);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.removeEnd("jDT", "jDT");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Comparator should not be null.", "Comparator should not be null.");
      assertNotNull(string0);
      assertEquals("Comparator should not be null.", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("Comparator should not be null.");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripEnd("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.isAlphanumeric("Comparator should not be null.");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfEmpty(";.;+#-d}FA:", supplier0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(";.;+#-d}FA:", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string3 = StringUtils.appendIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequenceArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(1, charSequenceArray0.length);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      
      String string4 = StringUtils.prependIfMissing("Comparator should not be null.", "Comparator should not be null.", charSequenceArray0);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(1, charSequenceArray0.length);
      assertEquals("Comparator should not be null.", string4);
      
      String string5 = StringUtils.unwrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'T');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("Comparator should not be null.", ";.;+#-d}FA:");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "z_a<{9no";
      boolean boolean0 = StringUtils.endsWithAny("Lzu3`*^(] ", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chomp("Lzu3`*^(] ", "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string1);
      assertEquals("Lzu3`*^(] ", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("J`nb;e0h_0[yw*RMc");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
      
      String string2 = StringUtils.defaultString((String) null, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.strip("66i(''U8n");
      assertNotNull(string0);
      assertEquals("66i(''U8n", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[3] = '*';
      charArray0[4] = '-';
      charArray0[5] = 'v';
      charArray0[6] = 'A';
      charArray0[0] = 't';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "66i(''U8n", charArray0);
      assertArrayEquals(new char[] {'t', 't', '\u0000', '*', '-', 'v', 'A', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap("66i(''U8n", 't');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("t66i(''U8nt", string1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      String string2 = StringUtils.join(booleanArray0, 'k');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals("falsektruektruektruekfalsektrue", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "falsektruektruektruekfalsektrue";
      charSequenceArray0[1] = (CharSequence) "falsektruektruektruekfalsektrue";
      boolean boolean1 = StringUtils.endsWithAny("66i(''U8n", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "dl-c(bu )+09f1Kk1", "e]br?,e%/uQT]");
      assertNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) "e]br?,e%/uQT]");
      assertNotNull(charSequence0);
      assertEquals("e]br?,e%/uQT]", charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny("e]br?,e%/uQT]", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize("dl-c(bu )+09f1Kk1");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("Dl-c(bu )+09f1Kk1", string1);
      
      String string2 = StringUtils.removeAll("e]br?,e%/uQT]", "Dl-c(bu )+09f1Kk1");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("e]br?,e%/uQT]", string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "e]br?,e%/uQT]", '`');
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "e]br?,e%/uQT]", (CharSequence) "e]br?,e%/uQT]");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.substringBefore("e]br?,e%/uQT]", (String) null);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("e]br?,e%/uQT]", string3);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'o');
      assertNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = objectArray0[0];
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Object varargs must not be null", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.wrap("s1lPLB}YL", '{');
      assertNotNull(string1);
      assertEquals("{s1lPLB}YL{", string1);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      String string2 = StringUtils.join(booleanArray0, '|');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(9, booleanArray0.length);
      assertEquals("false|false|false|false|false|false|false|false|false", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "false|false|false|false|false|false|false|false|false";
      boolean boolean2 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean3);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "mV/.qh", (CharSequence) "false|false|false|false|false|false|false|false|false");
      assertEquals(0, int0);
      
      int int1 = new Integer('{');
      assertFalse(int1 == int0);
      assertEquals(123, int1);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.chomp("3");
      assertNotNull(string0);
      assertEquals("3", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "3", (char[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("3", "3");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("3", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) "3";
      charSequenceArray0[2] = (CharSequence) "3";
      charSequenceArray0[3] = (CharSequence) "3";
      charSequenceArray0[4] = (CharSequence) "3";
      charSequenceArray0[5] = (CharSequence) "3";
      int int0 = StringUtils.indexOfAny((CharSequence) "3", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.strip("vn");
      assertNotNull(string0);
      assertEquals("vn", string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'E';
      charArray0[1] = 'S';
      charArray0[2] = 'h';
      charArray0[3] = 'p';
      charArray0[4] = '1';
      charArray0[5] = '5';
      charArray0[6] = 's';
      String string1 = StringUtils.join(charArray0, '0');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'E', 'S', 'h', 'p', '1', '5', 's'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("E0S0h0p01050s", string1);
      
      String string2 = StringUtils.abbreviateMiddle("E0S0h0p01050s", "Strings must not be null", (-4553));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("E0S0h0p01050s", string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "vn", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 19;
      intArray0[1] = 54;
      intArray0[2] = 4;
      intArray0[3] = (-358);
      intArray0[4] = (-457);
      String string0 = StringUtils.uncapitalize("h!g");
      assertNotNull(string0);
      assertEquals("h!g", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "...", (CharSequence) "h!g");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      String string1 = StringUtils.join(charArray0, 'V');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'V', 'V'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("VVV", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "VVV";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "h!g";
      charSequenceArray0[3] = (CharSequence) "VVV";
      charSequenceArray0[2] = (CharSequence) "...";
      String string2 = StringUtils.abbreviateMiddle("h!g", "VVV", (-4553));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("h!g", string2);
      
      charSequenceArray0[5] = (CharSequence) "h!g";
      charSequenceArray0[6] = (CharSequence) "VVV";
      charSequenceArray0[7] = (CharSequence) "h!g";
      int int1 = StringUtils.indexOfAny((CharSequence) "h!g", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = StringUtils.strip("66i(''U8tN");
      assertNotNull(string0);
      assertEquals("66i(''U8tN", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = '%';
      charArray0[2] = 'E';
      charArray0[3] = '*';
      charArray0[4] = '-';
      charArray0[5] = 'v';
      charArray0[6] = 'A';
      charArray0[0] = 't';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "66i(''U8tN", charArray0);
      assertArrayEquals(new char[] {'t', '%', 'E', '*', '-', 'v', 'A', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrap("66i(''U8tN", 't');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("t66i(''U8tNt", string1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      String string2 = StringUtils.join(booleanArray0, 'k');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals("truekfalsekfalsekfalsektruekfalse", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "66i(''U8tN";
      boolean boolean1 = StringUtils.endsWithAny("66i(''U8tN", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "t66i(''U8tNt", (CharSequence) "t66i(''U8tNt");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny(charSequenceArray0[0], charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      char[] charArray0 = new char[2];
      charArray0[0] = '2';
      charArray0[1] = 'z';
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'2', 'z'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrap("Array and element cannot both be null", 'z');
      assertNotNull(string0);
      assertEquals("zArray and element cannot both be nullz", string0);
      
      String string1 = StringUtils.join(booleanArray0, 'z');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals("falsezfalse", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "zArray and element cannot both be nullz");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray1 = new CharSequence[6];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "Array and element cannot both be null";
      charSequenceArray1[1] = (CharSequence) "zArray and element cannot both be nullz";
      charSequenceArray1[2] = (CharSequence) "Array and element cannot both be null";
      String string2 = StringUtils.join(charArray0, 'z');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new char[] {'2', 'z'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("2zz", string2);
      
      charSequenceArray1[3] = (CharSequence) "2zz";
      charSequenceArray1[4] = (CharSequence) "zArray and element cannot both be nullz";
      charSequenceArray1[5] = (CharSequence) "zArray and element cannot both be nullz";
      int int1 = StringUtils.indexOfAny((CharSequence) "falsezfalse", charSequenceArray1);
      assertTrue(int1 == int0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertEquals(6, charSequenceArray1.length);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.strip("_E>P%c/v8b C/-", "_E>P%c/v8b C/-");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace("XLaK%7");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("XLaK%7", string1);
      
      String string2 = StringUtils.wrapIfMissing("_E>P%c/v8b C/-", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("_E>P%c/v8b C/-", string2);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "XLaK%7", "_E>P%c/v8b C/-");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 0L;
      longArray0[1] = 0L;
      longArray0[2] = 0L;
      longArray0[3] = 0L;
      longArray0[4] = (-1L);
      longArray0[5] = 1079L;
      String string3 = StringUtils.join(longArray0, 'm', 4591, 4591);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-1L), 1079L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals("", string3);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1L);
      String string4 = StringUtils.join(doubleArray0, 'B');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertArrayEquals(new double[] {(-1.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals("-1.0", string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 4591);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.remove((String) null, "C6 6>]YW6qzY=})hy");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      String string0 = StringUtils.upperCase("<NAMCcgs`kU", locale0);
      assertNotNull(string0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("<NAMCCGS`KU", string0);
      
      Locale locale1 = Locale.JAPAN;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja_JP", locale1.toString());
      assertNotSame(locale1, locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains('-'));
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = arrayList0.containsAll(linkedList0);
      assertFalse(linkedList0.contains('-'));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
      
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(locale0));
      assertEquals(0, priorityQueue0.size());
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) priorityQueue0);
      assertNotNull(list0);
      assertFalse(priorityQueue0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertNotNull(string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja_JP", locale1.toString());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.isMixedCase("<NAMCCGS`KU");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlpha("<NAMCCGS`KU");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "<NAMCcgs`kU", (CharSequence) "<NAMCcgs`kU", 8192);
      assertEquals(0, int0);
      
      String string2 = StringUtils.truncate("zjN#F'w4jWoWLi", 363, 363);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean3 = StringUtils.startsWithIgnoreCase("", "zjN#F'w4jWoWLi");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = null;
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string1 = StringUtils.getIfBlank((String) null, supplier0);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 100;
      intArray0[1] = 65;
      intArray0[2] = 8192;
      intArray0[3] = (-1414);
      intArray0[4] = 321;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'W', 2, 8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.center("both be null", 1669, 'T');
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAny(string0, charSequenceArray0);
      assertFalse(string0.equals((Object)string1));
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "both be null", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = "";
      String string1 = ".>Livn3";
      String string2 = "Object varargs must not be null";
      String string3 = "org.apache.commons.lang3.CharUtils";
      String string4 = "offset cannot be negative";
      String string5 = StringUtils.replaceChars("", "org.apache.commons.lang3.CharUtils", "offset cannot be negative");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String string6 = "~\"p +e2'#@%T5>m";
      String string7 = StringUtils.stripEnd("Object varargs must not be null", "Object varargs must not be null");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string8 = StringUtils.removeFirst("?", "Object varargs must not be null");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertEquals("?", string8);
      
      charSequenceArray0[0] = (CharSequence) "?";
      String string9 = "Exception cloning Cloneable type ";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Exception cloning Cloneable type ", "?", (-280), (-506));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      Locale.setDefault(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      String string0 = StringUtils.lowerCase("", locale0);
      assertNotNull(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = 'w';
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      charArray0[2] = 'o';
      String string1 = locale0.getDisplayScript();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", string1);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains(string1));
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertSame(locale0, locale1);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      assertNotNull(list0);
      assertFalse(set0.contains(string1));
      assertFalse(list0.contains(string1));
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(locale0, locale1);
      
      charArray0[3] = '9';
      String string2 = locale0.getScript();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertSame(locale0, locale1);
      assertEquals("", string2);
      
      String string3 = locale0.getDisplayScript();
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertSame(locale0, locale1);
      assertEquals("", string3);
      
      charArray0[4] = ';';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'%', 'w', 'o', '9', ';'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.replaceEach("*.vqe9d/*HM", stringArray0, stringArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(188, stringArray0.length);
      assertEquals("*.vqe9d/*HM", string4);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(188, stringArray0.length);
      assertFalse(boolean1);
      
      String string5 = StringUtils.join((Object[]) stringArray0, '%', 4097, 4097);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals(188, stringArray0.length);
      assertEquals("", string5);
      
      String string6 = StringUtils.trimToEmpty("icalMarks}+");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("icalMarks}+", string6);
      
      int int0 = StringUtils.compare("", "icalMarks}+");
      assertEquals((-11), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals(188, stringArray0.length);
      assertEquals(0, int1);
      
      String string7 = StringUtils.substringAfterLast((String) null, "");
      assertNull(string7);
      
      boolean boolean2 = StringUtils.contains((CharSequence) null, 4097);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.wrap("", 'B');
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = '-';
      charArray0[5] = '-';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'B', 'B', 'B', 'B', '-', '-'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "]b7<T";
      charSequenceArray0[1] = (CharSequence) "dl-c(bu )+09f1Kk1";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "}A/Sl!O$17";
      charSequenceArray0[4] = (CharSequence) "}A/Sl!O$17";
      boolean boolean2 = StringUtils.containsAnyIgnoreCase("]b7<T", charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean2);
      
      String[] stringArray0 = StringUtils.split("dl-c(bu )+09f1Kk1", "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "}A/Sl!O$17", (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("]b7<T", 1, "O:Vs6zG(w*H\"Zm");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]b7<T", string1);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[4], 9);
      assertFalse(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "}A/Sl!O$17");
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.limit());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.length());
      assertEquals("}A/Sl!O$17", charBuffer0.toString());
      assertEquals(10, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) charBuffer0, (CharSequence) "", 32);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer0.limit());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(10, charBuffer0.length());
      assertEquals("}A/Sl!O$17", charBuffer0.toString());
      assertEquals(10, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(10, int2);
      
      String string2 = StringUtils.substringBefore("", "]b7<T");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.strip("vn");
      assertNotNull(string0);
      assertEquals("vn", string0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string1 = StringUtils.replacePattern("Z'96wn&iM", "Z'96wn&iM", "ARRAY AND ELEMENT CANNOT BOTH ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ARRAY AND ELEMENT CANNOT BOTH ", string1);
      
      String string2 = StringUtils.stripToNull("maxWith cannot be negativemaxWith cTnnot be negative");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("maxWith cannot be negativemaxWith cTnnot be negative", string2);
      
      String string3 = StringUtils.substringBetween("i,w&N", "", "org.apache.commons.lang3.ArrayUtils");
      assertNull(string3);
      
      StringWriter stringWriter0 = new StringWriter(3297);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "org.apache.commons.lang3.ArrayUtils", (CharSequence) stringBuffer0, 3297);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(35, int0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("7T.E|lr7%B|");
      assertNotNull(string0);
      assertEquals("7T.E|lr7%B|", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("7T.E|lr7%B|");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripStart("5<Ax", "HPBIFU^5t?M");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<Ax", string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "7T.E|lr7%B|", (CharSequence) "<Ax", 952);
      assertEquals(11, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'g';
      charArray0[1] = ';';
      charArray0[2] = '4';
      charArray0[3] = '';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "HPBIFU^5t?M", charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'g', ';', '4', ''}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, int1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "7T.E|lr7%B|";
      stringArray0[1] = "<Ax";
      stringArray0[2] = "5<Ax";
      stringArray0[3] = "7T.E|lr7%B|";
      stringArray0[4] = "HPBIFU^5t?M";
      stringArray0[5] = "5<Ax";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "=1r1h%i5*4[Fz>`i}uJ");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray1.length);
      assertEquals(6, stringArray0.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2313);
      String string0 = StringUtils.stripEnd("{S,p/'|i/,hq'vx;qv", "{S,p/'|i/,hq'vx;qv");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "{S,p/'|i/,hq'vx;qv", (-2313));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^( ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.unwrap("Lzu`^( ", "Lzu`^( ");
      assertNotNull(string0);
      assertEquals("Lzu`^( ", string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Lzu`^( ";
      objectArray0[1] = (Object) "Lzu`^( ";
      objectArray0[2] = (Object) "Lzu`^( ";
      objectArray0[3] = (Object) "The character ";
      objectArray0[4] = (Object) "The character ";
      String string1 = StringUtils.join(objectArray0, "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, objectArray0.length);
      assertEquals("Lzu`^( Supplied value must be a valid byte literal between -32768 and 32767: [Lzu`^( Supplied value must be a valid byte literal between -32768 and 32767: [Lzu`^( Supplied value must be a valid byte literal between -32768 and 32767: [The character Supplied value must be a valid byte literal between -32768 and 32767: [The character ", string1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)396;
      String string2 = StringUtils.join(shortArray0, '/');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new short[] {(short)396}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("396", string2);
      
      boolean boolean1 = StringUtils.isAllUpperCase("396");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.rotate("Lzu`^( Supplied value must be a valid byte literal between -32768 and 32767: [Lzu`^( Supplied value must be a valid byte literal between -32768 and 32767: [Lzu`^( Supplied value must be a valid byte literal between -32768 and 32767: [The character Supplied value must be a valid byte literal between -32768 and 32767: [The character ", 424);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("acter Supplied value must be a valid byte literal between -32768 and 32767: [The character Lzu`^( Supplied value must be a valid byte literal between -32768 and 32767: [Lzu`^( Supplied value must be a valid byte literal between -32768 and 32767: [Lzu`^( Supplied value must be a valid byte literal between -32768 and 32767: [The char", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Lzu`^( ", (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", (int) (short)396);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The character ", '?');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("The character "));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains("The character "));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, '?');
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string1 = StringUtils.join(booleanArray0, '?');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals("false", string1);
      
      boolean boolean0 = StringUtils.endsWithAny("The character ", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.toRootUpperCase(" ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
      
      String string3 = StringUtils.abbreviate("_8 O", 2420);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("_8 O", string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "_8 O", ')');
      assertEquals(0, int0);
      
      String string4 = StringUtils.substringBetween("` CXaM|&jq;PLfCn`b", "NiSDW");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      String string0 = StringUtils.wrap("...", 'B');
      assertNotNull(string0);
      assertEquals("B...B", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "dl-c(bu )+09f1Kk1";
      charSequenceArray0[2] = (CharSequence) "B...B";
      charSequenceArray0[3] = (CharSequence) "}A/Sl!O$17";
      charSequenceArray0[4] = (CharSequence) "}A/Sl!O$17";
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("]b7<T", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.split("dl-c(bu )+09f1Kk1", "org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.join(charArray0, '.');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Integer integer0 = new Integer(2213);
      assertNotNull(integer0);
      assertEquals(2213, (int)integer0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertFalse(predicate1.equals((Object)predicate0));
      
      boolean boolean0 = arrayList0.removeIf(predicate1);
      assertFalse(arrayList0.contains(2213));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(boolean0);
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(2213));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.reverse("?*Vc@qg/n");
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isWhitespace("n/gq@cV*?");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.defaultIfEmpty("Locale must not be null", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Locale must not be null", string1);
      
      String string2 = StringUtils.repeat('?', (-2108));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Locale must not be null";
      charSequenceArray0[2] = (CharSequence) "n/gq@cV*?";
      charSequenceArray0[3] = (CharSequence) "Locale must not be null";
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean2);
      
      byte[] byteArray0 = StringUtils.getBytes("chT9}|z!^WhEnXQechT9}|z!^WhEnXQechT9}|z!^WhEnXQechT9}|z!^WhEnXQechT9}|z!^WhEnXQechT9}|z!^WhEnXQechT9}|z!^WhEnXQechT9}|z!^WhEnXQechT9}|z!^WhEnXQe", (Charset) null);
      assertNotNull(byteArray0);
      assertEquals(144, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.substringAfter("dl-c(bu )+09f1Kk1", "dl-c(bu )+09f1Kk1");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("dl-c(bu )+09f1Kk1");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, ')');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.split("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = "\\u";
      String string3 = StringUtils.substringBeforeLast(";sxj$sxL,", string2);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(";sxj$sxL,", string3);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("dl-c(bu )+09f1Kk1"));
      assertEquals(0, linkedList0.size());
      
      String string4 = StringUtils.overlay(";sxj$sxL,", "", (-2108), (-2108));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(";sxj$sxL,", string4);
      
      boolean boolean2 = StringUtils.isNotBlank(";sxj$sxL,");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.containsOnly((CharSequence) "dl-c(bu )+09f1Kk1", "");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string5 = StringUtils.unwrap("fCn`b", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("fCn`b", string5);
      
      String string6 = StringUtils.replaceOnce("1<KYNIS7_", "6KZ.<", "");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("1<KYNIS7_", string6);
      
      String string7 = StringUtils.abbreviate("fCn`b", "Array element ", 2542);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertEquals("fCn`b", string7);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("6KZ.<");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string8 = StringUtils.overlay("Array element ", "6KZ.<", (-2586), 777);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertEquals("6KZ.<", string8);
      
      int int0 = StringUtils.length("6KZ.<");
      assertEquals(5, int0);
      
      String string9 = StringUtils.wrapIfMissing("fCn`b", "` CXaM|&jq;PL");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertEquals("` CXaM|&jq;PLfCn`b` CXaM|&jq;PL", string9);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.chomp("Comparator should not be null.");
      assertNotNull(string0);
      assertEquals("Comparator should not be null.", string0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[3] = '?';
      int int0 = StringUtils.indexOfAny((CharSequence) "TB3+vjG?Xi", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '?', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string1);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      
      String string2 = locale0.getDisplayCountry();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", string2);
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      Locale locale2 = Locale.ENGLISH;
      assertNotNull(locale2);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.getLanguage());
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      String string3 = StringUtils.upperCase("", locale2);
      assertNotNull(string3);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.getLanguage());
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.split("KscQ;JuKA\t9>", '6');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Locale.setDefault(locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      String string0 = StringUtils.lowerCase("", locale0);
      assertNotNull(string0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '%';
      charArray0[1] = 'w';
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      charArray0[2] = 'o';
      String string1 = locale0.getDisplayScript();
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", string1);
      
      Locale locale1 = locale0.stripExtensions();
      assertNotNull(locale1);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains(string1));
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertSame(locale0, locale1);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      assertNotNull(list0);
      assertFalse(set0.contains(string1));
      assertFalse(list0.contains(string1));
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertSame(locale0, locale1);
      
      charArray0[3] = '9';
      String string2 = locale0.getScript();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertSame(locale0, locale1);
      assertEquals("", string2);
      
      String string3 = locale0.getDisplayScript();
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertSame(locale0, locale1);
      assertEquals("", string3);
      
      charArray0[4] = ';';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'%', 'w', 'o', '9', ';'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.replaceEach("*.vqe9d/*HM", stringArray0, stringArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(188, stringArray0.length);
      assertEquals("*.vqe9d/*HM", string4);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(188, stringArray0.length);
      assertFalse(boolean1);
      
      String string5 = StringUtils.join((Object[]) stringArray0, '%', 4097, 4097);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals(188, stringArray0.length);
      assertEquals("", string5);
      
      String string6 = StringUtils.trim("");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      
      int int0 = StringUtils.compare("", "icalMarks}+");
      assertEquals((-11), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertFalse(int1 == int0);
      assertEquals(188, stringArray0.length);
      assertEquals(0, int1);
      
      String string7 = StringUtils.strip("");
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string5));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      
      String string0 = StringUtils.upperCase("<NAMCcgs`kU", locale0);
      assertNotNull(string0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("<NAMCCGS`KU", string0);
      
      Locale locale1 = Locale.JAPAN;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja_JP", locale1.toString());
      assertNotSame(locale1, locale0);
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertNotNull(string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja_JP", locale1.toString());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isMixedCase("<NAMCCGS`KU");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("<NAMCCGS`KU");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "<NAMCcgs`kU", (CharSequence) "<NAMCcgs`kU", 8192);
      assertEquals(0, int0);
      
      String string2 = StringUtils.truncate("zjN#F'w4jWoWLi", 363, 363);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "<NAMCcgs`kU", (CharSequence) "<NAMCcgs`kU");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Object varargs must not be null";
      stringArray0[1] = "2";
      stringArray0[2] = ":";
      stringArray0[3] = "` CXaM|&jq;PL";
      stringArray0[4] = "y0";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(5, stringArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = "'U8tN'U8tN";
      String string1 = StringUtils.repeat((String) null, "", (-2695));
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-2695));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.truncate(" ", 15);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale1.getCountry());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      int int0 = StringUtils.getFuzzyDistance("TB3+vjG?Xi", " ", locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertNotSame(locale0, locale1);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEndIgnoreCase(">vJ2@ix',wSJv_", "TB3+vjG?Xi");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(">vJ2@ix',wSJv_", string1);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[3];
      locale_FilteringModeArray0[0] = locale_FilteringMode0;
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale_FilteringModeArray0[1] = locale_FilteringMode1;
      locale_FilteringModeArray0[2] = locale_FilteringMode0;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringModeArray0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      assertEquals(3, locale_FilteringModeArray0.length);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean0 = enumSet0.add(locale_FilteringMode2);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode0));
      assertEquals(2, enumSet0.size());
      assertEquals(3, locale_FilteringModeArray0.length);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode2);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode0);
      assertTrue(boolean0);
      
      boolean boolean1 = treeSet0.removeAll(enumSet0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode2));
      assertFalse(boolean1 == boolean0);
      assertEquals(2, enumSet0.size());
      assertEquals(3, locale_FilteringModeArray0.length);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode0, locale_FilteringMode2);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("TB3+vjG?Xi", "3_a33!Ew)bM!`W\"DAJ", 1484);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) " ", (CharSequence[]) stringArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.join((Object[]) locale_FilteringModeArray0, " ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(3, locale_FilteringModeArray0.length);
      assertEquals("IGNORE_EXTENDED_RANGES IGNORE_EXTENDED_RANGES IGNORE_EXTENDED_RANGES", string2);
      
      int int1 = StringUtils.ordinalIndexOf(">vJ2@ix',wSJv_", " ", (-702));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "TB3+vjG?Xi";
      charSequenceArray0[1] = (CharSequence) "TB3+vjG?Xi";
      charSequenceArray0[2] = (CharSequence) "TB3+vjG?Xi";
      charSequenceArray0[4] = (CharSequence) "TB3+vjG?Xi";
      charSequenceArray0[5] = (CharSequence) "TB3+vjG?Xi";
      charSequenceArray0[7] = (CharSequence) "TB3+vjG?Xi";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = "Cannot clone Cloneable type ";
      String string1 = StringUtils.appendIfMissingIgnoreCase("Cannot clone Cloneable type ", charSequenceArray0[2], charSequenceArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, charSequenceArray0.length);
      assertEquals("Cannot clone Cloneable type TB3+vjG?Xi", string1);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[7], (CharSequence) "Cannot clone Cloneable type ");
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[6]);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string2 = null;
      String string3 = StringUtils.leftPad("TB3+vjG?Xi", 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("TB3+vjG?Xi", string3);
      
      String string4 = StringUtils.removeFirst("Cannot clone Cloneable type ", "ed\"2=3Kl>");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("Cannot clone Cloneable type ", string4);
      
      String string5 = "\"(";
      String string6 = "";
      boolean boolean2 = true;
      int int1 = StringUtils.compare(string5, string6, boolean2);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(int1 == int0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string6));
      assertEquals(2, int1);
      
      String string7 = StringUtils.remove(string2, string4);
      assertNull(string7);
      assertFalse(string4.equals((Object)string6));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      
      String string8 = "A\\1;8Et$6,ykZ.b";
      String string9 = " ";
      String string10 = StringUtils.replaceChars(string0, string8, string9);
      assertNotNull(string10);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string5));
      assertTrue(string0.equals((Object)string4));
      assertEquals("Canno clone Cloneale pe ", string10);
      
      boolean boolean3 = StringUtils.isAllUpperCase(string10);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string10));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string5));
      assertTrue(string0.equals((Object)string4));
      assertFalse(boolean3);
      
      String string11 = StringUtils.stripStart(string1, string9);
      assertNotNull(string11);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string8));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string9));
      assertFalse(string1.equals((Object)string10));
      assertFalse(string1.equals((Object)string5));
      assertEquals(8, charSequenceArray0.length);
      assertEquals("Cannot clone Cloneable type TB3+vjG?Xi", string11);
      
      boolean boolean4 = StringUtils.isBlank(string10);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string11));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string10));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string9));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string11));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string10));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string11));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string0.equals((Object)string11));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string8));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string9));
      assertFalse(string0.equals((Object)string10));
      assertFalse(string0.equals((Object)string5));
      assertTrue(string0.equals((Object)string4));
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      
      int int2 = 21;
      int int3 = StringUtils.lastOrdinalIndexOf(string3, string6, int2);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string11));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string8));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(string3.equals((Object)string5));
      assertFalse(string3.equals((Object)string10));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string8));
      assertFalse(string3.equals((Object)string6));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string11));
      assertFalse(string3.equals((Object)string9));
      assertEquals(11, int3);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("TcRF", supplier0);
      assertNotNull(string0);
      assertEquals("TcRF", string0);
      
      String string1 = "&**ffK!0";
      int int0 = (-1967);
      String string2 = StringUtils.rotate("&**ffK!0", (-1967));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("0&**ffK!", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("p{InCombiningDiacriticalMarks}+TB3+vjG?Xi", ";u!splZ7o(is]");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 13
         // ;u!splZ7o(is]
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Comparator should not be null.", "Comparator should not be null.");
      assertNotNull(string0);
      assertEquals("Comparator should not be null.", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("Comparator should not be null.");
      assertTrue(boolean0);
      
      String string1 = StringUtils.reverseDelimited("zJ\"@Kmx2OzYr>Y", '@');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Kmx2OzYr>Y@zJ\"", string1);
      
      String string2 = StringUtils.substringBeforeLast("Comparator should not be null.", "Comparator should not be null.");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "Kmx2OzYr>Y@zJ\"";
      stringArray0[2] = "Comparator should not be null.";
      stringArray0[3] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.lowerCase(":[{$#WYA");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(":[{$#wya", string3);
      
      String string4 = StringUtils.replaceFirst("", "Kmx2OzYr>Y@zJ\"", "The type must not be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains("Comparator should not be null."));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains("Comparator should not be null."));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String[] stringArray2 = StringUtils.split(":[{$#wya", "Kmx2OzYr>Y@zJ\"", 45);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      String string5 = StringUtils.wrap("|?M69|am@q<'kviA", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("|?M69|am@q<'kviA", string5);
      
      String string6 = StringUtils.toRootLowerCase("Array and element cannot both be null");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("array and element cannot both be null", string6);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Comparator should not be null.", "Comparator should not be null.");
      assertNotNull(string0);
      assertEquals("Comparator should not be null.", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("Comparator should not be null.");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringBeforeLast("Comparator should not be null.", "Comparator should not be null.");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "Comparator should not be null.";
      stringArray0[2] = "Comparator should not be null.";
      stringArray0[3] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.lowerCase("Comparator should not be null.");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("comparator should not be null.", string2);
      
      String string3 = StringUtils.replaceFirst("", "Comparator should not be null.", "The type must not be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains("Comparator should not be null."));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains("Comparator should not be null."));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String[] stringArray2 = StringUtils.split("comparator should not be null.", "Comparator should not be null.", 45);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      String string4 = StringUtils.wrap("|?M69|am@q<'kviA", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("|?M69|am@q<'kviA", string4);
      
      String string5 = StringUtils.toRootLowerCase("Array and element cannot both be null");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("array and element cannot both be null", string5);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.difference(", '", "Ep5sc`&d>a");
      assertNotNull(string0);
      assertEquals("Ep5sc`&d>a", string0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)5;
      byteArray0[4] = (byte)0;
      String string1 = StringUtils.join(byteArray0, '');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)5, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals("00500", string1);
      
      String string2 = StringUtils.replaceIgnoreCase((String) null, "hould not be null.", "Ep5sc`&d>a");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.endsWith("Ep5sc`&d>a", (CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("00500", ", '", "LjYxN~X|]lDuA*n");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("00500", string3);
      
      String[] stringArray0 = StringUtils.split(" in an array of ", "00500", (-2864));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isWhitespace("00500");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.defaultIfEmpty("comparator", " has no clone method");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("comparator", string4);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("s|[>I}>l(uN", "");
      assertNotNull(string0);
      assertEquals("s|[>I}>l(uN", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "s|[>I}>l(uN", (CharSequence) "");
      assertEquals(12, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("s|[>I}>l(uN", "icalMarks}+", "s|[>I}>l(uN", 1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("s|[>I}>l(uN", string1);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = StringUtils.center("", (-1103), "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Vector<Object> vector0 = null;
      try {
        vector0 = new Vector<Object>((-3327), (-3327));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -3327
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = ", '";
      String string1 = "Ep5sc`&d>a";
      String string2 = StringUtils.difference(", '", "Ep5sc`&d>a");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Ep5sc`&d>a", string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)5;
      byteArray0[4] = (byte)0;
      String string3 = StringUtils.toString(byteArray0, (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)5, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals("\u0000\u0000\u0005\u0000\u0000", string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) ", '", (CharSequence) "Ep5sc`&d>a");
      assertFalse(boolean0);
      
      String string4 = StringUtils.rightPad("i%~V:u55&HV", 692);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("i%~V:ustring4);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = null;
      String string6 = StringUtils.center("i%~V:u55&HV", (int) (byte)0, (String) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("i%~V:u55&HV", string6);
      
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      String string0 = StringUtils.join(booleanArray0, 'O');
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals("falseOfalseOfalseOfalseOfalseOfalse", string0);
      
      String string1 = StringUtils.stripToNull("falseOfalseOfalseOfalseOfalseOfalse");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("falseOfalseOfalseOfalseOfalseOfalse", string1);
      
      String string2 = StringUtils.repeat("", 76);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.unwrap(")&D4MIN@J\"V.~\"Yq", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(")&D4MIN@J\"V.~\"Yq", string3);
      
      short[] shortArray0 = new short[0];
      String string4 = StringUtils.join(shortArray0, '}');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = StringUtils.substringAfter("dl-c(bu )+09f1Kk1", "dl-c(bu )+09f1Kk1");
      assertNotNull(string0);
      assertEquals("", string0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, ')');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.split("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.substringBeforeLast("", "ejxL,");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(""));
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "dl-c(bu )+09f1Kk1", "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.center("[wlND ELEMENT CANNOT BOTH BE NULL", 1254, 'S');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Array element ";
      String string0 = StringUtils.stripEnd("{S,p/'|i/,hq'vx;qv", "{S,p/'|i/,hq'vx;qv");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "Array element ", 2515);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Array element ", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      String string1 = StringUtils.wrap("Array element ", 'E');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("EArray element E", string1);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string1);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(locale0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      assertNotNull(list0);
      assertFalse(linkedHashSet0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string2 = locale0.getDisplayCountry();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", string2);
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      Locale locale2 = Locale.ENGLISH;
      assertNotNull(locale2);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      
      String string3 = StringUtils.upperCase("", locale2);
      assertNotNull(string3);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.split("KscQ;JuKA\t9>", '6');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(""));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains(""));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string4 = StringUtils.join(iterator0, '6');
      assertNotNull(string4);
      assertFalse(arrayDeque0.contains(""));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string4);
      
      String string5 = StringUtils.wrap((String) null, '*');
      assertNull(string5);
      
      boolean boolean1 = StringUtils.isAlpha((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.replaceChars("KscQ;JuKA\t9>", "PU", "p[sn7SX6G+='gUOYPkp");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("KscQ;JuKA\t9>", string6);
      
      String string7 = StringUtils.stripStart("Object varargs must not be null", "uT(W4<%R8");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals("Object varargs must not be null", string7);
      
      String[] stringArray1 = StringUtils.substringsBetween((String) null, "", "PU");
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = StringUtils.right("54\".", 90);
      assertNotNull(string0);
      assertEquals("54\".", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("54\".");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "54\".";
      charSequenceArray0[1] = (CharSequence) "54\".";
      charSequenceArray0[2] = (CharSequence) "54\".";
      charSequenceArray0[3] = (CharSequence) "54\".";
      charSequenceArray0[4] = (CharSequence) "54\".";
      charSequenceArray0[5] = (CharSequence) "54\".";
      charSequenceArray0[6] = (CharSequence) "54\".";
      boolean boolean1 = StringUtils.endsWithAny("54\".", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.substring("Ca\"gdh .Giy", 90, 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.chomp("54\".", "54\".");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.rightPad((String) null, 90, "");
      assertNull(string3);
      
      String string4 = StringUtils.trimToEmpty("org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string4);
      
      boolean boolean2 = StringUtils.isAllLowerCase(charSequenceArray0[0]);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean2);
      
      String string5 = StringUtils.substringAfter("", 0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      
      boolean boolean3 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.equalsIgnoreCase("", "54\".");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '0');
      assertNotNull(string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 518;
      floatArray0[1] = (float) 518;
      floatArray0[2] = (float) '0';
      String string1 = StringUtils.join(floatArray0, '\\');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new float[] {518.0F, 518.0F, 48.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals("518.0\\518.0\\48.0", string1);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains('0'));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains('0'));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      String string2 = StringUtils.join(iterator0, 'o');
      assertNotNull(string2);
      assertFalse(arrayDeque0.contains('0'));
      assertFalse(string2.equals((Object)string1));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceChars("", "Object varargs must not be null", "518.0)8.0\u00048.0");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) ".>Livn3";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "518.0)8.0\u00048.0";
      String string4 = StringUtils.stripStart("rz", "rz");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "fljxESn)F^P;HU*^=d";
      charSequenceArray0[5] = (CharSequence) "518.0)8.0\u00048.0";
      charSequenceArray0[6] = (CharSequence) null;
      String[] stringArray0 = StringUtils.substringsBetween("T9", "org.apache.commons.lang3.CharSequenceUtils", "");
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "Object varargs must not be null");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.trimToNull("");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.of(locale_FilteringMode1, locale_FilteringMode1, locale_FilteringMode0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertEquals(1, enumSet1.size());
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(enumSet1, enumSet0);
      
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean0 = enumSet1.add(locale_FilteringMode2);
      assertTrue(enumSet1.contains(locale_FilteringMode2));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode2));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode2));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode2.equals((Object)locale_FilteringMode0));
      assertEquals(2, enumSet1.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode2);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      assertSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode2);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode2, locale_FilteringMode0);
      assertTrue(boolean0);
      
      EnumSet<Locale.FilteringMode> enumSet2 = EnumSet.complementOf(enumSet0);
      assertNotNull(enumSet2);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertFalse(enumSet0.contains(locale_FilteringMode2));
      assertFalse(enumSet2.contains(locale_FilteringMode0));
      assertTrue(enumSet2.contains(locale_FilteringMode2));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode2));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet0));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertEquals(1, enumSet0.size());
      assertEquals(4, enumSet2.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode2);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      
      Iterator<Locale.FilteringMode> iterator0 = enumSet2.iterator();
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertFalse(enumSet0.contains(locale_FilteringMode2));
      assertFalse(enumSet2.contains(locale_FilteringMode0));
      assertTrue(enumSet2.contains(locale_FilteringMode2));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode2));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet0.equals((Object)enumSet2));
      assertFalse(enumSet2.equals((Object)enumSet0));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertEquals(1, enumSet0.size());
      assertEquals(4, enumSet2.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode2);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      
      String string0 = StringUtils.join(iterator0, "Threshold must not be negative");
      assertNotNull(string0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertFalse(enumSet0.contains(locale_FilteringMode2));
      assertFalse(enumSet2.contains(locale_FilteringMode0));
      assertTrue(enumSet2.contains(locale_FilteringMode2));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode2));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet0.equals((Object)enumSet2));
      assertFalse(enumSet2.equals((Object)enumSet0));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertEquals(1, enumSet0.size());
      assertEquals(4, enumSet2.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode2);
      assertSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertEquals("AUTOSELECT_FILTERINGThreshold must not be negativeEXTENDED_FILTERINGThreshold must not be negativeIGNORE_EXTENDED_RANGESThreshold must not be negativeMAP_EXTENDED_RANGES", string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("dl-c(bu )+09f1Kk1");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, ')');
      assertNotNull(string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.substringBeforeLast("dl-c(bu )+09f1Kk1", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("dl-c(bu )+09f1Kk1", string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("\r", "");
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      
      boolean boolean2 = StringUtils.isAlphanumeric("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string1);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(locale0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) linkedHashSet0, locale_FilteringMode0);
      assertNotNull(list0);
      assertFalse(linkedHashSet0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string2 = locale0.getDisplayCountry();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", string2);
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      Locale locale2 = Locale.ENGLISH;
      assertNotNull(locale2);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      
      String string3 = StringUtils.upperCase("", locale2);
      assertNotNull(string3);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.split("KscQ;JuKA\t9>", '6');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      boolean boolean1 = arrayList0.add("Object varargs must not be null");
      assertTrue(arrayList0.contains("Object varargs must not be null"));
      assertFalse(arrayList0.contains(""));
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean1);
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(arrayList0.contains("Object varargs must not be null"));
      assertFalse(arrayList0.contains(""));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains(""));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      boolean boolean2 = arrayList1.addAll((Collection<? extends String>) arrayList0);
      assertTrue(arrayList1.contains("Object varargs must not be null"));
      assertFalse(arrayList1.contains(""));
      assertTrue(arrayList0.contains("Object varargs must not be null"));
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(arrayList0, arrayList1);
      assertTrue(boolean2);
      
      String string4 = StringUtils.join((Iterator<?>) listIterator0, 'B');
      assertNotNull(string4);
      assertTrue(arrayList0.contains(string4));
      assertFalse(arrayList0.contains(""));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotSame(arrayList0, arrayList1);
      assertEquals("Object varargs must not be null", string4);
      
      String string5 = StringUtils.rightPad("G9MLM", (-1339));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("G9MLM", string5);
      
      String string6 = StringUtils.unwrap("B*fNG.6", '+');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("B*fNG.6", string6);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("(9wC6Vx'Y0q_", "  b`{Q}D| `0M", (-2057));
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("STe,i.");
      assertNotNull(string0);
      assertEquals("STe,i.", string0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertEquals(1, enumSet0.size());
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet1 = EnumSet.of(locale_FilteringMode1, locale_FilteringMode0, locale_FilteringMode1);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_FilteringMode1));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertEquals(2, enumSet1.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertNotSame(enumSet1, enumSet0);
      
      String string1 = StringUtils.center(",nc%y8!", (-976), ",nc%y8!");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(",nc%y8!", string1);
      
      Vector<Object> vector0 = new Vector<Object>(1654, (-2540));
      assertNotNull(vector0);
      assertFalse(vector0.contains((-2540)));
      assertEquals(1654, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      String string2 = StringUtils.join((Iterable<?>) enumSet0, 'V');
      assertNotNull(string2);
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertFalse(enumSet0.contains(locale_FilteringMode1));
      assertFalse(locale_FilteringMode0.equals((Object)locale_FilteringMode1));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(1, enumSet0.size());
      assertNotSame(locale_FilteringMode0, locale_FilteringMode1);
      assertNotSame(enumSet0, enumSet1);
      assertEquals("IGNORE_EXTENDED_RANGES", string2);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("...", '3');
      assertNotNull(string0);
      assertEquals("3...3", string0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      String string1 = locale0.getExtension('a');
      assertNull(string1);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      Locale locale1 = Locale.ITALIAN;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale1, locale0);
      
      String string2 = locale0.getDisplayLanguage(locale1);
      assertNotNull(string2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("it", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("francese", string2);
      
      shortArray0[1] = (short)6;
      shortArray0[2] = (short) (-2423);
      shortArray0[3] = (short)57;
      String string3 = StringUtils.join(shortArray0, 'F');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new short[] {(short) (-1), (short)6, (short) (-2423), (short)57}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals("-1F6F-2423F57", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "-1F6F-2423F57";
      charSequenceArray0[3] = (CharSequence) "D:$K<dru0x!_rO)?%Dq";
      charSequenceArray0[4] = (CharSequence) "-1F6F-2423F57";
      boolean boolean0 = StringUtils.startsWithAny("...", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.repeat("...", "icalMarks}+", (int) (short)6);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("...icalMarks}+...icalMarks}+...icalMarks}+...icalMarks}+...icalMarks}+...", string4);
      
      String string5 = StringUtils.prependIfMissing("LQ@]d(9|s", charSequenceArray0[2], charSequenceArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(5, charSequenceArray0.length);
      assertEquals("-1F6F-2423F57LQ@]d(9|s", string5);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "-1F6F-2423F57LQ@]d(9|s", "org.apache.commons.lang3.ObjectUtils");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = StringUtils.repeat("The String must not be empty", 55);
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern("The String must not be empty", "The String must not be empty");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains("The String must not be empty"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains("The String must not be empty"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string2 = StringUtils.join(iterator0, '\\');
      assertNotNull(string2);
      assertFalse(arrayDeque0.contains("The String must not be empty"));
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceChars("The String must not be empty", "]b7<T", "Object varargs must not be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("che String must not be empty", string3);
      
      String string4 = StringUtils.stripStart("d@dj>1U{)tLw+>k'|", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String[] stringArray0 = StringUtils.substringsBetween("", "9~pfjH{X", "54\".54\".");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "The String must not be empty", "The String must not be empty");
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("che String must not be empty", "9~pfjH{X", 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = StringUtils.defaultString("T#NV7-5|2", "org.apache.commons.lang3.Charsets");
      assertNotNull(string0);
      assertEquals("T#NV7-5|2", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.Charsets", (CharSequence) "T#NV7-5|2", 7);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[1];
      String string1 = StringUtils.stripToNull("s");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("s", string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "al*7#0(fh";
      String string2 = StringUtils.join((Object[]) stringArray0, "qQ^e.gAOzpC/", 7, (-1));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = StringUtils.wrap("", 'B');
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[2] = 'B';
      int int0 = StringUtils.indexOf((CharSequence) "", 9);
      assertEquals((-1), int0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) charBuffer0, 45);
      assertFalse(int1 == int0);
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, int1);
      
      String string1 = StringUtils.substringBefore("0(zE2%n:sA}Vm", "Strings must not be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0(zE2%n:sA}Vm", string1);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, (-440));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.rightPad("]hT95!St~v*=SD", 520);
      assertNotNull(string0);
      assertEquals("]hT95!St~vstring0);
      
      String string1 = StringUtils.unwrap("%\"b4^Q+xngO>Z!B)Dt", '\u001A');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("%\"b4^Q+xngO>Z!B)Dt", string1);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      
      String string2 = StringUtils.substringBefore((String) null, "I{]");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "I{]";
      charSequenceArray0[2] = (CharSequence) "%\"b4^Q+xngO>Z!B)Dt";
      charSequenceArray0[5] = (CharSequence) "]hT95!St~v*=SD";
      boolean boolean1 = StringUtils.endsWithAny("]hT95!St~vcharSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      String string0 = StringUtils.substringBetween("w0?Y&Nr%m<", "?y/qg", "w0?Y&Nr%m<");
      assertNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "?y/qg", (CharSequence) "?y/qg", 66);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = StringUtils.wrap("", 'B');
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = '-';
      charArray0[5] = '-';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'B', 'B', 'B', 'B', '-', '-'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "]b7<T";
      charSequenceArray0[1] = (CharSequence) "dl-c(bu )+09f1Kk1";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "}A/Sl!O$17";
      charSequenceArray0[4] = (CharSequence) "}A/Sl!O$17";
      boolean boolean2 = StringUtils.containsAnyIgnoreCase("]b7<T", charSequenceArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean2);
      
      String[] stringArray0 = StringUtils.split("dl-c(bu )+09f1Kk1", "org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "}A/Sl!O$17", (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("]b7<T", 1, "O:Vs6zG(w*H\"Zm");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]b7<T", string1);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[4], 9);
      assertFalse(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) charBuffer0, (CharSequence) "", 32);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, int2);
      
      String string2 = StringUtils.substringBefore("", "]b7<T");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "The String must not be emptyThe String must not be empty", (CharSequence) "ch", 39);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("The String must not be emptyThe String must not be empty");
      assertTrue(boolean0);
      
      String string0 = StringUtils.leftPad("The String must not be emptyThe String must not be empty", 5809, "ch");
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("+2J!aT<=", 'k');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("k+2J!aT<=k", string1);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("{}");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.rotate((String) null, 0);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)56;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      String string1 = StringUtils.toEncodedString(byteArray0, charset0);
      assertNotNull(string1);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertArrayEquals(new byte[] {(byte)0, (byte)69, (byte)0, (byte)28, (byte)0, (byte) (-108), (byte)109, (byte)56}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("\u0000E\u0000\u001C\u0000\uFFFDm8", string1);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0));
      assertEquals(0, linkedList0.size());
      
      String string2 = StringUtils.join((List<?>) linkedList0, '.', (int) (byte)69, (int) (byte)0);
      assertNotNull(string2);
      assertFalse(linkedList0.contains(0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, linkedList0.size());
      assertEquals("", string2);
      
      String string3 = StringUtils.removePattern((String) null, "\r");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Array element ";
      String string0 = StringUtils.stripStart("]=<AD", "Array element ");
      assertNotNull(string0);
      assertEquals("]=<AD", string0);
      
      String string1 = StringUtils.wrapIfMissing("z", 'T');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("TzT", string1);
      
      boolean boolean0 = StringUtils.isNumeric("{S,p/'|i/,hq'vx;qv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("[wl", "[wl", "Threshold must not be negative");
      assertNotNull(string0);
      assertEquals("Threshold must not be negative", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Threshold must not be negative", (CharSequence) "Threshold must not be negative");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("Threshold must not be negative", charSequence0);
      
      int int0 = StringUtils.countMatches((CharSequence) "Threshold must not be negative", 'l');
      assertEquals(1, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Threshold must not be negative");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 'l';
      floatArray0[1] = (float) 'l';
      floatArray0[2] = (float) 'l';
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 'l';
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) 1;
      String string1 = StringUtils.join(floatArray0, 'J');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertArrayEquals(new float[] {108.0F, 108.0F, 108.0F, 1.0F, 1.0F, 108.0F, 1.0F, 1.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals("108.0J108.0J108.0J1.0J1.0J108.0J1.0J1.0", string1);
      
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertEquals(10, stringArray0.length);
      assertEquals("T", string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "[wl", (CharSequence) "Threshold must not be negative");
      assertFalse(boolean0);
      
      int int1 = StringUtils.ordinalIndexOf("[wl", "[wl", 1);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = StringUtils.getJaroWinklerDistance("Threshold must not be negative", "Threshold must not be negative");
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean1 = StringUtils.isNumeric("108.0J108.0J108.0J1.0J1.0J108.0J1.0J1.0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 108.0F;
      doubleArray0[1] = (double) 108.0F;
      doubleArray0[2] = (double) 1.0F;
      doubleArray0[3] = (double) 108.0F;
      doubleArray0[4] = (double) 'l';
      String string3 = StringUtils.join(doubleArray0, 'G');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertArrayEquals(new double[] {108.0, 108.0, 1.0, 108.0, 108.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals("108.0G108.0G1.0G108.0G108.0", string3);
      
      String string4 = StringUtils.replaceEachRepeatedly("108.0J108.0J108.0J1.0J1.0J108.0J1.0J1.0", stringArray0, stringArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(10, stringArray0.length);
      assertEquals("108.0J108.0J108.0J1.0J1.0J108.0J1.0J1.0", string4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "108.0J108.0J108.0J1.0J1.0J108.0J1.0J1.0", 1, 530);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.removeStartIgnoreCase("[wl", "108.0J108.0J108.0J1.0J1.0J108.0J1.0J1.0");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("[wl", string5);
      
      String string6 = StringUtils.deleteWhitespace("2");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("2", string6);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = StringUtils.stripAccents("+I.\"X'mbdKCOC7lBL");
      assertNotNull(string0);
      assertEquals("+I.\"X'mbdKCOC7lBL", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isNumeric("+I.\"X'mbdKCOC7lBL");
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[6];
      stringArray0[0] = "+I.\"X'mbdKCOC7lBL";
      stringArray0[1] = "+I.\"X'mbdKCOC7lBL";
      stringArray0[2] = "+I.\"X'mbdKCOC7lBL";
      stringArray0[3] = "+I.\"X'mbdKCOC7lBL";
      stringArray0[4] = "+I.\"X'mbdKCOC7lBL";
      stringArray0[5] = "org.apache.commons.lang3.CharSequenceUtils";
      String string1 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(6, stringArray0.length);
      assertEquals("", string1);
      
      String string2 = StringUtils.lowerCase("+I.\"X'mbdKCOC7lBL");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("+i.\"x'mbdkcoc7lbl", string2);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      String string1 = "Supplied value mus be a valid byte lieral between -32768 and 32767: [";
      String string2 = StringUtils.leftPad("Supplied value mus be a valid byte lieral between -32768 and 32767: [", 322);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("                                                                                                                                                                                                                                                             Supplied value mus be a valid byte lieral between -32768 and 32767: [", string2);
      
      String string3 = "org.apache.commons.lang3.LocaleUtils";
      String string4 = StringUtils.stripStart("org.apache.commons.lang3.LocaleUtils", "dRmV9DYS|LyDHe+EG$");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("org.apache.commons.lang3.LocaleUtils", string4);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll("", "oU)?(z");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 1
         // oU)?(z
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chomp("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String string2 = StringUtils.wrapIfMissing("p{InCombiningDiacriticalMarks}+", 'J');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Jp{InCombiningDiacriticalMarks}+J", string2);
      
      String string3 = StringUtils.remove("Minimum abbreviation width with offset is %d", '(');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Minimum abbreviation width with offset is %d", string3);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = StringUtils.left("Thecter ", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replace("", "Thecter ", "", 0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.rightPad("dl-c(bu )+09f1Kk1", 0, 'd');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("dl-c(bu )+09f1Kk1", string2);
      
      String string3 = StringUtils.deleteWhitespace("dl-c(bu )+09f1Kk1");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("dl-c(bu)+09f1Kk1", string3);
      
      String string4 = StringUtils.stripStart("", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.stripAccents("");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'A', '1', '1', '1'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.defaultString((String) null);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "", (-3));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = StringUtils.stripToNull(", Length: ");
      assertNotNull(string0);
      assertEquals(", Length:", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = ", Length: ";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(5, stringArray0.length);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Array element ";
      charSequenceArray0[1] = (CharSequence) "Array element ";
      String string0 = StringUtils.removePattern("Array element ", (String) null);
      assertNotNull(string0);
      assertEquals("Array element ", string0);
      
      charSequenceArray0[2] = (CharSequence) "Array element ";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.left("?c[Y4b", 4868);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("?c[Y4b", string1);
      
      String string2 = StringUtils.substringAfterLast("Array element ", 8189);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.chomp("Array element ");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Array element ", string3);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      
      ListIterator<String> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.substringAfterLast("54\".54\".", "yPy^<l{D,v7Yd[h|`");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.reverse("G&T#\"tu@Ck");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("kC@ut\"#T&G", string1);
      
      String string2 = StringUtils.left("", (-1556));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Array element ";
      charSequenceArray0[1] = (CharSequence) "Array element ";
      String string0 = StringUtils.removePattern("Array element ", (String) null);
      assertNotNull(string0);
      assertEquals("Array element ", string0);
      
      charSequenceArray0[2] = (CharSequence) "Array element ";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.left((String) null, 4868);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfter("4}PUKpeOm_#L*lNf{z", 97);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String[] stringArray0 = new String[19];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(19, stringArray0.length);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace(stringArray0[0]);
      assertFalse(boolean0);
      assertEquals(19, stringArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[8];
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      String string1 = StringUtils.join(floatArray0, '>');
      assertEquals("0.0>0.0>0.0>0.0>0.0>0.0>0.0>0.0", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = StringUtils.remove("I/E#\"j]ae\"f`wU[[", "I/E#\"j]ae\"f`wU[[");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripStart("I/E#\"j]ae\"f`wU[[", "V=>WGN");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("I/E#\"j]ae\"f`wU[[", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("aF*I(:~", "PUdl-c(bu )+09f1K[FV%c-!1r|YFk9", "  M");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[17];
      charArray0[0] = '%';
      charArray0[1] = 'P';
      charArray0[2] = '*';
      charArray0[4] = '%';
      charArray0[5] = '%';
      String string2 = StringUtils.join(charArray0, '%');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(17, charArray0.length);
      assertEquals("%%P%*%\u0000%%%%%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000%\u0000", string2);
      
      String[] stringArray1 = StringUtils.split("", '!');
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      String string3 = StringUtils.unwrap("Exception cloning Cloneable type ", "I/E#\"j]ae\"f`wU[[");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Exception cloning Cloneable type ", string3);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "@", false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = StringUtils.removeFirst("clone", "clone");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compareIgnoreCase("", "", true);
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.left((String) null, (-2669));
      assertNull(string2);
      
      String string3 = StringUtils.removeFirst("The character ", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals("The character ", string3);
      
      String string4 = StringUtils.substringBetween("TB3+vjG?Xi", (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.chop((String) null);
      assertNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      String string6 = StringUtils.substringBetween("clone", (String) null, "T9");
      assertNull(string6);
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string7 = StringUtils.left("ch", (-2669));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
      
      String string8 = StringUtils.defaultIfBlank((String) null, (String) null);
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^( ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.chop("Lzu`^( ");
      assertNotNull(string0);
      assertEquals("Lzu`^(", string0);
      
      boolean boolean1 = StringUtils.startsWith("Lzu`^(", "Lzu`^( ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = '1';
      charArray0[2] = 'n';
      int int0 = StringUtils.indexOfAny((CharSequence) "Lzu`^( ", charArray0);
      assertArrayEquals(new char[] {'\\', '1', 'n'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.repeat('2', (-1));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = StringUtils.difference(")&D4MIN@J\"V.~\"Yq", ")&D4MIN@J\"V.~\"Yq");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWith(")&D4MIN@J\"V.~\"Yq", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("X!]DI~e[W|v SHCf$$0", supplier0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("X!]DI~e[W|v SHCf$$0", string1);
      
      String string2 = StringUtils.wrap("Search and Replace array lengths don't match: ", ',');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(",Search and Replace array lengths don't match: ,", string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)101;
      String string3 = StringUtils.join(byteArray0, ',');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte) (-11), (byte)9, (byte)81, (byte) (-118), (byte)101}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("4,0,-11,9,81,-118,101", string3);
      
      String string4 = StringUtils.toString(byteArray0, (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte) (-11), (byte)9, (byte)81, (byte) (-118), (byte)101}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("\u0004\u0000\uFFFD\tQ\uFFFDe", string4);
      
      boolean boolean2 = StringUtils.endsWith("4,0,-11,9,81,-118,101", "\u0004\u0000\uFFFD\tQ\uFFFDe");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("}R1AMjL", "\u0004\u0000\uFFFD\tQ\uFFFDe", "}R1AMjL");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("}R1AMjL", string5);
      
      String[] stringArray0 = StringUtils.split(" in an array of ", "4,0,-11,9,81,-118,101", 256);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean3 = StringUtils.isWhitespace("}R1AMjL");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string6 = StringUtils.defaultIfEmpty("", "");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      String string7 = StringUtils.repeat('L', (int) (byte)0);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      
      boolean boolean4 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string1 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.rightPad((String) null, 11);
      assertNull(string1);
      
      int int0 = StringUtils.compare("", "", true);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBetween("1", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastOrdinalIndexOf("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", 11);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(91, int2);
      
      boolean boolean2 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.trimToNull((String) null);
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 91);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.trimToEmpty("...");
      assertNotNull(string4);
      assertEquals("...", string4);
      
      int int3 = StringUtils.compareIgnoreCase((String) null, "");
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "...", 2262);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals((-1), int4);
      
      String[] stringArray1 = StringUtils.split("q2#V7Q7Et#v^v&=/");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      int int5 = StringUtils.lastIndexOf((CharSequence) "1", (CharSequence) "1");
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertTrue(int5 == int0);
      assertEquals(0, int5);
      
      boolean boolean3 = StringUtils.isMixedCase("");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string5 = StringUtils.getDigits("&C_9|S<f}teZ /i(M");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertEquals("9", string5);
      
      String string6 = StringUtils.abbreviateMiddle("...", "9", 1481);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertEquals("...", string6);
      
      String string7 = StringUtils.rotate("...", 2262);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertEquals("...", string7);
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("}A/Sl!O$17").when(supplier0).get();
      String string1 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("}A/Sl!O$17", string1);
      
      String string2 = StringUtils.rotate("yq", 115);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("qy", string2);
      
      String string3 = StringUtils.removeFirst((String) null, "aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Minimum abbreviation width is %d");
      assertNotNull(string0);
      assertEquals("Minimumabbreviationwidthis%d", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Minimumabbreviationwidthis%d", (CharSequence) "Minimum abbreviation width is %d", 0);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width is %d";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width is %d";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Minimumabbreviationwidthis%d", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.ordinalIndexOf("Minimumabbreviationwidthis%d", "Minimumabbreviationwidthis%d", 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.replace("Minimumabbreviationwidthis%d", "Minimum abbreviation width is %d", " vs ", 0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Minimumabbreviationwidthis%d", string1);
      
      int[] intArray0 = StringUtils.toCodePoints("Minimumabbreviationwidthis%d");
      assertNotNull(intArray0);
      assertEquals(28, intArray0.length);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isMixedCase("Minimumabbreviationwidthis%d");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string2 = StringUtils.mid("Minimumabbreviationwidthis%d", 0, 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "", (-1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string3 = StringUtils.defaultString(" vs ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(" vs ", string3);
      
      boolean boolean3 = StringUtils.containsIgnoreCase(charSequenceArray0[1], "");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean3);
      
      String string4 = StringUtils.normalizeSpace("Minimumabbreviationwidthis%d");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("Minimumabbreviationwidthis%d", string4);
      
      boolean boolean4 = StringUtils.contains((CharSequence) "Minimum abbreviation width is %d", (CharSequence) " vs ");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isAlphaSpace("Minimumabbreviationwidthis%d");
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      String string5 = StringUtils.join((int[]) null, '-');
      assertNull(string5);
      
      String string6 = StringUtils.center("Comparator should not be null.dl-c(bu )+09f1Kk1", (-1));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("Comparator should not be null.dl-c(bu )+09f1Kk1", string6);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Lzu3`*^(] ");
      assertNotNull(string0);
      assertEquals("lzu3`*^(] ", string0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'B', 13, 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 227.79922F;
      floatArray0[2] = 2436.5957F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1264.1965F);
      String string1 = StringUtils.join(floatArray0, 'z');
      assertNotNull(string1);
      assertArrayEquals(new float[] {0.0F, 227.79922F, 2436.5957F, 0.0F, (-1264.1965F)}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals("0.0z227.79922z2436.5957z0.0z-1264.1965", string1);
      
      String string2 = StringUtils.strip("CkM;vf");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("CkM;vf", string2);
      
      String string3 = StringUtils.trimToNull((String) null);
      assertNull(string3);
      
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader2 = classLoader0.getParent();
      assertNotNull(classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertSame(classLoader2, classLoader1);
      
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      assertNotNull(serviceLoader0);
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertSame(classLoader1, classLoader2);
      
      String string4 = StringUtils.join((Iterable<?>) serviceLoader0, "CkM;vf");
      assertNotNull(string4);
      assertFalse(classLoader0.equals((Object)classLoader2));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertSame(classLoader1, classLoader2);
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "CkM;vf", "CkM;vf");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) classLoader0;
      objectArray0[1] = (Object) classLoader2;
      objectArray0[2] = (Object) 2436.5957F;
      objectArray0[3] = (Object) classLoader2;
      objectArray0[4] = (Object) classLoader1;
      String string5 = StringUtils.join(objectArray0, '|');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals(5, objectArray0.length);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, '5', 13, 101);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = StringUtils.repeat("The String must not be empty", 55);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("...");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "...", (CharSequence) "...");
      assertEquals(0, int0);
      
      String string2 = StringUtils.normalizeSpace("org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string2);
      
      String string3 = StringUtils.rightPad("...", 0, string0);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("...", string3);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      String string4 = StringUtils.join((List<?>) vector0, 'x', 617, 617);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      
      String string0 = StringUtils.upperCase("<NAMCcgs`kU", locale0);
      assertNotNull(string0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("<NAMCCGS`KU", string0);
      
      Locale locale1 = Locale.JAPAN;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja_JP", locale1.toString());
      assertNotSame(locale1, locale0);
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertNotNull(string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("ja_JP", locale1.toString());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string1);
      
      int[] intArray0 = StringUtils.toCodePoints("<NAMCCGS`KU");
      assertNotNull(intArray0);
      assertEquals(11, intArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "<NAMCCGS`KU";
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.abbreviateMiddle("", "", 1699);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "<NAMCCGS`KU";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "<NAMCCGS`KU";
      charSequenceArray0[6] = (CharSequence) "<NAMCCGS`KU";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isMixedCase(charSequenceArray0[1]);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string3 = StringUtils.mid("<NAMCcgs`kU", 1699, 1699);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.overlay("", "", 116, 52);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.stripToEmpty("org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", string5);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      
      ByteBuffer byteBuffer0 = charset0.encode("1rno[]<KA~F3");
      assertNotNull(byteBuffer0);
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=12 cap=13]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(12, byteBuffer0.limit());
      assertEquals(13, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals(12, byteBuffer0.remaining());
      
      // Undeclared exception!
      try { 
        ByteBuffer.wrap((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String string0 = StringUtils.wrap("", 'B');
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = '-';
      charArray0[5] = '-';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'B', 'B', 'B', 'B', '-', '-'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "]b7<T";
      charSequenceArray0[1] = (CharSequence) "dl-c(bu )+09f1Kk1";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "}A/Sl!O$17";
      charSequenceArray0[4] = (CharSequence) "}A/Sl!O$17";
      boolean boolean2 = StringUtils.containsAnyIgnoreCase("]b7<T", charSequenceArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean2);
      
      String[] stringArray0 = StringUtils.split("dl-c(bu )+09f1Kk1", "org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "}A/Sl!O$17", (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replacePattern("}A/Sl!O$17", "org.apache.commons.lang3.StringUtils", "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("}A/Sl!O$17", string1);
      
      int int1 = StringUtils.compare("RN]x2FygUJouS", "]b7<T");
      assertFalse(int1 == int0);
      assertEquals((-11), int1);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Exception cloning Cloneable type ", "Exception cloning Cloneable type ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Exception cloning Cloneable type ");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Exception cloning Cloneable type ", (CharSequence) "Exception cloning Cloneable type ");
      assertEquals(0, int0);
      
      String string0 = StringUtils.replacePattern("Exception cloning Cloneable type ", ":", ":");
      assertNotNull(string0);
      assertEquals("Exception cloning Cloneable type ", string0);
      
      String string1 = StringUtils.stripToNull("t");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("t", string1);
      
      String string2 = StringUtils.stripAccents("t");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("t", string2);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = StringUtils.substringAfter("{S,p/'|i/,hq'vx;qv", "{S,p/'|i/,hq'vx;qv");
      assertNotNull(string0);
      assertEquals("", string0);
      
      byte[] byteArray0 = new byte[1];
      String string1 = StringUtils.capitalize("{S,p/'|i/,hq'vx;qv");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{S,p/'|i/,hq'vx;qv", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("qq|C(^X,c$&'{S1J([M", "{S,p/'|i/,hq'vx;qv", "yzu3`*^(] ");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = StringUtils.left("The character ", 396);
      assertNotNull(string0);
      assertEquals("The character ", string0);
      
      String string1 = StringUtils.replace("The character ", "The character ", "The character ", 396);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("The character ", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string2 = StringUtils.wrap("I^[SC\\", '4');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("4I^[SC\\4", string2);
      
      charSequenceArray0[0] = (CharSequence) "4I^[SC\\4";
      charSequenceArray0[1] = (CharSequence) "The character ";
      charSequenceArray0[3] = (CharSequence) "The character ";
      charSequenceArray0[3] = (CharSequence) "The character ";
      charSequenceArray0[4] = (CharSequence) "The character ";
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string3 = StringUtils.join(booleanArray0, '4');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals("false", string3);
      
      charSequenceArray0[5] = (CharSequence) "false";
      charSequenceArray0[6] = (CharSequence) "The character ";
      charSequenceArray0[7] = (CharSequence) "The character ";
      boolean boolean0 = StringUtils.endsWithAny("The character ", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.toRootUpperCase("_8 O");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("_8 O", string4);
      
      int int0 = StringUtils.countMatches(charSequenceArray0[0], '4');
      assertEquals(8, charSequenceArray0.length);
      assertEquals(2, int0);
      
      String string5 = StringUtils.substringBetween("4I^[SC\\4", "4I^[SC\\4");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string1);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      
      String string2 = locale0.getDisplayCountry();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", string2);
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("de", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      Locale locale2 = Locale.ENGLISH;
      assertNotNull(locale2);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.toString());
      assertEquals("en", locale2.getLanguage());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      String string3 = StringUtils.upperCase("", locale2);
      assertNotNull(string3);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("en", locale2.toString());
      assertEquals("en", locale2.getLanguage());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.split("KscQ;JuKA\t9>", '6');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(""));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(""));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains(""));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      boolean boolean1 = arrayList1.addAll((Collection<? extends String>) arrayList0);
      assertFalse(arrayList0.contains(""));
      assertFalse(arrayList1.contains(""));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.join((Iterator<?>) listIterator0, 'B');
      assertNotNull(string4);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotSame(arrayList0, arrayList1);
      assertEquals("", string4);
      
      String string5 = StringUtils.rightPad("G9MLM", (-1339));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("G9MLM", string5);
      
      String string6 = StringUtils.unwrap("", '+');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("(9wC6Vx'Y0q_", "  b`{Q}D| `0M", (-2057));
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String string0 = StringUtils.strip("vn");
      assertNotNull(string0);
      assertEquals("vn", string0);
      
      String string1 = StringUtils.abbreviate("vn", "vn", 4);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("vn", string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf("vn", "vn", 633);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "vn";
      charSequenceArray0[1] = (CharSequence) "vn";
      charSequenceArray0[2] = (CharSequence) "vn";
      charSequenceArray0[3] = (CharSequence) "vn";
      charSequenceArray0[4] = (CharSequence) "vn";
      charSequenceArray0[5] = (CharSequence) "vn";
      charSequenceArray0[6] = (CharSequence) "vn";
      charSequenceArray0[7] = (CharSequence) "vn";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("vn", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("AZ9N_P.mrV]Qk%?", (String) null, 4547);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Array element ", '~');
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.remove("Array element ", "R3%9,sETPoC<~.^m");
      assertNotNull(string0);
      assertEquals("Array element ", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Array element ");
      assertTrue(boolean0);
      
      String[] stringArray2 = StringUtils.substringsBetween("0LePN*8Y{,i[", "9s<N|l/@Y/H8F", "D:$K<dru0x!_rO)?%Dq");
      assertNull(stringArray2);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = "'U8tN'U8tN";
      String string1 = StringUtils.stripStart("'U8tN'U8tN", "'U8tN'U8tN");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.upperCase("shC;~aGJE`Z_>e", (Locale) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("SHC;~AGJE`Z_>E", string2);
      
      String string3 = StringUtils.repeat((String) null, "", (-2695));
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-2695));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String[] stringArray0 = new String[1];
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAny("\n", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1);
      
      String string2 = StringUtils.trimToEmpty("tPI^5yj]S>Xd#HRlx+t");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("tPI^5yj]S>Xd#HRlx+t", string2);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "tPI^5yj]S>Xd#HRlx+t", 634);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'T';
      String string0 = StringUtils.join(charArray0, 'T', 1, 1);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'T'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'T'}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      String string2 = StringUtils.stripAccents("!&sb!EDeb!&sb!EDeb");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("!&sb!EDeb!&sb!EDeb", string2);
      
      charSequenceArray0[4] = (CharSequence) "!&sb!EDeb!&sb!EDeb";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[2]);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("\r", 1, (-6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = StringUtils.strip("66i(''U8tN");
      assertNotNull(string0);
      assertEquals("66i(''U8tN", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = '%';
      charArray0[2] = 'E';
      charArray0[3] = '*';
      charArray0[4] = '-';
      charArray0[5] = 'v';
      charArray0[6] = 'A';
      charArray0[0] = 't';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "66i(''U8tN", charArray0);
      assertArrayEquals(new char[] {'t', '%', 'E', '*', '-', 'v', 'A', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrap("66i(''U8tN", 't');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("t66i(''U8tNt", string1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      String string2 = StringUtils.join(booleanArray0, 'k');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals("truekfalsekfalsekfalsektruekfalse", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "66i(''U8tN";
      charSequenceArray0[1] = (CharSequence) "truekfalsekfalsekfalsektruekfalse";
      boolean boolean1 = StringUtils.endsWithAny("66i(''U8tN", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = object0;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, ", '", (-1451), 1011);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1451
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'o');
      assertNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      String string1 = "!&sb!EDeb!&sb!EDeb";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "!&sb!EDeb!&sb!EDeb", 875, 3576);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 875
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^( ");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Lzu`^( ";
      objectArray0[3] = (Object) "The character ";
      short[] shortArray0 = new short[16];
      String string0 = StringUtils.substringBefore("Lzu`^( ", "Lzu`^( ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.split("Lzu`^( ", "Lzu`^( ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviateMiddle("Lzu`^( ", "Lzu`^( ", 13);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Lzu`^( ", string2);
      
      String string3 = StringUtils.wrap("Lzu`^( ", '\\');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\\Lzu`^( \\", string3);
      
      String string4 = StringUtils.substringBeforeLast((String) null, "[FC&(5vKtz!0ODO=s-7");
      assertNull(string4);
      
      String string5 = StringUtils.difference(" [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[", (String) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals(" [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[ [[[[", string5);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = StringUtils.wrap("TB3+vjG?Xiw0(ZR4{Js@", "TB3+vjG?Xiw0(ZR4{Js@");
      assertNotNull(string0);
      assertEquals("TB3+vjG?Xiw0(ZR4{Js@TB3+vjG?Xiw0(ZR4{Js@TB3+vjG?Xiw0(ZR4{Js@", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'B';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "TB3+vjG?Xiw0(ZR4{Js@TB3+vjG?Xiw0(ZR4{Js@TB3+vjG?Xiw0(ZR4{Js@", charArray0);
      assertArrayEquals(new char[] {'B', 'B', 'B', 'B', 'B', 'B'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("AZ9N_P.mrV]Qk%?", (String) null, 4547);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Array element ", '~');
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = StringUtils.remove("Array element ", "R3%9,sETPoC<~.^m");
      assertNotNull(string0);
      assertEquals("Array element ", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Array element ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.stripEnd("R3%9,sETPoC<~.^m", ")[n5^MuI");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("R3%9,sETPoC<~.^m", string1);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.difference(")&D4MIN@J\"V.~\"Yq", ")&D4MIN@J\"V.~\"Yq");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWith(")&D4MIN@J\"V.~\"Yq", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("X!]DI~e[W|v SHCf$$0", supplier0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("X!]DI~e[W|v SHCf$$0", string1);
      
      String string2 = StringUtils.wrap("Search and Replace array lengths don't match: ", ',');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(",Search and Replace array lengths don't match: ,", string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[6] = (byte)0;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)114;
      byteArray0[6] = (byte)101;
      String string3 = StringUtils.capitalize(")&D4MIN@J\"V.~\"Yq");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(")&D4MIN@J\"V.~\"Yq", string3);
      
      String string4 = StringUtils.toString(byteArray0, (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte) (-11), (byte)9, (byte)4, (byte)114, (byte)101}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("\u0004\u0000\uFFFD\t\u0004re", string4);
      
      boolean boolean2 = StringUtils.endsWith(")&D4MIN@J\"V.~\"Yq", "\u0004\u0000\uFFFD\t\u0004re");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("}R1AMjL", "\u0004\u0000\uFFFD\t\u0004re", "}R1AMjL");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("}R1AMjL", string5);
      
      String[] stringArray0 = StringUtils.split(" in an array of ", ")&D4MIN@J\"V.~\"Yq", 256);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("MkT;)U9=", '~');
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string6 = StringUtils.remove("", "yV`GHMplpV>P$-");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      
      boolean boolean3 = StringUtils.isAsciiPrintable("\u0004\u0000\uFFFD\t\u0004re");
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("Minimum abbreviation width is %d");
      assertNotNull(string0);
      assertEquals("minimum abbreviation width is %d", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Minimum abbreviation width is %d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.truncate("Strings must not be null", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replace(" ", "2{&", ".@U?xtUhi`Y{o!Enk");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.truncate(">5|0ZB|eFXj'Mwl", 122);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(">5|0ZB|eFXj'Mwl", string3);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("US", locale1.getCountry());
      assertEquals("en_US", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      int int0 = StringUtils.getFuzzyDistance("", ">5|0ZB|eFXj'Mwl", locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertNotSame(locale0, locale1);
      assertEquals(0, int0);
      
      String string4 = StringUtils.removeEndIgnoreCase(">vJ2@ix',wSJv_", "LV");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(">vJ2@ix',wSJv_", string4);
      
      String string5 = StringUtils.substringBeforeLast("", "#/eU");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\r");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = StringUtils.getBytes("\r", (Charset) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)13}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      CharBuffer charBuffer0 = StringUtils.firstNonEmpty((CharBuffer[]) null);
      assertNull(charBuffer0);
      
      String string0 = StringUtils.abbreviate("\r", "T9}|z!^WhEnXQe", 581);
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.strip((String) null, "w)`");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[17];
      charSequenceArray0[3] = (CharSequence) "l";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(17, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 109;
      String string0 = StringUtils.uncapitalize((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "...");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.normalizeSpace("@");
      assertNotNull(string1);
      assertEquals("@", string1);
      
      String string2 = StringUtils.rightPad("w0(ZR4{Js@TB3+vjG?Xi", 109, (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("w0(ZR4{Js@TB3+vjG?Xi                                                                                       ", string2);
      
      int int1 = StringUtils.lastIndexOfAny(charSequenceArray0[3], charSequenceArray0);
      assertFalse(int1 == int0);
      assertEquals(17, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string3 = StringUtils.difference("'U8tN'U8tN _B", "...");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("...", string3);
      
      String string4 = StringUtils.swapCase("@");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("@", string4);
      
      String string5 = StringUtils.replaceOnce((String) null, "Supplied value must be a valid byte literal between -128 and 127: [", "1aB=%88SOf/E2N8BF1f");
      assertNull(string5);
      
      String string6 = StringUtils.substringBetween("ttb8~B,8n_", "org.apache.commons.lang3.ArrayUtils", "The type must not be null");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = StringUtils.stripEnd("{S,p/'|i/,hq'vx;qv", "{S,p/'|i/,hq'vx;qv");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.toRootLowerCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("{S,p/'|i/,hq'vx;qv");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "{S,p/'|i/,hq'vx;qv";
      charSequenceArray0[2] = (CharSequence) "{S,p/'|i/,hq'vx;qv";
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string2 = StringUtils.EMPTY;
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      double double0 = StringUtils.getJaroWinklerDistance(charSequenceArray0[1], "");
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = StringUtils.mid("c+{)LDaykx", Integer.MIN_VALUE, 11);
      assertNotNull(string0);
      assertEquals("c+{)LDaykx", string0);
      
      int int0 = StringUtils.lastIndexOfAny("c+{)LDaykx", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.difference(")&D4MIN@J\"V.~\"Yq", ")&D4MIN@J\"V.~\"Yq");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWith(")&D4MIN@J\"V.~\"Yq", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("X!]DI~e[W|v SHCf$$0", supplier0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("X!]DI~e[W|v SHCf$$0", string1);
      
      String string2 = StringUtils.wrap("Search and Replace array lengths don't match: ", ',');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(",Search and Replace array lengths don't match: ,", string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)81;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)101;
      String string3 = StringUtils.join(byteArray0, ',');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte) (-11), (byte)9, (byte)81, (byte) (-118), (byte)101}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("4,0,-11,9,81,-118,101", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("4,0,-11,9,81,-118,101", "", "X!]DI~e[W|v SHCf$$0");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("4,0,-11,9,81,-118,101", string4);
      
      boolean boolean2 = StringUtils.endsWith("4,0,-11,9,81,-118,101", "4,0,-11,9,81,-118,101");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("}R1AMjL", "4,0,-11,9,81,-118,101", "}R1AMjL");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("}R1AMjL", string5);
      
      String[] stringArray0 = StringUtils.split(" in an array of ", "4,0,-11,9,81,-118,101", 256);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean3 = StringUtils.isWhitespace("}R1AMjL");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string6 = StringUtils.defaultIfEmpty("", "");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      
      int int0 = StringUtils.lastIndexOfAny("}R1AMjL", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      int int0 = StringUtils.length("!&sb!EDeb!&sb!EDeb");
      assertEquals(20, int0);
      
      String string0 = StringUtils.wrapIfMissing("!&sbZEQDeb!|sb!EDeb", (String) null);
      assertNotNull(string0);
      assertEquals("!&sbZEQDeb!|sb!EDeb", string0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "', has a length less than 2", 108, 108);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.center("', has a length less than 2", 108, "', has a length less than 2");
      assertNotNull(string0);
      assertEquals("', has a length less than 2', has a leng', has a length less than 2', has a length less than 2', has a lengt", string0);
      
      String string1 = StringUtils.removeEnd("', has a length less than 2", "', has a length less than 2");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = "TB3+vjG?Xi";
      String string1 = StringUtils.removeEnd("org.apache.commons.lang3.StringUtils", "TB3+vjG?Xi");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      
      int int0 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.StringUtils", "ohK<W");
      assertEquals(10, int0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 10;
      longArray0[1] = (long) 10;
      longArray0[2] = (long) 10;
      longArray0[3] = (long) 10;
      longArray0[4] = (long) 10;
      longArray0[5] = (long) 10;
      longArray0[6] = (long) 10;
      String string2 = StringUtils.join(longArray0, ',');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new long[] {10L, 10L, 10L, 10L, 10L, 10L, 10L}, longArray0);
      assertEquals(7, longArray0.length);
      assertEquals("10,10,10,10,10,10,10", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.unwrap("org.apache.commons.lang3.StringUtils", 'G');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "ohK<W", (CharSequence) "TB3+vjG?Xi");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.compareIgnoreCase("10,10,10,10,10,10,10", "D:4D~OEmb$oZ7");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-51), int2);
      
      int int3 = StringUtils.indexOf((CharSequence) "ohK<W", 893, 10);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.StringUtils", 'G');
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.capitalize("Comparator should not be null.dl-c(bu )+09f1Kk1");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Comparator should not be null.dl-c(bu )+09f1Kk1", string4);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      
      String string5 = locale1.getDisplayCountry();
      assertNotNull(string5);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      assertEquals("China", string5);
      
      String string6 = locale1.getDisplayName(locale0);
      assertNotNull(string6);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("Chinesisch (China)", string6);
      
      String string7 = locale1.getDisplayScript(locale0);
      assertNotNull(string7);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getVariant());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string7);
      
      // Undeclared exception!
      try { 
        locale1.getUnicodeLocaleType("P1.2pur6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: P1.2pur6
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Minimum abbreviation width is %d");
      assertNotNull(string0);
      assertEquals("Minimumabbreviationwidthis%d", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Minimumabbreviationwidthis%d", (CharSequence) "Minimum abbreviation width is %d", 0);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width is %d";
      int int1 = StringUtils.countMatches(charSequenceArray0[1], charSequenceArray0[0]);
      assertFalse(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string1 = StringUtils.removeIgnoreCase("Minimumabbreviationwidthis%d", "Minimum abbreviation width is %d");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Minimumabbreviationwidthis%d", string1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "ys`I");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.mid((String) null, 2422, 1771);
      assertNull(string2);
      
      String string3 = StringUtils.reverseDelimited("Minimumabbreviationwidthis%d", '\\');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("Minimumabbreviationwidthis%d", string3);
      
      String string4 = StringUtils.removeEndIgnoreCase((String) null, "B]fj7e [");
      assertNull(string4);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "ys`I", charSequenceArray0[0]);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int3);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank(charSequenceArray0[0], (CharSequence) "ys`I");
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals(2, charSequenceArray0.length);
      assertEquals("Minimum abbreviation width is %d", charSequence0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance(charSequenceArray0[1], "{'Nl2d)q@4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", "\r", 2562);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("\r", "\r");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, (CharSequence) "\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.join((Object[]) stringArray0, "aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?");
      assertNotNull(string0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(2, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals("aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?", string0);
      
      String string1 = StringUtils.upperCase("aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEqualsstring1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("\r", "\r");
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      byte[] byteArray0 = StringUtils.getBytes("\r", (Charset) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)13}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      String string2 = StringUtils.abbreviate("\r", 2562, 581);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\r", string2);
      
      String string3 = StringUtils.firstNonBlank(stringArray1);
      assertNull(string3);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.repeat(')', 2562);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      CharBuffer charBuffer0 = StringUtils.firstNonEmpty((CharBuffer[]) null);
      assertNull(charBuffer0);
      
      String string5 = StringUtils.left("aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?", 581);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals("aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]", string5);
      
      boolean boolean2 = StringUtils.contains((CharSequence) string4, 581);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string6 = StringUtils.removeStartIgnoreCase("\r", "nTHv0ea_%`<_");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("\r", string6);
      
      String string7 = StringUtils.leftPad("T9}|z!^WhEnXQe", 823);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals}|z!^WhEnXQe", string7);
      
      String string8 = StringUtils.stripStart((String) null}|z!^WhEnXQe");
      assertNull(string8);
      
      String string9 = StringUtils.stripToEmpty("  b`{Q}D| `0M");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertEquals("b`{Q}D| `0M", string9);
      
      String string10 = StringUtils.substringAfterLastr");
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertEquals("", string10);
      
      boolean boolean3 = StringUtils.isNotEmpty("Index: ");
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("[wl", "[wl", "[wl");
      assertNotNull(string0);
      assertEquals("[wl", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "[wl", (CharSequence) "[wl");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("[wl", charSequence0);
      
      int int0 = StringUtils.countMatches((CharSequence) "[wl", 'l');
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "[wl", (CharSequence) "[wl");
      assertTrue(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("[wl", "[wl");
      assertEquals(1.0, double0, 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1;
      String string1 = StringUtils.mid("[wl", Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultIfBlank("d-", "[wl");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("d-", string2);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = StringUtils.left("The character ", 396);
      assertNotNull(string0);
      assertEquals("The character ", string0);
      
      String string1 = StringUtils.replace("The character ", "The character ", "The character ", 396);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("The character ", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string2 = StringUtils.wrap("I^[SC\\", '4');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("4I^[SC\\4", string2);
      
      charSequenceArray0[0] = (CharSequence) "4I^[SC\\4";
      charSequenceArray0[1] = (CharSequence) "The character ";
      charSequenceArray0[2] = (CharSequence) "The character ";
      charSequenceArray0[3] = (CharSequence) "The character ";
      charSequenceArray0[4] = (CharSequence) "The character ";
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string3 = StringUtils.join(booleanArray0, '4');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertEquals("false", string3);
      
      charSequenceArray0[5] = (CharSequence) "false";
      charSequenceArray0[6] = (CharSequence) "The character ";
      charSequenceArray0[7] = (CharSequence) "The character ";
      boolean boolean0 = StringUtils.endsWithAny("The character ", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.toRootUpperCase("_8 O");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("_8 O", string4);
      
      int int0 = StringUtils.countMatches(charSequenceArray0[0], '4');
      assertEquals(8, charSequenceArray0.length);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      int int0 = StringUtils.countMatches((CharSequence) "TB3+vjG?Xi", '.');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = StringUtils.truncate("Arguments cannot both be null", 32);
      assertNotNull(string0);
      assertEquals("Arguments cannot both be null", string0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      
      String string1 = StringUtils.uncapitalize("Arguments cannot both be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("arguments cannot both be null", string1);
      
      int int0 = StringUtils.getFuzzyDistance("arguments cannot both be null", "]mB", locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals(0, int0);
      
      String string2 = StringUtils.normalizeSpace("Arguments cannot both be null");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Arguments cannot both be null", string2);
      
      String string3 = StringUtils.substringBeforeLast("Inh'0~Jcxv", "Arguments cannot both be null");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Inh'0~Jcxv", string3);
      
      int int1 = StringUtils.compareIgnoreCase("maxWith cannot be negative", "=e}?", true);
      assertFalse(int1 == int0);
      assertEquals(48, int1);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Lzu3`*^(] ");
      assertNotNull(string0);
      assertEquals("lzu3`*^(] ", string0);
      
      String string1 = StringUtils.substringBetween("lzu3`*^(] ", "Lzu3`*^(] ", "Lzu3`*^(] ");
      assertNull(string1);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Lzu3`*^(] ";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(3, stringArray0.length);
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "al*7#0(fh";
      String string3 = StringUtils.normalizeSpace("Lzu3`*^(] ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Lzu3`*^(]", string3);
      
      charSequenceArray0[1] = (CharSequence) "Lzu3`*^(]";
      charSequenceArray0[2] = (CharSequence) "Lzu3`*^(] ";
      charSequenceArray0[3] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Lzu3`*^(] ", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, 375);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripEnd(")[n5^MuI", "");
      assertNotNull(string0);
      assertEquals(")[n5^MuI", string0);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      int int0 = StringUtils.compare("tsq*kQ", "tsq*kQ", true);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3816;
      shortArray0[1] = (short) (-6498);
      String string0 = StringUtils.replaceChars("", "\"D", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripStart("", "Comparator should not be null.");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("tsq*kQ", "8L<T0`", "");
      assertNull(stringArray0);
      
      String string2 = StringUtils.toRootLowerCase("Ut7QHy+JR");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ut7qhy+jr", string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("tsq*kQ", "", (CharSequence[]) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("tsq*kQ", string3);
      
      int int1 = StringUtils.lastIndexOfAny("k*otk^,H9uu", (CharSequence[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.removeEndIgnoreCase("tsq*kQ", "\r");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("tsq*kQ", string4);
      
      int int2 = StringUtils.compare("", "", true);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("{}");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.rotate((String) null, 0);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-108);
      String string1 = StringUtils.join((char[]) null, '%');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = 'W';
      String string0 = StringUtils.join(charArray0, ':');
      assertNotNull(string0);
      assertArrayEquals(new char[] {'b', 'W'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("b:W", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Exception cloninL CloneableV=>WGN", (CharSequence) "b:W", 1320);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.uncapitalize("TB3+vjG?Xiw0(ZR4{Js@");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("tB3+vjG?Xiw0(ZR4{Js@", string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("tB3+vjG?Xiw0(ZR4{Js@", "b:W");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat("tB3+vjG?Xiw0(ZR4{Js@", (-1));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.center("Exception cloninL CloneableV=>WGN", 1320, '^');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.trimToNull(string3);
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = StringUtils.chop("]mB");
      assertNotNull(string0);
      assertEquals("]m", string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '>';
      charArray0[1] = 'j';
      charArray0[2] = '~';
      charArray0[3] = '%';
      charArray0[4] = 'I';
      charArray0[5] = 'y';
      charArray0[6] = 'e';
      charArray0[7] = 'I';
      charArray0[8] = '/';
      String string1 = StringUtils.join(charArray0, 'U');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'>', 'j', '~', '%', 'I', 'y', 'e', 'I', '/'}, charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(">UjU~U%UIUyUeUIU/", string1);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertNotNull(string0);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("T9}|z!^WhEnXQe", "ch");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("T9}|z!^WhEnXQe", string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "T9}|z!^WhEnXQe", (char[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "ch", (CharSequence) "T9}|z!^WhEnXQe");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("`I65kM>d(Slbo !iB(<", "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String string0 = StringUtils.center("Fk0]-)-iSu~}l", 1522);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "}A/Sl!O$17", (CharSequence) string0);
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("]b7<T", 1, "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]b7<T", string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "dl-c(bu )+09f1Kk1", 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "]b7<T");
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.limit());
      assertEquals("]b7<T", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      
      String string2 = StringUtils.join(charArray0, 'X', 3, 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string2);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "O:Vs6zG(w*H\"Zm", (CharSequence) "", 1522);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(15, int2);
      
      String string3 = StringUtils.removeStart("Fk0]-)-iSu~}l", string0);
      assertNotNull(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Fk0]-)-iSu~}l", string3);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.chomp("PU", "dl-c(bu )+09f1Kk1");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("PU", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "_";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "PU";
      charSequenceArray0[3] = (CharSequence) "";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)79;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-64);
      byteArray0[6] = (byte)94;
      String string2 = StringUtils.join(byteArray0, 'X', (int) (byte)79, (int) (byte)21);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)6, (byte)0, (byte)79, (byte)21, (byte)5, (byte) (-64), (byte)94}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("", string2);
      
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "dl-c(bu )+09f1Kk1";
      charSequenceArray0[6] = (CharSequence) "dl-c(bu )+09f1Kk1";
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("_", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("\n", "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.countMatches(charSequenceArray0[7], (CharSequence) "\n");
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = StringUtils.removeFirst("clone", "clone");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compareIgnoreCase("", "", true);
      assertEquals(0, int0);
      
      String string1 = StringUtils.left("", (-2669));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeFirst("qhe character ", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("qhe character ", string2);
      
      String string3 = StringUtils.substringBetween("TB3+vjG?Xi", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.chop((String) null);
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '=');
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("clone");
      assertTrue(boolean0);
      
      int int1 = StringUtils.compare("qhe character ", "", true);
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.truncate("pr9a.j3F}i| ", Integer.MAX_VALUE, 48);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      
      int int2 = StringUtils.countMatches((CharSequence) null, '=');
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String string6 = StringUtils.toRootLowerCase("");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "nTfhAgrf'w+k";
      stringArray0[1] = "nTfhAgrf'w+k";
      String string0 = StringUtils.substringAfterLast("nTfhAgrf'w+k", "nTfhAgrf'w+k");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "nTfhAgrf'w+k", (CharSequence) "nTfhAgrf'w+k");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("nTfhAgrf'w+k");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, 375);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("N/[nKQig_K|O", "N/[nKQig_K|O", "9s<N|l/@Y/H8F");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) ':';
      String string0 = StringUtils.join(doubleArray0, ':');
      assertNotNull(string0);
      assertArrayEquals(new double[] {58.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals("58.0:0.0:0.0:0.0:0.0:0.0", string0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      
      Buffer buffer0 = charBuffer0.flip();
      assertNotNull(buffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, buffer0.remaining());
      assertEquals(0, buffer0.capacity());
      assertFalse(buffer0.isReadOnly());
      assertEquals(0, buffer0.position());
      assertTrue(buffer0.hasArray());
      assertEquals(0, buffer0.limit());
      assertFalse(buffer0.hasRemaining());
      assertFalse(buffer0.isDirect());
      assertEquals(0, buffer0.arrayOffset());
      
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertNotNull(charBuffer1);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertEquals("", charBuffer1.toString());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("58.0:0.0:0.0:0.0:0.0:0.0", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = StringUtils.remove("I/E#\"j]ae\"`wU[[", "I/E#\"j]ae\"`wU[[");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("~\"p +e2'#@%T5>m", "?");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("~\"p +e2'#@%T5>m", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "~\"p +e2'#@%T5>m";
      charSequenceArray0[1] = (CharSequence) "~\"p +e2'#@%T5>m";
      charSequenceArray0[2] = (CharSequence) "?";
      charSequenceArray0[3] = (CharSequence) "~\"p +e2'#@%T5>m";
      charSequenceArray0[4] = (CharSequence) "I/E#\"j]ae\"`wU[[";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = StringUtils.replace("\"ljDT", "\"ljDT", "5{N}i", 65516);
      assertNotNull(string0);
      assertEquals("5{N}i", string0);
      
      String string1 = StringUtils.unwrap("%_/TU^}+=y", '4');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("%_/TU^}+=y", string1);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.isEmpty();
      assertTrue(boolean0);
      
      TreeSet<CharBuffer> treeSet1 = new TreeSet<CharBuffer>((SortedSet<CharBuffer>) treeSet0);
      assertNotNull(treeSet1);
      assertTrue(treeSet1.equals((Object)treeSet0));
      
      boolean boolean1 = treeSet1.removeAll(treeSet0);
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(treeSet0, treeSet1);
      assertNotSame(treeSet1, treeSet0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "5{N}i", (-1514));
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "%_/TU^}+=y", (CharSequence[]) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.join((Object[]) null, (String) null);
      assertNull(string2);
      
      int int0 = StringUtils.compare("Aborting to protect against StackOverflowError - output of one loop is the input of another", "5{N}i", false);
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertNotNull(arrayList1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, '?');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("The character ", 19);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The character      ", string1);
      
      String string2 = StringUtils.unwrap("The character      ", '7');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("The character      ", string2);
      
      boolean boolean0 = treeSet0.removeAll(arrayList0);
      assertFalse(arrayList0.contains(string1));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotSame(arrayList0, arrayList1);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "The character      ", 105);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.containsAny((CharSequence) "The character      ", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[2] = (Object) arrayList1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "The character ";
      String string3 = StringUtils.join(objectArray0, "The character      ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\r");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = StringUtils.getBytes("\r", (Charset) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)13}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      CharBuffer charBuffer0 = StringUtils.firstNonEmpty((CharBuffer[]) null);
      assertNull(charBuffer0);
      
      String string0 = StringUtils.abbreviate("\r", "\r", 581);
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.strip((String) null, "w)`");
      assertNull(string1);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "\r", (-13));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.getIfBlank("iK*,1#3", (Supplier<String>) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("iK*,1#3", string2);
      
      String string3 = StringUtils.toString(byteArray0, (String) null);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte)13}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals("\r", string3);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = StringUtils.defaultString("  b`{Q}D| `0M", "  b`{Q}D| `0M");
      assertNotNull(string0);
      assertEquals("  b`{Q}D| `0M", string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("  b`{Q}D| `0M");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = new Integer(8192);
      assertEquals(8192, int0);
      
      String string1 = StringUtils.truncate("  b`{Q}D| `0M", 8192, 54);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String string0 = StringUtils.substringBefore("...", "CV$WdO{r+");
      assertNotNull(string0);
      assertEquals("...", string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("etA)b", "etA)b", (CharSequence[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("etA)b", string1);
      
      boolean boolean0 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-2631));
      assertNotNull(integer0);
      assertEquals((-2631), (int)integer0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "CV$WdO{r+", (CharSequence) "...");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("66i(''U8tN");
      assertNotNull(string0);
      assertEquals("66i(''u8tn", string0);
      
      char[] charArray0 = new char[8];
      charArray0[1] = '%';
      char char0 = 'E';
      charArray0[2] = 'E';
      charArray0[3] = '*';
      charArray0[4] = '8';
      charArray0[5] = '*';
      charArray0[6] = 'A';
      charArray0[7] = 't';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "66i(''u8tn", charArray0);
      assertArrayEquals(new char[] {'\u0000', '%', 'E', '*', '8', '*', 'A', 't'}, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.remove("8}eis5IQ)(:etB~lj", 'L');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("8}eis5IQ)(:etB~lj", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("66i(''u8tn", "8}eis5IQ)(:etB~lj", 4);
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "8}eis5IQ)(:etB~lj");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.abbreviateMiddle("8}eis5IQ)(:etB~lj", "8}eis5IQ)(:etB~lj", 4);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("8}eis5IQ)(:etB~lj", string2);
      
      String string3 = StringUtils.substringBefore("Aborting to protect against StackOverflowError - output of one loop is the input of another", 4);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      
      String[] stringArray2 = StringUtils.split("66i(''U8tN");
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      PriorityQueue<Object> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Object>((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", " ", 278);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase(" ", " ");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.chomp("null/empty items");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("null/empty items", string1);
      
      boolean boolean1 = StringUtils.isAlphaSpace("null/empty items");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = "\\u";
      String string3 = StringUtils.rightPad("null/empty items", 3929, string2);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("null/empty items", "Minimum abbreviation width is %d", 10);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(10, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      Integer integer0 = new Integer(1007);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1007, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", ":eq3CeFg$,;nfHetg8Z", 2909);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2909;
      String string0 = StringUtils.wrap("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.toRootLowerCase("[mo");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[mo", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) ":eq3CeFg$,;nfHetg8Z", 32767);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("_", 10, '=');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("====_=====", string1);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.abbreviateMiddle("H", "H", (-2034458190));
      assertNotNull(string0);
      assertEquals("H", string0);
      
      String string1 = StringUtils.chop("H");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfterLast("T9", (-2034458190));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)31;
      byteArray0[2] = (byte)127;
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)0;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "H");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // H
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      String string0 = StringUtils.join(booleanArray0, 'O');
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false, true, false, true, false}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals("falseOtrueOfalseOtrueOfalse", string0);
      
      String string1 = StringUtils.stripToNull("igV!%*/");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("igV!%*/", string1);
      
      String string2 = StringUtils.repeat("igV!%*/", 1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("igV!%*/", string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "igV!%*/", "ch");
      assertTrue(boolean0);
      
      String string3 = StringUtils.removeIgnoreCase("org.apache.commons.lang3.StringUtils", "I{]");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      
      String string4 = StringUtils.leftPad(", Length: ", 1743, '-');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.replace("I{]", "igV!%*/", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("I{]", string5);
      
      String string6 = StringUtils.remove("54\".54\".", "dl-c(bu )+09f1Kk1");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("54\".54\".", string6);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String string0 = StringUtils.leftPad("]", 1637, "]");
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "rt.%K7q9!Q";
      stringArray0[1] = "nTfhAgrf'w+k";
      stringArray0[2] = "NkI&sZy4e3rC";
      stringArray0[3] = "nTfhAgrf'w+k";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("nTfhAgrf'w+k", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String string0 = StringUtils.strip("66i(''U8tN");
      assertNotNull(string0);
      assertEquals("66i(''U8tN", string0);
      
      String string1 = StringUtils.substringAfterLast(" <=t0", "J'#");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.repeat("J'#", 3062);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("object", "object");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfterLast("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^r ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.leftPad("The characterz", 53);
      assertNotNull(string0);
      assertEquals("                                       The characterz", string0);
      
      String string1 = StringUtils.stripStart("The characterz", "Lzu`^r ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The characterz", string1);
      
      String string2 = StringUtils.stripToEmpty("The characterz");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("The characterz", string2);
      
      String string3 = StringUtils.substringAfterLast("                                       The characterz", "The characterz");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.isNotEmpty("Lzu`^r ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^r ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.leftPad("The characterz", 53);
      assertNotNull(string0);
      assertEquals("                                       The characterz", string0);
      
      String string1 = StringUtils.stripStart("The characterz", "Lzu`^r ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The characterz", string1);
      
      String string2 = StringUtils.stripToEmpty("Index: ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Index:", string2);
      
      String string3 = StringUtils.substringAfterLast("                                       The characterz", "Index:");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.isNotEmpty("Lzu`^r ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Comparator should not be null.", "Comparator should not be null.");
      assertNotNull(string0);
      assertEquals("Comparator should not be null.", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("Comparator should not be null.");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrap("Comparator should not be null.", '`');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`Comparator should not be null.`", string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("Comparator should not be null.");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '@';
      charArray0[1] = '@';
      charArray0[3] = '`';
      charArray0[4] = '@';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Comparator should not be null.", charArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {'-', '@', '\u0000', '`', '@'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string2 = StringUtils.chomp("Comparator should not be null.", "dl-c(bu )+09f1Kk1");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Comparator should not be null.", string2);
      
      charSequenceArray0[0] = (CharSequence) "Comparator should not be null.";
      charSequenceArray0[1] = (CharSequence) "Comparator should not be null.";
      charSequenceArray0[2] = (CharSequence) "`Comparator should not be null.`";
      charSequenceArray0[3] = (CharSequence) "`Comparator should not be null.`";
      charSequenceArray0[4] = (CharSequence) "Comparator should not be null.";
      charSequenceArray0[5] = (CharSequence) "`Comparator should not be null.`";
      charSequenceArray0[6] = (CharSequence) "Comparator should not be null.";
      boolean boolean3 = StringUtils.containsAnyIgnoreCase("`Comparator should not be null.`", charSequenceArray0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean3);
      
      String[] stringArray0 = StringUtils.split("Supplied value must be a valid byte literal between -32768 and 32767: [", "\n");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.countMatches(charSequenceArray0[1], charSequenceArray0[1]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      
      String string0 = StringUtils.join((List<?>) vector0, "Exception cloning Cloneable type ", 57, 57);
      assertNotNull(string0);
      assertFalse(vector0.contains("Exception cloning Cloneable type "));
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals("", string0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1264.1965F);
      floatArray0[1] = 2200.2087F;
      floatArray0[2] = (float) 57;
      floatArray0[3] = (-1264.1965F);
      floatArray0[4] = (float) 57;
      floatArray0[5] = (-1.0F);
      String string1 = StringUtils.join(floatArray0, 'z');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new float[] {(-1264.1965F), 2200.2087F, 57.0F, (-1264.1965F), 57.0F, (-1.0F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals("-1264.1965z2200.2087z57.0z-1264.1965z57.0z-1.0", string1);
      
      String string2 = StringUtils.strip("Comparator should not be null.Comparator should not be null.");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Comparator should not be null.Comparator should not be null.", string2);
      
      String string3 = StringUtils.trimToNull("kvTJh=M8`nZ/CKOomj");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("kvTJh=M8`nZ/CKOomj", string3);
      
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertNotNull(classLoader1);
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      ClassLoader classLoader2 = classLoader1.getParent();
      assertNull(classLoader2);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      
      Class<Integer> class1 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class1, classLoader0);
      assertNotNull(serviceLoader0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertSame(class1, class0);
      
      String string4 = StringUtils.join((Iterable<?>) serviceLoader0, "Exception cloning Cloneable type ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertSame(class1, class0);
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "kvTJh=M8`nZ/CKOomj");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) class0;
      String string5 = StringUtils.join(objectArray0, '|');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals(1, objectArray0.length);
      assertEquals("class java.lang.Integer", string5);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      String string0 = StringUtils.trimToNull("6OM)7/;TWrEQp*<3d)");
      assertNotNull(string0);
      assertEquals("6OM)7/;TWrEQp*<3d)", string0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>(24, 771);
      assertNotNull(vector0);
      assertEquals(24, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      String string0 = StringUtils.join((List<?>) vector0, "]mB", 13, 13);
      assertNotNull(string0);
      assertFalse(vector0.contains("]mB"));
      assertEquals(24, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.unwrap("Azns0&P{D2Y;izF", "[a@(");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Azns0&P{D2Y;izF", string1);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^( ");
      assertTrue(boolean0);
      
      String string0 = "The character ";
      String string1 = "Exception cloning Cloneable type ";
      Vector<String> vector0 = new Vector<String>(53, 76);
      assertNotNull(vector0);
      assertFalse(vector0.contains(string0));
      assertEquals(0, vector0.size());
      assertEquals(53, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      String string2 = "k0%Kwhx";
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, "k0%Kwhx", 13, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 32
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[1] = 'X';
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains('X'));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      
      int int0 = (-134);
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, "TB3+vjG?Xi", (-134), 53);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -134
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String string0 = StringUtils.rightPad("TB3+jG?Xi", (-709), '9');
      assertNotNull(string0);
      assertEquals("TB3+jG?Xi", string0);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string1);
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      String string2 = locale0.getDisplayCountry();
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", string2);
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("de", locale1.toString());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      Locale locale2 = Locale.ENGLISH;
      assertNotNull(locale2);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals("", locale2.getCountry());
      assertEquals("en", locale2.getLanguage());
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      
      String string3 = StringUtils.upperCase("", locale2);
      assertNotNull(string3);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", locale2.getCountry());
      assertEquals("en", locale2.getLanguage());
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.split("KscQ;JuKA\t9>", '6');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("KscQ;JuKA\t9>"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains("KscQ;JuKA\t9>"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains("KscQ;JuKA\t9>"));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      boolean boolean1 = arrayList1.addAll((Collection<? extends String>) arrayList0);
      assertFalse(arrayList0.contains("KscQ;JuKA\t9>"));
      assertFalse(arrayList1.contains("KscQ;JuKA\t9>"));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.join((Iterator<?>) listIterator0, 'B');
      assertNotNull(string4);
      assertFalse(arrayList0.contains("KscQ;JuKA\t9>"));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotSame(arrayList0, arrayList1);
      assertEquals("", string4);
      
      String string5 = StringUtils.rightPad("G9MLM", (-1339));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("G9MLM", string5);
      
      String string6 = StringUtils.unwrap("B*fNG.6", '+');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("B*fNG.6", string6);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("(9wC6Vx'Y0q_", "  b`{Q}D| `0M", (-2057));
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String string0 = StringUtils.stripStart("ch", "Comparator should not be null.");
      assertNotNull(string0);
      assertEquals("ch", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("PUdl-c(bu )+09f1Kk1", "^!{#q,", "\"a=;|eVuhg1hpd[/");
      assertNull(stringArray0);
      
      String string1 = StringUtils.toRootLowerCase("p{InCombiningDiacriticalMarks}+");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("p{incombiningdiacriticalmarks}+", string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("p{InCombiningDiacriticalMarks}+", "\"a=;|eVuhg1hpd[/", (CharSequence[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+\"a=;|eVuhg1hpd[/", string2);
      
      int int0 = StringUtils.lastIndexOfAny("ch", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string1 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", "\r", 2562);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("\r", "\r");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, (CharSequence) "\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.join((Object[]) stringArray0, "aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?");
      assertNotNull(string0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(2, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals("aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?", string0);
      
      String string1 = StringUtils.upperCase("aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEqualsstring1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("\r", "\r");
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      byte[] byteArray0 = StringUtils.getBytes("\r", (Charset) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)13}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      String string2 = StringUtils.abbreviate("\r", 2562, 581);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\r", string2);
      
      String string3 = StringUtils.firstNonBlank(stringArray1);
      assertNull(string3);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.repeat(')', 2562);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      CharBuffer charBuffer0 = StringUtils.firstNonEmpty((CharBuffer[]) null);
      assertNull(charBuffer0);
      
      String string5 = StringUtils.left("aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?", 581);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]", string5);
      
      String string6 = StringUtils.removeStartIgnoreCase("\r", "nTHv0ea_%`<_");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("\r", string6);
      
      String string7 = StringUtils.abbreviate("\r", "T9}|z!^WhEnXQe", 581);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertEquals("\r", string7);
      
      String string8 = StringUtils.strip((String) null, "w)`");
      assertNull(string8);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string9 = StringUtils.wrapIfMissing((String) null, "aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?");
      assertNull(string9);
      
      String string10 = StringUtils.removeAll("\r", (String) null);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string6));
      assertEquals("\r", string10);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = StringUtils.capitalize("......");
      assertNotNull(string0);
      assertEquals("......", string0);
      
      String string1 = StringUtils.toRootUpperCase("p}r <[BbPTq#");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("P}R <[BBPTQ#", string1);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", "\r", 2562);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("\r", "\r");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, (CharSequence) "\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.join((Object[]) stringArray0, "aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?");
      assertNotNull(string0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(2, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals("aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?", string0);
      
      String string1 = StringUtils.upperCase("aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEqualsstring1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("\r", "\r");
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      byte[] byteArray0 = StringUtils.getBytes("\r", (Charset) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)13}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      String string2 = StringUtils.abbreviate("\r", 2562, 581);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\r", string2);
      
      String string3 = StringUtils.firstNonBlank(stringArray1);
      assertNull(string3);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.repeat(')', 2562);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      CharBuffer charBuffer0 = StringUtils.firstNonEmpty((CharBuffer[]) null);
      assertNull(charBuffer0);
      
      String string5 = StringUtils.left("aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?", 581);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]", string5);
      
      boolean boolean2 = StringUtils.contains((CharSequence) string4, 581);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string6 = StringUtils.removeStartIgnoreCase("\r", "nTHv0ea_%`<_");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("\r", string6);
      
      String string7 = StringUtils.abbreviate("\r", "T9}|z!^WhEnXQe", 581);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals("\r", string7);
      
      String string8 = StringUtils.strip((String) null, "w)`");
      assertNull(string8);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("+{-M5x/pi/1KG^", "F[7|RV pZ3mLzUp", "Z}");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 15
         // F[7|RV pZ3mLzUp
         //                ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      long[] longArray0 = new long[8];
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1843;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'e', (int) (short)13, 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (-1103), 0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1103);
      longArray0[1] = (long) (-1);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1862;
      shortArray0[1] = (short)0;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'e', (int) (short)73, 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 73
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^( ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.leftPad("The character ", 53);
      assertNotNull(string0);
      assertEquals("                                       The character ", string0);
      
      String string1 = StringUtils.stripStart("The character ", "Lzu`^( ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The character ", string1);
      
      String string2 = StringUtils.stripToEmpty("Index: ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Index:", string2);
      
      String string3 = StringUtils.replaceFirst("k$MC%qIG", "k$MC%qIG", "                                       The character ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("k$MC%qIG", string3);
      
      boolean boolean1 = StringUtils.isNotEmpty("Lzu`^( ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String string0 = StringUtils.replaceEachRepeatedly("u!R.|_[*&SdP [r", (String[]) null, (String[]) null);
      assertNotNull(string0);
      assertEquals("u!R.|_[*&SdP [r", string0);
      
      String string1 = StringUtils.stripEnd("8(|b.", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("8(|b.", string1);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Lzu`^( ");
      assertNotNull(string0);
      assertEquals("Lzu`^(", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "Lzu`^(";
      charSequenceArray0[1] = (CharSequence) "Lzu`^( ";
      charSequenceArray0[2] = (CharSequence) "Lzu`^(";
      CharBuffer charBuffer0 = CharBuffer.wrap(charSequenceArray0[2]);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals("Lzu`^(", charBuffer0.toString());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(8, charSequenceArray0.length);
      
      charSequenceArray0[3] = (CharSequence) charBuffer0;
      charSequenceArray0[4] = (CharSequence) "Lzu`^(";
      charSequenceArray0[5] = (CharSequence) "Lzu`^(";
      charSequenceArray0[6] = (CharSequence) "Lzu`^( ";
      charSequenceArray0[7] = (CharSequence) "Lzu`^( ";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Lzu`^( ", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = StringUtils.repeat("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", 4);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", string0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("org.apache.commons.lang3.StringUtils"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains("org.apache.commons.lang3.StringUtils"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertNotNull(string1);
      assertFalse(arrayList0.contains("org.apache.commons.lang3.StringUtils"));
      assertFalse(string1.equals((Object)string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      arrayList0.ensureCapacity(4);
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[7] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[8] = (CharSequence) "";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("STe,i.");
      assertNotNull(string0);
      assertEquals("STe,i.", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("STe,i.");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap("STe,i.", '#');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("#STe,i.#", string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("STe,i.");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.center("#STe,i.#", 105, 'W');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW#STe,i.#WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW", string2);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("N5g^quBX#", '^');
      assertNotNull(string0);
      assertEquals("quBX#^N5g", string0);
      
      String string1 = StringUtils.substringBeforeLast("{}", "org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{}", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{}";
      stringArray0[1] = "{}";
      stringArray0[2] = "quBX#^N5g";
      stringArray0[3] = "{}";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.lowerCase("*1");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("*1", string2);
      
      String string3 = StringUtils.replaceFirst("}n&]P*Rk\"]5Zm&)", "...", "{}");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("{}]P*Rk\"]5Zm&)", string3);
      
      byte byte0 = (byte) (-126);
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      ByteBuffer byteBuffer0 = charset0.encode("\n");
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(1, byteBuffer0.limit());
      assertEquals(1, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1, byteBuffer0.remaining());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains(string2));
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        Charset.forName("\"Bm'|6aXvBJ*4;d");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \"Bm'|6aXvBJ*4;d
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      String string0 = StringUtils.difference(")&D4MIN@J\"V.~\"Yq", ")&D4MIN@J\"V.~\"Yq");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWith(")&D4MIN@J\"V.~\"Yq", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).toString();
      String string1 = StringUtils.getIfEmpty("X!]DI~e[W|v SHCf$$0", supplier0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("X!]DI~e[W|v SHCf$$0", string1);
      
      String string2 = StringUtils.wrap("Search and Replace array lengths don't match: ", ',');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(",Search and Replace array lengths don't match: ,", string2);
      
      LinkedHashSet<CharBuffer> linkedHashSet0 = new LinkedHashSet<CharBuffer>((byte)4);
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      String string3 = StringUtils.join((Iterable<?>) linkedHashSet0, "X!]DI~e[W|v SHCf$$0");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("", string3);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) ")&D4MIN@J\"V.~\"Yq", "");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedHashSet0;
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) supplier0;
      String string4 = StringUtils.join(objectArray0, ',');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(4, objectArray0.length);
      assertEquals("[],,,null", string4);
      
      String string5 = StringUtils.replaceAll(")&D4MIN@J\"V.~\"Yq", "#", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(")&D4MIN@J\"V.~\"Yq", string5);
      
      String string6 = StringUtils.defaultIfEmpty((String) null, ",Search and Replace array lengths don't match: ,");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertEquals(",Search and Replace array lengths don't match: ,", string6);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Array element ");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      String string0 = StringUtils.join(booleanArray0, 'O');
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, false, true, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals("trueOfalseOfalseOfalseOtrueOfalse", string0);
      
      String string1 = StringUtils.stripToNull("igV!%*/");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("igV!%*/", string1);
      
      String string2 = StringUtils.repeat("I{]", 76);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]I{]", string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.removeIgnoreCase("I{]", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("I{]", string3);
      
      String string4 = StringUtils.leftPad("trueOfalseOfalseOfalseOtrueOfalse", 13, 'w');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("trueOfalseOfalseOfalseOtrueOfalse", string4);
      
      String string5 = StringUtils.replace(", Length: ", "...", "I{]");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals(", Length: ", string5);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String string0 = StringUtils.stripEnd("?", "?");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string1 = StringUtils.replaceChars("", "^CFR\"J_@Xxt*N", "54k\".54k\".");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      String string0 = StringUtils.left("The character ", 1);
      assertNotNull(string0);
      assertEquals("T", string0);
      
      String string1 = StringUtils.replace("T", "The character ", "T", 1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("T", string1);
      
      String string2 = StringUtils.rightPad("dl-c(bu )+09f1Kk1", 1, 'd');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("dl-c(bu )+09f1Kk1", string2);
      
      String string3 = StringUtils.deleteWhitespace("dl-c(bu )+09f1Kk1");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("dl-c(bu)+09f1Kk1", string3);
      
      String string4 = StringUtils.stripStart("T", "T");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      String string5 = StringUtils.valueOf(charArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertArrayEquals(new char[] {'\u0000', 'd', 'd'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("\u0000dd", string5);
      
      int int0 = StringUtils.lastOrdinalIndexOf("dl-c(bu )+09f1Kk1", "\u0000dd", 1);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "T", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', 'd', 'd'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) null, locale_FilteringMode0);
      assertNotNull(list0);
      assertFalse(list0.contains(string1));
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string6 = StringUtils.join(list0, "\u0000dd", 114, (-1));
      assertNotNull(string6);
      assertFalse(list0.contains(string1));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("", string6);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "T";
      stringArray0[1] = "\r";
      stringArray0[2] = "";
      stringArray0[3] = "T";
      stringArray0[4] = "dl-c(bu)+09f1Kk1";
      stringArray0[5] = "dl-c(bu)+09f1Kk1";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string7 = StringUtils.substringBetween("{}", "NPC", "]");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Strings must not be null", "?");
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = "Strings must not be null";
      stringArray0[2] = "?";
      stringArray0[3] = "E<YxdDUe*9";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "?");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "N/[nKQig_K|O";
      charSequenceArray0[1] = (CharSequence) "N/[nKQig_K|O";
      charSequenceArray0[4] = (CharSequence) "9s<N|l/@Y/H8F";
      String string0 = StringUtils.overlay("N/[nKQig_K|O", "N/[nKQig_K|O", 3667, 3667);
      assertNotNull(string0);
      assertEquals("N/[nKQig_K|ON/[nKQig_K|O", string0);
      
      charSequenceArray0[5] = (CharSequence) "N/[nKQig_K|ON/[nKQig_K|O";
      charSequenceArray0[6] = null;
      String string1 = StringUtils.prependIfMissingIgnoreCase("N/[nKQig_K|O", (CharSequence) null, charSequenceArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, charSequenceArray0.length);
      assertEquals("N/[nKQig_K|O", string1);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, 'T', 3667, 108);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(7, charSequenceArray0.length);
      assertEquals("", string2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = 'T';
      charArray0[3] = 'T';
      charArray0[4] = 'T';
      charArray0[5] = 'T';
      charArray0[6] = 'T';
      String string3 = StringUtils.valueOf(charArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new char[] {'T', 'T', 'T', 'T', 'T', 'T', 'T'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("TTTTTTT", string3);
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[1], (CharSequence) "TTTTTTT");
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '0');
      assertNotNull(string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 518;
      floatArray0[1] = (float) 518;
      floatArray0[2] = (float) '0';
      String string1 = StringUtils.join(floatArray0, '\\');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new float[] {518.0F, 518.0F, 48.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals("518.0\\518.0\\48.0", string1);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains('\\'));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains('\\'));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      
      String string2 = StringUtils.join(iterator0, 'o');
      assertNotNull(string2);
      assertFalse(arrayDeque0.contains('o'));
      assertFalse(string2.equals((Object)string1));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceChars("", "Object varargs must not be null", "518.0)8.0\u00048.0");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) ".>Livn3";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "518.0)8.0\u00048.0";
      String string4 = StringUtils.stripStart("rz", "rz");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "fljxESn)F^P;HU*^=d";
      charSequenceArray0[5] = (CharSequence) "518.0)8.0\u00048.0";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) "";
      String string5 = StringUtils.prependIfMissingIgnoreCase("fljxESn)F^P;HU*^=d", "", charSequenceArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals(9, charSequenceArray0.length);
      assertEquals("fljxESn)F^P;HU*^=d", string5);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, 'T', 102, 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 102
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      String string0 = "tsq*kQ";
      int int0 = StringUtils.compare("tsq*kQ", "tsq*kQ", true);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3816;
      shortArray0[1] = (short) (-6498);
      char char0 = '~';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("NQDYW8:P2 uZks=>9_", "tsq*kQ");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '~';
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      String string1 = "q2I*\"|YBtZ3j#iUU}U_";
      String string2 = "org.apache.commons.lang3.StringUtils";
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("q2I*\"|YBtZ3j#iUU}U_", "org.apache.commons.lang3.StringUtils", (int) (short) (-6498));
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("org.apache.commons.lang3.Charsets", (-3881));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      String string0 = "TB3+vjG?Xi";
      int int0 = (-1968);
      // Undeclared exception!
      try { 
        StringUtils.truncate("TB3+vjG?Xi", (-1968));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      String string0 = StringUtils.join((List<?>) vector0, "Exception cloning Cloneable type ", 57, 57);
      assertNotNull(string0);
      assertFalse(vector0.contains(string0));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Exception cloning Cloneable type ", "Exception cloning Cloneable type ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.unwrap("Exception cloning Cloneable type ", "Exception cloning Cloneable type ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Exception cloning Cloneable type ", string1);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("'U8tN'U8tN", "'U8tN'U8tN");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("shC;~aGJE`Z_>e", (Locale) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("SHC;~AGJE`Z_>E", string1);
      
      String string2 = StringUtils.normalizeSpace("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrapIfMissing("'U8tN'U8tN", " _B");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" _B'U8tN'U8tN _B", string3);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) " _B'U8tN'U8tN _B", "2s]!N");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      String string4 = StringUtils.join(longArray0, ';', 4591, 4591);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertArrayEquals(new long[] {0L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", "\r", 2562);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("\r", "\r");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, "\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("\r");
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (Charset) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      CharBuffer charBuffer0 = StringUtils.firstNonEmpty((CharBuffer[]) null);
      assertNull(charBuffer0);
      
      String string0 = StringUtils.abbreviate("e@BI9Yr#n|y(!6K", "\r", 3);
      assertNotNull(string0);
      assertEquals("e@\r", string0);
      
      String string1 = StringUtils.strip("bl*", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("bl*", string1);
      
      String string2 = StringUtils.substringAfter((String) null, "tQq?mCG?m6>{J0+.~n");
      assertNull(string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("[wl");
      assertNotNull(string0);
      assertEquals("[wl", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "[wl", (CharSequence) "[wl");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("[wl", charSequence0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("[wl", "[wl");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      float[] floatArray0 = new float[8];
      String string1 = StringUtils.join(floatArray0, 'J');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals("0.0J0.0J0.0J0.0J0.0J0.0J0.0J0.0", string1);
      
      String string2 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string2);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "[wl", (CharSequence) "Threshold must not be negative");
      assertFalse(boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Threshold must not be negative", "[wl");
      assertEquals(0.46, double0, 0.01);
      
      boolean boolean1 = StringUtils.isNumeric("0.0J0.0J0.0J0.0J0.0J0.0J0.0J0.0");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      doubleArray0[2] = (double) 0.0F;
      doubleArray0[3] = (double) 0.0F;
      String string3 = StringUtils.join(doubleArray0, 'G');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals("0.0G0.0G0.0G0.0G0.0", string3);
      
      String string4 = StringUtils.replaceEachRepeatedly("0.0J0.0J0.0J0.0J0.0J0.0J0.0J0.0", stringArray0, stringArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("0.0J0.0J0.0J0.0J0.0J0.0J0.0J0.0", string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("[wl", "0.0J0.0J0.0J0.0J0.0J0.0J0.0J0.0");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals("[wl", string5);
      
      String string6 = StringUtils.substringBetween((String) null, "2");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Exception cloning Cloneable type ", "Exception cloning Cloneable type ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>(stack0);
      assertNotNull(hashSet0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      String string0 = StringUtils.replace("yyOCcKZBK/#JiL|", "A&bE", "A&bE");
      assertNotNull(string0);
      assertEquals("yyOCcKZBK/#JiL|", string0);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", "\r", 2562);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("\r", "\r");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      String string0 = StringUtils.remove("\r", "Comparator should not be null.Comparator should not be null.");
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.substringBetween((String) null, "Comparator should not be null.Comparator should not be null.");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) null, (CharSequence) "\r");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("\r");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      byte[] byteArray0 = StringUtils.getBytes("\r", (Charset) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)13}, byteArray0);
      assertEquals(1, byteArray0.length);
      
      CharBuffer charBuffer0 = StringUtils.firstNonEmpty((CharBuffer[]) null);
      assertNull(charBuffer0);
      
      String string0 = StringUtils.abbreviate("\r", "T9}|z!^WhEnXQe", 581);
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = StringUtils.strip((String) null, "w)`");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^r ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.leftPad("The characterz", 53);
      assertNotNull(string0);
      assertEquals("                                       The characterz", string0);
      
      String string1 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.join((long[]) null, '\"', 2185, 2185);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String string0 = StringUtils.strip("vn");
      assertNotNull(string0);
      assertEquals("vn", string0);
      
      String string1 = StringUtils.abbreviate("vn", "vn", 4);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("vn", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "vn";
      charSequenceArray0[1] = (CharSequence) "vn";
      charSequenceArray0[2] = (CharSequence) "vn";
      charSequenceArray0[3] = (CharSequence) "vn";
      boolean boolean0 = StringUtils.endsWithAny("vn", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = StringUtils.getBytes("vn", (Charset) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {(byte)118, (byte)110}, byteArray0);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String string0 = StringUtils.rightPad("w?uHJ#`-)?CE~$gL", 53, "gy7Y`");
      assertNotNull(string0);
      assertEquals("w?uHJ#`-)?CE~$gLgy7Y`gy7Y`gy7Y`gy7Y`gy7Y`gy7Y`gy7Y`gy", string0);
      
      String string1 = StringUtils.abbreviate("[c<d^", 413, 64);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[c<d^", string1);
      
      String string2 = StringUtils.defaultIfBlank("[c<d^", "gy7Y`");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("[c<d^", string2);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String string0 = StringUtils.upperCase("9(7-D5");
      assertNotNull(string0);
      assertEquals("9(7-D5", string0);
      
      String string1 = StringUtils.substringBeforeLast(", '", "Jh#GE5jsmx{nasfm+l");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", '", string1);
      
      String string2 = StringUtils.repeat("9(7-D5", "Jh#GE5jsmx{nasfm+l", 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.removeAll("", " vs ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("", "...", "");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.removeStart("!&sb!EDeb", "!&sb!EDeb");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertEquals("", string5);
      
      String string6 = StringUtils.defaultString("");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1140);
      shortArray0[1] = (short)0;
      String string7 = StringUtils.defaultString(" vs ");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertEquals(" vs ", string7);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = '-';
      charArray0[4] = '-';
      charArray0[5] = '-';
      charArray0[6] = '-';
      charArray0[7] = '-';
      charArray0[8] = '-';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "9(7-D5", charArray0);
      assertArrayEquals(new char[] {'-', '-', '-', '-', '-', '-', '-', '-', '-'}, charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, '1');
      assertNotNull(string0);
      assertFalse(arrayList0.contains('1'));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals("", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = '1';
      charArray0[7] = '1';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'1', '1', '1', '1', '1', '1', '1', '1'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.uncapitalize("^q`V>b,");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("^q`V>b,", string1);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("jqR$h5U'");
      assertNotNull(string0);
      assertEquals("jqR$h5U'", string0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '0');
      assertNotNull(string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("rz", (String) null, 518);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.truncate("", 4);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.StringUtils", '4');
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.compare("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string0 = StringUtils.join(booleanArray0, '0', 648, 0);
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals("", string0);
      
      int int0 = StringUtils.compare("", "HPBIFU^5t?M");
      assertEquals((-11), int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("HPBIFU^5t?M");
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("", 322);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                                                                                                                                                                                                                                                                                                                                  ", string1);
      
      String string2 = StringUtils.stripStart("HPBIFU^5t?M", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("HPBIFU^5t?M", string2);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.leftPad("sa?r9},{Dmd", 322);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                                                                                                                                                                                                                                                                                                                       sa?r9},{Dmd", string1);
      
      String string2 = StringUtils.stripStart("                                                                                                                                                                                                                                                                                                                       sa?r9},{Dmd", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("sa?r9},{Dmd", string2);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      String string0 = StringUtils.remove("$U<bHd^-", 'L');
      assertNotNull(string0);
      assertEquals("$U<bHd^-", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("$U<bHd^-", (String) null, 53);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "oU)?(z");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string1 = StringUtils.abbreviateMiddle("V", "$U<bHd^-", (-1892));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("V", string1);
      
      String string2 = StringUtils.substringBefore(" has no clone method", 32);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String[] stringArray2 = StringUtils.split("");
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(0, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertNotNull(set0);
      assertFalse(set0.contains('L'));
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      String string3 = StringUtils.upperCase("$U<bHd^-", locale0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("$U<BHD^-", string3);
      
      String string4 = StringUtils.chop("org.apache.commons.lang3.ObjectUtils$Null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("org.apache.commons.lang3.ObjectUtils$Nul", string4);
      
      boolean boolean0 = StringUtils.isAlphaSpace("5t>JL=vuF})8'");
      assertFalse(boolean0);
      
      String string5 = StringUtils.strip("$kjeg(1V");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("$kjeg(1V", string5);
      
      String string6 = StringUtils.replaceChars("5t>JL=vuF})8'", "!y)we%AM#", "V");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("5t>JL=vuF}8'", string6);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.truncate("", 6);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^( ");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Lzu`^( ";
      objectArray0[3] = (Object) "The character ";
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.abbreviateMiddle("yJ'-t1^ueFM/\"o4)a_Y", (String) null, 2443);
      assertNotNull(string0);
      assertEquals("yJ'-t1^ueFM/\"o4)a_Y", string0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", 'U');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      CharSequence charSequence0 = null;
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) null;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'I', (-1176), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1176
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = StringUtils.replaceChars("The character ", "offset cannot be negative", "offset cannot be negative");
      assertNotNull(string0);
      assertEquals("The character ", string0);
      
      String string1 = StringUtils.replacePattern("offset cannot be negative", "The character ", "p]#br");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      
      String string2 = StringUtils.truncate("The character ", 167);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("The character ", string2);
      
      String string3 = StringUtils.trim("v3");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("v3", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[1] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[2] = (CharSequence) "Lx]C$6cGH";
      charSequenceArray0[3] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[4] = (CharSequence) "The character ";
      charSequenceArray0[5] = (CharSequence) "v3";
      charSequenceArray0[6] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[7] = (CharSequence) "The character ";
      String string4 = StringUtils.prependIfMissingIgnoreCase("Lx]C$6cGH", "v3", charSequenceArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(8, charSequenceArray0.length);
      assertEquals("Lx]C$6cGH", string4);
      
      String string5 = StringUtils.rotate("Exception cloning Cloneable type ", 97);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("ception cloning Cloneable type Ex", string5);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      String string0 = StringUtils.substringBetween("?y/qg", "s<s`tDB7|&F", "ccK?!");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "s<s`tDB7|&F";
      charSequenceArray0[1] = (CharSequence) "s<s`tDB7|&F";
      String string1 = StringUtils.substringBefore("ccK?!", 13);
      assertNotNull(string1);
      assertEquals("ccK?!", string1);
      
      charSequenceArray0[2] = (CharSequence) "ccK?!";
      charSequenceArray0[3] = (CharSequence) "Lzu3`*^(] ";
      charSequenceArray0[4] = (CharSequence) "Lzu3`*^(] ";
      String string2 = StringUtils.prependIfMissingIgnoreCase("?y/qg", "w0?Y&Nr%m<", charSequenceArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(5, charSequenceArray0.length);
      assertEquals("w0?Y&Nr%m<?y/qg", string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "w0?Y&Nr%m<", (CharSequence) "w0?Y&Nr%m<?y/qg", 66);
      assertEquals(5, int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.toRootUpperCase(")WpA7m");
      assertNotNull(string0);
      assertEquals(")WPA7M", string0);
      
      String string1 = StringUtils.strip("4:G", "PUdl-c(bu )+09f1Kk1");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("4:G", string1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase(")WPA7M", "4:G", (CharSequence[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("4:G)WPA7M", string2);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      int int0 = StringUtils.compare("tsq*kQ", "tsq*kQ", true);
      assertEquals(0, int0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3816;
      shortArray0[1] = (short) (-6498);
      String string0 = "";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("NQDYW8:P2 uZks=>9_", "tsq*kQ");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '~';
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      String string1 = StringUtils.join(floatArray0, 'M');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new float[] {126.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals("126.0M0.0M0.0", string1);
      
      boolean boolean0 = StringUtils.isAlpha("NQDYW8:P2 uZks=>9_");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceChars("NQDYW8:P2 uZks=>9_", "", ".>Livn3");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("NQDYW8:P2 uZks=>9_", string2);
      
      String string3 = StringUtils.prependIfMissingIgnoreCase(".>Livn3", "126.0M0.0M0.0", stringArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(4, stringArray0.length);
      assertEquals(".>Livn3", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'F', (int) (short) (-6498), 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6498
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "z_a<{9no";
      boolean boolean0 = StringUtils.endsWithAny("Lzu3`*^(] ", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chomp("Lzu3`*^(] ", "org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string1);
      assertEquals("Lzu3`*^(] ", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("J`nb;e0h_0[yw*RMc");
      assertNotNull(stringArray0);
      assertEquals(14, stringArray0.length);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (-740L);
      longArray0[1] = 1254L;
      String string2 = StringUtils.join(longArray0, '1');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new long[] {(-740L), 1254L}, longArray0);
      assertEquals(2, longArray0.length);
      assertEquals("-74011254", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Lzu3`*^(] ", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      String string0 = StringUtils.stripEnd("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", 32);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, '1');
      assertNotNull(string0);
      assertFalse(arrayList0.contains('1'));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = '1';
      charArray0[7] = '1';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'1', '1', '1', '1', '1', '1', '1', '1'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("'Fchj4'1HW~&:R", "Cannot clone Cloneable type ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      String string0 = StringUtils.right("54\".", 90);
      assertNotNull(string0);
      assertEquals("54\".", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("54\".");
      assertFalse(boolean0);
      
      String string1 = StringUtils.left((String) null, 90);
      assertNull(string1);
      
      String string2 = StringUtils.removeFirst("The character ", "Kb%E\";jE,~qjuV");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("The character ", string2);
      
      String string3 = StringUtils.substringBetween("[wl", "TO$17");
      assertNull(string3);
      
      String string4 = StringUtils.chop("$");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.substringBetween("", (String) null, "54\".");
      assertNull(string5);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.left((String) null, 2);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1051;
      shortArray0[1] = (short)6;
      shortArray0[2] = (short)8;
      shortArray0[3] = (short)9;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)6;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)56;
      shortArray0[8] = (short)1124;
      String string0 = StringUtils.join(shortArray0, '~', (int) (short)1124, 0);
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short)1051, (short)6, (short)8, (short)9, (short)0, (short)6, (short)0, (short)56, (short)1124}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.chop("");
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      String string0 = StringUtils.truncate(" ", 15);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("US", locale1.getCountry());
      assertEquals("en_US", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      int int0 = StringUtils.getFuzzyDistance("TB3+vjG?Xi", " ", locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotSame(locale0, locale1);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEndIgnoreCase(">vJ2@ix',wSJv_", "TB3+vjG?Xi");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(">vJ2@ix',wSJv_", string1);
      
      String string2 = StringUtils.substringBeforeLast("3_a33!Ew)bM!`W\"DAJ", "TB3+vjG?Xi");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("3_a33!Ew)bM!`W\"DAJ", string2);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.repeat("comparator", 76);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("comparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparator", string1);
      
      StringUtils.truncate("comparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparator", 76, 76);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      String string0 = StringUtils.rightPad("Minimum abbreviation width is %d", (-746), '|');
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width is %d", string0);
      
      String string1 = StringUtils.deleteWhitespace("Minimum abbreviation width is %d");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimumabbreviationwidthis%d", string1);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      String string2 = locale0.getDisplayCountry();
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("China", string2);
      
      int int0 = StringUtils.getFuzzyDistance("Minimum abbreviation width is %d", "Minimumabbreviationwidthis%d", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(74, int0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, '1');
      assertNotNull(string0);
      assertFalse(arrayList0.contains('1'));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      Integer integer0 = new Integer(2022);
      assertNotNull(integer0);
      assertEquals(2022, (int)integer0);
      
      boolean boolean0 = arrayList0.add((Object) integer0);
      assertFalse(arrayList0.contains('1'));
      assertTrue(arrayList0.contains(2022));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = '1';
      charArray0[7] = '1';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'1', '1', '1', '1', '1', '1', '1', '1'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte) (-45);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-64);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '1', (int) (byte)108, Integer.MAX_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 108
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, 'U', 16, 1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, '@', 18, 3401);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 3401
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.join((List<?>) arrayList0, '@', (int) '@', (int) '@');
      assertNotNull(string0);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("{}");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.rotate((String) null, 0);
      assertNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)74;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)28;
      byteArray0[4] = (byte)33;
      byteArray0[5] = (byte) (-108);
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte)56;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      String string1 = StringUtils.toEncodedString(byteArray0, charset0);
      assertNotNull(string1);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertArrayEquals(new byte[] {(byte)74, (byte)69, (byte)0, (byte)28, (byte)33, (byte) (-108), (byte)109, (byte)56}, byteArray0);
      assertEquals(8, byteArray0.length);
      assertEquals("JE\u0000\u001C!\uFFFDm8", string1);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(0));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, '.', (int) (byte)33, (int) (byte)74);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 74
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      String string0 = StringUtils.difference(")&D4MIN@J\"V.~\"Yq", ")&D4MIN@J\"V.~\"Yq");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWith(")&D4MIN@J\"V.~\"Yq", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("X!]DI~e[W|v SHCf$$0", supplier0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("X!]DI~e[W|v SHCf$$0", string1);
      
      String string2 = StringUtils.wrap("Search and Replace array lengths don't match: ", ',');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(",Search and Replace array lengths don't match: ,", string2);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)4;
      byteArray0[6] = (byte)0;
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte) (-118);
      byteArray0[6] = (byte)101;
      String string3 = StringUtils.join(byteArray0, ',');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte) (-11), (byte)9, (byte)4, (byte) (-118), (byte)101}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("4,0,-11,9,4,-118,101", string3);
      
      String string4 = StringUtils.toString(byteArray0, (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertArrayEquals(new byte[] {(byte)4, (byte)0, (byte) (-11), (byte)9, (byte)4, (byte) (-118), (byte)101}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("\u0004\u0000\uFFFD\t\u0004\uFFFDe", string4);
      
      boolean boolean2 = StringUtils.endsWith("4,0,-11,9,4,-118,101", "\u0004\u0000\uFFFD\t\u0004\uFFFDe");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("}R1AMjL", "\u0004\u0000\uFFFD\t\u0004\uFFFDe", "}R1AMjL");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("}R1AMjL", string5);
      
      String[] stringArray0 = StringUtils.split(" in an array of ", "4,0,-11,9,4,-118,101", 256);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("MkT;)U9=", '~');
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string6 = StringUtils.remove("", "yV`GHMplpV>P$-");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>(24, 771);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(24, vector0.capacity());
      assertEquals(0, vector0.size());
      
      String string0 = StringUtils.join((List<?>) vector0, "]mB", 13, 13);
      assertNotNull(string0);
      assertFalse(vector0.contains(string0));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(24, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, 'z');
      assertNull(stringArray0);
      
      String string1 = StringUtils.remove("Comparator should not be null.dl-c(bu )+09f1Kk1...", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Comparator should not be null.dl-c(bu )+09f1Kk1...", string1);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      String string0 = StringUtils.defaultString(")", ")");
      assertNotNull(string0);
      assertEquals(")", string0);
      
      boolean boolean0 = StringUtils.isMixedCase(")");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ")", (CharSequence) ")", 8192);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[21];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      String string1 = StringUtils.join(booleanArray0, '*');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(21, booleanArray0.length);
      assertEquals("true*true*true*true*true*false*false*false*false*false*false*false*false*false*false*false*false*false*false*false*false", string1);
      
      String string2 = StringUtils.stripToNull(")");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(")", string2);
      
      String string3 = StringUtils.repeat(")", 8192);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("P`;n*<s(r<@", '*');
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string4 = StringUtils.defaultString((String) null, ")");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals(")", string4);
      
      String string5 = StringUtils.defaultString("8wL");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("8wL", string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String string6 = StringUtils.join((Iterable<?>) null, '*');
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, 'f');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.split((String) null, (String) null, (-1410));
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) null, 'f', (-1410), (-1410));
      assertNull(string1);
      
      String string2 = StringUtils.swapCase((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) null, '+');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 0;
      String string3 = StringUtils.join(longArray0, '_');
      assertNotNull(string3);
      assertArrayEquals(new long[] {0L, (-1L), 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertEquals("0_-1_0", string3);
      
      String string4 = StringUtils.normalizeSpace((String) null);
      assertNull(string4);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByCharacterType("Jkz%ll");
      assertNotNull(stringArray2);
      assertEquals(4, stringArray2.length);
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharBuffer charBuffer0 = StringUtils.getIfBlank((CharBuffer) null, supplier0);
      assertNull(charBuffer0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains('+'));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      Vector<Object> vector1 = new Vector<Object>(vector0);
      assertNotNull(vector1);
      assertFalse(vector0.contains('+'));
      assertFalse(vector1.contains('+'));
      assertTrue(vector1.equals((Object)vector0));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.capacity());
      assertEquals(0, vector1.size());
      
      String string5 = StringUtils.join((Iterable<?>) vector1, '_');
      assertNotNull(string5);
      assertFalse(vector0.contains('+'));
      assertFalse(vector1.contains('+'));
      assertTrue(vector0.equals((Object)vector1));
      assertTrue(vector1.equals((Object)vector0));
      assertFalse(string5.equals((Object)string3));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.capacity());
      assertEquals(0, vector1.size());
      assertNotSame(vector0, vector1);
      assertNotSame(vector1, vector0);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.truncate(" ", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.truncate("", 0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "`>*n0xkIk{M";
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) " ";
      boolean boolean1 = StringUtils.startsWithAny("Strings must not be null", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", "-qeTJ=20qZ2dLP", 459);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate(" ", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "`>*n0xkIk{M";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) " ";
      boolean boolean1 = StringUtils.startsWithAny("Strings must not be null", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      String string0 = StringUtils.left("The character ", 396);
      assertNotNull(string0);
      assertEquals("The character ", string0);
      
      String string1 = StringUtils.replace("The character ", "The character ", "The character ", 396);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("The character ", string1);
      
      String string2 = StringUtils.substringBefore("8}eis5IQ)(:etB~lj", 396);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("8}eis5IQ)(:etB~lj", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("8}eis5IQ)(:etB~lj", "8}eis5IQ)(:etB~lj", 396);
      assertNotNull(stringArray0);
      assertEquals(18, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "8}eis5IQ)(:etB~lj");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(18, stringArray0.length);
      assertEquals(18, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.abbreviateMiddle("8}eis5IQ)(:etB~lj", "8}eis5IQ)(:etB~lj", 396);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("8}eis5IQ)(:etB~lj", string3);
      
      String[] stringArray2 = StringUtils.split("The character ");
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(2, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      String string4 = StringUtils.stripToNull("3,a!m$c0;");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("3,a!m$c0;", string4);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("The character ", "3,a!m$c0;", stringArray0);
      assertNotNull(string5);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertEquals(18, stringArray0.length);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals("The character ", string5);
      
      String string6 = StringUtils.removeIgnoreCase("hould not be null.", ", Length: 0");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("hould not be null.", string6);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      String string0 = StringUtils.left("The character ", 396);
      assertNotNull(string0);
      assertEquals("The character ", string0);
      
      String string1 = StringUtils.replace("The character ", "The character ", "The character ", 396);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("The character ", string1);
      
      String string2 = StringUtils.remove((String) null, 'L');
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("8}eis5IQ)(:etB~lj", (String) null, 396);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.abbreviateMiddle((String) null, (String) null, 396);
      assertNull(string3);
      
      String[] stringArray2 = StringUtils.split("The character ");
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(2, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      String string4 = StringUtils.stripToNull("3,a!m$c0;");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("3,a!m$c0;", string4);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("The character ", "3,a!m$c0;", stringArray0);
      assertNotNull(string5);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertEquals("The character 3,a!m$c0;", string5);
      
      String string6 = StringUtils.removeIgnoreCase("hould not be null.", ", Length: 0");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("hould not be null.", string6);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) null;
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, "", charSequenceArray0);
      assertNull(string0);
      assertEquals(3, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, charSequenceArray0[0]);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.uncapitalize("");
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.chomp((String) null);
      assertNull(string3);
      
      int int1 = StringUtils.compare("", "Minimum abbreviation width with offset is %d", false);
      assertFalse(int1 == int0);
      assertEquals((-44), int1);
      
      String string4 = StringUtils.chop("comparator");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertEquals("comparato", string4);
      
      boolean boolean1 = StringUtils.isEmpty("comparato");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "", 2578);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("comparato", "dl-c(=bu )+09f1Kk1T#NV7-5|2", 1638);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int2 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      String string0 = StringUtils.mid("0]c&IN:a.,8`mU/h$]Q", 55, 5);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBefore("_", 5);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("_", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string2 = StringUtils.getIfBlank("", supplier0);
      assertNull(string2);
      
      int int0 = StringUtils.compare("`dEm+fxrjaVA'", "");
      assertEquals(13, int0);
      
      String string3 = StringUtils.removeEndIgnoreCase("......", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("......", string3);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Lzu3`*^(] ");
      assertNotNull(string0);
      assertEquals("lzu3`*^(] ", string0);
      
      String string1 = StringUtils.substringBetween("z_a<{9no", "Lzu3`*^(] ", "Lzu3`*^(] ");
      assertNull(string1);
      
      String string2 = StringUtils.removeStart("...", "Comparator should not be null.dl-c(bu )+09f1Kk1");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("...", string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "...";
      String string3 = StringUtils.replaceEach(" has no clone method", stringArray0, stringArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals(" has no clone method", string3);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      boolean boolean0 = StringUtils.isBlank("?K");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("?K");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 112;
      String string0 = StringUtils.join(intArray0, 's', 112, 112);
      assertNotNull(string0);
      assertArrayEquals(new int[] {112, 0}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals("", string0);
      
      char char0 = ' ';
      String string1 = "Minimum abbreviation width is %d";
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'D', 2, 1433);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      String string0 = StringUtils.wrap("", 'B');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.toRootLowerCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.removeFirst("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      String string3 = StringUtils.appendIfMissingIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", charSequenceArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(5, charSequenceArray0.length);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.trimToEmpty("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      
      boolean boolean0 = arrayList0.addAll((Collection<?>) stack0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(boolean0);
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertNotNull(string0);
      assertFalse(arrayList0.contains(""));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("", string0);
      
      String string1 = StringUtils.SPACE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) " ", (CharSequence) " ");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.getIfBlank(" ", (Supplier<String>) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      String string0 = StringUtils.removeStart("T9}|z!^WhEnXQe", "ch");
      assertNotNull(string0);
      assertEquals("T9}|z!^WhEnXQe", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "T9}|z!^WhEnXQe", (char[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "ch", (CharSequence) "T9}|z!^WhEnXQe");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Lzu3`*^(] ");
      assertNotNull(string0);
      assertEquals("lzu3`*^(] ", string0);
      
      String string1 = StringUtils.truncate("!Vk\"l!jFAQlC+G/", 5280);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("!Vk\"l!jFAQlC+G/", string1);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      
      int int0 = StringUtils.getFuzzyDistance("Lzu3`*^(] ", "Lzu3`*^(] ", locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals(28, int0);
      
      String string2 = StringUtils.removeEndIgnoreCase("9~pfjH{X", "!Vk\"l!jFAQlC+G/");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("9~pfjH{X", string2);
      
      String string3 = StringUtils.substringBeforeLast("!Vk\"l!jFAQlC+G/", "lzu3`*^(] ");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("!Vk\"l!jFAQlC+G/", string3);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      String string0 = StringUtils.strip("66i(''U8tN");
      assertNotNull(string0);
      assertEquals("66i(''U8tN", string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "66i(''U8tN", supplier0);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("66i(''U8tN", charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "66i(''U8tN";
      charSequenceArray0[1] = (CharSequence) "66i(''U8tN";
      charSequenceArray0[2] = (CharSequence) "66i(''U8tN";
      charSequenceArray0[3] = (CharSequence) "66i(''U8tN";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("66i(''U8tN", "66i(''U8tN", charSequenceArray0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertTrue(string1.equals((Object)charSequence0));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("66i(''U8tN", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "66i(''U8tN", 50);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "66i(''U8tN", (CharSequence) "66i(''U8tN");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.removeStart("}A/Sl!O$17LB:a$=0GA", "66i(''U8tN");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("}A/Sl!O$17LB:a$=0GA", string2);
      
      boolean boolean1 = StringUtils.isAllLowerCase("66i(''U8tN");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.defaultString("Comparator should not be null.dl-c(bu )+09f1Kk1...");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Comparator should not be null.dl-c(bu )+09f1Kk1...", string3);
      
      String string4 = StringUtils.appendIfMissing("66i(''U8tN", "Comparator should not be null.dl-c(bu )+09f1Kk1...", charSequenceArray0);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)charSequence0));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(4, charSequenceArray0.length);
      assertEquals("66i(''U8tN", string4);
      
      String string5 = StringUtils.join((short[]) null, 'X', (int) (short) (-1140), 0);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, (String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "org.apache.commons.lang3.Charsets", "");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringBetween("", "X3U_Je'$ch%=", "X3U_Je'$ch%=");
      assertNull(string0);
      
      String string1 = StringUtils.removeStart("", "org.apache.commons.lang3.Charsets");
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      
      String string0 = StringUtils.normalizeSpace("TB3+vjG?Xi");
      assertNotNull(string0);
      assertEquals("TB3+vjG?Xi", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("TB3+vjG?Xi");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, "_");
      assertNotNull(string0);
      assertEquals("_", string0);
      
      String string1 = StringUtils.defaultString("Ep5sc`&d>a");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ep5sc`&d>a", string1);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.upperCase("9(7-D5");
      assertNotNull(string0);
      assertEquals("9(7-D5", string0);
      
      charSequenceArray0[0] = (CharSequence) "9(7-D5";
      String string1 = StringUtils.substringBeforeLast(", '", "9(7-D5");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", '", string1);
      
      charSequenceArray0[1] = (CharSequence) ", '";
      boolean boolean0 = StringUtils.equalsAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Strings must not be null", "?");
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("Lw#DT~qYi", 'b');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("bLw#DT~qYib", string1);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      
      String string2 = StringUtils.deleteWhitespace("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Strings must not be null", (CharSequence) "Strings must not be null", (-1221));
      assertEquals(0, int0);
      
      String string3 = StringUtils.center("Lw#DT~qYi", (-1221), 'b');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Lw#DT~qYi", string3);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.strip("9(7-D5", "9(7-D5");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.substringBeforeLast(", '", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", '", string1);
      
      charSequenceArray0[1] = (CharSequence) ", '";
      String string2 = StringUtils.replaceIgnoreCase("", "..", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      charSequenceArray0[4] = (CharSequence) "";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("..", charSequenceArray0[5], charSequenceArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals(6, charSequenceArray0.length);
      assertEquals("..", string3);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0[4], (CharSequence) "");
      assertEquals(6, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.removeStart("!&sb!EDeb", "!&sb!EDeb");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.isAllLowerCase(", '");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.uncapitalize((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.removeFirst("", "");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      int int1 = StringUtils.compare((String) null, "", true);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string7 = StringUtils.chop("");
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertEquals("", string7);
      
      boolean boolean2 = StringUtils.isEmpty("");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.contains(charSequenceArray0[1], 561);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("?", ", '", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int2 = StringUtils.countMatches((CharSequence) "", (CharSequence) "..");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      String string0 = StringUtils.removeAll("j%,", "j%,");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      String string0 = StringUtils.left("The character ", 396);
      assertNotNull(string0);
      assertEquals("The character ", string0);
      
      String string1 = StringUtils.replace("The character ", "The character ", "The character ", 396);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("The character ", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string2 = StringUtils.wrap("I^[SC\\", '4');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("4I^[SC\\4", string2);
      
      charSequenceArray0[0] = (CharSequence) "4I^[SC\\4";
      charSequenceArray0[1] = (CharSequence) "The character ";
      charSequenceArray0[3] = (CharSequence) "The character ";
      charSequenceArray0[3] = (CharSequence) "The character ";
      charSequenceArray0[4] = (CharSequence) "The character ";
      long[] longArray0 = new long[0];
      String string3 = StringUtils.join(longArray0, 'X');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.normalizeSpace("The character ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("The character", string4);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("4I^[SC\\4");
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("The character ");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      CharBuffer charBuffer0 = StringUtils.getIfBlank((CharBuffer) null, (Supplier<CharBuffer>) null);
      assertNull(charBuffer0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertNotNull(vector0);
      assertFalse(vector0.contains("I^[SC\\"));
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("I^[SC\\"));
      
      boolean boolean0 = treeSet0.add("]");
      assertTrue(treeSet0.contains("]"));
      assertFalse(treeSet0.contains("I^[SC\\"));
      assertTrue(boolean0);
      
      Vector<Object> vector1 = new Vector<Object>(treeSet0);
      assertNotNull(vector1);
      assertTrue(treeSet0.contains("]"));
      assertFalse(treeSet0.contains("I^[SC\\"));
      assertFalse(vector1.contains("I^[SC\\"));
      assertTrue(vector1.contains("]"));
      assertFalse(vector1.equals((Object)vector0));
      assertEquals("[]]", vector1.toString());
      assertEquals(1, vector1.size());
      assertFalse(vector1.isEmpty());
      assertEquals(1, vector1.capacity());
      
      String string5 = StringUtils.join((Iterable<?>) treeSet0, 'X');
      assertNotNull(string5);
      assertTrue(treeSet0.contains(string5));
      assertFalse(treeSet0.contains("I^[SC\\"));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("]", string5);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte) (-94);
      byteArray0[2] = (byte)104;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)115;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'A', (int) (byte) (-94), 185);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -94
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      String string0 = StringUtils.strip("_E>P%c/v8b C/-", "_E>P%c/v8b C/-");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = "";
      String string2 = StringUtils.repeat("eable type ", (String) null, (-2695));
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      String string3 = StringUtils.center("_E>P%c/v8b C/-", (-2695));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("_E>P%c/v8b C/-", string3);
      
      charSequenceArray0[2] = (CharSequence) "_E>P%c/v8b C/-";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "eable type ";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-2695));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      String string0 = StringUtils.defaultString("[1gDr7\u0005Xu", " ");
      assertNotNull(string0);
      assertEquals("[1gDr7\u0005Xu", string0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Mini]um abbreviation width is %d");
      assertNotNull(string0);
      assertEquals("Mini]umabbreviationwidthis%d", string0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, "YkWki:}>?IU/");
      assertNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("Mini]um abbreviation width is %d", "YkWki:}>?IU/", (CharSequence[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Mini]um abbreviation width is %dYkWki:}>?IU/", string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "Mini]um abbreviation width is %dYkWki:}>?IU/", 'c');
      assertEquals(0, int0);
      
      String string3 = StringUtils.removeStart("Mini]um abbreviation width is %d", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Mini]um abbreviation width is %d", string3);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.substringBeforeLast(", '", "Jh#GE5jsmx{nasfm+l");
      assertNotNull(string0);
      assertEquals(", '", string0);
      
      charSequenceArray0[1] = (CharSequence) ", '";
      String string1 = StringUtils.replaceIgnoreCase("", "...", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("...", charSequenceArray0[5], charSequenceArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(6, charSequenceArray0.length);
      assertEquals("...", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.removeStart("!&sb!EDeb", "!&sb!EDeb");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase(", '");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1140);
      shortArray0[1] = (short)0;
      String string4 = StringUtils.replaceAll("", "aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?aZ9N_P.mrV]Qk%?", "...");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.upperCase("9(7-D5");
      assertNotNull(string0);
      assertEquals("9(7-D5", string0);
      
      charSequenceArray0[0] = (CharSequence) "9(7-D5";
      String string1 = StringUtils.substringBeforeLast(", '", "Jh#GE5jsmx{nasfm+l");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", '", string1);
      
      charSequenceArray0[1] = (CharSequence) ", '";
      String string2 = StringUtils.repeat("9(7-D5", "Jh#GE5jsmx{nasfm+l", 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.removeAll("", " vs ");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string4 = StringUtils.replaceIgnoreCase("", "...", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      charSequenceArray0[5] = null;
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("...", charSequence0, charSequenceArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(6, charSequenceArray0.length);
      assertEquals("...", string5);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0[4], (CharSequence) "9(7-D5");
      assertFalse(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int1);
      
      String string6 = StringUtils.removeStart("!&sb!EDeb", "!&sb!EDeb");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      
      boolean boolean1 = StringUtils.isAllLowerCase(", '");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.defaultString("");
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      
      String string8 = StringUtils.appendIfMissing("", "Jh#GE5jsmx{nasfm+l", charSequenceArray0);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertEquals(6, charSequenceArray0.length);
      assertEquals("", string8);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1140);
      shortArray0[1] = (short)0;
      String string9 = StringUtils.join(shortArray0, '-', 0, (-302));
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string8));
      assertArrayEquals(new short[] {(short) (-1140), (short)0}, shortArray0);
      assertEquals(2, shortArray0.length);
      assertEquals("", string9);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("HPBIFU^5t?M");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripStart("HPBIFU^5t?M", "");
      assertNotNull(string0);
      assertEquals("HPBIFU^5t?M", string0);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[0] = false;
      String string0 = StringUtils.join(booleanArray0, '0', 648, 0);
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals("", string0);
      
      int int0 = StringUtils.compare("", "HPBIFU^5t?M");
      assertEquals((-11), int0);
      
      String string1 = StringUtils.stripToNull("HPBIFU^5t?M");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("HPBIFU^5t?M", string1);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("bwoFQ#T6t(7qG@F0");
      assertNotNull(string0);
      assertEquals("bwoFQ#T6t(7qG@F0", string0);
      
      String string1 = StringUtils.substringAfter("bwoFQ#T6t(7qG@F0", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("", (String) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "bwoFQ#T6t(7qG@F0", 32, 108);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.center("bwoFQ#T6t(7qG@F0", 32, "bwoFQ#T6t(7qG@F0");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("bwoFQ#T6bwoFQ#T6t(7qG@F0bwoFQ#T6", string3);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "bwoFQ#T6bwoFQ#T6t(7qG@F0bwoFQ#T6";
      stringArray0[2] = "";
      stringArray0[3] = "bwoFQ#T6bwoFQ#T6t(7qG@F0bwoFQ#T6";
      stringArray0[4] = null;
      stringArray0[5] = "7N:j7FFPtRDX";
      String string4 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string4);
      assertEquals(6, stringArray0.length);
      
      String string5 = StringUtils.leftPad("", 32, '5');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("55555555555555555555555555555555", string5);
      
      String string6 = StringUtils.center((String) null, 22, "7N:j7FFPtRDX");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      String string0 = StringUtils.replace("org.apache.commons.lang3.Charsets", "org.apache.commons.lang3.Charsets", "org.apache.commons.lang3.Charsets");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.Charsets", string0);
      
      String string1 = StringUtils.substringAfter("org.apache.commons.lang3.Charsets", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.wrap((String) null, "org.apache.commons.lang3.Charsets");
      assertNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.Charsets", 32, 108);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.center("'", 32, "org.apache.commons.lang3.Charsets");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.apache.comm'org.apache.commo", string3);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      String string0 = ", '";
      String string1 = "Ep5sc`&d>a";
      String string2 = StringUtils.difference(", '", "Ep5sc`&d>a");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Ep5sc`&d>a", string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      String string3 = StringUtils.toString(byteArray0, (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)5, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals("\u0000\u0000\u0005\u0000\u0000", string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) ", '", (CharSequence) "Ep5sc`&d>a");
      assertFalse(boolean0);
      
      String string4 = StringUtils.rightPad("i%~V:u55&HV", 692);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("i%~V:ustring4);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = null;
      String string6 = StringUtils.center("i%~V:u55&HV", 56, (String) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("                      i%~V:u55&HV                       ", string6);
      
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[5] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      charArray0[3] = 'C';
      charArray0[4] = '~';
      charArray0[5] = 'R';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "......", charArray0);
      assertArrayEquals(new char[] {'\u0000', '~', '~', 'C', '~', 'R'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("......");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      String string0 = StringUtils.rotate("....", 13);
      assertNotNull(string0);
      assertEquals("....", string0);
      
      String string1 = StringUtils.center("....", 36, "....");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("....................................", string1);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("'U8tN'U8tN", "'U8tN'U8tN");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.difference("", "'U8tN'U8tN");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("'U8tN'U8tN", string1);
      
      String string2 = StringUtils.normalizeSpace("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, "'U8tN'U8tN");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.substringAfter("'U8tN'U8tN", (-1020));
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      String string0 = StringUtils.left("The character ", 1);
      assertNotNull(string0);
      assertEquals("T", string0);
      
      String string1 = StringUtils.replace("T", "The character ", "T", 1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("T", string1);
      
      String string2 = StringUtils.join((Iterator<?>) null, 'n');
      assertNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      String string3 = StringUtils.join((Object[]) null, 'n', 3576, 279);
      assertNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty("IM2Jw3@1&or", (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '+');
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, ')');
      assertNotNull(string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("\r", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>(stack0);
      assertNotNull(hashSet0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean1 = hashSet0.add(locale_FilteringMode0);
      assertFalse(stack0.contains(locale_FilteringMode0));
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertFalse(boolean1 == boolean0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean1);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean2 = hashSet0.add(locale_FilteringMode1);
      assertFalse(stack0.contains(locale_FilteringMode1));
      assertTrue(hashSet0.contains(locale_FilteringMode1));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(boolean2);
      
      stack0.removeAllElements();
      assertFalse(stack0.contains(locale_FilteringMode1));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[17];
      String string0 = StringUtils.swapCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(17, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.chop("d^%?");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("d^%", string1);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      String string0 = StringUtils.center("8(|b.", 2449);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((float[]) null, '2');
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, string0, 2449);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "nTfhAgrf'w+k";
      stringArray0[1] = "nTfhAgrf'w+k";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("nTfhAgrf'w+k", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "rt.%K7q9!Q";
      stringArray0[1] = "nTfhAgrf'w+k";
      stringArray0[3] = "nTfhAgrf'w+k";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("nTfhAgrf'w+k", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      String string0 = StringUtils.repeat("", 53);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrapIfMissing("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.center("", 53, "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("                                                     ", string3);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      String string0 = StringUtils.difference(")&D4MIN@J\"V.~\"Yq", ")&D4MIN@J\"V.~\"Yq");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      String string1 = StringUtils.leftPad("=ljpM0n=?ff9o$LxhlTO$17", 2, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("=ljpM0n=?ff9o$LxhlTO$17", string1);
      
      String string2 = StringUtils.unwrap("]gDr]`[5d/j ", "=ljpM0n=?ff9o$LxhlTO$17");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("]gDr]`[5d/j ", string2);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      // Undeclared exception!
      StringUtils.leftPad("\"ljDT", 65536, "5{i");
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "nTfhAgrf'w+k";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("nTfhAgrf'w+k", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 1637, "");
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "rt.%K7q9!Q";
      stringArray0[1] = "nTfhAgrf'w+k";
      stringArray0[2] = "NkI&sZy4e3rC";
      stringArray0[3] = "nTfhAgrf'w+k";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("nTfhAgrf'w+k", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("TB3+vjG?Xi");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      String string0 = StringUtils.truncate(" ", 15);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      
      int int0 = new Integer(15);
      assertEquals(15, int0);
      
      String string1 = StringUtils.normalizeSpace(" ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBeforeLast(" ", "TB3+vjG?Xi");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(" ", string2);
      
      int int1 = StringUtils.compareIgnoreCase(" ", " ", true);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.wrap("I^[SC\\", '=');
      assertNotNull(string0);
      assertEquals("=I^[SC\\=", string0);
      
      charSequenceArray0[6] = (CharSequence) "=I^[SC\\=";
      String string1 = StringUtils.defaultString("=I^[SC\\=");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("=I^[SC\\=", string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("=I^[SC\\=", "I^[SC\\");
      assertTrue(boolean0);
      
      String string2 = StringUtils.normalizeSpace("I^[SC\\");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("I^[SC\\", string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase(charSequenceArray0[6], "I^[SC\\");
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("=I^[SC\\=");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.center("I^[SC\\", 99);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("                                              I^[SC\\                                               ", string3);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "                                              I^[SC\\                                              ", (CharSequence) "I^[SC\\");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String string4 = StringUtils.deleteWhitespace("=I^[SC\\=");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("=I^[SC\\=", string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("=I^[SC\\=", charSequenceArray0[6]);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      String string0 = StringUtils.chomp("3");
      assertNotNull(string0);
      assertEquals("3", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "3", (char[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("3", "3");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("3", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "3";
      charSequenceArray0[1] = (CharSequence) "3";
      charSequenceArray0[2] = (CharSequence) "3";
      charSequenceArray0[3] = (CharSequence) "3";
      charSequenceArray0[4] = (CharSequence) "3";
      charSequenceArray0[5] = (CharSequence) "3";
      charSequenceArray0[6] = (CharSequence) "3";
      int int0 = StringUtils.indexOfAny((CharSequence) "3", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Array element ";
      objectArray0[1] = (Object) "Array element ";
      objectArray0[2] = (Object) "Array element ";
      objectArray0[3] = (Object) "Array element ";
      objectArray0[4] = (Object) "Array element ";
      objectArray0[5] = (Object) "Array element ";
      objectArray0[6] = (Object) "Array element ";
      objectArray0[7] = (Object) "Array element ";
      String string0 = StringUtils.joinWith("Array element ", objectArray0);
      assertNotNull(string0);
      assertEquals(8, objectArray0.length);
      assertEquals("Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ", (CharSequence) "Array element ", 51);
      assertEquals(56, int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1051;
      shortArray0[1] = (short)6;
      String string1 = StringUtils.defaultString("Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ", string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ", "Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.normalizeSpace("Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element", string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Array element ", (CharSequence) "Array element ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlphaSpace("Array element ");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string3 = StringUtils.join((int[]) null, '-');
      assertNull(string3);
      
      String string4 = StringUtils.center("g8m", (int) (short)6);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(" g8m  ", string4);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      String string0 = StringUtils.replace("bwoFQ#T6t(7qG@F0", "bwoFQ#T6t(7qG@F0", "bwoFQ#T6t(7qG@F0");
      assertNotNull(string0);
      assertEquals("bwoFQ#T6t(7qG@F0", string0);
      
      String string1 = StringUtils.substringAfter("bwoFQ#T6t(7qG@F0", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("", (String) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "bwoFQ#T6t(7qG@F0", 32, 108);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.center("bwoFQ#T6t(7qG@F0", 32, "bwoFQ#T6t(7qG@F0");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("bwoFQ#T6bwoFQ#T6t(7qG@F0bwoFQ#T6", string3);
      
      String string4 = StringUtils.removeEnd((String) null, "bwoFQ#T6bwoFQ#T6t(7qG@F0bwoFQ#T6");
      assertNull(string4);
      
      char[] charArray0 = new char[0];
      String string5 = StringUtils.defaultString((String) null, "bwoFQ#T6bwoFQ#T6t(7qG@F0bwoFQ#T6");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("bwoFQ#T6bwoFQ#T6t(7qG@F0bwoFQ#T6", string5);
      
      int int1 = StringUtils.countMatches((CharSequence) "bwoFQ#T6bwoFQ#T6t(7qG@F0bwoFQ#T6", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      String string0 = StringUtils.left("The character ", 1);
      assertNotNull(string0);
      assertEquals("T", string0);
      
      String string1 = StringUtils.replace("T", "The character ", "T", 1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("T", string1);
      
      String string2 = StringUtils.remove((String) null, 'L');
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("8}eis5IQ)(:etB~lj", (String) null, 1);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.abbreviateMiddle((String) null, (String) null, 1);
      assertNull(string3);
      
      String string4 = StringUtils.substringBefore((String) null, 1);
      assertNull(string4);
      
      String[] stringArray2 = StringUtils.split("T");
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      String string5 = StringUtils.upperCase((String) null, locale0);
      assertNull(string5);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      String string6 = StringUtils.chop("5t>JL=vuF})8'");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("5t>JL=vuF})8", string6);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      String string0 = StringUtils.wrap("...", 'B');
      assertNotNull(string0);
      assertEquals("B...B", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("...");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "dl-c(bu )+09f1Kk1";
      charSequenceArray0[2] = (CharSequence) "B...B";
      charSequenceArray0[3] = (CharSequence) "}A/Sl!O$17";
      charSequenceArray0[4] = (CharSequence) "}A/Sl!O$17";
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("]b7<T", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.split("dl-c(bu )+09f1Kk1", "org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "}A/Sl!O$17", (CharSequence) "}%eX%r");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Integer integer0 = new Integer((-1560));
      assertNotNull(integer0);
      assertEquals((-1560), (int)integer0);
      
      String string0 = StringUtils.deleteWhitespace("The String must not be emptyThe String must not be empty");
      assertNotNull(string0);
      assertEquals("TheStringmustnotbeemptyTheStringmustnotbeempty", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "The String must not be emptyThe String must not be empty", (CharSequence) "The String must not be emptyThe String must not be empty", (-1560));
      assertEquals(0, int0);
      
      String string1 = StringUtils.trim("DC:m?GcN");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("DC:m?GcN", string1);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.substring((String) null, 22);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.rotate("`5Lz?K'hi/!lS1-", 1796);
      assertNotNull(string1);
      assertEquals("?K'hi/!lS1-`5Lz", string1);
      
      charSequenceArray0[1] = (CharSequence) "?K'hi/!lS1-`5Lz";
      String string2 = StringUtils.leftPad("Supplied value must be a valid byte literal between -128 and 127: [", 1796, "\n");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      
      charSequenceArray0[2] = (CharSequence) string2;
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      String string3 = StringUtils.valueOf(charArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new char[] {'['}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("[", string3);
      
      charSequenceArray0[3] = (CharSequence) "[";
      String string4 = StringUtils.center("S|A&i:XZ!", 1796);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean0 = StringUtils.isAllLowerCase(charSequenceArray0[1]);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.normalizeSpace(string2);
      assertNotNull(string5);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string5);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "AZ9N_P.mV]Qk%?", (CharSequence) "AZ9N_P.mV]Qk%?");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      String string0 = StringUtils.repeat("\n", 2);
      assertNotNull(string0);
      assertEquals("\n\n", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\n", "_w@& :[Y");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.leftPad((String) null, 32, '}');
      assertNull(string2);
      
      String string3 = StringUtils.replace((String) null, "\n", "The character ");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      String string0 = StringUtils.left("The character ", 1);
      assertNotNull(string0);
      assertEquals("T", string0);
      
      String string1 = StringUtils.replace("T", "The character ", "T", 1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("T", string1);
      
      String string2 = StringUtils.join((Iterator<?>) null, 'n');
      assertNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = object0;
      String string3 = StringUtils.join((int[]) null, 'W');
      assertNull(string3);
      
      String string4 = StringUtils.repeat('w', 120);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "T";
      charSequenceArray0[1] = (CharSequence) "!&sb!EDeb!&sb!EDeb";
      charSequenceArray0[2] = (CharSequence) "The character ";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "The character ";
      charSequenceArray0[5] = (CharSequence) "The character ";
      boolean boolean0 = StringUtils.endsWithAny("!&sb!EDeb!&sb!EDeb", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[2] = false;
      String string0 = StringUtils.join(booleanArray0, 'L');
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals("falseLfalseLfalse", string0);
      
      boolean boolean0 = StringUtils.endsWithAny("...", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.toRootUpperCase("WrsYhUaz]$n2V^< O");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("WRSYHUAZ]$N2V^< O", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "...", 'K');
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringBetween("B6D4E", "TB3+vjG?Xi");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      String string0 = "62d85ON7%[y>mEq";
      int int0 = 2495;
      String string1 = StringUtils.repeat("|&_LLd<U,!Dp", "62d85ON7%[y>mEq", 2495);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      char char0 = '_';
      String string2 = StringUtils.leftPad("PD.7a,lKr[xvl<(N:1", 2495, '_');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.left("Search and Replace array lengths don't match: ", 2495);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Search and Replace array lengths don't match: ", string3);
      
      String string4 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = "3?";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("3?", string2, 2495, 2495);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2496
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      String string0 = StringUtils.wrap("", 'B');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.toRootUpperCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.repeat("[[", "", 1204);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.center("both be null", 1669, '_');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.truncate("Strings must not be null", 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replace(" ", "2{&", ".@U?xtUhi`Y{o!Enk");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(" ", string2);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      String string3 = StringUtils.truncate(">5|0ZB|eFXj'Mwl", 122);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(">5|0ZB|eFXj'Mwl", string3);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      int int0 = StringUtils.getFuzzyDistance("", ">5|0ZB|eFXj'Mwl", locale0);
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", "\n", 278);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("\n", "\n");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.chomp("null/empty items");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("null/empty items", string1);
      
      boolean boolean1 = StringUtils.isAlphaSpace("null/empty items");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      String string0 = StringUtils.center("8(|b.", 2449);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) string0, 2449, 63);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(string0, "8(|b.", 63);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.substringAfterLast("8(|b.", string0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isMixedCase("8(|b.");
      assertFalse(boolean0);
      
      int int1 = StringUtils.compareIgnoreCase("", "8(|b.", false);
      assertFalse(int1 == int0);
      assertEquals((-5), int1);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 19;
      intArray0[1] = 54;
      intArray0[2] = 4;
      intArray0[0] = (-358);
      intArray0[4] = (-457);
      String string0 = StringUtils.uncapitalize("h!g");
      assertNotNull(string0);
      assertEquals("h!g", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "...", (CharSequence) "h!g");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[19];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      String string1 = StringUtils.join(charArray0, 'V');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(19, charArray0.length);
      assertEquals("VVVV\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[26];
      charSequenceArray0[0] = (CharSequence) "VVVV\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "h!g";
      charSequenceArray0[3] = (CharSequence) "VVVV\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000";
      charSequenceArray0[2] = (CharSequence) "...";
      String string2 = StringUtils.abbreviateMiddle("h!g", "VVVV\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000", (-4553));
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("h!g", string2);
      
      charSequenceArray0[5] = (CharSequence) "h!g";
      charSequenceArray0[6] = (CharSequence) "VVVV\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000V\u0000";
      charSequenceArray0[7] = (CharSequence) "h!g";
      int int1 = StringUtils.indexOfAny((CharSequence) "h!g", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(26, charSequenceArray0.length);
      assertEquals(0, int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "h!g", (-457));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("h!g");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>(20, 771);
      assertNotNull(vector0);
      assertEquals(20, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      String string0 = StringUtils.upperCase("]mB");
      assertNotNull(string0);
      assertEquals("]MB", string0);
      
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("]MB");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.wrap("Azns0&P{D2Y;izF", "]MB");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]MBAzns0&P{D2Y;izF]MB", string1);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 771;
      floatArray0[1] = (float) 771;
      floatArray0[1] = (float) 771;
      floatArray0[4] = (float) 771;
      floatArray0[5] = (float) 20;
      floatArray0[6] = (float) 771;
      floatArray0[7] = (float) 771;
      String string2 = StringUtils.substringBeforeLast("]MBAzns0&P{D2Y;izF]MB", "]MBAzns0&P{D2Y;izF]MB");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 4);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isAlpha("");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharBuffer charBuffer0 = StringUtils.defaultIfBlank((CharBuffer) null, (CharBuffer) null);
      assertNull(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      String string0 = StringUtils.remove("The character ", 'L');
      assertNotNull(string0);
      assertEquals("The character ", string0);
      
      String string1 = StringUtils.stripToNull("3,a!m$c0;");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("3,a!m$c0;", string1);
      
      String string2 = StringUtils.removeIgnoreCase("hould not be null.", ", Length: 0");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("hould not be null.", string2);
      
      String string3 = StringUtils.trimToEmpty("The character ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("The character", string3);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("object", "object");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeEndIgnoreCase("object", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("object", string1);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "");
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (char[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rightPad("", (-1));
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", ":eq3CeFg$,;nfHetg8Z", 2909);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2909;
      String string0 = StringUtils.wrap("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.toRootLowerCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) ":eq3CeFg$,;nfHetg8Z", 32759);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^( ");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Lzu`^( ";
      objectArray0[3] = (Object) "The character ";
      short[] shortArray0 = new short[1];
      String string0 = StringUtils.join(shortArray0, '\\');
      assertNotNull(string0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      assertEquals("0", string0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(string0));
      assertEquals(0, priorityQueue0.size());
      
      PriorityQueue<String> priorityQueue1 = new PriorityQueue<String>(priorityQueue0);
      assertNotNull(priorityQueue1);
      assertFalse(priorityQueue0.contains(string0));
      assertFalse(priorityQueue1.contains(string0));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, priorityQueue1.size());
      
      String string1 = StringUtils.join((Iterable<?>) priorityQueue1, 'U');
      assertNotNull(string1);
      assertFalse(priorityQueue0.contains(string0));
      assertFalse(priorityQueue1.contains(string0));
      assertFalse(priorityQueue0.equals((Object)priorityQueue1));
      assertFalse(priorityQueue1.equals((Object)priorityQueue0));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, priorityQueue1.size());
      assertNotSame(priorityQueue0, priorityQueue1);
      assertNotSame(priorityQueue1, priorityQueue0);
      assertEquals("", string1);
      
      String string2 = StringUtils.lowerCase("|AyD\"ZAG7!");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("|ayd\"zag7!", string2);
      
      String[] stringArray0 = new String[4];
      stringArray0[2] = "The character ";
      stringArray0[3] = "0";
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(4, stringArray0.length);
      assertEquals("The character ", string3);
      
      int int0 = StringUtils.lastOrdinalIndexOf("0", "", 57);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      String string0 = StringUtils.stripEnd((String) null, "nTfhAgrf'w+k");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Array element ";
      String string0 = StringUtils.replaceIgnoreCase("Array element ", "Array element ", "z|R/`S");
      assertNotNull(string0);
      assertEquals("z|R/`S", string0);
      
      String string1 = StringUtils.center("z|R/`S", (-305));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("z|R/`S", string1);
      
      boolean boolean0 = StringUtils.endsWith("z|R/`S", "z|R/`S");
      assertTrue(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("Search and Replace array lengths don't match: ", "LjYxN~X|]lDuA*n", "{I vl+'I");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Search and Replace array lengths don't match: ", string2);
      
      String[] stringArray0 = StringUtils.split("Search and Replace array lengths don't match: ", " in an array of ", 69);
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.defaultIfEmpty("?", " has no clone method");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("?", string3);
      
      int int0 = StringUtils.lastIndexOfAny("{I vl+'I", stringArray0);
      assertEquals(11, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertNotNull(string0);
      assertFalse(arrayList0.contains(""));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("T9}|z!^WhEnXQe", "ch");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("T9}|z!^WhEnXQe", string1);
      
      String[] stringArray0 = StringUtils.split("T9}|z!^WhEnXQe", "'");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "'", 32);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, 'q');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertEquals("T9}|z!^WhEnXQe", string2);
      
      String string3 = StringUtils.reverseDelimited("[IXUv0(rS53dkn", 'q');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("[IXUv0(rS53dkn", string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("[IXUv0(rS53dkn");
      assertFalse(boolean0);
      
      String string4 = StringUtils.wrapIfMissing("O:Vs6zG(w*H\"Zm]b7<T", '?');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("?O:Vs6zG(w*H\"Zm]b7<T?", string4);
      
      String string5 = StringUtils.toRootLowerCase("T9}|z!^WhEnXQe");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("t9}|z!^whenxqe", string5);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "'", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[15];
      charArray0[0] = '.';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = '?';
      charArray0[4] = '.';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "T9}|z!^WhEnXQe", charArray0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(15, charArray0.length);
      assertEquals(0, int2);
      
      String string6 = StringUtils.rightPad((String) null, 0);
      assertNull(string6);
      
      int int3 = StringUtils.indexOf((CharSequence) null, (CharSequence) "T9}|z!^WhEnXQe", 32);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)105;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-30);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte) (-74);
      byteArray0[6] = (byte)14;
      char char0 = 'l';
      String string0 = StringUtils.join(byteArray0, 'l', 64, 0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)105, (byte)0, (byte)90, (byte) (-30), (byte) (-97), (byte) (-74), (byte)14}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals("", string0);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains('l'));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(arrayDeque0.contains('l'));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      
      String string1 = StringUtils.join(iterator0, "");
      assertNotNull(string1);
      assertFalse(arrayDeque0.contains('l'));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", (-2921));
      assertEquals(0, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      String string2 = StringUtils.join(charArray0, '7', (int) (byte)105, (int) (byte)14);
      assertNotNull(string2);
      assertArrayEquals(new char[] {'l', 'l', 'l', 'l'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      int[] intArray0 = new int[5];
      intArray0[0] = (int) (byte)105;
      intArray0[1] = 0;
      intArray0[2] = (-1029);
      intArray0[3] = (int) '7';
      intArray0[4] = (int) '7';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'l', 53, 2359);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 53
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string0 = StringUtils.upperCase("9(7-D5");
      assertNotNull(string0);
      assertEquals("9(7-D5", string0);
      
      charSequenceArray0[0] = (CharSequence) "9(7-D5";
      String string1 = StringUtils.substringBeforeLast(", '", "9(7-D5");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", '", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Pf u+O,ku", ", '", 53);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals(6, charSequenceArray0.length);
      assertEquals("9(7-D5", charSequence0);
      
      int int0 = StringUtils.countMatches((CharSequence) "9(7-D5", (CharSequence) "9(7-D5");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertNotNull(string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("cor\u00E9en", string0);
      
      String string1 = locale1.getDisplayVariant(locale0);
      assertNotNull(string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string1);
      
      String string2 = StringUtils.lowerCase("Minimum abbreviation width is %d", locale1);
      assertNotNull(string2);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertEquals("minimum abbreviation width is %d", string2);
      
      String string3 = locale0.getDisplayCountry();
      assertNotNull(string3);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertNotSame(locale0, locale1);
      assertEquals("South Korea", string3);
      
      String string4 = locale1.getDisplayLanguage();
      assertNotNull(string4);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertEquals("French", string4);
      
      String[] stringArray0 = new String[0];
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string5);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '0');
      assertNotNull(string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("rz", (String) null, 518);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.truncate("", 4);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.defaultIfEmpty("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      String string3 = StringUtils.lowerCase((String) null, locale0);
      assertNull(string3);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.US;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("US", locale1.getCountry());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      
      Locale locale2 = Locale.KOREAN;
      assertNotNull(locale2);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("ko", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("ko", locale2.toString());
      assertEquals("kor", locale2.getISO3Language());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      Set<Character> set0 = locale2.getExtensionKeys();
      assertNotNull(set0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("ko", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("ko", locale2.toString());
      assertEquals("kor", locale2.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      
      String string0 = locale0.getDisplayVariant(locale1);
      assertNotNull(string0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("US", locale1.getCountry());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertEquals("", string0);
      
      String string1 = StringUtils.lowerCase(")amTLs*i@AZ", locale0);
      assertNotNull(string1);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      
      String[] stringArray0 = new String[5];
      String string2 = StringUtils.replaceChars(")amTLs*i@AZ", ")amTLs*i@AZ", ")amTLs*i@AZ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(")amTLs*i@AZ", string2);
      
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string3 = locale1.getDisplayLanguage();
      assertNotNull(string3);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("US", locale1.getCountry());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertEquals("English", string3);
      
      stringArray0[2] = "";
      stringArray0[3] = ")amTLs*i@AZ";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(5, stringArray0.length);
      assertEquals(")amTLs*i@AZ", string4);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("N/[nKQig_K|O", "N/[nKQig_K|O", "9s<N|l/@Y/H8F");
      assertNull(stringArray0);
      
      Locale locale0 = new Locale("hZE6J\"Vt", "N/[nKQig_K|O", "9s<N|l/@Y/H8F");
      assertNotNull(locale0);
      assertEquals("hze6j\"vt_N/[NKQIG_K|O_9s<N|l/@Y/H8F", locale0.toString());
      assertEquals("N/[NKQIG_K|O", locale0.getCountry());
      assertEquals("hze6j\"vt", locale0.getLanguage());
      assertEquals("9s<N|l/@Y/H8F", locale0.getVariant());
      
      String string0 = StringUtils.lowerCase("9s<N|l/@Y/H8F", locale0);
      assertNotNull(string0);
      assertEquals("hze6j\"vt_N/[NKQIG_K|O_9s<N|l/@Y/H8F", locale0.toString());
      assertEquals("N/[NKQIG_K|O", locale0.getCountry());
      assertEquals("hze6j\"vt", locale0.getLanguage());
      assertEquals("9s<N|l/@Y/H8F", locale0.getVariant());
      assertEquals("9s<n|l/@y/h8f", string0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertNotSame(locale1, locale0);
      
      String string0 = locale0.getDisplayLanguage(locale1);
      assertNotNull(string0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("cor\u00E9en", string0);
      
      String string1 = locale1.getDisplayVariant(locale0);
      assertNotNull(string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string1);
      
      String string2 = StringUtils.lowerCase("cor\u00E9en", locale1);
      assertNotNull(string2);
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertEquals("cor\u00E9en", string2);
      
      String string3 = locale0.getDisplayCountry();
      assertNotNull(string3);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotSame(locale0, locale1);
      assertEquals("South Korea", string3);
      
      String string4 = locale1.getDisplayLanguage();
      assertNotNull(string4);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CA", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertEquals("French", string4);
      
      String[] stringArray0 = new String[1];
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string5);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.US;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("US", locale1.getCountry());
      assertNotSame(locale1, locale0);
      
      Locale locale2 = Locale.KOREAN;
      assertNotNull(locale2);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals("ko", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("ko", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("kor", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      
      Set<Character> set0 = locale2.getExtensionKeys();
      assertNotNull(set0);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals("ko", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("ko", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("kor", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      
      String string0 = locale1.getDisplayLanguage(locale2);
      assertNotNull(string0);
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("US", locale1.getCountry());
      assertEquals("ko", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("ko", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("kor", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("\uC601\uC5B4", string0);
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertNotNull(string1);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("US", locale1.getCountry());
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals("", string1);
      
      String string2 = StringUtils.lowerCase(")amTLs*i@AZ", locale0);
      assertNotNull(string2);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      
      String[] stringArray0 = new String[5];
      String string3 = locale1.getDisplayCountry();
      assertNotNull(string3);
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("US", locale1.getCountry());
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals("United States", string3);
      
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string4 = locale1.getDisplayLanguage();
      assertNotNull(string4);
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_US", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("US", locale1.getCountry());
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals("English", string4);
      
      stringArray0[2] = "Y$.'2(*l8wi6:?<y?Hy";
      stringArray0[3] = ")amTLs*i@AZ";
      stringArray0[4] = ")amtls*i@az";
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals(5, stringArray0.length);
      assertEquals("Y$.'2(*l8wi6:?<y?Hy", string5);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      int[] intArray0 = new int[7];
      String string0 = StringUtils.stripEnd("{S,p/'|i/,hq'vx;qv", "{S,p/'|i/,hq'vx;qv");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.toRootLowerCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      String string0 = StringUtils.center("nTfhAgrf'w+k", (-1781), 'S');
      assertNotNull(string0);
      assertEquals("nTfhAgrf'w+k", string0);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[4] = '>';
      charArray0[5] = '>';
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOf(charSequenceArray0[4], 9);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringBefore("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean2 = StringUtils.endsWithAny("", charSequenceArray0);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      String string0 = StringUtils.chomp("3");
      assertNotNull(string0);
      assertEquals("3", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "3", (char[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("3", "3");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("3", string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "3", (CharSequence) "3");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.unwrap("3", 'o');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("3", string2);
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      String string0 = StringUtils.replaceChars("AZ9N_P.mV]Qk%?", 's', 's');
      assertNotNull(string0);
      assertEquals("AZ9N_P.mV]Qk%?", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("AZ9N_P.mV]Qk%?");
      assertNotNull(intArray0);
      assertEquals(14, intArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "AZ9N_P.mV]Qk%?";
      charSequenceArray0[1] = (CharSequence) "AZ9N_P.mV]Qk%?";
      charSequenceArray0[2] = (CharSequence) "AZ9N_P.mV]Qk%?";
      boolean boolean0 = StringUtils.startsWithAny("AZ9N_P.mV]Qk%?", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring(";zJ|nZHWEZy&^B:%AuT", (-3187), 1880);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(";zJ|nZHWEZy&^B:%AuT", string1);
      
      String string2 = StringUtils.substringBetween("J7n/'91LRkSod7{", "Tm0Y", "AZ9N_P.mV]Qk%?");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-2678);
      intArray0[1] = (-2678);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, ':', (-426), 1900);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -426
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.abbreviate((String) null, "cT`FvNQr", 2599);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The character ", '?');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("The character "));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<String> arrayList1 = new ArrayList<String>();
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains("The character "));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, 'C');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("The character ", 19);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The character      ", string1);
      
      String string2 = StringUtils.unwrap("\r", '7');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\r", string2);
      
      boolean boolean0 = treeSet0.removeAll(arrayList0);
      assertFalse(arrayList0.contains("The character "));
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotSame(arrayList0, arrayList1);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "The character      ", 105);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.containsAny((CharSequence) "\r", charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) iterator0;
      objectArray0[2] = (Object) arrayList1;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      String string3 = StringUtils.join(objectArray0, "\r");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(6, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("...", '3');
      assertNotNull(string0);
      assertEquals("3...3", string0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '3';
      intArray0[1] = (int) '3';
      intArray0[2] = (int) '3';
      intArray0[3] = (int) '3';
      intArray0[4] = (int) '3';
      intArray0[5] = (int) '3';
      intArray0[6] = (int) '3';
      intArray0[7] = (int) '3';
      String string1 = StringUtils.join(intArray0, 'p');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new int[] {51, 51, 51, 51, 51, 51, 51, 51}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals("51p51p51p51p51p51p51p51", string1);
      
      String string2 = StringUtils.center("S|A&i:XZ!", 51);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("                     S|A&i:XZ!                     ", string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("51p51p51p51p51p51p51p51");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      String string0 = StringUtils.wrap("", 'B');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.toRootUpperCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.repeat("[[", "", 1204);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.abbreviate("\r", "", 55, 8);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\r", string3);
      
      String string4 = StringUtils.removeAll((String) null, "#");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAlphaSpace("#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.ObjectUtils$Null", (CharSequence) "org.apache.commons.lang3.ObjectUtils$Null", 76);
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "org.apache.commons.lang3.ObjectUtils$Null";
      stringArray0[1] = "org.apache.commons.lang3.ObjectUtils$Null";
      String string0 = StringUtils.replaceEach("org.apache.commons.lang3.ObjectUtils$Null", stringArray0, (String[]) null);
      assertNotNull(string0);
      assertEquals(2, stringArray0.length);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.left("org.apache.commons.lang3.ObjectUtils$Null", 76);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string1);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      String string0 = StringUtils.join(byteArray0, 'q');
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals("0q0q0", string0);
      
      String string1 = StringUtils.trim("0q0q0");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("0q0q0", string1);
      
      String string2 = StringUtils.lowerCase("ad_u6UU_yr3<_!IW)");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ad_u6uu_yr3<_!iw)", string2);
      
      String string3 = StringUtils.toRootUpperCase("org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("ORG.APACHE.COMMONS.LANG3.ARRAYUTILS", string3);
      
      String string4 = StringUtils.repeat("mcSQ!-SQkf~.", "ORG.APACHE.COMMONS.LANG3.ARRAYUTILS", (int) (byte)0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.center("J5R~g mq60KZNLD@", 82, 'Z');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZJ5R~g mq60KZNLD@ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ", string5);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      String string0 = "object";
      String string1 = "5{i";
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = '5';
      charArray0[3] = '5';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "object", charArray0);
      assertArrayEquals(new char[] {'5', '5', '5', '5'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.join((byte[]) null, 'm');
      assertNull(string2);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<String> linkedList1 = new LinkedList<String>();
      assertNotNull(linkedList1);
      assertFalse(linkedList1.contains(string1));
      assertEquals(0, linkedList1.size());
      
      // Undeclared exception!
      try { 
        linkedList1.subList(0, 65536);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 65536
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-54);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'w', (int) (byte)24, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", "\r", 2562);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("\r", "\r");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean0 = StringUtils.isNotBlank("\r");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("\r");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray2 = StringUtils.split("\r", "\r", 2562);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(0, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (Charset) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      CharBuffer charBuffer0 = StringUtils.firstNonEmpty((CharBuffer[]) null);
      assertNull(charBuffer0);
      
      String string0 = StringUtils.abbreviate("e@BI9Yr#n|y(!6K", "\r", 3);
      assertNotNull(string0);
      assertEquals("e@\r", string0);
      
      String string1 = StringUtils.strip("bl*", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("bl*", string1);
      
      String string2 = StringUtils.substringAfter((String) null, "tQq?mCG?m6>{J0+.~n");
      assertNull(string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, 12);
      assertEquals((-1), int0);
      
      CharBuffer charBuffer1 = StringUtils.defaultIfBlank((CharBuffer) null, (CharBuffer) null);
      assertNull(charBuffer1);
      
      String string3 = StringUtils.defaultString("e@BI9Yr#n|y(!6K", "Ud_O}C2mcB=");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("e@BI9Yr#n|y(!6K", string3);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = '?';
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripToEmpty("3~/qU");
      assertNotNull(string0);
      assertEquals("3~/qU", string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "3~/qU", (CharSequence) "3~/qU", 2781);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isWhitespace("3~/qU");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.getIfEmpty(stringArray0[0], (Supplier<String>) null);
      assertNull(string0);
      assertEquals(4, stringArray0.length);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      String string1 = ";_/z`L?]+C!~1%LX";
      String string2 = "66i(''U8tN";
      // Undeclared exception!
      try { 
        treeSet0.add((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^( ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.chop("Lzu`^( ");
      assertNotNull(string0);
      assertEquals("Lzu`^(", string0);
      
      boolean boolean1 = StringUtils.startsWith("Lzu`^(", "Lzu`^( ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = '1';
      charArray0[2] = 'n';
      byte[] byteArray0 = new byte[0];
      String string1 = StringUtils.join(byteArray0, '+');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("", string1);
      
      boolean boolean2 = StringUtils.isAlpha("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      String string0 = StringUtils.chomp((String) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.rightPad((String) null, 11);
      assertNull(string1);
      
      String string2 = StringUtils.join((Iterable<?>) null, "");
      assertNull(string2);
      
      int int0 = StringUtils.compare("", "", true);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.substringBetween("1", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.lastOrdinalIndexOf("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", 11);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(91, int2);
      
      boolean boolean2 = StringUtils.isWhitespace((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.replaceIgnoreCase("", "T?y@[m", ", '");
      assertNotNull(string4);
      assertEquals("", string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 91);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string5 = StringUtils.trimToEmpty("...");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertEquals("...", string5);
      
      int int3 = StringUtils.compareIgnoreCase("ekQ!R7Cmg7", "");
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(10, int3);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "...", 2262);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertEquals((-1), int4);
      
      String[] stringArray1 = StringUtils.split("q2#V7Q7Et#v^v&=/");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      int int5 = StringUtils.lastIndexOf((CharSequence) "ekQ!R7Cmg7", (CharSequence) "1");
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertTrue(int5 == int1);
      assertFalse(int5 == int2);
      assertTrue(int5 == int4);
      assertEquals((-1), int5);
      
      boolean boolean3 = StringUtils.isMixedCase("");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string6 = StringUtils.getDigits("&C_9|S<f}teZ /i(M");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("9", string6);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      String string0 = StringUtils.join(byteArray0, '.', (int) (byte)0, (int) (byte)0);
      assertNotNull(string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Ppt3UQZH|rNAyZ";
      charSequenceArray0[1] = (CharSequence) "Ppt3UQZH|rNAyZ";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      String string0 = StringUtils.strip("vn");
      assertNotNull(string0);
      assertEquals("vn", string0);
      
      String string1 = StringUtils.abbreviate("vn", "vn", 4);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("vn", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "vn", "vn");
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-24);
      byteArray0[3] = (byte)61;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "T");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // T
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      String string0 = StringUtils.wrap(";n", '\'');
      assertNotNull(string0);
      assertEquals("';n'", string0);
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "");
      assertNotNull(string0);
      assertFalse(arrayList0.contains(""));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("", string0);
      
      String string1 = StringUtils.SPACE;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      String string0 = StringUtils.substringBetween("e]br?,e%/^09f1Kk1", "vn", "e]br?,e%/^09f1Kk1");
      assertNull(string0);
      
      String string1 = StringUtils.capitalize("vn");
      assertNotNull(string1);
      assertEquals("Vn", string1);
      
      String string2 = StringUtils.removeAll("Vn", "vn");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("Vn", string2);
      
      String string3 = StringUtils.getIfEmpty("e]br?,e%/^09f1Kk1", (Supplier<String>) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("e]br?,e%/^09f1Kk1", string3);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.truncate(" vs ", (-996), 7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils", 8192);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("hould not be null.", (-54), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      String string0 = StringUtils.chop("]mB");
      assertNotNull(string0);
      assertEquals("]m", string0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("]mB", "]mB");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "ch", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string1 = StringUtils.unwrap("xF", '~');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("xF", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("xF", '~');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceAll((String) null, "", "");
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.removeIgnoreCase((String) null, "");
      assertNull(string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.mid("{'Nl2d)q@4", 2422, 0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.reverseDelimited("{'Nl2d)q@4", 's');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.removeEndIgnoreCase("", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "{'Nl2d)q@4");
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string3));
      
      double double0 = StringUtils.getJaroWinklerDistance("{'Nl2d)q@4", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, 375);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.removeIgnoreCase("re}'}yT*", "org.apache.commons.lang3.exception.CloneFailedException");
      assertNotNull(string0);
      assertEquals("re}'}yT*", string0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "org.apache.commons.lang3.exception.CloneFailedException");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "re}'}yT*";
      charSequenceArray0[2] = (CharSequence) "re}'}yT*";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeIgnoreCase((String) null, "ys`I");
      assertNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.mid("{'Nl2d)q@4", 2422, 0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.removeEndIgnoreCase("", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "{'Nl2d)q@4");
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string3));
      
      double double0 = StringUtils.getJaroWinklerDistance("{'Nl2d)q@4", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      String string0 = StringUtils.substringBetween("z_a<{9no", "Lzu3`*^(] ", "Lzu3`*^(] ");
      assertNull(string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("z_a<{9no"));
      assertEquals(0, linkedList0.size());
      
      String string1 = StringUtils.mid("{)LDayk", 2147483638, 11);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultIfBlank((String) null, "Lzu3`*^(] ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("Lzu3`*^(] ", string2);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("=t", "=t", "s|[>I}>l(uN");
      assertNotNull(string0);
      assertEquals("s|[>I}>l(uN", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "s|[>I}>l(uN", (CharSequence) "=t");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      String string0 = StringUtils.repeat("", 53);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrapIfMissing("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null, "e]b<");
      assertNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) "e]b<");
      assertNotNull(charSequence0);
      assertEquals("e]b<", charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny("e]b<", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeAll("e]b<", "e]b<");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string0 = StringUtils.appendIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      String string1 = StringUtils.join((short[]) null, 's', 0, 0);
      assertNull(string1);
      
      String string2 = StringUtils.difference((String) null, ", '");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(", '", string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'X', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      String string0 = StringUtils.join((Iterable<?>) vector0, 'J');
      assertNotNull(string0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("7T.E|lr7%B|");
      assertNotNull(string0);
      assertEquals("7T.E|lr7%B|", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "7T.E|lr7%B|", (CharSequence) "7T.E|lr7%B|", 0);
      assertEquals(0, int0);
      
      Vector<String> vector0 = new Vector<String>(0, 0);
      assertNotNull(vector0);
      assertFalse(vector0.contains("7T.E|lr7%B|"));
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      
      String string1 = StringUtils.upperCase("7T.E|lr7%B|");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7T.E|LR7%B|", string1);
      
      boolean boolean0 = StringUtils.isNotBlank("7T.E|lr7%B|");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "7T.E|lr7%B|", "7T.E|lr7%B|");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "7T.E|LR7%B|", (CharSequence) "7T.E|lr7%B|");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.equalsAny("\n", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[0], (CharSequence) "\n", 1664);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("\n", charSequenceArray0[0]);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.substringBetween("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, charSequenceArray0[0]);
      assertFalse(int1 == int0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.removeAll("\n", (String) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("\n", string2);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      CharSequence charSequence0 = null;
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, "PU");
      assertNotNull(string0);
      assertFalse(arrayList0.contains("PU"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("", string0);
      
      boolean boolean0 = arrayList0.add("");
      assertTrue(arrayList0.contains(""));
      assertFalse(arrayList0.contains("PU"));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((Iterable<?>) arrayList0, ' ');
      assertNotNull(string1);
      assertTrue(arrayList0.contains(string1));
      assertFalse(arrayList0.contains("PU"));
      assertTrue(string1.equals((Object)string0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("", string1);
      
      String string2 = StringUtils.lowerCase("'_TAmdkN]W3mx@\"");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("'_tamdkn]w3mx@\"", string2);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string3);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.join((long[]) null, 'F', (-847), (-847));
      assertNull(string4);
      
      String string5 = StringUtils.join((long[]) null, 'F', (-3371), (-3371));
      assertNull(string5);
      
      String string6 = StringUtils.stripAccents((String) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      String string0 = StringUtils.substringAfter("dl-c(bu )+09f1Kk1", "dl-c(bu )+09f1Kk1");
      assertNotNull(string0);
      assertEquals("", string0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, ')');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.split("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.substringBeforeLast("", "ejxL,");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(')'));
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "dl-c(bu )+09f1Kk1", "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.unwrap("fCn`b", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("fCn`b", string3);
      
      String string4 = StringUtils.replaceOnce("1<KYNIS7_", "6KZ.<", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("1<KYNIS7_", string4);
      
      boolean boolean2 = StringUtils.isAllBlank(stringArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.isNumeric("");
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      String string0 = StringUtils.stripAccents("+I.\"X'mbdKCOC7lBL");
      assertNotNull(string0);
      assertEquals("+I.\"X'mbdKCOC7lBL", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.removePattern("+I.\"X'mbdKCOC7lBL", "+I.\"X'mbdKCOC7lBL");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '+' near index 0
         // +I.\"X'mbdKCOC7lBL
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Exception cloning Cloneable type ", "Exception cloning Cloneable type ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>(stack0);
      assertNotNull(hashSet0);
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean0 = hashSet0.add(locale_FilteringMode0);
      assertFalse(stack0.contains(locale_FilteringMode0));
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(boolean0);
      
      stack0.removeAllElements();
      assertFalse(stack0.contains(locale_FilteringMode0));
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      boolean boolean1 = hashSet0.add(locale_FilteringMode1);
      assertFalse(stack0.contains(locale_FilteringMode0));
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean1 == boolean0);
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(boolean1);
      
      Vector<Locale.FilteringMode> vector1 = new Vector<Locale.FilteringMode>(stack0);
      assertNotNull(vector1);
      assertFalse(stack0.contains(locale_FilteringMode0));
      assertFalse(vector1.contains(locale_FilteringMode0));
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertEquals(0, vector1.capacity());
      assertEquals(0, vector1.size());
      
      String string0 = StringUtils.join((Iterable<?>) vector0, "Exception cloning Cloneable type ");
      assertNotNull(string0);
      assertFalse(vector0.contains("Exception cloning Cloneable type "));
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Exception cloning Cloneable type ", (CharSequence) "");
      assertEquals(33, int0);
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("", "", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceAll((String) null, "", "");
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.removeIgnoreCase((String) null, "ys`I");
      assertNull(string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.mid("{'Nl2d)q@4", 2422, 0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.reverseDelimited("{'Nl2d)q@4", 's');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.removeEndIgnoreCase("", "");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "{'Nl2d)q@4");
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string3));
      assertTrue(charSequence0.equals((Object)string4));
      
      double double0 = StringUtils.getJaroWinklerDistance("{'Nl2d)q@4", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "{'Nl2d)q@4", 65536);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("...", '3');
      assertNotNull(string0);
      assertEquals("3...3", string0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      
      String string1 = locale0.getExtension('a');
      assertNull(string1);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertFalse(set0.contains("..."));
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-1);
      shortArray0[1] = (short)6;
      shortArray0[2] = (short) (-2423);
      shortArray0[3] = (short)57;
      String string2 = StringUtils.join(shortArray0, 'F');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new short[] {(short) (-1), (short)6, (short) (-2423), (short)57}, shortArray0);
      assertEquals(4, shortArray0.length);
      assertEquals("-1F6F-2423F57", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "-1F6F-2423F57";
      charSequenceArray0[3] = (CharSequence) "D:$K<dru0x!_rO)?%Dq";
      charSequenceArray0[4] = (CharSequence) "-1F6F-2423F57";
      boolean boolean0 = StringUtils.startsWithAny("...", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, 'f');
      assertNull(string0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'f';
      longArray0[2] = (long) 'f';
      longArray0[4] = (long) 'f';
      longArray0[5] = (long) 'f';
      String string1 = StringUtils.join(longArray0, 'f');
      assertNotNull(string1);
      assertArrayEquals(new long[] {102L, 0L, 102L, 0L, 102L, 102L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals("102f0f102f0f102f102", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("Array element ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceChars("Object varargs must not be null", "Array element ", "Object varargs must not be null");
      assertNotNull(string0);
      assertEquals("Obj cgtvebebgstrusgtrogtb truvv", string0);
      
      String string1 = StringUtils.join((int[]) null, 'l', 3576, 21);
      assertNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("Obj cgtvebebgstrusgtrogtb truvv");
      assertNotNull(intArray0);
      assertEquals(31, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      char char0 = '-';
      int int0 = 0;
      String string0 = StringUtils.join((int[]) null, '-', 0, 0);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      String string0 = StringUtils.replace("comparator", "The character ", "^z", 9);
      assertNotNull(string0);
      assertEquals("comparator", string0);
      
      boolean boolean0 = StringUtils.endsWith("The character ", "comparator");
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize("comparator");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Comparator", string1);
      
      boolean boolean1 = StringUtils.endsWith("comparator", "Comparator");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.join((boolean[]) null, 'O');
      assertNull(string2);
      
      String string3 = "\\u";
      String string4 = StringUtils.stripToNull(string3);
      assertNotNull(string4);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("\\u", string4);
      
      String string5 = StringUtils.repeat("comparator", 76);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("comparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparator", string5);
      
      StringUtils.containsNone((CharSequence) "comparator", "comparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparatorcomparator");
      StringUtils.unwrap("v1D=l3=/1$ve", "Comparator");
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)24;
      shortArray0[1] = (short)13;
      shortArray0[2] = (short)227;
      shortArray0[3] = (short) (-1691);
      StringUtils.join(shortArray0, '~');
      StringUtils.rightPad("comparator", 13, '~');
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2327);
      String string0 = StringUtils.join(intArray0, '&', (-2327), (-2327));
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-2327)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '&';
      charArray0[4] = '&';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'&', '&', '&', '&', '&'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.toRootUpperCase(")WpA7m");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(")WPA7M", string1);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      String string0 = StringUtils.remove("nTfhAgrf'w+k", "");
      assertNotNull(string0);
      assertEquals("nTfhAgrf'w+k", string0);
      
      String string1 = StringUtils.stripEnd("Strings must not be null", "?");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "nTfhAgrf'w+k";
      charSequenceArray0[3] = (CharSequence) "?";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Strings must not be null", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      String string0 = StringUtils.capitalize((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("k", (Locale) null);
      assertNotNull(string1);
      assertEquals("K", string1);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[2];
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'W';
      char char0 = '9';
      charArray0[1] = '9';
      charArray0[2] = '\"';
      charArray0[3] = 'J';
      charArray0[4] = 'V';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.limit());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(5, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("W9\"JV", charBuffer0.toString());
      assertArrayEquals(new char[] {'W', '9', '\"', 'J', 'V'}, charArray0);
      assertEquals(5, charArray0.length);
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.limit());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=5 cap=5]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(5, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(5, byteBuffer0.capacity());
      assertEquals(5, byteBuffer0.limit());
      assertArrayEquals(new char[] {'W', '9', '\"', 'J', 'V'}, charArray0);
      assertEquals(5, charArray0.length);
      
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      assertNotNull(charBuffer1);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.limit());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("java.nio.HeapByteBuffer[pos=5 lim=5 cap=5]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(5, byteBuffer0.capacity());
      assertEquals(5, byteBuffer0.limit());
      assertEquals(5, byteBuffer0.position());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertEquals(5, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("W9\"JV", charBuffer1.toString());
      assertEquals(5, charBuffer1.capacity());
      assertEquals(5, charBuffer1.length());
      assertEquals(5, charBuffer1.limit());
      assertArrayEquals(new char[] {'W', '9', '\"', 'J', 'V'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      
      charBufferArray0[0] = charBuffer1;
      int int0 = 122;
      IntStream intStream0 = charBuffer0.chars();
      assertNotNull(intStream0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.limit());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertArrayEquals(new char[] {'W', '9', '\"', 'J', 'V'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotSame(charBuffer0, charBuffer1);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)111;
      byteArray0[1] = (byte)97;
      // Undeclared exception!
      try { 
        byteBuffer0.put(byteArray0, (int) (byte)97, 102);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      String string0 = StringUtils.repeat("I{]", 1877);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeIgnoreCase("vn", "$d1ZIx");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("vn", string1);
      
      String string2 = StringUtils.leftPad((String) null, 32767, '.');
      assertNull(string2);
      
      String string3 = StringUtils.replace("jYaGI{8]%N\"", (String) null, "6E/<Q[f=]I");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("jYaGI{8]%N\"", string3);
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string4 = StringUtils.upperCase((String) null, locale0);
      assertNull(string4);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      String string0 = StringUtils.normalizeSpace("TB3+vjG?Xi");
      assertNotNull(string0);
      assertEquals("TB3+vjG?Xi", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny("TB3+vjG?Xi", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      
      Buffer buffer0 = charBuffer0.flip();
      assertNotNull(buffer0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, buffer0.arrayOffset());
      assertEquals(0, buffer0.remaining());
      assertEquals(0, buffer0.capacity());
      assertTrue(buffer0.hasArray());
      assertEquals(0, buffer0.limit());
      assertFalse(buffer0.hasRemaining());
      assertFalse(buffer0.isDirect());
      assertEquals(0, buffer0.position());
      assertFalse(buffer0.isReadOnly());
      
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertNotNull(charBuffer1);
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals("", charBuffer1.toString());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace(" oS$-tQ3]-");
      assertNotNull(string0);
      assertEquals("oS$-tQ3]-", string0);
      
      String string1 = StringUtils.chomp(" oS$-tQ3]-");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" oS$-tQ3]-", string1);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = 4905.57F;
      floatArray0[1] = 1470.05F;
      floatArray0[2] = (-585.0579F);
      floatArray0[3] = 3723.7578F;
      String string2 = StringUtils.join(floatArray0, 'y', 1661, 1661);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new float[] {4905.57F, 1470.05F, (-585.0579F), 3723.7578F}, floatArray0, 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      String string0 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+", (String) null);
      assertNotNull(string0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, 1329);
      assertNull(stringArray0);
      
      String string1 = StringUtils.wrap("p{InCombiningDiacriticalMarks}+", '{');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("{p{InCombiningDiacriticalMarks}+{", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      String[] stringArray0 = new String[19];
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string0);
      assertEquals(19, stringArray0.length);
      assertEquals("", string0);
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      
      String string1 = StringUtils.upperCase("", locale0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", (-5500));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "oU)?(z", charArray0);
      assertArrayEquals(new char[] {''}, charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.join(charArray0, '', 1877, 0);
      assertNotNull(string0);
      assertArrayEquals(new char[] {''}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string0);
      
      Locale locale0 = new Locale("5N", "yRH+hG~gvORO){}G8");
      assertNotNull(locale0);
      assertEquals("5n_YRH+HG~GVORO){}G8", locale0.toString());
      assertEquals("YRH+HG~GVORO){}G8", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("5n", locale0.getLanguage());
      
      Locale locale1 = Locale.CHINESE;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale1, locale0);
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertNotNull(string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("5n_YRH+HG~GVORO){}G8", locale0.toString());
      assertEquals("YRH+HG~GVORO){}G8", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("5n", locale0.getLanguage());
      assertEquals("zh", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string1);
      
      String string2 = StringUtils.join((float[]) null, '', 1877, 321);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.remove("\"dCi1\u0007QDz59/v/o@HF", "\"dCi1\u0007QDz59/v/o@HF");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("7T.E|lr7%B|");
      assertNotNull(string0);
      assertEquals("7T.E|lr7%B|", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "7T.E|lr7%B|", (CharSequence) "7T.E|lr7%B|", 0);
      assertEquals(0, int0);
      
      Vector<String> vector0 = new Vector<String>(0, 0);
      assertNotNull(vector0);
      assertFalse(vector0.contains("7T.E|lr7%B|"));
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      
      String string1 = StringUtils.upperCase("7T.E|lr7%B|");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7T.E|LR7%B|", string1);
      
      boolean boolean0 = StringUtils.isNotBlank("7T.E|lr7%B|");
      assertTrue(boolean0);
      
      String string2 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "7T.E|LR7%B|", (CharSequence) "7T.E|lr7%B|");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.unwrap("2 J6SX/v$~r", "2 J6SX/v$~r");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("2 J6SX/v$~r", string3);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("7T.E|lr7%B|");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("(", (-109));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("rz", (String) null, 524);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, 'r', (-310), (-310));
      assertNull(string0);
      
      String string1 = StringUtils.lowerCase((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, (-203));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) ':';
      String string0 = StringUtils.join(doubleArray0, ':', (int) ':', (int) ':');
      assertNotNull(string0);
      assertArrayEquals(new double[] {58.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", "bDUg'");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.join(doubleArray0, ':');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new double[] {58.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals("58.0:0.0:0.0:0.0:0.0:0.0", string2);
      
      String string3 = StringUtils.right("", 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      
      Buffer buffer0 = charBuffer0.flip();
      assertNotNull(buffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, buffer0.remaining());
      assertEquals(0, buffer0.capacity());
      assertFalse(buffer0.isReadOnly());
      assertEquals(0, buffer0.limit());
      assertFalse(buffer0.hasRemaining());
      assertEquals(0, buffer0.arrayOffset());
      assertFalse(buffer0.isDirect());
      assertEquals(0, buffer0.position());
      assertTrue(buffer0.hasArray());
      
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertNotNull(charBuffer1);
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.length());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      
      String string4 = StringUtils.rotate("58.0:0.0:0.0:0.0:0.0:0.0", 0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("58.0:0.0:0.0:0.0:0.0:0.0", string4);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      String string0 = StringUtils.left("The character ", 396);
      assertNotNull(string0);
      assertEquals("The character ", string0);
      
      String string1 = StringUtils.replace("The character ", "The character ", "The character ", 396);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("The character ", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string2 = StringUtils.wrap("I^[SC\\", '4');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("4I^[SC\\4", string2);
      
      charSequenceArray0[0] = (CharSequence) "4I^[SC\\4";
      charSequenceArray0[1] = (CharSequence) "The character ";
      charSequenceArray0[2] = (CharSequence) "The character ";
      String string3 = StringUtils.defaultIfEmpty("The character ", "The character ");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("The character ", string3);
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      String string0 = StringUtils.substringAfter("dl-c(bu )+09f1Kk1", "dl-c(bu )+09f1Kk1");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", 48, '.');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("................................................", string1);
      
      String string2 = StringUtils.join((double[]) null, 'k', 48, (-453));
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("hYvg<Y|<}Ec%sIjH", "#");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.overlay("...", "", (-1163), 1077);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "#", (CharSequence) "");
      assertFalse(boolean0);
      
      String string4 = StringUtils.join((double[]) null, 'k');
      assertNull(string4);
      
      String string5 = StringUtils.right("Q", (-1962));
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      
      Buffer buffer0 = charBuffer0.flip();
      assertNotNull(buffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, buffer0.limit());
      assertFalse(buffer0.hasRemaining());
      assertTrue(buffer0.hasArray());
      assertEquals(0, buffer0.remaining());
      assertEquals(0, buffer0.arrayOffset());
      assertEquals(0, buffer0.capacity());
      assertFalse(buffer0.isReadOnly());
      assertFalse(buffer0.isDirect());
      assertEquals(0, buffer0.position());
      
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertNotNull(charBuffer1);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.capacity());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      
      String string6 = StringUtils.abbreviate("", (-453));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      boolean boolean0 = StringUtils.isAlphanumeric(">&wNezN0np");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare("tj", "org.apache.commons.lang3.StringUtils", false);
      assertEquals(5, int0);
      
      String string0 = StringUtils.defaultString("org.apache.commons.lang3.StringUtils", "Ju!39=$}+LLV");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      boolean boolean1 = StringUtils.isWhitespace("org.apache.commons.lang3.StringUtils");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.stripStart(">&wNezN0np", "4?aq7lu<");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(">&wNezN0np", string1);
      
      String string2 = StringUtils.right("!&sb!EDeb!&sb!EDeb", 8);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("sb!EDeb", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      boolean boolean2 = StringUtils.endsWithAny("org.apache.commons.lang3.StringUtils", charSequenceArray0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-25);
      byteArray0[2] = (byte)5;
      byteArray0[3] = (byte) (-54);
      String string0 = StringUtils.abbreviate("chT9}|z!^WhEnXQe", (int) (byte)5);
      assertNotNull(string0);
      assertEquals("ch...", string0);
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^( ");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Lzu`^( ";
      objectArray0[3] = (Object) "Lzu`^( ";
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)396;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
      
      String string0 = "org.apache.commons.lang3.exception.CloneFailedException";
      // Undeclared exception!
      StringUtils.rightPad("org.apache.commons.lang3.exception.CloneFailedException", 32767, 'q');
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      String string0 = StringUtils.join(booleanArray0, ':');
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals("false:false:true:true:true", string0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) ':';
      String string1 = StringUtils.join(doubleArray0, 'k', (int) ':', (int) ':');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new double[] {58.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals("", string1);
      
      String string2 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("false:false:true:true:true", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.overlay("", "dl-c(=bu )+09f1Kk1T#NV7-5|2", 0, ':');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("dl-c(=bu )+09f1Kk1T#NV7-5|2", string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "false:false:true:true:true", (CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.wrap("dl-c(=bu )+09f1Kk1T#NV7-5|2", ':');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(":dl-c(=bu )+09f1Kk1T#NV7-5|2:", string4);
      
      String string5 = StringUtils.right("dl-c(=bu )+09f1Kk1T#NV7-5|2", 0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      
      Buffer buffer0 = charBuffer0.flip();
      assertNotNull(buffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(buffer0.hasArray());
      assertFalse(buffer0.isDirect());
      assertEquals(0, buffer0.limit());
      assertEquals(0, buffer0.remaining());
      assertFalse(buffer0.isReadOnly());
      assertEquals(0, buffer0.capacity());
      assertEquals(0, buffer0.arrayOffset());
      assertFalse(buffer0.hasRemaining());
      assertEquals(0, buffer0.position());
      
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertNotNull(charBuffer1);
      assertEquals(0, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("false:false:true:true:true", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      String string0 = StringUtils.substringBefore("The String must not be emptyThe String must not be empty", "LRh");
      assertNotNull(string0);
      assertEquals("The String must not be emptyThe String must not be empty", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "The String must not be emptyThe String must not be empty";
      stringArray0[1] = "LRh";
      stringArray0[3] = "LRh";
      stringArray0[4] = "The String must not be emptyThe String must not be empty";
      stringArray0[6] = "The String must not be emptyThe String must not be empty";
      stringArray0[2] = "org.apache.commons.lang3.ArrayUtils";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(8, stringArray0.length);
      assertEquals("", string1);
      
      Integer integer0 = new Integer(426);
      assertNotNull(integer0);
      assertEquals(426, (int)integer0);
      
      String string2 = StringUtils.overlay("The String must not be emptyThe String must not be empty", "The String must not be emptyThe String must not be empty", 426, 426);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("The String must not be emptyThe String must not be emptyThe String must not be emptyThe String must not be empty", string2);
      
      String string3 = StringUtils.rightPad("$.;Bchf~.GbTHq6]org.apache.commons.lang3.ArrayUtils", 426, "LRh");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("$.;Bchf~.GbTHq6]org.apache.commons.lang3.ArrayUtilsLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRhLRh", string3);
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("US", locale0.getCountry());
      
      String string0 = StringUtils.removeEndIgnoreCase(">vJ2@ix',wSJv_", "TB3+vjG?Xi");
      assertNotNull(string0);
      assertEquals(">vJ2@ix',wSJv_", string0);
      
      String string1 = StringUtils.defaultIfEmpty("", ">vJ2@ix',wSJv_");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(">vJ2@ix',wSJv_", string1);
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("\r", "TB3+vjG?Xi");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("TB3+vjG?Xi", "w0(ZR4{Js@");
      assertNotNull(string0);
      assertEquals("w0(ZR4{Js@TB3+vjG?Xiw0(ZR4{Js@", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("w0(ZR4{Js@", "TB3+vjG?Xi");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = '?';
      int int0 = StringUtils.indexOfAny((CharSequence) "TB3+vjG?Xi", charArray0);
      assertArrayEquals(new char[] {'X', '?'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      char[] charArray0 = new char[2];
      int int0 = StringUtils.indexOfAny((CharSequence) "TB3+v?i", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "TB3+v?i", (CharSequence) "TB3+v?i");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      String string0 = StringUtils.replace("bwoFQ#T6t(7qG@F0", "bwoFQ#T6t(7qG@F0", "bwoFQ#T6t(7qG@F0");
      assertNotNull(string0);
      assertEquals("bwoFQ#T6t(7qG@F0", string0);
      
      String string1 = StringUtils.substringAfter("bwoFQ#T6t(7qG@F0", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("", (String) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "bwoFQ#T6t(7qG@F0", 32, 108);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.center("bwoFQ#T6t(7qG@F0", 32, "bwoFQ#T6t(7qG@F0");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("bwoFQ#T6bwoFQ#T6t(7qG@F0bwoFQ#T6", string3);
      
      String string4 = StringUtils.removeEnd((String) null, "bwoFQ#T6bwoFQ#T6t(7qG@F0bwoFQ#T6");
      assertNull(string4);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAny((CharSequence) "bwoFQ#T6bwoFQ#T6t(7qG@F0bwoFQ#T6", charArray0);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Locale must not be null";
      charSequenceArray0[1] = (CharSequence) "Locale must not be null";
      charSequenceArray0[2] = (CharSequence) "Locale must not be null";
      charSequenceArray0[3] = (CharSequence) "Locale must not be null";
      String string0 = StringUtils.prependIfMissingIgnoreCase("Locale must not be null", "Locale must not be null", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("Locale must not be null", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '[';
      charArray0[1] = ':';
      charArray0[2] = '!';
      charArray0[3] = 'U';
      charArray0[4] = 'I';
      charArray0[5] = 'W';
      int int0 = StringUtils.indexOfAny((CharSequence) "Locale must not be null", charArray0);
      assertArrayEquals(new char[] {'[', ':', '!', 'U', 'I', 'W'}, charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      String string0 = StringUtils.chop("]mB");
      assertNotNull(string0);
      assertEquals("]m", string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("]mB", "]mB", "]mB");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]mB", string1);
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      ArrayList<Object> arrayList0 = null;
      try {
        arrayList0 = new ArrayList<Object>((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      String string0 = "/3t<t\"'-Q%[/zB?";
      String string1 = "The character ";
      String string2 = StringUtils.removeIgnoreCase("/3t<t\"'-Q%[/zB?", "The character ");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("/3t<t\"'-Q%[/zB?", string2);
      
      // Undeclared exception!
      try { 
        Charset.forName("/3t<t\"'-Q%[/zB?");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // /3t<t\"'-Q%[/zB?
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      String string0 = StringUtils.truncate(" ", 15);
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotNull(locale1);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("US", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("en_US", locale1.toString());
      assertEquals("en", locale1.getLanguage());
      assertEquals("USA", locale1.getISO3Country());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      
      int int0 = StringUtils.getFuzzyDistance("TB3+vjG?Xi", " ", locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertNotSame(locale0, locale1);
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEndIgnoreCase(">vJ2@ix',wSJv_", "TB3+vjG?Xi");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(">vJ2@ix',wSJv_", string1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(">vJ2@ix',wSJv_"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(">vJ2@ix',wSJv_"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string2 = StringUtils.join((Iterator<?>) listIterator0, (String) null);
      assertNotNull(string2);
      assertFalse(arrayList0.contains(">vJ2@ix',wSJv_"));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("", string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = arrayList0.add(object0);
      assertFalse(arrayList0.contains(">vJ2@ix',wSJv_"));
      assertTrue(arrayList0.contains(object0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean0);
      
      String string3 = StringUtils.removeStart("TB3+vjG?Xi", "ch");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("TB3+vjG?Xi", string3);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) ">vJ2@ix',wSJv_", (char[]) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "T9}|z!^WhEnXQe", (CharSequence) "");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("'U8tN'U8tN", " _B");
      assertNotNull(string0);
      assertEquals(" _B'U8tN'U8tN _B", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " _B'U8tN'U8tN _B", "2s]!N");
      assertFalse(boolean0);
      
      String string1 = StringUtils.toRootLowerCase("B6Rr+$gx");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("b6rr+$gx", string1);
      
      String string2 = StringUtils.substringAfter("B6Rr+$gx", (-1005));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("w0(ZR4{Js@", "w0(ZR4{Js@");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("p]#br", (-3591));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("p]#br", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "p]#br");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      String string0 = StringUtils.join((List<?>) vector0, "Exception cloning Cloneable type ", 57, 57);
      assertNotNull(string0);
      assertFalse(vector0.contains("Exception cloning Cloneable type "));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Exception cloning Cloneable type ", "Exception cloning Cloneable type ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.unwrap("...", "Exception cloning Cloneable type ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = 'X';
      charArray0[1] = ';';
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(string0));
      
      boolean boolean0 = treeSet0.add("");
      assertTrue(treeSet0.contains(""));
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing(";5uVtY O", ';');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(";5uVtY O;", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("y", (-2529));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '{';
      charArray0[1] = 'C';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'{', 'C'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      
      HashSet<Integer> hashSet0 = new HashSet<Integer>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Integer integer0 = new Integer(10);
      assertNotNull(integer0);
      assertEquals(10, (int)integer0);
      
      boolean boolean1 = hashSet0.add(integer0);
      assertTrue(hashSet0.contains(10));
      assertTrue(boolean1 == boolean0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean1);
      
      String string0 = StringUtils.join((Iterable<?>) hashSet0, '^');
      assertNotNull(string0);
      assertTrue(hashSet0.contains(10));
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("10", string0);
      
      Integer integer1 = new Integer(1408);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1408, (int)integer1);
      
      boolean boolean2 = hashSet0.add(integer1);
      assertTrue(hashSet0.contains(10));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertTrue(boolean2);
      
      String string1 = StringUtils.overlay("10", "jDTjDT", 24, 13);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("10jDTjDT", string1);
      
      String string2 = StringUtils.replaceEachRepeatedly("Strings must not be null", (String[]) null, (String[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Strings must not be null", string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "10", (CharSequence) "10", (-92));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '', 22, 113);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      String string0 = StringUtils.join((boolean[]) null, ':');
      assertNull(string0);
      
      String string1 = StringUtils.stripToNull("The character ");
      assertNotNull(string1);
      assertEquals("The character", string1);
      
      String string2 = StringUtils.repeat("9", (-287));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '6');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.removeEndIgnoreCase("P`;n*<s(r<@", "The character ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("P`;n*<s(r<@", string3);
      
      String string4 = StringUtils.defaultString("P`;n*<s(r<@");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("P`;n*<s(r<@", string4);
      
      String string5 = StringUtils.wrapIfMissing((String) null, 'I');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = 1;
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 1);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string0 = StringUtils.truncate("-c EY&w*-L3*!=x", 1, 1);
      assertNotNull(string0);
      assertEquals("c", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      int int2 = (-1);
      char char0 = ']';
      String string1 = StringUtils.center("J'H-/tze{x\"$pf8BH", (-1), ']');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("J'H-/tze{x\"$pf8BH", string1);
      
      charSequenceArray0[0] = (CharSequence) "J'H-/tze{x\"$pf8BH";
      charSequenceArray0[1] = (CharSequence) "c";
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = (CharSequence) "c";
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = (CharSequence) "c";
      charSequenceArray0[6] = (CharSequence) "c";
      charSequenceArray0[7] = null;
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(8, charSequenceArray0.length);
      assertEquals("J'H-/tze{x\"$pf8BHcccc", string2);
      
      String string3 = StringUtils.chomp((String) null);
      assertNull(string3);
      
      boolean boolean2 = StringUtils.containsIgnoreCase(charSequenceArray0[1], charSequenceArray0[4]);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean2);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll("-c EY&w*-L3*!=x", "HT4g`_w[2j`;s(W:iJ");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 17
         // HT4g`_w[2j`;s(W:iJ
         //                  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("'U8tN'U8tN", " _B");
      assertNotNull(string0);
      assertEquals(" _B'U8tN'U8tN _B", string0);
      
      String string1 = StringUtils.toRootLowerCase("B6Rr+$gx");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("b6rr+$gx", string1);
      
      String string2 = StringUtils.substringAfter("B6Rr+$gx", (-1005));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("b6rr+$gx");
      assertTrue(boolean0);
      
      String string3 = StringUtils.stripEnd("", " vs ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.toRootLowerCase((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.leftPad(" _B'U8tN'U8tN _B", (-1005), 'z');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals(" _B'U8tN'U8tN _B", string5);
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("Array and element cannot both be null");
      assertNotNull(string0);
      assertEquals("Array and element cannot both be null", string0);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.toRootUpperCase("Array and element cannot both be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ARRAY AND ELEMENT CANNOT BOTH BE NULL", string1);
      
      boolean boolean1 = StringUtils.isAllLowerCase("ARRAY AND ELEMENT CANNOT BOTH BE NULL");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.wrapIfMissing("ARRAY AND ELEMENT CANNOT BOTH BE NULL", " is not in the range '0' - '9'");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" is not in the range '0' - '9'ARRAY AND ELEMENT CANNOT BOTH BE NULL is not in the range '0' - '9'", string2);
      
      Object[] objectArray0 = new Object[0];
      String string3 = StringUtils.join(objectArray0, 'P', (-153), (-153));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(0, objectArray0.length);
      assertEquals("", string3);
      
      String string4 = StringUtils.rightPad("ARRAY AND ELEMENT CANNOT BOTH BE NULL", (-153), 'i');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("ARRAY AND ELEMENT CANNOT BOTH BE NULL", string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "ARRAY AND ELEMENT CANNOT BOTH BE NULL", (-153));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      boolean boolean0 = StringUtils.startsWithAny("Strings must not be null", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.unwrap("nTfhAgrf'w+k is not in the range '0' - '9'", "[a7]@(");
      assertNotNull(string0);
      assertEquals("nTfhAgrf'w+k is not in the range '0' - '9'", string0);
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Lzu3`*^(] ");
      assertNotNull(string0);
      assertEquals("lzu3`*^(] ", string0);
      
      String string1 = StringUtils.substringBetween("z_a<{9no", "Lzu3`*^(] ", "Lzu3`*^(] ");
      assertNull(string1);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "z_a<{9no", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rightPad((String) null, (-1));
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^( ");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "Lzu`^( ";
      char[] charArray0 = new char[0];
      boolean boolean1 = StringUtils.containsAny((CharSequence) "The character ", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean1);
      
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
      
      boolean boolean2 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      String string0 = StringUtils.rightPad("TB3+vjHXi", (int) '.');
      assertNotNull(string0);
      assertEquals("TB3+vjHXi                                    ", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "TB3+vjHXi", '.');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      String string0 = StringUtils.left("The character ", 1);
      assertNotNull(string0);
      assertEquals("T", string0);
      
      String string1 = StringUtils.replace("T", "The character ", "T", 1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("T", string1);
      
      String string2 = StringUtils.rightPad("dl-c(bu )+09f1Kk1", 1, 'd');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("dl-c(bu )+09f1Kk1", string2);
      
      String string3 = StringUtils.deleteWhitespace("dl-c(bu )+09f1Kk1");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("dl-c(bu)+09f1Kk1", string3);
      
      String string4 = StringUtils.stripStart("T", "dl-c(bu )+09f1Kk1");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("T", string4);
      
      boolean boolean0 = StringUtils.isBlank("T");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      String string5 = StringUtils.valueOf(charArray0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertArrayEquals(new char[] {'d', 'd', 'd'}, charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("ddd", string5);
      
      int int0 = StringUtils.lastOrdinalIndexOf("dl-c(bu )+09f1Kk1", "ddd", 1);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("dl-c(bu )+09f1Kk1");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = StringUtils.replaceFirst("dl-c(bu )+09f1Kk1", (String) null, "dl-c(bu )+09f1Kk1");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("dl-c(bu )+09f1Kk1", string6);
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>(256);
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(256));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains(256));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      
      String string0 = StringUtils.join((Iterator<?>) listIterator0, ")");
      assertNotNull(string0);
      assertFalse(arrayList0.contains(256));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("org.apache.commons.lang3.ObjectUtils", "org.apache.commons.lang3.Charsets");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ObjectUtils", string1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "ch", (char[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "ch", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("Locale must not be null");
      assertNotNull(string0);
      assertEquals("locale must not be null", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("locale must not be null");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      String string0 = StringUtils.difference(", '", "Ep5sc`&d>a");
      assertNotNull(string0);
      assertEquals("Ep5sc`&d>a", string0);
      
      String string1 = StringUtils.uncapitalize(", '");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(", '", string1);
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string0 = StringUtils.join(booleanArray0, '0', 648, 0);
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertEquals("", string0);
      
      int int0 = StringUtils.compare("", "HPBIFU^5t?M");
      assertEquals((-11), int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("HPBIFU^5t?M");
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("", 322);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("                                                                                                                                                                                                                                                                                                                                  ", string1);
      
      String string2 = StringUtils.stripStart("HPBIFU^5t?M", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("HPBIFU^5t?M", string2);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "HPBIFU^5t?M", charArray0);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int1);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.replaceEachRepeatedly(")<C", stringArray0, stringArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertEquals(")<C", string3);
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("\r'", "k2TD84");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.reverse("Cannot clone Cloneable type ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" epyt elbaenolC enolc tonnaC", string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("54\".54\".");
      assertFalse(boolean0);
      
      String string2 = StringUtils.left("%<m&DwSH_&QW!Pb[", 4);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("%<m&", string2);
      
      String string3 = StringUtils.reverseDelimited((String) null, 'o');
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      String string0 = StringUtils.removeFirst("The character ", "The character ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.CR;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      
      String string2 = StringUtils.removeIgnoreCase("hould not be null.", ", Length: 0");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("hould not be null.", string2);
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      int int0 = StringUtils.length("TB3+vjG?Xi");
      assertEquals(11, int0);
      
      String string0 = StringUtils.wrapIfMissing("TB3+vjG?Xi", "w0(ZR4{Js@");
      assertNotNull(string0);
      assertEquals("w0(ZR4{Js@TB3+vjG?Xiw0(ZR4{Js@", string0);
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      String string0 = StringUtils.defaultString("T#NV7-5|2", "org.apache.commons.lang3.Charsets");
      assertNotNull(string0);
      assertEquals("T#NV7-5|2", string0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ListIterator<Integer> listIterator0 = arrayList0.listIterator();
      assertNotNull(listIterator0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, "J!:g-w(gD");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("", string1);
      
      String string2 = StringUtils.lowerCase("T#NV7-5|2");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("t#nv7-5|2", string2);
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("B3+vG?Xi", "B3+vG?Xi");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Comparator should not be null.", "Comparator should not be null.");
      assertNotNull(string0);
      assertEquals("Comparator should not be null.", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("Comparator should not be null.");
      assertTrue(boolean0);
      
      String string1 = StringUtils.reverseDelimited("zJ\"@Kmx2OzYr>Y", '@');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Kmx2OzYr>Y@zJ\"", string1);
      
      String string2 = StringUtils.substringBeforeLast("Comparator should not be null.", "Comparator should not be null.");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "Kmx2OzYr>Y@zJ\"";
      stringArray0[2] = "Comparator should not be null.";
      stringArray0[3] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string3 = StringUtils.lowerCase(":[{$#WYA");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals(":[{$#wya", string3);
      
      String string4 = StringUtils.replaceFirst("", "Kmx2OzYr>Y@zJ\"", "The type must not be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-126);
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      
      ByteBuffer byteBuffer0 = charset0.encode("Index: ");
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(7, byteBuffer0.remaining());
      assertEquals(7, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(7, byteBuffer0.limit());
      
      // Undeclared exception!
      try { 
        Charset.forName("Comparator should not be null.");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Comparator should not be null.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      String string0 = StringUtils.unwrap((String) null, 'f');
      assertNull(string0);
      
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 'f';
      longArray0[2] = (long) 'f';
      longArray0[3] = (long) 'f';
      longArray0[4] = (long) 'f';
      longArray0[5] = (long) 'f';
      String string1 = StringUtils.join(longArray0, 'f');
      assertNotNull(string1);
      assertArrayEquals(new long[] {102L, 0L, 102L, 102L, 102L, 102L}, longArray0);
      assertEquals(6, longArray0.length);
      assertEquals("102f0f102f102f102f102", string1);
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '4');
      assertNotNull(string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '[', 17, 17);
      assertNotNull(string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (-1103), 0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) (-1103);
      longArray0[1] = (long) (-1);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)1862;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'e', (int) (short)73, 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 73
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, (-1103), 0);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) 0;
      longArray0[3] = (long) (-1103);
      longArray0[4] = (long) (-1);
      longArray0[5] = 1L;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) (-1103);
      String string0 = StringUtils.join(longArray0, '-');
      assertNotNull(string0);
      assertArrayEquals(new long[] {0L, (-1L), 0L, (-1103L), (-1L), 1L, 0L, (-1103L)}, longArray0);
      assertEquals(8, longArray0.length);
      assertEquals("0--1-0--1103--1-1-0--1103", string0);
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      String string0 = StringUtils.join(charArray0, '-', 1, 1);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string1 = StringUtils.prependIfMissing((String) null, "", charSequenceArray0);
      assertNull(string1);
      assertEquals(0, charSequenceArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'f';
      charArray0[2] = '4';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'T', 'f', '4'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '[';
      charArray0[1] = 'V';
      charArray0[2] = 'C';
      charArray0[3] = 'M';
      charArray0[4] = 'e';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {'[', 'V', 'C', 'M', 'e'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      String string0 = StringUtils.wrap("", 'B');
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      String string0 = StringUtils.wrap("", 'm');
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = '-';
      charArray0[3] = 'm';
      charArray0[4] = 'm';
      charArray0[5] = 'm';
      charArray0[6] = 'm';
      charArray0[7] = 'm';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'m', 'm', '-', 'm', 'm', 'm', 'm', 'm'}, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Array element ";
      objectArray0[2] = (Object) "Array element ";
      objectArray0[3] = (Object) "Array element ";
      objectArray0[5] = (Object) "Array element ";
      objectArray0[6] = (Object) "Array element ";
      objectArray0[7] = (Object) "Array element ";
      String string0 = StringUtils.joinWith("Array element ", objectArray0);
      assertNotNull(string0);
      assertEquals(8, objectArray0.length);
      assertEquals("Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ", string0);
      
      String string1 = StringUtils.overlay("ch", "ch", 0, 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("chch", string1);
      
      String string2 = StringUtils.stripToEmpty("W2");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("W2", string2);
      
      String string3 = StringUtils.deleteWhitespace("chch");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("chch", string3);
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, 'q', 24, 4);
      assertNotNull(string0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.swapCase("Array and element cannot both be null7[!RS}v(>?5Q");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("aRRAY AND ELEMENT CANNOT BOTH BE NULL7[!rs}V(>?5q", string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "aRRAY AND ELEMENT CANNOT BOTH BE NULL7[!rs}V(>?5q");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "Array element ";
      objectArray0[1] = (Object) "Array element ";
      objectArray0[2] = (Object) "Array element ";
      objectArray0[3] = (Object) "Array element ";
      objectArray0[4] = (Object) "Array element ";
      objectArray0[5] = (Object) "Array element ";
      objectArray0[6] = (Object) "Array element ";
      objectArray0[7] = (Object) "Array element ";
      String string0 = StringUtils.joinWith("Array element ", objectArray0);
      assertNotNull(string0);
      assertEquals(8, objectArray0.length);
      assertEquals("Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element Array element ", (CharSequence) "Array element ", 51);
      assertEquals(56, int0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)1051;
      shortArray0[1] = (short)6;
      shortArray0[2] = (short)8;
      shortArray0[3] = (short)9;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)3;
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)56;
      shortArray0[8] = (short)1124;
      String string1 = StringUtils.join(shortArray0, '~', (int) (short)1124, 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new short[] {(short)1051, (short)6, (short)8, (short)9, (short)0, (short)3, (short)0, (short)56, (short)1124}, shortArray0);
      assertEquals(9, shortArray0.length);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "W+rL";
      charSequenceArray0[1] = (CharSequence) "W+rL";
      charSequenceArray0[2] = (CharSequence) "W+rL";
      String string0 = StringUtils.prependIfMissingIgnoreCase("W+rL", "W+rL", charSequenceArray0);
      assertNotNull(string0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("W+rL", string0);
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.replaceEachRepeatedly("nTfhAgrf'w8k", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      assertEquals("nTfhAgrf'w8k", string0);
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      String string0 = StringUtils.substring("AZ9N_P.mrV]Qk%?", 542);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceChars("AZ9N_P.mrV]Qk%?", 's', 's');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("AZ9N_P.mrV]Qk%?", string1);
      
      int[] intArray0 = StringUtils.toCodePoints("AZ9N_P.mrV]Qk%?");
      assertNotNull(intArray0);
      assertEquals(15, intArray0.length);
      
      String string2 = StringUtils.center((String) null, 0, '(');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("s|[>I}>l(uN", "=t");
      assertNotNull(string0);
      assertEquals("s|[>I}>l(uN", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "s|[>I}>l(uN", (CharSequence) "=t");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      String string0 = StringUtils.defaultString(")", ")");
      assertNotNull(string0);
      assertEquals(")", string0);
      
      boolean boolean0 = StringUtils.isMixedCase(")");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha(")");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ")", (CharSequence) ")", 8192);
      assertEquals(0, int0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      String string1 = StringUtils.join(booleanArray0, '*');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(7, booleanArray0.length);
      assertEquals("false*false*false*false*false*false*false", string1);
      
      String string2 = StringUtils.stripToNull(")");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(")", string2);
      
      String string3 = StringUtils.repeat(")", 8192);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "P`;n*<s(r<@", ")");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string4 = StringUtils.removeIgnoreCase(")", ")");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.leftPad("chT9}|z!^WhEnXQe", (-4505), '*');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("chT9}|z!^WhEnXQe", string5);
      
      String string6 = StringUtils.replace("Comparator should not be null.Comparator should not be null.", (String) null, "chT9}|z!^WhEnXQe");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("Comparator should not be null.Comparator should not be null.", string6);
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^r ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.leftPad("The characterz", (-57));
      assertNotNull(string0);
      assertEquals("The characterz", string0);
      
      String string1 = StringUtils.repeat("The characterz", (-57));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.stripToEmpty("Index: ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Index:", string2);
      
      String string3 = StringUtils.leftPad("Lzu`^r ", (-57), "Lzu`^r ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Lzu`^r ", string3);
      
      boolean boolean1 = StringUtils.isNotEmpty("Lzu`^r ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      String string0 = StringUtils.center("TB3+vjG?Xi", 13, '.');
      assertNotNull(string0);
      assertEquals(".TB3+vjG?Xi.", string0);
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      String string0 = StringUtils.replaceChars("AZ9N_P.mV]Qk%?", 's', 's');
      assertNotNull(string0);
      assertEquals("AZ9N_P.mV]Qk%?", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("AZ9N_P.mV]Qk%?");
      assertNotNull(intArray0);
      assertEquals(14, intArray0.length);
      
      String string1 = StringUtils.rotate("AZ9N_P.mV]Qk%?", (-11));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("k%?AZ9N_P.mV]Q", string1);
      
      String string2 = StringUtils.defaultString("AZ9N_P.mV]Qk%?", (String) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("AZ9N_P.mV]Qk%?", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "k%?AZ9N_P.mV]Q", (-11));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string1 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(2, stringArray0.length);
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad("$zGG$kMC<U9j(", (-1201), '6');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("$zGG$kMC<U9j(", string2);
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      String string0 = StringUtils.rightPad("TB3+vjG?Xi", 1877, '9');
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      String string0 = StringUtils.repeat("......", 13);
      assertNotNull(string0);
      assertEquals("..............................................................................", string0);
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      String string0 = StringUtils.repeat("I{]", 1870);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad("]hT95!SBt~vJ*=SD", 520);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("]hT95!SBt~vstring1);
      
      boolean boolean1 = StringUtils.containsWhitespace("]hT95!SBt~vJ*=SD                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.stripStart(string0, "I{]");
      assertNotNull(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      String string0 = StringUtils.replace((String) null, (String) null, (String) null);
      assertNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) null, '`');
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2327);
      String string0 = StringUtils.join(intArray0, '&', (-2327), (-2327));
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-2327)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[3] = '&';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'&', '&', '\u0000', '&', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      String string0 = StringUtils.difference(")&D4MIN@J\"V.~\"Yq", ")&D4MIN@J\"V.~\"Yq");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.endsWith("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWith(")&D4MIN@J\"V.~\"Yq", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      String string1 = StringUtils.join(booleanArray0, 'O');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals("falseOtrueOtrueOtrueOtrueOtrue", string1);
      
      String string2 = StringUtils.stripToNull("falseOtrueOtrueOtrueOtrueOtrue");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("falseOtrueOtrueOtrueOtrueOtrue", string2);
      
      String string3 = StringUtils.repeat("", 76);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "I{]", "");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string4 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.leftPad("", 13, 'O');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("OOOOOOOOOOOOO", string5);
      
      String string6 = StringUtils.replace("org.apache.commons.lang3.CharSequenceUtils", ", Length: ", "T9}|z!^WhEnXQe");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string6);
      
      Integer[] integerArray0 = new Integer[0];
      String string7 = StringUtils.join(integerArray0);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string3));
      assertEquals(0, integerArray0.length);
      assertEquals("", string7);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "(`k[FV%c-!1r|YFk9", "  b`{Q}D| `0M");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      String string0 = StringUtils.leftPad("", (-1221));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      String string0 = StringUtils.removeStart("w>s{~[te5ho{/", "w>s{~[te5ho{/");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceChars("vn", 'F', 'F');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("vn", string1);
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      String string0 = StringUtils.substring("{S,p/'|i/,hq'vx;qv", (-2327));
      assertNotNull(string0);
      assertEquals("{S,p/'|i/,hq'vx;qv", string0);
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      String string0 = StringUtils.join(booleanArray0, 'o');
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals("falseofalseofalse", string0);
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.toRootUpperCase(")WpA7m");
      assertNotNull(string0);
      assertEquals(")WPA7M", string0);
      
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[0] = '-';
      String string0 = StringUtils.join(charArray0, '-', 1, 1);
      assertNotNull(string0);
      assertArrayEquals(new char[] {'-', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("", string0);
      
      String string1 = StringUtils.substring("", 54, 1);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Array element ";
      charSequenceArray0[1] = (CharSequence) "Array element ";
      charSequenceArray0[2] = (CharSequence) "Array element ";
      charSequenceArray0[3] = (CharSequence) "Array element ";
      charSequenceArray0[4] = (CharSequence) "Array element ";
      boolean boolean0 = StringUtils.endsWithAny("Array element ", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.substring("Ca\"gdh .Giy", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chomp("", ")");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("T");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.rightPad("Ca\"gdh .Giy", 0, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Ca\"gdh .Giy", string2);
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^r ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.abbreviate((String) null, "Arguments cannot both be null", 3);
      assertNull(string0);
      
      String string1 = StringUtils.strip("w)`", "Arguments cannot both be null");
      assertNotNull(string1);
      assertEquals("w)`", string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("w)`");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      String string0 = StringUtils.rotate("oU)?(z", 13);
      assertNotNull(string0);
      assertEquals("zoU)?(", string0);
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.right("", 2476);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.center("", 2476);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[4] = (CharSequence) "54k\".";
      charSequenceArray0[6] = (CharSequence) "54k\".";
      boolean boolean0 = StringUtils.endsWithAny("54k\".", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.trim("54k\".");
      assertNotNull(string0);
      assertEquals("54k\".", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("54k\".");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string1 = StringUtils.wrap("54k\".", '^');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("^54k\".^", string1);
      
      int int0 = StringUtils.indexOf(charSequenceArray0[6], charSequenceArray0[6]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      String string0 = StringUtils.stripAccents("offset cannot be negativeoffset cannot be negative");
      assertNotNull(string0);
      assertEquals("offset cannot be negativeoffset cannot be negative", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "offset cannot be negativeoffset cannot be negative", (CharSequence) "offset cannot be negativeoffset cannot be negative", 1777);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("offset cannot be negativeoffset cannot be negative");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad((String) null, 13, "j]w");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      String string0 = StringUtils.right("'U8tN", 90);
      assertNotNull(string0);
      assertEquals("'U8tN", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("'U8tN");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "'U8tN";
      charSequenceArray0[1] = (CharSequence) "'U8tN";
      charSequenceArray0[3] = (CharSequence) "'U8tN";
      charSequenceArray0[4] = (CharSequence) "'U8tN";
      charSequenceArray0[5] = (CharSequence) "'U8tN";
      charSequenceArray0[6] = (CharSequence) "'U8tN";
      boolean boolean1 = StringUtils.endsWithAny("'U8tN", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1);
      
      String string1 = StringUtils.substring("Ca\"gdh .Giy", 90, 0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.chomp("'U8tN", "'U8tN");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.rightPad((String) null, 90, "");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      String string0 = StringUtils.chomp("{}", "{}");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      String string0 = StringUtils.substring("n~@F&BGwN", 0, (-1179));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, '8');
      assertNotNull(string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.center("\r", (-302), '8');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      String string0 = StringUtils.unwrap("dl-c(bu )+09f1Kk1", "dl-c(bu )+09f1Kk1");
      assertNotNull(string0);
      assertEquals("dl-c(bu )+09f1Kk1", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[2] = '~';
      charArray0[4] = 'u';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "dl-c(bu )+09f1Kk1", charArray0);
      assertArrayEquals(new char[] {'*', '*', '~', '\u0000', 'u', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      String string0 = StringUtils.stripEnd("The String must no be empty", "{S,p/'|i/,hq'vx;qv");
      assertNotNull(string0);
      assertEquals("The String must no be empty", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "The String must no be empty", (CharSequence) "The String must no be empty");
      assertEquals(0, int0);
      
      String string1 = StringUtils.toRootLowerCase("The String must no be empty");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("the string must no be empty", string1);
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.substring((String) null, 22);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.rotate((String) null, 22);
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      String string2 = StringUtils.leftPad("Supplied value must be a valid byte literal between -128 and 127: [", 22, (String) null);
      assertNotNull(string2);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string2);
      
      charSequenceArray0[2] = (CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [";
      char[] charArray0 = new char[1];
      charArray0[0] = '[';
      String string3 = StringUtils.valueOf(charArray0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new char[] {'['}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("[", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("offset cannot be negative", (String) null, 3);
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("q>mh\"L'P>&dxnX2 ^In", "[", charSequenceArray0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(5, charSequenceArray0.length);
      assertEquals("[q>mh\"L'P>&dxnX2 ^In", string4);
      
      String string5 = StringUtils.uncapitalize("@");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("@", string5);
      
      String string6 = StringUtils.unwrap("object", (String) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("object", string6);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [", (CharSequence) "@", 3);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      String string0 = StringUtils.strip("66i(''U8n");
      assertNotNull(string0);
      assertEquals("66i(''U8n", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 'E';
      charArray0[3] = '*';
      charArray0[4] = '-';
      charArray0[5] = 'v';
      charArray0[6] = 'A';
      charArray0[0] = 't';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "66i(''U8n", charArray0);
      assertArrayEquals(new char[] {'t', 't', 'E', '*', '-', 'v', 'A', '\u0000'}, charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap("66i(''U8n", 't');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("t66i(''U8nt", string1);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      String string2 = StringUtils.join(booleanArray0, 'k');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0));
      assertEquals(6, booleanArray0.length);
      assertEquals("falsekfalsekfalsekfalsekfalsekfalse", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "66i(''U8n";
      charSequenceArray0[1] = (CharSequence) "falsekfalsekfalsekfalsekfalsekfalse";
      boolean boolean1 = StringUtils.endsWithAny("66i(''U8n", charSequenceArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", "", 0, 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string1 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, stringArray0.length);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.endsWithAny("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 0;
      intArray0[2] = (-1);
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) " ");
      assertEquals(1, int0);
      
      intArray0[3] = 0;
      intArray0[4] = (-1);
      intArray0[5] = 0;
      String string2 = StringUtils.join(intArray0, 'N');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new int[] {(-1), 0, (-1), 0, (-1), 0}, intArray0);
      assertEquals(6, intArray0.length);
      assertEquals("-1N0N-1N0N-1N0", string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "", "W");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string3 = StringUtils.unwrap("vM%{`(", 'Q');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("vM%{`(", string3);
      
      String string4 = StringUtils.stripAccents("org.apache.commons.lang3.CharUtils");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.CharUtils", string4);
      
      String string5 = StringUtils.substring("", (-122), 0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String string6 = StringUtils.center("Minimum abbreviation width is %d", 0, 'f');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("Minimum abbreviation width is %d", string6);
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2327);
      String string0 = StringUtils.join(intArray0, '&', (-2327), (-2327));
      assertNotNull(string0);
      assertArrayEquals(new int[] {(-2327)}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals("", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      String string1 = StringUtils.stripEnd("{S,p/'|i/,hq'vx;qv", "{S,p/'|i/,hq'vx;qv");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      String string0 = StringUtils.substringAfter("dl-c(bu )+09f1Kk1", "dl-c(bu )+09f1Kk1");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("dl-c(bu )+09f1Kk1");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, ')');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.split("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = "\\u";
      String string3 = StringUtils.substringBeforeLast(";sxj$sxL,", string2);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(";sxj$sxL,", string3);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("\r", "");
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>(stack0);
      assertNotNull(hashSet0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean2 = hashSet0.add(locale_FilteringMode0);
      assertFalse(stack0.contains(locale_FilteringMode0));
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean2);
      
      stack0.removeAllElements();
      assertFalse(stack0.contains(locale_FilteringMode0));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean3 = hashSet0.add(locale_FilteringMode1);
      assertFalse(stack0.contains(locale_FilteringMode0));
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertTrue(boolean3);
      
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>(hashSet0);
      assertNotNull(vector0);
      assertTrue(vector0.contains(locale_FilteringMode0));
      assertFalse(stack0.contains(locale_FilteringMode0));
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertEquals("[REJECT_EXTENDED_RANGES, IGNORE_EXTENDED_RANGES]", vector0.toString());
      assertEquals(2, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      String string4 = StringUtils.join((Iterable<?>) vector0, "");
      assertNotNull(string4);
      assertTrue(vector0.contains(locale_FilteringMode0));
      assertFalse(stack0.contains(locale_FilteringMode0));
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("[REJECT_EXTENDED_RANGES, IGNORE_EXTENDED_RANGES]", vector0.toString());
      assertEquals(2, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals("REJECT_EXTENDED_RANGESIGNORE_EXTENDED_RANGES", string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ";sxj$sxL,", (CharSequence) "REJECT_EXTENDED_RANGESIGNORE_EXTENDED_RANGES");
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("...", '3');
      assertNotNull(string0);
      assertEquals("3...3", string0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      String string1 = locale0.getExtension('a');
      assertNull(string1);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      String string2 = StringUtils.upperCase("D:$K<dru0x!_rO)?%Dq", locale0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("D:$K<DRU0X!_RO)?%DQ", string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      Locale locale1 = Locale.GERMAN;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale1, locale0);
      
      String string3 = locale0.getDisplayName(locale1);
      assertNotNull(string3);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("de", locale1.toString());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("Franz\u00F6sisch (Frankreich)", string3);
      
      charArray0[1] = '3';
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'3', '3'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "D:$K<DRU0X!_RO)?%DQ");
      assertNull(stringArray0);
      
      String string4 = StringUtils.join(charArray0, '3', 127, 0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertArrayEquals(new char[] {'3', '3'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("", string4);
      
      Locale locale2 = new Locale("5N", "5N");
      assertNotNull(locale2);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals("5N", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("5n_5N", locale2.toString());
      assertEquals("5n", locale2.getLanguage());
      
      String string5 = locale0.getDisplayVariant(locale2);
      assertNotNull(string5);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("5N", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("5n_5N", locale2.toString());
      assertEquals("5n", locale2.getLanguage());
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", string5);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) '3';
      String string6 = StringUtils.join(floatArray0, '3', 0, 0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertArrayEquals(new float[] {51.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertEquals("", string6);
      
      boolean boolean1 = StringUtils.startsWithAny("...", (CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      String string0 = StringUtils.unwrap("dl-c(bu )+09f1Kk1", "dl-c(bu )+09f1Kk1");
      assertNotNull(string0);
      assertEquals("dl-c(bu )+09f1Kk1", string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '*';
      charArray0[1] = '*';
      charArray0[4] = '\u0000';
      charArray0[5] = 'R';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "dl-c(bu )+09f1Kk1", charArray0);
      assertArrayEquals(new char[] {'*', '*', '\u0000', '\u0000', '\u0000', 'R'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      String string0 = StringUtils.left("The character ", 396);
      assertNotNull(string0);
      assertEquals("The character ", string0);
      
      String string1 = StringUtils.replace("The character ", "The character ", "The character ", 396);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("The character ", string1);
      
      char char0 = '4';
      String string2 = null;
      String string3 = StringUtils.remove((String) null, 'L');
      assertNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("8}eis5IQ)(:etB~lj", (String) null, 396);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string4 = StringUtils.abbreviateMiddle((String) null, (String) null, 396);
      assertNull(string4);
      
      String string5 = StringUtils.substringBefore((String) null, 396);
      assertNull(string5);
      
      String[] stringArray2 = StringUtils.split("The character ");
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(2, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      Collection<Object> collection0 = null;
      PriorityQueue<Object> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Object>((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      
      Locale.setDefault(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      
      String[] stringArray0 = StringUtils.split("both be null");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      String string0 = StringUtils.stripEnd("s?-]05'3f^n>", "s?-]05'3f^n>");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      String string0 = StringUtils.remove("rZ^_w", '\'');
      assertNotNull(string0);
      assertEquals("rZ^_w", string0);
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween(".wW_>hhAH", (String) null, "9s<N|l/@Y/H8F");
      assertNull(stringArray0);
      
      String string0 = StringUtils.abbreviateMiddle("$L}JbTYrpN1=ia", "9s<N|l/@Y/H8F", 1388);
      assertNotNull(string0);
      assertEquals("$L}JbTYrpN1=ia", string0);
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[17];
      charSequenceArray0[3] = (CharSequence) "l";
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[3], (char[]) null);
      assertEquals(17, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      String string0 = StringUtils.substringBefore("B6Rr+$gxccK?!", 1357);
      assertNotNull(string0);
      assertEquals("B6Rr+$gxccK?!", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "B6Rr+$gxccK?!", 1357);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("H<H23R@5?9l1@3TP*.#", "H<H23R@5?9l1@3TP*.#", (-516), (-516));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 20
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Strings must not be null", "?");
      assertNotNull(string0);
      assertEquals("Strings must not be null", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = "Strings must not be null";
      stringArray0[2] = "Strings must not be null";
      stringArray0[3] = "E<YxdDUe*9";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "?");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("Lzu`^r ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripStart("The characterz", "Lzu`^r ");
      assertNotNull(string0);
      assertEquals("The characterz", string0);
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      String string0 = StringUtils.strip("66i(''U8tN");
      assertNotNull(string0);
      assertEquals("66i(''U8tN", string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = '%';
      char char0 = 'E';
      charArray0[2] = 'E';
      charArray0[3] = '*';
      charArray0[4] = '8';
      charArray0[5] = 'v';
      charArray0[6] = 'A';
      charArray0[7] = 't';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "66i(''U8tN", charArray0);
      assertArrayEquals(new char[] {'t', '%', 'E', '*', '8', 'v', 'A', 't'}, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.remove("8}eis5IQ)(:etB~lj", 'L');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("8}eis5IQ)(:etB~lj", string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("66i(''U8tN", "Search and Replace array lengths don't match: ", 4);
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "8}eis5IQ)(:etB~lj");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(4, stringArray0.length);
      assertEquals(4, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      
      String string2 = StringUtils.abbreviateMiddle("8}eis5IQ)(:etB~lj", "8}eis5IQ)(:etB~lj", 4);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("8}eis5IQ)(:etB~lj", string2);
      
      String string3 = StringUtils.substringBefore("Aborting to protect against StackOverflowError - output of one loop is the input of another", 4);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      
      String[] stringArray2 = StringUtils.split("Search and Replace array lengths don't match: ");
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(7, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      
      PriorityQueue<Object> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Object>((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, 375);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "N/[nKQig_K|O";
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = (CharSequence) "N/[nKQig_K|O";
      charSequenceArray0[4] = (CharSequence) "9s<N|l/@Y/H8F";
      String string0 = StringUtils.overlay("N/[nKQig_K|O", "N/[nKQig_K|O", 3653, 3653);
      assertNotNull(string0);
      assertEquals("N/[nKQig_K|ON/[nKQig_K|O", string0);
      
      charSequenceArray0[5] = (CharSequence) "N/[nKQig_K|ON/[nKQig_K|O";
      charSequenceArray0[6] = null;
      String string1 = StringUtils.prependIfMissingIgnoreCase("N/[nKQig_K|O", (CharSequence) null, charSequenceArray0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(7, charSequenceArray0.length);
      assertEquals("N/[nKQig_K|O", string1);
      
      char char0 = 'T';
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, 'T', 102, 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 102
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("', has a length less than 2", '3');
      assertNotNull(string0);
      assertEquals("3', has a length less than 23", string0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      String string1 = locale0.getExtension('a');
      assertNull(string1);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      
      String string2 = locale0.getDisplayScript(locale1);
      assertNotNull(string2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string2);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertFalse(set0.contains(string2));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(locale0, locale1);
      
      String string3 = StringUtils.upperCase("D:$K<dru0x!_rO)?%Dq", locale0);
      assertNotNull(string3);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotSame(locale0, locale1);
      assertEquals("D:$K<DRU0X!_RO)?%DQ", string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '3';
      Locale locale2 = Locale.GERMAN;
      assertNotNull(locale2);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      
      String string4 = locale0.getDisplayName(locale2);
      assertNotNull(string4);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("de", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("de", locale2.toString());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("Franz\u00F6sisch (Frankreich)", string4);
      
      int int0 = StringUtils.ordinalIndexOf("D:$K<dru0x!_rO)?%Dq", (CharSequence) null, 1082);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.mid("3', has a length less than 23", (-1), 26);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("3', has a length less than", string5);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("/^e8", "D:$K<dru0x!_rO)?%Dq", 1082, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 20
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      String string0 = StringUtils.join(booleanArray0, ':');
      assertNotNull(string0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true}, booleanArray0));
      assertEquals(5, booleanArray0.length);
      assertEquals("false:false:true:true:true", string0);
      
      String string1 = StringUtils.rightPad("false:false:true:true:true", 1431, 'd');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1431;
      String string2 = StringUtils.join(doubleArray0, 'k', 1431, 1431);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new double[] {1431.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals("", string2);
      
      String string3 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("false:false:true:true:true", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.overlay("", "cDUg~'@G", 0, 1431);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("cDUg~'@G", string4);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) string1, (CharSequence) null);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(boolean0);
      
      String string5 = StringUtils.join(doubleArray0, ':');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertArrayEquals(new double[] {1431.0}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals("1431.0", string5);
      
      String string6 = StringUtils.right("cDUg~'@G", 0);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      
      Buffer buffer0 = charBuffer0.flip();
      assertNotNull(buffer0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(buffer0.isDirect());
      assertEquals(0, buffer0.arrayOffset());
      assertEquals(0, buffer0.limit());
      assertFalse(buffer0.hasRemaining());
      assertEquals(0, buffer0.remaining());
      assertEquals(0, buffer0.capacity());
      assertEquals(0, buffer0.position());
      assertTrue(buffer0.hasArray());
      assertFalse(buffer0.isReadOnly());
      
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertNotNull(charBuffer1);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.capacity());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("false:false:true:true:true", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("@", "@", (-3273));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.toRootLowerCase("@");
      assertNotNull(string0);
      assertEquals("@", string0);
      
      String string1 = StringUtils.removeEnd("T#NV7-5|2", "@");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("T#NV7-5|2", string1);
      
      String[] stringArray1 = StringUtils.split("@", "@");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      boolean boolean1 = StringUtils.isMixedCase("T#NV7-5|2");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      String string0 = StringUtils.substringAfter("dl-c(bu )+09f1Kk1", "dl-c(bu )+09f1Kk1");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("dl-c(bu )+09f1Kk1");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, ')');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.split("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.mid("Object varargs must not be null", 1, 2306);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("bject varargs must not be null", string2);
      
      String string3 = StringUtils.defaultIfBlank("", "f>Ld] :");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("f>Ld] :", string3);
      
      String string4 = StringUtils.defaultString("dl-c(bu )+09f1Kk1");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("dl-c(bu )+09f1Kk1", string4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(2306));
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, (String) null, 1, 2306);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2306
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Minimum abbreviation width is %d");
      assertNotNull(string0);
      assertEquals("Minimumabbreviationwidthis%d", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Minimumabbreviationwidthis%d", (CharSequence) "Minimum abbreviation width is %d", 0);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width is %d";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width is %d";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Minimumabbreviationwidthis%d", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.ordinalIndexOf("Minimumabbreviationwidthis%d", "Minimumabbreviationwidthis%d", 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.replace("Minimumabbreviationwidthis%d", "Minimum abbreviation width is %d", " vs ", 0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Minimumabbreviationwidthis%d", string1);
      
      boolean boolean1 = StringUtils.isMixedCase(charSequenceArray0[1]);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlpha(charSequenceArray0[1]);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "Minimum abbreviation width is %d", 8192);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int2);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate(">[u*", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      String string0 = StringUtils.substring("AZ9N_P.mrV]Qk%?", 542);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceChars("AZ9N_P.mrV]Qk%?", 's', 's');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("AZ9N_P.mrV]Qk%?", string1);
      
      int[] intArray0 = StringUtils.toCodePoints("AZ9N_P.mrV]Qk%?");
      assertNotNull(intArray0);
      assertEquals(15, intArray0.length);
      
      String string2 = StringUtils.join(intArray0, '(', 0, (-1));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(15, intArray0.length);
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p{InCombiningDiacriticalMarks}+");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      String string3 = StringUtils.join(booleanArray0, 's');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(Arrays.equals(new boolean[] {false, true, false}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertEquals("falsestruesfalse", string3);
      
      String string4 = StringUtils.stripToNull("");
      assertNull(string4);
      
      String string5 = StringUtils.repeat("P`;n*<s(r<@", 0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "P`;n*<s(r<@", (String) null);
      assertTrue(boolean0);
      
      String string6 = StringUtils.removeIgnoreCase((String) null, ", Length: ");
      assertNull(string6);
      
      String string7 = StringUtils.leftPad(", Length: ", 4561, '/');
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      
      String string8 = StringUtils.replace("Search and Replace array lengths don't match: ", string7, "");
      assertNotNull(string8);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertEquals("Search and Replace array lengths don't match: ", string8);
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("maxWith cannot be negative", "maxWith cannot be negative");
      assertNotNull(string0);
      assertEquals("maxWith cannot be negative", string0);
      
      String string1 = StringUtils.deleteWhitespace("maxWith cannot be negative");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("maxWithcannotbenegative", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "maxWithcannotbenegative", 32);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      String string0 = StringUtils.substringAfter("dl-c(bu )+09f1Kk1", "dl-c(bu )+09f1Kk1");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNotBlank("dl-c(bu )+09f1Kk1");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, ')');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.split("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = "\\u";
      String string3 = StringUtils.substringBeforeLast(";sxj$sxL,", string2);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(";sxj$sxL,", string3);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains(";sxj$sxL,"));
      assertEquals(0, linkedList0.size());
      
      String string4 = StringUtils.overlay(";sxj$sxL,", "", (-2108), (-2108));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(";sxj$sxL,", string4);
      
      boolean boolean2 = StringUtils.isNotBlank(";sxj$sxL,");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string5 = StringUtils.join((Object[]) stringArray0, "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertEquals(0, stringArray0.length);
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Lzu3`*^(] ");
      assertNotNull(string0);
      assertEquals("lzu3`*^(] ", string0);
      
      String string1 = StringUtils.substringBetween("z_a<{9no", "Lzu3`*^(] ", "Lzu3`*^(] ");
      assertNull(string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("z_a<{9no"));
      assertEquals(0, linkedList0.size());
      
      String string2 = StringUtils.mid("c+{)LDaykx", Integer.MIN_VALUE, 11);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("c+{)LDaykx", string2);
      
      String string3 = StringUtils.defaultIfBlank((String) null, "Lzu3`*^(] ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Lzu3`*^(] ", string3);
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string0 = StringUtils.leftPad("", 0, "7[!RS}v(>?5Q");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.CR;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("\r", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeEnd("Array and element cannot both be null", "7[!RS}v(>?5Q");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Array and element cannot both be null", string2);
      
      String string3 = StringUtils.substringBefore("", 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.substringAfterLast("Array and element cannot both be null", 19);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\r", "ZzN1P_d<bqZH7[!RS}v(>?5QH{L");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      double double0 = StringUtils.getJaroWinklerDistance("7[!RS}v(>?5Q", "");
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      String string5 = StringUtils.join((Object[]) stringArray0, '=');
      assertNotNull(string5);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals("\r", string5);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0, "}A/Sl!O$17");
      assertNotNull(stringArray2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      
      String string6 = StringUtils.substringBetween("", "");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "7[!RS}v(>?5Q", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(12, int1);
      
      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) "7[!RS}v(>?5Q");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.replacePattern("ZzN1P_d<bqZH7[!RS}v(>?5QH{L", ",nc%y8!", "i,w&N");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("ZzN1P_d<bqZH7[!RS}v(>?5QH{L", string7);
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      String string0 = StringUtils.replaceChars("AZ9N_P.mV]Qk%?", 's', 's');
      assertNotNull(string0);
      assertEquals("AZ9N_P.mV]Qk%?", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("AZ9N_P.mV]Qk%?");
      assertNotNull(intArray0);
      assertEquals(14, intArray0.length);
      
      String string1 = StringUtils.center((String) null, 0, '(');
      assertNull(string1);
      
      String string2 = StringUtils.defaultString("AZ9N_P.mV]Qk%?", (String) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("AZ9N_P.mV]Qk%?", string2);
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("7T.E|lr7%B|");
      assertNotNull(string0);
      assertEquals("7T.E|lr7%B|", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "7T.E|lr7%B|", (CharSequence) "7T.E|lr7%B|", (-3));
      assertEquals(0, int0);
      
      Vector<String> vector0 = new Vector<String>(108, (-907));
      assertNotNull(vector0);
      assertFalse(vector0.contains("7T.E|lr7%B|"));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(108, vector0.capacity());
      assertEquals(0, vector0.size());
      
      String string1 = StringUtils.upperCase("7T.E|lr7%B|");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7T.E|LR7%B|", string1);
      
      boolean boolean0 = StringUtils.isNotBlank("7T.E|lr7%B|");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "7T.E|lr7%B|", "7T.E|lr7%B|");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "7T.E|LR7%B|";
      stringArray0[1] = "7N:j7FFPtRDX";
      stringArray0[2] = "7N:j7FFPtRDX";
      stringArray0[3] = "7T.E|lr7%B|";
      stringArray0[4] = "7T.E|LR7%B|";
      String string2 = StringUtils.replaceEach("7N:j7FFPtRDX", stringArray0, stringArray0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(5, stringArray0.length);
      assertEquals("7N:j7FFPtRDX", string2);
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      assertEquals("", string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'N';
      charArray0[1] = '3';
      charArray0[2] = ':';
      charArray0[3] = 'f';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'N', '3', ':', 'f'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.startsWith("", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.join((Object[]) stringArray1, 'q');
      assertNotNull(string1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("", string1);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.wrapIfMissing("", 'f');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.toRootLowerCase("6RFT");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("6rft", string3);
      
      boolean boolean3 = StringUtils.isAllLowerCase("");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "6RFT");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '.';
      charArray1[1] = '3';
      charArray1[2] = 'f';
      charArray1[3] = '3';
      charArray1[4] = 'N';
      charArray1[5] = '3';
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "6rft", charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertArrayEquals(new char[] {'.', '3', 'f', '3', 'N', '3'}, charArray1);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertEquals(0, int3);
      
      String string4 = StringUtils.rightPad((String) null, 57);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("dl-c(bu )+09f1Kk1");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, ')');
      assertNotNull(string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.substringBeforeLast("dl-c(bu )+09f1Kk1", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("dl-c(bu )+09f1Kk1", string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("dl-c(bu )+09f1Kk1", "");
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "dl-c(bu )+09f1Kk1");
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("dl-c(bu )+09f1Kk1", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(boolean2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(int1 == int0);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, (Charset) null);
      assertNotNull(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "dl-c(bu )+09f1Kk1", (CharSequence) "dl-c(bu )+09f1Kk1", (-843));
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("dl-c(bu )+09f1Kk1");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "dl-c(bu )+09f1Kk1", (CharSequence) "dl-c(bu )+09f1Kk1");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isMixedCase("dl-c(bu )+09f1Kk1");
      assertTrue(boolean0);
      
      String string0 = StringUtils.getDigits("?N2OdLQ$v`3Dq,");
      assertNotNull(string0);
      assertEquals("23", string0);
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      boolean boolean0 = StringUtils.isNotBlank("dl-c(bu )+09f1Kk1");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, ')', (int) ')', (-1471));
      assertNotNull(string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[17];
      charSequenceArray0[3] = (CharSequence) "l";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(17, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 109;
      String string0 = StringUtils.wrapIfMissing("l", '!');
      assertNotNull(string0);
      assertEquals("!l!", string0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "l", charSequenceArray0[2], 160);
      assertEquals(17, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.join(intArray0, '');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new int[] {109, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals("10900", string2);
      
      String string3 = StringUtils.abbreviate("!l!", " ", 109, 160);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("!l!", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll(" ", "QL)");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 1
         // QL)
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      float[] floatArray0 = new float[8];
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0.0F;
      doubleArray0[1] = (double) 0.0F;
      String string0 = StringUtils.mid("Threshold must not be negative", (-2873), (-2873));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.wrap("I^[SC\\", '4');
      assertNotNull(string0);
      assertEquals("4I^[SC\\4", string0);
      
      charSequenceArray0[6] = (CharSequence) "4I^[SC\\4";
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, '4');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "I^[SC\\", (CharSequence) "I^[SC\\");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(charSequenceArray0[6], charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "I^[SC\\", charSequenceArray0);
      assertTrue(int1 == int0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("Z0W5KLzN{%#3>_?58~0~3");
      assertNotNull(string0);
      assertEquals("Z0W5KLzN{%#3>_?58~0~3", string0);
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertNotNull(arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = StringUtils.join((List<?>) arrayList0, '@', 18, 18);
      assertNotNull(string0);
      assertFalse(arrayList0.contains(string0));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      String string1 = StringUtils.capitalize("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("jDT");
      assertNotNull(string0);
      assertEquals("jDT", string0);
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      
      String string0 = StringUtils.leftPad((String) null, 59);
      assertNull(string0);
      
      String string1 = StringUtils.stripStart((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.replaceFirst("tDg9%#Hv2,Mv]:+UDD", (String) null, "Index: ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertEquals("tDg9%#Hv2,Mv]:+UDD", string3);
      
      boolean boolean0 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("b6rr+$gx", "b6rr+$gx", 2);
      assertNotNull(string0);
      assertEquals("b6rr+$gx", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("b6rr+$gx", "b6rr+$gx", (-2969));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, 'o');
      assertNull(string0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = objectArray0[0];
      String string1 = StringUtils.joinWith("(K~]gHWyB", objectArray0);
      assertNotNull(string1);
      assertEquals(2, objectArray0.length);
      assertEquals("(K~]gHWyB", string1);
      
      int int0 = 0;
      String string2 = "ch";
      String string3 = StringUtils.overlay("Zeg9.%ANeKNt=*XaL[", "ch", 53, 0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("ch", string3);
      
      String string4 = StringUtils.stripToEmpty("W2");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("W2", string4);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("s|[>I}>l(uN", "s|[>I}>l(uN");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("K");
      assertNotNull(string0);
      assertEquals("K", string0);
  }

  @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("s|[>I}>l(uN", "");
      assertNotNull(string0);
      assertEquals("s|[>I}>l(uN", string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "s|[>I}>l(uN", (CharSequence) "");
      assertEquals(12, int0);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null, (String) null);
      assertNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) null, '`');
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 1);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "6OM)M/iT0rEQp*<3d)";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("6OM)M/iT0rEQp*<3d)", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Strings must not be null", "[wl");
      assertNotNull(string0);
      assertEquals("Strings must not be nu", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[3] = (CharSequence) "[wl";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Strings must not be null", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("Strings must not be null");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Exception cloning Cloneable type ", "Exception cloning Cloneable type ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>(stack0);
      assertNotNull(hashSet0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      boolean boolean0 = hashSet0.add(locale_FilteringMode0);
      assertFalse(stack0.contains(locale_FilteringMode0));
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      stack0.removeAllElements();
      assertFalse(stack0.contains(locale_FilteringMode0));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      
      Vector<Locale.FilteringMode> vector1 = new Vector<Locale.FilteringMode>(stack0);
      assertNotNull(vector1);
      assertFalse(stack0.contains(locale_FilteringMode0));
      assertFalse(vector1.contains(locale_FilteringMode0));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(0, vector1.size());
      assertEquals(0, vector1.capacity());
      assertTrue(vector1.isEmpty());
      assertEquals("[]", vector1.toString());
      
      String string0 = StringUtils.join((Iterable<?>) vector0, "Exception cloning Cloneable type ");
      assertNotNull(string0);
      assertFalse(vector0.contains("Exception cloning Cloneable type "));
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Exception cloning Cloneable type ", (CharSequence) "");
      assertEquals(33, int0);
      
      String string1 = StringUtils.overlay("Exception cloning Cloneable type ", "Exception cloning Cloneable type ", 33, 33);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Exception cloning Cloneable type Exception cloning Cloneable type ", string1);
  }

  @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      String string0 = StringUtils.defaultString(")", ")");
      assertNotNull(string0);
      assertEquals(")", string0);
      
      boolean boolean0 = StringUtils.isMixedCase(")");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlpha(")");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ")", (CharSequence) ")", 8192);
      assertEquals(0, int0);
      
      String string1 = StringUtils.truncate(")", 0, 363);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(")", string1);
  }

  @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("Minimum abbreviation width is %d");
      assertNotNull(string0);
      assertEquals("Minimumabbreviationwidthis%d", string0);
      
      int int0 = 0;
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "Minimumabbreviationwidthis%d", (CharSequence) "Minimum abbreviation width is %d", 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width is %d";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width is %d";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Minimumabbreviationwidthis%d", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int2 = StringUtils.ordinalIndexOf("Minimumabbreviationwidthis%d", "Minimumabbreviationwidthis%d", 0);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      String string1 = StringUtils.replace("Minimumabbreviationwidthis%d", "Minimum abbreviation width is %d", " vs ", 0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Minimumabbreviationwidthis%d", string1);
      
      int[] intArray0 = StringUtils.toCodePoints("Minimumabbreviationwidthis%d");
      assertNotNull(intArray0);
      assertEquals(28, intArray0.length);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isMixedCase("Minimumabbreviationwidthis%d");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string2 = StringUtils.mid("Minimumabbreviationwidthis%d", 0, 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.overlay(" vs ", "Minimumabbreviationwidthis%d", (-1113), 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Minimumabbreviationwidthis%d vs ", string3);
      
      String string4 = StringUtils.stripToEmpty("");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      byte[] byteArray0 = null;
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      
      ByteBuffer byteBuffer0 = charset0.encode("1rno[]<KA~F3");
      assertNotNull(byteBuffer0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(13, byteBuffer0.capacity());
      assertEquals(12, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=12 cap=13]", byteBuffer0.toString());
      assertEquals(12, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasArray());
      
      // Undeclared exception!
      try { 
        ByteBuffer.wrap((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
  }

  @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("", ":eq3CeFg$,;nfHetg8Z", 2909);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 2909;
      String string0 = StringUtils.join(longArray0, 'S');
      assertNotNull(string0);
      assertArrayEquals(new long[] {2909L}, longArray0);
      assertEquals(1, longArray0.length);
      assertEquals("2909", string0);
      
      boolean boolean0 = StringUtils.endsWithAny("2909", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "2909", "Index: ");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.substring("IDtyh@", 2909);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "IDtyh@", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.getDigits("&%xv52");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("52", string2);
      
      char[] charArray0 = new char[0];
      boolean boolean2 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean2);
      
      String string3 = StringUtils.removeEndIgnoreCase("", "IDtyh@");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.replaceAll((String) null, "52", (String) null);
      assertNull(string4);
      
      boolean boolean3 = StringUtils.containsIgnoreCase(":eq3CeFg$,;nfHetg8Z", "Index: ");
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string5 = StringUtils.normalizeSpace("IDtyh@");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("IDtyh@", string5);
      
      boolean boolean4 = StringUtils.contains((CharSequence) "52", (CharSequence) "2909");
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isAlphaSpace(":eq3CeFg$,;nfHetg8Z");
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      String string6 = StringUtils.join((int[]) null, 'S');
      assertNull(string6);
      
      String string7 = StringUtils.center("", 0);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      StringUtils.join((Object[]) null, '`');
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = "J4<_;w-1d0h2Io";
      StringUtils.stripAll(stringArray0, "C!?<u6M");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "J4<_;w-1d0h2Io");
      StringUtils.replaceAll("C!?<u6M", "both be nullboth be null", (String) null);
      StringUtils.stripToNull("");
      StringUtils.abbreviate("", (int) '`');
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "J4<_;w-1d0h2Io", (CharSequence) "C!?<u6M", (-364));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      String string0 = StringUtils.strip("objecN5t");
      assertEquals("objecN5t", string0);
  }

  @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      StringUtils.stripToEmpty("Array element ");
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0, locale_FilteringMode0);
      Iterator<Locale.FilteringMode> iterator0 = enumSet0.iterator();
      String string0 = StringUtils.join(iterator0, "Array element ");
      assertEquals("IGNORE_EXTENDED_RANGES", string0);
  }

  @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) "  b`{Q}D| `0M", "  b`{Q}D| `0M");
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeIgnoreCase("W+E9|", "dl-c(=bu )+09f1Kk1T#NV7-5|2");
      assertEquals("W+E9|", string0);
      
      String string1 = StringUtils.replace("D", "dl-c(bu )+09f1Kk1", "n>/c(=");
      assertEquals("D", string1);
  }

  @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAlpha(charSequenceArray0[0]);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      StringUtils.upperCase((String) null);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 227.79922F;
      floatArray0[2] = 2436.5957F;
      boolean boolean0 = StringUtils.isNotBlank((CharSequence) null);
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, "org.apache.commons.lang3.StringUtils");
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.unwrap((String) null, "org.apache.commons.lang3.StringUtils");
      assertNull(string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) 0.0F;
      String string1 = StringUtils.join(objectArray0, "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNotNull(string1);
      assertEquals("0.0", string1);
  }

  @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      Vector<Locale.FilteringMode> vector0 = new Vector<Locale.FilteringMode>(stack0);
      String string0 = StringUtils.join((Iterable<?>) vector0, "Array element ");
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Array element ", (CharSequence) "Array element ");
      assertEquals(0, int0);
      
      String string1 = StringUtils.difference("p2?B9uGd6Mj", " )9q*{");
      assertEquals(" )9q*{", string1);
  }

  @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      StringUtils.join((Iterator<?>) null, "Supplied value must be a valid byte literal between -32768 and 32767: [");
      StringUtils.trim((String) null);
      StringUtils.isAlphanumericSpace((CharSequence) null);
      StringUtils.mid((String) null, (-506), 13);
      String string0 = StringUtils.substringAfterLast((String) null, "#");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      StringUtils.upperCase((String) null);
      float[] floatArray0 = new float[5];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 227.79922F;
      floatArray0[2] = 2436.5957F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (-1264.1965F);
      StringUtils.join(floatArray0, 'z');
      StringUtils.strip("CkM;vf");
      StringUtils.trimToNull((String) null);
      Class<Integer> class0 = Integer.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader classLoader1 = classLoader0.getParent();
      ClassLoader classLoader2 = classLoader0.getParent();
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      String string0 = StringUtils.join((Iterable<?>) serviceLoader0, "CkM;vf");
      StringUtils.containsNone((CharSequence) "CkM;vf", "CkM;vf");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) classLoader0;
      objectArray0[1] = (Object) classLoader2;
      objectArray0[2] = (Object) 2436.5957F;
      objectArray0[3] = (Object) classLoader0;
      objectArray0[4] = (Object) classLoader1;
      String string1 = StringUtils.join(objectArray0, '|');
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      StringUtils.rightPad("@qK7b]Q0O ~Go_u", 751);
      StringUtils.removeEnd("@qK7b]Q0O ~Go_u                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ", "(");
      char[] charArray0 = new char[0];
      StringUtils.indexOfAny((CharSequence) "@qK7b]Q0O ~Go_ucharArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@qK7b]Q0O ~Go_u
      stringArray0[1] = "@qK7b]Q0O ~Go_u";
      stringArray0[2] = "(";
      stringArray0[3] = "4YTn\"yL";
      stringArray0[4] = "@qK7b]Q0O ~Go_u
      StringUtils.stripAll(stringArray0);
      // Undeclared exception!
      try { 
        StringUtils.removePattern("@qK7b]Q0O ~Go_u", "\"Jy+e?*");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '*' near index 6
         // \"Jy+e?*
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      StringUtils.removePattern("org.apache.commons.lang3.ObjectUtils", "org.apache.commons.lang3.ObjectUtils");
      StringUtils.replaceChars("org.apache.commons.lang3.ObjectUtils", "]b7<T", "Object varargs must not be null");
      StringUtils.indexOfAny((CharSequence) "The String must not be empty", "org.apache.commons.lang3.ObjectUtils");
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("org.apache.commons.lang3.ObjectUtils", "9~pfjH{X", 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      String string0 = "@}[tC(-w";
      // Undeclared exception!
      try { 
        StringUtils.removePattern("@}[tC(-w", "@}[tC(-w");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 7
         // @}[tC(-w
         //        ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", "org.apache.commons.lang3.CharUtils", "offset cannot be negative");
      assertEquals("", string0);
      
      String string1 = StringUtils.stripStart("Object varargs must not be null", "  b`{Q}D| `0M");
      assertEquals("Object varargs must not be null", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("  b`{Q}D| `0M", ".>Livn3", "Comparator should not be null.dl-c(bu )+09f1Kk1...");
      assertNull(stringArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "  b`{Q}D| `0M", (CharSequence) "Object varargs must not be null");
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Exception cloning Cloneable type ", "Lb_!3qx+>5cY}");
      assertEquals(5, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '0');
      assertNotNull(string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 518;
      floatArray0[1] = (float) 518;
      floatArray0[2] = (float) '0';
      String string1 = StringUtils.join(floatArray0, '\\');
      assertNotNull(string1);
      assertEquals("518.0\\518.0\\48.0", string1);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      arrayDeque0.add("518.0)8.0\u00048.0");
      arrayDeque0.descendingIterator();
      String[] stringArray0 = StringUtils.split("518.0)8.0\u00048.0", "518.0)8.0\u00048.0", 2909);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.wrap("almsS{tc?N04", ":eq3CeFg$,;nfHetg8Z");
      assertEquals(":eq3CeFg$,;nfHetg8ZalmsS{tc?N04:eq3CeFg$,;nfHetg8Z", string2);
      
      String string3 = StringUtils.toRootLowerCase(":eq3CeFg$,;nfHetg8Z");
      assertEquals(":eq3cefg$,;nfhetg8z", string3);
  }

  @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      String string0 = StringUtils.wrap("", 'B');
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[2] = 'B';
      int int0 = StringUtils.indexOf((CharSequence) "", 9);
      assertEquals((-1), int0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      charBuffer0.asReadOnlyBuffer();
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) charBuffer0, 45);
      assertEquals(0, int1);
      
      String string1 = StringUtils.substringBefore("0(zE2%n:sA}Vm", "");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("W45{N}k");
      assertEquals("W45{N}k", string0);
      
      String string1 = StringUtils.remove("", 'd');
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "W45{N}k");
      assertFalse(boolean0);
      
      String string2 = StringUtils.reverse("");
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      String string0 = StringUtils.stripEnd("Strings must not be null", "?");
      assertEquals("Strings must not be null", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Strings must not be null", charSequenceArray0);
      boolean boolean1 = StringUtils.isAlpha("?");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("object", ".4+tG6aU\"Db7Vm$x)'E", (-1925));
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) ".4+tG6aU\"Db7Vm$x)'E", (CharSequence) ".4+tG6aU\"Db7Vm$x)'E");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      StringUtils.uncapitalize("AZ9N_P.mrV]Qk%?");
      StringUtils.repeat("", "aZ9N_P.mrV]Qk%?", 64);
      String string0 = StringUtils.join((float[]) null, '\"');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      StringUtils.join((Iterator<?>) null, 'o');
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = objectArray0[0];
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceChars("mV/.qh", (String) null, "Object varargs must not be null");
      assertNotNull(string0);
      assertEquals("mV/.qh", string0);
      
      String string1 = StringUtils.join((int[]) null, '_', Integer.MIN_VALUE, Integer.MIN_VALUE);
      assertNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("mV/.qh");
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {109, 86, 47, 46, 113, 104}, intArray0);
  }

  @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      StringUtils.defaultString("k", "k");
      StringUtils.isMixedCase("k");
      StringUtils.isAlpha("k");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "k", (CharSequence) "k", 8192);
      StringUtils.truncate("k", 0, 363);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "k";
      stringArray0[1] = "k";
      stringArray0[2] = "k";
      stringArray0[3] = "k";
      stringArray0[4] = "7N:j7FFPtRDX";
      String string0 = StringUtils.replaceEach("Aborting to protect against StackOverflowError - output of one loop is the input of another", stringArray0, stringArray0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
  }

  @Test(timeout = 4000)
  public void test817()  throws Throwable  {
      StringUtils.rightPad((String) null, 2114);
      StringUtils.isNumericSpace((CharSequence) null);
      StringUtils.isAllLowerCase((CharSequence) null);
      StringUtils.center((String) null, 49, '(');
      StringUtils.join((short[]) null, 'e');
      StringUtils.deleteWhitespace((String) null);
      // Undeclared exception!
      try { 
        Locale.lookup((List<Locale.LanguageRange>) null, (Collection<Locale>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test818()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("org.apache.commons.lang3.ObjectUtils", 'b');
      assertEquals("jectUtilsborg.apache.commons.lang3.O", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test819()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Lzu3`*uQT]", "");
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.abbreviateMiddle("U8s0OyO0&3kR3R{CK7[", "r\"%Tv", (-847));
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "p{InCombiningDiacriticalMarks}+", 1223, 3474);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1223
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test820()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("The character ", '?');
      assertEquals(1, stringArray0.length);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      Iterator<CharBuffer> iterator0 = treeSet0.descendingIterator();
      String string0 = StringUtils.join(iterator0, '?');
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("The character ", 19);
      assertEquals("The character      ", string1);
      
      String string2 = StringUtils.remove(")C1e<wr1RZ1#", '?');
      assertEquals(")C1e<wr1RZ1#", string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "The character ");
      String string3 = StringUtils.reverse("i7LAM");
      assertEquals("MAL7i", string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '?';
      charArray0[1] = 'p';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "The character ", charArray0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test821()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("Lzu3`*^(] ");
      assertEquals("lzu3`*^(] ", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Lzu3`*^(] ";
      stringArray0[1] = "lzu3`*^(] ";
      stringArray0[2] = "lzu3`*^(] ";
      String string1 = StringUtils.join(stringArray0);
      assertEquals("Lzu3`*^(] lzu3`*^(] lzu3`*^(] ", string1);
      
      String string2 = StringUtils.replaceChars("Lzu3`*^(] ", "Lzu3`*^(] lzu3`*^(] lzu3`*^(] ", "Lzu3`*^(] ");
      assertEquals("Lzu3`*^(] ", string2);
  }

  @Test(timeout = 4000)
  public void test822()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2317);
      StringUtils.substringBefore("S,p/'i/,hq'vx;qv", "S,p/'i/,hq'vx;qv");
      StringUtils.defaultIfBlank("", "");
      StringUtils.substringBetween("+v&a-oz2C6P#", "+v&a-oz2C6P#");
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test823()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, 'd');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.reverse("\n");
      assertEquals("\n", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test824()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "TB3+vjG?Xi";
      stringArray0[1] = " ";
      stringArray0[2] = " ";
      String string0 = StringUtils.join(stringArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("TB3+vjG?Xi  ", "/WWw(c2", (String) null);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.uncapitalize("TB3+vjG?Xi  ");
      assertEquals("tB3+vjG?Xi  ", string2);
  }

  @Test(timeout = 4000)
  public void test825()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlpha("k");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test826()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string0 = StringUtils.join(booleanArray0, '0', 648, 0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("", "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("", 322);
      assertEquals("                                                                                                                                                                                                                                                                                                                                  ", string1);
  }

  @Test(timeout = 4000)
  public void test827()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short) (-987);
      String string1 = StringUtils.join(shortArray0, 'O');
      assertEquals("-987", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("_Tfx!", (int) (short) (-987), 'O');
      assertNotNull(string2);
      assertEquals("_Tfx!", string2);
  }

  @Test(timeout = 4000)
  public void test828()  throws Throwable  {
      StringUtils.compare("tsq*kQ", "tsq*kQ", true);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)3816;
      shortArray0[1] = (short) (-6498);
      StringUtils.join(shortArray0, '~');
      StringUtils.substringBefore("3816~-6498", "");
      StringUtils.splitPreserveAllTokens("NQDYW8:P2 uZks=>9_", "tsq*kQ");
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) '~';
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      StringUtils.join(floatArray0, 'M');
      boolean boolean0 = StringUtils.isAlpha("NQDYW8:P2 uZks=>9_");
      StringUtils.replaceChars("NQDYW8:P2 uZks=>9_", "", ".>Livn3");
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "NQDYW8:P2 uZks=>9_");
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test829()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("TB3+vjG?Xi");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test830()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string0 = StringUtils.wrap("I^[SC\\", '4');
      assertEquals("4I^[SC\\4", string0);
      
      charSequenceArray0[6] = (CharSequence) "4I^[SC\\4";
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, '4');
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("4I^[SC\\4");
      assertEquals(7, stringArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf("4I^[SC\\4", "4I^[SC\\4", 1651);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test831()  throws Throwable  {
      StringUtils.remove("The character ", 'L');
      String string0 = StringUtils.stripToNull("3,a!m$c0;");
      assertNotNull(string0);
      assertEquals("3,a!m$c0;", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("8}eis5IQ)(:etB~lj");
      assertEquals(12, stringArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf("The character ", "8}eis5IQ)(:etB~lj", 1651);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.toRootLowerCase("both be null");
      assertNotNull(string1);
      assertEquals("both be null", string1);
  }

  @Test(timeout = 4000)
  public void test832()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      Locale.setDefault(locale0);
      String string0 = StringUtils.rotate((String) null, 13);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test833()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("', is neither of type Map.Entry nor an Array", "', is neither of type Map.Entry nor an Array");
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("', is neither of type Map.Entry nor an Array", "', is neither of type Map.Entry nor an Array", 1651);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test834()  throws Throwable  {
      StringUtils.unwrap((String) null, "");
      StringUtils.isAlpha("");
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("T6`BC`wO`vv'n&a");
      StringUtils.toEncodedString(byteArray0, charset0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = null;
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string0);
  }
}
