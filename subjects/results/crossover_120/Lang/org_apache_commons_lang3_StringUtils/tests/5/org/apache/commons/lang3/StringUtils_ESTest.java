/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:16:39 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.UnsupportedEncodingException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Iterator<String> iterator0 = stack0.iterator();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(iterator0);
      
      boolean boolean0 = stack0.add("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals("[Aborting to protect against StackOverflowError - output of one loop is the input of another]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      
      boolean boolean1 = stack0.add("FTMGPYqS:O1#)S");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[Aborting to protect against StackOverflowError - output of one loop is the input of another, FTMGPYqS:O1#)S]", stack0.toString());
      assertTrue(stack0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      
      boolean boolean2 = stack0.add("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[Aborting to protect against StackOverflowError - output of one loop is the input of another, FTMGPYqS:O1#)S, Aborting to protect against StackOverflowError - output of one loop is the input of another]", stack0.toString());
      assertTrue(stack0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      
      boolean boolean3 = stack0.add("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(10, stack0.capacity());
      assertEquals(4, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[Aborting to protect against StackOverflowError - output of one loop is the input of another, FTMGPYqS:O1#)S, Aborting to protect against StackOverflowError - output of one loop is the input of another, Aborting to protect against StackOverflowError - output of one loop is the input of another]", stack0.toString());
      assertTrue(stack0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      
      String string0 = "1(kxe8_QhhgBO66";
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, "1(kxe8_QhhgBO66");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      String string0 = StringUtils.join(booleanArray0, '3');
      assertEquals("false3false3true3true3true3true", string0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, true, true, true}, booleanArray0));
      assertNotNull(string0);
      assertEquals(6, booleanArray0.length);
      
      boolean boolean0 = StringUtils.isNumericSpace("false3false3true3true3true3true");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeAll((String) null, "Minimum abbreviation width with offset is %d");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = StringUtils.removeEnd(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) " ";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) " ";
      charSequenceArray0[4] = (CharSequence) " ";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) " ";
      charSequenceArray0[8] = (CharSequence) " ";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(" ", charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals(9, charSequenceArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) " ", '.');
      assertEquals(0, int0);
      
      String string1 = StringUtils.getDigits("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat('O', 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[5], charSequenceArray0[2]);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(9, charSequenceArray0.length);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-66);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte) (-14);
      byteArray0[3] = (byte)45;
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte) (-88);
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)44;
      byteArray0[8] = (byte)9;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = StringUtils.replaceChars("\n", "\n", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("\n");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\n");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "\n";
      charSequenceArray0[5] = (CharSequence) "\n";
      int[] intArray0 = new int[0];
      String string2 = StringUtils.join(intArray0, 'K');
      assertEquals("", string2);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(0, intArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf(charSequenceArray0[0], charSequenceArray0[1], 3);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      String string3 = StringUtils.join((double[]) null, 'K', 321, (-1068));
      assertNull(string3);
      
      int int1 = StringUtils.countMatches(charSequenceArray0[0], (CharSequence) "\n");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = StringUtils.substringBefore(".pL!juH'o?H8MW`S", ".pL!juH'o?H8MW`S");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", ".pL!juH'o?H8MW`S");
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isNumericSpace(".pL!juH'o?H8MW`S");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.trimToNull((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) ".pL!juH'o?H8MW`S");
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.startsWithAny(".pL!juH'o?H8MW`S", (CharSequence[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '/';
      charArray0[1] = ':';
      charArray0[2] = '2';
      charArray0[3] = '[';
      charArray0[4] = '*';
      charArray0[5] = '(';
      charArray0[6] = 'p';
      charArray0[7] = 'B';
      charArray0[8] = 'C';
      boolean boolean3 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean3);
      assertArrayEquals(new char[] {'/', ':', '2', '[', '*', '(', 'p', 'B', 'C'}, charArray0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace("\r");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfterLast("\r", "\r");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("\r", (String) null);
      assertEquals("\r", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("vwhWuw", (String) null);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      String string4 = StringUtils.join(booleanArray0, '2', 965, (-2463));
      assertEquals("", string4);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(1, booleanArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string5 = StringUtils.repeat('2', 1797);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string6 = StringUtils.reverse("\r");
      assertEquals("\r", string6);
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      int int0 = 3;
      String string7 = StringUtils.repeat("FE`oJ1w,RT?=eQG@W", 3);
      assertEquals("FE`oJ1w,RT?=eQG@WFE`oJ1w,RT?=eQG@WFE`oJ1w,RT?=eQG@W", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      String string8 = StringUtils.join(booleanArray0, '2');
      assertEquals("true", string8);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      assertEquals(1, booleanArray0.length);
      
      String string9 = StringUtils.substringAfter("Cannot clone Cloneable type ", (String) null);
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertNotNull(string9);
      
      String string10 = StringUtils.normalizeSpace("Cannot clone Cloneable type ");
      assertEquals("Cannot clone Cloneable type", string10);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string9));
      assertNotNull(string10);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "FE`oJ1w,RT?=eQG@WFE`oJ1w,RT?=eQG@WFE`oJ1w,RT?=eQG@W", 2147483645);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "Cannot clone Cloneable type", (CharSequence) "Cannot clone Cloneable type");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains(string7));
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.replace("hZ`2$lh/Tu", "hZ`2$lh/Tu", "hZ`2$lh/Tu", 1);
      assertEquals("hZ`2$lh/Tu", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "hZ`2$lh/Tu";
      String string1 = StringUtils.strip("hZ`2$lh/Tu", "hZ`2$lh/Tu");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.leftPad("", 2, "Fyj");
      assertEquals("Fy", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "Fy";
      String string3 = StringUtils.join((Object[]) charSequenceArray0, 'a');
      assertEquals("hZ`2$lh/TuaaFyaaaaaa", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(9, charSequenceArray0.length);
      
      charSequenceArray0[3] = (CharSequence) "hZ`2$lh/TuaaFyaaaaaa";
      String string4 = StringUtils.reverseDelimited("hZ`2$lh/Tu", 'R');
      assertEquals("hZ`2$lh/Tu", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) "hZ`2$lh/Tu";
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = (int) 'R';
      intArray0[4] = (int) 'a';
      intArray0[5] = (int) 'R';
      intArray0[6] = 0;
      String string5 = StringUtils.join(intArray0, '\'');
      assertEquals("2'2'2'82'97'82'0", string5);
      assertArrayEquals(new int[] {2, 2, 2, 82, 97, 82, 0}, intArray0);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(7, intArray0.length);
      
      charSequenceArray0[5] = (CharSequence) "2'2'2'82'97'82'0";
      String string6 = StringUtils.abbreviate("Z*2[~|sIE:RDke", 0, 2676);
      assertEquals("Z*2[~|sIE:RDke", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      charSequenceArray0[6] = (CharSequence) "Z*2[~|sIE:RDke";
      String string7 = StringUtils.abbreviateMiddle("j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type Cannot clone Cloneable type f-G_sk-c$O", (String) null, 2);
      assertEquals("j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type Cannot clone Cloneable type f-G_sk-c$O", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      charSequenceArray0[7] = (CharSequence) "j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type Cannot clone Cloneable type f-G_sk-c$O";
      String string8 = StringUtils.abbreviate((String) null, 1, 87);
      assertNull(string8);
      
      charSequenceArray0[8] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = StringUtils.wrap("'z1FbT", 'S');
      assertEquals("S'z1FbTS", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      String string1 = StringUtils.join(booleanArray0, ' ', 8192, 80);
      assertEquals("", string1);
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, false, true, true, true, true}, booleanArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, booleanArray0.length);
      
      String string2 = StringUtils.truncate((String) null, 2887, 80);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = StringUtils.unwrap("1(kxe8_QhhgBO66", 'd');
      assertEquals("1(kxe8_QhhgBO66", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("1(kxe8_QhhgBO66");
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviate("InJdexn ", "1(kxe8_QhhgBO66", 3918, 20);
      assertEquals("InJdexn ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("InJdexn ", 3918);
      assertEquals("InJdexn ", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("1(kxe8_QhhgBO66", "BB'BmBFBfBLBGBz");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string3 = StringUtils.reverse("InJdexn ");
      assertEquals(" nxedJnI", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.length("InJdexn ");
      assertEquals(8, int0);
      
      String string4 = StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another", 55, ']');
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isNumericSpace("1(kxe8_QhhgBO66");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.replacePattern("f-G_sk-c$O", "BB'BmBFBfBLBGBz()", "Search and Replace array lengths don't match: ");
      assertEquals("f-G_sk-c$O", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int1 = StringUtils.compare("Zdsw@A[!;n&rFV!:0I,", "Yi5b@");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOf((CharSequence) "1(kxe8_QhhgBO66", 4083);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string6 = StringUtils.right("g", (-153));
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String string7 = StringUtils.right("Yi5b@", 8);
      assertEquals("Yi5b@", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "Zdsw@A[!;n&rFV!:0I,", 58);
      assertEquals(15, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      int int4 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String string0 = "-";
      String string1 = StringUtils.deleteWhitespace("-");
      assertEquals("-", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf("-", "-", 2735);
      assertEquals((-1), int0);
      
      String string2 = "YJmJ};'~";
      String string3 = "-Iu%,yTZcri,&2mA)b:";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("-Iu%,yTZcri,&2mA)b:", "-", 2735);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(2735));
      assertNotNull(stack0);
      
      int int1 = (-683);
      int int2 = (-259);
      Integer integer0 = new Integer(67);
      assertEquals(67, (int)integer0);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        stack0.setElementAt(integer0, (-1212));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1212
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)2290;
      String string0 = StringUtils.join(shortArray0, '!', 224, (-1851));
      assertEquals("", string0);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)2290}, shortArray0);
      assertNotNull(string0);
      assertEquals(7, shortArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("...", "a#4`gF|4s3S5+d>\"l0", 199);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.upperCase("a#4`gF|4s3S5+d>\"l0");
      assertEquals("A#4`GF|4S3S5+D>\"L0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "Cannot clone Cloneable type ", "m~KfWW");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type Cannot clone Cloneable type f-G_sk-c$Oj=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type Cannot clone Cloneable type f-G_sk-c$O", '!');
      assertEquals("j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type Cannot clone Cloneable type f-G_sk-c$Oj=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type Cannot clone Cloneable type f-G_sk-c$O", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("CGgBjN#m*", (String) null);
      assertEquals("CGgBjN#m*", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "...", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.capitalize("k,#TlJ5VSwfghc");
      assertEquals("K,#TlJ5VSwfghc", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOf((CharSequence) "K,#TlJ5VSwfghc", (CharSequence) "K,#TlJ5VSwfghc");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.remove("{}", "org.apache.commons.lang3.RegExUtils");
      assertEquals("{}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "\\u";
      String string3 = StringUtils.overlay("{}", string2, 0, (-113));
      assertEquals("\\u{}", string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits("p{InCombiningDiacriticalMarks}+");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-113);
      String string5 = StringUtils.join(longArray0, '', (-1), (-113));
      assertEquals("", string5);
      assertArrayEquals(new long[] {(-113L)}, longArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(1, longArray0.length);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      String string6 = StringUtils.join(charArray0, '3', 0, (-1659));
      assertEquals("", string6);
      assertArrayEquals(new char[] {'', '', ''}, charArray0);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String string0 = StringUtils.rightPad("f", 0, "f");
      assertEquals("f", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay((String) null, "$k~/nT", (-1732), 32);
      assertNull(string1);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      char[] charArray0 = new char[0];
      Stream<CharBuffer> stream0 = stack0.parallelStream();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stream0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = stack0.add(charBuffer0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(stack0.contains(charBuffer0));
      assertEquals(0, charArray0.length);
      
      Iterator<CharBuffer> iterator0 = stack0.iterator();
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.contains(charBuffer0));
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, (String) null);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.contains(charBuffer0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("()*I5 Fn+eVF!>'zn", "BB'BmBFBfBLBGBz");
      assertEquals("()*I5 Fn+eVF!>'zn", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.toRootLowerCase("$k~/nT");
      assertEquals("$k~/nt", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars(",z b7D@JH!>)MD3m^dd", ",N$hUd`+#!74?)", "Object varargs must not be null");
      assertEquals("Oz baD@JHr>sMD3m^tt", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isNotBlank("f");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ",N$hUd`+#!74?)";
      String string6 = StringUtils.join(objectArray0, "()*I5 Fn+eVF!>'zn", 1937, 2);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals(1, objectArray0.length);
      
      String string7 = StringUtils.stripToNull("-0gUwFKp7");
      assertEquals("-0gUwFKp7", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      String string8 = StringUtils.stripEnd("-0gUwFKp7", (String) null);
      assertEquals("-0gUwFKp7", string8);
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      
      String string9 = StringUtils.uncapitalize("offset cannot be negative");
      assertEquals("offset cannot be negative", string9);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[16];
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(16, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("{}", stringArray0);
      assertFalse(boolean0);
      assertEquals(16, stringArray0.length);
      
      String string1 = StringUtils.capitalize("{}");
      assertEquals("{}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.joinWith("Minimum abbreviation width with offset is %d", stringArray0);
      assertEquals("Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(16, stringArray0.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d", (CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(16, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("{}");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.wrapIfMissing((String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.substringAfter("\"Z", 2271);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.compare((String) null, "jz=I]TU(~_Y", false);
      assertEquals(1, int0);
      
      String string2 = StringUtils.substringBefore("d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}", "<L7H^-(xBtqd");
      assertEquals("d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase((String) null, "uet", "TC");
      assertNull(string3);
      
      String string4 = StringUtils.replaceFirst((String) null, "d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}", "d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}d}");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
      
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string1);
      assertEquals(250, stringArray0.length);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      String string2 = StringUtils.substringAfter((String) null, "org.apache.commons.lang3.StringUtils");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(250, stringArray0.length);
      
      boolean boolean2 = StringUtils.isNumericSpace("org.apache.commons.lang3.StringUtils");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      byte[] byteArray0 = StringUtils.getBytes("SFY^tQYWbpH", (String) null);
      assertNotNull(byteArray0);
      assertEquals(11, byteArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: ", 1916, 106);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("R=3D0WS!/*xC :+Hn", ", Length: ");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 106;
      doubleArray0[1] = (double) 53;
      int int0 = StringUtils.indexOfAny((CharSequence) ", Length: ", (CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(4, stringArray0.length);
      
      String string1 = StringUtils.truncate("R=3D0WS!/*xC :+Hn", 1735);
      assertEquals("R=3D0WS!/*xC :+Hn", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "R=3D0WS!/*xC :+Hn", (CharSequence[]) stringArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(4, stringArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "R=3D0WS!/*xC :+Hn", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'k'}, charArray0);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = StringUtils.replacePattern((String) null, "5t_s:?i &g`z.SMinimum abbreviation width is %d", "C0C^2<vnB");
      assertNull(string0);
      
      String string1 = StringUtils.unwrap("", "object");
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.rightPad("S6", 241, 'l');
      assertEquals("S6lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      charArray0[1] = ':';
      charArray0[2] = ':';
      String string3 = StringUtils.join(charArray0, 'n', 5, (-1718));
      assertEquals("", string3);
      assertArrayEquals(new char[] {'l', ':', ':', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(9, charArray0.length);
      
      boolean boolean1 = StringUtils.isEmpty("S6");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.join((Object[]) null, 'l');
      assertNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string5 = StringUtils.right("C0C^2<vnB", 5);
      assertEquals("2<vnB", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      charSequenceArray0[0] = (CharSequence) "2<vnB";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      String string6 = StringUtils.uncapitalize("2<vnB");
      assertEquals("2<vnB", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      
      charSequenceArray0[3] = (CharSequence) "2<vnB";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) "5t_s:?i &g`z.SMinimum abbreviation width is %d";
      int int0 = StringUtils.indexOfAny((CharSequence) "S6lllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = StringUtils.leftPad("f", 22, "f");
      assertEquals("ffffffffffffffffffffff", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("ffffffffffffffffffffff");
      assertEquals("fffffffffffffffffffff", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle((String) null, "j=e", 0);
      assertNull(string2);
      
      String string3 = StringUtils.chomp("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfBlank("j=e", supplier0);
      assertEquals("j=e", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int[] intArray0 = StringUtils.toCodePoints("j=e");
      assertArrayEquals(new int[] {106, 61, 101}, intArray0);
      assertNotNull(intArray0);
      assertEquals(3, intArray0.length);
      
      boolean boolean0 = StringUtils.isNotEmpty("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertTrue(boolean0);
      
      String string5 = StringUtils.rotate("f", 3);
      assertEquals("f", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.removeStart("&;5t3l2t'KZZ``8k$v", "&;5t3l2t'KZZ``8k$v");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.uncapitalize("j=e");
      assertEquals("j=e", string7);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1248.1);
      int int0 = StringUtils.compare("Local", "Local", false);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.substringsBetween(";+On:8E>sXhMU\"", "U&:HI+VH}Ib[Ai-!=+", ";;@$o0:");
      assertNull(stringArray0);
      
      String string0 = StringUtils.stripToEmpty("'(B/4");
      assertEquals("'(B/4", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOf((CharSequence) "'(B/4", (-865));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = StringUtils.rightPad("Ax", (-1137), "");
      assertEquals("Ax", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.deleteWhitespace(":Q<-./&2WQ)G=");
      assertEquals(":Q<-./&2WQ)G=", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToNull("q9");
      assertEquals("q9", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '~';
      charArray0[1] = '~';
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "C6_<";
      stringArray0[5] = null;
      stringArray0[6] = "C6_<";
      stringArray0[7] = null;
      String string0 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string0);
      assertEquals(8, stringArray0.length);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("C6_<"));
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = StringUtils.startsWithAny(string0, stringArray0);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      boolean boolean1 = StringUtils.isNumericSpace(string0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, stringArray0.length);
      
      try { 
        StringUtils.getBytes("nRNBh]m-)_6o&C[AHl", "Array element ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "The String must not be empty";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      short[] shortArray0 = new short[19];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-12);
      shortArray0[3] = (short) (-12);
      String string0 = StringUtils.join(shortArray0, '!', (-145), (-2034458190));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(19, shortArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("a#4>gF|4s3S5+d>\"l0", (String) null, (int) (short)0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.upperCase("a#4>gF|4s3S5+d>\"l0");
      assertEquals("A#4>GF|4S3S5+D>\"L0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("The String must not be empty", "CGgBjN#m*", "CGgBjN#m*");
      assertEquals("The String must not be empty", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("0F1u", '0');
      assertEquals("0F1u", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.right((String) null, (short)0);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "z");
      assertNull(string0);
      
      StringUtils.repeat('x', 898);
      StringUtils.right((String) null, 10);
      StringUtils.substring("8!$))\u0006[^(9^T?", (-334));
      StringUtils.join((short[]) null, 'x', 1097, 3713);
      StringUtils.ordinalIndexOf("d}", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", 127);
      StringUtils.stripToNull("xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx");
      StringUtils.difference("fBqvE^T=l9p", "d}");
      StringUtils.trimToNull("8!$))\u0006[^(9^T?");
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 1097;
      longArray0[1] = (long) 3713;
      longArray0[2] = (long) 243;
      longArray0[3] = (long) 127;
      StringUtils.join(longArray0, '&', 64, 13);
      StringUtils.chomp("z");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.replaceChars("2u=`U%-Q`FJ}", "2u=`U%-Q`FJ}", "b");
      assertEquals("b", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "b", (-1076), (-3411));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("2u=`U%-Q`FJ}");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "b", "b");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isMixedCase("b");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = StringUtils.chomp("qf#uC-t8X?ZFt$WSa");
      assertEquals("qf#uC-t8X?ZFt$WSa", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[5] = '.';
      String string1 = StringUtils.join(charArray0, '\u0000', 2715, 2715);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '.', '\u0000'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, charArray0.length);
      
      String string2 = StringUtils.difference((String) null, "oUpYT@1");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("k9%OU~Qe|;%", 2715, 'l');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, 2715);
      assertNull(string4);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "qf#uC-t8X?ZFt$WSa";
      stringArray0[1] = null;
      stringArray0[2] = "k9%OU~Qe|;%";
      stringArray0[3] = null;
      stringArray0[4] = "qf#uC-t8X?ZFt$WSa";
      stringArray0[5] = "qf#uC-t8X?ZFt$WSa";
      stringArray0[6] = "qf#uC-t8X?ZFt$WSa";
      stringArray0[7] = null;
      stringArray0[8] = "";
      String string5 = StringUtils.replaceEachRepeatedly("gi QV", stringArray0, stringArray0);
      assertEquals("gi QV", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(9, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "gi QV", (CharSequence) "oUpYT@1", 123);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(string4);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("qf#uC-t8X?ZFt$WSa");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.capitalize("k9%OU~Qe|;%");
      assertEquals("K9%OU~Qe|;%", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.substringBetween("k9%OU~Qe|;%", "object", "Strings must not be null");
      assertNull(string7);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "object", charArray0);
      assertEquals((-1), int1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '.', '\u0000'}, charArray0);
      assertTrue(int1 == int0);
      assertEquals(7, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.replaceChars("\n", "\n", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("\n");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\n");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "\n";
      charSequenceArray0[4] = (CharSequence) "\n";
      String string2 = StringUtils.substringAfter("", ">#~8VH{!zN");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.compare(", Length: 0", "&qA_p", true);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.remove("\n", "\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trim("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("", "}%`-4d-/^u");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("", "}%`-4d-/^u");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.chop("f-G_sk-c$O");
      assertEquals("f-G_sk-c$", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("E^T=l9p", 0);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "Arguments cannot both be null";
      // Undeclared exception!
      StringUtils.repeat("Arguments cannot both be null", 65536);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("l 'H;VR", (String) null);
      assertEquals("l 'H;VR", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("l 'H;VR", "l 'H;VR");
      assertNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("l 'H;VR");
      assertEquals("l 'h;vr", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("l 'H;VR"));
      assertNotNull(linkedList0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-39);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)103;
      byteArray0[4] = (byte) (-57);
      byteArray0[5] = (byte)13;
      byteArray0[6] = (byte)6;
      String string3 = StringUtils.join(byteArray0, '0', (int) (byte) (-57), (int) (byte) (-57));
      assertEquals("", string3);
      assertArrayEquals(new byte[] {(byte) (-39), (byte) (-119), (byte)108, (byte)103, (byte) (-57), (byte)13, (byte)6}, byteArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(7, byteArray0.length);
      
      String string4 = StringUtils.truncate("W$^gGp.~0D!CJD", 0);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "l 'H;VR", (int) (byte) (-57));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.trimToNull("0vbp1o");
      assertEquals("0vbp1o", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.wrapIfMissing("l 'H;VR", (String) null);
      assertEquals("l 'H;VR", string6);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.replaceChars("\n", "\n", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("\n");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\n");
      assertFalse(boolean0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      boolean boolean1 = StringUtils.endsWithAny("", stringArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(250, stringArray0.length);
      
      String string2 = StringUtils.strip("\n");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = "2..9H?&R\"2^Y";
      String string4 = StringUtils.stripEnd("2..9H?&R\"2^Y", "j0I65");
      assertEquals("2..9H?&R\"2^Y", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.repeat("'1&v0';$fpk{", 1);
      assertEquals("'1&v0';$fpk{", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) 1;
      floatArray0[8] = (float) 1;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'h', 4, 97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(76);
      assertEquals(76, (int)integer0);
      assertNotNull(integer0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(integer0));
      assertNotNull(arrayList0);
      
      Integer integer1 = new Integer(273);
      assertEquals(273, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean1 = arrayList0.add(integer0);
      assertTrue(boolean1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(integer1));
      assertTrue(arrayList0.contains(76));
      
      boolean boolean2 = arrayList0.add(integer1);
      assertTrue(boolean2);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(76));
      
      boolean boolean3 = arrayList0.add(integer0);
      assertTrue(boolean3);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(76));
      
      Integer integer2 = new Integer(76);
      assertEquals(76, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      String string0 = StringUtils.repeat("^=SXmV2bxIT=]GiCorg.apache.commons.lang3.ArrayUtils", 1);
      assertEquals("^=SXmV2bxIT=]GiCorg.apache.commons.lang3.ArrayUtils", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("ksZ", 1);
      assertEquals("ksZ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1248.1);
      doubleArray0[1] = (-1248.1);
      doubleArray0[2] = 1.0;
      doubleArray0[1] = 838.233550116;
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 3.0;
      String string0 = StringUtils.join(doubleArray0, '4');
      assertEquals("-1248.14838.23355011641.040.04-1.043.0", string0);
      assertArrayEquals(new double[] {(-1248.1), 838.233550116, 1.0, 0.0, (-1.0), 3.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals(6, doubleArray0.length);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = new Integer((-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[2];
      doubleArray0[2] = (double) '4';
      charArray0[1] = '4';
      int int2 = StringUtils.indexOfAny((CharSequence) "-1248.14838.23355011641.040.04-1.043.0", charArray0);
      assertEquals(3, int2);
      assertArrayEquals(new char[] {'\u0000', '4'}, charArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, charArray0.length);
      
      String string1 = StringUtils.rightPad("-1248.14838.23355011641.040.04-1.043.0", 4, "-1248.14838.23355011641.040.04-1.043.0");
      assertEquals("-1248.14838.23355011641.040.04-1.043.0", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll(" is not in the range '0' - '9'", "U6fr,N$hUd`+#!74?)");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 16
         // U6fr,N$hUd`+#!74?)
         //                 ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("Cannot clone Cloneable type ");
      assertEquals("Cannot clone Cloneable type", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Cannot clone Cloneable type", (CharSequence) "Cannot clone Cloneable type ");
      assertEquals("Cannot clone Cloneable type", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      charSequenceArray0[0] = (CharSequence) "Cannot clone Cloneable type";
      charSequenceArray0[1] = (CharSequence) "Cannot clone Cloneable type ";
      charSequenceArray0[2] = (CharSequence) "Cannot clone Cloneable type";
      charSequenceArray0[3] = (CharSequence) "Cannot clone Cloneable type ";
      boolean boolean0 = StringUtils.startsWithAny("Cannot clone Cloneable type ", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Cannot clone Cloneable type", (CharSequence) "Cannot clone Cloneable type", (-440));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.rotate("Cannot clone Cloneable type ", (-440));
      assertEquals("le type Cannot clone Cloneab", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removePattern("WH", "le type Cannot clone Cloneab");
      assertEquals("WH", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(string2);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertNotNull(locale1);
      
      int int1 = StringUtils.getFuzzyDistance(charSequenceArray0[2], "WH", locale0);
      assertEquals(0, int1);
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(int1 == int0);
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(4, charSequenceArray0.length);
      
      int int2 = StringUtils.compare((String) null, "Cannot clone Cloneable type", true);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "WH";
      stringArray0[1] = "WH";
      stringArray0[2] = "Cloneable type ";
      stringArray0[3] = "WH";
      stringArray0[4] = "WH";
      stringArray0[5] = "Cannot clone Cloneable type";
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("WH", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(76);
      assertEquals(76, (int)integer0);
      assertNotNull(integer0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(76));
      assertNotNull(arrayList0);
      
      Integer integer1 = new Integer(259);
      assertEquals(259, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean1 = arrayList0.add(integer0);
      assertTrue(boolean1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains(259));
      assertTrue(arrayList0.contains(76));
      
      boolean boolean2 = arrayList0.add(integer1);
      assertTrue(boolean2);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(259));
      
      boolean boolean3 = arrayList0.add(integer1);
      assertTrue(boolean3);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertTrue(arrayList0.contains(259));
      
      boolean boolean4 = arrayList0.add(integer0);
      assertTrue(boolean4);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(arrayList0.isEmpty());
      assertEquals(4, arrayList0.size());
      assertTrue(arrayList0.contains(259));
      
      Integer integer2 = new Integer(76);
      assertEquals(76, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertNotNull(integer2);
      
      boolean boolean5 = arrayList0.add(integer2);
      assertTrue(boolean5);
      assertFalse(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(arrayList0.isEmpty());
      assertEquals(5, arrayList0.size());
      assertTrue(arrayList0.contains(integer1));
      
      String string0 = StringUtils.join((Iterable<?>) arrayList0, 'V');
      assertEquals("76V259V259V76V76", string0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(5, arrayList0.size());
      assertTrue(arrayList0.contains(integer1));
      assertNotNull(string0);
      
      String string1 = StringUtils.mid((String) null, 'V', 259);
      assertNull(string1);
      
      String string2 = StringUtils.leftPad((String) null, 3);
      assertNull(string2);
      
      String string3 = StringUtils.replaceFirst((String) null, "E^T=l9p", "zj=e");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      String string0 = StringUtils.remove("\n", "\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trim("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join((long[]) null, 'a');
      assertNull(string2);
      
      double[] doubleArray0 = new double[0];
      String string3 = StringUtils.join(doubleArray0, 'U');
      assertEquals("", string3);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(0, doubleArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "}%`-4d-/^u");
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "}%`-4d-/^u", 85);
      assertEquals(10, int1);
      assertFalse(int1 == int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'U';
      charArray0[1] = '4';
      int int2 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {'U', '4'}, charArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, charArray0.length);
      
      String string4 = StringUtils.rightPad("Locala& }#6p\"o-t!5s:kmgLocala& }#6p\"o-t!5s:kmgLocala& }#6p\"o-t!5s:kmgLocala& }#6p\"o-t!5s:kmga& }#6p\"o-t!5s:kmg", 707, "");
      assertEquals("Locala& }#6p\"o-t!5s:kmgLocala& }#6p\"o-t!5s:kmgLocala& }#6p\"o-t!5s:kmgLocala& }#6p\"o-t!5s:kmga& }#6p\"o-t!5s:kmgstring4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeAll("", "I&xgf");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("\"DT", (-860));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = StringUtils.stripToNull("T~DxJF7+0bGurQ:q&");
      assertEquals("T~DxJF7+0bGurQ:q&", string0);
      assertNotNull(string0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      String string1 = StringUtils.removeStartIgnoreCase("T~DxJF7+0bGurQ:q&", "T~DxJF7+0bGurQ:q&");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "T~DxJF7+0bGurQ:q&", (CharSequence) "T~DxJF7+0bGurQ:q&", 4);
      assertEquals(0, int0);
      
      String string2 = StringUtils.chop("org.apache.commons.lang3.CharUtils");
      assertEquals("org.apache.commons.lang3.CharUtil", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace("T~DxJF7+0bGurQ:q&");
      assertEquals("T~DxJF7+0bGurQ:q&", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.substringAfter("{}/D", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replacePattern("", "Cannot store ", "5t_s:?i &g`z.SMinimum abbreviation width is %d");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("5t_s:?i &g`z.SMinimum abbreviation width is %d", "5t_s:?i &g`z.SMinimum abbreviation width is %d");
      assertEquals("5t_s:?i &g`z.SMinimum abbreviation width is %d", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsWhitespace("Cannot store ");
      assertTrue(boolean0);
      
      String string3 = StringUtils.rightPad("", 241, ':');
      assertEquals(":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'b';
      charArray0[1] = ':';
      String string4 = StringUtils.join(charArray0, 'N', 241, (-2105));
      assertEquals("", string4);
      assertArrayEquals(new char[] {'b', ':'}, charArray0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(2, charArray0.length);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripStart("|(E$!sR?*[iL", "|(E$!sR?*[iL");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.rotate("org.apache.commons.lang3.LocaleUtils", 6);
      assertEquals("eUtilsorg.apache.commons.lang3.Local", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("null/empty items");
      assertEquals("Null/empty items", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "Null/empty items");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("eUtilsorg.apache.commons.lang3.Local", "T/St4", 0);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "T/St4", (CharSequence) null);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String string4 = StringUtils.repeat((String) null, "|(E$!sR?*[iL", (-1));
      assertNull(string4);
      
      boolean boolean2 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(6));
      assertNotNull(arrayDeque0);
      
      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(6));
      assertNotNull(iterator0);
      
      String string5 = StringUtils.join(iterator0, '&');
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(6));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.uncapitalize("6\"T");
      assertEquals("6\"T", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate((String) null, 76);
      assertNull(string2);
      
      String string3 = StringUtils.capitalize("org.apache.commons.lang3.LocaleUtils");
      assertEquals("Org.apache.commons.lang3.LocaleUtils", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.StringUtils", "6\"T");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Org.apache.commons.lang3.LocaleUtils", "Org.apache.commons.lang3.LocaleUtils", Integer.MIN_VALUE);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(37, stringArray1.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "_", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.repeat("^-`a:[Z", "org.apache.commons.lang3.StringUtils", (-1));
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "l 'H;VR";
      charSequenceArray0[3] = (CharSequence) "l 'H;VR";
      String string1 = StringUtils.leftPad("\n", 2048, "l 'H;VR");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast(string1, "l 'H;VR");
      assertEquals("l '\n", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("PI", "The character ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("comparator", "fBqvE^T=l9p", (-3208));
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      float[] floatArray0 = new float[3];
      String string3 = StringUtils.join(floatArray0, 'o', 2048, 4);
      assertEquals("", string3);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(3, floatArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "l 'H;V\n", (CharSequence) "comparator");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("PI", "\n", (-193));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray1, "Supplied value must be a valid byte literal between -32768 and 32767: [", 4, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripToNull("T~DxJF7+0bGurQ:q&");
      assertEquals("T~DxJF7+0bGurQ:q&", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("T~DxJF7+0bGurQ:q&", (-172), '\"');
      assertEquals("T~DxJF7+0bGurQ:q&", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "T~DxJF7+0bGurQ:q&", (CharSequence) "T~DxJF7+0bGurQ:q&", 160);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.trimToNull("+e-");
      assertEquals("+e-", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((List<?>) null, "+e-", (-1), 53);
      assertNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '&';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'&'}, charArray0);
      assertEquals(1, charArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "+e-";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "+e-";
      charSequenceArray0[4] = (CharSequence) "+e-";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "+e-";
      String string2 = StringUtils.removePattern("+e-", "-paDmi");
      assertEquals("+e-", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[7] = (CharSequence) "+e-";
      String string3 = StringUtils.substringBetween(" vs ", "y`:/@v", "-paDmi");
      assertNull(string3);
      
      charSequenceArray0[8] = (CharSequence) null;
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.replaceChars(";{'4fH0`W#8LG,", ')', '3');
      assertEquals(";{'4fH0`W#8LG,", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty(";{'4fH0`W#8LG,");
      assertEquals(";{'4fH0`W#8LG,", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars(";{'4fH0`W#8LG,", '3', '3');
      assertEquals(";{'4fH0`W#8LG,", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace(";{'4fH0`W#8LG,");
      assertFalse(boolean0);
      
      String string3 = StringUtils.LF;
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("Supplied value must be a valid byte literal between -32768 and 32767: [", (int) ')');
      assertEquals("Supplied value must be a valid byte li...", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = "\\u";
      int int0 = StringUtils.indexOfAny((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", string5);
      assertEquals(1, int0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.replace(";{'4fH0`W#8LG,", ";{'4fH0`W#8LG,", "XXk.z7*=ns^&SoU", (-273));
      assertEquals("XXk.z7*=ns^&SoU", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)30;
      shortArray0[1] = (short)30;
      shortArray0[2] = (short)5;
      shortArray0[4] = (short) (-1051);
      shortArray0[5] = (short)4069;
      String string7 = StringUtils.join(shortArray0, '3');
      assertEquals("3033035303-105134069", string7);
      assertArrayEquals(new short[] {(short)30, (short)30, (short)5, (short)0, (short) (-1051), (short)4069}, shortArray0);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals(6, shortArray0.length);
      
      String string8 = StringUtils.normalizeSpace("\n");
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      
      String string9 = StringUtils.chomp("C2PF7M");
      assertEquals("C2PF7M", string9);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(string9);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "C2PF7M");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string10 = StringUtils.chomp((String) null, "C2PF7M");
      assertNull(string10);
      
      String string11 = StringUtils.getIfBlank("*=)gKgi0n9", (Supplier<String>) null);
      assertEquals("*=)gKgi0n9", string11);
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string1));
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("M Zq", "3R:");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "3R:", (CharSequence) "M Zq", 697);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString("M Zq", "");
      assertEquals("M Zq", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("", "ndex: ");
      assertNull(string2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)13;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "ndex: ";
      stringArray0[1] = null;
      stringArray0[2] = null;
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(3, stringArray0.length);
      
      String string4 = StringUtils.reverse("3R:");
      assertEquals(":R3", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.unwrap(" ", (String) null);
      assertEquals(" ", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate(":R3", (-2100), 707);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "The String must not be empty";
      short[] shortArray0 = new short[19];
      shortArray0[1] = (short)0;
      String string0 = StringUtils.join(shortArray0, '!', (-145), (-2034458190));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(19, shortArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("a#4`gF|4s3S5+d>\"l0", "a#4`gF|4s3S5+d>\"l0", (int) (short)0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.upperCase("a#4`gF|4s3S5+d>\"l0");
      assertEquals("A#4`GF|4S3S5+D>\"L0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("The String must not be empty", "CGgBjN#m*", "CGgBjN#m*");
      assertEquals("The String must not be empty", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("0F1u", '!');
      assertEquals("0F1u", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("A#4`GF|4S3S5+D>\"L0", (String) null);
      assertEquals("A#4`GF|4S3S5+D>\"L0", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(" Z", (-49));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) " Z", (-958));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(" Z", "");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("thq!#g}", 98, " Z");
      assertEquals("thq!#g} Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) " Z", (CharSequence) " Z");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(98);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(98, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(98, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(98, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(98, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(98, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(98, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(98, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(98, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(98, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      assertEquals(98, charBuffer1.remaining());
      assertEquals(98, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertEquals(98, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertNotNull(charBuffer1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "thq!#g}", charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'o'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charArray0.length);
      
      CharBuffer charBuffer2 = CharBuffer.wrap(charArray0);
      assertNotSame(charBuffer2, charBuffer0);
      assertNotSame(charBuffer2, charBuffer1);
      assertArrayEquals(new char[] {'o'}, charArray0);
      assertFalse(charBuffer2.equals((Object)charBuffer0));
      assertFalse(charBuffer2.equals((Object)charBuffer1));
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(1, charBuffer2.remaining());
      assertEquals(1, charBuffer2.capacity());
      assertEquals(0, charBuffer2.position());
      assertTrue(charBuffer2.hasArray());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals("o", charBuffer2.toString());
      assertEquals(1, charBuffer2.length());
      assertFalse(charBuffer2.isDirect());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(1, charBuffer2.limit());
      assertNotNull(charBuffer2);
      assertEquals(1, charArray0.length);
      
      CharBuffer charBuffer3 = charBuffer0.append((CharSequence) "thq!#g} Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z Z");
      assertSame(charBuffer0, charBuffer3);
      assertSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer0, charBuffer2);
      assertSame(charBuffer3, charBuffer0);
      assertNotSame(charBuffer3, charBuffer2);
      assertSame(charBuffer3, charBuffer1);
      assertFalse(charBuffer0.equals((Object)charBuffer2));
      assertFalse(charBuffer3.equals((Object)charBuffer2));
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(98, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(98, charBuffer0.limit());
      assertEquals(98, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer3.remaining());
      assertTrue(charBuffer3.hasArray());
      assertEquals(98, charBuffer3.capacity());
      assertFalse(charBuffer3.isReadOnly());
      assertEquals(0, charBuffer3.arrayOffset());
      assertEquals("", charBuffer3.toString());
      assertEquals(98, charBuffer3.limit());
      assertFalse(charBuffer3.isDirect());
      assertEquals(0, charBuffer3.length());
      assertFalse(charBuffer3.hasRemaining());
      assertEquals(98, charBuffer3.position());
      assertNotNull(charBuffer3);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) charBuffer0, 5899, 25);
      assertEquals((-1), int2);
      assertSame(charBuffer0, charBuffer3);
      assertSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer0, charBuffer2);
      assertFalse(charBuffer0.equals((Object)charBuffer2));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(98, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(98, charBuffer0.limit());
      assertEquals(98, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      
      String string2 = StringUtils.firstNonBlank((String[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.substring("89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0", 25, 6);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split((String) null, "v%DP$h^l!KJ3E9", (-509));
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.isWhitespace(" Z");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.join((Object[]) null, "+P:.20tA!]cmSI", 98, 25);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\r", (CharSequence) "\r");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isWhitespace("\r");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chomp("object");
      assertEquals("object", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("\r", '|');
      assertEquals("\r", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-86);
      byteArray0[2] = (byte)57;
      String string3 = StringUtils.join(byteArray0, 'r', 808, (int) (byte)57);
      assertEquals("", string3);
      assertArrayEquals(new byte[] {(byte)34, (byte) (-86), (byte)57}, byteArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("...");
      assertEquals("...", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("...", 9986);
      assertEquals("...", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripStart("o5", "o5");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("...");
      assertEquals("...", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      String string4 = StringUtils.join(booleanArray0, '`', 9986, 9986);
      assertEquals("", string4);
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(1, booleanArray0.length);
      
      Vector<Object> vector0 = new Vector<Object>(9986, 2844);
      assertEquals(0, vector0.size());
      assertEquals(9986, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains('`'));
      assertNotNull(vector0);
      
      Stream<Object> stream0 = vector0.stream();
      assertEquals(0, vector0.size());
      assertEquals(9986, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains('`'));
      assertNotNull(stream0);
      
      String string5 = StringUtils.join((List<?>) vector0, '`', 9986, 2844);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals(0, vector0.size());
      assertEquals(9986, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains('`'));
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceChars("...", "...", "...");
      assertEquals("...", string6);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.rightPad("", 9980);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "...";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "...";
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "", (CharSequence) string7);
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string6));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(charSequence0);
      
      charSequenceArray0[3] = charSequence0;
      charSequenceArray0[4] = (CharSequence) "...";
      charSequenceArray0[5] = (CharSequence) "...";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("\n", "\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.substringAfterLast("rh=*:AWO*|~~;r)aYt3", 9935);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.difference((String) null, "k9%OU~Qe|;%");
      assertEquals("k9%OU~Qe|;%", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("\n", 9935, 'e');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("Exception cloning Cloneable type ", 9935);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isMixedCase(string3);
      assertFalse(boolean2);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.StringUtils";
      String string1 = StringUtils.repeat("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", 722);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "Locala& }#6P\"O-t!5S:KmgLocala& }#6P\"O-t!5S:KmgLocala& }#6P\"O-t!5S:KmgLocala& }#6P\"O-t!5S:Kmga& }#6P\"O-t!5S:Kmg";
      String string3 = StringUtils.right("Locala& }#6P\"O-t!5S:KmgLocala& }#6P\"O-t!5S:KmgLocala& }#6P\"O-t!5S:KmgLocala& }#6P\"O-t!5S:Kmga& }#6P\"O-t!5S:Kmg", (-1820));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      // Undeclared exception!
      StringUtils.toCodePoints(string1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.replaceChars(";{'4fH0`W#8LG,", ')', '3');
      assertEquals(";{'4fH0`W#8LG,", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty(";{'4fH0`W#8LG,");
      assertEquals(";{'4fH0`W#8LG,", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ";{'4fH0`W#8LG,";
      String string2 = StringUtils.wrap("", '3');
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string3 = StringUtils.rightPad("_|Jt", 9, 'o');
      assertEquals("_|Jtooooo", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("_", 9);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.difference(";{'4fH0`W#8LG,", "i]");
      assertEquals("i]", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("", 2966, 'i');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.removeEnd("object", "...");
      assertEquals("object", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = '{';
      charArray0[3] = 'o';
      charArray0[4] = 'o';
      int int0 = StringUtils.indexOfAny((CharSequence) "object", charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'o', 'o', '{', 'o', 'o'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substring("", 77, 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.repeat("5f?C=Au7gQC_n", (String) null, 5);
      assertEquals("5f?C=Au7gQC_n5f?C=Au7gQC_n5f?C=Au7gQC_n5f?C=Au7gQC_n5f?C=Au7gQC_n", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("5f?C=Au7gQC_n5f?C=Au7gQC_n5f?C=Au7gQC_n5f?C=Au7gQC_n5f?C=Au7gQC_n", 109, 'h');
      assertEquals("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh5f?C=Au7gQC_n5f?C=Au7gQC_n5f?C=Au7gQC_n5f?C=Au7gQC_n5f?C=Au7gQC_n", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = StringUtils.rotate((String) null, (-1610612734));
      assertNull(string0);
      
      String string1 = StringUtils.capitalize("6`9&ePxZ|Vk*!'");
      assertEquals("6`9&ePxZ|Vk*!'", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split((String) null, "0!OlRdr|5T2K\"[\"M_");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("null/empty items", (String) null);
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens((String) null, "6`9&ePxZ|Vk*!'", (-1610612734));
      assertNull(stringArray2);
      
      String string2 = StringUtils.replaceEach("_", stringArray1, stringArray1);
      assertEquals("_", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2, stringArray1.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "0!OlRdr|5T2K\"[\"M_", (CharSequence) "0!OlRdr|5T2K\"[\"M_");
      assertEquals(0, int0);
      
      String string3 = StringUtils.repeat((String) null, "Comparator should not be null.", 37);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("[ 7@L", 108);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "[ 7@L", (CharSequence) "", 97);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2477;
      shortArray0[1] = (short)167;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)32;
      shortArray0[4] = (short)32;
      shortArray0[5] = (short)2289;
      shortArray0[6] = (short)32;
      String string0 = StringUtils.join(shortArray0, 'K');
      assertEquals("2477K167K0K32K32K2289K32", string0);
      assertArrayEquals(new short[] {(short)2477, (short)167, (short)0, (short)32, (short)32, (short)2289, (short)32}, shortArray0);
      assertNotNull(string0);
      assertEquals(7, shortArray0.length);
      
      String string1 = StringUtils.stripEnd("2477K167K0K32K32K2289K32", "P");
      assertEquals("2477K167K0K32K32K2289K32", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("2477K167K0K32K32K2289K32", "2477K167K0K32K32K2289K32");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "P", (CharSequence) "2477K167K0K32K32K2289K32");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.toRootLowerCase(", '");
      assertEquals(", '", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.removePattern("", "Hg");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "2477K167K0K32K32K2289K32", (int) (short)167);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.replace("CaRSi", "vk4bt[d]<@", "2477K167K0K32K32K2289K32");
      assertEquals("CaRSi", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfterLast("[ 7@L", (int) (short)32);
      assertEquals("7@L", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.isNotEmpty("7@L");
      assertTrue(boolean0);
      
      String string7 = StringUtils.right("X97P!zkAW-[(TCDft", (-1));
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertNotNull(string7);
      
      String string8 = StringUtils.substringAfterLast("/*|\"f'%:_H2'Object varargs must not be null", "LqS;b^>!PbXGyzXrr~");
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string4));
      assertNotNull(string8);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "P", (CharSequence) "", 743);
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.stripEnd(".E", ".E");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", 350);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)1023;
      shortArray0[2] = (short)15;
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
      
      String string0 = StringUtils.joinWith((String) null, charSequenceArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.difference(";+On:8E>sXhMU\"", (String) null);
      assertEquals(";+On:8E>sXhMU\"", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad((String) null, (int) (short)15, 'i');
      assertNull(string2);
      
      String string3 = StringUtils.rightPad("{}", 32);
      assertEquals("{}                              ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean2 = StringUtils.isAlphanumeric(";+On:8E>sXhMU\"");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "");
      assertNull(stringArray0);
      
      String string4 = StringUtils.deleteWhitespace("\n");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'i';
      charArray0[1] = 'i';
      charArray0[2] = 'i';
      charArray0[3] = 'i';
      charArray0[4] = 'i';
      charArray0[5] = 'i';
      charArray0[6] = 'i';
      charArray0[7] = 'i';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i'}, charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(8, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(8, charBuffer0.remaining());
      assertEquals("iiiiiiii", charBuffer0.toString());
      assertNotNull(charBuffer0);
      assertEquals(8, charArray0.length);
      
      CharBuffer charBuffer1 = charBuffer0.duplicate();
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i'}, charArray0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(8, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(8, charBuffer0.remaining());
      assertEquals("iiiiiiii", charBuffer0.toString());
      assertEquals(8, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.position());
      assertEquals(8, charBuffer1.length());
      assertEquals(8, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals("iiiiiiii", charBuffer1.toString());
      assertEquals(8, charBuffer1.capacity());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertNotNull(charBuffer1);
      assertEquals(8, charArray0.length);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "LQt", (CharSequence) charBuffer0);
      assertEquals(0, int2);
      assertNotSame(charBuffer0, charBuffer1);
      assertArrayEquals(new char[] {'i', 'i', 'i', 'i', 'i', 'i', 'i', 'i'}, charArray0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(8, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(8, charBuffer0.remaining());
      assertEquals("iiiiiiii", charBuffer0.toString());
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripToNull("T~DxJF7+0bGurQ:q&");
      assertEquals("T~DxJF7+0bGurQ:q&", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("T~DxJF7+0bGurQ:q&");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Integer integer0 = new Integer(821);
      assertEquals(821, (int)integer0);
      assertNotNull(integer0);
      
      String string2 = StringUtils.abbreviate("T~DxJF7+0bGurQ:q&", 821, (int) integer0);
      assertEquals("T~DxJF7+0bGurQ:q&", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits(" ");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte) (-101);
      String string4 = StringUtils.join(byteArray0, 'q', (int) (byte) (-1), Integer.MAX_VALUE);
      assertEquals("", string4);
      assertArrayEquals(new byte[] {(byte)20, (byte) (-12), (byte) (-1), (byte)4, (byte) (-101)}, byteArray0);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(5, byteArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("", (CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Integer integer0 = new Integer(14);
      assertEquals(14, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = arrayList0.add((Object) integer0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(14));
      
      String string0 = StringUtils.join((List<?>) arrayList0, "", (-3160), (-3160));
      assertEquals("", string0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(""));
      assertTrue(arrayList0.contains(14));
      assertNotNull(string0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(linkedHashSet0);
      
      Iterator<String> iterator0 = linkedHashSet0.iterator();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(iterator0);
      
      boolean boolean1 = linkedHashSet0.add("1DE]G2E{![PBiI3(]m");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("1DE]G2E{![PBiI3(]m"));
      assertFalse(linkedHashSet0.contains(""));
      
      boolean boolean2 = linkedHashSet0.add("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(""));
      
      String string1 = StringUtils.join(iterator0, 'c');
      assertEquals("", string1);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains(""));
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("", (-3160));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "", (CharSequence) "1DE]G2E{![PBiI3(]m");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.uncapitalize("6\"T");
      assertEquals("6\"T", string1);
      assertNotNull(string1);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[2] = (-1L);
      longArray0[3] = (-182L);
      longArray0[4] = (-1L);
      longArray0[5] = (-182L);
      longArray0[6] = (-1L);
      longArray0[7] = 1L;
      String string2 = StringUtils.join(longArray0, '-');
      assertEquals("0-0--1--182--1--182--1-1", string2);
      assertArrayEquals(new long[] {0L, 0L, (-1L), (-182L), (-1L), (-182L), (-1L), 1L}, longArray0);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(8, longArray0.length);
      
      int int0 = StringUtils.compare((String) null, "jz=I]TU(~_Y", false);
      assertEquals(1, int0);
      
      String string3 = StringUtils.rotate(":", 2575);
      assertEquals(":", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("X97P!zkAW-[(TCDft", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.center("Cannot store ", 14, '_');
      assertEquals("Cannot store _", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Cannot store _", (CharSequence) "X97P!zkAW-[(TCDft");
      assertEquals(18, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "Cannot store _", 'E');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.replaceIgnoreCase("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", "A$eD%hR");
      assertEquals("A$eD%hR", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.truncate("*?{AQK>|cN>?gmb:Tj", 18, 160);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[16];
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(16, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("{}", stringArray0);
      assertFalse(boolean0);
      assertEquals(16, stringArray0.length);
      
      String string1 = StringUtils.capitalize("{}");
      assertEquals("{}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.joinWith("Minimum abbreviation width with offset is %d", stringArray0);
      assertEquals("Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(16, stringArray0.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d", (CharSequence[]) stringArray0);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(16, stringArray0.length);
      
      String string3 = StringUtils.center("h?$OqcX|/\"Cn:QI6", 47, "Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d");
      assertEquals("Minimum abbrevih?$OqcX|/\"Cn:QI6Minimum abbrevi", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "{}");
      assertEquals(2, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "wia";
      String string1 = StringUtils.stripEnd("wia", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("wi", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      boolean boolean0 = StringUtils.isNotEmpty("wia");
      assertTrue(boolean0);
      
      String string2 = StringUtils.leftPad("wia", (int) 'M', "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is thwia", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = "8g?J+.zL}";
      String string4 = "e`A";
      try { 
        StringUtils.getBytes("Aborting to protect against StackOverflowError - output of one loop is the input of another", "OZ0^s");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("\n", "\n");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "\n", 'f');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isAlpha("\n");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.stripStart("\n", "\n");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertFalse(treeSet0.contains(int0));
      assertNotNull(treeSet0);
      
      Integer integer0 = new Integer(105);
      assertEquals(105, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      boolean boolean2 = treeSet0.add(integer0);
      assertTrue(boolean2);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(treeSet0.contains(105));
      assertFalse(treeSet0.contains(int0));
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>((SortedSet<? extends Integer>) treeSet0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(treeSet0.contains(105));
      assertFalse(treeSet0.contains(int0));
      assertTrue(priorityQueue0.contains(105));
      assertFalse(priorityQueue0.contains(int0));
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.chop("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace("gpYDH^~'");
      assertEquals("gpYDH^~'", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string4 = StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another", 1453, 'D');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      charSequenceArray0[0] = (CharSequence) string4;
      charSequenceArray0[2] = (CharSequence) "gpYDH^~'";
      charSequenceArray0[3] = (CharSequence) "nCombiningDiacriticalMarks}+";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "\n";
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "nCombiningDiacriticalMarks}+", charSequenceArray0[4]);
      assertEquals(28, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(8, charSequenceArray0.length);
      
      int int3 = StringUtils.indexOfIgnoreCase(charSequenceArray0[6], (CharSequence) null, (-855));
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(8, charSequenceArray0.length);
      
      String string5 = StringUtils.replaceChars((String) null, "p{InCombiningDiacriticalMarks}+", "3H7F=");
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      String string0 = StringUtils.join(booleanArray0, 'g');
      assertEquals("", string0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(string0);
      assertEquals(0, booleanArray0.length);
      
      String string1 = StringUtils.abbreviate("", 16);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase(" ");
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.right(" ", 169);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'g', 'g'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 16, 16);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.difference("", "");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) " ";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean1 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string5 = StringUtils.truncate(">M", 169);
      assertEquals(">M", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOf((CharSequence) " ", charSequenceArray0[4], 169);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 169;
      doubleArray0[2] = (double) (-1);
      String string6 = StringUtils.join(doubleArray0, 'z');
      assertEquals("1.0z169.0z-1.0", string6);
      assertArrayEquals(new double[] {1.0, 169.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals(3, doubleArray0.length);
      
      String string7 = StringUtils.leftPad(" ", 55);
      assertEquals("                                                       ", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      String string8 = StringUtils.substringAfter("Array and element cannot both be null", 16);
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.joinWith("n", stringArray0);
      assertEquals("aanabnaenafnaknamnannarnasnavnaynaznbanbenbgnbhnbinbmnbnnbonbrnbsncancenchnconcrncsncuncvncyndandendvndzneenelnenneonesnetneunfanffnfinfjnfonfrnfyngangdnglngnngungvnhanhenhinhonhrnhtnhunhynhznianidnienigniinikninnionisnitniuniwnjanjinjvnkankgnkinkjnkknklnkmnknnkonkrnksnkunkvnkwnkynlanlbnlgnlinlnnlonltnlunlvnmgnmhnminmknmlnmnnmonmrnmsnmtnmynnannbnndnnenngnnlnnnnnonnrnnvnnynocnojnomnornosnpanpinplnpsnptnqunrmnrnnronrunrwnsanscnsdnsensgnsinsknslnsmnsnnsonsqnsrnssnstnsunsvnswntantentgnthntintkntlntnntontrntsnttntwntynugnuknurnuznvenvinvonwanwonxhnyinyonzanzhnzu", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(188, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("aanabnaenafnaknamnannarnasnavnaynaznbanbenbgnbhnbinbmnbnnbonbrnbsncancenchnconcrncsncuncvncyndandendvndzneenelnenneonesnetneunfanffnfinfjnfonfrnfyngangdnglngnngungvnhanhenhinhonhrnhtnhunhynhznianidnienigniinikninnionisnitniuniwnjanjinjvnkankgnkinkjnkknklnkmnknnkonkrnksnkunkvnkwnkynlanlbnlgnlinlnnlonltnlunlvnmgnmhnminmknmlnmnnmonmrnmsnmtnmynnannbnndnnenngnnlnnnnnonnrnnvnnynocnojnomnornosnpanpinplnpsnptnqunrmnrnnronrunrwnsanscnsdnsensgnsinsknslnsmnsnnsonsqnsrnssnstnsunsvnswntantentgnthntintkntlntnntontrntsnttntwntynugnuknurnuznvenvinvonwanwonxhnyinyonzanzhnzu", stringArray0);
      assertFalse(boolean0);
      assertEquals(188, stringArray0.length);
      
      String string2 = StringUtils.upperCase("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("n", (int) 'K');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.difference("", "n5&%K*/Xg^y8D4");
      assertEquals("n5&%K*/Xg^y8D4", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("", (int) 'K', 'i');
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("n");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string6 = StringUtils.reverseDelimited("", 'K');
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String[] stringArray2 = new String[3];
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = "n";
      String string7 = StringUtils.defaultString("Threshold must not be negative");
      assertEquals("Threshold must not be negative", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      int int0 = StringUtils.length("n5&%K*/Xg^y8D4");
      assertEquals(14, int0);
      
      String string8 = StringUtils.replaceEach("!$*SE>tzmoc/7", stringArray0, (String[]) null);
      assertEquals("!$*SE>tzmoc/7", string8);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
      assertEquals(188, stringArray0.length);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens("DD9_]TF");
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertNotNull(stringArray3);
      assertEquals(1, stringArray3.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string1 = StringUtils.getIfBlank("\n", supplier0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String string0 = StringUtils.stripAccents("ang3.LocaleUtilsorg.apache.commons.l");
      assertEquals("ang3.LocaleUtilsorg.apache.commons.l", string0);
      assertNotNull(string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("ang3.LocaleUtilsorg.apache.commons.l"));
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("ang3.LocaleUtilsorg.apache.commons.l"));
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, "'iQ-~");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("ang3.LocaleUtilsorg.apache.commons.l"));
      assertNotNull(string1);
      
      String string2 = StringUtils.join(iterator0, 'y');
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("ang3.LocaleUtilsorg.apache.commons.l"));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "ang3.LocaleUtilsorg.apache.commons.l", (CharSequence) "'iQ-~");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "'iQ-~";
      String string3 = StringUtils.abbreviate("ang3.LocaleUtilsorg.apache.commons.l", "", 10, 10);
      assertEquals("ang3.Local", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      charSequenceArray0[1] = (CharSequence) "ang3.Local";
      charSequenceArray0[2] = (CharSequence) "'iQ-~";
      charSequenceArray0[3] = (CharSequence) "ang3.LocaleUtilsorg.apache.commons.l";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "ang3.LocaleUtilsorg.apache.commons.l";
      charSequenceArray0[8] = (CharSequence) "ang3.LocaleUtilsorg.apache.commons.l";
      boolean boolean1 = StringUtils.equalsAny("", charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(9, charSequenceArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints("ang3.Local");
      assertArrayEquals(new int[] {97, 110, 103, 51, 46, 76, 111, 99, 97, 108}, intArray0);
      assertNotNull(intArray0);
      assertEquals(10, intArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "ang3.LocaleUtilsorg.apache.commons.l", (CharSequence) "", 10);
      assertEquals(10, int0);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'e', 10, 1920);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = "Minimum abbreviation width is %d";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Minimum abbreviation width is %d";
      stringArray0[1] = "Minimum abbreviation width is %d";
      String string1 = StringUtils.replaceEach("Minimum abbreviation width is %d", stringArray0, stringArray0);
      assertEquals("Minimum abbreviation width is %d", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.stripEnd("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Minimum abbreviation width is %d");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.rightPad("[", (-727));
      assertEquals("[", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = "3$keD#6&?Ceyv>G~aIp";
      // Undeclared exception!
      try { 
        Charset.forName("lf`{0p=<h");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // lf`{0p=<h
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      String string0 = StringUtils.join(booleanArray0, 'g');
      assertEquals("", string0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(string0);
      assertEquals(0, booleanArray0.length);
      
      String string1 = StringUtils.abbreviate("", 16);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase(" ");
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.right(" ", 169);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'g', 'g'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 16, 16);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.difference("", "");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) " ";
      charSequenceArray0[3] = (CharSequence) " ";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean1 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string5 = StringUtils.truncate(">M", 169);
      assertEquals(">M", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int int1 = StringUtils.compareIgnoreCase(" ", "", false);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(5, charSequenceArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 169;
      doubleArray0[2] = (double) (-1);
      String string6 = StringUtils.join(doubleArray0, 'z');
      assertEquals("1.0z169.0z-1.0", string6);
      assertArrayEquals(new double[] {1.0, 169.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals(3, doubleArray0.length);
      
      String string7 = StringUtils.leftPad(" ", 55);
      assertEquals("                                                       ", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      String string8 = StringUtils.substringAfter("Array and element cannot both be null", 16);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substring("", 77, 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("?");
      assertArrayEquals(new int[] {63}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.rotate("", 77);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("", "");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("$+%}AA,c+-;ij?1|p");
      assertEquals("$+%}AA,c+-;ij?1|p", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("}%`-4d-/^u", "}%`-4d-/^u", 33);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int1 = StringUtils.indexOf((CharSequence) "wia", (CharSequence) "$+%}AA,c+-;ij?1|p");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.stripStart("$+%}AA,c+-;ij?1|p", "wia");
      assertEquals("$+%}AA,c+-;ij?1|p", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "offset cannot be negative");
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Local");
      assertEquals("Local", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("Local");
      assertArrayEquals(new int[] {76, 111, 99, 97, 108}, intArray0);
      assertNotNull(intArray0);
      assertEquals(5, intArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("Local");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Local";
      charSequenceArray0[1] = (CharSequence) "Local";
      charSequenceArray0[2] = (CharSequence) "Local";
      charSequenceArray0[3] = (CharSequence) "Local";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isNumeric(charSequenceArray0[2]);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(4, charSequenceArray0.length);
      
      String string1 = StringUtils.leftPad("|HNADB%", (-1209), "|HNADB%");
      assertEquals("|HNADB%", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'j';
      charArray0[1] = '}';
      charArray0[2] = 'T';
      charArray0[3] = ' ';
      charArray0[4] = '&';
      charArray0[5] = 'Z';
      charArray0[6] = 'l';
      charArray0[7] = 'F';
      int int0 = StringUtils.indexOfAny(charSequenceArray0[2], charArray0);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'j', '}', 'T', ' ', '&', 'Z', 'l', 'F'}, charArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = StringUtils.replaceChars(";{'4fH0`W#8LG,", ')', '3');
      assertEquals(";{'4fH0`W#8LG,", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty(";{'4fH0`W#8LG,");
      assertEquals(";{'4fH0`W#8LG,", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars(";{'4fH0`W#8LG,", '3', '3');
      assertEquals(";{'4fH0`W#8LG,", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace(";{'4fH0`W#8LG,");
      assertFalse(boolean0);
      
      String string3 = StringUtils.LF;
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = "\\u";
      int int0 = StringUtils.indexOfAny((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", string4);
      assertEquals(1, int0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.replace(";{'4fH0`W#8LG,", ";{'4fH0`W#8LG,", "XXk.z7*=ns^&SoU", (-273));
      assertEquals("XXk.z7*=ns^&SoU", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = ";{'4fH0`W#8LG,";
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals(2, stringArray0.length);
      
      String string7 = StringUtils.reverse("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertEquals("[ :76723 dna 86723- neewteb laretil etyb dilav a eb tsum eulav deilppuS", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      String string8 = StringUtils.unwrap(";{'4fH0`W#8LG,", " ");
      assertEquals(";{'4fH0`W#8LG,", string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertNotNull(string8);
      
      int int1 = StringUtils.indexOf((CharSequence) "XXk.z7*=ns^&SoU", 1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = StringUtils.overlay("\n", "toAh^rnKg)t", 157, 157);
      assertEquals("\ntoAh^rnKg)t", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("\n", 180);
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("29B&FseiufZW");
      assertEquals("29B&FseiufZW", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("\n");
      assertEquals("\n", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[0];
      String string4 = StringUtils.join(objectArray0, '(');
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(0, objectArray0.length);
      
      String string5 = StringUtils.unwrap("29B&FseiufZW", "\n");
      assertEquals("29B&FseiufZW", string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "29B&FseiufZW";
      charSequenceArray0[4] = (CharSequence) "29B&FseiufZW";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "toAh^rnKg)t";
      int int0 = StringUtils.indexOfAny((CharSequence) "29B&FseiufZW", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      String string6 = StringUtils.deleteWhitespace("29B&FseiufZW");
      assertEquals("29B&FseiufZW", string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.join(objectArray0, "_", 2504, 2504);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals(0, objectArray0.length);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 157;
      intArray0[1] = 172;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) '(';
      intArray0[5] = 2504;
      intArray0[6] = (-428);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '(', 180, 733);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 180
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.replace((String) null, "XXk.z7*=ns^&SoU", "Cannot store ", (-1));
      assertNull(string0);
      
      int int1 = 38;
      int int2 = StringUtils.indexOf((CharSequence) null, 38, 122);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(38));
      assertNotNull(vector0);
      
      // Undeclared exception!
      try { 
        vector0.listIterator((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.remove((String) null, 'S');
      assertNull(string0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean1 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = stack0.add("ZBmtr-Xb8|CQM~,nY]V");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals("[ZBmtr-Xb8|CQM~,nY]V]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains("ZBmtr-Xb8|CQM~,nY]V"));
      
      Stack<String> stack1 = new Stack<String>();
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertFalse(stack1.contains("ZBmtr-Xb8|CQM~,nY]V"));
      assertNotNull(stack1);
      
      Stream<String> stream0 = stack1.stream();
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals("[]", stack1.toString());
      assertFalse(stack1.contains("ZBmtr-Xb8|CQM~,nY]V"));
      assertNotNull(stream0);
      
      String string1 = StringUtils.join((Iterable<?>) stack0, "cM(");
      assertEquals("ZBmtr-Xb8|CQM~,nY]V", string1);
      assertNotSame(stack0, stack1);
      assertFalse(stack0.equals((Object)stack1));
      assertFalse(stack0.isEmpty());
      assertEquals("[ZBmtr-Xb8|CQM~,nY]V]", stack0.toString());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains("cM("));
      assertTrue(stack0.contains(string1));
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace((String) null);
      assertNull(string2);
      
      boolean boolean3 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      String string3 = StringUtils.join((short[]) null, 'j');
      assertNull(string3);
      
      String string4 = StringUtils.replaceAll((String) null, "0480452", (String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: ", 1916, 106);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("R=3D0WS!/*xC : +Hn", ", Length: ");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string1 = StringUtils.left(", Length: ", 106);
      assertEquals(", Length: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", ", Length: ");
      assertFalse(boolean0);
      
      String string2 = StringUtils.chomp(", Length: ");
      assertEquals(", Length: ", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfBlank("R=3D0WS!/*xC : +Hn", supplier0);
      assertEquals("R=3D0WS!/*xC : +Hn", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("Ga7%XgWT~W^M", ": ", 1916);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("( ^l+r'#O>ss\".sZgGr", 256, '#');
      assertEquals("#############################################################################################################################################################################################################################################( ^l+r'#O>ss\".sZgGr", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '#';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) ", Length: ", charArray0);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'#', '#'}, charArray0);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripToNull("T~DxJF7+0bGurQ:q&");
      assertEquals("T~DxJF7+0bGurQ:q&", string0);
      assertNotNull(string0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = classLoader1.getParent();
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNull(classLoader2);
      
      String string1 = StringUtils.stripStart("vDPAP)*PTu'w", (String) null);
      assertEquals("vDPAP)*PTu'w", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chop("T~DxJF7+0bGurQ:q&");
      assertEquals("T~DxJF7+0bGurQ:q", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringBefore("", 6);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("Supplied value must be a valid byte literal between -32768 and 32767: [", "object");
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", (CharSequence) "object");
      assertEquals(0, int0);
      
      String string3 = StringUtils.leftPad("4%Q&4.+T0]%v:_~", 3909, "Cannot store ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("null/empty items");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string4 = StringUtils.remove("org.apache.commons.lang3.LocaleUtils", 'a');
      assertEquals("org.pche.commons.lng3.LocleUtils", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "6`9");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      String string5 = StringUtils.defaultString((String) null, "Cannot store ");
      assertEquals("Cannot store ", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = StringUtils.truncate("JFdj|b]~]MYV^tl}]y", 366, 366);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("", 366);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join((float[]) null, 'h', (-1127), 74);
      assertNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "JFdj|b]~]MYV^tl}]y";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "JFdj|b]~]MYV^tl}]y";
      charSequenceArray0[5] = (CharSequence) "";
      int int1 = StringUtils.lastIndexOfAny("JFdj|b]~]MYV^tl}]y", charSequenceArray0);
      assertEquals(18, int1);
      assertFalse(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      
      int int2 = StringUtils.indexOf((CharSequence) null, 366);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string3 = StringUtils.deleteWhitespace(" vs ");
      assertEquals("vs", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("", 'c');
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.join((Object[]) stringArray0, '&');
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = StringUtils.defaultString("*/w4iTQk2`mmBGjV", "W;VFxU9BYjYB");
      assertEquals("*/w4iTQk2`mmBGjV", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("*/w4iTQk2`mmBGjV", "$(7b1\"d86#tAxPj!");
      assertNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.EMPTY;
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("*/w4iTQk2`mmBGjV");
      assertEquals("*/w4iTQk2`mmBGjV", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("*/w4iTQk2`mmBGjV"));
      assertNotNull(linkedList0);
      
      String string4 = StringUtils.center((String) null, 59, "C}RG");
      assertNull(string4);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.clearAssertionStatus();
      classLoader0.setDefaultAssertionStatus(true);
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      String string5 = StringUtils.stripStart("YJmJ};'~", "YJmJ};'~");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBefore("*/w4iTQk2`mmBGjV", (-2291));
      assertEquals("*/w4iTQk2`mmBGjV", string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "iN7sCbjQ=<%*IQL";
      String string1 = StringUtils.wrapIfMissing("iN7sCbjQ=<%*IQL", '~');
      assertEquals("~iN7sCbjQ=<%*IQL~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("iN7sCbjQ=<%*IQL", 128, 1507);
      assertEquals("iN7sCbjQ=<%*IQL", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("~iN7sCbjQ=<%*IQL~", supplier0);
      assertEquals("~iN7sCbjQ=<%*IQL~", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isEmpty("iN7sCbjQ=<%*IQL");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("iN7sCbjQ=<%*IQL");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isEmpty("~iN7sCbjQ=<%*IQL~");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = "2(:VlNH.lJKZdBvDkK";
      String string5 = StringUtils.substringAfter("(VX}.cd6BuJW>FpLuc!", "2(:VlNH.lJKZdBvDkK");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "", (CharSequence) "iN7sCbjQ=<%*IQL");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string6 = StringUtils.center((String) null, 1507, "5oJ$?lwkCoN^FQGfy ");
      assertNull(string6);
      
      short[] shortArray0 = new short[4];
      short short0 = (short) (-1968);
      shortArray0[0] = (short) (-1968);
      shortArray0[1] = (short) (-325);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)57;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'A', (int) (short) (-1), 74);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("|GQ");
      assertEquals("|GQ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultIfEmpty("YJmJ};'~", "4.Z?hsw*)$:Hl");
      assertEquals("YJmJ};'~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("|GQ");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      String string2 = StringUtils.getDigits((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "4.Z?hsw*)$:Hl", (CharSequence) "YJmJ};'~", 1497);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("Cannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("Minimum abbreviation width is %d", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'h';
      charArray0[1] = 'M';
      charArray0[2] = '(';
      charArray0[3] = '>';
      charArray0[4] = 'j';
      charArray0[5] = 'C';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Minimum abbreviation width is %d", charArray0);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'h', 'M', '(', '>', 'j', 'C'}, charArray0);
      assertEquals(6, charArray0.length);
      
      String string0 = StringUtils.stripToNull("Cannot store ");
      assertEquals("Cannot store", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Cannot store", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "Cannot store", (CharSequence) "?0wuO/^'~", 1);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(9, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Cannot store", (String) null);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      
      String string1 = StringUtils.leftPad("The character ", 1, 'C');
      assertEquals("The character ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean3 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      boolean boolean4 = StringUtils.equalsAny("Cannot store ", stringArray0);
      assertFalse(boolean4);
      assertNotSame(stringArray0, stringArray1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = StringUtils.repeat("PI", 3911);
      assertNotNull(string0);
      
      Integer integer0 = new Integer((-607));
      assertEquals((-607), (int)integer0);
      assertNotNull(integer0);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertFalse(treeSet0.contains((-607)));
      assertNotNull(treeSet0);
      
      Integer integer1 = new Integer((-1058));
      assertEquals((-1058), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean0 = treeSet0.add(integer1);
      assertTrue(boolean0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(treeSet0.contains(integer1));
      assertFalse(treeSet0.contains((-607)));
      
      TreeSet<Integer> treeSet1 = new TreeSet<Integer>();
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertFalse(treeSet1.contains((-607)));
      assertNotNull(treeSet1);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>((SortedSet<? extends Integer>) treeSet1);
      assertFalse(treeSet1.equals((Object)treeSet0));
      assertEquals(0, priorityQueue0.size());
      assertFalse(treeSet1.contains((-607)));
      assertFalse(priorityQueue0.contains((-607)));
      assertNotNull(priorityQueue0);
      
      String string1 = StringUtils.chop("'o");
      assertEquals("'", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "PI";
      charSequenceArray0[1] = (CharSequence) string0;
      charSequenceArray0[2] = (CharSequence) "'o";
      float[] floatArray0 = new float[0];
      String string2 = StringUtils.join(floatArray0, 'G', 100, 79);
      assertEquals("", string2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(0, floatArray0.length);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "The String mus not be empty";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 79;
      doubleArray0[1] = (double) (-1058);
      doubleArray0[2] = (double) 'G';
      doubleArray0[3] = (double) 'G';
      String string3 = StringUtils.join(doubleArray0, '*');
      assertEquals("79.0*-1058.0*71.0*71.0", string3);
      assertArrayEquals(new double[] {79.0, (-1058.0), 71.0, 71.0}, doubleArray0, 0.01);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(4, doubleArray0.length);
      
      charSequenceArray0[5] = (CharSequence) "79.0*-1058.0*71.0*71.0";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[4], charSequenceArray0[4]);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "s9_2KBZ~Vfa?bbRl", "PI");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("gC>jlLMJ", "gC>jlLMJ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("?*$tFL}e9O#!M%", 13);
      assertEquals("$tFL}e9O#!M%", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      String string2 = StringUtils.wrapIfMissing("", 'Z');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int[] intArray1 = StringUtils.toCodePoints("$tFL}e9O#!M%");
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(13, intArray1.length);
      
      int[] intArray2 = StringUtils.toCodePoints("");
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertEquals(0, intArray2.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "$tFL}e9O#!M%", (CharSequence) "$tFL}e9O#!M%");
      assertTrue(boolean0);
      
      String string3 = StringUtils.rotate("", 0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.remove("", 'Z');
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("", (-3417), "");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.defaultString("", (String) null);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) ", Length: ", ", Length: ");
      assertTrue(boolean0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) ' ';
      longArray0[1] = (long) 106;
      String string0 = StringUtils.join(longArray0, ',');
      assertEquals("32,106", string0);
      assertArrayEquals(new long[] {32L, 106L}, longArray0);
      assertNotNull(string0);
      assertEquals(2, longArray0.length);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.KOREA;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertNotNull(locale1);
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertEquals("", string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertNotNull(string1);
      
      Locale locale2 = Locale.FRENCH;
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals("", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertNotNull(locale2);
      
      String string2 = locale0.toLanguageTag();
      assertEquals("de-DE", string2);
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(string2);
      
      String string3 = StringUtils.lowerCase("", locale1);
      assertEquals("", string3);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KR", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.removeStart((String) null, "xk54Q_dQ*%");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = StringUtils.replaceChars(";{'4fH0`W#8LG,", ')', '3');
      assertEquals(";{'4fH0`W#8LG,", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) ";{'4fH0`W#8LG,";
      charSequenceArray0[1] = (CharSequence) ";{'4fH0`W#8LG,";
      charSequenceArray0[2] = (CharSequence) ";{'4fH0`W#8LG,";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfterLast("org.apache.commons.lang3.StringUtils", 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split((String) null, "");
      assertNull(stringArray0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      boolean boolean1 = StringUtils.startsWith((CharSequence) null, "\r");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("M,|?{_k_sY", "Cannot store ", 47);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string3 = StringUtils.substringBefore("org.apache.commons.lang3.StringUtils", 1454);
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("org.apache.commons.lang3.StringUtils");
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(11, stringArray2.length);
      
      String string4 = StringUtils.wrapIfMissing("Object varargs must not be null", 'l');
      assertEquals("lObject varargs must not be null", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.contains((CharSequence) ";{'4fH0`W#8LG,", 2147483645);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "l_~'1";
      charSequenceArray0[1] = (CharSequence) "l_~'1";
      charSequenceArray0[2] = (CharSequence) "l_~'1";
      charSequenceArray0[3] = (CharSequence) "l_~'1";
      charSequenceArray0[4] = (CharSequence) "l_~'1";
      charSequenceArray0[5] = (CharSequence) "l_~'1";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string0 = StringUtils.appendIfMissing("@xnM9BqIT,<E3+9>v", charSequenceArray0[5], charSequenceArray0);
      assertEquals("@xnM9BqIT,<E3+9>vl_~'1", string0);
      assertNotNull(string0);
      assertEquals(6, charSequenceArray0.length);
      
      String string1 = StringUtils.removeFirst((String) null, "@xnM9BqIT,<E3+9>v");
      assertNull(string1);
      
      String string2 = StringUtils.trimToEmpty("null/empty items");
      assertEquals("null/empty items", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((byte[]) null, 'Z', 1766, (-1));
      assertNull(string3);
      
      String string4 = StringUtils.truncate("@xnM9BqIT,<E3+9>v", 90);
      assertEquals("@xnM9BqIT,<E3+9>v", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("Arguments cannot both be null", 81, 39);
      assertEquals("Arguments cannot both be null", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[3], (CharSequence) "null/empty items", 39);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "Arguments cannot both be null", 2641);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = StringUtils.center(" is not in the range '0' - '9'", 4900);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) " is not in the range '0' - '9'", 4900);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) " is not in the range '0' - '9'";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.stripStart(" is not in the range '0' - '9'", string0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty(string0);
      assertEquals("is not in the range '0' - '9'", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter(" is not in the range '0' - '9'", " is not in the range '0' - '9'");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) string0, (CharSequence) " is not in the range '0' - '9'", 85);
      assertEquals(2435, int1);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(int1 == int0);
      
      boolean boolean2 = StringUtils.equalsAny("is not in the range '0' - '9'", charSequenceArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string4 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string4);
      assertEquals(2, stringArray0.length);
      
      String string5 = StringUtils.stripToNull("");
      assertNull(string5);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'H';
      charArray0[1] = '\\';
      charArray0[2] = 'p';
      boolean boolean3 = StringUtils.containsAny((CharSequence) "is not in the range '0' - '9'", charArray0);
      assertFalse(boolean3);
      assertArrayEquals(new char[] {'H', '\\', 'p'}, charArray0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(3, charArray0.length);
      
      String string6 = StringUtils.joinWith(", Length: 0", stringArray0);
      assertEquals(", Length: 0", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals(2, stringArray0.length);
      
      boolean boolean4 = StringUtils.isAllLowerCase("");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      assertEquals(2, stringArray0.length);
      
      boolean boolean5 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean5);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      
      String string8 = StringUtils.defaultString("");
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string1));
      assertNotNull(string8);
      
      boolean boolean6 = StringUtils.isAlpha(" is not in the range '0' - '9'");
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean5);
      
      char[] charArray1 = new char[8];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'p';
      charArray1[1] = 'p';
      charArray1[2] = 'H';
      charArray1[3] = 'H';
      charArray1[4] = 'y';
      charArray1[5] = 'p';
      charArray1[6] = 'p';
      charArray1[7] = 'p';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", charArray1);
      assertEquals((-1), int2);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'p', 'p', 'H', 'H', 'y', 'p', 'p', 'p'}, charArray1);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(8, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "The String must not be empty";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      short[] shortArray0 = new short[19];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short) (-12);
      shortArray0[3] = (short) (-12);
      String string0 = StringUtils.join(shortArray0, '!', (-145), (-2034458190));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(19, shortArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("a#4`gF|4s3S5+d>\"l0", (String) null, (int) (short)0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.upperCase("a#4`gF|4s3S5+d>\"l0");
      assertEquals("A#4`GF|4S3S5+D>\"L0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("The String must not be empty", "CGgBjN#m*", "CGgBjN#m*");
      assertEquals("The String must not be empty", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("0F1u", '0');
      assertEquals("0F1u", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '\'');
      assertEquals("", string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string0);
      assertEquals(0, longArray0.length);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.ENGLISH;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertNotNull(locale1);
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertEquals("", string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertNotNull(string1);
      
      Locale locale2 = Locale.FRENCH;
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals("fr", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertNotNull(locale2);
      
      String string2 = locale1.getDisplayScript();
      assertEquals("", string2);
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertNotNull(string2);
      
      String string3 = locale0.toLanguageTag();
      assertEquals("de-DE", string3);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(string3);
      
      String string4 = StringUtils.lowerCase(" vs ", locale0);
      assertEquals(" vs ", string4);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.split("Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "W;sZg");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("", "ay'bLkgHl5K%:oouc", false);
      assertEquals((-17), int0);
      
      String string5 = StringUtils.wrap("Cannot store ", " vs ");
      assertEquals(" vs Cannot store  vs ", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      Locale locale3 = locale1.stripExtensions();
      assertNotSame(locale1, locale0);
      assertSame(locale1, locale3);
      assertNotSame(locale1, locale2);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale0);
      assertSame(locale3, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale3.getISO3Country());
      assertEquals("eng", locale3.getISO3Language());
      assertEquals("", locale3.getVariant());
      assertEquals("en", locale3.toString());
      assertEquals("", locale3.getCountry());
      assertEquals("en", locale3.getLanguage());
      assertNotNull(locale3);
      
      String string6 = StringUtils.join(longArray0, 'M');
      assertEquals("", string6);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals(0, longArray0.length);
      
      Locale locale4 = Locale.GERMANY;
      assertNotSame(locale4, locale3);
      assertNotSame(locale4, locale2);
      assertSame(locale4, locale0);
      assertNotSame(locale4, locale1);
      assertFalse(locale4.equals((Object)locale3));
      assertFalse(locale4.equals((Object)locale2));
      assertFalse(locale4.equals((Object)locale1));
      assertEquals("de_DE", locale4.toString());
      assertEquals("de", locale4.getLanguage());
      assertEquals("deu", locale4.getISO3Language());
      assertEquals("DE", locale4.getCountry());
      assertEquals("DEU", locale4.getISO3Country());
      assertEquals("", locale4.getVariant());
      assertNotNull(locale4);
      
      Locale locale5 = Locale.ENGLISH;
      assertNotSame(locale5, locale2);
      assertNotSame(locale5, locale4);
      assertSame(locale5, locale3);
      assertNotSame(locale5, locale0);
      assertSame(locale5, locale1);
      assertFalse(locale5.equals((Object)locale2));
      assertFalse(locale5.equals((Object)locale4));
      assertFalse(locale5.equals((Object)locale0));
      assertEquals("", locale5.getVariant());
      assertEquals("", locale5.getISO3Country());
      assertEquals("eng", locale5.getISO3Language());
      assertEquals("en", locale5.toString());
      assertEquals("", locale5.getCountry());
      assertEquals("en", locale5.getLanguage());
      assertNotNull(locale5);
      
      String string7 = locale0.getDisplayVariant(locale3);
      assertEquals("", string7);
      assertSame(locale0, locale4);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale3);
      assertNotSame(locale0, locale5);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertSame(locale1, locale3);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale4);
      assertSame(locale1, locale5);
      assertNotSame(locale3, locale4);
      assertNotSame(locale3, locale2);
      assertSame(locale3, locale5);
      assertNotSame(locale3, locale0);
      assertSame(locale3, locale1);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale3));
      assertFalse(locale0.equals((Object)locale5));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale4));
      assertFalse(locale3.equals((Object)locale4));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale3.getISO3Country());
      assertEquals("eng", locale3.getISO3Language());
      assertEquals("", locale3.getVariant());
      assertEquals("en", locale3.toString());
      assertEquals("", locale3.getCountry());
      assertEquals("en", locale3.getLanguage());
      assertNotNull(string7);
      
      Locale locale6 = Locale.FRENCH;
      assertNotSame(locale6, locale3);
      assertNotSame(locale6, locale4);
      assertNotSame(locale6, locale0);
      assertSame(locale6, locale2);
      assertNotSame(locale6, locale1);
      assertNotSame(locale6, locale5);
      assertFalse(locale6.equals((Object)locale3));
      assertFalse(locale6.equals((Object)locale4));
      assertFalse(locale6.equals((Object)locale0));
      assertFalse(locale6.equals((Object)locale1));
      assertFalse(locale6.equals((Object)locale5));
      assertEquals("fr", locale6.toString());
      assertEquals("", locale6.getCountry());
      assertEquals("fra", locale6.getISO3Language());
      assertEquals("fr", locale6.getLanguage());
      assertEquals("", locale6.getISO3Country());
      assertEquals("", locale6.getVariant());
      assertNotNull(locale6);
      
      String string8 = locale1.toLanguageTag();
      assertEquals("en", string8);
      assertNotSame(locale1, locale0);
      assertSame(locale1, locale3);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale4);
      assertSame(locale1, locale5);
      assertNotSame(locale1, locale6);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale4));
      assertFalse(locale1.equals((Object)locale6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertNotNull(string8);
      
      String string9 = StringUtils.lowerCase("de-DE", locale2);
      assertEquals("de-de", string9);
      assertSame(locale2, locale6);
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale4);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale3);
      assertNotSame(locale2, locale5);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale4));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale3));
      assertFalse(locale2.equals((Object)locale5));
      assertEquals("fr", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertNotNull(string9);
      
      String[] stringArray2 = StringUtils.split("");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(0, stringArray2.length);
      
      String string10 = StringUtils.removeStart("e`AniD%\"3n2;MT>K", "6`9");
      assertEquals("e`AniD%\"3n2;MT>K", string10);
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertNotNull(string10);
      
      String string11 = StringUtils.stripEnd("", "Om{/b@x");
      assertEquals("", string11);
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string9));
      assertTrue(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string8));
      assertTrue(string11.equals((Object)string0));
      assertTrue(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string4));
      assertTrue(string11.equals((Object)string7));
      assertTrue(string11.equals((Object)string1));
      assertNotNull(string11);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("l 'H;VR", (String) null);
      assertEquals("l 'H;VR", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "l 'H;VR";
      charSequenceArray0[3] = (CharSequence) "l 'H;VR";
      charSequenceArray0[3] = (CharSequence) "l 'H;VR";
      String string1 = StringUtils.rightPad("l 'H;VR", 10, (String) null);
      assertEquals("l 'H;VR   ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.stripToNull((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("org.apache.commons.lang3.StringUtils", ", Lengt Length: ", charSequenceArray0);
      assertEquals("org.apache.commons.lang3.StringUtils, Lengt Length: ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(4, charSequenceArray0.length);
      
      String string4 = StringUtils.stripToNull((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.stripEnd("qKoa>?k$fvO=HN", ":GW");
      assertEquals("qKoa>?k$fvO=HN", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      double double0 = StringUtils.getJaroWinklerDistance("org.apache.commons.lang3.StringUtils, Lengt Length: ", "org.apache.commons.lang3.StringUtils");
      assertEquals(0.97, double0, 0.01);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "qKoa>?k$fvO=HN", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("l 'H;VR", (String) null);
      assertEquals("l 'H;VR", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "l 'H;VR";
      charSequenceArray0[3] = (CharSequence) "l 'H;VR";
      charSequenceArray0[3] = (CharSequence) "l 'H;VR";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string1 = StringUtils.unwrap("6?(F!S,VY^$o<Ixdo", 'e');
      assertEquals("6?(F!S,VY^$o<Ixdo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("6?(F!S,VY^$o<Ixdo", charSequenceArray0[1], charSequenceArray0);
      assertEquals("6?(F!S,VY^$o<Ixdo", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.substringBetween(", Lengt Length: ", "org.ap.commons.lang3.Charsets", ", Lengt Length: ");
      assertNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) ", Lengt Length: ", (CharSequence) "l 'H;VR");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substring((String) null, 5, 5);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0", "6?(F!S,VY^$o<Ixdo");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      String string5 = StringUtils.defaultString("p{InCombiningDiacriticalMarks}+The String must not be empty");
      assertEquals("p{InCombiningDiacriticalMarks}+The String must not be empty", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-3064));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.center("org.ap.commons.lang3.Charsets", (-1), "p{InCombiningDiacriticalMarks}+The String must not be empty");
      assertEquals("org.ap.commons.lang3.Charsets", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.abbreviate(", Lengt Length: ", ": ", (-1966), 5);
      assertEquals(", L: ", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "6?(F!S,VY^$o<Ixdo", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripToNull("T~DxJF7+0bGurQ:q&");
      assertEquals("T~DxJF7+0bGurQ:q&", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("^E", "^E");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", 821);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("T~DxJF7+0bGurQ:q&");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "T~DxJF7+0bGurQ:q&", 821);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = StringUtils.replaceChars("2u=`U%-Q`FJ}", "t~3%xd3j]MnsXl$", "b");
      assertEquals("2u=`U-Q`FJ}", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "2u=`U-Q`FJ}", (-1076), (-3411));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("2u=`U%-Q`FJ}");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      String string1 = StringUtils.join(booleanArray0, '2');
      assertEquals("true2false2true2true2true2false", string1);
      assertTrue(Arrays.equals(new boolean[] {true, false, true, true, true, false}, booleanArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, booleanArray0.length);
      
      String string2 = StringUtils.replaceOnce("b", "2u=`U%-Q`FJ}", "2u=`U%-Q`FJ}");
      assertEquals("b", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("b", " ", (-3514), 32);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("&eP");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(3, stringArray1.length);
      
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string4 = StringUtils.upperCase("2u=`U%-Q`FJ}", locale0);
      assertEquals("2U=`U%-Q`FJ}", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(string4);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("b", "2U=`U%-Q`FJ}", stringArray0);
      assertEquals("2U=`U%-Q`FJ}b", string5);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(string5);
      assertEquals(11, stringArray0.length);
      
      Locale locale1 = Locale.KOREAN;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertNotNull(locale1);
      
      String string6 = locale0.getDisplayScript(locale1);
      assertEquals("", string6);
      assertNotSame(locale1, locale0);
      assertNotSame(locale0, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(locale0.equals((Object)locale1));
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("ko", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(string6);
      
      String string7 = StringUtils.lowerCase((String) null);
      assertNull(string7);
      
      String string8 = StringUtils.capitalize("2U=`U%-Q`FJ}b");
      assertEquals("2U=`U%-Q`FJ}b", string8);
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      
      boolean boolean0 = StringUtils.containsWhitespace("2U=`U%-Q`FJ}b");
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("org.apache.commons.lang3.exception.CloneFailedException", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 11 vs 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1021.99635;
      doubleArray0[1] = (double) 32;
      String string0 = StringUtils.join(doubleArray0, '`', 32, 32);
      assertEquals("", string0);
      assertArrayEquals(new double[] {1021.99635, 32.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals(2, doubleArray0.length);
      
      String string1 = StringUtils.swapCase("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes("[.!uh", (Charset) null);
      assertArrayEquals(new byte[] {(byte)91, (byte)46, (byte)33, (byte)117, (byte)104}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(5, byteArray0.length);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("[.!uh");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "[.!uh";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isWhitespace(charSequenceArray0[0]);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string0 = StringUtils.left("JS7", 605);
      assertEquals("JS7", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf(charSequenceArray0[0], "JS7", 605);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.equalsAnyIgnoreCase("JS7", charSequenceArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.truncate("4o:|i=4LOW$cdzvY", 814);
      assertEquals("4o:|i=4LOW$cdzvY", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("4o:|i=4LOW$cdzvY", 'U');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.remove("4o:|i=4LOW$cdzvY", '_');
      assertEquals("4o:|i=4LOW$cdzvY", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "4o:|i=4LOW$cdzvY", (CharSequence[]) stringArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(1, stringArray0.length);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "4o:|i=4LOW$cdzvY", (char[]) null);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string3 = StringUtils.stripAccents("4o:|i=4LOW$cdzvY");
      assertEquals("4o:|i=4LOW$cdzvY", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) stringArray0, '_', (-788), (-788));
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.stripToNull("[.!uh");
      assertEquals("[.!uh", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean4 = StringUtils.containsOnly(charSequenceArray0[0], (char[]) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertEquals(1, charSequenceArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfBlank("hKs=A.@Lk(&G?zE(2", supplier0);
      assertEquals("hKs=A.@Lk(&G?zE(2", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[3] = stringArray0[2];
      String string0 = StringUtils.replacePattern("Cannot store ", "j,C.$e'O", stringArray0[3]);
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      assertEquals(5, stringArray0.length);
      
      String string1 = StringUtils.unwrap("Cannot store ", "j,C.$e'O");
      assertEquals("Cannot store ", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "j,C.$e'O", (char[]) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Cannot store ", 28, 0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.chomp(stringArray0[3]);
      assertNull(string2);
      assertEquals(5, stringArray0.length);
      
      String string3 = StringUtils.stripToNull("org.apache.commo");
      assertEquals("org.apache.commo", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) ";{'4fH0`W#8LG,";
      charSequenceArray0[2] = (CharSequence) ";{'4fH0`W#8LG,";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string0 = StringUtils.substringAfterLast("org.apache.commons.lang3.StringUtils", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("M,|?{_k_sY", "Cannot store ", 47);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.substringBefore("org.apache.commons.lang3.StringUtils", 1454);
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("org.apache.commons.lang3.StringUtils");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(11, stringArray1.length);
      
      String string3 = StringUtils.wrapIfMissing("Object varargs must not be null", 'l');
      assertEquals("lObject varargs must not be null", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "iN7sCbjQ=<%*IQL";
      String string1 = StringUtils.wrapIfMissing("iN7sCbjQ=<%*IQL", '~');
      assertEquals("~iN7sCbjQ=<%*IQL~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("iN7sCbjQ=<%*IQL", 128, 1507);
      assertEquals("iN7sCbjQ=<%*IQL", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("~iN7sCbjQ=<%*IQL~", supplier0);
      assertEquals("~iN7sCbjQ=<%*IQL~", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isEmpty("iN7sCbjQ=<%*IQL");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("iN7sCbjQ=<%*IQL");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isEmpty("~iN7sCbjQ=<%*IQL~");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = "2(:VlNH.lJKZdBvDkK";
      String string5 = StringUtils.substringAfter("(VX}.cd6BuJW>FpLuc!", "2(:VlNH.lJKZdBvDkK");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "", (CharSequence) "iN7sCbjQ=<%*IQL");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String string6 = StringUtils.center("(VX}.cd6BuJW>FpLuc!", 1507, "5oJ$?lwkCoN^FQGfy ");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      short[] shortArray0 = new short[4];
      short short0 = (short) (-1968);
      shortArray0[0] = (short) (-1968);
      shortArray0[1] = (short) (-325);
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)57;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'A', (int) (short) (-1), 74);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2477;
      shortArray0[1] = (short)167;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)32;
      shortArray0[4] = (short)32;
      shortArray0[5] = (short)2289;
      shortArray0[6] = (short)0;
      String string0 = StringUtils.join(shortArray0, 'K');
      assertEquals("2477K167K0K32K32K2289K0", string0);
      assertArrayEquals(new short[] {(short)2477, (short)167, (short)0, (short)32, (short)32, (short)2289, (short)0}, shortArray0);
      assertNotNull(string0);
      assertEquals(7, shortArray0.length);
      
      String string1 = StringUtils.stripEnd("2477K167K0K32K32K2289K0", "P");
      assertEquals("2477K167K0K32K32K2289K0", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("2477K167K0K32K32K2289K0", "2477K167K0K32K32K2289K0");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "P", (CharSequence) "2477K167K0K32K32K2289K0");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.toRootLowerCase(", '");
      assertEquals(", '", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "P", (CharSequence) "P");
      assertTrue(boolean0);
      
      String string4 = StringUtils.removePattern("", "Hg");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "2477K167K0K32K32K2289K0", (int) (short)167);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.replace("CaRSi", "vk4bt[d]<@", "2477K167K0K32K32K2289K0");
      assertEquals("CaRSi", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfterLast("[ 7@L", (int) (short)32);
      assertEquals("7@L", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isNotEmpty("7@L");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.replace("", "Array element ", "", 57);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 57);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isEmpty("Array element ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      String string2 = StringUtils.substring("_|JtX97P!zkAW-[(TCDft", 57, (-2031));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate("!N1&X] Ipg", 1916, 29);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Iterable<?>) null, 'a');
      assertNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "", (-2031));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.replace("", "Array element ", "kNkV");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfterLast("", (-2031));
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isNotEmpty("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
      
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.right("JKB?e", (-3104));
      assertEquals("", string1);
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("JKB?e");
      assertArrayEquals(new int[] {74, 75, 66, 63, 101}, intArray0);
      assertNotNull(intArray0);
      assertEquals(5, intArray0.length);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.overlay("org.apache.commons.lang3.LocaleUtils", (String) null, 322, (-5));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "l_~'1";
      charSequenceArray0[1] = (CharSequence) "l_~'1";
      charSequenceArray0[2] = (CharSequence) "l_~'1";
      charSequenceArray0[3] = (CharSequence) "l_~'1";
      charSequenceArray0[4] = (CharSequence) "l_~'1";
      charSequenceArray0[5] = (CharSequence) "l_~'1";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string0 = StringUtils.appendIfMissing("@xnM9BqIT,<E3+9>v", charSequenceArray0[5], charSequenceArray0);
      assertEquals("@xnM9BqIT,<E3+9>vl_~'1", string0);
      assertNotNull(string0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "@xnM9BqIT,<E3+9>vl_~'1", (-1));
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@xnM9BqIT,<E3+9>v";
      String string1 = StringUtils.replaceEach("@xnM9BqIT,<E3+9>v", stringArray0, stringArray0);
      assertEquals("@xnM9BqIT,<E3+9>v", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.appendIfMissing("@xnM9BqIT,<E3+9>v", charSequenceArray0[4], stringArray0);
      assertEquals("@xnM9BqIT,<E3+9>v", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.indexOfAnyBut(charSequenceArray0[3], charSequenceArray0[2]);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "@xnM9BqIT,<E3+9>v", charSequenceArray0[2]);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(6, charSequenceArray0.length);
      
      String string3 = StringUtils.overlay("]Zb_F3hM/zJ!G", (String) null, 10, 5);
      assertEquals("]Zb_zJ!G", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int3 = StringUtils.length("@xnM9BqIT,<E3+9>v");
      assertEquals(19, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.stripStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequenceArray0[0]);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      int int2 = Integer.MIN_VALUE;
      String string2 = StringUtils.rotate("org.apache.commons.lang3.LocaleUtils", Integer.MIN_VALUE);
      assertEquals("ang3.LocaleUtilsorg.apache.commons.l", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("ang3.LocaleUtilsorg.apache.commons.l", "ang3.LocaleUtilsorg.apache.commons.l");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", "ang3.LocaleUtilsorg.apache.commons.l", 0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertEquals(63, stringArray2.length);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("_", stringArray2, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 63 vs 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = (-735);
      int int1 = StringUtils.indexOf((CharSequence) null, (-735));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string0 = "";
      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Qb-mX3vT+y";
      stringArray0[1] = "";
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "98}b#z0k\"3NCJ2Y";
      stringArray1[2] = "Qb-mX3vT+y";
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("Qb-mX3vT+y", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 2 vs 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = StringUtils.left("Locale must not be null", 5);
      assertEquals("Local", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Local");
      assertFalse(boolean0);
      
      String string1 = StringUtils.left("8v9s", 5);
      assertEquals("8v9s", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("0480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC20480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC2", "Locale must not be null", "0480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC20480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC2");
      assertNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 't');
      assertEquals(0, int0);
      
      String string3 = StringUtils.stripEnd("Local", "8v9s");
      assertEquals("Local", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Local", "Locale must not be null");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Local");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Locale must not be null";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "8v9s", supplier0);
      assertEquals("8v9s", charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      boolean boolean2 = StringUtils.isNumericSpace("8v9s");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String[] stringArray0 = StringUtils.split("SZ'(nI&i", "Local");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.defaultString("!L%FpW-YfY>BoIxE1K");
      assertEquals("!L%FpW-YfY>BoIxE1K", string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int2 = StringUtils.length((CharSequence) null);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String string5 = StringUtils.center("8v9s", (-2899), 't');
      assertEquals("8v9s", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceIgnoreCase("\r", "SZ'(nI&i", "Object varargs must not be null", 808);
      assertEquals("\r", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "8v9s", (CharSequence) "\r");
      assertEquals((-1), int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.center("", (-46), ", '");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("l 'H;VR", (String) null);
      assertEquals("l 'H;VR", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "l 'H;VR";
      charSequenceArray0[3] = (CharSequence) "l 'H;VR";
      charSequenceArray0[3] = (CharSequence) "l 'H;VR";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string1 = StringUtils.unwrap("6?(F!S,VY^$o<Ixdo", 'e');
      assertEquals("6?(F!S,VY^$o<Ixdo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("6?(F!S,VY^$o<Ixdo", charSequenceArray0[1], charSequenceArray0);
      assertEquals("6?(F!S,VY^$o<Ixdo", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.substringBetween(", Lengt Length: ", "org.ap.commons.lang3.Charsets", "I ");
      assertNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) ", Lengt Length: ", (CharSequence) "l 'H;VR");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substring((String) null, 5, 5);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0", "6?(F!S,VY^$o<Ixdo");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      String string5 = StringUtils.defaultString("p{InCombiningDiacriticalMarks}+The String must not be empty");
      assertEquals("p{InCombiningDiacriticalMarks}+The String must not be empty", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-3064));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.center("org.ap.commons.lang3.Charsets", (-1), "p{InCombiningDiacriticalMarks}+The String must not be empty");
      assertEquals("org.ap.commons.lang3.Charsets", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = StringUtils.join((byte[]) null, 'S', 100, 15);
      assertNull(string0);
      
      String string1 = StringUtils.truncate((String) null, 15);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfter(" ", "null/empty items");
      assertEquals("", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("f-G_sk-c$Oj=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type Cannot clone Cloneable type ", "F/");
      assertEquals("f-G_sk-c$Oj=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type Cannot clone Cloneable type ", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.center("Minimum abbreviation width is %d", 2034, "]");
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "5t_s:?i &g`z.S";
      stringArray0[1] = "5t_s:?i &g`z.S";
      stringArray0[4] = "5t_s:?i &g`z.S";
      stringArray0[6] = "5t_s:?i &g`z.S";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(7, stringArray0.length);
      
      String string1 = StringUtils.chomp(stringArray0[2]);
      assertNull(string1);
      assertEquals(7, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.trimToEmpty("DOj>/qR=");
      assertEquals("DOj>/qR=", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-69);
      String string3 = StringUtils.join(byteArray0, '0', 39, (int) (byte) (-69));
      assertEquals("", string3);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-69)}, byteArray0);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(2, byteArray0.length);
      
      String string4 = StringUtils.truncate((String) null, 3055);
      assertNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string1, (CharSequence) string1, (int) (byte) (-69));
      assertEquals((-1), int0);
      assertEquals(7, stringArray0.length);
      
      String string5 = StringUtils.trimToNull((String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = StringUtils.replaceChars(";{'4fH0`W#8LG,", ')', '3');
      assertEquals(";{'4fH0`W#8LG,", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, '3', 1002, (int) '3');
      assertEquals("", string1);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace(";{'4fH0`W#8LG,");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringBefore("", 0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("Supplied value must be a valid byte literal between -32768 and 32767: [", 1002);
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = "\\u";
      int int0 = StringUtils.indexOfAny((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", string4);
      assertEquals(1, int0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.replace(";{'4fH0`W#8LG,", ";{'4fH0`W#8LG,", "XXk.z7*=ns^&SoU", (-273));
      assertEquals("XXk.z7*=ns^&SoU", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfter(";{'4fH0`W#8LG,", 1);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = ')';
      charArray0[2] = '3';
      charArray0[3] = ')';
      charArray0[4] = '3';
      charArray0[5] = '3';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'3', ')', '3', ')', '3', '3'}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\n", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.rightPad("\n", (-1), "tE^vW%9:r*hWrAt1_+");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.stripToNull("\n");
      assertNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase((String) null, "\n", (CharSequence[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.stripToNull("pAE.,b{x]2S@s\"0]g");
      assertEquals("pAE.,b{x]2S@s\"0]g", string3);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripEnd("\n", ",uS)c_");
      assertEquals("\n", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\n", (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.stripToNull("pAE.,b{x]2S@s\"0]g");
      assertEquals("pAE.,b{x]2S@s\"0]g", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = " in an array of ";
      boolean boolean0 = StringUtils.equalsIgnoreCase("89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0 ", "YJmJ};'~");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) " in an array of ", 'y');
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = StringUtils.rightPad("f", 0, "f");
      assertEquals("f", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay((String) null, "$k~/nT", (-1732), 32);
      assertNull(string1);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Stack<CharBuffer> stack1 = new Stack<CharBuffer>();
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertNotNull(stack1);
      
      Iterator<CharBuffer> iterator0 = stack1.iterator();
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, (String) null);
      assertEquals("", string2);
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("$k~/nT", "BB'BmBFBfBLBGBz", "ud6^.# 0#8/_q=$`");
      assertEquals("$k~/nT", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.toRootLowerCase("$k~/nT");
      assertEquals("$k~/nt", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(65536);
      assertEquals(0, charBuffer0.position());
      assertEquals(65536, charBuffer0.limit());
      assertEquals(65536, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(65536, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(65536, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = stack1.add(charBuffer0);
      assertTrue(boolean0);
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      assertFalse(stack1.isEmpty());
      assertFalse(stack1.empty());
      assertEquals(1, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(65536, charBuffer0.limit());
      assertEquals(65536, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(65536, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(65536, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(stack1.contains(charBuffer0));
      
      String string5 = StringUtils.replaceChars(",z b7D@JH!>)MD3m^dd", ",N$hUd`+#!74?)", "Object varargs must not be null");
      assertEquals("Oz baD@JHr>sMD3m^tt", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isNotBlank("f");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ",N$hUd`+#!74?)";
      String string6 = StringUtils.join(objectArray0, "$k~/nT", 1937, 2);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals(1, objectArray0.length);
      
      String string7 = StringUtils.stripToNull("-0gUwFKp7");
      assertEquals("-0gUwFKp7", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      String string8 = StringUtils.stripEnd("-0gUwFKp7", (String) null);
      assertEquals("-0gUwFKp7", string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string7));
      assertNotNull(string8);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string9 = StringUtils.rightPad("ud6^.# 0#8/_q=$`", 5, '$');
      assertEquals("ud6^.# 0#8/_q=$`", string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertNotNull(string9);
      
      int int0 = StringUtils.countMatches((CharSequence) "ud6^.# 0#8/_q=$`", '$');
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("Cannot store ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Cannot store ", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.remove("Pu;'+A7n+e3l^Ul", "Pu;'+A7n+e3l^Ul");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("\n", "", (-1310), 817);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("The character ");
      assertEquals("tHE CHARACTER ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "The character ", 102);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.joinWith("n", stringArray0);
      assertEquals("aanabnaenafnaknamnannarnasnavnaynaznbanbenbgnbhnbinbmnbnnbonbrnbsncancenchnconcrncsncuncvncyndandendvndzneenelnenneonesnetneunfanffnfinfjnfonfrnfyngangdnglngnngungvnhanhenhinhonhrnhtnhunhynhznianidnienigniinikninnionisnitniuniwnjanjinjvnkankgnkinkjnkknklnkmnknnkonkrnksnkunkvnkwnkynlanlbnlgnlinlnnlonltnlunlvnmgnmhnminmknmlnmnnmonmrnmsnmtnmynnannbnndnnenngnnlnnnnnonnrnnvnnynocnojnomnornosnpanpinplnpsnptnqunrmnrnnronrunrwnsanscnsdnsensgnsinsknslnsmnsnnsonsqnsrnssnstnsunsvnswntantentgnthntintkntlntnntontrntsnttntwntynugnuknurnuznvenvinvonwanwonxhnyinyonzanzhnzu", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(188, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("aanabnaenafnaknamnannarnasnavnaynaznbanbenbgnbhnbinbmnbnnbonbrnbsncancenchnconcrncsncuncvncyndandendvndzneenelnenneonesnetneunfanffnfinfjnfonfrnfyngangdnglngnngungvnhanhenhinhonhrnhtnhunhynhznianidnienigniinikninnionisnitniuniwnjanjinjvnkankgnkinkjnkknklnkmnknnkonkrnksnkunkvnkwnkynlanlbnlgnlinlnnlonltnlunlvnmgnmhnminmknmlnmnnmonmrnmsnmtnmynnannbnndnnenngnnlnnnnnonnrnnvnnynocnojnomnornosnpanpinplnpsnptnqunrmnrnnronrunrwnsanscnsdnsensgnsinsknslnsmnsnnsonsqnsrnssnstnsunsvnswntantentgnthntintkntlntnntontrntsnttntwntynugnuknurnuznvenvinvonwanwonxhnyinyonzanzhnzu", stringArray0);
      assertFalse(boolean0);
      assertEquals(188, stringArray0.length);
      
      String string2 = StringUtils.upperCase("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("n", (int) 'K');
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.difference("", "n5&%K*/Xg^y8D4");
      assertEquals("n5&%K*/Xg^y8D4", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("", (int) 'K', 'i');
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("n");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string6 = StringUtils.reverseDelimited("", 'K');
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String[] stringArray2 = new String[3];
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = "n";
      stringArray2[1] = "";
      stringArray2[2] = "";
      String string7 = StringUtils.replaceEach("ang3.LocaleUtilsorg.apache.commons.l", stringArray2, stringArray2);
      assertEquals("ang3.LocaleUtilsorg.apache.commons.l", string7);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      assertEquals(3, stringArray2.length);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens("");
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotNull(stringArray3);
      assertEquals(0, stringArray3.length);
      
      String string8 = StringUtils.appendIfMissingIgnoreCase("n", "n", stringArray2);
      assertEquals("n", string8);
      assertNotSame(stringArray2, stringArray3);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(stringArray2.equals((Object)stringArray3));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(string8);
      assertEquals(3, stringArray2.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "n", 0);
      assertEquals((-1), int0);
      
      String string9 = StringUtils.stripToNull(", Length: 0");
      assertEquals(", Length: 0", string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      
      String string10 = StringUtils.unwrap("n5&%K*/Xg^y8D4", 'K');
      assertEquals("n5&%K*/Xg^y8D4", string10);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string6));
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("", "n5&%K*/Xg^y8D4");
      assertEquals("n5&%K*/Xg^y8D4", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("", (int) 'H', 'i');
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("n");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string4 = StringUtils.reverseDelimited("", 'H');
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String[] stringArray2 = new String[3];
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      stringArray2[0] = "n";
      stringArray2[1] = "";
      String string5 = StringUtils.replaceEach("ang3.LocaleUtilsorg.apache.commons.l", stringArray2, stringArray2);
      assertEquals("ang3.LocaleUtilsorg.apache.commons.l", string5);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertEquals(3, stringArray2.length);
      
      String[] stringArray3 = StringUtils.splitPreserveAllTokens("");
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertNotNull(stringArray3);
      assertEquals(0, stringArray3.length);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(", Length: ", "}Uc3mD==DOM2Q`FQ ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.substringBeforeLast("}Uc3mD==DOM2Q`FQ ", "*#");
      assertEquals("}Uc3mD==DOM2Q`FQ ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "}Uc3mD==DOM2Q`FQ ", ", Length: ");
      assertFalse(boolean0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(", Length: "));
      assertNotNull(set0);
      
      String string1 = Locale.lookupTag(linkedList0, set0);
      assertEquals(0, linkedList0.size());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(", Length: "));
      assertNull(string1);
      
      int int0 = StringUtils.getFuzzyDistance("/SMU'<m;", "*#", locale0);
      assertEquals(0, int0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(",", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(2, stringArray0.length);
      
      String string3 = StringUtils.defaultString(",", "0O7xYyi");
      assertEquals(",", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) ", Length: ", (CharSequence) ",", 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.replace("$^~J>$PMjQD>6ZZ#z)", "^vkUZ", "O;GHLXYA(Bcv#|>");
      assertEquals("$^~J>$PMjQD>6ZZ#z)", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBeforeLast("org.apache.commons.lang3.Charsets", "$^~J>$PMjQD>6ZZ#z)");
      assertEquals("org.apache.commons.lang3.Charsets", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\n", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.rightPad("\n", (-1), "tE^vW%9:r*hWrAt1_+");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.stripToNull("\n");
      assertNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase((String) null, "\n", (CharSequence[]) null);
      assertNull(string2);
      
      String string3 = StringUtils.abbreviate((String) null, (-1446));
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast("\n", (-1446));
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.join((short[]) null, 'e');
      assertNull(string5);
      
      String string6 = StringUtils.reverse("\n");
      assertEquals("\n", string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "\n", (String) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "'C,^cQTvdD/1=^");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "'C,^cQTvdD/1=^";
      charSequenceArray0[2] = (CharSequence) "\n";
      boolean boolean4 = StringUtils.equalsAnyIgnoreCase("pAE.,b{x]2S@s\"0]g", charSequenceArray0);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string7 = StringUtils.join((boolean[]) null, 'e', (-1446), (-1));
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) "\n", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.rightPad("\n", (-1), "tE^vW%9:r*hWrAt1_+");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("\n");
      assertNull(string1);
      
      String string2 = StringUtils.abbreviate((String) null, (-1446));
      assertNull(string2);
      
      String string3 = StringUtils.substringAfterLast("\n", (-1446));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((short[]) null, 'e');
      assertNull(string4);
      
      String string5 = StringUtils.reverse("\n");
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\n", (String) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "'C,^cQTvdD/1=^");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(0, byteArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "'C,^cQTvdD/1=^";
      charSequenceArray0[2] = (CharSequence) "\n";
      boolean boolean2 = StringUtils.equalsAnyIgnoreCase("pAE.,b{x]2S@s\"0]g", charSequenceArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, charSequenceArray0.length);
      
      String string6 = StringUtils.join((boolean[]) null, 'e', (-1446), (-1));
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = StringUtils.repeat("maxWith cannot be negative", 12);
      assertEquals("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeAll("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative", "maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(".|R/CY&X;E)").when(supplier0).get();
      String string2 = StringUtils.getIfEmpty((String) null, supplier0);
      assertEquals(".|R/CY&X;E)", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("+:*SJ3/qh<7 dp47XZ", 'U');
      assertEquals("+:*SJ3/qh<7 dp47XZ", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("+:*SJ3/qh<7 dp47XZ");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)1927;
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative"));
      assertNotNull(linkedHashSet0);
      
      boolean boolean1 = linkedHashSet0.add("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative"));
      assertTrue(linkedHashSet0.contains(""));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative"));
      assertTrue(linkedHashSet0.contains(""));
      assertNotNull(iterator0);
      
      String string5 = StringUtils.join(iterator0, 'U');
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains('U'));
      assertTrue(linkedHashSet0.contains(""));
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceChars("|8tb7PWe`pH", 't', 'U');
      assertEquals("|8Ub7PWe`pH", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String string7 = StringUtils.prependIfMissing("04734734028HFo0 eTkjWx:", "_", (CharSequence[]) null);
      assertEquals("_04734734028HFo0 eTkjWx:", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("l 'H;VR", (String) null);
      assertEquals("l 'H;VR", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("6?(F!S,VY^$o<Ixdo", '5');
      assertEquals("6?(F!S,VY^$o<Ixdo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.EMPTY;
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      classLoader0.clearAssertionStatus();
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class0, classLoader1);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      ServiceLoader<String> serviceLoader2 = ServiceLoader.load(class0);
      assertNotSame(serviceLoader2, serviceLoader1);
      assertNotSame(serviceLoader2, serviceLoader0);
      assertFalse(serviceLoader2.equals((Object)serviceLoader1));
      assertFalse(serviceLoader2.equals((Object)serviceLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader2.toString());
      assertNotNull(serviceLoader2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, 7);
      assertFalse(boolean0);
      
      String string3 = StringUtils.repeat("PI", 7);
      assertEquals("PIPIPIPIPIPIPI", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, (String) null, 7, (-607));
      assertNull(string4);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'o';
      charArray0[1] = 'o';
      charArray0[2] = 'T';
      charArray0[3] = 'O';
      charArray0[4] = 'o';
      charArray0[5] = 'o';
      charArray0[6] = 'o';
      charArray0[7] = '5';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "PI", charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'o', 'o', 'T', 'O', 'o', 'o', 'o', '5'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "Cannot store ", (CharSequence) null);
      assertEquals(0, int0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      String string0 = StringUtils.join(longArray0, 'Q');
      assertEquals("0Q0Q0Q0Q0", string0);
      assertArrayEquals(new long[] {0L, 0L, 0L, 0L, 0L}, longArray0);
      assertNotNull(string0);
      assertEquals(5, longArray0.length);
      
      int int1 = StringUtils.compare("0Q0Q0Q0Q0", "0Q0Q0Q0Q0", false);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Cannot store ";
      charSequenceArray0[1] = (CharSequence) "Cannot store ";
      charSequenceArray0[2] = (CharSequence) "0Q0Q0Q0Q0";
      charSequenceArray0[3] = (CharSequence) "Cannot store ";
      charSequenceArray0[4] = (CharSequence) "Cannot store ";
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Cannot store ", (char[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.defaultString("Cannot store ", "Cannot store ");
      assertEquals("Cannot store ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int3 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(5, charSequenceArray0.length);
      
      String string2 = StringUtils.leftPad("89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0", 0, "dh[w^1G/?-(\"wCO)4");
      assertEquals("89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = "gL[OP";
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("Cannot store ", "gL[OP", "I[u@O?@^o");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 4
         // gL[OP
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 36;
      intArray0[1] = 97;
      intArray0[2] = 31;
      intArray0[3] = 8192;
      intArray0[4] = 3;
      intArray0[5] = 3294;
      intArray0[6] = 321;
      intArray0[7] = 298;
      String string0 = StringUtils.join(intArray0, 'K');
      assertEquals("36K97K31K8192K3K3294K321K298", string0);
      assertArrayEquals(new int[] {36, 97, 31, 8192, 3, 3294, 321, 298}, intArray0);
      assertNotNull(string0);
      assertEquals(8, intArray0.length);
      
      int int0 = StringUtils.lastOrdinalIndexOf("36K97K31K8192K3K3294K321K298", "36K97K31K8192K3K3294K321K298", 298);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = StringUtils.difference("n!_FyOn!_FyOjava.lang.bject@3b74fcd4n!_FyOn!_FyOn!_FyO!_FyOn!_FyOn!_Fyn!_FyOCannot store n!_FyOn!_FyO", "XBQH<l#");
      assertEquals("XBQH<l#", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("s]1", 4);
      assertEquals("s]1", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("s]1");
      assertFalse(boolean0);
      
      String string2 = StringUtils.deleteWhitespace("PI");
      assertEquals("PI", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf("XBQH<l#", "s]1", 1400);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("\n", "\n");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "\n", 'f');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isAlpha("\n");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.stripStart("\n", "\n");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertFalse(treeSet0.contains(int1));
      assertNotNull(treeSet0);
      
      Integer integer0 = new Integer(105);
      assertEquals(105, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      boolean boolean2 = treeSet0.add(integer1);
      assertTrue(boolean2);
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(treeSet0.contains(integer0));
      assertTrue(treeSet0.contains(integer1));
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>((SortedSet<? extends Integer>) treeSet0);
      assertEquals(1, priorityQueue0.size());
      assertFalse(treeSet0.contains(integer0));
      assertTrue(treeSet0.contains(integer1));
      assertFalse(priorityQueue0.contains(integer0));
      assertTrue(priorityQueue0.contains(integer1));
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.chop("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace("gpYDH^~'");
      assertEquals("gpYDH^~'", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string4 = StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another", 1453, 'D');
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      charSequenceArray0[0] = (CharSequence) string4;
      charSequenceArray0[2] = (CharSequence) "gpYDH^~'";
      charSequenceArray0[3] = (CharSequence) "nCombiningDiacriticalMarks}+";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "\n";
      charSequenceArray0[7] = (CharSequence) "gpYDH^~'";
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "The String must not be empty", charSequenceArray0[4]);
      assertEquals(28, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      String string0 = StringUtils.prependIfMissing("Object varargs must not be null", "Object varargs must not be null", charSequenceArray0);
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize("6\"T");
      assertEquals("6\"T", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[5] = (-614L);
      longArray0[2] = (-1L);
      longArray0[3] = (-182L);
      longArray0[4] = (-1L);
      longArray0[5] = (-1L);
      longArray0[6] = (-1L);
      longArray0[7] = 1L;
      String string3 = StringUtils.join(longArray0, '-');
      assertEquals("0-0--1--182--1--1--1-1", string3);
      assertArrayEquals(new long[] {0L, 0L, (-1L), (-182L), (-1L), (-1L), (-1L), 1L}, longArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(8, longArray0.length);
      
      int int0 = StringUtils.compare((String) null, "jz=I]TU(~_Y", false);
      assertEquals(1, int0);
      
      int int1 = StringUtils.compareIgnoreCase("jz=I]TU(~_Y", "jz=I]TU(~_Y", true);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.mid("Object varargs must not be null", 0, 49);
      assertEquals("Object varargs must not be null", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.rightPad("f", 0, "f");
      assertEquals("f", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay((String) null, "$k~/nT", (-1732), 32);
      assertNull(string1);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Stack<CharBuffer> stack1 = new Stack<CharBuffer>();
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      
      Iterator<CharBuffer> iterator0 = stack1.iterator();
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, (String) null);
      assertEquals("", string2);
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("$k~/nT", "BB'BmBFBfBLBGBz", "ud6^.# 0#8/_q=$`");
      assertEquals("$k~/nT", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.toRootLowerCase("$k~/nT");
      assertEquals("$k~/nt", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars(",z b7D@JH!>)MD3m^dd", ",N$hUd`+#!74?)", "Object varargs must not be null");
      assertEquals("Oz baD@JHr>sMD3m^tt", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isNotBlank("f");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-66);
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ",N$hUd`+#!74?)";
      String string6 = StringUtils.join(objectArray0, "$k~/nT", 1937, 2);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals(1, objectArray0.length);
      
      String string7 = StringUtils.stripToNull("-0gUwFKp7");
      assertEquals("-0gUwFKp7", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      String string8 = StringUtils.stripEnd("-0gUwFKp7", (String) null);
      assertEquals("-0gUwFKp7", string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.replaceChars("\n", "\n", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("\n");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\n");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "\n";
      charSequenceArray0[4] = (CharSequence) "\n";
      charSequenceArray0[5] = (CharSequence) "\n";
      charSequenceArray0[6] = (CharSequence) "\n";
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean1 = StringUtils.startsWithAny("\n", charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.replace("", "Array element ", "", 57);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 57);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isEmpty("Array element ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      String string2 = StringUtils.substring("_|JtX97P!zkAW-[(TCDft", 57, (-2031));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate("!N1&X] Ipg", 1916, 29);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String[] stringArray1 = StringUtils.split("89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0", "XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(7, stringArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 57;
      String string4 = StringUtils.join(doubleArray0, '\"');
      assertEquals("57.0", string4);
      assertArrayEquals(new double[] {57.0}, doubleArray0, 0.01);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(1, doubleArray0.length);
      
      int int1 = StringUtils.compareIgnoreCase("", "org.apache.commons.lang3.Charsets", false);
      assertEquals((-33), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "!N1&X] Ipg", (CharSequence) "");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string5 = StringUtils.center("57.0", (-1), 'n');
      assertEquals("57.0", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.replaceChars(";{'4fH0`W#8LG,", ')', '3');
      assertEquals(";{'4fH0`W#8LG,", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) ";{'4fH0`W#8LG,";
      charSequenceArray0[1] = (CharSequence) ";{'4fH0`W#8LG,";
      charSequenceArray0[2] = (CharSequence) ";{'4fH0`W#8LG,";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.repeat("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils", (int) ')');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string3 = StringUtils.repeat('R', (-1));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("M,|?{_k_sY", "Cannot store ", 47);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.substringBefore("org.apache.commons.lang3.StringUtils", 1454);
      assertEquals("org.apache.commons.lang3.StringUtils", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("org.apache.commons.lang3.StringUtils");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(11, stringArray1.length);
      
      String string5 = StringUtils.wrapIfMissing("Object varargs must not be null", 'l');
      assertEquals("lObject varargs must not be null", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.contains((CharSequence) ";{'4fH0`W#8LG,", 2147483645);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      String string0 = StringUtils.abbreviate("C*Pm(`m", 40);
      assertEquals("C*Pm(`m", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((int[]) null, '\u0088', 131, 50);
      assertNull(string1);
      
      String string2 = StringUtils.stripEnd("C*Pm(`m", "BB'BmBFBfBLBGBz()*I5 Fn+eVF!>'zn");
      assertEquals("C*Pm(`", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("BB'BmBFBfBLBGBz()*I5 Fn+eVF!>'zn", "C*Pm(`m", 2198, 2198);
      assertEquals("BB'BmBFBfBLBGBz()*I5 Fn+eVF!>'zn", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("9'B1.X|,kv4(", "9'B1.X|,kv4(");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string1 = StringUtils.repeat("The String must not be empty", 8);
      assertEquals("The String must not be emptyThe String must not be emptyThe String must not be emptyThe String must not be emptyThe String must not be emptyThe String must not be emptyThe String must not be emptyThe String must not be empty", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "The String must not be emptyThe String must not be emptyThe String must not be emptyThe String must not be emptyThe String must not be emptyThe String must not be emptyThe String must not be emptyThe String must not be empty";
      charSequenceArray0[1] = (CharSequence) "9'B1.X|,kv4(";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "9'B1.X|,kv4(", charSequenceArray0[0], 356);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.unwrap("^-]Gf2", "9'B1.X|,kv4(");
      assertEquals("^-]Gf2", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("ang3.LocaleUtilsorg.apache.commons.l", (-1564), "ang3.LocaleUtilsorg.apache.commons.l");
      assertEquals("ang3.LocaleUtilsorg.apache.commons.l", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate("org.apache.commons.lang3.StringUtils", 8, 8);
      assertEquals("he.commo", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle("P<YaD&?3DjvY,", "p{InCombiningDiacriticalMarks}+", 64);
      assertEquals("P<YaD&?3DjvY,", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "P<YaD&?3DjvY,", (-1564));
      assertFalse(boolean0);
      
      String string6 = StringUtils.reverse("^-]Gf2");
      assertEquals("2fG]-^", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.mid("org.apache.commons.lang3.StringUtils", (-1074), 3);
      assertEquals("org", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      String string8 = StringUtils.join((int[]) null, '', 13, 36);
      assertNull(string8);
      
      String string9 = StringUtils.removeFirst("org.apache.commons.lang3.StringUtils", "P<YaD&?3DjvY,");
      assertEquals("org.apache.commons.lang3.StringUtils", string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertNotNull(string9);
      
      String string10 = StringUtils.stripEnd("2fG]-^", "2477K167K0K32K3K2289K02477K167K0K32K3K2289K0");
      assertEquals("2fG]-^", string10);
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string7));
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.toRootUpperCase("org.apache.commons.lang3.CharSequenceUtils");
      assertEquals("ORG.APACHE.COMMONS.LANG3.CHARSEQUENCEUTILS", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("7(HJYPov2wr=.:U[", 1356);
      assertEquals("7(HJYPov2wr=.:U[", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, "7(HJYPov2wr=.:U[");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) null, "AO+E%bylgvXr");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string2 = StringUtils.removeEnd("ORG.APACHE.COMMONS.LANG3.CHARSEQUENCEUTILS", (String) null);
      assertEquals("ORG.APACHE.COMMONS.LANG3.CHARSEQUENCEUTILS", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (-735));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("\n", charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "\n");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String string0 = StringUtils.reverseDelimited("\n", 'l');
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string1 = StringUtils.rightPad("\n", 28, "\n");
      assertEquals("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean3 = StringUtils.isAlphaSpace("\n");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      float[] floatArray0 = new float[0];
      String string2 = StringUtils.join(floatArray0, 'B', (-1), (-1));
      assertEquals("", string2);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.replaceChars(";{'4fH0`W#8LG,", ')', '3');
      assertEquals(";{'4fH0`W#8LG,", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty(";{'4fH0`W#8LG,");
      assertEquals(";{'4fH0`W#8LG,", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ";{'4fH0`W#8LG,";
      long[] longArray0 = new long[0];
      String string2 = StringUtils.join(longArray0, '}', 1002, (-124));
      assertEquals("", string2);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, longArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace(";{'4fH0`W#8LG,");
      assertFalse(boolean0);
      
      String string3 = StringUtils.substringBefore("", 0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("Supplied value must be a valid byte literal between -32768 and 32767: [", 1002);
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = "\\u";
      int int0 = StringUtils.indexOfAny((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", string5);
      assertEquals(1, int0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = "\\u";
      int int0 = StringUtils.indexOfAny((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", string1);
      assertEquals(1, int0);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)1023;
      shortArray0[2] = (short)15;
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
      
      String string0 = StringUtils.joinWith((String) null, charSequenceArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.replaceOnce("", ";+On:8E>sXhMU\"", "Minimum abbreviation width with offset is %d");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string2 = StringUtils.getDigits("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.chomp("qf#uC-t8X?ZFt$WSa");
      assertEquals("qf#uC-t8X?ZFt$WSa", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '.';
      String string1 = StringUtils.join(charArray0, '.', 2715, 2715);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'.'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, charArray0.length);
      
      String string2 = StringUtils.stripAccents("...");
      assertEquals("...", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("YJmJ};'~", 'Z');
      assertEquals("ZYJmJ};'~Z", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(locale0));
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add(locale0);
      assertTrue(boolean0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(locale0));
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) arrayList0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(arrayList0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertNotNull(list0);
      
      String string4 = StringUtils.upperCase("", locale0);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(".A6YQ", (-335));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.stripAccents(";zFF<9uqKc");
      assertEquals(";zFF<9uqKc", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace(":Q<-./&2WQ)G=");
      assertEquals(":Q<-./&2WQ)G=", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfEmpty(";zFF<9uqKc", ";zFF<9uqKc");
      assertEquals(";zFF<9uqKc", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string3 = StringUtils.overlay(";zFF<9uqKc", ";zFF<9uqKc", (short)15, (-755));
      assertEquals(";zFF<9uqKc", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[0] = (CharSequence) ";zFF<9uqKc";
      charSequenceArray0[1] = (CharSequence) ";zFF<9uqKc";
      charSequenceArray0[2] = (CharSequence) ";zFF<9uqKc";
      charSequenceArray0[3] = (CharSequence) ";zFF<9uqKc";
      charSequenceArray0[4] = (CharSequence) ";zFF<9uqKc";
      charSequenceArray0[5] = (CharSequence) ";zFF<9uqKc";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = StringUtils.replaceChars("\n", "\n", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'A';
      charArray0[3] = 'd';
      charArray0[4] = 'd';
      charArray0[5] = 'd';
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'d', 'd', 'A', 'd', 'd', 'd'}, charArray0);
      assertEquals(6, charArray0.length);
      
      String string1 = StringUtils.center("null/empty items", 1751, 'd');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\n", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'d', 'd', 'A', 'd', 'd', 'd'}, charArray0);
      assertEquals(6, charArray0.length);
      
      boolean boolean1 = StringUtils.isNumericSpace("\n");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "\n", (CharSequence) string1, 1751);
      assertEquals((-1), int1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "null/empty items";
      charSequenceArray0[2] = (CharSequence) "null/empty items";
      charSequenceArray0[3] = (CharSequence) string1;
      charSequenceArray0[4] = (CharSequence) "null/empty items";
      charSequenceArray0[5] = (CharSequence) "\n";
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("l 'H;VR", (String) null);
      assertEquals("l 'H;VR", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("l 'H;VR", "l 'H;VR");
      assertNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("l 'H;VR");
      assertEquals("l 'h;vr", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("l 'H;VR"));
      assertNotNull(linkedList0);
      
      short[] shortArray0 = new short[0];
      String string3 = StringUtils.join(shortArray0, '5', (int) (short)100, (int) (short)0);
      assertEquals("", string3);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(0, shortArray0.length);
      
      String string4 = StringUtils.rightPad("l 'h;vr", (int) (short)100, (String) null);
      assertEquals("l 'h;vr                                                                                             ", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.stripAccents("l 'H;VR");
      assertEquals("l 'H;VR", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)0;
      String string6 = StringUtils.join(intArray0, '5');
      assertEquals("0", string6);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals(1, intArray0.length);
      
      String string7 = StringUtils.replacePattern((String) null, (String) null, "tor");
      assertNull(string7);
      
      int int0 = StringUtils.compare("Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("l 'H;VR", (String) null);
      assertEquals("l 'H;VR", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("l 'H;VR", "l 'H;VR");
      assertNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("l 'H;VR");
      assertEquals("l 'h;vr", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("l 'H;VR"));
      assertNotNull(linkedList0);
      
      String string3 = StringUtils.rightPad("l 'h;vr", (int) (short)100, (String) null);
      assertEquals("l 'h;vr                                                                                             ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripAccents("l 'H;VR");
      assertEquals("l 'H;VR", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (int) (short)15;
      String string5 = StringUtils.replacePattern((String) null, (String) null, (String) null);
      assertNull(string5);
      
      int int0 = StringUtils.compare("Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (-735));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      String string0 = StringUtils.leftPad("\n", 2276, "\n");
      assertNotNull(string0);
      
      String string1 = "y&A,D`^/ZMy?";
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "y&A,D`^/ZMy?", (-864), 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -864
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) "Cannot store ", (CharSequence) "Cannot store ");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("X97P!zkAW-[(TCDft", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("Cannot store ", '0', '0');
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("X97P!zkAW-[(TCDft"));
      assertNotNull(arrayDeque0);
      
      boolean boolean1 = arrayDeque0.add("org.apache.commons.lang3.RegExUtils");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains("org.apache.commons.lang3.RegExUtils"));
      assertFalse(arrayDeque0.contains("X97P!zkAW-[(TCDft"));
      
      String string1 = StringUtils.replaceOnce("X97P!zkAW-[(TCDft", "X97P!zkAW-[(TCDft", "org.apache.commons.lang3.RegExUtils");
      assertEquals("org.apache.commons.lang3.RegExUtils", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("offset cannot be negative", '0');
      assertEquals("0offset cannot be negative0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "org.apache.commons.lang3.RegExUtils";
      String string3 = StringUtils.replaceEachRepeatedly("offset cannot be negative", stringArray1, stringArray0);
      assertEquals("offset cannot be negative", string3);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "org.apache.commons.lang3.RegExUtils", 12);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.capitalize("offset cannot be negative");
      assertEquals("Offset cannot be negative", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String string0 = StringUtils.rightPad(", Length: 0", 0, 'k');
      assertEquals(", Length: 0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("The character ", 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.difference(", Length: 0", "k9%OU~Qe|;%");
      assertEquals("k9%OU~Qe|;%", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("org.apache.commons.lang3.StringUtils", 0, 'i');
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "org.apache.commons.lang3.StringUtils";
      objectArray0[1] = (Object) ", Length: 0";
      String string4 = StringUtils.joinWith("^p&&", objectArray0);
      assertEquals("org.apache.commons.lang3.StringUtils^p&&, Length: 0", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(2, objectArray0.length);
      
      boolean boolean0 = StringUtils.isNumeric("k9%OU~Qe|;%");
      assertFalse(boolean0);
      
      String string5 = StringUtils.rightPad("fr,N$hUd`+#!74?)", (int) 'i', "^p&&");
      assertEquals("fr,N$hUd`+#!74?)^p&&^p&&^p&&^p&&^p&&^p&&^p&&^p&&^p&&^p&&^p&&^p&&^p&&^p&&^p&&^p&&^p&&^p&&^p&&^p&&^p&&^p&&^", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.uncapitalize("Minimum abbreviation width is %d");
      assertEquals("minimum abbreviation width is %d", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("k9%OU~Qe|;%", "()*I5 Fn+eVF!>'zn");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "_{hjT!A53iQ", 3332);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.chomp("xV+U!s{v5*");
      assertEquals("xV+U!s{v5*", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      String string8 = StringUtils.join((char[]) null, 'i');
      assertNull(string8);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", ", Length: 0");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("p{InCombiningDilcriticalMarks}+", "p{InCombiningDilcriticalMarks}+");
      assertEquals("p{InCombiningDilcriticalMarks}+", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("p{InCombiningDilcriticalMarks}+");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.repeat("I", 1172);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAllLowerCase("p{InCombiningDilcriticalMarks}+");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.repeat((String) null, (-1301));
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("ndex: ", "EK\"8,X:0|7G[=@tW`S");
      assertEquals("EK\"8,X:0|7G[=@tW`Sndex: EK\"8,X:0|7G[=@tW`S", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "\n", (CharSequence) "EK\"8,X:0|7G[=@tW`Sndex: EK\"8,X:0|7G[=@tW`S");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.remove("fBqvE^T=l9p", "EK\"8,X:0|7G[=@tW`S");
      assertEquals("fBqvE^T=l9p", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("DN^_b&WyB", "ndex: ", (-1), (-1));
      assertEquals("ndex: DN^_b&WyB", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.getDigits("Search and Replace array lengths don't match: ");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("l 'H;VR", (String) null);
      assertEquals("l 'H;VR", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "l 'H;VR";
      charSequenceArray0[1] = (CharSequence) "l 'H;VR";
      charSequenceArray0[2] = (CharSequence) "l 'H;VR";
      charSequenceArray0[3] = (CharSequence) "l 'H;VR";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string1 = StringUtils.unwrap("6?(F!S,VY^$o<Ixdo", 'e');
      assertEquals("6?(F!S,VY^$o<Ixdo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase(" ", charSequenceArray0[1], charSequenceArray0);
      assertEquals(" l 'H;VR", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.substringBetween(", Lengt Length: ", "org.ap.commons.lang3.Charsets", "I ");
      assertNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) ", Lengt Length: ", (CharSequence) "l 'H;VR");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substring(" ", 5, 5);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.truncate("org.apache.commons.lang3.Charsets", 15, 5);
      assertEquals("ons.l", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0", "6?(F!S,VY^$o<Ixdo");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      String string6 = StringUtils.defaultString("p{InCombiningDiacriticalMarks}+The String must not be empty");
      assertEquals("p{InCombiningDiacriticalMarks}+The String must not be empty", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.wrapIfMissing(" ", "89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0");
      assertEquals("89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0 89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(11, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "The String must not be empty";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      String string0 = StringUtils.join(shortArray0, '!', (-145), (-2034458190));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(19, shortArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("a#4`gF|4s3S5+d>\"l0", (String) null, (int) (short)0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.upperCase("a#4`gF|4s3S5+d>\"l0");
      assertEquals("A#4`GF|4S3S5+D>\"L0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join((char[]) null, '!', (int) (short)0, (int) (short)0);
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, charSequenceArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      String string0 = StringUtils.swapCase(" ");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right(" ", 169);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      String string2 = StringUtils.rightPad(" ", 1, 'J');
      assertEquals(" ", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((char[]) null, 'g', 73, 335);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isEmpty(" ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.stripEnd("wia", "$+%}AA,c+-;ij?1|p");
      assertEquals("wia", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 3L;
      String string1 = StringUtils.removePattern((String) null, "$+%}AA,c+-;ij?1|p");
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "wia", 2647);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replace("Z(WyIU8m6AB\"[|=_", "A{1nmr\"50zsI/", "wia");
      assertEquals("Z(WyIU8m6AB\"[|=_", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("CaRSi", "");
      assertEquals("CaRSi", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("}gG1~'e|):O0hmIF", 1114111);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("", 2168, "emAwS0Of");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 2;
      longArray0[1] = (long) 2;
      longArray0[2] = (long) 2;
      longArray0[3] = (long) 2;
      longArray0[4] = (long) 2;
      longArray0[5] = (long) 2;
      longArray0[6] = (long) 2;
      longArray0[7] = (long) 2;
      longArray0[8] = (long) 2;
      String string0 = StringUtils.join(longArray0, 'u', 581, 321);
      assertEquals("", string0);
      assertArrayEquals(new long[] {2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L}, longArray0);
      assertNotNull(string0);
      assertEquals(9, longArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace("{}");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore("Comparator should not be null.", 16);
      assertEquals("Comparator should not be null.", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("hBY@u0XBOCCd8 F", 581);
      assertEquals("hBY@u0XBOCCd8 F", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width is %d", "8c[RWw.1X!Sd&bt7D*.");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'q';
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)579;
      shortArray0[1] = (short)321;
      shortArray0[2] = (short)1095;
      String string0 = StringUtils.join(shortArray0, 'q');
      assertEquals("579q321q1095", string0);
      assertArrayEquals(new short[] {(short)579, (short)321, (short)1095}, shortArray0);
      assertNotNull(string0);
      assertEquals(3, shortArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "579q321q1095";
      charSequenceArray0[1] = (CharSequence) "579q321q1095";
      charSequenceArray0[2] = (CharSequence) "579q321q1095";
      charSequenceArray0[3] = (CharSequence) "579q321q1095";
      int int0 = StringUtils.lastIndexOfAny("579q321q1095", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
      
      Integer integer0 = new Integer((short)321);
      assertEquals(321, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertFalse(treeSet0.contains(integer0));
      assertNotNull(treeSet0);
      
      Integer integer1 = new Integer((-1357));
      assertEquals((-1357), (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(1);
      assertEquals(1, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      boolean boolean0 = treeSet0.add(integer2);
      assertTrue(boolean0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertTrue(treeSet0.contains(1));
      assertFalse(treeSet0.contains(int0));
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>((SortedSet<? extends Integer>) treeSet0);
      assertEquals(1, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(int0));
      assertTrue(priorityQueue0.contains(1));
      assertTrue(treeSet0.contains(1));
      assertFalse(treeSet0.contains(int0));
      assertNotNull(priorityQueue0);
      
      String string1 = StringUtils.chop("gFeuq(aV6?(F!S,VY^$o<Ixdo");
      assertEquals("gFeuq(aV6?(F!S,VY^$o<Ixd", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("fQA7");
      assertEquals("fQA7", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.leftPad("g", 76, "~jO");
      assertEquals("~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jOg", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("6j@$&BxK1--#U E|>", "~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jO~jOg");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 76;
      floatArray0[1] = (-8548.0F);
      String string2 = StringUtils.replace("g", "6j@$&BxK1--#U E|>", "X;-+QZ", 0);
      assertEquals("g", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 4;
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, "The character ", (-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      String string0 = StringUtils.chop("+dgKY2L93!A");
      assertEquals("+dgKY2L93!", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = null;
      int int0 = StringUtils.countMatches((CharSequence) "+dgKY2L93!", (CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replace("+dgKY2L93!", "+dgKY2L93!", "k3Df|.<Z_Arja`+a", 0);
      assertEquals("+dgKY2L93!", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)54;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '3', (int) (short)54, 3579);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 54
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("\n", "\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "\n", 'f');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.leftPad("{w", 0, "nCombiningDiacriticalMarks}+");
      assertEquals("{w", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAlpha("{w");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string2 = StringUtils.stripStart("\n", "{w");
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertFalse(treeSet0.contains(int1));
      assertNotNull(treeSet0);
      
      Integer integer0 = new Integer(105);
      assertEquals(105, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean3 = treeSet0.add(integer1);
      assertTrue(boolean3);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(treeSet0.contains(int0));
      assertTrue(treeSet0.contains(integer1));
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>((SortedSet<? extends Integer>) treeSet0);
      assertEquals(1, priorityQueue0.size());
      assertFalse(treeSet0.contains(int0));
      assertTrue(treeSet0.contains(integer1));
      assertTrue(priorityQueue0.contains(integer1));
      assertFalse(priorityQueue0.contains(int0));
      assertNotNull(priorityQueue0);
      
      String string3 = StringUtils.chop("\n");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.normalizeSpace("gpYDH^~'");
      assertEquals("gpYDH^~'", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string5 = StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another", 1453, 'D');
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      charSequenceArray0[0] = (CharSequence) string5;
      charSequenceArray0[1] = (CharSequence) "{w";
      charSequenceArray0[2] = (CharSequence) "gpYDH^~'";
      charSequenceArray0[3] = (CharSequence) "nCombiningDiacriticalMarks}+";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "\n";
      charSequenceArray0[6] = (CharSequence) "\n";
      charSequenceArray0[7] = (CharSequence) "gpYDH^~'";
      boolean boolean4 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertEquals(8, charSequenceArray0.length);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "The String must not be empty", charSequenceArray0[4]);
      assertEquals(28, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substring("Locale must not be null", 77, 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Locale must not be null", (CharSequence) "");
      assertEquals(23, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.left("Locale must not be null", 5);
      assertEquals("Local", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Local");
      assertFalse(boolean0);
      
      String string1 = StringUtils.left("8v9s", 5);
      assertEquals("8v9s", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("0480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC20480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC2", "Locale must not be null", "0480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC20480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC2");
      assertNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 't');
      assertEquals(0, int0);
      
      String string3 = StringUtils.stripEnd("Local", "8v9s");
      assertEquals("Local", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Local", "Locale must not be null");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Local");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Locale must not be null";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "8v9s";
      String string4 = StringUtils.joinWith("Local", objectArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(3, objectArray0.length);
      
      boolean boolean2 = StringUtils.isNumeric("8v9s");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string5 = StringUtils.rightPad((String) null, (-781), "_{hjT!A53iQ");
      assertNull(string5);
      
      String string6 = StringUtils.uncapitalize((String) null);
      assertNull(string6);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("fB|qvE^T=(l=.p", "Local");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int2 = StringUtils.indexOf((CharSequence) "Local", 4014);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string7 = StringUtils.chomp(" in an array of ");
      assertEquals(" in an array of ", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      
      String string8 = StringUtils.join((char[]) null, 'W');
      assertNull(string8);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase((CharSequence) null, "_{hjT!A53iQ");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      String string9 = StringUtils.stripAccents((String) null);
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("...", 'd');
      assertEquals("...", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("BB'BmBFBfBLBGBz");
      assertEquals("BB'BmBFBfBLBGBz", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "eA";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "BB'BmBFBfBLBGBz";
      charSequenceArray0[3] = (CharSequence) "...";
      charSequenceArray0[4] = (CharSequence) "...";
      charSequenceArray0[5] = (CharSequence) "eA";
      charSequenceArray0[7] = (CharSequence) "BB'BmBFBfBLBGBz";
      String string2 = StringUtils.appendIfMissingIgnoreCase("eA", "...", charSequenceArray0);
      assertEquals("eA", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'Y';
      charArray0[1] = 'd';
      charArray0[2] = 'd';
      charArray0[3] = 'd';
      charArray0[5] = 'Y';
      charArray0[6] = 'Y';
      String string3 = StringUtils.join(charArray0, 'Y', 58, (-1985));
      assertEquals("", string3);
      assertArrayEquals(new char[] {'Y', 'd', 'd', 'd', '\u0000', 'Y', 'Y'}, charArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(7, charArray0.length);
      
      String string4 = StringUtils.stripAccents("HUG!X~i_UJw|/m");
      assertEquals("HUG!X~i_UJw|/m", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("eA", charSequenceArray0[3]);
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, charSequenceArray0.length);
      
      String string5 = StringUtils.stripAccents((String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.uncapitalize("6\"T");
      assertEquals("6\"T", string1);
      assertNotNull(string1);
      
      long[] longArray0 = new long[8];
      longArray0[2] = (-1L);
      longArray0[4] = (-1L);
      longArray0[5] = (-182L);
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrap("P~3", 'N');
      assertEquals("NP~3N", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.rightPad("P~3", 9, '6');
      assertEquals("P~3666666", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("P~3666666", 380);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.difference((String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.leftPad((String) null, 380, 'p');
      assertNull(string4);
      
      String string5 = StringUtils.rightPad((String) null, (-4369));
      assertNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "P~3666666", 2966);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      String string0 = StringUtils.stripEnd("w3", "w3");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "w3");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.abbreviateMiddle("w3", "Minimum abbreviation width with offset is %d", 64);
      assertEquals("w3", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.replaceChars("\n", "\n", "\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("\n");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\n");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "\n";
      charSequenceArray0[5] = (CharSequence) "\n";
      charSequenceArray0[6] = (CharSequence) "\n";
      charSequenceArray0[7] = (CharSequence) "";
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.stripStart("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", charSequenceArray0[0]);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.rotate("org.apache.commons.lang3.LocaleUtils", Integer.MIN_VALUE);
      assertEquals("ang3.LocaleUtilsorg.apache.commons.l", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("ang3.LocaleUtilsorg.apache.commons.l", "ang3.LocaleUtilsorg.apache.commons.l");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("", "ang3.LocaleUtilsorg.apache.commons.l", 0);
      assertSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(0, stringArray2.length);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      List<Locale.LanguageRange> list0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(""));
      assertNotNull(treeSet0);
      
      boolean boolean2 = treeSet0.add("XRr31{q!1K\"25L)'");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(treeSet0.contains("XRr31{q!1K\"25L)'"));
      assertFalse(treeSet0.contains(""));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Stream<String> stream0 = treeSet0.stream();
      assertTrue(treeSet0.contains("XRr31{q!1K\"25L)'"));
      assertFalse(treeSet0.contains(""));
      assertNotNull(stream0);
      
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) treeSet0, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String[] stringArray0 = StringUtils.split((String) null, 'D');
      assertNull(stringArray0);
      
      String string0 = StringUtils.replaceOnceIgnoreCase((String) null, (String) null, "\r");
      assertNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'D';
      charArray0[1] = 'D';
      charArray0[2] = 'D';
      charArray0[3] = 'g';
      charArray0[4] = 'D';
      charArray0[5] = 'D';
      charArray0[6] = 'D';
      charArray0[7] = 'D';
      charArray0[8] = 'D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'D', 'D', 'D', 'g', 'D', 'D', 'D', 'D', 'D'}, charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("DDDgDDDDD", charBuffer0.toString());
      assertEquals(9, charBuffer0.limit());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      assertEquals(9, charArray0.length);
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharBuffer charBuffer1 = StringUtils.getIfBlank(charBuffer0, supplier0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {'D', 'D', 'D', 'g', 'D', 'D', 'D', 'D', 'D'}, charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("DDDgDDDDD", charBuffer0.toString());
      assertEquals(9, charBuffer0.limit());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasArray());
      assertEquals("DDDgDDDDD", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(9, charBuffer1.limit());
      assertEquals(9, charBuffer1.length());
      assertEquals(9, charBuffer1.capacity());
      assertEquals(0, charBuffer1.position());
      assertEquals(9, charBuffer1.remaining());
      assertNotNull(charBuffer1);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 6, 'J');
      assertEquals("JJJJJJ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'J';
      charArray0[1] = 'J';
      charArray0[2] = 'J';
      charArray0[3] = '?';
      charArray0[4] = 'J';
      charArray0[5] = 'J';
      charArray0[6] = 'J';
      charArray0[7] = 'J';
      charArray0[8] = 'J';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "JJJJJJ", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'J', 'J', 'J', '?', 'J', 'J', 'J', 'J', 'J'}, charArray0);
      assertEquals(9, charArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "JJJJJJ", (CharSequence) null, 6);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("JJJJJJ", ", Length: 0");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = "o4";
      String string2 = StringUtils.leftPad("o4", (-1), 'J');
      assertEquals("o4", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte) (-96);
      byteArray0[4] = (byte)6;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "Uy(rtUf,:&S");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Uy(rtUf,:&S
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = StringUtils.left("Locale must not be null", 5);
      assertEquals("Local", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Local");
      assertFalse(boolean0);
      
      String string1 = StringUtils.left("8v9s", 5);
      assertEquals("8v9s", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("0480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC20480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC2", "Locale must not be null", "0480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC20480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC2");
      assertNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 't');
      assertEquals(0, int0);
      
      String string3 = StringUtils.stripEnd("Local", "8v9s");
      assertEquals("Local", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Local", "Locale must not be null");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Local");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "Locale must not be null";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) "8v9s";
      String string4 = StringUtils.joinWith("Local", objectArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(3, objectArray0.length);
      
      boolean boolean2 = StringUtils.isNumeric("8v9s");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string5 = StringUtils.rightPad((String) null, (-781), "_{hjT!A53iQ");
      assertNull(string5);
      
      String string6 = StringUtils.uncapitalize("8v9s");
      assertEquals("8v9s", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("fB|qvE^T=(l=.p", "Local");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int2 = StringUtils.indexOf((CharSequence) "Local", 4014);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string7 = StringUtils.chomp(" in an array of ");
      assertEquals(" in an array of ", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      String string8 = StringUtils.join((char[]) null, 'W');
      assertNull(string8);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase((CharSequence) null, "_{hjT!A53iQ");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
      
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.stripEnd("JKB?e", "JKB?e");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", 350);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((short[]) null, '3', (-4714), (-4714));
      assertNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      String string0 = StringUtils.removePattern("l_~'1", "l_~'1");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("l_~'1");
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap(" vs ", "Invalid locale format: ");
      assertEquals(" vs ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("lB");
      assertEquals("lB", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(" vs ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean2 = StringUtils.startsWithAny("l_~'1", charSequenceArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substring("Locale must not be null", 77, 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      String string2 = StringUtils.join(charArray0, 'Y', 57, (-2716));
      assertEquals("", string2);
      assertArrayEquals(new char[] {'Y', 'Y', 'Y'}, charArray0);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(3, charArray0.length);
      
      String string3 = StringUtils.capitalize("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.removePattern("", "");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.defaultString("");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.unwrap("NlcnIe3", "Array element ");
      assertEquals("NlcnIe3", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("9M*9AUfA");
      assertEquals("9M*9AUfA", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "9M*9AUfA", "9M*9AUfA");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayVariant(locale0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(string1);
      
      Locale locale1 = Locale.FRENCH;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      String string2 = locale1.toLanguageTag();
      assertEquals("fr", string2);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotNull(string2);
      
      String string3 = StringUtils.lowerCase("g<6G!)F&R7kaFv-yy", locale1);
      assertEquals("g<6g!)f&r7kafv-yy", string3);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotNull(string3);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("g<6g!)f&r7kafv-yy", "g<6g!)f&r7kafv-yy", "g<6G!)F&R7kaFv-yy");
      assertEquals("g<6G!)F&R7kaFv-yy", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0, classLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Class<String> class1 = String.class;
      ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class1);
      assertSame(class1, class0);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      Class<String> class2 = String.class;
      ServiceLoader<String> serviceLoader2 = ServiceLoader.load(class2, classLoader1);
      assertSame(class2, class0);
      assertSame(class2, class1);
      assertNotSame(serviceLoader2, serviceLoader0);
      assertNotSame(serviceLoader2, serviceLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(serviceLoader2.equals((Object)serviceLoader0));
      assertFalse(serviceLoader2.equals((Object)serviceLoader1));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader2.toString());
      assertNotNull(serviceLoader2);
      
      Iterator<String> iterator0 = serviceLoader2.iterator();
      assertSame(class2, class0);
      assertSame(class2, class1);
      assertNotSame(serviceLoader2, serviceLoader0);
      assertNotSame(serviceLoader2, serviceLoader1);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(serviceLoader2.equals((Object)serviceLoader0));
      assertFalse(serviceLoader2.equals((Object)serviceLoader1));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader2.toString());
      assertNotNull(iterator0);
      
      String string5 = StringUtils.join(iterator0, '6');
      assertEquals("", string5);
      assertSame(class2, class0);
      assertSame(class2, class1);
      assertNotSame(serviceLoader2, serviceLoader0);
      assertNotSame(serviceLoader2, serviceLoader1);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(serviceLoader2.equals((Object)serviceLoader0));
      assertFalse(serviceLoader2.equals((Object)serviceLoader1));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader2.toString());
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.stripStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequenceArray0[0]);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.rotate("org.apache.commons.lang3.LocaleUtils", Integer.MIN_VALUE);
      assertEquals("ang3.LocaleUtilsorg.apache.commons.l", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("ang3.LocaleUtilsorg.apache.commons.l", "ang3.LocaleUtilsorg.apache.commons.l");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", "ang3.LocaleUtilsorg.apache.commons.l", 0);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(63, stringArray2.length);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 0);
      assertSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotNull(stringArray3);
      assertEquals(0, stringArray3.length);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray3);
      assertEquals((-1), int2);
      assertSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, stringArray3.length);
      
      int int3 = StringUtils.getLevenshteinDistance((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(0, int3);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      boolean boolean2 = StringUtils.isAlpha("org.apache.commons.lang3.LocaleUtils");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = StringUtils.chop("");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String[] stringArray4 = StringUtils.stripAll(stringArray2);
      assertNotSame(stringArray4, stringArray2);
      assertNotSame(stringArray4, stringArray0);
      assertNotSame(stringArray4, stringArray1);
      assertNotSame(stringArray4, stringArray3);
      assertNotSame(stringArray2, stringArray4);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray3);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray0));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray3));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray4);
      assertEquals(63, stringArray4.length);
      assertEquals(63, stringArray2.length);
      
      int int4 = StringUtils.countMatches((CharSequence) "AbJ", charSequenceArray0[0]);
      assertEquals(0, int4);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals(1, charSequenceArray0.length);
      
      String[] stringArray5 = StringUtils.split("?", "AbJ", Integer.MIN_VALUE);
      assertNotSame(stringArray5, stringArray4);
      assertNotSame(stringArray5, stringArray2);
      assertNotSame(stringArray5, stringArray3);
      assertNotSame(stringArray5, stringArray0);
      assertNotSame(stringArray5, stringArray1);
      assertFalse(stringArray5.equals((Object)stringArray4));
      assertFalse(stringArray5.equals((Object)stringArray2));
      assertFalse(stringArray5.equals((Object)stringArray3));
      assertFalse(stringArray5.equals((Object)stringArray0));
      assertFalse(stringArray5.equals((Object)stringArray1));
      assertNotNull(stringArray5);
      assertEquals(1, stringArray5.length);
      
      String string5 = StringUtils.trimToNull("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String[] stringArray6 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.Charsets", "Aborting to protect against StackOverflowError - output of one loop is the input of another", (-199));
      assertNotSame(stringArray6, stringArray4);
      assertNotSame(stringArray6, stringArray2);
      assertNotSame(stringArray6, stringArray3);
      assertNotSame(stringArray6, stringArray1);
      assertNotSame(stringArray6, stringArray0);
      assertNotSame(stringArray6, stringArray5);
      assertFalse(stringArray6.equals((Object)stringArray4));
      assertFalse(stringArray6.equals((Object)stringArray2));
      assertFalse(stringArray6.equals((Object)stringArray3));
      assertFalse(stringArray6.equals((Object)stringArray1));
      assertFalse(stringArray6.equals((Object)stringArray0));
      assertFalse(stringArray6.equals((Object)stringArray5));
      assertNotNull(stringArray6);
      assertEquals(1, stringArray6.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfEmpty("/La+GwHJ!;VJb]", supplier0);
      assertEquals("/La+GwHJ!;VJb]", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("5t_s:?i &g`z.S", "5t_s:?i &g`z.S");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("", (-3063), "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("", "", "JD4", (-3063));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 2516);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "5t_s:?i &g`z.S";
      stringArray0[1] = "5t_s:?i &g`z.S";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "5t_s:?i &g`z.S";
      stringArray0[5] = "";
      stringArray0[6] = "5t_s:?i &g`z.S";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(7, stringArray0.length);
      
      String string4 = StringUtils.chomp("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      String string5 = StringUtils.removeFirst("", "#aaKn+kY6X4}");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToEmpty("DOj>/qR=");
      assertEquals("DOj>/qR=", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte) (-69);
      String string7 = StringUtils.join(byteArray0, '0', 39, (int) (byte) (-69));
      assertEquals("", string7);
      assertArrayEquals(new byte[] {(byte) (-108), (byte) (-69)}, byteArray0);
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "6?(F!S,VY^$o<Ixdo");
      assertNull(stringArray0);
      
      String string0 = StringUtils.replace(".|R/CY&X;E)", ".|R/CY&X;E)", "l 'H;VR", 57);
      assertEquals("l 'H;VR", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "6?(F!S,VY^$o<Ixdo", (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((byte[]) null, 'W');
      assertNull(string1);
      
      String string2 = StringUtils.substringAfter("l 'H;VR", ">#~8VH{!zN");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripStart(",$fqqZGxf=+p(y;j", "^=@E l<:K");
      assertEquals(",$fqqZGxf=+p(y;j", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string4 = locale0.getExtension('v');
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNull(string4);
      
      String string5 = StringUtils.substringAfterLast("...", 3327);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.center(",$fqqZGxf=+p(y;j", 3327);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ">#~8VH{!zN", (CharSequence) ">#~8VH{!zN", 2854);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Cannot store ";
      charSequenceArray0[1] = (CharSequence) "Cannot store ";
      charSequenceArray0[2] = (CharSequence) "Cannot store ";
      charSequenceArray0[3] = (CharSequence) "Cannot store ";
      charSequenceArray0[4] = (CharSequence) "Cannot store ";
      charSequenceArray0[5] = (CharSequence) "Cannot store ";
      boolean boolean0 = StringUtils.endsWithAny("Cannot store ", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string0 = StringUtils.replacePattern("Al4O&dFE8f", "Arguments cannot both be null", "#Op/mG<k6WeQ3#I~$0v");
      assertEquals("Al4O&dFE8f", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare(" vs ", "#Op/mG<k6WeQ3#I~$0v");
      assertEquals((-3), int0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("Cannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("Minimum abbreviation width is %d", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "?0wuO/^'~";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width is %d";
      charSequenceArray0[2] = (CharSequence) "?0wuO/^'~";
      charSequenceArray0[3] = (CharSequence) "?0wuO/^'~";
      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width is %d";
      boolean boolean1 = StringUtils.endsWithAny("Cannot store ", charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string0 = StringUtils.replacePattern("Cannot store ", "Cannot store ", "]EpMbwQ");
      assertEquals("]EpMbwQ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("Y1{$p$RL(UZGG:Z", "\"}(\u0003Op+surX2");
      assertEquals(55, int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes("Locale must not be nullLocale must not be null", (Charset) null);
      assertNotNull(byteArray0);
      assertEquals(46, byteArray0.length);
      
      String string0 = StringUtils.toEncodedString(byteArray0, (Charset) null);
      assertEquals("Locale must not be nullLocale must not be null", string0);
      assertNotNull(string0);
      assertEquals(46, byteArray0.length);
      
      String string1 = StringUtils.deleteWhitespace("HC+0");
      assertEquals("HC+0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[2];
      String string2 = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[0] = "org.apache.commons.lang3.ArrayUtils";
      stringArray0[1] = "Locale must not be nullLocale must not be null";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      String[] stringArray2 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray2.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 12);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.endsWithAny("Locale must not be nullLocale must not be null", stringArray2);
      assertTrue(boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray2.length);
      
      char char0 = '|';
      String string4 = StringUtils.unwrap((String) null, '|');
      assertNull(string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "org.apache.commons.lang3.ArrayUtils", 12);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.repeat("$Nr", 12);
      assertEquals("$Nr$Nr$Nr$Nr$Nr$Nr$Nr$Nr$Nr$Nr$Nr$Nr", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("vWNp{o;", "vWNp{o;", (-607), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("jcT9]F56N{lDHnz", charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(byteArray0);
      assertEquals(15, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeStart("o$$&Og-vA(~:f", (String) null);
      assertEquals("o$$&Og-vA(~:f", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank("o$$&Og-vA(~:f", "o$$&Og-vA(~:f");
      assertEquals("o$$&Og-vA(~:f", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "o$$&Og-vA(~:f";
      stringArray0[1] = "o$$&Og-vA(~:f";
      stringArray0[2] = null;
      stringArray0[3] = null;
      String string3 = StringUtils.replaceEach("", (String[]) null, stringArray0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(4, stringArray0.length);
      
      String string4 = StringUtils.strip("", "o$$&Og-vA(~:f");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "o$$&Og-vA(~:f");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "o$$&Og-vA(~:f", (CharSequence) null);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      String string5 = StringUtils.join(intArray0, 'B', (-1), (-1));
      assertEquals("", string5);
      assertArrayEquals(new int[] {0, (-1), (-1), (-1), (-1)}, intArray0);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals(5, intArray0.length);
      
      String string6 = StringUtils.replaceFirst("m6'4BQHj=q7O", "1.071.0", "h y!#{^<!$w~");
      assertEquals("m6'4BQHj=q7O", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      int int2 = StringUtils.lastOrdinalIndexOf("", "", (-1));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string7 = StringUtils.replacePattern(string0, "", "1.071.0");
      assertNull(string7);
      
      String string8 = StringUtils.truncate("", 0);
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      
      String string9 = StringUtils.capitalize((String) null);
      assertNull(string9);
      
      int int3 = StringUtils.indexOf((CharSequence) "", 74);
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      String string0 = StringUtils.replaceChars("2u=`U%-Q`FJ}", "t~3%xd3j]MnsXl$", "b");
      assertEquals("2u=`U-Q`FJ}", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("2u=`U%-Q`FJ}");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      String string1 = StringUtils.stripStart((String) null, "MsTN=j+w!M9$sRa");
      assertNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "t~3%xd3j]MnsXl$", (CharSequence) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = 58;
      String string0 = StringUtils.rightPad("", 58, "");
      assertEquals("                                                          ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.reverseDelimited("", 'G');
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("Z]B");
      assertEquals("Z]B", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("Z]B", "", charSequenceArray0);
      assertEquals("Z]B", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(0, charSequenceArray0.length);
      
      String string4 = StringUtils.abbreviate("pAE.,b{x]2S@s\"0]g", 58);
      assertEquals("pAE.,b{x]2S@s\"0]g", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfterLast("pW> *e&!A", 58);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      char char0 = '&';
      short[] shortArray0 = new short[0];
      String string6 = StringUtils.join(shortArray0, '&');
      assertEquals("", string6);
      assertArrayEquals(new short[] {}, shortArray0);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals(0, shortArray0.length);
      
      String string7 = StringUtils.reverse("AGw}{ZF6T4MRt}O~");
      assertEquals("~O}tRM4T6FZ{}wGA", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "~O}tRM4T6FZ{}wGA", "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string8 = StringUtils.truncate("", 58);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertNotNull(string8);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("                                                          ");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      try { 
        StringUtils.getBytes("y(4oFmb@7t{V?z4m", "clone");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.difference("Object varargs must not be null", "Object varargs must not be null");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "6?(F!S,VY^$o<Ixdo");
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "Object varargs must not be null", "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.substringsBetween("Local0480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC20480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC2", "Cloneable type ", "\n");
      assertNull(stringArray1);
      
      String string1 = StringUtils.reverse("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("", 1974);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains("Object varargs must not be null"));
      assertNotNull(vector0);
      
      String string3 = StringUtils.join((List<?>) vector0, '0', 1974, 1974);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains("Object varargs must not be null"));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringBefore("", 6);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("Supplied value must be a valid byte literal between -32768 and 32767: [", "object");
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertNotNull(linkedList0);
      
      int int0 = StringUtils.countMatches((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", (CharSequence) "object");
      assertEquals(0, int0);
      
      String string3 = StringUtils.leftPad("4%Q&4.+T0]%v:_~", 3909, "Cannot store ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "X!KMbu9P";
      charSequenceArray0[1] = (CharSequence) "BB'BmBFBfBLBGBzorg.apache.commons.lang3.Charsets";
      charSequenceArray0[2] = (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [";
      charSequenceArray0[3] = (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [";
      charSequenceArray0[6] = (CharSequence) "X!KMbu9P";
      charSequenceArray0[7] = (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [";
      charSequenceArray0[8] = (CharSequence) "";
      int int1 = StringUtils.indexOfAny((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", charSequenceArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(9, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("null/empty items");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string4 = StringUtils.remove("org.apache.commons.lang3.LocaleUtils", 'a');
      assertEquals("org.pche.commons.lng3.LocleUtils", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringBefore("", 6);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("Supplied value must be a valid byte literal between -32768 and 32767: [", "object");
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", (CharSequence) "object");
      assertEquals(0, int0);
      
      String string3 = StringUtils.leftPad("4%Q&4.+T0]%v:_~", 3909, "Cannot store ");
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("null/empty items");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string4 = StringUtils.remove("org.apache.commons.lang3.LocaleUtils", 'a');
      assertEquals("org.pche.commons.lng3.LocleUtils", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      CharBuffer charBuffer0 = StringUtils.firstNonBlank((CharBuffer[]) null);
      assertNull(charBuffer0);
      
      String string5 = StringUtils.repeat('a', 15);
      assertEquals("aaaaaaaaaaaaaaa", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.removeStart("null/empty items", "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertEquals("null/empty items", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "The String must not be empty";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      short[] shortArray0 = new short[19];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      String string0 = StringUtils.join(shortArray0, '!', (-145), (-2034458190));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(19, shortArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("a#4`gF|4s3S5+d>\"l0", (String) null, (int) (short)0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.upperCase("a#4`gF|4s3S5+d>\"l0");
      assertEquals("A#4`GF|4S3S5+D>\"L0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.split((String) null, '!');
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("X97P!zkAW-[(TCDft", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("Cannot store ", '0', '0');
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(string0));
      assertNotNull(arrayDeque0);
      
      boolean boolean1 = arrayDeque0.add("org.apache.commons.lang3.RegExUtils");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(string0));
      assertTrue(arrayDeque0.contains("org.apache.commons.lang3.RegExUtils"));
      
      String string1 = StringUtils.replaceOnce("X97P!zkAW-[(TCDft", "X97P!zkAW-[(TCDft", "org.apache.commons.lang3.RegExUtils");
      assertEquals("org.apache.commons.lang3.RegExUtils", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("offset cannot be negative", '0');
      assertEquals("0offset cannot be negative0", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "org.apache.commons.lang3.RegExUtils";
      String string3 = StringUtils.replaceEachRepeatedly("offset cannot be negative", stringArray1, stringArray0);
      assertEquals("offset cannot be negative", string3);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "org.apache.commons.lang3.RegExUtils", 12);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.capitalize("offset cannot be negative");
      assertEquals("Offset cannot be negative", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CharSequence charSequence0 = null;
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = "thq!#g}";
      int int0 = (-578);
      String string1 = StringUtils.repeat("KRg^$'}!A=(Mb/Y", "thq!#g}", (-578));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "thq!#g}";
      boolean boolean1 = StringUtils.endsWithAny("", charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("KRg^$'}!A=(Mb/Y", (-578));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, 'a');
      assertNull(string0);
      
      int int0 = StringUtils.compare("\n", "\n", false);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("]", "zj=e", "_X%ARM$.aS#I~");
      assertNull(stringArray0);
      
      String string1 = StringUtils.stripToEmpty("v$5+2Gb?JkZgXx ");
      assertEquals("v$5+2Gb?JkZgXx", string1);
      assertNotNull(string1);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("v$5+2Gb?JkZgXx", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      String string0 = StringUtils.prependIfMissing("Object varargs must not be null", "Object varargs must not be null", charSequenceArray0);
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize("6\"T");
      assertEquals("6\"T", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-601L);
      boolean boolean1 = StringUtils.isNumeric("6\"T");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.abbreviateMiddle("6\"T", (String) null, Integer.MIN_VALUE);
      assertEquals("6\"T", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.startsWithIgnoreCase("6\"T", "6\"T");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "6\"T", (CharSequence) "6\"T");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches(charSequenceArray0[0], 'f');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      int int2 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String string4 = StringUtils.join(longArray0, 'f');
      assertEquals("0f-601f0f0f0f0f0f0", string4);
      assertArrayEquals(new long[] {0L, (-601L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(8, longArray0.length);
      
      int int3 = StringUtils.compare("Object varargs must not be null", "u*jy/IBV?zwo", false);
      assertEquals((-38), int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      int int4 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int4);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "Object varargs must not be null", (char[]) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      UnaryOperator<Locale.LanguageRange> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      stack0.replaceAll(unaryOperator0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) arrayList0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Locale locale0 = Locale.lookup(stack0, list0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("6\"T", "6\"T", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("0480480", "0480480", "0480480");
      assertEquals("0480480", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("0480480");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("0480480");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.stripToEmpty("pk=_^|/b9xhn");
      assertEquals("pk=_^|/b9xhn", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "0480480", (-1072));
      assertEquals((-1), int0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertNotNull(locale0);
      
      String string2 = locale0.getDisplayCountry();
      assertEquals("Italy", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertNotNull(string2);
      
      String string3 = locale0.toLanguageTag();
      assertEquals("it-IT", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("pk=_^|/b9xhn", 3, 64);
      assertEquals("pk=_^|/b9xhn", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("pk=_^|/b9xhn", "Italy", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("8~GpJrQPh ,8=um", "n5&%K*/Xg^y8D4");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.joinWith("n", stringArray0);
      assertEquals("8~GpJrQPh ,8=um", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("8~GpJrQPh ,8=um", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.upperCase("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("n", (int) 'D');
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.difference("", "n5&%K*/Xg^y8D4");
      assertEquals("n5&%K*/Xg^y8D4", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("", (int) 'D', 'i');
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("n");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string6 = StringUtils.chomp("");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("", "_;w,qlI&W9", 680);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(0, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("f");
      assertEquals("f", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("n", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.upperCase("Arguments cannot both be null");
      assertEquals("ARGUMENTS CANNOT BOTH BE NULL", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("The type must not be null", 32);
      assertEquals("null", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("\r", "Us{'A1=<|M4A-");
      assertEquals("Us{'A1=<|M4A-", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      StringUtils.leftPad("\r", 813, 'i');
      StringUtils.splitPreserveAllTokens("?_u}QdM'8bcSX");
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = StringUtils.stripAccents("E^T=l9p");
      assertEquals("E^T=l9p", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceFirst("", "E^T=l9p", "ion width is %d");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.reverse("E^T=l9p");
      assertEquals("p9l=T^E", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("E^T=l9p", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("G!IR4[<20", "\r", false);
      assertEquals(90, int0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.uncapitalize("6\"T");
      assertEquals("6\"T", string1);
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("jz=I]TU(~_Y");
      assertNotNull(intArray0);
      assertEquals(11, intArray0.length);
      
      int[] intArray1 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "6\"T");
      assertFalse(boolean0);
      
      String string2 = StringUtils.rotate((String) null, 9);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("f");
      assertEquals("f", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate((String) null, (-112));
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("]p&0y!j:)BOJB@TI9");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.chomp("f");
      assertEquals("f", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("04734734028HFo0 eTkjWx:", "f");
      assertEquals("04734734028HFo0 eTkjWx:", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.toRootUpperCase((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      String string0 = StringUtils.replaceChars("2u&r", "t~3%xd3j]MnsXl$", "b");
      assertEquals("2u&r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "2u&r", (-1076), (-3411));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("2u&r");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      String string1 = StringUtils.join(booleanArray0, '2');
      assertEquals("true2false2false2true2false2false", string1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false}, booleanArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, booleanArray0.length);
      
      String string2 = StringUtils.replaceOnce("b", "2u&r", "2u&r");
      assertEquals("b", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("b", " ", (-3514), 32);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Stream<CharBuffer> stream0 = stack0.parallelStream();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stream0);
      
      Iterator<CharBuffer> iterator0 = stack0.iterator();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(iterator0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("&eP");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(3, stringArray1.length);
      
      Locale locale0 = Locale.PRC;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string4 = StringUtils.upperCase("2u&r", locale0);
      assertEquals("2U&R", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(string4);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("b", "2U&R", stringArray0);
      assertEquals("2U&Rb", string5);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(4, stringArray0.length);
      
      Locale locale1 = Locale.KOREAN;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.toString());
      assertNotNull(locale1);
      
      String string6 = locale0.getDisplayScript(locale1);
      assertEquals("", string6);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.toString());
      assertNotNull(string6);
      
      String string7 = StringUtils.lowerCase((String) null);
      assertNull(string7);
      
      String string8 = StringUtils.capitalize("2U&Rb");
      assertEquals("2U&Rb", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      
      boolean boolean0 = StringUtils.containsWhitespace("2U&Rb");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.difference((String) null, "6\"T");
      assertEquals("6\"T", string1);
      assertNotNull(string1);
      
      long[] longArray0 = new long[8];
      longArray0[2] = (-1L);
      String string2 = StringUtils.getDigits("6\"T");
      assertEquals("6", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("|m", 55);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1887.86105275;
      doubleArray0[1] = (double) 0L;
      doubleArray0[2] = (double) 0L;
      doubleArray0[3] = (double) 55;
      String string4 = StringUtils.join(doubleArray0, 'V', 55, 55);
      assertEquals("", string4);
      assertArrayEquals(new double[] {1887.86105275, 0.0, 0.0, 55.0}, doubleArray0, 0.01);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(4, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = (float) 'i';
      floatArray0[1] = (float) 'i';
      floatArray0[2] = (float) 'i';
      String string0 = StringUtils.abbreviate("1", "S0! ;)", 16, 16);
      assertEquals("1", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("gFeuq(aV6?(F!S,VY^$o<Ixdo", 16);
      assertEquals("gFeuq(aV6?(F!S,VY^$o<Ixdo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("l_~'1", "gFeuq(aV6?(F!S,VY^$o<Ixdo");
      assertEquals("l_~'1", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "gFeuq(aV6?(F!S,VY^$o<Ixdo";
      stringArray0[1] = "1";
      stringArray0[2] = "gFeuq(aV6?(F!S,VY^$o<Ixdo";
      stringArray0[3] = null;
      stringArray0[4] = "1";
      stringArray0[5] = ", Length: 0";
      stringArray0[6] = "org.apache.commons.lang3.Charsets";
      stringArray0[7] = "S0! ;)";
      String string3 = StringUtils.replaceEachRepeatedly("BB'BmBFBfBLBGBz", stringArray0, stringArray0);
      assertEquals("BB'BmBFBfBLBGBz", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(8, stringArray0.length);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains('i'));
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add("org.apache.commons.lang3.Charsets");
      assertTrue(boolean0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains('i'));
      assertTrue(linkedHashSet0.contains("org.apache.commons.lang3.Charsets"));
      
      boolean boolean1 = linkedHashSet0.add("1");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains('i'));
      assertTrue(linkedHashSet0.contains("1"));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains('i'));
      assertTrue(linkedHashSet0.contains("1"));
      assertNotNull(iterator0);
      
      String string4 = StringUtils.join(iterator0, 'e');
      assertEquals("org.apache.commons.lang3.Charsetse1", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(2, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains('i'));
      assertTrue(linkedHashSet0.contains("1"));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars(" 8yuju$(A-q", 'c', '<');
      assertEquals(" 8yuju$(A-q", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.prependIfMissing("BB'BmBFBfBLBGBz", " 8yuju$(A-q", stringArray0);
      assertEquals(" 8yuju$(A-qBB'BmBFBfBLBGBz", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[2] = (float) 'i';
      floatArray0[1] = (float) 'i';
      floatArray0[2] = (float) 'i';
      String string0 = StringUtils.abbreviate("1", "S0! ;)", 16, 16);
      assertEquals("1", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("gFeuq(aV6?(F!S,VY^$o<Ixdo", 16);
      assertEquals("gFeuq(aV6?(F!S,VY^$o<Ixdo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("gFeuq(aV6?(F!S,VY^$o<Ixdo", "gFeuq(aV6?(F!S,VY^$o<Ixdo");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "gFeuq(aV6?(F!S,VY^$o<Ixdo";
      stringArray0[1] = "1";
      stringArray0[2] = "gFeuq(aV6?(F!S,VY^$o<Ixdo";
      stringArray0[3] = null;
      stringArray0[5] = ", Length: 0";
      stringArray0[6] = "org.apache.commons.lang3.Charsets";
      stringArray0[7] = "S0! ;)";
      String string3 = StringUtils.replaceEachRepeatedly("BB'BmBFBfBLBGBz", stringArray0, stringArray0);
      assertEquals("BB'BmBFBfBLBGBz", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(8, stringArray0.length);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains('i'));
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add("org.apache.commons.lang3.Charsets");
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains("org.apache.commons.lang3.Charsets"));
      assertFalse(linkedHashSet0.contains('i'));
      
      boolean boolean1 = linkedHashSet0.add(stringArray0[4]);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains("org.apache.commons.lang3.Charsets"));
      assertFalse(linkedHashSet0.contains('i'));
      assertEquals(8, stringArray0.length);
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains("org.apache.commons.lang3.Charsets"));
      assertFalse(linkedHashSet0.contains('i'));
      assertNotNull(iterator0);
      
      String string4 = StringUtils.join(iterator0, 'e');
      assertEquals("org.apache.commons.lang3.Charsetse", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains("org.apache.commons.lang3.Charsets"));
      assertFalse(linkedHashSet0.contains('i'));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars(" 8yuju$(A-q", 'c', '<');
      assertEquals(" 8yuju$(A-q", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.prependIfMissing("BB'BmBFBfBLBGBz", " 8yuju$(A-q", stringArray0);
      assertEquals(" 8yuju$(A-qBB'BmBFBfBLBGBz", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("l 'H;Vg!#S0+", (String) null);
      assertEquals("l 'H;Vg!#S0+", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "l 'H;Vg!#S0+";
      charSequenceArray0[1] = (CharSequence) "l 'H;Vg!#S0+";
      charSequenceArray0[2] = (CharSequence) "l 'H;Vg!#S0+";
      charSequenceArray0[3] = (CharSequence) "l 'H;Vg!#S0+";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfterLast((String) null, 0);
      assertNull(string1);
      
      String string2 = StringUtils.trimToEmpty("l 'H;Vg!#S0+");
      assertEquals("l 'H;Vg!#S0+", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split(", Length: ", ", Length: ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("comparator", "", (-3208));
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string3 = StringUtils.substringBefore("Minimum abbreviation width with offset is %d", 654);
      assertEquals("Minimum abbreviation width with offset is %d", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("comparator", 'i');
      assertEquals("icomparatori", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "\n", 98);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (-735));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.contains(charSequence0, 28);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.stripToNull("S0! ;)");
      assertEquals("S0! ;)", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("S0! ;)", "");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("xj");
      assertEquals("xj", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("lh\"Zz4mPl_");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.substringBeforeLast("lqrX2?w?\"84;^=k", "gFeuq(aV6?(F!S,VY^$o<Ixdo");
      assertEquals("lqrX2?w?\"84;^=k", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.toRootUpperCase((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.left((String) null, 101);
      assertNull(string5);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("xj", (CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.removeEnd((String) null, "lqrX2?w?\"84;^=k");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("", 'b');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "1(kxe8_QhhgBO66";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "1(kxe8_QhhgBO66";
      charSequenceArray0[4] = (CharSequence) "1(kxe8_QhhgBO66";
      String string2 = StringUtils.appendIfMissingIgnoreCase("", (CharSequence) null, charSequenceArray0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(5, charSequenceArray0.length);
      
      String string3 = StringUtils.wrapIfMissing(" vs ", 'Z');
      assertEquals("Z vs Z", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Z]B", 37);
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints(" vs ");
      assertArrayEquals(new int[] {32, 118, 115, 32}, intArray0);
      assertNotNull(intArray0);
      assertEquals(4, intArray0.length);
      
      int[] intArray1 = StringUtils.toCodePoints("");
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("SYFw2[N", 54);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.LocaleUtils", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.difference("Locale must not be null", "E");
      assertEquals("E", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("Locale must not be null");
      assertEquals("Locale must not be null", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("E");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.substringBeforeLast("E", "l 'H;VR");
      assertEquals("E", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.toRootUpperCase("Cannot qstore ");
      assertEquals("CANNOT QSTORE ", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "E", (CharSequence[]) stringArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("l 'H;VR", (String) null);
      assertEquals("l 'H;VR", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "l 'H;VR";
      charSequenceArray0[1] = (CharSequence) "l 'H;VR";
      charSequenceArray0[2] = (CharSequence) "l 'H;VR";
      charSequenceArray0[3] = (CharSequence) "l 'H;VR";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string1 = StringUtils.unwrap("6?(F!S,VY^$o<Ixdo", 'e');
      assertEquals("6?(F!S,VY^$o<Ixdo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase(" ", charSequenceArray0[1], charSequenceArray0);
      assertEquals(" l 'H;VR", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.substringBetween(", Lengt Length: ", "org.ap.commons.lang3.Charsets", "I ");
      assertNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) ", Lengt Length: ", (CharSequence) "l 'H;VR");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substring(" ", 5, 5);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.truncate("org.apache.commons.lang3.Charsets", 15, 5);
      assertEquals("ons.l", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0", "6?(F!S,VY^$o<Ixdo");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      String string6 = StringUtils.defaultString("p{InCombiningDiacriticalMarks}+The String must not be empty");
      assertEquals("p{InCombiningDiacriticalMarks}+The String must not be empty", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isMixedCase("l 'H;VR");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      char[] charArray0 = new char[0];
      String string7 = StringUtils.join(charArray0, 'e');
      assertEquals("", string7);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 16;
      int int0 = (-2282);
      intArray0[1] = (-2282);
      String string0 = StringUtils.join(intArray0, 'I', Integer.MIN_VALUE, 16);
      assertEquals("", string0);
      assertArrayEquals(new int[] {16, (-2282)}, intArray0);
      assertNotNull(string0);
      assertEquals(2, intArray0.length);
      
      String string1 = StringUtils.join((long[]) null, '_');
      assertNull(string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)17;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)53;
      String string2 = "org.apache.commons.lang3.Charsets";
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "org.apache.commons.lang3.Charsets");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.apache.commons.lang3.Charsets
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("9M*9AUfA");
      assertEquals("9M*9AUfA", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "9M*9AUfA", "9M*9AUfA");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayVariant(locale0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(string1);
      
      Locale locale1 = Locale.FRENCH;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertNotNull(locale1);
      
      String string2 = locale1.toLanguageTag();
      assertEquals("fr", string2);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertNotNull(string2);
      
      String string3 = StringUtils.lowerCase("g<6G!)F&R7kaFv-yy", locale1);
      assertEquals("g<6g!)f&r7kafv-yy", string3);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("6`9");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.removeStart(",N$hUd`+#!74?)", "fr");
      assertEquals(",N$hUd`+#!74?)", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int0 = StringUtils.compareIgnoreCase("", "g<6G!)F&R7kaFv-yy");
      assertEquals((-17), int0);
      
      String string5 = StringUtils.substringBefore("fr", (String) null);
      assertEquals("fr", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("zH<yy,v", (-17), 'Y');
      assertEquals("zH<yy,v", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.substringBetween("IR[", "IR[", "eA");
      assertNull(string0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (-1L);
      longArray0[1] = (-371L);
      longArray0[2] = (-1721L);
      String string1 = StringUtils.join(longArray0, '^');
      assertEquals("-1^-371^-1721", string1);
      assertArrayEquals(new long[] {(-1L), (-371L), (-1721L)}, longArray0);
      assertNotNull(string1);
      assertEquals(3, longArray0.length);
      
      String string2 = StringUtils.replaceOnce("yGV9IbSNE", "-1^-371^-1721", (String) null);
      assertEquals("yGV9IbSNE", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "yGV9IbSNE", (CharSequence) "-1^-371^-1721", (-904));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.center("", (-904), '');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultIfEmpty("", "yGV9IbSNE");
      assertEquals("yGV9IbSNE", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "IR[", (-839));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string1 = StringUtils.stripStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "\n");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertNotNull(treeSet0);
      
      String string2 = StringUtils.join((double[]) null, 'y', 100, 100);
      assertNull(string2);
      
      String string3 = StringUtils.swapCase("0.071.0");
      assertEquals("0.071.0", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "\n", charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[4] = "C6_<";
      boolean boolean0 = StringUtils.isAlpha(stringArray0[7]);
      assertFalse(boolean0);
      assertEquals(9, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllLowerCase(stringArray0[0]);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, stringArray0.length);
      
      String string0 = StringUtils.left(stringArray0[6], Integer.MAX_VALUE);
      assertNull(string0);
      assertEquals(9, stringArray0.length);
      
      String string1 = StringUtils.reverse("D");
      assertEquals("D", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 724);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.removeEnd("Index: ", "q+|]^^");
      assertEquals("Index: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.upperCase("3xTUSD-Kf~@j");
      assertEquals("3XTUSD-KF~@J", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "dzP2B0+gG10@u{;/\"");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("dzP2B0+gG10@u{;/\"", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      String string0 = StringUtils.join(booleanArray0, 'p', 821, (int) 'p');
      assertEquals("", string0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray0));
      assertNotNull(string0);
      assertEquals(5, booleanArray0.length);
      
      String string1 = StringUtils.join((Object[]) null, "", 821, 821);
      assertNull(string1);
      
      String string2 = StringUtils.stripToNull("T~DxJF7+0bGurQ:q&");
      assertEquals("T~DxJF7+0bGurQ:q&", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd(".E", ".E");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("%", 809);
      assertEqualsstring4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = StringUtils.stripToNull("T~DxJF7+0bGurQ:q&");
      assertEquals("T~DxJF7+0bGurQ:q&", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("%", 809);
      assertEqualsstring1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.removeEndIgnoreCase("l 'H;VR", (String) null);
      assertEquals("l 'H;VR", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "l 'H;VR";
      charSequenceArray0[1] = (CharSequence) "l 'H;VR";
      charSequenceArray0[2] = (CharSequence) "l 'H;VR";
      charSequenceArray0[3] = (CharSequence) "l 'H;VR";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.unwrap("6?(F!S,VY^$o<Ixdo", 'e');
      assertEquals("6?(F!S,VY^$o<Ixdo", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 1.0F;
      floatArray0[1] = (float) 8;
      String string3 = StringUtils.join(floatArray0, 'e', 8, 8);
      assertEquals("", string3);
      assertArrayEquals(new float[] {1.0F, 8.0F}, floatArray0, 0.01F);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(2, floatArray0.length);
      
      String string4 = StringUtils.substringBefore("6?(F!S,VY^$o<Ixdo", 8);
      assertEquals("6?(F!S,VY^$o<Ixdo", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.wrapIfMissing((String) null, 'e');
      assertNull(string5);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(8));
      assertNotNull(stack0);
      
      Integer integer0 = new Integer((-2369));
      assertEquals((-2369), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = stack0.add(integer0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals("[-2369]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains((-2369)));
      assertFalse(stack0.contains(8));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, "w", (-2369), 1369);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2369
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'i';
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[4]);
      assertNull(intArray0);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "?", charSequenceArray0[0]);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string0 = StringUtils.rotate("Locale must not be null", 4885);
      assertEquals("t be nullLocale must no", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("...", 'd');
      assertEquals("...", string0);
      assertNotNull(string0);
      
      String string1 = "BB'BmBFBfBLBGBz";
      String string2 = StringUtils.stripToNull("BB'BmBFBfBLBGBz");
      assertEquals("BB'BmBFBfBLBGBz", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "BB'BmBFBfBLBGBz";
      charSequenceArray0[1] = (CharSequence) "...";
      charSequenceArray0[2] = (CharSequence) "BB'BmBFBfBLBGBz";
      charSequenceArray0[3] = (CharSequence) "...";
      charSequenceArray0[5] = (CharSequence) "...";
      charSequenceArray0[7] = (CharSequence) "BB'BmBFBfBLBGBz";
      String string3 = StringUtils.appendIfMissingIgnoreCase("...", "...", charSequenceArray0);
      assertEquals("...", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "...", charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "BB'BmBFBfBLBGBz", (CharSequence) "...", 58);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("...", "...");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.leftPad(", Length: 0", (-1985), 'd');
      assertEquals(", Length: 0", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-96);
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, ", Length: 0");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // , Length: 0
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "6?(F!S,VY^$o<Ixdo");
      assertNull(stringArray0);
      
      String string0 = StringUtils.replace(".|R/CY&X;E)", ".|R/CY&X;E)", "l 'H;VR", (-714));
      assertEquals("l 'H;VR", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "l 'H;VR", (CharSequence) "l 'H;VR", 57);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "6?(F!S,VY^$o<Ixdo", (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((byte[]) null, 'W');
      assertNull(string1);
      
      String string2 = StringUtils.substringAfter("l 'H;VR", ">#~8VH{!zN");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripStart(",$fqqZGxf=+p(y;j", "^=@E l<:K");
      assertEquals(",$fqqZGxf=+p(y;j", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = ':';
      charArray0[3] = 'W';
      charArray0[4] = 'W';
      charArray0[5] = 'W';
      charArray0[6] = 'W';
      charArray0[7] = 'W';
      charArray0[8] = 'W';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 2743, 1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = StringUtils.replaceChars(";{'4fH0`W#8LG,", ')', '3');
      assertEquals(";{'4fH0`W#8LG,", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty(";{'4fH0`W#8LG,");
      assertEquals(";{'4fH0`W#8LG,", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars(";{'4fH0`W#8LG,", '3', '3');
      assertEquals(";{'4fH0`W#8LG,", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace(";{'4fH0`W#8LG,");
      assertFalse(boolean0);
      
      String string3 = StringUtils.LF;
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("Supplied value must be a valid byte literal between -32768 and 32767: [", (int) ')');
      assertEquals("Supplied value must be a valid byte li...", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = "\\u";
      int int0 = StringUtils.indexOfAny((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", string5);
      assertEquals(1, int0);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.replace(";{'4fH0`W#8LG,", ";{'4fH0`W#8LG,", "XXk.z7*=ns^&SoU", (-273));
      assertEquals("XXk.z7*=ns^&SoU", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = ";{'4fH0`W#8LG,";
      stringArray0[1] = ";{'4fH0`W#8LG,";
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(";{'4fH0`W#8LG,", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      assertEquals(2, stringArray0.length);
      
      String string8 = StringUtils.reverse("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertEquals("[ :76723 dna 86723- neewteb laretil etyb dilav a eb tsum eulav deilppuS", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      
      String string9 = StringUtils.unwrap(";{'4fH0`W#8LG,", " ");
      assertEquals(";{'4fH0`W#8LG,", string9);
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string7));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.7;
      String string0 = StringUtils.join(doubleArray0, '\\');
      assertEquals("0.0\\1.0\\0.7", string0);
      assertArrayEquals(new double[] {0.0, 1.0, 0.7}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals(3, doubleArray0.length);
      
      String[] stringArray0 = StringUtils.split("0.0\u0001.0\u0000.7", 'K');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isMixedCase("0.0\u0001.0\u0000.7");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("0.0\u0001.0\u0000.7");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("0.0\u0001.0\u0000.7", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.substringBefore("ny:", "0.0\u0001.0\u0000.7");
      assertEquals("ny:", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "ny:", (CharSequence) "0.0\u0001.0\u0000.7");
      assertEquals(0, int0);
      
      String string3 = StringUtils.abbreviate(" is not in the range '0' - '9'", "NlcnIe3", 23);
      assertEquals(" is not in the rNlcnIe3", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("NlcnIe3", "ny:");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.substringBeforeLast(" is not in the rNlcnIe3", " z{u{%UHU>hi%");
      assertEquals(" is not in the rNlcnIe3", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceOnce(" S", (String) null, "0.0\u0001.0\u0000.7");
      assertEquals(" S", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceEach(" S", stringArray0, stringArray0);
      assertEquals(" S", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.compare("UF", "NlcnIe3", true);
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      
      PriorityQueue<Object> priorityQueue0 = null;
      try {
        priorityQueue0 = new PriorityQueue<Object>((PriorityQueue<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.PriorityQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.replaceChars(";{'4fH0`W#8LG,", ')', '3');
      assertEquals(";{'4fH0`W#8LG,", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty(";{'4fH0`W#8LG,");
      assertEquals(";{'4fH0`W#8LG,", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ";{'4fH0`W#8LG,";
      String string2 = StringUtils.wrap("", '3');
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String string3 = StringUtils.rightPad("_|Jt", 9, 'o');
      assertEquals("_|Jtooooo", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("_", 9);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.difference(";{'4fH0`W#8LG,", "i]");
      assertEquals("i]", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("", 2966, 'i');
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.rightPad("Object varargs must not be null", 9);
      assertEquals("Object varargs must not be null", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Object varargs must not be null", (CharSequence) "i]", 2966);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 3;
      intArray0[1] = 3;
      intArray0[0] = (-1999);
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator0 = treeSet0.iterator();
      assertNotNull(iterator0);
      
      Iterator<CharBuffer> iterator1 = treeSet0.descendingIterator();
      assertFalse(iterator1.equals((Object)iterator0));
      assertNotNull(iterator1);
      
      String string0 = StringUtils.join(iterator0, 'n');
      assertEquals("", string0);
      assertFalse(iterator0.equals((Object)iterator1));
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty(":p@");
      assertEquals(":p@", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("XRr31{q!1K\"25L)'org.apache.commons.lang3.CharUtils", (-1999), "XRr31{q!1K\"25L)'org.apache.commons.lang3.CharUtils");
      assertEquals("XRr31{q!1K\"25L)'org.apache.commons.lang3.CharUtils", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      charArray0[2] = 'i';
      charArray0[3] = 'n';
      charArray0[4] = 'n';
      charArray0[5] = 'n';
      charArray0[6] = 'n';
      charArray0[7] = 'n';
      String string3 = StringUtils.join(charArray0, 'g');
      assertEquals("ngngigngngngngn", string3);
      assertArrayEquals(new char[] {'n', 'n', 'i', 'n', 'n', 'n', 'n', 'n'}, charArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(8, charArray0.length);
      
      String string4 = StringUtils.replaceOnce("wHI^sNfT4W)v,", "fQA7", "Minimum abbreviation width with offset is %d");
      assertEquals("wHI^sNfT4W)v,", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "XRr31{q!1K\"25L)'org.apache.commons.lang3.CharUtils", (CharSequence) "wHI^sNfT4W)v,");
      assertEquals(49, int0);
      
      String string5 = StringUtils.mid("XRr31{q!1K\"25L)'org.apache.commons.lang3.CharUtils", 3, 3165);
      assertEquals("31{q!1K\"25L)'org.apache.commons.lang3.CharUtils", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceIgnoreCase("", "XRr31{q!1K\"25L)'org.apache.commons.lang3.CharUtils", "wHI^sNfT4W)v,", 49);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("gC>jlLMJ", "tor");
      assertEquals("gC>jlLMJ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("?*$tFL}e9O#!M%", 13);
      assertEquals("$tFL}e9O#!M%", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 13;
      intArray0[1] = 13;
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains("?*$tFL}e9O#!M%"));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("tor");
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals("[tor]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains("?*$tFL}e9O#!M%"));
      assertTrue(stack0.contains("tor"));
      
      Stack<String> stack1 = new Stack<String>();
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.contains("?*$tFL}e9O#!M%"));
      assertNotNull(stack1);
      
      boolean boolean1 = stack1.add("gC>jlLMJ");
      assertTrue(boolean1);
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean1 == boolean0);
      assertFalse(stack1.isEmpty());
      assertEquals(1, stack1.size());
      assertEquals("[gC>jlLMJ]", stack1.toString());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.contains("gC>jlLMJ"));
      assertFalse(stack1.contains("?*$tFL}e9O#!M%"));
      
      boolean boolean2 = stack1.add("I");
      assertTrue(boolean2);
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals("[gC>jlLMJ, I]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertEquals(2, stack1.size());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.contains("I"));
      assertFalse(stack1.contains("?*$tFL}e9O#!M%"));
      
      Stream<String> stream0 = stack1.stream();
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals("[gC>jlLMJ, I]", stack1.toString());
      assertFalse(stack1.isEmpty());
      assertEquals(2, stack1.size());
      assertFalse(stack1.empty());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.contains("I"));
      assertFalse(stack1.contains("?*$tFL}e9O#!M%"));
      assertNotNull(stream0);
      
      String string2 = StringUtils.join((Iterable<?>) stack0, "1(kxe8_QQPm_!c+O?8CP");
      assertEquals("tor", string2);
      assertNotSame(stack0, stack1);
      assertFalse(stack0.equals((Object)stack1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(10, stack0.capacity());
      assertEquals("[tor]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains("I"));
      assertTrue(stack0.contains(string2));
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace("gC>jlLMJ");
      assertEquals("gC>jlLMJ", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "tor";
      boolean boolean3 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("~jO", "5j3%JOs53B*=!n", 13);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.remove("0480452", "null/empty items");
      assertEquals("0480452", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.overlay("HQPH:j*]", "$tFL}e9O#!M%", 5, 13);
      assertEquals("HQPH$tFL}e9O#!M%", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.swapCase("offset cannot be negative");
      assertEquals("OFFSET CANNOT BE NEGATIVE", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("0480452");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      boolean boolean4 = StringUtils.equalsAny("HQPH:j*]", stringArray0);
      assertFalse(boolean4);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "The String must not be empty";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string0 = StringUtils.center("A.}N!u&~Cq9 )`pPb1Y", 3472, 'v');
      assertNotNull(string0);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      String string1 = StringUtils.join(shortArray0, '!', (-145), (-2034458190));
      assertEquals("", string1);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, shortArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("a#4`gF|4s3S5+d>\"l0", (String) null, (int) (short)0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "A.}N!u&~Cq9 )`pPb1Y", (CharSequence) "A.}N!u&~Cq9 )`pPb1Y");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.substringAfter("The type must not be null", (int) (short)0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.substringAfter("K4{hk.zSW,<B", "");
      assertEquals("K4{hk.zSW,<B", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("", ".Y\"^&Vu7V!R");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center(" vs ", 72, "q&;qB,H");
      assertEquals("q&;qB,Hq&;qB,Hq&;qB,Hq&;qB,Hq&;qB, vs q&;qB,Hq&;qB,Hq&;qB,Hq&;qB,Hq&;qB,", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap((String) null, 'd');
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = StringUtils.repeat("maxWith cannot be negative", 12);
      assertEquals("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly("G+:4BK?1JY", (String[]) null, (String[]) null);
      assertEquals("G+:4BK?1JY", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeAll("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative", "maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(".|R/CY&X;E)").when(supplier0).get();
      String string3 = StringUtils.getIfEmpty((String) null, supplier0);
      assertEquals(".|R/CY&X;E)", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.unwrap("", 'U');
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[1] = (short)1927;
      shortArray0[2] = (short)3772;
      shortArray0[3] = (short)3772;
      shortArray0[4] = (short)1927;
      shortArray0[5] = (short) (-258);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)54;
      String string6 = StringUtils.join(shortArray0, 'D', 2980, (int) (short)0);
      assertEquals("", string6);
      assertArrayEquals(new short[] {(short)0, (short)1927, (short)3772, (short)3772, (short)1927, (short) (-258), (short)0, (short)54}, shortArray0);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals(8, shortArray0.length);
      
      String string7 = StringUtils.rightPad("", (-594), "Minimum abbreviation width is %d");
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "Cannot store ";
      charSequenceArray0[2] = (CharSequence) "Cannot store ";
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = (CharSequence) "Cannot store ";
      charSequenceArray0[6] = null;
      charSequenceArray0[7] = (CharSequence) "Cannot store ";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[5], (char[]) null);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      String string0 = StringUtils.unwrap("0.071.0", 'D');
      assertEquals("0.071.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("11IR[", (CharSequence) null, charSequenceArray0);
      assertEquals("11IR[", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(10, charSequenceArray0.length);
      
      String string2 = StringUtils.removeEnd("11IR[", "~jO");
      assertEquals("11IR[", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate(" has no clone method", 0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.replacePattern("LaFm z;k*|OCu%AxPki", "tM!^", "gFeuq(aV");
      assertEquals("LaFm z;k*|OCu%AxPki", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'D'}, charArray0);
      assertEquals(1, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertEquals("D", charBuffer0.toString());
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      
      char char0 = charBuffer0.get();
      assertEquals('D', char0);
      assertArrayEquals(new char[] {'D'}, charArray0);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charArray0.length);
      
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {'D'}, charArray0);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer1.remaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertTrue(charBuffer1.hasArray());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.length());
      assertEquals(1, charBuffer1.position());
      assertFalse(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertNotNull(charBuffer1);
      assertEquals(1, charArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      int int0 = StringUtils.lastIndexOf((CharSequence) "11IR[", (CharSequence) charBuffer0);
      assertEquals(5, int0);
      assertSame(charBuffer0, charBuffer1);
      assertArrayEquals(new char[] {'D'}, charArray0);
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("\n", 'G');
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("\n");
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = StringUtils.replace("\n", "", "#}Rn.\"R9c$9Tf");
      assertEquals("\n", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      String string4 = StringUtils.appendIfMissingIgnoreCase("\n", "", charSequenceArray0);
      assertEquals("\n", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(4, charSequenceArray0.length);
      
      CharSequence[] charSequenceArray1 = new CharSequence[0];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray1);
      assertTrue(boolean0);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertEquals(0, charSequenceArray1.length);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'G';
      charArray0[2] = 'G';
      charArray0[4] = 'Y';
      charArray0[5] = 'Y';
      charArray0[6] = 'Y';
      charArray0[7] = 'Y';
      int int0 = 3920;
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'M', 16, 3920);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\n", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.rightPad("\n", (-1), "tE^vW%9:r*hWrAt1_+");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.stripToNull("\n");
      assertNull(string1);
      
      String string2 = StringUtils.stripToNull("pAE.,b{x]2S@s\"0]g");
      assertEquals("pAE.,b{x]2S@s\"0]g", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripEnd("\n", ",uS)c_");
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, "\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast("\n", (-1074));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = "wZjI \\L\"RpFhK4)";
      String string3 = StringUtils.getIfBlank("wZjI L\"RpFhK4)", (Supplier<String>) null);
      assertEquals("wZjI L\"RpFhK4)", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 3, (-1074));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string4 = " /U/q";
      String string5 = StringUtils.chop(" /U/q");
      assertEquals(" /U/", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains("\n"));
      assertNotNull(vector0);
      
      String string6 = StringUtils.join((List<?>) vector0, "wZjI L\"RpFhK4)", (-1), (-1074));
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains("\n"));
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "gk)ro");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // gk)ro
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Qb", "Qb", (-871));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Qb", (CharSequence) "Qb");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlpha("Qb");
      assertTrue(boolean0);
      
      String string0 = StringUtils.chop("AbJ");
      assertEquals("Ab", string0);
      assertNotNull(string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      int int2 = StringUtils.countMatches((CharSequence) "Ab", (CharSequence) "AbJ");
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String[] stringArray2 = StringUtils.split("Cloneable type ", "G?J'(TaU^ZN8N`A", 3034);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertEquals(2, stringArray2.length);
      
      String string1 = StringUtils.trimToNull("Y ");
      assertEquals("Y", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparator((String) null, "~!", 102);
      assertNull(stringArray3);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = null;
      String string2 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("", (String) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", (String) null);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[3] = (float) 0;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '%', (-3162), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3162
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Qb", "Qb", (-871));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Qb", (CharSequence) "Qb");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlpha("Qb");
      assertTrue(boolean0);
      
      String string0 = StringUtils.abbreviate("a& }#6P\"O-t!5S:Kmg", (-871), 3836);
      assertEquals("a& }#6P\"O-t!5S:Kmg", string0);
      assertNotNull(string0);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "a& }#6P\"O-t!5S:Kmg", (CharSequence) "Qb", 122);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "a& }#6P\"O-t!5S:Kmg", 681);
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("l 'H;VR", (String) null);
      assertEquals("l 'H;VR", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "l 'H;VR";
      charSequenceArray0[3] = (CharSequence) "l 'H;VR";
      charSequenceArray0[3] = (CharSequence) "l 'H;VR";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string1 = StringUtils.unwrap("l 'H;VR", 'e');
      assertEquals("l 'H;VR", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("l 'H;VR", charSequenceArray0[1], charSequenceArray0);
      assertEquals("l 'H;VR", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.substringBetween(", Lengt Length: ", "org.ap.commons.lang3.Charsets", "I ");
      assertNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) ", Lengt Length: ", (CharSequence) "l 'H;VR");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substring((String) null, 5, 5);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0", "l 'H;VR");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "I ", charSequenceArray0[0]);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("l 'H;VR", (String) null);
      assertEquals("l 'H;VR", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "l 'H;VR";
      charSequenceArray0[3] = (CharSequence) "l 'H;VR";
      charSequenceArray0[3] = (CharSequence) "l 'H;VR";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string1 = StringUtils.unwrap("6?(F!S,VY^$o<Ixdo", 'e');
      assertEquals("6?(F!S,VY^$o<Ixdo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("6?(F!S,VY^$o<Ixdo", charSequenceArray0[1], charSequenceArray0);
      assertEquals("6?(F!S,VY^$o<Ixdo", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.substringBetween(", Lengt Length: ", "org.ap.commons.lang3.Charsets", "I ");
      assertNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) ", Lengt Length: ", (CharSequence) "l 'H;VR");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substring((String) null, 5, 5);
      assertNull(string4);
      
      String string5 = StringUtils.truncate("org.apache.commons.lang3.Charsets", 15, 5);
      assertEquals("ons.l", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0", "6?(F!S,VY^$o<Ixdo");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      String string6 = StringUtils.defaultString("p{InCombiningDiacriticalMarks}+The String must not be empty");
      assertEquals("p{InCombiningDiacriticalMarks}+The String must not be empty", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-2031);
      floatArray0[1] = (float) (-2031);
      floatArray0[2] = 1422.0F;
      floatArray0[3] = 1422.0F;
      floatArray0[4] = (float) (-2031);
      floatArray0[5] = 1422.0F;
      floatArray0[6] = (-281.517F);
      floatArray0[7] = (float) (-2031);
      floatArray0[8] = (float) (-2031);
      String string0 = StringUtils.join(floatArray0, 'g');
      assertEquals("-2031.0g-2031.0g1422.0g1422.0g-2031.0g1422.0g-281.517g-2031.0g-2031.0", string0);
      assertArrayEquals(new float[] {(-2031.0F), (-2031.0F), 1422.0F, 1422.0F, (-2031.0F), 1422.0F, (-281.517F), (-2031.0F), (-2031.0F)}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals(9, floatArray0.length);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(string0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("maxWith cannot be negative");
      assertTrue(boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("[maxWith cannot be negative]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains("maxWith cannot be negative"));
      
      String string1 = StringUtils.wrapIfMissing("-'Pa_-#D", 'Z');
      assertEquals("Z-'Pa_-#DZ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("~#Q&f<W]D63{,", (String) null);
      assertEquals("~#Q&f<W]D63{,", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "~#Q&f<W]D63{,", 1128);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("~#Q&f<W]D63{,");
      assertNotNull(intArray0);
      assertEquals(13, intArray0.length);
      
      int[] intArray1 = StringUtils.toCodePoints("-'Pa_-#D");
      assertNotSame(intArray1, intArray0);
      assertArrayEquals(new int[] {45, 39, 80, 97, 95, 45, 35, 68}, intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(8, intArray1.length);
      
      boolean boolean2 = StringUtils.isNumericSpace("~#Q&f<W]D63{,");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 58, "");
      assertEquals("                                                          ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.reverseDelimited("", 'G');
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("Z]B");
      assertEquals("Z]B", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("Z]B", "", charSequenceArray0);
      assertEquals("Z]B", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(0, charSequenceArray0.length);
      
      String string4 = StringUtils.wrapIfMissing("", 'Z');
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "AGw}{ZF6T4MRt}O~", 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      int[] intArray1 = StringUtils.toCodePoints("");
      assertSame(intArray1, intArray0);
      assertArrayEquals(new int[] {}, intArray1);
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("", (String) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string2 = StringUtils.replacePattern((String) null, "", "\r");
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "p{InCombiningDiacriticalMarks}+", (-1));
      assertNull(stringArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[3] = (float) 0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 0;
      String string3 = StringUtils.chomp("", (String) null);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceEachRepeatedly("\"d~Y~N}`K<,Xn", stringArray0, stringArray0);
      assertEquals("\"d~Y~N}`K<,Xn", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(0, stringArray0.length);
      
      String string5 = StringUtils.center("", (-1));
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      int int0 = 0;
      char[] charArray0 = new char[9];
      charArray0[0] = 'R';
      charArray0[1] = 'd';
      charArray0[2] = '?';
      charArray0[3] = '7';
      charArray0[4] = 'Y';
      charArray0[5] = '.';
      charArray0[6] = 's';
      charArray0[7] = 't';
      charArray0[8] = 'N';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'M', 0, (int) '7');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("DD9_]TF");
      assertEquals("DD9_]TF", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.length("DD9_]TF");
      assertEquals(7, int0);
      
      String string2 = StringUtils.center("Locale must not be null", 0, '@');
      assertEquals("Locale must not be null", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "Locale must not be null");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String string3 = StringUtils.left("_G>bte+*EueOfhG", 77);
      assertEquals("_G>bte+*EueOfhG", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) "Locale must not be null", 2995);
      assertEquals((-1), int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 58, "");
      assertEquals("                                                          ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "                                                          ";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "                                                          ";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.defaultString("Exception cloning Cloneable type ", "YpLF03AKgvt[X");
      assertEquals("Exception cloning Cloneable type ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'o';
      charArray0[1] = 'U';
      charArray0[2] = 'z';
      charArray0[3] = ',';
      charArray0[4] = '8';
      charArray0[5] = 'u';
      charArray0[6] = 'X';
      charArray0[7] = '2';
      charArray0[8] = 'A';
      int int0 = StringUtils.indexOfAny(charSequenceArray0[1], charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'o', 'U', 'z', ',', '8', 'u', 'X', '2', 'A'}, charArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(9, charArray0.length);
      
      String string2 = StringUtils.center("                                                          ", 58, 'm');
      assertEquals("                                                          ", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "YpLF03AKgvt[X", charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'o', 'U', 'z', ',', '8', 'u', 'X', '2', 'A'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      char char0 = 'h';
      String string0 = StringUtils.substringBetween("Th be empty", "Th be empty", "Th be empty");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      charSequenceArray0[0] = (CharSequence) "Th be empty";
      charSequenceArray0[1] = (CharSequence) null;
      boolean boolean1 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(10, charSequenceArray0.length);
      
      String string1 = StringUtils.replace("Th be empty", (String) null, (String) null, (-5));
      assertEquals("Th be empty", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("Th be empty", (-1231), 'h');
      assertEquals("Th be empty", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Th be empty";
      String string3 = StringUtils.replaceEach("Th be empty", stringArray0, stringArray0);
      assertEquals("Th be empty", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(2, stringArray0.length);
      
      String string4 = StringUtils.LF;
      assertEquals("\n", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "\n");
      assertEquals((-1), int0);
      assertEquals(10, charSequenceArray0.length);
      
      String string5 = "0.071.0";
      String string6 = StringUtils.strip("0.071.0");
      assertEquals("0.071.0", string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.join((Object[]) charSequenceArray0, "XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo");
      assertEquals("Th be emptyXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals(10, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Th be emptyXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo", charSequenceArray0[1], 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("{}", "{}");
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnce("8ob0ny{Asv#BrEij)|@", (String) null, "8ob0ny{Asv#BrEij)|@");
      assertEquals("8ob0ny{Asv#BrEij)|@", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("8ob0ny{Asv#BrEij)|@");
      assertFalse(boolean0);
      
      String string2 = StringUtils.getDigits("4.Z?hsw*)$:Hl");
      assertEquals("4", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap((String) null, 'Q');
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "4.Z?hsw*)$:Hl", (CharSequence) null, 1497);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "dzP2B0+gG10@u{;/\"");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny("dzP2B0+gG10@u{;/\"", (CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      char char0 = 'p';
      int int0 = 821;
      int int1 = (-2461);
      String string0 = StringUtils.join(booleanArray0, 'p', 821, (-2461));
      assertEquals("", string0);
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray0));
      assertNotNull(string0);
      assertEquals(5, booleanArray0.length);
      
      boolean boolean1 = StringUtils.isAllLowerCase("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.leftPad("...", 0, 'p');
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.equalsAny("dzP2B0+gG10@u{;/\"", (CharSequence[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray1);
      
      String string2 = StringUtils.deleteWhitespace("z7&3}'/D;Rr.pz~zh");
      assertEquals("z7&3}'/D;Rr.pz~zh", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      char[] charArray0 = new char[0];
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "z7&3}'/D;Rr.pz~zh", charArray0);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, charArray0.length);
      
      boolean boolean3 = StringUtils.equalsAny("", (CharSequence[]) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("dzP2B0+gG10@u{;/\"", "...", (CharSequence[]) null);
      assertEquals("dzP2B0+gG10@u{;/\"...", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "dzP2B0+gG10@u{;/\"...");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripToNull("T~DxJF7+0bGurQ:q&");
      assertEquals("T~DxJF7+0bGurQ:q&", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd(".E", ".E");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("%", 809);
      assertEqualsstring2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("X97P!zkAW-[(TCDft", "X97P!zkAW-[(TCDft", "Cannot store ");
      assertNull(stringArray0);
      
      String string0 = StringUtils.replaceChars("Cannot store ", '0', '0');
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isWhitespace("X97P!zkAW-[(TCDft");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.join((Iterable<?>) null, ", Length: 0");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("\n", "\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)565;
      shortArray0[1] = (short)850;
      String string1 = StringUtils.join(shortArray0, 'K');
      assertEquals("565K850K0", string1);
      assertArrayEquals(new short[] {(short)565, (short)850, (short)0}, shortArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, shortArray0.length);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("\n"));
      assertNotNull(arrayDeque0);
      
      boolean boolean2 = arrayDeque0.add(", Length: 0");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("\n"));
      assertTrue(arrayDeque0.contains(", Length: 0"));
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("\n"));
      assertNotNull(priorityQueue0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) priorityQueue0, locale_FilteringMode0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, priorityQueue0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(priorityQueue0.contains("\n"));
      assertFalse(list0.contains("\n"));
      assertNotNull(list0);
      
      String string2 = StringUtils.lowerCase((String) null, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNull(string2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "org.apache.commons.lang3.RegExUtils";
      String string3 = StringUtils.repeat(", Length: 0", (int) (short)850);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToNull("-ude1TjG:*pNbL");
      assertEquals("-ude1TjG:*pNbL", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("OcZr6Bt*`cK[za!", 15);
      assertEquals("OcZr6Bt*`cK[za!", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      String string0 = StringUtils.lowerCase((String) null, locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("*w&C5/I", (String) null, false);
      assertEquals((-1), int0);
      
      int int1 = 65536;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.remove("|Bo`~:$pr^'ZkWRyXw", '0');
      assertEquals("|Bo`~:$pr^'ZkWRyXw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "", "|Bo`~:$pr^'ZkWRyXw");
      assertNull(string1);
      
      String string2 = StringUtils.trimToNull((String) null);
      assertNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "|Bo`~:$pr^'ZkWRyXw";
      stringArray0[2] = "";
      stringArray0[3] = "|Bo`~:$pr^'ZkWRyXw";
      String string3 = StringUtils.replaceEachRepeatedly("MYu_5Uu", stringArray0, stringArray0);
      assertEquals("MYu_5Uu", string3);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(4, stringArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", 45);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String[] stringArray0 = new String[16];
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(16, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("{}", stringArray0);
      assertFalse(boolean0);
      assertEquals(16, stringArray0.length);
      
      String string1 = StringUtils.capitalize("{}");
      assertEquals("{}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.joinWith("Minimum abbreviation width with offset is %d", stringArray0);
      assertEquals("Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(16, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("{}");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "", (-1));
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.right("maxWith cannot be negative", 79);
      assertEquals("maxWith cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("maxWith cannot be negative");
      assertEquals("maxWithcannotbenegative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("maxWith cannot be negative");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat("maxWith cannot be negative", 12);
      assertEquals("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceEachRepeatedly("G+:4BK?1JY", (String[]) null, (String[]) null);
      assertEquals("G+:4BK?1JY", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeAll("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative", "maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative").when(supplier0).get();
      String string5 = StringUtils.getIfEmpty((String) null, supplier0);
      assertEquals("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.unwrap("+:*SJ3/qh<7 dp47XZ", 'U');
      assertEquals("+:*SJ3/qh<7 dp47XZ", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("+:*SJ3/qh<7 dp47XZ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)908;
      shortArray0[1] = (short)1927;
      shortArray0[2] = (short)3772;
      shortArray0[3] = (short)1599;
      shortArray0[4] = (short) (-2551);
      shortArray0[5] = (short) (-258);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)54;
      String string8 = StringUtils.join(shortArray0, 'D', 2980, (int) (short)0);
      assertEquals("", string8);
      assertArrayEquals(new short[] {(short)908, (short)1927, (short)3772, (short)1599, (short) (-2551), (short) (-258), (short)0, (short)54}, shortArray0);
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string6));
      assertNotNull(string8);
      assertEquals(8, shortArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("ip?t(s:40", "ip?t(s:40");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{}";
      String string0 = StringUtils.leftPad("{}", 0, 'P');
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("/x", 'J');
      assertEquals("J/xJ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("{}", "/x", 0);
      assertEquals("{}", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "J/xJ", 102);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.substringAfterLast("M Zq", (String) null);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "{}", (CharSequence) "", 102);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.replaceAll(":)QpU M3_#G)Xu8s/IY", "M Zq", "");
      assertEquals(":)QpU M3_#G)Xu8s/IY", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.rightPad(")yf~6PR<\"J", 13);
      assertEquals(")yf~6PR<\"J   ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(")yf~6PR<\"J   ");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substringAfterLast("()*I5 Fn+eVF!", (String) null);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing((String) null, "");
      assertNull(string2);
      
      String string3 = StringUtils.abbreviateMiddle((String) null, (String) null, (-1426));
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.left("f", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay((String) null, "", (-1720), 32);
      assertNull(string1);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Stack<CharBuffer> stack1 = new Stack<CharBuffer>();
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      
      String string2 = StringUtils.replaceChars("", "BB'BmBFBfBLBGBz", "ud6^.# 0#8/_q=$`");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("", 0);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isNotBlank("f");
      assertTrue(boolean0);
      
      String string4 = StringUtils.substringAfter("Invalid locale format: ", "");
      assertEquals("Invalid locale format: ", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("", 0, 782);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.uncapitalize("");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.replace("", "Array element ", "", 7);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 7);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isEmpty("Array element ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      String string2 = StringUtils.substring("_|JtX97P!zkAW-[(TCDft", 7, (-2031));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate("!N1&X] Ipg", 1916, 29);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String[] stringArray1 = StringUtils.split("89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0", "XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo");
      assertNotNull(stringArray1);
      assertEquals(7, stringArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 7;
      String string4 = StringUtils.substringBefore("89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0", "");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int1 = StringUtils.compareIgnoreCase("", "org.apache.commons.lang3.Charsets", false);
      assertEquals((-33), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "!N1&X] Ipg", (CharSequence) "");
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string5 = StringUtils.center("", (-1), 'n');
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.appendIfMissing("", "", stringArray1);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals(7, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, '&');
      assertEquals("", string0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string0);
      assertEquals(0, shortArray0.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.truncate("_|Jt", 4248);
      assertEquals("_|Jt", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("_|Jt");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        StringUtils.getBytes("DZbi~ar&_fh0_|", "REVj,");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.unwrap("0.071.0", 'D');
      assertEquals("0.071.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("11IR[", (CharSequence) null, charSequenceArray0);
      assertEquals("11IR[", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.removeEnd("11IR[", "~jO");
      assertEquals("11IR[", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate(" has no clone method", 0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.replacePattern("LaFm z;k*|OCu%AxPki", "tM!^", "gFeuq(aV");
      assertEquals("LaFm z;k*|OCu%AxPki", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'D'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("D", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.limit());
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {'D'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("D", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(1, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.limit());
      assertEquals(0, charBuffer1.position());
      assertEquals("D", charBuffer1.toString());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertNotNull(charBuffer1);
      assertEquals(1, charArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)100;
      int int0 = StringUtils.lastIndexOf((CharSequence) "11IR[", (CharSequence) charBuffer0);
      assertEquals((-1), int0);
      assertSame(charBuffer0, charBuffer1);
      assertArrayEquals(new char[] {'D'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertEquals("D", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 58, "");
      assertEquals("                                                          ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-1L);
      longArray0[1] = 15L;
      longArray0[2] = 15L;
      longArray0[3] = (long) '-';
      longArray0[4] = (long) 58;
      longArray0[5] = (long) 58;
      longArray0[6] = (long) '-';
      longArray0[7] = (-1L);
      longArray0[8] = (long) 0;
      String string1 = StringUtils.join(longArray0, '-');
      assertEquals("-1-15-15-45-58-58-45--1-0", string1);
      assertArrayEquals(new long[] {(-1L), 15L, 15L, 45L, 58L, 58L, 45L, (-1L), 0L}, longArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(9, longArray0.length);
      
      int int0 = StringUtils.compare("Comparator should not be null.", "Cannot clone Cloneable type ", false);
      assertEquals(14, int0);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "-1-15-15-45-58-58-45--1-0", (char[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int2 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.Charsets", "/F", false);
      assertEquals(64, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast("\n", (-1074));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "");
      assertEquals(0, int0);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean1 = stack0.add(locale_FilteringMode0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("[REJECT_EXTENDED_RANGES]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(locale_FilteringMode0));
      
      String string2 = StringUtils.chop("\n");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, 'i', 0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 10
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (-735));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) "\n", (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = StringUtils.split("}%`-4d-/^u", "\n", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.remove("\n", "\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("\n", "\n", (-1), (-1));
      assertEquals("\n\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("\n");
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(8, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("gC>jlLMJ", "gC>jlLMJ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("?*$tFL}e9O#!M%", 13);
      assertEquals("$tFL}e9O#!M%", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      String string2 = StringUtils.wrapIfMissing("", 'Z');
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int[] intArray1 = StringUtils.toCodePoints("$tFL}e9O#!M%");
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(13, intArray1.length);
      
      int[] intArray2 = StringUtils.toCodePoints("");
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertEquals(0, intArray2.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "$tFL}e9O#!M%", (CharSequence) "$tFL}e9O#!M%");
      assertTrue(boolean0);
      
      String string3 = StringUtils.rotate("", 0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.normalizeSpace("Cannotannot store ");
      assertEquals("Cannotannot store", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "$tFL}e9O#!M%";
      String string5 = StringUtils.replaceEach(",N$hUd`+#!74?)", stringArray0, stringArray0);
      assertEquals(",N$hUd`+#!74?)", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-2031);
      floatArray0[1] = (float) (-2031);
      floatArray0[2] = 1422.0F;
      floatArray0[3] = 1422.0F;
      floatArray0[4] = (float) (-2031);
      floatArray0[5] = 1422.0F;
      floatArray0[6] = (-281.517F);
      floatArray0[7] = (float) (-2031);
      floatArray0[8] = (float) (-2031);
      String string0 = StringUtils.join(floatArray0, 'g');
      assertEquals("-2031.0g-2031.0g1422.0g1422.0g-2031.0g1422.0g-281.517g-2031.0g-2031.0", string0);
      assertArrayEquals(new float[] {(-2031.0F), (-2031.0F), 1422.0F, 1422.0F, (-2031.0F), 1422.0F, (-281.517F), (-2031.0F), (-2031.0F)}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals(9, floatArray0.length);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(string0));
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add("maxWith cannot be negative");
      assertTrue(boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals("[maxWith cannot be negative]", stack0.toString());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains("maxWith cannot be negative"));
      
      boolean boolean1 = stack0.add(", Length: ");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(10, stack0.capacity());
      assertEquals("[maxWith cannot be negative, , Length: ]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains(", Length: "));
      
      Stream<String> stream0 = stack0.stream();
      assertEquals(10, stack0.capacity());
      assertEquals("[maxWith cannot be negative, , Length: ]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.contains(", Length: "));
      assertNotNull(stream0);
      
      String string1 = StringUtils.join((Iterable<?>) stack0, "");
      assertEquals("maxWith cannot be negative, Length: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(10, stack0.capacity());
      assertEquals("[maxWith cannot be negative, , Length: ]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.contains(string1));
      assertTrue(stack0.contains(", Length: "));
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace(", Length: ");
      assertEquals(", Length:", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[1] = (CharSequence) "maxWith cannot be negative, Length: ";
      charSequenceArray0[2] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[3] = (CharSequence) ", Length: ";
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.join((short[]) null, 'j');
      assertNull(string3);
      
      String string4 = StringUtils.replaceAll("maxWith cannot be negative, Length: ", "-2031.0g-2031.0g1422.0g1422.0g-2031.0g1422.0g-281.517g-2031.0g-2031.0", "3Ro?");
      assertEquals("maxWith cannot be negative, Length: ", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.difference((String) null, "T~DxJF7+0bGurQ:q&");
      assertEquals("T~DxJF7+0bGurQ:q&", string0);
      assertNotNull(string0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      String string1 = StringUtils.stripStart("T~DxJF7+0bGurQ:q&", (String) null);
      assertEquals("T~DxJF7+0bGurQ:q&", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("f");
      assertEquals("f", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("^{Syi<f", (-128), 'i');
      assertEquals("^{Syi<f", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("]p&0y!j:)BOJB@TI9");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.chomp("f");
      assertEquals("f", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("04734734028HFo0 eTkjWx:", "f");
      assertEquals("04734734028HFo0 eTkjWx:", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.toRootUpperCase((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("f");
      assertEquals("f", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate((String) null, (-112));
      assertNull(string1);
      
      String string2 = StringUtils.substringBeforeLast("04734734028HFo0 eTkjWx:", "f");
      assertEquals("04734734028HFo0 eTkjWx:", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootUpperCase((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.substringBefore("04734734028HFo0 eTkjWx:", 101);
      assertEquals("04734734028HFo0 ", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.lowerCase("HBq(g");
      assertEquals("hbq(g", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnce("9:I'IY3a!,BL0>i)", "HBq(g", "Object varargs must not be null");
      assertEquals("9:I'IY3a!,BL0>i)", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter(" vs ", 2192);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "0.071.0", "");
      assertNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.replaceAll(" vs ", " vs ", "\"]`d");
      assertEquals("\"]`d", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = '~';
      charArray0[1] = '~';
      charArray0[2] = '~';
      String string0 = StringUtils.join(charArray0, '~');
      assertEquals("\u0000~~~~", string0);
      assertArrayEquals(new char[] {'\u0000', '~', '~'}, charArray0);
      assertNotNull(string0);
      assertEquals(3, charArray0.length);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("\u0000~~~~", (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare((String) null, (String) null, false);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 83);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("\n", charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "\n");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String string0 = StringUtils.reverseDelimited("\n", 'l');
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = StringUtils.rightPad("\n", 28, "\n");
      assertEquals("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "\n", (-1));
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      int int3 = StringUtils.indexOfAny((CharSequence) "\n", "");
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.substringBefore("0!OlRdr|5T2K\"[\"M_", 5);
      assertEquals("0!OlRdr|5T2K\"[\"M_", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("", 28);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat('O', 20);
      assertEquals("OOOOOOOOOOOOOOOOOOOO", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "OOOOOOOOOOOOOOOOOOOO", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      long[] longArray0 = new long[6];
      longArray0[0] = 956L;
      longArray0[1] = 0L;
      longArray0[2] = 451L;
      longArray0[3] = 0L;
      longArray0[4] = 0L;
      longArray0[5] = 3345L;
      String string0 = StringUtils.join(longArray0, '>', (-1472), (-1472));
      assertEquals("", string0);
      assertArrayEquals(new long[] {956L, 0L, 451L, 0L, 0L, 3345L}, longArray0);
      assertNotNull(string0);
      assertEquals(6, longArray0.length);
      
      String string1 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.substring("2]k>2?,%{{mif2r", 3, (-1472));
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("9M*9AUfA");
      assertEquals("9M*9AUfA", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "9M*9AUfA", "9M*9AUfA");
      assertTrue(boolean0);
      
      String string1 = StringUtils.rotate("9M*9AUfA", 1467);
      assertEquals("UfA9M*9A", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("9M*9AUfA");
      assertEquals("9M*9AUfA", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isBlank("9M*9AUfA");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)47;
      shortArray0[1] = (short)13;
      shortArray0[2] = (short)452;
      shortArray0[3] = (short)1;
      shortArray0[4] = (short) (-904);
      shortArray0[5] = (short)3154;
      shortArray0[6] = (short)594;
      shortArray0[7] = (short)48;
      shortArray0[8] = (short)2607;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '8', 2318, 3333);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2318
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      String string0 = StringUtils.defaultString("{}/D");
      assertEquals("{}/D", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replacePattern("{}/D", "Cannot store ", "{}/D");
      assertEquals("{}/D", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("{}/D", "{}/D");
      assertEquals("{}/D", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "{}/D", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "Cannot store ", 28, 28);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.chomp("{}/D");
      assertEquals("{}/D", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToNull("{}/D");
      assertEquals("{}/D", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.abbreviateMiddle("', has a length less than 2", "n{@E,evza1MgNl", (short)15);
      assertEquals("', has a length less than 2", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("YJKVd2nXl1y!:P$Pe2*", 'b');
      assertEquals("YJKVd2nXl1y!:P$Pe2*", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("', has a length less than 2", "n{@E,evza1MgNl");
      assertEquals(0.38, double0, 0.01);
      
      String string2 = StringUtils.leftPad(";/l^d)i;", (-141), 'b');
      assertEquals(";/l^d)i;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      String string0 = StringUtils.prependIfMissing("Object varargs must not be null", "Object varargs must not be null", charSequenceArray0);
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize("6\"T");
      assertEquals("6\"T", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-601L);
      boolean boolean1 = StringUtils.isNumeric("6\"T");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string3 = locale0.getDisplayCountry();
      assertEquals("China", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(string3);
      
      String string4 = locale0.getDisplayCountry();
      assertEquals("China", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(string4);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      TreeSet<Locale> treeSet0 = new TreeSet<Locale>();
      assertNotNull(treeSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) treeSet0, locale_FilteringMode0);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(list0.contains(locale0));
      assertNotNull(list0);
      
      Locale locale1 = Locale.ROOT;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertNotNull(locale1);
      
      String string5 = StringUtils.lowerCase("Object varargs must not be null", locale1);
      assertEquals("object varargs must not be null", string5);
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getLanguage());
      assertNotNull(string5);
      
      String string6 = StringUtils.removeStart("China", "/*|\"f'%:_H2'");
      assertEquals("China", string6);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.containsWhitespace("China");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(1, charSequenceArray0.length);
      
      String string7 = StringUtils.strip("/*|\"f'%:_H2'");
      assertEquals("/*|\"f'%:_H2'", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      double double0 = StringUtils.getJaroWinklerDistance("China", "object varargs must not be null");
      assertEquals(0.41, double0, 0.01);
      
      CharBuffer charBuffer0 = StringUtils.firstNonBlank((CharBuffer[]) null);
      assertNull(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.rightPad(", Length: 0", 0, 'k');
      assertEquals(", Length: 0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("The character ", 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("i]", "k9%OU~Qe|;%");
      assertEquals("k9%OU~Qe|;%", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("org.apache.commons.lang3.StringUtils", 0, 'i');
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("{}", 0);
      assertEquals("{}", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "i]", (CharSequence) "org.apache.commons.lang3.StringUtils", 12);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "i]";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "k9%OU~Qe|;%";
      charSequenceArray0[4] = (CharSequence) "{}";
      charSequenceArray0[5] = (CharSequence) "{}";
      charSequenceArray0[6] = (CharSequence) "k9%OU~Qe|;%";
      String string5 = StringUtils.appendIfMissingIgnoreCase("`cE8GbjAI=aonR{/6", ", Length: 0", charSequenceArray0);
      assertEquals("`cE8GbjAI=aonR{/6", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(7, charSequenceArray0.length);
      
      double double0 = StringUtils.getJaroWinklerDistance("`cE8GbjAI=aonR{/6", "`cE8GbjAI=aonR{/6");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("8?DD<Tcw", "8?DD<Tcw");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.defaultIfBlank("8?DD<Tcw", "8?DD<Tcw");
      assertEquals("8?DD<Tcw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("Strings must not be null", "%3IeRdV<;0");
      assertEquals("Strings must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join((byte[]) null, 'c', (-3391), (-3391));
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.upperCase("dWfU=");
      assertEquals("DWFU=", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.substringsBetween("8?DD<Tcw", "dUix/q", "");
      assertNull(stringArray1);
      
      String string4 = StringUtils.deleteWhitespace("Strings must not be null");
      assertEquals("Stringsmustnotbenull", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'c';
      longArray0[1] = (long) (-3391);
      longArray0[2] = (long) 'c';
      longArray0[3] = (long) (-3391);
      longArray0[4] = (long) (-3391);
      String string5 = StringUtils.join(longArray0, '1', 64, 8);
      assertEquals("", string5);
      assertArrayEquals(new long[] {99L, (-3391L), 99L, (-3391L), (-3391L)}, longArray0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(5, longArray0.length);
      
      String[] stringArray2 = StringUtils.stripAll((String[]) null, "8?DD<Tcw");
      assertNull(stringArray2);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string6 = locale0.getDisplayCountry();
      assertEquals("Taiwan", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(string6);
      
      String string7 = locale0.getDisplayCountry();
      assertEquals("Taiwan", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(string7);
      
      String string8 = StringUtils.lowerCase("ANM,pV)=#OX", locale0);
      assertEquals("anm,pv)=#ox", string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(string8);
      
      boolean boolean1 = StringUtils.containsWhitespace("ANM,pV)=#OX");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "dUix/q", (CharSequence[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string9 = StringUtils.strip("Q 8DH!7$v5tbh6y,A");
      assertEquals("Q 8DH!7$v5tbh6y,A", string9);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string6));
      assertNotNull(string9);
      
      double double0 = StringUtils.getJaroWinklerDistance("Q 8DH!7$v5tbh6y,A", "anm,pv)=#ox");
      assertEquals(0.38, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.rightPad(", Length: 0", 0, 'k');
      assertEquals(", Length: 0", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty(", Length: 0");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("HcWR,;b!%", "Cannot clone Cloneable type ");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = StringUtils.replace("Cannot store ", "Cannot store ", "Cannot store ", 41);
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Cannot store ", (CharSequence) "Cannot store ", 41);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isEmpty("Cannot store ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("Cannot store ", "Cannot store ");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("X97P!zkAW-[(TCDft", "X97P!zkAW-[(TCDft");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("1(kxe8_QhhgBO66", "N[");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("n5&%K*/Xg^y8D4", "1(kxe8_QhhgBO66");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
      
      String string0 = StringUtils.replaceChars("xTcC+ruymsAe$5G", 'D', 'D');
      assertEquals("xTcC+ruymsAe$5G", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", stringArray1);
      assertFalse(boolean1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, stringArray1.length);
      
      String string2 = StringUtils.substringBeforeLast("X97P!zkAW-[(TCDft", "xTcC+ruymsAe$5G");
      assertEquals("X97P!zkAW-[(TCDft", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparator("l_~'1", "l_~'1");
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray1);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotNull(stringArray3);
      assertEquals(1, stringArray3.length);
      
      String string3 = StringUtils.rightPad((String) null, 9, 'D');
      assertNull(string3);
      
      String string4 = StringUtils.substringAfterLast("xTcC+ruymsAe$5G", 9);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.difference("X97P!zkAW-[(TCDft", "l_~'1");
      assertEquals("l_~'1", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("Minimum abbreviation width with offset is %d", (-3086), 'D');
      assertEquals("Minimum abbreviation width with offset is %d", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.capitalize("@j1@ `Y,B+58{7b");
      assertEquals("@j1@ `Y,B+58{7b", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("andSB\"");
      assertEquals("andSB\"", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("cOr9;ac<h$", "andSB\"");
      assertEquals("cOr9;ac<h$", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad((String) null, 97, '[');
      assertNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "andSB\"", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.reverse("fBqvb'Oum:($");
      assertEquals("$(:muO'bvqBf", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("8?DNDqklSh~", "8?DNDqklSh~");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.defaultIfBlank("8?DNDqklSh~", "8?DNDqklSh~");
      assertEquals("8?DNDqklSh~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("Strings must not be null", "%3IeRdV<;0");
      assertEquals("Strings must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join((byte[]) null, 'c', (-3391), (-3391));
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.upperCase("dWfU=");
      assertEquals("DWFU=", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.substringsBetween("8?DNDqklSh~", "dUix/q", "");
      assertNull(stringArray1);
      
      String string4 = StringUtils.deleteWhitespace("Strings must not be null");
      assertEquals("Stringsmustnotbenull", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'c';
      longArray0[1] = (long) (-3391);
      longArray0[2] = (long) 'c';
      longArray0[3] = (long) (-3391);
      longArray0[4] = (long) (-3391);
      String string5 = StringUtils.join(longArray0, '1', 64, 8);
      assertEquals("", string5);
      assertArrayEquals(new long[] {99L, (-3391L), 99L, (-3391L), (-3391L)}, longArray0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(5, longArray0.length);
      
      String[] stringArray2 = StringUtils.stripAll((String[]) null, "8?DNDqklSh~");
      assertNull(stringArray2);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      String string6 = locale0.getDisplayCountry();
      assertEquals("Taiwan", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(string6);
      
      String[] stringArray3 = Locale.getISOLanguages();
      assertNotSame(stringArray3, stringArray0);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertNotNull(stringArray3);
      assertEquals(188, stringArray3.length);
      
      String string7 = locale0.getDisplayCountry();
      assertEquals("Taiwan", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(string7);
      
      String string8 = StringUtils.lowerCase("ANM,pV)=#OX", locale0);
      assertEquals("anm,pv)=#ox", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(string8);
      
      boolean boolean1 = StringUtils.containsWhitespace("ANM,pV)=#OX");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "%3IeRdV<;0", (CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("8?DNDqklSh~", "8?DNDqklSh~");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.defaultIfBlank("8?DNDqklSh~", "8?DNDqklSh~");
      assertEquals("8?DNDqklSh~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("Strings must not be null", "%3IeRdV<;0");
      assertEquals("Strings must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join((byte[]) null, 'c', (-3391), (-3391));
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.upperCase("dWfU=");
      assertEquals("DWFU=", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.substringsBetween("8?DNDqklSh~", "dUix/q", "");
      assertNull(stringArray1);
      
      String string4 = StringUtils.deleteWhitespace("Strings must not be null");
      assertEquals("Stringsmustnotbenull", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'c';
      longArray0[1] = (long) (-3391);
      longArray0[3] = (long) (-3391);
      longArray0[4] = (long) (-3391);
      String string5 = StringUtils.join(longArray0, '1', 64, 8);
      assertEquals("", string5);
      assertArrayEquals(new long[] {99L, (-3391L), 0L, (-3391L), (-3391L)}, longArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals(5, longArray0.length);
      
      String[] stringArray2 = StringUtils.stripAll((String[]) null, "8?DNDqklSh~");
      assertNull(stringArray2);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertFalse(set0.contains("8?DNDqklSh~"));
      assertNotNull(set0);
      
      String string6 = locale0.getDisplayCountry();
      assertEquals("Taiwan", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(string6);
      
      String string7 = locale0.getDisplayCountry();
      assertEquals("Taiwan", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(string7);
      
      String string8 = StringUtils.lowerCase("ANM,p-[(TCDft", locale0);
      assertEquals("anm,p-[(tcdft", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(string8);
      
      boolean boolean1 = StringUtils.containsWhitespace("ANM,p-[(TCDft");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string9 = StringUtils.abbreviate("", (-2531), (-2531));
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      
      String string10 = StringUtils.capitalize("");
      assertEquals("", string10);
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertTrue(string10.equals((Object)string9));
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.remove("|Bo`~:$pr^'ZkWRyXw", '0');
      assertEquals("|Bo`~:$pr^'ZkWRyXw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "", "|Bo`~:$pr^'ZkWRyXw");
      assertNull(string1);
      
      String string2 = StringUtils.reverseDelimited("", 'G');
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull("LPr+#lSV");
      assertEquals("LPr+#lSV", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "LPr+#lSV";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "|Bo`~:$pr^'ZkWRyXw";
      charSequenceArray0[4] = (CharSequence) "Z]B";
      charSequenceArray0[5] = (CharSequence) "|Bo`~:$pr^'ZkWRyXw";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      String string4 = StringUtils.appendIfMissingIgnoreCase("Z", "LPr+#lSV", charSequenceArray0);
      assertEquals("Z", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(8, charSequenceArray0.length);
      
      String string5 = StringUtils.stripStart("p{InCombiningDiacriticalMarks}+The String must not be empty", "");
      assertEquals("p{InCombiningDiacriticalMarks}+The String must not be empty", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToNull("Z");
      assertEquals("Z", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertNotNull(linkedList0);
      
      String string7 = StringUtils.stripStart((String) null, "Z]B");
      assertNull(string7);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'G');
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches(charSequenceArray0[2], charSequenceArray0[2]);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(8, charSequenceArray0.length);
      
      String string8 = StringUtils.leftPad("...", 809, "p{InCombiningDiacriticalMarks}+The String must not be empty");
      assertEquals("p{InCombiningDiacriticalMarks}+The String must not be emptyp{InCombiningDiacriticalMarks}+The String must not be emptyp{InCombiningDiacriticalMarks}+The String must not be emptyp{InCombiningDiacriticalMarks}+The String must not be emptyp{InCombiningDiacriticalMarks}+The String must not be emptyp{InCombiningDiacriticalMarks}+The String must not be emptyp{InCombiningDiacriticalMarks}+The String must not be emptyp{InCombiningDiacriticalMarks}+The String must not be emptyp{InCombiningDiacriticalMarks}+The String must not be emptyp{InCombiningDiacriticalMarks}+The String must not be emptyp{InCombiningDiacriticalMarks}+The String must not be emptyp{InCombiningDiacriticalMarks}+The String must not be emptyp{InCombiningDiacriticalMarks}+The String must not be emptyp{InCombiningDiacriticalMarks}+The Stri...", string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "p{InCombiningDiacriticalMarks}+The String must not be empty", charSequenceArray0);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      String string0 = StringUtils.prependIfMissing("Object varargs must not be null", "Object varargs must not be null", charSequenceArray0);
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.stripToNull("Object varargs must not be null");
      assertEquals("Object varargs must not be null", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("Object varargs must not be null", 1172);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase(string2);
      assertFalse(boolean0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equals(charSequenceArray0[0], (CharSequence) string2);
      assertFalse(boolean1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string3 = StringUtils.substringAfterLast("d4^;q=$C8GbD[^$", (-2255));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate(" ", "", (-1698), 65);
      assertEquals(" ", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = "Cannot store ";
      boolean boolean0 = StringUtils.isNumericSpace("Cannot store ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeEndIgnoreCase("Cannot store ", "Cannot store ");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("6?(F!S,VY^$o<Ixdo", 'o');
      assertEquals("6?(F!S,VY^$o<Ixdo", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("gFeuq(aV6?(F!S,VY^$o<Ixdo", "", 2519);
      assertEquals("gFeuq(aV6?(F!S,VY^$o<Ixdo", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(2519));
      assertNotNull(arrayList0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "gFeuq(aV6?(F!S,VY^$o<Ixdo";
      objectArray0[2] = (Object) "";
      Object[] objectArray1 = arrayList0.toArray(objectArray0);
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(2519));
      assertNotNull(objectArray1);
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      
      ArrayList arrayList1 = (ArrayList)arrayList0.clone();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList0.contains(2519));
      assertNotNull(arrayList1);
      
      arrayList0.trimToSize();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(2519));
      
      Integer integer0 = new Integer(2519);
      assertEquals(2519, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(2519);
      assertEquals(2519, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean1 = arrayList0.add(integer0);
      assertTrue(boolean1);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(2519));
      
      Integer integer2 = new Integer(2740);
      assertEquals(2740, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      // Undeclared exception!
      try { 
        arrayList0.add((-77), integer2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -77, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Qb", "Qb", (-871));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Qb", "Qb");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Qb", (CharSequence) "Qb");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isAlpha("Qb");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = "AbJ";
      String string1 = StringUtils.chop("AbJ");
      assertEquals("Ab", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "Cloneable type ";
      // Undeclared exception!
      try { 
        StringUtils.truncate("Cloneable type ", (-1594));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      String string0 = StringUtils.prependIfMissing("Object varargs must not be null", "Object varargs must not be null", charSequenceArray0);
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      assertEquals(8, charSequenceArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Object varargs must not be null", (CharSequence) "6\"T");
      assertEquals(31, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "6\"T", '_');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.join((boolean[]) null, 's', 0, 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad("", 58, "");
      assertEquals("                                                          ", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string2 = StringUtils.prependIfMissing("", (CharSequence) null, charSequenceArray0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, charSequenceArray0.length);
      
      String string3 = StringUtils.reverseDelimited("", 'G');
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToNull("Z]B");
      assertEquals("Z]B", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("Z]B", "", charSequenceArray0);
      assertEquals("Z]B", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(0, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Z]B", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string6 = StringUtils.stripStart("Z]B", "AGw}{ZF6T4MRt}O~");
      assertEquals("]B", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)0;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      String string7 = StringUtils.toEncodedString(byteArray0, charset0);
      assertEquals("\uFFFD\u0000", string7);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)0}, byteArray0);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(string7);
      assertEquals(2, byteArray0.length);
      
      String string8 = StringUtils.wrapIfMissing("\uFFFD\u0000", 'K');
      assertEquals("K\uFFFD\u0000K", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Z]B", (CharSequence) "\uFFFD\u0000");
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      
      String string9 = StringUtils.toRootUpperCase("");
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string5));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string8));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      int[] intArray0 = StringUtils.toCodePoints(stringArray0[0]);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNull(intArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.right("?*$tFL}e9O#!M%", 13);
      assertEquals("$tFL}e9O#!M%", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      int[] intArray1 = StringUtils.toCodePoints("$tFL}e9O#!M%");
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(13, intArray1.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "$tFL}e9O#!M%", (CharSequence) "$tFL}e9O#!M%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("gC>jlLMJ", "tor");
      assertEquals("gC>jlLMJ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("?*$tFL}e9O#!M%", 13);
      assertEquals("$tFL}e9O#!M%", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 13;
      intArray0[1] = 13;
      String string2 = StringUtils.wrapIfMissing("null/empty items", 'Z');
      assertEquals("Znull/empty itemsZ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "null/empty items", 13);
      assertFalse(boolean0);
      
      int[] intArray1 = StringUtils.toCodePoints("$tFL}e9O#!M%");
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(13, intArray1.length);
      
      int[] intArray2 = StringUtils.toCodePoints("null/empty items");
      assertNotSame(intArray2, intArray0);
      assertNotSame(intArray2, intArray1);
      assertFalse(intArray2.equals((Object)intArray0));
      assertFalse(intArray2.equals((Object)intArray1));
      assertNotNull(intArray2);
      assertEquals(16, intArray2.length);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.right("maxWith cannot be negative", 79);
      assertEquals("maxWith cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("maxWith cannot be negative");
      assertEquals("maxWithcannotbenegative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("maxWith cannot be negative");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat("maxWith cannot be negative", 12);
      assertEquals("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceEachRepeatedly("G+:4BK?1JY", (String[]) null, (String[]) null);
      assertEquals("G+:4BK?1JY", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeAll("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative", "maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string5 = StringUtils.getIfEmpty((String) null, supplier0);
      assertNull(string5);
      
      String string6 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.unwrap("+:*SJ3/qh<7 dp47XZ", 'U');
      assertEquals("+:*SJ3/qh<7 dp47XZ", string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("+:*SJ3/qh<7 dp47XZ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      short[] shortArray0 = new short[8];
      shortArray0[0] = (short)908;
      shortArray0[1] = (short)1927;
      shortArray0[2] = (short)3772;
      shortArray0[3] = (short)1599;
      shortArray0[4] = (short) (-2551);
      shortArray0[5] = (short) (-258);
      shortArray0[6] = (short)0;
      shortArray0[7] = (short)54;
      String string8 = StringUtils.join(shortArray0, 'D', 2980, (int) (short)0);
      assertEquals("", string8);
      assertArrayEquals(new short[] {(short)908, (short)1927, (short)3772, (short)1599, (short) (-2551), (short) (-258), (short)0, (short)54}, shortArray0);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string4));
      assertNotNull(string8);
      assertEquals(8, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("X97P!zkAW-[(TCDft", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("Cannot store ", '0', '0');
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("X97P!zkAW-[(TCDft"));
      assertNotNull(arrayDeque0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("maxWith cannot be negative", supplier0);
      assertEquals("maxWith cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceEachRepeatedly("Cannot store ", stringArray0, stringArray0);
      assertEquals("Cannot store ", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.unwrap((String) null, '0');
      assertNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("Cannot store ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("Cannot store "));
      assertNotNull(linkedHashSet0);
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("Cannot store "));
      assertNotNull(iterator0);
      
      String string4 = StringUtils.join(iterator0, '0');
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("Cannot store "));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars("maxWith cannot be negative", 'd', '0');
      assertEquals("maxWith cannot be negative", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.prependIfMissing("fQA7", "+:*SJ3/qh<7 dp47XZ", stringArray0);
      assertEquals("+:*SJ3/qh<7 dp47XZfQA7", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.repeat("maxWith cannot be negative", 12);
      assertEquals("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly("G+:4BK?1JY", (String[]) null, (String[]) null);
      assertEquals("G+:4BK?1JY", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeAll("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative", "maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative"));
      assertNotNull(arrayDeque0);
      
      boolean boolean0 = arrayDeque0.add("Threshold must not be negative");
      assertTrue(boolean0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative"));
      assertTrue(arrayDeque0.contains("Threshold must not be negative"));
      
      boolean boolean1 = arrayDeque0.add(":iR1$dK}]5yq#y.");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative"));
      assertTrue(arrayDeque0.contains(":iR1$dK}]5yq#y."));
      
      boolean boolean2 = arrayDeque0.add("G+:4BK?1JY");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("maxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negativemaxWith cannot be negative"));
      assertTrue(arrayDeque0.contains(":iR1$dK}]5yq#y."));
      
      String string3 = StringUtils.substringBefore("!@Jp!AFjC_$j", 12);
      assertEquals("!@Jp!AFjC_$j", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("", 'o');
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceEachRepeatedly("", (String[]) null, (String[]) null);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "", 1630);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string6 = StringUtils.capitalize("");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, '(');
      assertEquals("0", string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("_").when(supplier0).get();
      String string1 = StringUtils.getIfEmpty("", supplier0);
      assertEquals("_", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.remove((String) null, 'S');
      assertNull(string0);
      
      String string1 = StringUtils.wrap((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast("3\"UQTjG{K7$P{ZN*'^", 160);
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join((Iterator<?>) null, "3\"UQTjG{K7$P{ZN*'^");
      assertNull(string3);
      
      boolean boolean2 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.join((double[]) null, 'd');
      assertNull(string4);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, false);
      assertEquals(0, int0);
      
      String string5 = StringUtils.center("XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoCannot store ", 1863, 'd');
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.capitalize((String) null);
      assertNull(string6);
      
      boolean boolean3 = StringUtils.isMixedCase("3\"UQTjG{K7$P{ZN*'^");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoCannot store ";
      stringArray0[6] = null;
      String string7 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoCannot store ", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals(7, stringArray0.length);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = 'S';
      charArray0[3] = 'd';
      charArray0[4] = 'd';
      charArray0[5] = 'Z';
      boolean boolean4 = StringUtils.containsOnly((CharSequence) string0, charArray0);
      assertFalse(boolean4);
      assertArrayEquals(new char[] {'d', 'd', 'S', 'd', 'd', 'Z'}, charArray0);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertEquals(6, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("0480480");
      assertEquals("0480480", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("0480480");
      assertTrue(boolean0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(string0));
      assertNotNull(linkedHashSet0);
      
      boolean boolean1 = linkedHashSet0.add("0480480");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(string0));
      
      boolean boolean2 = linkedHashSet0.add("0K167K167K32K3K2289K00K167K167K32K3K2289K0");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(string0));
      
      boolean boolean3 = linkedHashSet0.add("0480480");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(string0));
      
      boolean boolean4 = linkedHashSet0.add("0480480");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(string0));
      
      boolean boolean5 = linkedHashSet0.add("gGEN=");
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(3, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(string0));
      
      boolean boolean6 = linkedHashSet0.add("Threshold must not be negative");
      assertTrue(boolean6);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(4, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(string0));
      
      boolean boolean7 = linkedHashSet0.add("2");
      assertTrue(boolean7);
      assertTrue(boolean7 == boolean6);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(5, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains(string0));
      
      String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, 'C');
      assertEquals("0480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC2", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(5, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string1));
      assertTrue(linkedHashSet0.contains(string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = 'C';
      boolean boolean8 = StringUtils.containsOnly((CharSequence) "0480480", charArray0);
      assertFalse(boolean8);
      assertArrayEquals(new char[] {'C', 'C', 'C', 'C'}, charArray0);
      assertFalse(boolean8 == boolean7);
      assertFalse(boolean8 == boolean0);
      assertFalse(boolean8 == boolean2);
      assertTrue(boolean8 == boolean3);
      assertFalse(boolean8 == boolean1);
      assertTrue(boolean8 == boolean4);
      assertFalse(boolean8 == boolean5);
      assertFalse(boolean8 == boolean6);
      assertEquals(4, charArray0.length);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'C';
      String string2 = StringUtils.join(longArray0, 'C');
      assertEquals("67", string2);
      assertArrayEquals(new long[] {67L}, longArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, longArray0.length);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'C';
      charArray1[1] = 'C';
      String string3 = StringUtils.join(charArray1, '@');
      assertEquals("C@C", string3);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {'C', 'C'}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(2, charArray1.length);
      
      String string4 = StringUtils.trimToNull("hwBGxPl");
      assertEquals("hwBGxPl", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("l 'H;VR", (String) null);
      assertEquals("l 'H;VR", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.EMPTY;
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("l 'H;VR"));
      assertNotNull(linkedList0);
      
      short[] shortArray0 = new short[0];
      String string3 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, (int) (short) (-258), (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.stripAccents("l 'H;VR");
      assertEquals("l 'H;VR", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = '2';
      charArray0[2] = 'A';
      charArray0[0] = '2';
      charArray0[4] = '5';
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'2', '2', 'A', '\u0000', '5'}, charArray0);
      assertEquals(5, charArray0.length);
      
      String string6 = StringUtils.center((String) null, (int) (short)0, '2');
      assertNull(string6);
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray1);
      assertFalse(boolean0);
      assertNotSame(charArray1, charArray0);
      assertArrayEquals(new char[] {}, charArray1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertEquals(0, charArray1.length);
      
      boolean boolean1 = StringUtils.isNumericSpace("l 'H;VR");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      String string0 = StringUtils.remove("|Bo`~:$pr^'ZkWRyXw", '0');
      assertEquals("|Bo`~:$pr^'ZkWRyXw", string0);
      assertNotNull(string0);
      
      String string1 = "";
      String string2 = StringUtils.substringBetween("", "", "|Bo`~:$pr^'ZkWRyXw");
      assertNull(string2);
      
      String string3 = StringUtils.removeStart("", "|Bo`~:$pr^'ZkWRyXw");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("|Bo`~:$pr^'ZkWRyXw"));
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "|Bo`~:$pr^'ZkWRyXw";
      stringArray0[2] = "";
      stringArray0[3] = "MYu_5K?1JY";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("MYu_5K?1JY", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (-735));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("z", charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "z");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String string0 = StringUtils.reverseDelimited("z", 'l');
      assertEquals("z", string0);
      assertNotNull(string0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "z", (CharSequence) "z");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = StringUtils.rightPad("z", (-1), "z");
      assertEquals("z", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("o$$&Og-vA(~:f");
      assertEquals("o$$&Og-vA(~:f", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("o$$&Og-vA(~:f", "o$$&Og-vA(~:f");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("NyiXL'$SMAz)B$RW", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("", (String) null, "PB#[{6)D<F<z?:");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[4] = 'm';
      charArray0[3] = 'F';
      charArray0[4] = 'f';
      String[] stringArray0 = new String[1];
      stringArray0[0] = "4028HFo";
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "4028HFo", (CharSequence) "4028HFo");
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip("4028HFo");
      assertEquals("4028HFo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "4028HFo");
      assertEquals("4028HFo", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "4028HFo", (CharSequence) "XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo", Integer.MAX_VALUE);
      assertEquals(31, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.defaultString("4028HFo", "XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo");
      assertEquals("4028HFo", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "4028HFo", charArray0);
      assertEquals(5, int2);
      assertArrayEquals(new char[] {'B', '\u0000', '\u0000', 'F', 'f', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, charArray0.length);
      
      String string4 = StringUtils.defaultString("f9X\"o\"lBDt");
      assertEquals("f9X\"o\"lBDt", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.center("org.apache.commons.lang3.ObjectUtils$Null", 0, 'o');
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBetween("4028HFo", "XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo");
      assertNull(string6);
      
      boolean boolean1 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string7 = "\\u";
      String string8 = StringUtils.defaultIfEmpty(string7, "maxWith cannot be negative");
      assertEquals("\\u", string8);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 6, 'J');
      assertEquals("JJJJJJ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("$k\"q7}UFD/4 [4a", 'J');
      assertEquals("J$k\"q7}UFD/4 [4aJ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(locale0));
      assertNotNull(arrayList0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) arrayList0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(arrayList0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertNotNull(list0);
      
      String string2 = StringUtils.upperCase((String) null, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("\n", "\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "\n");
      assertEquals(0, int0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("\n"));
      assertNotNull(vector0);
      
      String string1 = StringUtils.join((List<?>) vector0, "\n", 5228, 1464);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("\n"));
      assertNotNull(string1);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = classLoader1.getParent();
      assertSame(classLoader1, classLoader0);
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertNotNull(classLoader2);
      
      Class<String> class1 = String.class;
      ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class1, classLoader1);
      assertSame(classLoader1, classLoader0);
      assertSame(class1, class0);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      ServiceLoader<String> serviceLoader2 = ServiceLoader.load(class0);
      assertSame(class0, class1);
      assertNotSame(serviceLoader2, serviceLoader1);
      assertNotSame(serviceLoader2, serviceLoader0);
      assertFalse(serviceLoader2.equals((Object)serviceLoader1));
      assertFalse(serviceLoader2.equals((Object)serviceLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader2.toString());
      assertNotNull(serviceLoader2);
      
      Iterator<String> iterator0 = serviceLoader1.iterator();
      assertSame(classLoader1, classLoader0);
      assertSame(class1, class0);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertNotSame(serviceLoader1, serviceLoader2);
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertFalse(serviceLoader1.equals((Object)serviceLoader2));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(iterator0);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator1 = treeSet0.iterator();
      assertNotNull(iterator1);
      
      Iterator<CharBuffer> iterator2 = treeSet0.descendingIterator();
      assertFalse(iterator2.equals((Object)iterator1));
      assertNotNull(iterator2);
      
      String string2 = StringUtils.join(iterator1, 'n');
      assertEquals("", string2);
      assertFalse(iterator1.equals((Object)iterator2));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = StringUtils.substring("", (-1672), (-1672));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, charSequenceArray0.length);
      
      String string4 = StringUtils.removeEndIgnoreCase("", "");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      boolean boolean3 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = StringUtils.isEmpty("");
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("Cannot store ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeEndIgnoreCase("Cannot store ", "Cannot store ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("6?(F!S,VY^$o<Ixdo", 'o');
      assertEquals("6?(F!S,VY^$o<Ixdo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'o';
      byte[] byteArray0 = new byte[0];
      String string2 = StringUtils.join(byteArray0, 'o');
      assertEquals("", string2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(0, byteArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", (-874));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.rightPad("f", 0, "f");
      assertEquals("f", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay((String) null, "", 32, 32);
      assertNull(string1);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Stack<CharBuffer> stack1 = new Stack<CharBuffer>();
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      
      Iterator<CharBuffer> iterator0 = stack1.iterator();
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, (String) null);
      assertEquals("", string2);
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertFalse(string2.equals((Object)string0));
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("", "BB'BmBFBfBLBGBz", "ud6^.# 0#8/_q=$`");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToNull("!yx");
      assertEquals("!yx", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars(",z b7D@JH!>)MD3m^dd", ",N$hUd`+#!74?)", "Object varargs must not be null");
      assertEquals("Oz baD@JHr>sMD3m^tt", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isNotBlank("f");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Oz baD@JHr>sMD3m^tt", 32, (-3457));
      assertEquals(2, int0);
      
      String string6 = StringUtils.chop("gFeuq(aV6?(F!S,VY^$o<Ixdo");
      assertEquals("gFeuq(aV6?(F!S,VY^$o<Ixd", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.strip("<JG83)Pv", "]");
      assertEquals("<JG83)Pv", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      String string8 = StringUtils.substring("4KD#^_X6elg(=v0", (int) (byte)0);
      assertEquals("4KD#^_X6elg(=v0", string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.remove((String) null, 'S');
      assertNull(string0);
      
      String string1 = StringUtils.wrap((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast("3\"UQTjG{K7$P{ZN*'^", 160);
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join((Iterator<?>) null, "3\"UQTjG{K7$P{ZN*'^");
      assertNull(string3);
      
      boolean boolean2 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.join((double[]) null, 'd');
      assertNull(string4);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, false);
      assertEquals(0, int0);
      
      String string5 = StringUtils.center("XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoCannot store ", 1863, 'd');
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.capitalize((String) null);
      assertNull(string6);
      
      boolean boolean3 = StringUtils.isMixedCase("3\"UQTjG{K7$P{ZN*'^");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoCannot store ";
      stringArray0[6] = null;
      String string7 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoCannot store ", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals(7, stringArray0.length);
      
      boolean boolean4 = StringUtils.isWhitespace(string0);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("X97P!zkAW-[(TCDft", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.substringBefore((String) null, (-230));
      assertNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("X97P!zkAW-[(TCDft", 'p');
      assertEquals("pX97P!zkAW-[(TCDftp", string1);
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "Cannot store ", 463);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string2 = StringUtils.stripEnd("Cannot store ", "pX97P!zkAW-[(TCDftp");
      assertEquals("Cannot store ", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("ZA", "Minimum abbreviation width is %d");
      assertEquals("ZA", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("ZA");
      assertEquals("ZA", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat('(', 122);
      assertEquals("((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("Y]TJXPJ9T|XF'ko", "\n", "Minimum abbreviation width is %d");
      assertNull(stringArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "ZA", '(');
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width is %d");
      assertNotNull(stringArray1);
      assertEquals(5, stringArray1.length);
      
      String string3 = StringUtils.reverse("ZA");
      assertEquals("AZ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.joinWith("AZ", stringArray1);
      assertEquals("MinimumAZabbreviationAZwidthAZisAZ%d", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(5, stringArray1.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "AZ";
      charSequenceArray0[1] = (CharSequence) "AZ";
      boolean boolean0 = StringUtils.isEmpty("Minimum abbreviation width is %d");
      assertFalse(boolean0);
      
      String string5 = StringUtils.substringBeforeLast((String) null, "#!^ZS]G");
      assertNull(string5);
      
      int int2 = StringUtils.indexOf((CharSequence) "MinimumAZabbreviationAZwidthAZisAZ%d", (CharSequence) null, 15);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Cannot store ", (CharSequence) null, (int) (byte)65);
      assertEquals((-1), int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) '0';
      intArray0[1] = (-346);
      intArray0[2] = (-1);
      intArray0[3] = (int) (byte)65;
      intArray0[4] = (int) ' ';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '0', (-1), 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.defaultString(", Length: 0");
      assertEquals(", Length: 0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnce("Minimum abbreviation width is %d", "0!OlRdr|5T2K\"[\"M_", "s@*bMOZ#TTr K5K");
      assertEquals("Minimum abbreviation width is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("c\"YXci]IB*");
      assertEquals("C\"yxCI]ib*", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "C\"yxCI]ib*", 0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) ", Length: 0", (char[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.repeat("s@*bMOZ#TTr K5K", (-1));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceAll("", ", Length: 0", ", Length: 0");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.join((char[]) null, 'y');
      assertNull(string5);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "0!OlRdr|5T2K\"[\"M_");
      assertEquals(17, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = StringUtils.compare(", Length: 0", ", Length: 0");
      assertEquals(0, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      String string6 = StringUtils.strip("");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      
      int int4 = StringUtils.indexOfIgnoreCase((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "C\"yxCI]ib*");
      assertEquals((-1), int4);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1422.0F;
      boolean boolean0 = StringUtils.isNumericSpace(", Length: 0");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replacePattern("Supplied value must be a valid byte literal between -32768 and 32767: [", "BB'BmBFBfBLBGBz()", ", Length: 0");
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("Yi5b@", "]EpMbwQ");
      assertEquals((-4), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) ", Length: 0", (-4));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.right("Minimum abbreviation width is %d", (-1));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceOnceIgnoreCase("4dW(En<5", "", (String) null);
      assertEquals("4dW(En<5", string0);
      assertNotNull(string0);
      
      Class<String> class0 = String.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Class<String> class1 = String.class;
      ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class1);
      assertSame(class1, class0);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      Iterator<String> iterator0 = serviceLoader1.iterator();
      assertSame(class1, class0);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, '\'');
      assertEquals("", string1);
      assertSame(class1, class0);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[1] = 0;
      intArray0[3] = 31;
      intArray0[4] = 3;
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(treeSet0.contains(31));
      assertNotNull(treeSet0);
      
      TreeSet<Object> treeSet1 = new TreeSet<Object>((SortedSet<Object>) treeSet0);
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(treeSet0.contains(31));
      assertFalse(treeSet1.contains(31));
      assertNotNull(treeSet1);
      
      String string0 = StringUtils.join((Iterable<?>) treeSet1, ':');
      assertEquals("", string0);
      assertNotSame(treeSet0, treeSet1);
      assertNotSame(treeSet1, treeSet0);
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(string0));
      assertFalse(treeSet0.contains(31));
      assertFalse(treeSet1.contains(31));
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("", "", (-482));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultIfEmpty("", "()*I5 Fn+eVF!");
      assertEquals("()*I5 Fn+eVF!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("()*I5 Fn+eVF!", "object");
      assertEquals("()*I5 Fn+eVF!", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("", "R<f_;p`1-YP", "ru%zk[pS");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 58);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.reverseDelimited("", 'G');
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("Z]B");
      assertEquals("Z]B", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("Z]B", "", charSequenceArray0);
      assertEquals("Z]B", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(0, charSequenceArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "Z]B", (CharSequence) "Z]B");
      assertEquals(1, int0);
      
      String string4 = StringUtils.substring("BQ<e", 58, 5);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      char[] charArray0 = new char[0];
      String string5 = StringUtils.removeEndIgnoreCase("", "Z]B");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Z]B";
      stringArray0[1] = "eqkI;R%c2)d3M_EA_bK";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "%D");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      
      boolean boolean2 = StringUtils.isAllEmpty(stringArray1);
      assertFalse(boolean2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = StringUtils.stripToNull("T~DxJF7+0bGurQ:q&");
      assertEquals("T~DxJF7+0bGurQ:q&", string0);
      assertNotNull(string0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      String string1 = StringUtils.strip("T~DxJF7+0bGurQ:q&");
      assertEquals("T~DxJF7+0bGurQ:q&", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "T~DxJF7+0bGurQ:q&", (CharSequence) "T~DxJF7+0bGurQ:q&", 4);
      assertEquals(0, int0);
      
      String string2 = StringUtils.chop("org.apache.commons.lang3.CharUtils");
      assertEquals("org.apache.commons.lang3.CharUtil", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace("T~DxJF7+0bGurQ:q&");
      assertEquals("T~DxJF7+0bGurQ:q&", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[4] = 'm';
      charArray0[3] = 'F';
      charArray0[4] = 'f';
      String[] stringArray0 = new String[1];
      stringArray0[0] = "4028HFo";
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "4028HFo", (CharSequence) "4028HFo");
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip("4028HFo");
      assertEquals("4028HFo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, "4028HFo");
      assertEquals("4028HFo", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "4028HFo", (CharSequence) "XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo", Integer.MAX_VALUE);
      assertEquals(31, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.defaultString("4028HFo", "XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo");
      assertEquals("4028HFo", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "4028HFo", charArray0);
      assertEquals(5, int2);
      assertArrayEquals(new char[] {'B', '\u0000', '\u0000', 'F', 'f', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(8, charArray0.length);
      
      String string4 = StringUtils.chop("ch");
      assertEquals("c", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.normalizeSpace("6`9");
      assertEquals("6`9", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[4] = 'm';
      charArray0[3] = 'F';
      charArray0[4] = 'f';
      String[] stringArray0 = new String[1];
      stringArray0[0] = "4028HFo";
      String string0 = StringUtils.replaceEach("4028HFo", stringArray0, stringArray0);
      assertEquals("4028HFo", string0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.LF;
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "4028HFo", (CharSequence) "4028HFo");
      assertEquals(0, int0);
      
      String string2 = StringUtils.strip("4028HFo");
      assertEquals("4028HFo", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((Object[]) stringArray0, "4028HFo");
      assertEquals("4028HFo", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "4028HFo", (CharSequence) "XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo", Integer.MAX_VALUE);
      assertEquals(31, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.defaultString("4028HFo", "XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo");
      assertEquals("4028HFo", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "4028HFo", charArray0);
      assertEquals(5, int2);
      assertArrayEquals(new char[] {'B', '\u0000', '\u0000', 'F', 'f', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, charArray0.length);
      
      String string5 = StringUtils.defaultString("f9X\"o\"lBDt");
      assertEquals("f9X\"o\"lBDt", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.center("org.apache.commons.lang3.ObjectUtils$Null", 0, 'o');
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = StringUtils.substringBetween("4028HFo", "XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("|GQ");
      assertEquals("|GQ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultIfEmpty("YJmJ};'~", "4.Z?hsw*)$:Hl");
      assertEquals("YJmJ};'~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnce("1P[Jq%v:d)", "|GQ", "");
      assertEquals("1P[Jq%v:d)", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("|GQ");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      String string3 = StringUtils.getDigits((String) null);
      assertNull(string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "4.Z?hsw*)$:Hl", (CharSequence) "YJmJ};'~", 1497);
      assertEquals(13, int0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = StringUtils.stripEnd("P:=918Foq<~$]D\"G|]]", "P:=918Foq<~$]D\"G|]]");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart((String) null, "P:=918Foq<~$]D\"G|]]");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("8~GpJrQPh ,8=um", "n5&%K*/Xg^y8D4");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("|Bo`~:$pr^'ZkWRyXw", 'H', 'H');
      assertEquals("|Bo`~:$pr^'ZkWRyXw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.joinWith("n", stringArray0);
      assertEquals("8~GpJrQPh ,8=um", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("8~GpJrQPh ,8=um", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.rightPad("8~GpJrQPh ,8=um", 9, 'D');
      assertEquals("8~GpJrQPh ,8=um", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("n", 9);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.difference("", "n5&%K*/Xg^y8D4");
      assertEquals("n5&%K*/Xg^y8D4", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.leftPad("", 9, 'i');
      assertEquals("iiiiiiiii", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceFirst("8~GpJrQPh ,8=um", "m%mc&2,;E}N:U\"Ic:", "n");
      assertEquals("8~GpJrQPh ,8=um", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string3));
      assertNotNull(string7);
      
      String string8 = StringUtils.removeStart("", "8~GpJrQPh ,8=um");
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      
      String string9 = StringUtils.leftPad("', is neither of type Map.Entry nor an Array", 9, '+');
      assertEquals("', is neither of type Map.Entry nor an Array", string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string1 = StringUtils.abbreviate("LXP~D+L,B5x?#Oza9J", 1937, 1937);
      assertEquals("LXP~D+L,B5x?#Oza9J", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("null/empty items");
      assertEquals("null/empty items", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "null/empty items", (CharSequence) "LXP~D+L,B5x?#Oza9J", 1309);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "null/empty items", 48);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "null/empty items", (CharSequence) "LXP~D+L,B5x?#Oza9J", 65536);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String string3 = StringUtils.leftPad("null/empty items", 1937, (String) null);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Vector<Object> vector0 = null;
      try {
        vector0 = new Vector<Object>((-1), 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{}";
      String string0 = StringUtils.leftPad("{}", 0, 'P');
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("/x", 'J');
      assertEquals("J/xJ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("{}", "/x", 0);
      assertEquals("{}", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "J/xJ", 102);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.abbreviate((String) null, (String) null, 465, 102);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.containsWhitespace("J/xJ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.rightPad("{}", 38);
      assertEquals("{}                                    ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "J/xJ", (-3663));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      String string0 = StringUtils.join(byteArray0, '(');
      assertEquals("-70", string0);
      assertArrayEquals(new byte[] {(byte) (-70)}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteArray0.length);
      
      boolean boolean0 = StringUtils.isNumericSpace("-70");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("Cannot store ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeEndIgnoreCase("Cannot store ", "Cannot store ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("6?(F!S,VY^$o<Ixdo", 'o');
      assertEquals("6?(F!S,VY^$o<Ixdo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'o';
      doubleArray0[1] = (double) 'o';
      String string2 = StringUtils.truncate("R^}RmJ7|?;@7[x5|", 0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      try { 
        StringUtils.getBytes("!,QKAz1ARYc]le0)", "WC]|D es'am.En");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = StringUtils.abbreviate("X!KMbu9P", 6);
      assertEquals("X!K...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "X!KMbu9P", "X!K...");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("X!K...");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.equalsAny("X!KMbu9P", charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.chomp((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = StringUtils.join((Iterator<?>) null, "Object varargs must not be null");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[7];
      String string1 = "";
      stringArray0[0] = "";
      stringArray0[1] = "Exception cloning Cloneable type ";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "Object varargs must not be null";
      stringArray0[5] = "Q(TCDft";
      stringArray0[6] = null;
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("Exception cloning Cloneable type ", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(7, stringArray0.length);
      
      String string3 = StringUtils.stripEnd("Exception cloning Cloneable type ", "/*|\"f'%:_H2'Object varargs must not be null");
      assertEquals("Exception cloning Cloneable typ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Exception cloning Cloneable typ", (CharSequence) "Object varargs must not be null");
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = StringUtils.capitalize("p{InCombiningDiacriticalMarks}+");
      assertEquals("P{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase("jz=I]TU(~_Y", (String) null);
      assertEquals(1, int0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("jz=I]TU(~_Y", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = ", Length: 0";
      String string1 = StringUtils.rightPad(", Length: 0", 0, 'k');
      assertEquals(", Length: 0", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ", Length: 0", (CharSequence) ", Length: 0", 0);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isEmpty(", Length: 0");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((double[]) null, ',');
      assertNull(string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) ", Length: 0");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = StringUtils.right("1s|hxFFL", (-567));
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "1s|hxFFL";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "1s|hxFFL";
      charSequenceArray0[6] = (CharSequence) "1s|hxFFL";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("1s|hxFFL", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("YZ'yZQ/VlgEcx");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("", "Cannot clone Cloneable type ", "1s|hxFFL");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-567);
      longArray0[1] = (long) (-567);
      String string2 = StringUtils.join(longArray0, 'g', (-567), (-567));
      assertEquals("", string2);
      assertArrayEquals(new long[] {(-567L), (-567L)}, longArray0);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2, longArray0.length);
      
      String string3 = StringUtils.stripToEmpty("0K167K167K32K3K2289K00K167K167K32K3K2289K0");
      assertEquals("0K167K167K32K3K2289K00K167K167K32K3K2289K0", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      CharBuffer charBuffer0 = StringUtils.defaultIfEmpty((CharBuffer) null, (CharBuffer) null);
      assertNull(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.unwrap("0.071.0", 'D');
      assertEquals("0.071.0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("11IR[", (CharSequence) null, charSequenceArray0);
      assertEquals("11IR[", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.removeEnd("comparator", "~jO");
      assertEquals("comparator", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate(" has no clone method", 0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.replacePattern("LaFm z;k*|OCu%AxPki", "tM!^", "gFeuq(aV");
      assertEquals("LaFm z;k*|OCu%AxPki", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(102);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(102, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(102, charBuffer0.length());
      assertEquals(102, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(102, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      assertNotSame(charBuffer1, charBuffer0);
      assertArrayEquals(new char[] {'D'}, charArray0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(1, charBuffer1.limit());
      assertEquals(1, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("D", charBuffer1.toString());
      assertNotNull(charBuffer1);
      assertEquals(1, charArray0.length);
      
      CharBuffer charBuffer2 = charBuffer1.duplicate();
      assertNotSame(charBuffer1, charBuffer2);
      assertNotSame(charBuffer1, charBuffer0);
      assertNotSame(charBuffer2, charBuffer0);
      assertNotSame(charBuffer2, charBuffer1);
      assertArrayEquals(new char[] {'D'}, charArray0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(charBuffer2.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(1, charBuffer1.limit());
      assertEquals(1, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("D", charBuffer1.toString());
      assertEquals(0, charBuffer2.arrayOffset());
      assertFalse(charBuffer2.isDirect());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(1, charBuffer2.length());
      assertEquals(1, charBuffer2.limit());
      assertEquals(1, charBuffer2.capacity());
      assertEquals(0, charBuffer2.position());
      assertEquals("D", charBuffer2.toString());
      assertTrue(charBuffer2.hasArray());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals(1, charBuffer2.remaining());
      assertNotNull(charBuffer2);
      assertEquals(1, charArray0.length);
      
      CharBuffer charBuffer3 = StringUtils.defaultIfEmpty(charBuffer1, charBuffer1);
      assertSame(charBuffer1, charBuffer3);
      assertNotSame(charBuffer1, charBuffer2);
      assertNotSame(charBuffer1, charBuffer0);
      assertNotSame(charBuffer3, charBuffer2);
      assertNotSame(charBuffer3, charBuffer0);
      assertSame(charBuffer3, charBuffer1);
      assertArrayEquals(new char[] {'D'}, charArray0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertTrue(charBuffer1.equals((Object)charBuffer2));
      assertFalse(charBuffer3.equals((Object)charBuffer0));
      assertTrue(charBuffer3.equals((Object)charBuffer2));
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(1, charBuffer1.limit());
      assertEquals(1, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("D", charBuffer1.toString());
      assertTrue(charBuffer3.hasArray());
      assertTrue(charBuffer3.hasRemaining());
      assertEquals(0, charBuffer3.arrayOffset());
      assertEquals("D", charBuffer3.toString());
      assertEquals(1, charBuffer3.remaining());
      assertFalse(charBuffer3.isReadOnly());
      assertEquals(1, charBuffer3.limit());
      assertEquals(0, charBuffer3.position());
      assertEquals(1, charBuffer3.length());
      assertFalse(charBuffer3.isDirect());
      assertEquals(1, charBuffer3.capacity());
      assertNotNull(charBuffer3);
      assertEquals(1, charArray0.length);
      
      String string5 = StringUtils.right("gFeuq(aV", 0);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int[] intArray0 = new int[0];
      String string6 = StringUtils.join(intArray0, '2');
      assertEquals("", string6);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals(0, intArray0.length);
      
      String string7 = StringUtils.replacePattern("gjQ", "0.071.0", ">3|OyJQPm_!c+O?8CP");
      assertEquals("gjQ", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "tM!^");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("lMIR3N?&K\"e*iGws", "lMIR3N?&K\"e*iGws", "lMIR3N?&K\"e*iGws", 4);
      assertEquals("lMIR3N?&K\"e*iGws", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = '\'';
      charArray0[2] = 'm';
      charArray0[3] = 'F';
      charArray0[4] = 'F';
      charArray0[5] = 'L';
      charArray0[6] = 'G';
      charArray0[7] = 'z';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "lMIR3N?&K\"e*iGws", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'B', '\'', 'm', 'F', 'F', 'L', 'G', 'z'}, charArray0);
      assertEquals(8, charArray0.length);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) 'm';
      objectArray0[1] = (Object) 'F';
      objectArray0[2] = (Object) 'm';
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) 'L';
      objectArray0[5] = (Object) 'F';
      String string1 = StringUtils.join(objectArray0, 'T');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, objectArray0.length);
      
      String string2 = StringUtils.toRootUpperCase("lMIR3N?&K\"e*iGws");
      assertEquals("LMIR3N?&K\"E*IGWS", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String[] stringArray0 = new String[16];
      int int0 = StringUtils.lastIndexOfAny("{}", stringArray0);
      assertEquals((-1), int0);
      assertEquals(16, stringArray0.length);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(16, stringArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1019.0);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) (-1);
      // Undeclared exception!
      try { 
        StringUtils.removePattern("", "{}");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition
         // {}
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, ' ');
      assertEquals("", string0);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string0);
      assertEquals(0, longArray0.length);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.ENGLISH;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertNotNull(locale1);
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertEquals("", string1);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertNotNull(string1);
      
      Locale locale2 = Locale.FRENCH;
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertEquals("fr", locale2.toString());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertNotNull(locale2);
      
      String string2 = locale0.toLanguageTag();
      assertEquals("de-DE", string2);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(string2);
      
      String string3 = StringUtils.lowerCase(" vs ", locale0);
      assertEquals(" vs ", string3);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("6`9");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.removeStart("&ePxZ|Vk*!'", "6`9");
      assertEquals("&ePxZ|Vk*!'", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      String string0 = StringUtils.prependIfMissing("Object varargs must not be null", "Object varargs must not be null", charSequenceArray0);
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize("6\"T");
      assertEquals("6\"T", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-601L);
      longArray0[2] = (-1L);
      longArray0[3] = (-182L);
      longArray0[4] = (-1L);
      longArray0[5] = (-1L);
      longArray0[6] = (-1L);
      longArray0[7] = 1L;
      String string3 = StringUtils.join(longArray0, '-');
      assertEquals("0--601--1--182--1--1--1-1", string3);
      assertArrayEquals(new long[] {0L, (-601L), (-1L), (-182L), (-1L), (-1L), (-1L), 1L}, longArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(8, longArray0.length);
      
      int int0 = StringUtils.compare((String) null, "jz=I]TU(~_Y", false);
      assertEquals(1, int0);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = '-';
      charArray0[4] = '-';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "6\"T", charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'-', '-', '-', '-', '-'}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String[] stringArray0 = new String[16];
      int int0 = StringUtils.lastIndexOfAny("{}", stringArray0);
      assertEquals((-1), int0);
      assertEquals(16, stringArray0.length);
      
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(16, stringArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1019.0);
      String string1 = StringUtils.rightPad("", (-1), "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(16, stringArray0.length);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)15;
      shortArray0[1] = (short)322;
      shortArray0[2] = (short)15;
      String string2 = StringUtils.join(shortArray0, 'B');
      assertEquals("15B322B15", string2);
      assertArrayEquals(new short[] {(short)15, (short)322, (short)15}, shortArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(3, shortArray0.length);
      
      String string3 = StringUtils.mid("[", (short)996, 57);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(16, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = StringUtils.join((boolean[]) null, 's', 0, 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.prependIfMissing("", (CharSequence) null, charSequenceArray0);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, charSequenceArray0.length);
      
      String string2 = StringUtils.reverseDelimited("", 's');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull("Z]B");
      assertEquals("Z]B", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "", 0);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.stripStart("Z]B", "AGw}{ZF6T4MRt}O~");
      assertEquals("]B", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)0;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      char[] charArray0 = new char[3];
      Charset charset1 = Charset.defaultCharset();
      assertSame(charset1, charset0);
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.toString());
      assertNotNull(charset1);
      
      charArray0[0] = 's';
      charArray0[1] = 'T';
      charArray0[2] = 's';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'s', 'T', 's'}, charArray0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(3, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("sTs", charBuffer0.toString());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      assertEquals(3, charArray0.length);
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertSame(charset0, charset1);
      assertArrayEquals(new char[] {'s', 'T', 's'}, charArray0);
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(3, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals(3, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=3 cap=3]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(3, byteBuffer0.remaining());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(byteBuffer0);
      assertEquals(3, charArray0.length);
      
      String string5 = StringUtils.toEncodedString(byteArray0, charset0);
      assertEquals("\uFFFD\u0000", string5);
      assertSame(charset0, charset1);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)0}, byteArray0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(string5);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("gC>jlLMJ", "tor");
      assertEquals("gC>jlLMJ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("?*$tFL}e9O#!M%", 13);
      assertEquals("$tFL}e9O#!M%", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 13;
      intArray0[1] = 13;
      intArray0[2] = 57;
      intArray0[3] = 13;
      intArray0[4] = 13;
      intArray0[5] = 13;
      intArray0[6] = 13;
      intArray0[7] = 13;
      intArray0[8] = 13;
      String string2 = StringUtils.join(intArray0, 'd');
      assertEquals("13d13d57d13d13d13d13d13d13", string2);
      assertArrayEquals(new int[] {13, 13, 57, 13, 13, 13, 13, 13, 13}, intArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(9, intArray0.length);
      
      String string3 = StringUtils.replacePattern("$tFL}e9O#!M%", "Vj~dA#", "eomb*u=\"sAp+#9");
      assertEquals("$tFL}e9O#!M%", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      String string0 = StringUtils.replaceChars(";{'4fH0`W#8LG,", ')', ')');
      assertEquals(";{'4fH0`W#8LG,", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty(";{'4fH0`W#8LG,");
      assertEquals(";{'4fH0`W#8LG,", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars(";{'4fH0`W#8LG,", ')', ')');
      assertEquals(";{'4fH0`W#8LG,", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(";{'4fH0`W#8LG,"));
      assertNotNull(linkedList0);
      
      String string3 = StringUtils.center(";{'4fH0`W#8LG,", 7, "Minimum abbreviation width with offset is %d");
      assertEquals(";{'4fH0`W#8LG,", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = classLoader1.getParent();
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNull(classLoader2);
      
      String string4 = StringUtils.stripStart(";{'4fH0`W#8LG,", "Qb");
      assertEquals(";{'4fH0`W#8LG,", string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull("gFeuq(aV");
      assertEquals("gFeuq(aV", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("gFeuq(aV"));
      assertNotNull(linkedList0);
      
      String string2 = StringUtils.center("", 7, (String) null);
      assertEquals("       ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      String string3 = StringUtils.stripStart("gFeuq(aV", "gFeuq(aV");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", true);
      assertEquals(0, int0);
      
      String string0 = StringUtils.chop("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[1] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[2] = "p{InCombiningDiacriticalMarks}";
      stringArray0[3] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[4] = "hThe String must not be emptyhorg.apache.commons.lang3.Charsets";
      stringArray0[5] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[6] = "p{InCombiningDiacriticalMarks}+";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "W;sZg");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      
      boolean boolean0 = StringUtils.equalsAny("W;sZg", stringArray1);
      assertFalse(boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      
      int int1 = StringUtils.compareIgnoreCase("dC6y5.*B&>=q", "W;sZg", false);
      assertEquals((-19), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.upperCase("p{InCombiningDiacriticalMarks}+");
      assertEquals("P{INCOMBININGDIACRITICALMARKS}+", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("p{InCombiningDiacriticalMarks}", 8, "p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate((String) null, "p{InCombiningDiacriticalMarks}", 10);
      assertNull(string3);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(int0));
      assertNotNull(arrayList0);
      
      Object[] objectArray0 = arrayList0.toArray((Object[]) stringArray0);
      assertSame(stringArray0, objectArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(int0));
      assertNotNull(objectArray0);
      assertEquals(7, objectArray0.length);
      assertEquals(7, stringArray0.length);
      
      ArrayList arrayList1 = (ArrayList)arrayList0.clone();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList0.contains(int0));
      assertNotNull(arrayList1);
      
      arrayList0.trimToSize();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(int0));
      
      Integer integer0 = new Integer(8);
      assertEquals(8, (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-77));
      assertEquals((-77), (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      boolean boolean1 = arrayList0.add(integer1);
      assertTrue(boolean1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(integer1));
      assertFalse(arrayList0.contains(int1));
      
      arrayList0.add(0, integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(integer1));
      assertFalse(arrayList0.contains(0));
      
      String string4 = StringUtils.join((Iterable<?>) arrayList0, 'k');
      assertEquals("8k-77", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(integer1));
      assertFalse(arrayList0.contains(0));
      assertNotNull(string4);
      
      String string5 = StringUtils.capitalize("G+:4BK?1JY");
      assertEquals("G+:4BK?1JY", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[13];
      charSequenceArray0[0] = (CharSequence) "a& }#6P\"O-t!5S:4mg";
      String string0 = StringUtils.appendIfMissing("a& }#6P\"O-t!5S:4mg", "a& }#6P\"O-t!5S:4mg", charSequenceArray0);
      assertEquals("a& }#6P\"O-t!5S:4mg", string0);
      assertNotNull(string0);
      assertEquals(13, charSequenceArray0.length);
      
      int int0 = StringUtils.compare("org.apache.commons.lang3.StringUtils", (String) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("l 'H;VR", (String) null, (String) null, 50);
      assertEquals("l 'H;VR", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "l 'H;VR", (CharSequence) "l 'H;VR");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultString("=Ro^w12");
      assertEquals("=Ro^w12", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "l 'H;VR", (-3064));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.center("Ko+/;^f", 0, (String) null);
      assertEquals("Ko+/;^f", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = StringUtils.remove("|Bo`~:$pr^'ZkWRyXw", '0');
      assertEquals("|Bo`~:$pr^'ZkWRyXw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("|Bo`~:$pr^'ZkWRyXw");
      assertEquals("|Bo`~:$pr^'ZkWRyXw", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("tM!^", "|Bo`~:$pr^'ZkWRyXw", "11IR[");
      assertEquals("tM!^", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains('0'));
      assertNotNull(set0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("11IR["));
      assertNotNull(linkedHashSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedHashSet0.contains("11IR["));
      assertFalse(list0.contains("11IR["));
      assertNotNull(list0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      String string3 = StringUtils.lowerCase("Strings must not be null", locale0);
      assertEquals("strings must not be null", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "tM!^", 252);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("|Bo`~:$pr^'ZkWRyXw", "|Bo`~:$pr^'ZkWRyXw", false);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("0!OlRdr|5T2K\"[\"M_", "0!OlRdr|5T2K\"[\"M_");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("0!OlRdr|5T2K\"[\"M_"));
      assertNotNull(stack0);
      
      Stream<String> stream0 = stack0.stream();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains("0!OlRdr|5T2K\"[\"M_"));
      assertNotNull(stream0);
      
      boolean boolean0 = stack0.add("Threshold must not be negative");
      assertTrue(boolean0);
      assertEquals("[Threshold must not be negative]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("0!OlRdr|5T2K\"[\"M_"));
      assertTrue(stack0.contains("Threshold must not be negative"));
      
      String string0 = StringUtils.join((Iterable<?>) stack0, "Y$F?EVj}j(Cq");
      assertEquals("Threshold must not be negative", string0);
      assertEquals("[Threshold must not be negative]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains("0!OlRdr|5T2K\"[\"M_"));
      assertTrue(stack0.contains(string0));
      assertNotNull(string0);
      
      String string1 = StringUtils.normalizeSpace("0!OlRdr|5T2K\"[\"M_");
      assertEquals("0!OlRdr|5T2K\"[\"M_", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
      
      String string2 = StringUtils.join((short[]) null, ',');
      assertNull(string2);
      
      String string3 = StringUtils.replaceAll("Y$F?EVj}j(Cq", "The String must not be empty", (String) null);
      assertEquals("Y$F?EVj}j(Cq", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAllUpperCase("0!OlRdr|5T2K\"[\"M_");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertFalse(treeSet0.contains(""));
      assertNotNull(treeSet0);
      
      boolean boolean1 = treeSet0.add("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(treeSet0.contains(""));
      
      char[] charArray0 = new char[4];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      CharBuffer charBuffer0 = CharBuffer.allocate('<');
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(60, charBuffer0.length());
      assertEquals(60, charBuffer0.remaining());
      assertEquals(60, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(60, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(charBuffer0));
      assertNotNull(vector0);
      
      boolean boolean2 = vector0.add(charBuffer0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(60, charBuffer0.length());
      assertEquals(60, charBuffer0.remaining());
      assertEquals(60, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(60, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(vector0.isEmpty());
      assertEquals("[\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertTrue(vector0.contains(charBuffer0));
      
      boolean boolean3 = treeSet0.retainAll(vector0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(vector0.isEmpty());
      assertEquals("[\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(treeSet0.contains(""));
      assertTrue(vector0.contains(charBuffer0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      boolean boolean4 = treeSet0.add(locale_FilteringMode0);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.IGNORE_EXTENDED_RANGES, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      
      NavigableSet<Object> navigableSet0 = treeSet0.headSet((Object) locale_FilteringMode1, true);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertEquals(1, navigableSet0.size());
      assertFalse(navigableSet0.isEmpty());
      assertNotNull(navigableSet0);
      
      String string1 = StringUtils.join((Iterable<?>) treeSet0, "");
      assertEquals("AUTOSELECT_FILTERING", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("AUTOSELECT_FILTERING");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean5 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.removeStartIgnoreCase((String) null, "2Q,LCQR");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast("\n", (-1074));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "");
      assertEquals(0, int0);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean1 = stack0.add(locale_FilteringMode0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[REJECT_EXTENDED_RANGES]", stack0.toString());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(locale_FilteringMode0));
      
      String string2 = StringUtils.repeat((String) null, 10);
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, 'i', 0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 10
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast("\n", (-1074));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.getIfBlank("wZjI L\"RpFhK4)", (Supplier<String>) null);
      assertEquals("wZjI L\"RpFhK4)", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 3, (-1074));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.chop(" /U/q");
      assertEquals(" /U/", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.strip("Arguments cannot both be null", (String) null);
      assertEquals("Arguments cannot both be null", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeEndIgnoreCase("wZjI L\"RpFhK4)", "comparator~jO");
      assertEquals("wZjI L\"RpFhK4)", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.containsWhitespace("wZjI L\"RpFhK4)");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.substring("wZjI L\"RpFhK4)", 1563);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("X97P!zkAW-[(TCDft", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      char char0 = '0';
      String string0 = StringUtils.replaceChars("Cannot store ", '0', '0');
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("Cannot store "));
      assertNotNull(arrayDeque0);
      
      boolean boolean1 = arrayDeque0.add("org.apache.commons.lang3.RegExUtils");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains("org.apache.commons.lang3.RegExUtils"));
      assertFalse(arrayDeque0.contains("Cannot store "));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayDeque0, locale_FilteringMode0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(arrayDeque0.contains("org.apache.commons.lang3.RegExUtils"));
      assertFalse(arrayDeque0.contains("Cannot store "));
      assertFalse(list0.contains("Cannot store "));
      assertNotNull(list0);
      
      String string1 = StringUtils.lowerCase("X97P!zkAW-[(TCDft", locale0);
      assertEquals("x97p!zkaw-[(tcdft", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.startsWithAny("x97p!zkaw-[(tcdft", stringArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, stringArray0.length);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) '0';
      longArray0[1] = 0L;
      longArray0[2] = (long) '0';
      longArray0[3] = (long) '0';
      longArray0[4] = (long) '0';
      longArray0[5] = (long) '0';
      longArray0[6] = (long) '0';
      String string2 = StringUtils.join(longArray0, '+', (-1587), (-1587));
      assertEquals("", string2);
      assertArrayEquals(new long[] {48L, 0L, 48L, 48L, 48L, 48L, 48L}, longArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(7, longArray0.length);
      
      int int0 = (-791);
      String string3 = StringUtils.substringAfterLast("vG?7</D4", (-791));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, "vG?7</D4", (-1587), 64);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1587
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = StringUtils.substringBetween("3:", "3:", "3:");
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "3:", (CharSequence) "M Zq", 720);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceAll("", "M Zq", "3:");
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("M Zq", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = StringUtils.join((boolean[]) null, 's', 0, 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad((String) null, 58, (String) null);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.prependIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertNull(string2);
      assertEquals(5, charSequenceArray0.length);
      
      String string3 = StringUtils.reverseDelimited("", 'G');
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.lowerCase("Z]B");
      assertEquals("z]b", string4);
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int0 = new Integer(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "object", 13);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = '\'';
      charArray0[2] = 'm';
      charArray0[3] = 'F';
      charArray0[4] = 'f';
      charArray0[5] = 'L';
      charArray0[6] = 'G';
      charArray0[7] = 'z';
      String string0 = StringUtils.join(charArray0, 'B');
      assertEquals("BB'BmBFBfBLBGBz", string0);
      assertArrayEquals(new char[] {'B', '\'', 'm', 'F', 'f', 'L', 'G', 'z'}, charArray0);
      assertNotNull(string0);
      assertEquals(8, charArray0.length);
      
      String string1 = StringUtils.toRootUpperCase(":,PuM~/;I)Q");
      assertEquals(":,PUM~/;I)Q", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("BB'BmBFBfBLBGBz");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(":,PUM~/;I)Q", "BB'BmBFBfBLBGBz", 32);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 32, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, '@', 98, 98);
      assertNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '@';
      charArray0[1] = '@';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'@', '@'}, charArray0);
      assertEquals(2, charArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 98);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeEnd("j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type Cannot clone Cloneable type f-G_sk-c$O", "j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type Cannot clone Cloneable type f-G_sk-c$O");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad((String) null, 98, '@');
      assertNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean3 = linkedList0.remove(object0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(locale_FilteringMode0));
      
      boolean boolean4 = linkedList0.add(locale_FilteringMode0);
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      
      Iterator<Locale.FilteringMode> iterator0 = linkedList0.descendingIterator();
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, '@');
      assertEquals("MAP_EXTENDED_RANGES", string3);
      assertFalse(string3.equals((Object)string1));
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(locale_FilteringMode0));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBetween("MAP_EXTENDED_RANGES", (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.right("kD]^jO{r", (-1));
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.left((String) null, (-1));
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("8?DNDqklSh~", "8?DNDqklSh~");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = StringUtils.defaultIfBlank("8?DNDqklSh~", "8?DNDqklSh~");
      assertEquals("8?DNDqklSh~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("Strings must not be null", "%3IeRdV<;0");
      assertEquals("Strings must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join((byte[]) null, 'c', (-3391), (-3391));
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.upperCase("dWfU=");
      assertEquals("DWFU=", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.substringsBetween("8?DNDqklSh~", "dUix/q", "");
      assertNull(stringArray1);
      
      String string4 = StringUtils.deleteWhitespace("Strings must not be null");
      assertEquals("Stringsmustnotbenull", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 'c';
      longArray0[1] = (long) (-3391);
      longArray0[2] = (long) 'c';
      longArray0[3] = (long) (-3391);
      longArray0[4] = (long) (-3391);
      String string5 = StringUtils.join(longArray0, '1', 64, 8);
      assertEquals("", string5);
      assertArrayEquals(new long[] {99L, (-3391L), 99L, (-3391L), (-3391L)}, longArray0);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals(5, longArray0.length);
      
      String[] stringArray2 = StringUtils.stripAll((String[]) null, "8?DNDqklSh~");
      assertNull(stringArray2);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string6 = locale0.getDisplayCountry();
      assertEquals("Taiwan", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(string6);
      
      String string7 = locale0.getDisplayCountry();
      assertEquals("Taiwan", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(string7);
      
      String string8 = StringUtils.lowerCase("ANM,pV)=#OX", locale0);
      assertEquals("anm,pv)=#ox", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(string8);
      
      boolean boolean1 = StringUtils.containsWhitespace("ANM,pV)=#OX");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("^*5.[5$sMneP~Uc[g%v:d)", "Supplied value must be a valid byte liteZF^iZ[&)c", "Minimum abbreviation width is %d");
      assertEquals("^*5.[5$sMneP~Uc[g%v:d)", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "^*5.[5$sMneP~Uc[g%v:d)", (CharSequence) "Supplied value must be a valid byte liteZF^iZ[&)c", (-1096));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Supplied value must be a valid byte liteZF^iZ[&)c", (char[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.repeat("-Gkf9-", 1142);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[0];
      String string2 = StringUtils.join(objectArray0, "^*5.[5$sMneP~Uc[g%v:d)");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, objectArray0.length);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Supplied value must be a valid byte liteZF^iZ[&)c", (CharSequence) string1);
      assertFalse(boolean0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      String string0 = StringUtils.rightPad("f", 0, "f");
      assertEquals("f", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay((String) null, "$k~/nT", (-1732), 32);
      assertNull(string1);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Stack<CharBuffer> stack1 = new Stack<CharBuffer>();
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertNotNull(stack1);
      
      Iterator<CharBuffer> iterator0 = stack1.iterator();
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, (String) null);
      assertEquals("", string2);
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("$k~/nT", "BB'BmBFBfBLBGBz", "ud6^.# 0#8/_q=$`");
      assertEquals("$k~/nT", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToNull("!yx");
      assertEquals("!yx", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars(",z b7D@JH!>)MD3m^dd", ",N$hUd`+#!74?)", "Object varargs must not be null");
      assertEquals("Oz baD@JHr>sMD3m^tt", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isNotBlank("f");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ",N$hUd`+#!74?)";
      String string6 = StringUtils.join(objectArray0, "$k~/nT", 1912, 2);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals(1, objectArray0.length);
      
      String string7 = StringUtils.stripToNull("-0gUwFKp7");
      assertEquals("-0gUwFKp7", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      String string8 = StringUtils.stripEnd("-0gUwFKp7", (String) null);
      assertEquals("-0gUwFKp7", string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      
      String string9 = StringUtils.join((List<?>) stack1, 'x', (int) (byte)0, (int) (byte)0);
      assertEquals("", string9);
      assertNotSame(stack1, stack0);
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 58, "");
      assertEquals("                                                          ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.reverseDelimited("2Ryq", 'G');
      assertEquals("2Ryq", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("Exception cloning Cloneable type ");
      assertEquals("Exception cloning Cloneable type", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("Exception cloning Cloneable type", "2Ryq", charSequenceArray0);
      assertEquals("Exception cloning Cloneable type2Ryq", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(0, charSequenceArray0.length);
      
      String string4 = StringUtils.replaceFirst("Exception cloning Cloneable type ", "", "Exception cloning Cloneable type");
      assertEquals("Exception cloning Cloneable typeException cloning Cloneable type ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.replace("2Ryq", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals("2Ryq", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.unwrap("Search and Replace array lengths don't match: ", 'l');
      assertEquals("Search and Replace array lengths don't match: ", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.stripToEmpty("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = StringUtils.wrap("$+%}AA,c+-;ij?1|p", "$+%}AA,c+-;ij?1|p");
      assertEquals("$+%}AA,c+-;ij?1|p$+%}AA,c+-;ij?1|p$+%}AA,c+-;ij?1|p", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("RJ:qq@ZVj4jE\"0CU", "}%`-4d-/^u", 33);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int1 = StringUtils.indexOf((CharSequence) "wGw}{ZF6T4MRt}O~", (CharSequence) "$+%}AA,c+-;ij?1|p$+%}AA,c+-;ij?1|p$+%}AA,c+-;ij?1|p");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.stripStart("RJ:qq@ZVj4jE\"0CU", "wGw}{ZF6T4MRt}O~");
      assertEquals("J:qq@ZVj4jE\"0CU", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)0;
      String string2 = StringUtils.join(byteArray0, '&');
      assertEquals("-42&0&0&63&0", string2);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)0, (byte)0, (byte)63, (byte)0}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(5, byteArray0.length);
      
      String string3 = StringUtils.repeat("J:qq@ZVj4jE\"0CU", (int) (byte)0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'f');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) null, (CharSequence) "");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string2 = StringUtils.leftPad("", (-1651), "org.apache.commons.lang3.LocaleUtils");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "eA";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 'I';
      longArray0[2] = (long) 'I';
      String string0 = StringUtils.join(longArray0, '4');
      assertEquals("0473473", string0);
      assertArrayEquals(new long[] {0L, 73L, 73L}, longArray0);
      assertNotNull(string0);
      assertEquals(3, longArray0.length);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.FRENCH;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      String string1 = StringUtils.lowerCase("0473473", locale0);
      assertEquals("0473473", string1);
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertNotNull(string1);
      
      String[] stringArray2 = StringUtils.split("6`9");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
      
      String string2 = StringUtils.replaceIgnoreCase("6`9", "4028HFo0 eTkjWx:", "eA");
      assertEquals("6`9", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = StringUtils.unwrap("[", '5');
      assertEquals("[", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "[";
      charSequenceArray0[1] = (CharSequence) "6?(F!S,VY^$o<Ixdo";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      String string1 = StringUtils.appendIfMissingIgnoreCase((String) null, "[", charSequenceArray0);
      assertNull(string1);
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.substringBetween("[", " ", "[");
      assertNull(string2);
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains('5'));
      assertNotNull(linkedList0);
      
      String string4 = StringUtils.join((List<?>) linkedList0, "The String must not be empty", 1860, (-1857));
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains('5'));
      assertNotNull(string4);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      Class<String> class1 = String.class;
      ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class1, classLoader1);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertSame(class1, class0);
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      ServiceLoader<String> serviceLoader2 = ServiceLoader.load(class1);
      assertNotSame(serviceLoader2, serviceLoader1);
      assertNotSame(serviceLoader2, serviceLoader0);
      assertSame(class1, class0);
      assertFalse(serviceLoader2.equals((Object)serviceLoader1));
      assertFalse(serviceLoader2.equals((Object)serviceLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader2.toString());
      assertNotNull(serviceLoader2);
      
      Iterator<String> iterator0 = serviceLoader1.iterator();
      assertNotSame(serviceLoader1, serviceLoader2);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertSame(class1, class0);
      assertFalse(serviceLoader1.equals((Object)serviceLoader2));
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(iterator0);
      
      String string5 = StringUtils.join(iterator0, 'o');
      assertEquals("", string5);
      assertNotSame(serviceLoader1, serviceLoader2);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertSame(class1, class0);
      assertFalse(serviceLoader1.equals((Object)serviceLoader2));
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.right("", 65);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.remove((String) null, 'f');
      assertNull(string2);
      
      String string3 = StringUtils.appendIfMissing((String) null, (CharSequence) null, (CharSequence[]) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("l 'H;VR", (String) null);
      assertEquals("l 'H;VR", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "l 'H;VR";
      charSequenceArray0[1] = (CharSequence) "l 'H;VR";
      charSequenceArray0[2] = (CharSequence) "l 'H;VR";
      charSequenceArray0[3] = (CharSequence) "l 'H;VR";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfterLast((String) null, 0);
      assertNull(string1);
      
      String string2 = StringUtils.trimToEmpty("l 'H;VR");
      assertEquals("l 'H;VR", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split(", Length: ", "The character ");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string3 = "comparator";
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("comparator", "fB|qvE^T=(l=.p", (-3208));
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) (-1232);
      char char0 = 'i';
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'i', 0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = StringUtils.left("f", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay((String) null, "", (-1732), 32);
      assertNull(string1);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Stack<CharBuffer> stack1 = new Stack<CharBuffer>();
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertNotNull(stack1);
      
      String string2 = StringUtils.replaceChars("", "BB'BmBFBfBLBGBz", "ud6^.# 0#8/_q=$`");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("!yx");
      assertEquals("!yx", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars(",z b7D@JH!>)MD3m^dd", ",N$hUd`+#!74?)", "f");
      assertEquals("fz bD@JH>MD3m^", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isNotBlank("f");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)81;
      String string5 = StringUtils.join(byteArray0, 'Z', 3041, (-1732));
      assertEquals("", string5);
      assertArrayEquals(new byte[] {(byte)81, (byte)81}, byteArray0);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals(2, byteArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string6 = StringUtils.replaceAll("", "BB'BmBFBfBLBGBz", "fz bD@JH>MD3m^");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.join((Iterable<?>) stack0, "");
      assertEquals("", string7);
      assertNotSame(stack0, stack1);
      assertTrue(stack0.equals((Object)stack1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNotNull(string7);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) ",N$hUd`+#!74?)", (CharSequence) "", (int) (byte)81);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("-");
      assertEquals("-", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("-", "-", 2715);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceChars((String) null, 'i', 'n');
      assertNull(string1);
      
      String string2 = StringUtils.reverse("%;RTokL6DHl");
      assertEquals("lHD6LkoTR;%", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("X97P!zkAW-[(TCDft", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.chomp("XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo", "Cannot store ");
      assertEquals("XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceEachRepeatedly("%Q7GcvXr,TvNVq,f", stringArray0, stringArray0);
      assertEquals("%Q7GcvXr,TvNVq,f", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, stringArray0.length);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("Cannot store "));
      assertNotNull(linkedHashSet0);
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("Cannot store "));
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, '7');
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains("Cannot store "));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars((String) null, 'Z', '~');
      assertNull(string3);
      
      String string4 = StringUtils.prependIfMissing("%Q7GcvXr,TvNVq,f", (CharSequence) null, stringArray0);
      assertEquals("%Q7GcvXr,TvNVq,f", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.toRootUpperCase("%Q7GcvXr,TvNVq,f");
      assertEquals("%Q7GCVXR,TVNVQ,F", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substring("Locale must not be null", 77, 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("?");
      assertArrayEquals(new int[] {63}, intArray0);
      assertNotNull(intArray0);
      assertEquals(1, intArray0.length);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.rotate("", 77);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.chop("u-8{mJbovb");
      assertEquals("u-8{mJbov", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("gC>jlLMJ", "gC>jlLMJ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("?*$tFL}e9O#!M%", 13);
      assertEquals("$tFL}e9O#!M%", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      int[] intArray1 = StringUtils.toCodePoints("$tFL}e9O#!M%");
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(13, intArray1.length);
      
      int[] intArray2 = StringUtils.toCodePoints("");
      assertNotSame(intArray2, intArray1);
      assertNotSame(intArray2, intArray0);
      assertArrayEquals(new int[] {}, intArray2);
      assertFalse(intArray2.equals((Object)intArray1));
      assertFalse(intArray2.equals((Object)intArray0));
      assertNotNull(intArray2);
      assertEquals(0, intArray2.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "$tFL}e9O#!M%", (CharSequence) "$tFL}e9O#!M%");
      assertTrue(boolean0);
      
      String string2 = StringUtils.rotate("", 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = StringUtils.join((boolean[]) null, 's', 0, 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad("", 58, "");
      assertEquals("                                                          ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rotate("                                                          ", 0);
      assertEquals("                                                          ", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("\"'#bwL9A??", (String) null, (String) null);
      assertEquals("\"'#bwL9A??", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("Cloneable type ", "h+TQ %Z<N");
      assertEquals("Cloneable type ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.compare((String) null, "jz=I]TU(~_Y", false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "\n");
      assertEquals(0, int0);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean1 = stack0.add(locale_FilteringMode0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("[REJECT_EXTENDED_RANGES]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(locale_FilteringMode0));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, 'i', 0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 10
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = StringUtils.rightPad("nCombiningDiacriticalMarks}+", (-1439), 'I');
      assertEquals("nCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[3];
      longArray0[0] = 5434L;
      longArray0[1] = (long) (-1439);
      longArray0[2] = (long) 'I';
      String string1 = StringUtils.join(longArray0, 'I');
      assertEquals("5434I-1439I73", string1);
      assertArrayEquals(new long[] {5434L, (-1439L), 73L}, longArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, longArray0.length);
      
      String string2 = StringUtils.defaultIfEmpty("5434I-1439I73", "nCombiningDiacriticalMarks}+");
      assertEquals("5434I-1439I73", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = "(";
      int int0 = StringUtils.compare("(", "W`U`K,)FN");
      assertEquals((-47), int0);
      
      String string4 = StringUtils.rightPad("(", (-1439), 'I');
      assertEquals("(", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "(";
      charSequenceArray0[1] = (CharSequence) "W`U`K,)FN";
      charSequenceArray0[2] = (CharSequence) "nCombiningDiacriticalMarks}+";
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains((-1439)));
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, 'T', (-1439), 24);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1439
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = StringUtils.wrap("The String must not be empty", 'h');
      assertEquals("hThe String must not be emptyh", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "hThe String must not be emptyh", (CharSequence) "hThe String must not be emptyh");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      charSequenceArray0[0] = (CharSequence) "The String must not be empty";
      charSequenceArray0[1] = (CharSequence) "hThe String must not be emptyh";
      boolean boolean1 = StringUtils.equalsAny("hThe String must not be emptyh", charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(10, charSequenceArray0.length);
      
      String string1 = StringUtils.replace("The String must not be empty", "hThe String must not be emptyh", "hThe String must not be emptyh", (-5));
      assertEquals("The String must not be empty", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("A.}N!u&~Cq9 )`pPb1Y", (-1231), 'h');
      assertEquals("A.}N!u&~Cq9 )`pPb1Y", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) (-5);
      floatArray0[1] = (float) (-5);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "The String must not be empty";
      stringArray0[1] = "A.}N!u&~Cq9 )`pPb1Y";
      String string3 = StringUtils.replaceEach("A.}N!u&~Cq9 )`pPb1Y", stringArray0, stringArray0);
      assertEquals("A.}N!u&~Cq9 )`pPb1Y", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(2, stringArray0.length);
      
      String string4 = StringUtils.LF;
      assertEquals("\n", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "\n");
      assertEquals((-1), int0);
      assertEquals(10, charSequenceArray0.length);
      
      String string5 = StringUtils.strip("0.071.0");
      assertEquals("0.071.0", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.join((Object[]) charSequenceArray0, "XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo");
      assertEquals("The String must not be emptyXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwohThe String must not be emptyhXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals(10, charSequenceArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "The String must not be emptyXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwohThe String must not be emptyhXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo", charSequenceArray0[1], 53);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(10, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(2, stringArray0.length);
      
      String string7 = StringUtils.defaultString("b/h<fC[w+IJ{^dhF", "YpLF03AKgvt[X");
      assertEquals("b/h<fC[w+IJ{^dhF", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      int int2 = StringUtils.indexOfAny((CharSequence) "0.071.0", charArray0);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {'h', 'h'}, charArray0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2, charArray0.length);
      
      String string8 = StringUtils.rightPad("0.071.0", (-1502), "The String must not be empty");
      assertEquals("0.071.0", string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      
      String string9 = StringUtils.appendIfMissing("A.}N!u&~Cq9 )`pPb1Y", "The String must not be empty", charSequenceArray0);
      assertEquals("A.}N!u&~Cq9 )`pPb1YThe String must not be empty", string9);
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      assertEquals(10, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("_7E}U;", "Minimum abbreviation width @6!U");
      assertEquals("_7E}U;", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Y]TJXPJ9T|XF'ko", "\n", "Minimum abbreviation width @6!U");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width @6!U");
      assertNotNull(stringArray1);
      assertEquals(4, stringArray1.length);
      
      String string1 = StringUtils.reverse("_7E}U;");
      assertEquals(";U}E7_", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.joinWith(";U}E7_", stringArray1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(4, stringArray1.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) ";U}E7_";
      charSequenceArray0[1] = (CharSequence) ";U}E7_";
      charSequenceArray0[2] = (CharSequence) "Minimum;U}E7_abbreviation;U}E7_width;U}E7_@6!U";
      charSequenceArray0[3] = (CharSequence) "_7E}U;";
      charSequenceArray0[4] = (CharSequence) "Y]TJXPJ9T|XF'ko";
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width @6!U";
      charSequenceArray0[6] = (CharSequence) ";U}E7_";
      boolean boolean0 = StringUtils.startsWithAny("_7E}U;", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.substringAfterLast("object", (-1340));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.getIfBlank("&!8P 8z)zfJoBo:R]\"", (Supplier<String>) null);
      assertEquals("&!8P 8z)zfJoBo:R]\"", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[3], (-1681), (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(7, charSequenceArray0.length);
      
      String string5 = StringUtils.chop("hThe String must not be emptyh");
      assertEquals("hThe String must not be empty", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.strip("_7E}U;", "XRr31{q!1K\"25L)'");
      assertEquals("_7E}U;", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.containsWhitespace("_7E}U;");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string7 = StringUtils.removeIgnoreCase((String) null, "hThe String must not be emptyh");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("\n", "\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.substringAfterLast("rh=*:AWO*|~~;r)aYt3", 9943);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.difference((String) null, "k9%OU~Qe|;%");
      assertEquals("k9%OU~Qe|;%", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("\n", 9943, 'T');
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("Exception cloning Cloneable type ", 9943);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isMixedCase(string3);
      assertFalse(boolean2);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string4));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.center("", 47, ", '");
      assertEquals(", ', ', ', ', ', ', ', , ', ', ', ', ', ', ', '", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "y");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "", 127);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "y";
      charSequenceArray0[2] = (CharSequence) "y";
      charSequenceArray0[3] = (CharSequence) null;
      String string1 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.strip((String) null, "E{agSS6t~^TS-m'WK");
      assertNull(string2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)29;
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = 'B';
      charArray0[2] = '`';
      charArray0[3] = 'R';
      charArray0[4] = 'w';
      charArray0[5] = '}';
      boolean boolean2 = StringUtils.containsAny(charSequenceArray0[3], charArray0);
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'2', 'B', '`', 'R', 'w', '}'}, charArray0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(6, charArray0.length);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, "", (-1), (-1181));
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = 'V';
      charArray0[2] = '?';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'?', 'V', '?'}, charArray0);
      assertEquals(3, charArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.join(charArray0, 'v', 2664, 2664);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'?', 'V', '?'}, charArray0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      long[] longArray0 = new long[0];
      String string0 = StringUtils.replaceAll("1.071.0", "s'e", "");
      assertEquals("1.071.0", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("Comparator should not be null.", "AyDIe'%3'=xm%[n^u");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      String string0 = StringUtils.substringAfter("%7;U.yP4(", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string1 = "4UP^pql36zBdgdB_";
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'F';
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) 'F';
      doubleArray0[4] = (double) 'F';
      doubleArray0[5] = (double) 'F';
      doubleArray0[6] = (double) 0;
      String string2 = StringUtils.join(doubleArray0, '$');
      assertEquals("70.0$-1.0$-1.0$70.0$70.0$70.0$0.0", string2);
      assertArrayEquals(new double[] {70.0, (-1.0), (-1.0), 70.0, 70.0, 70.0, 0.0}, doubleArray0, 0.01);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(7, doubleArray0.length);
      
      int int1 = StringUtils.compareIgnoreCase("Object varargs must not be null", "4UP^pql36zBdgdB_", true);
      assertEquals(59, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "70.0$-1.0$-1.0$70.0$70.0$70.0$0.0", (CharSequence) "");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string3 = StringUtils.center("Object varargs must not be null", 24, 'B');
      assertEquals("Object varargs must not be null", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(0));
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        linkedList0.subList((-2939), (-2106));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2939
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: ", 1916, 106);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "", 106);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 106;
      String string1 = StringUtils.left(", Length: ", 106);
      assertEquals(", Length: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", ", Length: ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "org.apache.commons.lang3.ObjectUtils");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.removeEnd(", Length: ", "\",");
      assertEquals(", Length: ", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.swapCase((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string2 = StringUtils.stripStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequenceArray0[0]);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string3 = StringUtils.rotate("org.apache.commons.lang3.LocaleUtils", Integer.MIN_VALUE);
      assertEquals("ang3.LocaleUtilsorg.apache.commons.l", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.capitalize("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("ang3.LocaleUtilsorg.apache.commons.l", "ang3.LocaleUtilsorg.apache.commons.l");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", "ang3.LocaleUtilsorg.apache.commons.l", 0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertEquals(63, stringArray2.length);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      List<Locale.LanguageRange> list0 = null;
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertNotNull(treeSet0);
      
      boolean boolean2 = treeSet0.add("XRr31{q!1K\"25L)'");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(treeSet0.contains("XRr31{q!1K\"25L)'"));
      assertFalse(treeSet0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) treeSet0, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("X97P!zkAW-[(TCDft", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("Cannot store ", '0', '0');
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("X97P!zkAW-[(TCDft"));
      assertNotNull(arrayDeque0);
      
      Predicate<String> predicate0 = Predicate.isEqual((Object) "Cannot store ");
      assertNotNull(predicate0);
      
      Predicate<String> predicate1 = predicate0.negate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<String> predicate2 = predicate0.and(predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      boolean boolean1 = arrayDeque0.removeIf(predicate2);
      assertFalse(boolean1);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("X97P!zkAW-[(TCDft"));
      
      boolean boolean2 = arrayDeque0.add("org.apache.commons.lang3.RegExUtils");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("X97P!zkAW-[(TCDft"));
      assertTrue(arrayDeque0.contains("org.apache.commons.lang3.RegExUtils"));
      
      String string1 = StringUtils.substringBefore("X97P!zkAW-[(TCDft", 907);
      assertEquals("X97P!zkAW-[(TCDft", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("offset cannot be negative", '0');
      assertEquals("0offset cannot be negative0", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "X97P!zkAW-[(TCDft";
      String string3 = StringUtils.replaceEachRepeatedly("offset cannot be negative", stringArray1, stringArray0);
      assertEquals("offset cannot be negative", string3);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "X97P!zkAW-[(TCDft", 2);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      String string4 = StringUtils.capitalize("offset cannot be negative");
      assertEquals("Offset cannot be negative", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.wrap("The String must not be empty", 'h');
      assertEquals("hThe String must not be emptyh", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "hThe String must not be emptyh", (CharSequence) "hThe String must not be emptyh");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "The String must not be empty";
      charSequenceArray0[1] = (CharSequence) "hThe String must not be emptyh";
      boolean boolean1 = StringUtils.equalsAny("hThe String must not be emptyh", charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.replace("The String must not be empty", "hThe String must not be emptyh", "hThe String must not be emptyh", 1);
      assertEquals("The String must not be empty", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("A.}N!u&~Cq9 )`pPb1Y", (-1231), 'h');
      assertEquals("A.}N!u&~Cq9 )`pPb1Y", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.startsWith(charSequenceArray0[0], charSequenceArray0[0]);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, charSequenceArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 1;
      String string3 = StringUtils.join(floatArray0, '7');
      assertEquals("0.071.0", string3);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(2, floatArray0.length);
      
      String string4 = StringUtils.trim("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.upperCase("The String must not be empty");
      assertEquals("THE STRING MUST NOT BE EMPTY", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOf((CharSequence) "hThe String must not be emptyh", (CharSequence) "0.071.0", 0);
      assertEquals((-1), int0);
      
      boolean boolean3 = StringUtils.endsWithIgnoreCase("The String must not be empty", "The String must not be empty");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("The String must not be empty", "0.071.0", 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.rightPad("f", 0, "f");
      assertEquals("f", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay((String) null, "", (-1732), 32);
      assertNull(string1);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Stack<CharBuffer> stack1 = new Stack<CharBuffer>();
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertNotNull(stack1);
      
      Iterator<CharBuffer> iterator0 = stack1.iterator();
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, (String) null);
      assertEquals("", string2);
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertFalse(string2.equals((Object)string0));
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("", "BB'BmBFBfBLBGBz", "ud6^.# 0#8/_q=$`");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToNull("!yx");
      assertEquals("!yx", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars(",z b7D@JH!>)MD3m^dd", ",N$hUd`+#!74?)", "Object varargs must not be null");
      assertEquals("Oz baD@JHr>sMD3m^tt", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isNotBlank("f");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ",N$hUd`+#!74?)";
      String string6 = StringUtils.stripToNull("-0gUwFKp7");
      assertEquals("-0gUwFKp7", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.leftPad("!yx", 6);
      assertEquals("   !yx", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      String string8 = StringUtils.join((short[]) null, '~', 2, 10);
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      String string0 = StringUtils.remove("|Bo`~:$pr^'ZkWRyXw", '0');
      assertEquals("|Bo`~:$pr^'ZkWRyXw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("Cannot clone Cloneable type ", "Supplied value must be a valid byte literal between -128 and 127: [");
      assertEquals("Cannot clone Cloneable type ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("|Bo`~:$pr^'ZkWRyXw", 0, 0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [");
      assertEquals(0, int0);
      
      String string3 = ";kc3x*pt$?q\\O;";
      String string4 = StringUtils.substring(";kc3x*pt$?qO;", 1610, 5);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("Supplied value must be a valid byte literal between -128 and 127: [", (-1086), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string1 = StringUtils.getDigits("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      String string2 = StringUtils.lowerCase("HBq(g");
      assertEquals("hbq(g", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnce("9:I'IY3a!,BL0>i)", "HBq(g", "Object varargs must not be null");
      assertEquals("9:I'IY3a!,BL0>i)", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[0]);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-17);
      String string4 = StringUtils.join(byteArray0, '9', 2192, 13);
      assertEquals("", string4);
      assertArrayEquals(new byte[] {(byte) (-17)}, byteArray0);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(1, byteArray0.length);
      
      String string5 = StringUtils.swapCase("Object varargs must not be null");
      assertEquals("oBJECT VARARGS MUST NOT BE NULL", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfter(" vs ", 2192);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      String string0 = StringUtils.chop("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("p{InCombiningDiacriticalMarks}+", "X3.#;|E2~C?Sr");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.right("M!^", 6);
      assertEquals("M!^", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = StringUtils.right("?*$tFL}e9O#!M%", 13);
      assertEquals("$tFL}e9O#!M%", string0);
      assertNotNull(string0);
      
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      boolean boolean0 = StringUtils.contains((CharSequence) "$tFL}e9O#!M%", (CharSequence) "$tFL}e9O#!M%");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringBefore("", 6);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("X!KMbu9P", 6);
      assertEquals("X!K...", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "X!KMbu9P", "X!K...");
      assertEquals(0, int0);
      
      String string2 = StringUtils.right("X!KMbu9P", 50);
      assertEquals("X!KMbu9P", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("X97P!zkAW-[(TCDft", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("Cannot store ", '0', '0');
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = StringUtils.swapCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.reverseDelimited("X97P!zkAW-[(TCDft", '0');
      assertEquals("X97P!zkAW-[(TCDft", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeAll("Cannot store ", (String) null);
      assertEquals("Cannot store ", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 97);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.mid((String) null, 97, 2);
      assertNull(string4);
      
      String string5 = StringUtils.trim("org.apache.commons.lang3.ArrayUtils");
      assertEquals("org.apache.commons.lang3.ArrayUtils", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", " r@o&T{R)Jn*_6");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("", "|qu1h");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertFalse(treeSet0.contains(""));
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.add("|qu1h");
      assertTrue(boolean0);
      assertFalse(treeSet0.contains(""));
      assertTrue(treeSet0.contains("|qu1h"));
      
      boolean boolean1 = treeSet0.add("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(treeSet0.contains(" r@o&T{R)Jn*_6"));
      assertTrue(treeSet0.contains(""));
      
      Spliterator<Object> spliterator0 = treeSet0.spliterator();
      assertFalse(treeSet0.contains(" r@o&T{R)Jn*_6"));
      assertTrue(treeSet0.contains(""));
      assertNotNull(spliterator0);
      
      Object object0 = treeSet0.higher("");
      assertEquals("|qu1h", object0);
      assertFalse(object0.equals((Object)string1));
      assertFalse(object0.equals((Object)string0));
      assertFalse(treeSet0.contains(" r@o&T{R)Jn*_6"));
      assertTrue(treeSet0.contains(""));
      assertNotNull(object0);
      
      String string2 = StringUtils.join((Iterable<?>) treeSet0, '-');
      assertEquals("-|qu1h", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)object0));
      assertFalse(treeSet0.contains(" r@o&T{R)Jn*_6"));
      assertTrue(treeSet0.contains(""));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("", "Comparator should not be null.");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)object0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(" r@o&T{R)Jn*_6"));
      assertNotNull(arrayDeque0);
      
      boolean boolean2 = arrayDeque0.add("~jO");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(" r@o&T{R)Jn*_6"));
      assertTrue(arrayDeque0.contains("~jO"));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayDeque0, locale_FilteringMode0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(arrayDeque0.contains(" r@o&T{R)Jn*_6"));
      assertTrue(arrayDeque0.contains("~jO"));
      assertFalse(list0.contains(" r@o&T{R)Jn*_6"));
      assertNotNull(list0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string4 = StringUtils.lowerCase("org.apache.commons.lang3.RegExUtils", locale0);
      assertEquals("org.apache.commons.lang3.regexutils", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)object0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "|qu1h";
      charSequenceArray0[2] = (CharSequence) "|qu1h";
      charSequenceArray0[3] = (CharSequence) " r@o&T{R)Jn*_6";
      boolean boolean3 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("|GQ");
      assertEquals("|GQ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("|GQ", "|GQ", 2715);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.unwrap("\",", "\",");
      assertEquals("\",", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfEmpty("YJmJ};'~", "YJmJ};'~");
      assertEquals("YJmJ};'~", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnce("1P[Jq%v:d)", "LjB%\"ZF^iZ[&)c", "");
      assertEquals("1P[Jq%v:d)", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("|GQ");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "1P[Jq%v:d)";
      objectArray0[1] = (Object) "|GQ";
      boolean boolean1 = StringUtils.startsWithAny("\",", (CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("The String must not be empty");
      assertEquals("The String must not be empty", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "d}";
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAlphaSpace("d}");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.abbreviateMiddle("", "%~m/|58J,jp", 165);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern("", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("X97P!zkAW-[(TCDft", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.center("Cannot store ", 14, '_');
      assertEquals("Cannot store _", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd((String) null, "+WHub");
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "X97P!zkAW-[(TCDft");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.stripStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequenceArray0[0]);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string2 = StringUtils.rotate("org.apache.commons.lang3.LocaleUtils", Integer.MIN_VALUE);
      assertEquals("ang3.LocaleUtilsorg.apache.commons.l", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", "ang3.LocaleUtilsorg.apache.commons.l", 0);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(63, stringArray1.length);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String string4 = StringUtils.repeat("^-`a:[Z", "Aborting to protect against StackOverflowError - output of one loop is the input of another", Integer.MIN_VALUE);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean2);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string2 = StringUtils.stripStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequenceArray0[0]);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = StringUtils.stripToNull("S0! ;)");
      assertEquals("S0! ;)", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("S0! ;)", "");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("xj");
      assertEquals("xj", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("lh\"Zz4mPl_");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.substringBeforeLast("lqrX2?w?\"84;^=k", "gFeuq(aV6?(F!S,VY^$o<Ixdo");
      assertEquals("lqrX2?w?\"84;^=k", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.toRootUpperCase((String) null);
      assertNull(string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "S0! ;)", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = StringUtils.rightPad("org.apache.commons.lang3.exception.CloneFailedException", 1449);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((long[]) null, '>');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Strings must not be null", (String) null, (-1558));
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String string2 = StringUtils.deleteWhitespace(", Length: 0");
      assertEquals(",Length:0", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeEndIgnoreCase("Cannot store ", "Cannot store ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.unwrap("6?(F!S,VY^$o<Ixdo", 'o');
      assertEquals("6?(F!S,VY^$o<Ixdo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("", "6?(F!S,VY^$o<Ixdo", charSequenceArray0);
      assertEquals("6?(F!S,VY^$o<Ixdo", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, charSequenceArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'o';
      doubleArray0[1] = (double) 'o';
      String string3 = StringUtils.removeEnd("gFeuq(aV", "6?(F!S,VY^$o<Ixdo");
      assertEquals("gFeuq(aV", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate("R^}RmJ7|?;@7[x5|", 0);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      try { 
        StringUtils.getBytes("!,QKAz1ARYc]le0)", "WC]|D es'am.En");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("X97P!zkAW-[(TCDft", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      charArray0[5] = '\"';
      charArray0[6] = '\"';
      String string0 = StringUtils.join(charArray0, '8');
      assertEquals("\"8\"8\"8\"8\"8\"8\"", string0);
      assertArrayEquals(new char[] {'\"', '\"', '\"', '\"', '\"', '\"', '\"'}, charArray0);
      assertNotNull(string0);
      assertEquals(7, charArray0.length);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, "X97P!zkAW-[(TCDft");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.lowerCase("HBq(g");
      assertEquals("hbq(g", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter(" vs ", 2192);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "0.071.0", "");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("hbq(g");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceAll(" vs ", " vs ", "\"]`d");
      assertEquals("\"]`d", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string1 = StringUtils.getDigits("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      String string2 = StringUtils.lowerCase("HBq(g");
      assertEquals("hbq(g", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnce("9:I'IY3a!,BL0>i)", "HBq(g", "Object varargs must not be null");
      assertEquals("9:I'IY3a!,BL0>i)", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[0]);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-17);
      String string4 = StringUtils.join(byteArray0, '9', 2192, 13);
      assertEquals("", string4);
      assertArrayEquals(new byte[] {(byte) (-17)}, byteArray0);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(1, byteArray0.length);
      
      String string5 = StringUtils.swapCase("Object varargs must not be null");
      assertEquals("oBJECT VARARGS MUST NOT BE NULL", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.substringAfter(" vs ", 2192);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String string0 = StringUtils.rightPad((String) null, 16, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.stripAccents("0!OlRdr|5T2K\"[\"M_");
      assertEquals("0!OlRdr|5T2K\"[\"M_", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("0!OlRdr|5T2K\"[\"M_");
      assertEquals("0!OlRdr|5T2K\"[\"M_", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = ">~yPj";
      String string0 = StringUtils.replaceEach(">~yPj", stringArray0, stringArray0);
      assertEquals(">~yPj", string0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.strip("org.apache.commons.lang3.StringUtils", ">~yPj");
      assertEquals("org.apache.commons.lang3.StringUtils", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) ">~yPj");
      assertFalse(boolean0);
      
      String string2 = StringUtils.toRootLowerCase("org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.stringutils", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "org.apache.commons.lang3.stringutils", (CharSequence) ">~yPj");
      assertEquals(0, int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'B';
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) 'B';
      intArray0[5] = 0;
      intArray0[6] = (int) 'B';
      String string3 = StringUtils.join(intArray0, '8', 1586, 109);
      assertEquals("", string3);
      assertArrayEquals(new int[] {66, 0, 0, 0, 66, 0, 66}, intArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(7, intArray0.length);
      
      String string4 = StringUtils.replaceFirst("7!O&z(x0sRs+}", (String) null, "org.apache.commons.lang3.stringutils");
      assertEquals("7!O&z(x0sRs+}", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int1 = StringUtils.lastOrdinalIndexOf("7!O&z(x0sRs+}", "h y!#{^<!$w~", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("0!OlRdr|5T2K\"[\"M_", "0!OlRdr|5T2K\"[\"M_", "0!OlRdr|5T2K\"[\"M_");
      assertNull(stringArray0);
      
      String string0 = StringUtils.defaultString("", "0!OlRdr|5T2K\"[\"M_");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeIgnoreCase("o(~u^0-_7E}U;", "fvtG6 @6!U");
      assertEquals("o(~u^0-_7E}U;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)4;
      byteArray0[7] = (byte) (-6);
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("ZA", "Minimum abbreviation width is %d");
      assertEquals("ZA", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("ZA");
      assertEquals("ZA", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat('3', 122);
      assertEquals("33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("Y]TJXPJ9T|XF'ko", "\n", "Minimum abbreviation width is %d");
      assertNull(stringArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "ZA", '3');
      assertEquals(0, int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width is %d");
      assertNotNull(stringArray1);
      assertEquals(5, stringArray1.length);
      
      String string3 = StringUtils.reverse("ZA");
      assertEquals("AZ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.joinWith("AZ", stringArray1);
      assertEquals("MinimumAZabbreviationAZwidthAZisAZ%d", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(5, stringArray1.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "AZ";
      charSequenceArray0[1] = (CharSequence) "AZ";
      charSequenceArray0[2] = (CharSequence) "MinimumAZabbreviationAZwidthAZisAZ%d";
      charSequenceArray0[3] = (CharSequence) "ZA";
      charSequenceArray0[4] = (CharSequence) "Y]TJXPJ9T|XF'ko";
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width is %d";
      charSequenceArray0[6] = (CharSequence) "AZ";
      boolean boolean0 = StringUtils.startsWithAny("ZA", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string5 = StringUtils.substringAfterLast("object", (-1340));
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOfIgnoreCase(charSequenceArray0[3], (CharSequence) "33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333");
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(7, charSequenceArray0.length);
      
      String string6 = StringUtils.getIfBlank("&!8P 8z)zfJoBo:R]\"", (Supplier<String>) null);
      assertEquals("&!8P 8z)zfJoBo:R]\"", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      int int3 = StringUtils.indexOf(charSequenceArray0[3], (-1681), (-1));
      assertEquals((-1), int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(7, charSequenceArray0.length);
      
      String string7 = StringUtils.chop("hThe String must not be emptyh");
      assertEquals("hThe String must not be empty", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      String string8 = StringUtils.strip("ZA", "XRr31{q!1K\"25L)'");
      assertEquals("ZA", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string0));
      assertNotNull(string8);
      
      boolean boolean1 = StringUtils.containsWhitespace("ZA");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int4 = StringUtils.indexOfDifference((CharSequence) "&!8P 8z)zfJoBo:R]\"", charSequenceArray0[5]);
      assertEquals(0, int4);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(7, charSequenceArray0.length);
      
      int int5 = StringUtils.countMatches((CharSequence) "ZA", 'z');
      assertEquals(0, int5);
      assertFalse(int5 == int2);
      assertTrue(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertTrue(int5 == int0);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(", Length: ", "}Uc3mD==DOM2Q`FQ ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.substringBefore("/SMU'<m;", "*#");
      assertEquals("/SMU'<m;", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "/SMU'<m;", ", Length: ");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains("}Uc3mD==DOM2Q`FQ "));
      assertNotNull(set0);
      
      String string1 = Locale.lookupTag(linkedList0, set0);
      assertEquals(0, linkedList0.size());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains("}Uc3mD==DOM2Q`FQ "));
      assertNull(string1);
      
      int int0 = StringUtils.getFuzzyDistance("/SMU'<m;", "*#", locale0);
      assertEquals(0, int0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(",", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(2, stringArray0.length);
      
      String string3 = StringUtils.defaultString(",", "0O7xYyi");
      assertEquals(",", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) ", Length: ", (CharSequence) ",", 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.replace("$^~J>$PMjQD>6ZZ#z)", "^vkUZ", "O;GHLXYA(Bcv#|>");
      assertEquals("$^~J>$PMjQD>6ZZ#z)", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBeforeLast("org.apache.commons.lang3.Charsets", ".D.HI1/Pf");
      assertEquals("org.apache.commons.lang3.Charsets", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.stripAccents("...");
      assertEquals("...", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.prependIfMissingIgnoreCase("89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0", "...", stringArray0);
      assertEquals("...89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.rightPad("', has a length less than 2", (int) (short)15, "', has a length less than 2");
      assertEquals("', has a length less than 2", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents(";zFF<9uqKc");
      assertEquals(";zFF<9uqKc", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace(":Q<-./&2WQ)G=");
      assertEquals(":Q<-./&2WQ)G=", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) ", Length: 0", (CharSequence) ", Length: 0");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) ", Length: 0", 32);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.replace("", "Array element ", "", 57);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 57);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isEmpty("Array element ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      String string2 = StringUtils.substring("_|JtX97P!zkAW-[(TCDft", 57, (-2031));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate("!N1&X] Ipg", 1916, 29);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String[] stringArray1 = StringUtils.split("89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0", "XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo");
      assertNotNull(stringArray1);
      assertEquals(7, stringArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 57;
      String string4 = StringUtils.join(doubleArray0, '\"');
      assertEquals("57.0", string4);
      assertArrayEquals(new double[] {57.0}, doubleArray0, 0.01);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(1, doubleArray0.length);
      
      int int1 = StringUtils.compareIgnoreCase("", "org.apache.commons.lang3.Charsets", false);
      assertEquals((-33), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "!N1&X] Ipg", (CharSequence) "");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string5 = StringUtils.repeat('n', (-2031));
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = StringUtils.chop("K4{hk.zSW,<B|[vBlooM '&.hYP");
      assertEquals("K4{hk.zSW,<B|[vBlooM '&.hY", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("-");
      assertEquals("-", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("-");
      assertEquals("-", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "-", 'R');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 321;
      intArray0[1] = 4;
      intArray0[2] = 76;
      intArray0[3] = 7;
      intArray0[4] = 31;
      intArray0[5] = 1597;
      intArray0[6] = 3;
      String string0 = StringUtils.join(intArray0, 'W', 117, (-1564));
      assertEquals("", string0);
      assertArrayEquals(new int[] {321, 4, 76, 7, 31, 1597, 3}, intArray0);
      assertNotNull(string0);
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannotannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("X97P!zkAW-[zkAW-[(TCDft", "Cannotannot store ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("Cannotannot store ", '0', '0');
      assertEquals("Cannotannot store ", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(string0));
      assertNotNull(arrayDeque0);
      
      boolean boolean1 = arrayDeque0.add("org.apache.commons.lang3.RegExUtils");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.contains(string0));
      assertTrue(arrayDeque0.contains("org.apache.commons.lang3.RegExUtils"));
      
      String string1 = StringUtils.lowerCase("X97P!zkAW-[zkAW-[(TCDft", locale0);
      assertEquals("x97p!zkaw-[zkaw-[(tcdft", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.startsWithAny("x97p!zkaw-[zkaw-[(tcdft", stringArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty(", Lenth: 0");
      assertEquals(", Lenth: 0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits(", Lenth: 0");
      assertEquals("0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) ", Lenth: 0";
      charSequenceArray0[1] = (CharSequence) "0";
      charSequenceArray0[2] = (CharSequence) "0";
      charSequenceArray0[3] = (CharSequence) ", Lenth: 0";
      charSequenceArray0[4] = (CharSequence) ", Lenth: 0";
      charSequenceArray0[5] = (CharSequence) "}Uc3mD==DOM2Q`FQ ";
      charSequenceArray0[6] = (CharSequence) "0";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase(charSequenceArray0[1], charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string2 = StringUtils.replaceEach("}Uc3mD==DOM2Q`FQ ", (String[]) null, (String[]) null);
      assertEquals("}Uc3mD==DOM2Q`FQ ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.remove("\n", ", Lenth: 0");
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("X97P!zkAW-[(TCDft", "X97P!zkAW-[(TCDft");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("1(kxe8_QhhgBO66", "N[");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("n5&%K*/Xg^y8D4", "1(kxe8_QhhgBO66");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
      
      String string0 = StringUtils.replaceChars("xTcC+ruymsAe$5G", 'D', 'D');
      assertEquals("xTcC+ruymsAe$5G", string0);
      assertNotNull(string0);
      
      String[] stringArray3 = StringUtils.splitByWholeSeparatorPreserveAllTokens("1(kxe8_QhhgBO66", "%Q7GcvXr,TvNVq,f", 90);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray2);
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertNotNull(stringArray3);
      assertEquals(1, stringArray3.length);
      
      String[] stringArray4 = StringUtils.stripAll(stringArray2, "XRr31{q!1K\"25L)'");
      assertNotSame(stringArray2, stringArray3);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray4);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray4, stringArray3);
      assertNotSame(stringArray4, stringArray1);
      assertNotSame(stringArray4, stringArray2);
      assertNotSame(stringArray4, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray3));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray0));
      assertNotNull(stringArray4);
      assertEquals(1, stringArray2.length);
      assertEquals(1, stringArray4.length);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast("\n", (-1074));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "\n", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.getIfBlank("wZjI L\"RpFhK4)", (Supplier<String>) null);
      assertEquals("wZjI L\"RpFhK4)", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 3, (-1074));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.chop(" /U/q");
      assertEquals(" /U/", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.strip("Arguments cannot both be null", (String) null);
      assertEquals("Arguments cannot both be null", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsWhitespace("\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.substring("wZjI L\"RpFhK4)", 1563);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string1 = StringUtils.getDigits("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      String string2 = StringUtils.lowerCase("HBq(g");
      assertEquals("hbq(g", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[3] = (CharSequence) "hbq(g";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.center("", (-1), 'v');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("", "hbq(g", (-4747), (-4747));
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)56;
      shortArray0[1] = (short)13;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)10;
      String string5 = StringUtils.substring("", (int) 'v');
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = StringUtils.wrap("The String must not be empty", 'h');
      assertEquals("hThe String must not be emptyh", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "hThe String must not be emptyh", (CharSequence) "hThe String must not be emptyh");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "The String must not be empty";
      charSequenceArray0[1] = (CharSequence) "hThe String must not be emptyh";
      boolean boolean1 = StringUtils.equalsAny("hThe String must not be emptyh", charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.replace("The String must not be empty", "hThe String must not be emptyh", "hThe String must not be emptyh", 1);
      assertEquals("The String must not be empty", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, charSequenceArray0.length);
      
      String string2 = StringUtils.center("A.}N!u&~Cq9 )`pPb1Y", 3472, 'v');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("The String must not be empty", "hThe String must not be emptyh", (-1231), 3472);
      assertEquals("The String must not be empty", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      String string4 = StringUtils.join(shortArray0, '!', (-145), (-2034458190));
      assertEquals("", string4);
      assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(4, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 58, "");
      assertEquals("                                                          ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      char char0 = 'G';
      String string1 = StringUtils.reverseDelimited("", 'G');
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "Z]B";
      String string3 = StringUtils.stripToNull("Z]B");
      assertEquals("Z]B", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("Z]B", "", charSequenceArray0);
      assertEquals("Z]B", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(0, charSequenceArray0.length);
      
      String string5 = StringUtils.stripStart("Z]B", "AGw}{ZF6T4MRt}O~");
      assertEquals("]B", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToNull("gFeuq(aV");
      assertEquals("gFeuq(aV", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(58));
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "Z]B", (-2042), (-1422));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2042
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = "gFeuq(aV";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, (String) null, 7, (int) '5');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 53
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("l 'H;VR", (String) null);
      assertEquals("l 'H;VR", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "l 'H;VR";
      charSequenceArray0[1] = (CharSequence) "l 'H;VR";
      charSequenceArray0[2] = (CharSequence) "l 'H;VR";
      charSequenceArray0[3] = (CharSequence) "l 'H;VR";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string1 = StringUtils.unwrap("6?(F!S,VY^$o<Ixdo", '5');
      assertEquals("6?(F!S,VY^$o<Ixdo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase(" ", charSequenceArray0[1], charSequenceArray0);
      assertEquals(" l 'H;VR", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.substringBetween(", Length: ", "org.apache.commons.lang3.Charsets", "Index: ");
      assertNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) ", Length: ", (CharSequence) "l 'H;VR");
      assertEquals(0, int0);
      
      String string4 = StringUtils.substring(" ", 5, 5);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.truncate("org.apache.commons.lang3.Charsets", 15, 5);
      assertEquals("ons.l", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0", "6?(F!S,VY^$o<Ixdo");
      assertNotNull(stringArray0);
      assertEquals(11, stringArray0.length);
      
      String string6 = StringUtils.defaultString("p{InCombiningDiacriticalMarks}+The String must not be empty");
      assertEquals("p{InCombiningDiacriticalMarks}+The String must not be empty", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = null;
      String string2 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("", (String) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "p{InCombiningDiacriticalMarks}+", (-1));
      assertNull(stringArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[3] = (float) 0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (-1);
      String string3 = StringUtils.center("}lW6U}/", 322, 'X');
      assertEquals("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX}lW6U}/XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '%', (-3162), (-1232));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3162
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{}";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      String string0 = StringUtils.leftPad("{}", 0, 'P');
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("/x", 'J');
      assertEquals("J/xJ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("{}", "/x", 0);
      assertEquals("{}", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase((String) null, (String) null, ";B7", 0);
      assertNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "J/xJ", 102);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string4 = StringUtils.abbreviate("", (String) null, 465, 102);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsWhitespace("J/xJ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.substring("HV6'wFQ4", (-1), 160);
      assertEquals("4", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      String string6 = StringUtils.join(booleanArray0, 'P', 0, 6);
      assertEquals("truePtruePfalsePtruePtruePtrue", string6);
      assertTrue(Arrays.equals(new boolean[] {true, true, false, true, true, true, false}, booleanArray0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertEquals(7, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("X97P!zkAW-[(TCDft", "X97P!zkAW-[(TCDft");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("1(kxe8_QhhgBO66", "N[");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("n5&%K*/Xg^y8D4", "1(kxe8_QhhgBO66");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
      
      String string0 = StringUtils.replaceChars("xTcC+ruymsAe$5G", 'D', 'D');
      assertEquals("xTcC+ruymsAe$5G", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", stringArray1);
      assertFalse(boolean1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, stringArray1.length);
      
      String string2 = StringUtils.rightPad("", 9, '=');
      assertEquals("=========", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("X97P!zkAW-[(TCDft", "=========");
      assertEquals("X97P!zkAW-[(TCDft", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("$+%}AA,c+-;ij?1|p");
      assertEquals("$+%}AA,c+-;ij?1|p", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("RJ:qq@ZVj4jE\"0CU", "}%`-4d-/^u", 33);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int1 = StringUtils.indexOf((CharSequence) "wia", (CharSequence) "$+%}AA,c+-;ij?1|p");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.stripStart("RJ:qq@ZVj4jE\"0CU", "wia");
      assertEquals("RJ:qq@ZVj4jE\"0CU", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "offset cannot be negative");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.left("8(9x", 2);
      assertEquals("8(", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "8(", (CharSequence) "8(9x");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.replaceEach("o$$&Og-vA(~:f", (String[]) null, stringArray0);
      assertEquals("o$$&Og-vA(~:f", string0);
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      
      String string1 = StringUtils.strip("o$$&Og-vA(~:f", "o$$&Og-vA(~:f");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = new int[5];
      String string2 = StringUtils.join(intArray0, 'B', 0, 0);
      assertEquals("", string2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(5, intArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("m6'4BQHj=q7O", "o$$&Og-vA(~:f", "h y!#{^<!$w~");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 13
         // o$$&Og-vA(~:f
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeStart("o$$&Og-vA(~:f", (String) null);
      assertEquals("o$$&Og-vA(~:f", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank("o$$&Og-vA(~:f", "o$$&Og-vA(~:f");
      assertEquals("o$$&Og-vA(~:f", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "o$$&Og-vA(~:f", (CharSequence) "o$$&Og-vA(~:f");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "o$$&Og-vA(~:f";
      stringArray0[1] = "o$$&Og-vA(~:f";
      stringArray0[2] = null;
      stringArray0[3] = null;
      String string3 = StringUtils.replaceEach("o$$&Og-vA(~:f", (String[]) null, stringArray0);
      assertEquals("o$$&Og-vA(~:f", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(4, stringArray0.length);
      
      String string4 = StringUtils.strip("o$$&Og-vA(~:f", "o$$&Og-vA(~:f");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "o$$&Og-vA(~:f");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "o$$&Og-vA(~:f", (CharSequence) null);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      String string5 = StringUtils.join(intArray0, 'B', 0, 0);
      assertEquals("", string5);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals(5, intArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("m6'4BQHj=q7O", "o$$&Og-vA(~:f", "h y!#{^<!$w~");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 13
         // o$$&Og-vA(~:f
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.replaceOnce((String) null, "IjB%\"ZF^iZ[&)c", (String) null);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      Object[] objectArray0 = new Object[2];
      objectArray0[1] = (Object) charSequenceArray0[1];
      String string2 = StringUtils.joinWith((String) null, objectArray0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(2, objectArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.abbreviateMiddle("R^}#mJ|?;7x5|", "IjB%\"ZF^iZ[&)c", (-4272));
      assertEquals("R^}#mJ|?;7x5|", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate("WqM20'{^s|", 102, 0);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.LocaleUtils", "1.071.0");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("^hB-SrG", "1.071.0", (-4272));
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.split("WqM20'{^s|", (String) null, (-4272));
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
      
      String[] stringArray3 = StringUtils.substringsBetween((String) null, "R^}#mJ|?;7x5|", (String) null);
      assertNull(stringArray3);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeStart("o$$&Og-vA(~:f", (String) null);
      assertEquals("o$$&Og-vA(~:f", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank("o$$&Og-vA(~:f", "o$$&Og-vA(~:f");
      assertEquals("o$$&Og-vA(~:f", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "o$$&Og-vA(~:f", (CharSequence) "o$$&Og-vA(~:f");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "o$$&Og-vA(~:f";
      stringArray0[1] = "o$$&Og-vA(~:f";
      stringArray0[2] = null;
      stringArray0[3] = null;
      String string3 = StringUtils.replaceEach("", (String[]) null, stringArray0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(4, stringArray0.length);
      
      String string4 = StringUtils.strip("", "o$$&Og-vA(~:f");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "o$$&Og-vA(~:f");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "o$$&Og-vA(~:f", (CharSequence) null);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      String string5 = StringUtils.join(intArray0, 'B', 0, 0);
      assertEquals("", string5);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      assertEquals(5, intArray0.length);
      
      String string6 = StringUtils.replaceFirst("m6'4BQHj=q7O", "1.071.0", "h y!#{^<!$w~");
      assertEquals("m6'4BQHj=q7O", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      int int2 = StringUtils.lastOrdinalIndexOf("", "", 0);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string7 = StringUtils.replacePattern(string0, "", "1.071.0");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String string0 = StringUtils.remove("|Bo`~:$pr^'ZkWRyXw", '0');
      assertEquals("|Bo`~:$pr^'ZkWRyXw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("tM!^", (-890));
      assertEquals("!^tM", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("tM!^", "!^tM", "11IR[");
      assertEquals("tM!^", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string3 = StringUtils.replaceChars("|Bo`~:$pr^'ZkWRyXw", 'Q', 'o');
      assertEquals("|Bo`~:$pr^'ZkWRyXw", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[0] = (CharSequence) "|Bo`~:$pr^'ZkWRyXw";
      charSequenceArray0[1] = (CharSequence) "11IR[";
      charSequenceArray0[2] = (CharSequence) "|Bo`~:$pr^'ZkWRyXw";
      charSequenceArray0[3] = (CharSequence) "|Bo`~:$pr^'ZkWRyXw";
      String string4 = StringUtils.prependIfMissing("11IR[", "11IR[", charSequenceArray0);
      assertEquals("11IR[", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(4, charSequenceArray0.length);
      
      String string5 = StringUtils.substring("!^tM", (-890));
      assertEquals("!^tM", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("11IR[", "Uqnxu'b_wA[");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 10
         // Uqnxu'b_wA[
         //           ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = StringUtils.rightPad("f", 0, "f");
      assertEquals("f", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay((String) null, "", (-1732), 32);
      assertNull(string1);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Stack<CharBuffer> stack1 = new Stack<CharBuffer>();
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      
      Iterator<CharBuffer> iterator0 = stack1.iterator();
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, (String) null);
      assertEquals("", string2);
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("", "BB'BmBFBfBLBGBz", "ud6^.# 0#8/_q=$`");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToNull("!yx");
      assertEquals("!yx", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars(",z b7D@JH!>)MD3m^dd", ",N$hUd`+#!74?)", "Object varargs must not be null");
      assertEquals("Oz baD@JHr>sMD3m^tt", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isNotBlank("f");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ",N$hUd`+#!74?)";
      String string6 = StringUtils.join(objectArray0, "", 47, 2);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      assertEquals(1, objectArray0.length);
      
      String string7 = StringUtils.stripToNull("-0gUwFKp7");
      assertEquals("-0gUwFKp7", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      String string8 = StringUtils.stripEnd("-0gUwFKp7", (String) null);
      assertEquals("-0gUwFKp7", string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      int int0 = (-44);
      String string0 = "8(9x";
      String string1 = StringUtils.left("8(9x", (-44));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "Locale must not be null");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        Charset.forName("Locale must not be null");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Locale must not be null
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("Cannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("Minimum abbreviation width is %d", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      String string0 = StringUtils.defaultString("?0wuO/^'~");
      assertEquals("?0wuO/^'~", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("Cannot store ");
      assertEquals(13, int0);
      
      String string1 = StringUtils.center("?0wuO/^'~", 13, '@');
      assertEquals("@@?0wuO/^'~@@", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "@@?0wuO/^'~@@");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.replaceEach("offset cannot be negative", stringArray0, stringArray0);
      assertEquals("offset cannot be negative", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String[] stringArray0 = new String[16];
      String string0 = StringUtils.replaceEach("{}", stringArray0, stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(16, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "{}", (CharSequence) "{}");
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip("{}");
      assertEquals("{}", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.reverse("^-`a:[Z");
      assertEquals("Z[:a`-^", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "{}", (CharSequence) "Z[:a`-^", 2);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(16, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("6\"T");
      assertEquals("6\"T", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("offset cannot be negative", 101);
      assertEquals("offs", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("+", 101);
      assertEquals("+", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "+", "offs");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String string0 = StringUtils.substringBefore("l 'H;VR", 50);
      assertEquals("l 'H;VR", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "l 'H;VR", (CharSequence) "l 'H;VR");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "l 'H;VR", (CharSequence) "l 'H;VR");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "l 'H;VR", (CharSequence) "l 'H;VR", 312);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("^*5.[5$sMneP~Uc[g0", "Supplied value must be a valid byte literal between -32768 and 32767: [", "Minimum abbreviation width is %d");
      assertEquals("^*5.[5$sMneP~Uc[g0", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "^*5.[5$sMneP~Uc[g0", (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", (-1096));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", (char[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.repeat("-Gkf9-", 1128);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "^*5.[5$sMneP~Uc[g0", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = StringUtils.substringBefore(", Length: 0", 352);
      assertEquals(", Length: 0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate(": ", 352);
      assertEquals(": ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ": ", "()*I5 Fn+eVF!");
      assertEquals(1, int0);
      
      String string2 = StringUtils.truncate(", Length: 0", 1, 64);
      assertEquals(" Length: 0", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String string0 = StringUtils.wrap("The String must not be empty", 'h');
      assertEquals("hThe String must not be emptyh", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "hThe String must not be emptyh", (CharSequence) "hThe String must not be emptyh");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      charSequenceArray0[0] = (CharSequence) "The String must not be empty";
      charSequenceArray0[1] = (CharSequence) "hThe String must not be emptyh";
      boolean boolean1 = StringUtils.equalsAny("hThe String must not be emptyh", charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(10, charSequenceArray0.length);
      
      String string1 = StringUtils.replace("The String must not be empty", "hThe String must not be emptyh", "hThe String must not be emptyh", 1);
      assertEquals("The String must not be empty", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("A.}N!u&~Cq9 )`pPb1Y", (-1231), 'h');
      assertEquals("A.}N!u&~Cq9 )`pPb1Y", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.startsWith(charSequenceArray0[0], charSequenceArray0[0]);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(10, charSequenceArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 1;
      floatArray0[1] = (float) 1;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "The String must not be empty";
      stringArray0[1] = "A.}N!u&~Cq9 )`pPb1Y";
      String string3 = StringUtils.replaceEach("A.}N!u&~Cq9 )`pPb1Y", stringArray0, stringArray0);
      assertEquals("A.}N!u&~Cq9 )`pPb1Y", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(2, stringArray0.length);
      
      String string4 = StringUtils.LF;
      assertEquals("\n", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[1], (CharSequence) "\n");
      assertEquals((-1), int0);
      assertEquals(10, charSequenceArray0.length);
      
      String string5 = StringUtils.strip("0.071.0");
      assertEquals("0.071.0", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.join((Object[]) charSequenceArray0, "XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo");
      assertEquals("The String must not be emptyXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwohThe String must not be emptyhXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      assertEquals(10, charSequenceArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "The String must not be emptyXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwohThe String must not be emptyhXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoXRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo", charSequenceArray0[1], 53);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(10, charSequenceArray0.length);
      
      boolean boolean3 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(2, stringArray0.length);
      
      String string7 = StringUtils.defaultString("b/h<fC[w+IJ{^dhF", "YpLF03AKgvt[X");
      assertEquals("b/h<fC[w+IJ{^dhF", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      int int2 = StringUtils.indexOfAny((CharSequence) "0.071.0", charArray0);
      assertEquals((-1), int2);
      assertArrayEquals(new char[] {'h', 'h'}, charArray0);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "eqkI;R%c2)d3M_EA_bK";
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-29.8414F);
      floatArray0[1] = (float) '7';
      floatArray0[2] = (float) '7';
      String string0 = StringUtils.join(floatArray0, '7');
      assertEquals("-29.8414755.0755.0", string0);
      assertArrayEquals(new float[] {(-29.8414F), 55.0F, 55.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals(3, floatArray0.length);
      
      String string1 = StringUtils.trim("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("", "BB'BmBFBfBLBGBzorg.apache.commons.lang3.Charsets");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsIgnoreCase("", "-29.8414755.0755.0");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("-29.8414755.0755.0");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.abbreviate("-29.8414755.0755.0", "G+:4BK?1JY", 3037);
      assertEquals("-29.8414755.0755.0", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.endsWith("eqkI;R%c2)d3M_EA_bK", "eqkI;R%c2)d3M_EA_bK");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.lowerCase("eqkI;R%c2)d3M_EA_bK");
      assertEquals("eqki;r%c2)d3m_ea_bk", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.remove("eqkI;R%c2)d3M_EA_bK", 'v');
      assertEquals("eqkI;R%c2)d3M_EA_bK", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int1 = StringUtils.lastIndexOfAny("eqkI;R%c2)d3M_EA_bK", stringArray0);
      assertEquals(19, int1);
      assertFalse(int1 == int0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substring("Locale must not be null", 77, 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      charArray0[2] = 'Y';
      String string2 = StringUtils.join(charArray0, 'Y', 57, (-2716));
      assertEquals("", string2);
      assertArrayEquals(new char[] {'Y', 'Y', 'Y'}, charArray0);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(3, charArray0.length);
      
      String string3 = StringUtils.capitalize("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.removePattern("", "");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.normalizeSpace("");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string6 = StringUtils.repeat("Threshold must not be negativeThreshold must not be negative", "Threshold must not be negativeThreshold must not be negative", (-2716));
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "l_~'1";
      charSequenceArray0[1] = (CharSequence) "l_~'1";
      charSequenceArray0[2] = (CharSequence) "l_~'1";
      charSequenceArray0[3] = (CharSequence) "l_~'1";
      charSequenceArray0[4] = (CharSequence) "l_~'1";
      charSequenceArray0[5] = (CharSequence) "l_~'1";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string0 = StringUtils.appendIfMissing("@xnM9BqIT,<E3+9>v", charSequenceArray0[5], charSequenceArray0);
      assertEquals("@xnM9BqIT,<E3+9>vl_~'1", string0);
      assertNotNull(string0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "@xnM9BqIT,<E3+9>vl_~'1", (-1));
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@xnM9BqIT,<E3+9>v";
      String string1 = StringUtils.appendIfMissing("@xnM9BqIT,<E3+9>v", charSequenceArray0[4], stringArray0);
      assertEquals("@xnM9BqIT,<E3+9>v", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.indexOfAnyBut(charSequenceArray0[3], charSequenceArray0[2]);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(6, charSequenceArray0.length);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "@xnM9BqIT,<E3+9>v", charSequenceArray0[2]);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String string0 = StringUtils.substringAfter("{}/D", (-1));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("5t_s:?i &g`z.SMinimum abbreviation width is %d", "5t_s:?i &g`z.SMinimum abbreviation width is %d");
      assertEquals("5t_s:?i &g`z.SMinimum abbreviation width is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("Cannot store ");
      assertTrue(boolean0);
      
      String string2 = StringUtils.removeEndIgnoreCase("5t_s:?i &g`z.SMinimum abbreviation width is %d", "{}/D");
      assertEquals("5t_s:?i &g`z.SMinimum abbreviation width is %d", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ':';
      charArray0[1] = ':';
      String string3 = StringUtils.join(charArray0, 'N', 241, (-2105));
      assertEquals("", string3);
      assertArrayEquals(new char[] {':', ':'}, charArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(2, charArray0.length);
      
      boolean boolean1 = StringUtils.isEmpty("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("8~GpJrQPh ,8=um", "n5&%K*/Xg^y8D4");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("|Bo`~:$pr^'ZLRyXw", 'H', 'H');
      assertEquals("|Bo`~:$pr^'ZLRyXw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.joinWith("n", stringArray0);
      assertEquals("8~GpJrQPh ,8=um", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("8~GpJrQPh ,8=um", stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isNumeric("n");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      String string0 = StringUtils.chomp("n5&%K*/Xg^y8D4");
      assertEquals("n5&%K*/Xg^y8D4", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern("n5&%K*/Xg^y8D4", "n5&%K*/Xg^y8D4");
      assertEquals("n5&%K*/Xg^y8D4", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("n5&%K*/Xg^y8D4", "n5&%K*/Xg^y8D4");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "eA";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      long[] longArray0 = new long[3];
      longArray0[1] = (long) 'P';
      longArray0[2] = (-557L);
      String string0 = StringUtils.join(longArray0, '4');
      assertEquals("04804-557", string0);
      assertArrayEquals(new long[] {0L, 80L, (-557L)}, longArray0);
      assertNotNull(string0);
      assertEquals(3, longArray0.length);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.FRENCH;
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fr", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertNotNull(locale1);
      
      String string1 = StringUtils.lowerCase("04804-557", locale0);
      assertEquals("04804-557", string1);
      assertNotSame(locale0, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(string1.equals((Object)string0));
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(string1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      String string2 = StringUtils.join(booleanArray0, '4', 322, 100);
      assertEquals("", string2);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, false, false}, booleanArray0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(5, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      String string0 = StringUtils.prependIfMissing("Object varargs must not be null", "Object varargs must not be null", charSequenceArray0);
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize("6\"T");
      assertEquals("6\"T", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-601L);
      longArray0[2] = (-1L);
      longArray0[3] = (-182L);
      longArray0[4] = (-1L);
      longArray0[5] = (-1L);
      longArray0[6] = (-1L);
      String[] stringArray0 = StringUtils.split("GN");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.removeStartIgnoreCase("6\"T", "6\"T");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("Cannot store ", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("Cannot store ", "Supplied value must be a valid byte literal between -32768 and 32767: [", "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNull(stringArray1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase((CharSequence) null, "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.trimToEmpty("g!#S0+");
      assertEquals("g!#S0+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase((String) null, "g!#S0+", stringArray0);
      assertNull(string2);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.wrap("g!#S0+", 'F');
      assertEquals("Fg!#S0+F", string3);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Cannot store ", "Cannot store ", "Cannot store ");
      assertNull(stringArray0);
      
      String string0 = StringUtils.replaceChars("Cannot store ", '0', '0');
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isWhitespace("Cannot store ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("l 'H;VR", (String) null);
      assertEquals("l 'H;VR", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "l 'H;VR";
      charSequenceArray0[1] = (CharSequence) "l 'H;VR";
      charSequenceArray0[2] = (CharSequence) "l 'H;VR";
      charSequenceArray0[3] = (CharSequence) "l 'H;VR";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string1 = StringUtils.unwrap("6?(F!S,VY^$o<Ixdo", '5');
      assertEquals("6?(F!S,VY^$o<Ixdo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase(" ", charSequenceArray0[1], charSequenceArray0);
      assertEquals(" l 'H;VR", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.substringBetween(", Length: ", "org.apache.commons.lang3.Charsets", "Index: ");
      assertNull(string3);
      
      String string4 = StringUtils.trimToNull("gFeuq(aV");
      assertEquals("gFeuq(aV", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("gFeuq(aV"));
      assertNotNull(linkedList0);
      
      String string5 = StringUtils.join((List<?>) linkedList0, (String) null, 7, 6);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("gFeuq(aV"));
      assertNotNull(string5);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class0, classLoader1);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      ServiceLoader<String> serviceLoader2 = ServiceLoader.load(class0);
      assertNotSame(serviceLoader2, serviceLoader1);
      assertNotSame(serviceLoader2, serviceLoader0);
      assertFalse(serviceLoader2.equals((Object)serviceLoader1));
      assertFalse(serviceLoader2.equals((Object)serviceLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader2.toString());
      assertNotNull(serviceLoader2);
      
      Iterator<String> iterator0 = serviceLoader2.iterator();
      assertNotSame(serviceLoader2, serviceLoader1);
      assertNotSame(serviceLoader2, serviceLoader0);
      assertFalse(serviceLoader2.equals((Object)serviceLoader1));
      assertFalse(serviceLoader2.equals((Object)serviceLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader2.toString());
      assertNotNull(iterator0);
      
      String string6 = StringUtils.join(iterator0, 'o');
      assertEquals("", string6);
      assertNotSame(serviceLoader2, serviceLoader1);
      assertNotSame(serviceLoader2, serviceLoader0);
      assertFalse(serviceLoader2.equals((Object)serviceLoader1));
      assertFalse(serviceLoader2.equals((Object)serviceLoader0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader2.toString());
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "6?(F!S,VY^$o<Ixdo", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      String string0 = StringUtils.truncate(", Length: ", 1916, 106);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("R=3D0WS!/*xC : +Hn", ", Length: ");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 106;
      doubleArray0[1] = (double) 53;
      int int0 = StringUtils.indexOfAny((CharSequence) ", Length: ", (CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      String string0 = StringUtils.leftPad("", 321, "KPRe@2fe4<%Ve}>@");
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("", '(');
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("KPRe@2fe4<%Ve}>@", "", 102);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("KPRe@2fe4<%Ve}>@KPRe@2fe4<%Ve}>@KPRe@2fe4<%Ve}>@KPRe@2fe4<%Ve}>@KPRe@2fe4<%Ve}>@KPRe@2fe4<%Ve}>@KPRe@2fe4<%Ve}>@KPRe@2fe4<%Ve}>@KPRe@2fe4<%Ve}>@KPRe@2fe4<%Ve}>@KPRe@2fe4<%Ve}>@KPRe@2fe4<%Ve}>@KPRe@2fe4<%Ve}>@KPRe@2fe4<%Ve}>@KPRe@2fe4<%Ve}>@KPRe@2fe4<%Ve}>@KPRe@2fe4<%Ve}>@KPRe@2fe4<%Ve}>@KPRe@2fe4<%Ve}>@KPRe@2fe4<%Ve}>@K", "KPRe@2fe4<%Ve}>@");
      assertEquals(0.68, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      String string0 = StringUtils.leftPad(stringArray0[0], 0, 'P');
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNull(string0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.wrap("/x", 'J');
      assertEquals("J/xJ", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle(string0, "/x", 0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNull(string2);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.replaceIgnoreCase((String) null, (String) null, ";B7", 0);
      assertNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "J/xJ", 102);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string4 = StringUtils.abbreviate("", (String) null, 465, 102);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsWhitespace("J/xJ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.trimToEmpty("_");
      assertEquals("_", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("...");
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("_", "");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("g{U", (-1), 'T');
      assertEquals("g{U", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string4 = StringUtils.reverseDelimited("&s", 'E');
      assertEquals("&s", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      double double0 = StringUtils.getJaroWinklerDistance("...", "g{U");
      assertEquals(0.0, double0, 0.01);
      
      String string5 = StringUtils.leftPad((String) null, 3530, 'T');
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      String string2 = StringUtils.lowerCase("HBq(g");
      assertEquals("hbq(g", string2);
      assertNotNull(string2);
      
      charSequenceArray0[3] = (CharSequence) "hbq(g";
      charSequenceArray0[4] = (CharSequence) null;
      int int0 = StringUtils.indexOf((CharSequence) "&#gOjB&z;6$QMb)", 102);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.upperCase("eqkI;R%c2)d3M_EA_bK");
      assertEquals("EQKI;R%C2)D3M_EA_BK", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.endsWith("EQKI;R%C2)D3M_EA_BK", ";B7");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.abbreviate("", ";B7", 465, 47);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.containsWhitespace(";B7");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      String string0 = StringUtils.substring("XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo", (-2031), 53);
      assertEquals("XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo", string0);
      assertNotNull(string0);
      
      int int0 = 1916;
      String string1 = StringUtils.truncate(", Length: ", 1916, 106);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split("R=3D0WS!/*xC : +Hn", "J\"gZm");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = (double) 29;
      doubleArray0[2] = (double) (-2031);
      doubleArray0[3] = (double) 53;
      doubleArray0[4] = (double) 29;
      String string2 = StringUtils.join(doubleArray0, 'F');
      assertEquals("3.0F29.0F-2031.0F53.0F29.0", string2);
      assertArrayEquals(new double[] {3.0, 29.0, (-2031.0), 53.0, 29.0}, doubleArray0, 0.01);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(5, doubleArray0.length);
      
      String string3 = "X97P!zkAW-[(TCDft";
      int int1 = StringUtils.compareIgnoreCase("org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", "X97P!zkAW-[(TCDft", true);
      assertEquals((-9), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "org.apache.commons.lang3.StringUtilsorg.apache.commons.lang3.StringUtils", (CharSequence) "R=3D0WS!/*xC : +Hn");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string4 = StringUtils.center("!N1&X] Ipg", (-2106), '>');
      assertEquals("!N1&X] Ipg", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(int0));
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        linkedList0.subList(76, 1065);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1065
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("X97P!zkAW-[(TCDft", "X97P!zkAW-[(TCDft");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.upperCase("1(kxe8_QhhgBO66");
      assertEquals("1(KXE8_QHHGBO66", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("X97P!zkAW-[(TCDft");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("X97P!zkAW-[(TCDft", 'Y');
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.chomp("l4u|k~&jtvP&Cb^l1+#");
      assertEquals("l4u|k~&jtvP&Cb^l1+#", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("#:{9uPsx'.KOC4N|nn", "A.}N!u&~Cq9 )`pPb1Y");
      assertEquals("A.}N!u&~Cq9 )`pPb1Y", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate("1(KXE8_QHHGBO66", 109);
      assertEquals("1(KXE8_QHHGBO66", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'Y';
      floatArray0[1] = (float) 'Y';
      floatArray0[2] = (float) 109;
      floatArray0[3] = (float) 'Y';
      floatArray0[4] = (float) 109;
      floatArray0[5] = (float) 109;
      String string4 = StringUtils.join(floatArray0, 'Y');
      assertEquals("89.0Y89.0Y109.0Y89.0Y109.0Y109.0", string4);
      assertArrayEquals(new float[] {89.0F, 89.0F, 109.0F, 89.0F, 109.0F, 109.0F}, floatArray0, 0.01F);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(6, floatArray0.length);
      
      String string5 = StringUtils.removeEndIgnoreCase("", "A.}N!u&~Cq9 )`pPb1Y");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "l4u|k~&jtvP&Cb^l1+#", 2176);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.chomp("89.0Y89.0Y109.0Y89.0Y109.0Y109.0", "89.0Y89.0Y109.0Y89.0Y109.0Y109.0");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.abbreviate("", ";b5-T@U7Q11aPX{", 424, 2638);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      boolean boolean2 = StringUtils.containsWhitespace("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.removeEnd("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Array element ", "~bV~Lq8dq>9U1P.Fjc");
      assertEquals("Array element ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("BB'BmBFBfBLBGBz", "org.apache.commons.lang3.CharUtils", "gFeuq(aV", 1776);
      assertEquals("BB'BmBFBfBLBGBz", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)85;
      String string2 = StringUtils.join(byteArray0, 'P', (int) (byte) (-1), (int) (byte) (-1));
      assertEquals("", string2);
      assertArrayEquals(new byte[] {(byte) (-26), (byte) (-1), (byte)85}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String string0 = StringUtils.substringAfter("%7;U.yP4(", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrap("4UP^pql36zBdgdB_", 'h');
      assertEquals("h4UP^pql36zBdgdB_h", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringBefore("", 6);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("X!KMbu9P", 6);
      assertEquals("X!K...", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("Object varargs must not be null", 6);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short) (-2431);
      shortArray0[1] = (short)2803;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short) (-328);
      shortArray0[4] = (short) (-3070);
      shortArray0[5] = (short)2784;
      String string3 = StringUtils.join(shortArray0, '&');
      assertEquals("-2431&2803&-1&-328&-3070&2784", string3);
      assertArrayEquals(new short[] {(short) (-2431), (short)2803, (short) (-1), (short) (-328), (short) (-3070), (short)2784}, shortArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(6, shortArray0.length);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "X!KMbu9P");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Object varargs must not be null", (CharSequence) "X!KMbu9P", (-874));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{}";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      String string0 = StringUtils.leftPad("{}", 0, 'P');
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("/x", 'J');
      assertEquals("J/xJ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.abbreviateMiddle("{}", "/x", 0);
      assertEquals("{}", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase((String) null, (String) null, ";B7", 0);
      assertNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "J/xJ", 102);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string4 = StringUtils.abbreviate("", (String) null, 465, 102);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsWhitespace("J/xJ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      String string0 = StringUtils.substringAfter("%7;U.yP4(", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string1 = "4UP^pql36zBdgdB_";
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 'F';
      doubleArray0[1] = (-1.0);
      doubleArray0[3] = (double) 'F';
      doubleArray0[4] = (double) 'F';
      doubleArray0[6] = (double) 0;
      int int0 = StringUtils.compareIgnoreCase("Object varargs must not be null", "4UP^pql36zBdgdB_", true);
      assertEquals(59, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.center("Object varargs must not be null", 24, 'B');
      assertEquals("Object varargs must not be null", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(0));
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        linkedList0.subList((-2939), (-2106));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -2939
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      String string0 = StringUtils.reverse("2%OCI={c0/yQp~Uk");
      assertEquals("kU~pQy/0c{=ICO%2", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("04734734028HFo0 eTkjWx:", "XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '\"';
      doubleArray0[1] = (-95.08);
      doubleArray0[2] = (double) '\"';
      doubleArray0[3] = (double) '\"';
      String string1 = StringUtils.join(doubleArray0, '\"');
      assertEquals("34.0\"-95.08\"34.0\"34.0", string1);
      assertArrayEquals(new double[] {34.0, (-95.08), 34.0, 34.0}, doubleArray0, 0.01);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, doubleArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.apache.commons.lang3.Charsets", (CharSequence) "p{InCombiningDiacriticalMarks}+The String must not be empty");
      assertEquals(3, int0);
      
      String string2 = StringUtils.center("2%OCI={c0/yQp~Uk", (-1288), '\"');
      assertEquals("2%OCI={c0/yQp~Uk", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      String string0 = StringUtils.substringBefore("l 'H;VR", "l 'H;VR");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "l 'H;VR");
      assertEquals(7, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "l 'H;VR", (CharSequence) "");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.abbreviate("", (String) null, 321, (-3419));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "P:=918Foq<~$]D\"G|]]", (CharSequence) "P:=918Foq<~$]D\"G|]]");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.replace("", "Array element ", "", 57);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 57);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isEmpty("Array element ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      String string2 = StringUtils.substring("_|JtX97P!zkAW-[(TCDft", 57, (-2031));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate("!N1&X] Ipg", 1916, 29);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray1 = StringUtils.split("89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0", "XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo");
      assertNotNull(stringArray1);
      assertEquals(7, stringArray1.length);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 57;
      String string4 = StringUtils.join(doubleArray0, '\"');
      assertEquals("57.0", string4);
      assertArrayEquals(new double[] {57.0}, doubleArray0, 0.01);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(1, doubleArray0.length);
      
      int int1 = StringUtils.compareIgnoreCase("", "org.apache.commons.lang3.Charsets", false);
      assertEquals((-33), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "!N1&X] Ipg", (CharSequence) "");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string5 = StringUtils.center("57.0", (-1), 'n');
      assertEquals("57.0", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "Cannot store ";
      charSequenceArray0[2] = (CharSequence) "Cannot store ";
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = (CharSequence) "Cannot store ";
      charSequenceArray0[7] = (CharSequence) "Cannot store ";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.contains(charSequenceArray0[2], 0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Cannot store ";
      stringArray0[1] = "Cannot store ";
      stringArray0[2] = "Cannot store ";
      stringArray0[3] = "Cannot store ";
      stringArray0[4] = "Cannot store ";
      stringArray0[5] = "Cannot store ";
      String string0 = StringUtils.replaceEach("Cannot store ", stringArray0, stringArray0);
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      assertEquals(6, stringArray0.length);
      
      String string1 = StringUtils.appendIfMissing("Cannot store ", charSequenceArray0[2], charSequenceArray0);
      assertEquals("Cannot store ", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Cannot store ", (CharSequence) "Cannot store ");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf(charSequenceArray0[7], charSequenceArray0[7]);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String[] stringArray0 = new String[16];
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.abbreviate("", "{}", 2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean2 = StringUtils.endsWith("{}", "");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = StringUtils.replacePattern("{}", "", "");
      assertEquals("{}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfAny("{}", stringArray0);
      assertEquals((-1), int0);
      assertEquals(16, stringArray0.length);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(16, stringArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1019.0);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 2;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'y', 2, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.substringAfter(" vs ", 2192);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = StringUtils.swapCase("Z7/,@_/Bc/w");
      assertEquals("z7/,@_/bC/W", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("z7/,@_/bC/W", "Z7/,@_/Bc/w", false);
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat((String) null, 0);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      String string0 = StringUtils.join((List<?>) vector0, 'a', (-2562), (-2562));
      assertEquals("", string0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains((-2562)));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      String string0 = StringUtils.join((boolean[]) null, 's', 0, 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad(">3|OyJQPm_!c+O?8CP", 58, ">3|OyJQPm_!c+O?8CP");
      assertEquals(">3|OyJQPm_!c+O?8CP>3|OyJQPm_!c+O?8CP>3|OyJQPm_!c+O?8CP>3|O", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase(">3|OyJQPm_!c+O?8CP>3|OyJQPm_!c+O?8CP>3|OyJQPm_!c+O?8CP>3|O", ">3|OyJQPm_!c+O?8CP>3|OyJQPm_!c+O?8CP>3|OyJQPm_!c+O?8CP>3|O");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.contains(locale_FilteringMode0));
      assertNotNull(stack0);
      
      boolean boolean2 = stack0.add(locale_FilteringMode0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[EXTENDED_FILTERING]", stack0.toString());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(locale_FilteringMode0));
      
      String string2 = StringUtils.repeat((String) null, 23);
      assertNull(string2);
      
      String string3 = StringUtils.join((List<?>) stack0, 'i', 23, (-3406));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[EXTENDED_FILTERING]", stack0.toString());
      assertFalse(stack0.empty());
      assertTrue(stack0.contains(locale_FilteringMode0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Rh[H", "Rh[H", "Rh[H");
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Q(TCDft", (CharSequence) null, (-1));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceAll("{}", (String) null, "rE'LnfT|p?");
      assertEquals("{}", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.ordinalIndexOf("", (CharSequence) null, 849);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", " r@o&T{R)Jn*_6");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("", "|qu1h");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertFalse(treeSet0.contains(""));
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.add("|qu1h");
      assertTrue(boolean0);
      assertTrue(treeSet0.contains("|qu1h"));
      assertFalse(treeSet0.contains(""));
      
      boolean boolean1 = treeSet0.add("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(treeSet0.contains("|qu1h"));
      assertFalse(treeSet0.contains(" r@o&T{R)Jn*_6"));
      
      Spliterator<Object> spliterator0 = treeSet0.spliterator();
      assertTrue(treeSet0.contains("|qu1h"));
      assertFalse(treeSet0.contains(" r@o&T{R)Jn*_6"));
      assertNotNull(spliterator0);
      
      Object object0 = treeSet0.higher("");
      assertEquals("|qu1h", object0);
      assertFalse(object0.equals((Object)string1));
      assertFalse(object0.equals((Object)string0));
      assertTrue(treeSet0.contains(""));
      assertFalse(treeSet0.contains(" r@o&T{R)Jn*_6"));
      assertNotNull(object0);
      
      String string2 = StringUtils.join((Iterable<?>) treeSet0, '-');
      assertEquals("-|qu1h", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)object0));
      assertTrue(treeSet0.contains(""));
      assertFalse(treeSet0.contains(" r@o&T{R)Jn*_6"));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("", "Comparator should not be null.");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)object0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.swapCase("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)object0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.reverseDelimited("|qu1h", '-');
      assertEquals("|qu1h", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)object0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.removeAll("", "");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)object0));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.mid("", (-990), 0);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)object0));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      String string8 = StringUtils.trim("maxWith cannot be negative");
      assertEquals("maxWith cannot be negative", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)object0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      String string0 = StringUtils.capitalize("p{InCombiningDilcriticalMarks}+");
      assertEquals("P{InCombiningDilcriticalMarks}+", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("p{InCombiningDilcriticalMarks}+");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      String string2 = StringUtils.repeat("I", 1172);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAllLowerCase("p{InCombiningDilcriticalMarks}+");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String string0 = StringUtils.difference("u ,u9V", "u ,u9V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeEndIgnoreCase((String) null, "");
      assertNull(string1);
      
      String string2 = "6\\?(F!S,VY^$o<Ixdo";
      char char0 = 'o';
      String string3 = StringUtils.unwrap(".|R/CY&X;E)", 'o');
      assertEquals(".|R/CY&X;E)", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.EMPTY;
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        linkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, (-2113));
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(", Length: ");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string0 = StringUtils.abbreviate("Q>sf ?h?I]['q", "Q>sf ?h?I]['q", 379);
      assertEquals("Q>sf ?h?I]['q", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("jS;a`Fs>\"", "Q>sf ?h?I]['q", stringArray0);
      assertEquals("jS;a`Fs>\"", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, stringArray0.length);
      
      String string2 = StringUtils.removeStartIgnoreCase(")zdLAo'i", "jS;a`Fs>\"");
      assertEquals(")zdLAo'i", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("Q{%29Zc'c6lxCL|)>", (String) null);
      assertEquals("Q{%29Zc'c6lxCL|)>", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfter("=XW0R ", 379);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.center(")zdLAo'i", (-943), 'w');
      assertEquals(")zdLAo'i", string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) ")zdLAo'i", "");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string6 = StringUtils.trimToEmpty("A8Jq");
      assertEquals("A8Jq", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) ", Length: ", (char[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      String string0 = StringUtils.join(byteArray0, '(');
      assertEquals("-70", string0);
      assertArrayEquals(new byte[] {(byte) (-70)}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteArray0.length);
      
      boolean boolean0 = StringUtils.isAlphaSpace("-70");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      String string0 = StringUtils.left("8(9x", 5);
      assertEquals("8(9x", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("8(9x");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "8(9x", (CharSequence) "Locale must not be null");
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Cloneable type ", (-1685), (-1685));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      String string0 = StringUtils.repeat((String) null, 821);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(821);
      assertEquals(821, (int)integer0);
      assertNotNull(integer0);
      
      String string1 = StringUtils.abbreviate("", 821, 2477);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeStart("o$$&Og-vA(~:f", (String) null);
      assertEquals("o$$&Og-vA(~:f", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank("o$$&Og-vA(~:f", "o$$&Og-vA(~:f");
      assertEquals("o$$&Og-vA(~:f", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "o$$&Og-vA(~:f", (CharSequence) "o$$&Og-vA(~:f");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "o$$&Og-vA(~:f";
      stringArray0[1] = "o$$&Og-vA(~:f";
      stringArray0[2] = null;
      stringArray0[3] = null;
      String string3 = StringUtils.replaceEach("", (String[]) null, stringArray0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(4, stringArray0.length);
      
      String string4 = StringUtils.strip("", "o$$&Og-vA(~:f");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "o$$&Og-vA(~:f");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "o$$&Og-vA(~:f", (CharSequence) null);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      String string5 = StringUtils.join(intArray0, 'B', 0, 0);
      assertEquals("", string5);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(5, intArray0.length);
      
      String string6 = StringUtils.replaceFirst("m6'4BQHj=q7O", "1.071.0", "h y!#{^<!$w~");
      assertEquals("m6'4BQHj=q7O", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      int int2 = StringUtils.lastOrdinalIndexOf("", "", 0);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(">3|OyJQPm_!c+O?8CP", 24, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("=F)NH;O`SKKb(+$^<{x:", (String) null, true);
      assertEquals(1, int0);
      
      String string1 = StringUtils.removeStart("", "p{InCombiningDiacriticalMarks}+");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("h4,F8J;|[bV})}8", ", '", "Cannot clone Cloneable type ");
      assertEquals("h4CF8J;|[bV})}8", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("h4,F8J;|[bV})}8", 1);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "Cannot clone Cloneable type ", (CharSequence) "Cannot clone Cloneable type ");
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      ArrayDeque<Locale.FilteringMode> arrayDeque0 = new ArrayDeque<Locale.FilteringMode>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      Iterator<Locale.FilteringMode> iterator0 = arrayDeque0.iterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean0 = arrayDeque0.add(locale_FilteringMode0);
      assertTrue(boolean0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains(locale_FilteringMode0));
      
      String string4 = StringUtils.join(iterator0, "', has a length less than 2");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(arrayDeque0.contains(locale_FilteringMode0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase(" vs ", "/$s-wh,Ic)w.2lD1x", false);
      assertEquals((-15), int0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      int int0 = 2;
      String string0 = "{}";
      String string1 = null;
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      String string2 = StringUtils.lowerCase((String) null, locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("deu", locale1.getISO3Language());
      assertEquals("de", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNull(string2);
      
      int int1 = 13;
      int int2 = StringUtils.lastIndexOf((CharSequence) null, 13);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = StringUtils.compareIgnoreCase("*w&C5/I", (String) null, false);
      assertEquals((-1), int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      
      // Undeclared exception!
      try { 
        locale1.getExtension('}');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed extension key: }
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.upperCase("\n");
      assertEquals("\n", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("~Tq7Svdtbss#gdQ", "\n", "\n");
      assertEquals("~Tq7Svdtbss#gdQ", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("d", '{');
      assertEquals("d", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.unwrap("\n", ",*ZFoe_fG_Y.ja");
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = StringUtils.upperCase("XRr31{q!1K\"25L)'org.apache.commons.lang3.CharUtils", locale0);
      assertEquals("XRR31{Q!1K\"25L)'ORG.APACHE.COMMONS.LANG3.CHARUTILS", string0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "XRr31{q!1K\"25L)'org.apache.commons.lang3.CharUtils";
      stringArray0[1] = "XRR31{Q!1K\"25L)'ORG.APACHE.COMMONS.LANG3.CHARUTILS";
      stringArray0[2] = "XRr31{q!1K\"25L)'org.apache.commons.lang3.CharUtils";
      stringArray0[3] = "XRr31{q!1K\"25L)'org.apache.commons.lang3.CharUtils";
      stringArray0[4] = "BB'BmBFBfBLBGBz";
      stringArray0[5] = "XRR31{Q!1K\"25L)'ORG.APACHE.COMMONS.LANG3.CHARUTILS";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      String string0 = StringUtils.rightPad("z]0@Nln^;", 9);
      assertEquals("z]0@Nln^;", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "z]0@Nln^;";
      charSequenceArray0[1] = (CharSequence) "z]0@Nln^;";
      charSequenceArray0[2] = (CharSequence) "1_oB1]:sq";
      charSequenceArray0[3] = (CharSequence) "1_oB1]:sq";
      String string1 = StringUtils.prependIfMissing("1_oB1]:sq", "1_oB1]:sq", charSequenceArray0);
      assertEquals("1_oB1]:sq", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(5, charSequenceArray0.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1_oB1]:sq";
      stringArray0[1] = "z]0@Nln^;";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2, stringArray0.length);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean0 = stack0.add(locale_FilteringMode0);
      assertTrue(boolean0);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[REJECT_EXTENDED_RANGES]", stack0.toString());
      assertTrue(stack0.contains(locale_FilteringMode0));
      
      stack0.removeElementAt(0);
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(locale_FilteringMode0));
      
      String string3 = StringUtils.join((Object[]) stringArray0, 'n', 9, 0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string4 = StringUtils.center((String) null, (-1), 'n');
      assertNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], charSequenceArray0[4]);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(5, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("M Zq", "3:");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "3:", (CharSequence) "M Zq", 720);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceAll("", "M Zq", "3:");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "y");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "", 127);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "y";
      charSequenceArray0[2] = (CharSequence) "y";
      charSequenceArray0[3] = (CharSequence) null;
      String string1 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.substringAfterLast("y", (String) null);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "y", charSequenceArray0[2], 32);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(4, charSequenceArray0.length);
      
      String string3 = StringUtils.replaceAll("T1(R ZKK<!od~.U04", "$5Q-g", "fB|qvE^T=(l=.p");
      assertEquals("T1(R ZKK<!od~.U04", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      String[] stringArray0 = new String[16];
      String string0 = StringUtils.replaceEach("{}", stringArray0, stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(16, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "{}", (CharSequence) "{}");
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip("{}");
      assertEquals("{}", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.reverse("^-`a:[Z");
      assertEquals("Z[:a`-^", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "{}", (CharSequence) "Z[:a`-^", 2);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray1);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      String string3 = StringUtils.upperCase("fc8.dmPD1ma~/", locale0);
      assertEquals("FC8.DMPD1MA~/", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(string3);
      
      String string4 = StringUtils.prependIfMissingIgnoreCase("{}", "{}", (CharSequence[]) null);
      assertEquals("{}", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = locale0.getDisplayScript(locale0);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(string5);
      
      String string6 = StringUtils.lowerCase((String) null);
      assertNull(string6);
      
      String string7 = StringUtils.capitalize("E~$J8(WSo#u8[{{C9Q.");
      assertEquals("E~$J8(WSo#u8[{{C9Q.", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) null, (CharSequence) "");
      assertEquals("", charSequence0);
      assertFalse(charSequence0.equals((Object)string7));
      assertTrue(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      String string0 = StringUtils.chomp("BB'BmBFBfBLBGBz", "org.apache.commons.lang3.Charsets");
      assertEquals("BB'BmBFBfBLBGBz", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = "BB'BmBFBfBLBGBz";
      stringArray0[2] = "";
      stringArray0[3] = "org.apache.commons.lang3.Charsets";
      String string1 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertNull(string1);
      assertEquals(4, stringArray0.length);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(linkedHashSet0);
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(iterator0);
      
      char char0 = 'w';
      String string2 = StringUtils.join(iterator0, 'd');
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(linkedHashSet0.contains(""));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, (-2440), 1567);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.remove("\n", "\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("\n");
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "", 108);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.leftPad("~9(/4HVWr5xZw", (-1));
      assertEquals("~9(/4HVWr5xZw", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      String string0 = StringUtils.rightPad("f", 0, "f");
      assertEquals("f", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay((String) null, "", (-1732), 32);
      assertNull(string1);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Stack<CharBuffer> stack1 = new Stack<CharBuffer>();
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertNotNull(stack1);
      
      Iterator<CharBuffer> iterator0 = stack1.iterator();
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, (String) null);
      assertEquals("", string2);
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertFalse(string2.equals((Object)string0));
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.empty());
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("", "BB'BmBFBfBLBGBz", "ud6^.# 0#8/_q=$`");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToNull("!yx");
      assertEquals("!yx", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars(",z b7D@JH!>)MD3m^dd", ",N$hUd`+#!74?)", "Object varargs must not be null");
      assertEquals("Oz baD@JHr>sMD3m^tt", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isNotBlank("f");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ",N$hUd`+#!74?)";
      String string6 = StringUtils.join(objectArray0, "", 47, 2);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals(1, objectArray0.length);
      
      String string7 = StringUtils.stripToNull("-0gUwFKp7");
      assertEquals("-0gUwFKp7", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      String string8 = StringUtils.leftPad("!yx", 6);
      assertEquals("   !yx", string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "Object varargs must not be null", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[2] = (CharSequence) "l 'H;VR";
      charSequenceArray0[3] = (CharSequence) "l 'H;VR";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String string0 = StringUtils.unwrap("6?(F!S,VY^$o<Ixdo", '5');
      assertEquals("6?(F!S,VY^$o<Ixdo", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase(" ", charSequenceArray0[1], charSequenceArray0);
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.trimToNull("gFeuq(aV");
      assertEquals("gFeuq(aV", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("l 'H;VR"));
      assertNotNull(linkedList0);
      
      String string3 = StringUtils.join((List<?>) linkedList0, (String) null, (int) '5', 6);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("l 'H;VR"));
      assertNotNull(string3);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class0, classLoader1);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      ServiceLoader<String> serviceLoader2 = ServiceLoader.load(class0);
      assertNotSame(serviceLoader2, serviceLoader0);
      assertNotSame(serviceLoader2, serviceLoader1);
      assertFalse(serviceLoader2.equals((Object)serviceLoader0));
      assertFalse(serviceLoader2.equals((Object)serviceLoader1));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader2.toString());
      assertNotNull(serviceLoader2);
      
      Iterator<String> iterator0 = serviceLoader2.iterator();
      assertNotSame(serviceLoader2, serviceLoader0);
      assertNotSame(serviceLoader2, serviceLoader1);
      assertFalse(serviceLoader2.equals((Object)serviceLoader0));
      assertFalse(serviceLoader2.equals((Object)serviceLoader1));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader2.toString());
      assertNotNull(iterator0);
      
      String string4 = StringUtils.join(iterator0, 'e');
      assertEquals("", string4);
      assertNotSame(serviceLoader2, serviceLoader0);
      assertNotSame(serviceLoader2, serviceLoader1);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(serviceLoader2.equals((Object)serviceLoader0));
      assertFalse(serviceLoader2.equals((Object)serviceLoader1));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader2.toString());
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "6?(F!S,VY^$o<Ixdo", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      String string0 = StringUtils.remove("|Bo`~:$pr^'ZkWRyXw", '0');
      assertEquals("|Bo`~:$pr^'ZkWRyXw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("", "", "|Bo`~:$pr^'ZkWRyXw");
      assertNull(string1);
      
      String string2 = StringUtils.trimToNull((String) null);
      assertNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("|Bo`~:$pr^'ZkWRyXw"));
      assertNotNull(linkedList0);
      
      String string3 = StringUtils.join((List<?>) linkedList0, (String) null, 8, 8);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("|Bo`~:$pr^'ZkWRyXw"));
      assertNotNull(string3);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<String> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      String string4 = StringUtils.join(iterator0, 'w');
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "|Bo`~:$pr^'ZkWRyXw";
      charSequenceArray0[1] = (CharSequence) "|Bo`~:$pr^'ZkWRyXw";
      Iterator<String> iterator1 = serviceLoader0.iterator();
      assertNotSame(iterator1, iterator0);
      assertFalse(iterator1.equals((Object)iterator0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(iterator1);
      
      charSequenceArray0[2] = (CharSequence) "|Bo`~:$pr^'ZkWRyXw";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "|Bo`~:$pr^'ZkWRyXw";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
      
      Iterator<Object> iterator2 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("|Bo`~:$pr^'ZkWRyXw"));
      assertNotNull(iterator2);
      
      String string5 = StringUtils.join(iterator2, '0');
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("|Bo`~:$pr^'ZkWRyXw"));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("\n", "\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "\n");
      assertEquals(0, int0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("\n"));
      assertNotNull(vector0);
      
      String string1 = StringUtils.join((List<?>) vector0, "\n", 5228, 1464);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertFalse(vector0.contains("\n"));
      assertNotNull(string1);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = classLoader1.getParent();
      assertSame(classLoader1, classLoader0);
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertNotNull(classLoader2);
      
      Class<String> class1 = String.class;
      ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class1, classLoader1);
      assertSame(classLoader1, classLoader0);
      assertSame(class1, class0);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      ServiceLoader<String> serviceLoader2 = ServiceLoader.load(class0);
      assertSame(class0, class1);
      assertNotSame(serviceLoader2, serviceLoader0);
      assertNotSame(serviceLoader2, serviceLoader1);
      assertFalse(serviceLoader2.equals((Object)serviceLoader0));
      assertFalse(serviceLoader2.equals((Object)serviceLoader1));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader2.toString());
      assertNotNull(serviceLoader2);
      
      Iterator<String> iterator0 = serviceLoader1.iterator();
      assertSame(classLoader1, classLoader0);
      assertSame(class1, class0);
      assertNotSame(serviceLoader1, serviceLoader2);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertFalse(serviceLoader1.equals((Object)serviceLoader2));
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(iterator0);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      Iterator<CharBuffer> iterator1 = treeSet0.iterator();
      assertNotNull(iterator1);
      
      Iterator<CharBuffer> iterator2 = treeSet0.descendingIterator();
      assertFalse(iterator2.equals((Object)iterator1));
      assertNotNull(iterator2);
      
      String string2 = StringUtils.join(iterator1, 'n');
      assertEquals("", string2);
      assertFalse(iterator1.equals((Object)iterator2));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string3 = StringUtils.trimToEmpty("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[2] = (CharSequence) "";
      int int1 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.substringBetween("Hz>dr", "Search and Replace array lengths don't match: ", "Hz>dr");
      assertNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceAll("Search and Replace array lengths don't match: ", "", "Hz>dr");
      assertEquals("Hz>drSHz>dreHz>draHz>drrHz>drcHz>drhHz>dr Hz>draHz>drnHz>drdHz>dr Hz>drRHz>dreHz>drpHz>drlHz>draHz>drcHz>dreHz>dr Hz>draHz>drrHz>drrHz>draHz>dryHz>dr Hz>drlHz>dreHz>drnHz>drgHz>drtHz>drhHz>drsHz>dr Hz>drdHz>droHz>drnHz>dr'Hz>drtHz>dr Hz>drmHz>draHz>drtHz>drcHz>drhHz>dr:Hz>dr Hz>dr", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeEndIgnoreCase("Cannot store ", "Cannot store ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.unwrap("6?(F!S,VY^$o<Ixdo", 'o');
      assertEquals("6?(F!S,VY^$o<Ixdo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("", "6?(F!S,VY^$o<Ixdo", charSequenceArray0);
      assertEquals("6?(F!S,VY^$o<Ixdo", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(0, charSequenceArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'o';
      doubleArray0[1] = (double) 'o';
      String string3 = StringUtils.substringBetween("1.071.0", "6?(F!S,VY^$o<Ixdo", "6?(F!S,VY^$o<Ixdo");
      assertNull(string3);
      
      String string4 = StringUtils.trimToNull((String) null);
      assertNull(string4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Cannot store "));
      assertNotNull(linkedList0);
      
      String string5 = StringUtils.join((List<?>) linkedList0, "wctx|\"Sm", 16, 6);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Cannot store "));
      assertNotNull(string5);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class0, classLoader1);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      Iterator<String> iterator0 = serviceLoader1.iterator();
      assertNotSame(serviceLoader1, serviceLoader0);
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(iterator0);
      
      String string6 = StringUtils.join(iterator0, ';');
      assertEquals("", string6);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      String string0 = StringUtils.substringBefore("lf'H;VR", 50);
      assertEquals("lf'H;VR", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "lf'H;VR", (CharSequence) "lf'H;VR");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "lf'H;VR", (CharSequence) "lf'H;VR");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.abbreviateMiddle("lf'H;VR", "lf'H;VR", 0);
      assertEquals("lf'H;VR", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.abbreviateMiddle("', has a length less than 2", "K{@E,evza1MNl", (short)15);
      assertEquals("'K{@E,evza1MNl2", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("YJKVd2nXl1y!:P$Pe2*", 'b');
      assertEquals("YJKVd2nXl1y!:P$Pe2*", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("', has a length less than 2", "K{@E,evza1MNl");
      assertEquals(0.4, double0, 0.01);
      
      String string2 = StringUtils.leftPad(";/l^d)i;", (-141), 'b');
      assertEquals(";/l^d)i;", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.replaceOnce((String) null, "Index: ", (String) null);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Index: ";
      objectArray0[1] = (Object) charSequenceArray0[1];
      String string2 = StringUtils.joinWith((String) null, objectArray0);
      assertEquals("Index: ", string2);
      assertNotNull(string2);
      assertEquals(2, objectArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) "Index: ");
      assertEquals(0, int0);
      
      String string3 = StringUtils.abbreviateMiddle("R^}RmJ7|?;7x5|", "Index: ", (-4272));
      assertEquals("R^}RmJ7|?;7x5|", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate("WqM20'{^s|", 102, 0);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.LocaleUtils", "1.071.0");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("^hB-SrG", "1.071.0", (-4272));
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.split("WqM20'{^s|", (String) null, (-4272));
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      String string0 = StringUtils.chop("gC>jlLMJ");
      assertEquals("gC>jlLMJ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("5t_s:?i &g`z.SMinimum abbreviation width is %d", 13, "Cy<");
      assertEquals("5t_s:?i &g`z.SMinimum abbreviation width is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("gC>jlLMJ", "gC>jlLMJ");
      assertEquals("gC>jlLMJgC>jlLMJgC>jlLMJ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '!';
      charArray0[1] = '6';
      charArray0[2] = 's';
      charArray0[3] = '3';
      charArray0[4] = '<';
      charArray0[5] = '(';
      charArray0[6] = ')';
      charArray0[7] = 'j';
      charArray0[8] = 'b';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'!', '6', 's', '3', '<', '(', ')', 'j', 'b'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) '!';
      objectArray0[1] = (Object) 'b';
      String string0 = StringUtils.join(objectArray0, '_', (-476), (-2344));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2, objectArray0.length);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, 'H', 321, 65);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.toRootLowerCase((String) null);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.removePattern("FM", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("FM", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumeric("FM");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.EMPTY;
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-51);
      String string0 = StringUtils.join(byteArray0, '(');
      assertEquals("-51", string0);
      assertArrayEquals(new byte[] {(byte) (-51)}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("-51", "04734734028HFo0 eTkjWx:");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("f");
      assertEquals("f", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference((String) null, "f");
      assertEquals("f", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("^{Syi<f", (-128), 'i');
      assertEquals("^{Syi<f", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("]p&0y!j:)BOJB@TI9");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.chomp("f");
      assertEquals("f", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBeforeLast("04734734028HFo0 eTkjWx:", "f");
      assertEquals("04734734028HFo0 eTkjWx:", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.toRootUpperCase((String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      String string0 = StringUtils.prependIfMissing("Object varargs must not be null", "Object varargs must not be null", charSequenceArray0);
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.trimToNull("Object varargs must not be null");
      assertEquals("Object varargs must not be null", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("6\"T");
      assertEquals("6\"T", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      long[] longArray0 = new long[8];
      longArray0[1] = (-601L);
      boolean boolean0 = StringUtils.isNumeric("6\"T");
      assertFalse(boolean0);
      
      String string3 = StringUtils.unwrap("9''Lf/Z8]}WS", "9''Lf/Z8]}WS");
      assertEquals("9''Lf/Z8]}WS", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("9''Lf/Z8]}WS", "6\"T");
      assertEquals("9''Lf/Z8]}WS", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      String string0 = StringUtils.repeat("object", "1.071.0", 3413);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, '(');
      assertEquals("0", string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteArray0.length);
      
      String string1 = StringUtils.repeat("_", (-602));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substring("I", (-602));
      assertEquals("I", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.left(" has no clone method", (-602));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.replaceChars((String) null, (String) null, (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.compare((String) null, "jz=I]TU(~_Y", false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "", string0);
      assertNull(stringArray1);
      assertEquals(1, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.strip((String) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("\n", "\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "\n", 'f');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) "\n", (CharSequence) "\n");
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, 'f');
      assertEquals("", string1);
      assertArrayEquals(new long[] {}, longArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, longArray0.length);
      
      int int3 = StringUtils.compare("\n", "u*jy/IBV?zwo", false);
      assertEquals((-107), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      int int4 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int4);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.containsAny(charSequenceArray0[0], (char[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      String string0 = StringUtils.wrap("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("p{InCombiningDiacriticalMarks}+", "X3.#;|E2~C?Sr");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.right("M!^", 6);
      assertEquals("M!^", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("M!^");
      assertFalse(boolean0);
      
      String string3 = StringUtils.overlay((String) null, "~jO", (-303), (-303));
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      String string0 = StringUtils.replaceChars("2uE4&p{n\"&r", "t~3%xd3j]MnsXl$", "b");
      assertEquals("2uE4&p{\"&r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "2uE4&p{\"&r", (-1066), (-3411));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("2uE4&p{n\"&r");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      String string1 = StringUtils.join(booleanArray0, '2');
      assertEquals("true2false2false2true2false2false", string1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false}, booleanArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, booleanArray0.length);
      
      String string2 = StringUtils.replaceOnce("b", (String) null, "2uE4&p{n\"&r");
      assertEquals("b", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "t~3%xd3j]MnsXl$", (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray1 = StringUtils.split("2uE4&p{n\"&r", "R^}RmJ7|?;@7[x5|", (-1794));
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string3 = StringUtils.strip("Cannot clone Cloneable type ");
      assertEquals("Cannot clone Cloneable type", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens((String) null, '2');
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripToNull("Local: Local: Local: Local: : ");
      assertEquals("Local: Local: Local: Local: :", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("^E", "^E");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", (-1197));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Local: Local: Local: Local: :");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Local: Local: Local: Local: :", (-1197));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
      
      String string0 = StringUtils.joinWith((String) null, charSequenceArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split((String) null, '-');
      assertNull(stringArray0);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      char char0 = 'h';
      String string0 = StringUtils.wrap("The String must not be empty", 'h');
      assertEquals("hThe String must not be emptyh", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "hThe String must not be emptyh", (CharSequence) "hThe String must not be emptyh");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "The String must not be empty";
      charSequenceArray0[1] = (CharSequence) "hThe String must not be emptyh";
      charSequenceArray0[2] = (CharSequence) "hThe String must not be emptyh";
      boolean boolean1 = StringUtils.equalsAny("hThe String must not be emptyh", charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.replace("The String must not be empty", "hThe String must not be emptyh", "hThe String must not be emptyh", 1);
      assertEquals("The String must not be empty", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = (-1231);
      String string2 = StringUtils.leftPad("A.}N!u&~Cq9 )`pPb1Y", (-1231), 'h');
      assertEquals("A.}N!u&~Cq9 )`pPb1Y", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.startsWith(charSequenceArray0[0], charSequenceArray0[0]);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      String string3 = StringUtils.trim("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.upperCase("The String must not be empty");
      assertEquals("THE STRING MUST NOT BE EMPTY", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "hThe String must not be emptyh", (CharSequence) "hThe String must not be emptyh", 0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean3 = StringUtils.containsIgnoreCase("p{InCombiningDiacriticalMarks}+", charSequenceArray0[2]);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean4 = StringUtils.isAsciiPrintable("The String must not be empty");
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      
      int int2 = 2;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("The String must not be empty", "A.}N!u&~Cq9 )`pPb1Y", 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 20
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      String[] stringArray0 = new String[6];
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) stringArray0[5], (CharSequence) stringArray0[0]);
      assertEquals((-1), int0);
      assertEquals(6, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
      
      String string0 = StringUtils.join((byte[]) null, '.', (-2816), 32);
      assertNull(string0);
      
      String string1 = StringUtils.left((String) null, (-1));
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeEndIgnoreCase("Cannot store ", "Cannot store ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.replace("", "", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceChars("", 'f', 'f');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing("BB'BmBFBfBLBGBzorg.apache.commons.lang3.Charsets", "6?(F!S,VY^$o<Ixdo", charSequenceArray0);
      assertEquals("6?(F!S,VY^$o<IxdoBB'BmBFBfBLBGBzorg.apache.commons.lang3.Charsets", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      String string0 = StringUtils.difference("u ,u9V", "u ,u9V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "6?(F!S,VY^$o<Ixdo");
      assertNull(stringArray0);
      
      String string1 = StringUtils.replace("6?(F!S,VY^$o<Ixdo", "u ,u9V", "6?(F!S,VY^$o<Ixdo", 41);
      assertEquals("6?(F!S,VY^$o<Ixdo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "u ,u9V", (CharSequence) "", 57);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isEmpty("u ,u9V");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.join((byte[]) null, 'W');
      assertNull(string2);
      
      String string3 = StringUtils.substringAfter(">#~8VH{!zN", "6?(F!S,VY^$o<Ixdo");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.reverseDelimited((String) null, 'r');
      assertNull(string1);
      
      String string2 = StringUtils.join((byte[]) null, ':');
      assertNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.toRootLowerCase("Minimum abbreviation width is %d");
      assertEquals("minimum abbreviation width is %d", string3);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "1.071.0", (CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width is %d", (CharSequence) null, 9);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.replace("", "1.071.0", "");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "1.071.0";
      String string5 = StringUtils.prependIfMissingIgnoreCase("q_kw9IFngx", "cw0gw", charSequenceArray0);
      assertEquals("cw0gwq_kw9IFngx", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      assertEquals(1, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("X97P!zkAW-[(TCDft", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.removeEndIgnoreCase("X97P!zkAW-[(TCDft", "X97P!zkAW-[(TCDft");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, "", (-3), (int) '\"');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      String string0 = "|GQ";
      String string1 = StringUtils.deleteWhitespace("|GQ");
      assertEquals("|GQ", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf("|GQ", "|GQ", 2715);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.unwrap("\",", "\",");
      assertEquals("\",", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultIfEmpty("YJmJ};'~", "4.Z?hsw*)$:Hl");
      assertEquals("YJmJ};'~", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnce("1P[Jq%v:d)", "LjB%\"ZF^iZ[&)c", "");
      assertEquals("1P[Jq%v:d)", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAllLowerCase("|GQ");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "|GQ";
      objectArray0[2] = (Object) "1P[Jq%v:d)";
      objectArray0[3] = (Object) "1P[Jq%v:d)";
      objectArray0[4] = (Object) "YJmJ};'~";
      objectArray0[5] = (Object) "|GQ";
      objectArray0[6] = (Object) "|GQ";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[7] = object0;
      objectArray0[8] = (Object) "YJmJ};'~";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "9}", 82, 1994);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 82
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("X97P!zkAW-[(TCDft", "X97P!zkAW-[(TCDft", "Cannot store ");
      assertNull(stringArray0);
      
      String string0 = StringUtils.replaceChars("Cannot store ", '0', '0');
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverse("Cannot store ");
      assertEquals(" erots tonnaC", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isMixedCase(" erots tonnaC");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.substringBefore("*#", (String) null);
      assertEquals("*#", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "*#", "XRr31{q!1K\"25L)'");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(set0.contains("*#"));
      assertNotNull(set0);
      
      String string2 = Locale.lookupTag(linkedList0, set0);
      assertEquals(0, linkedList0.size());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(set0.contains("*#"));
      assertNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string3);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.defaultString("0O7xYyi", "XRr31{q!1K\"25L)'");
      assertEquals("0O7xYyi", string4);
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.replace((String) null, "fjVA`zjKvw3f", "$^~J>$PMjQD>6ZZ#z)");
      assertNull(string5);
      
      String string6 = StringUtils.remove((String) null, "*#");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "d}";
      String string0 = StringUtils.center("d}", 1);
      assertEquals("d}", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("/x", 'J');
      assertEquals("J/xJ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviateMiddle("d}", "/x", 1);
      assertEquals("d}", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.endsWith("d}", "d}");
      assertTrue(boolean0);
      
      String string3 = StringUtils.substringAfterLast("/x", (String) null);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "d}", (CharSequence) "", 102);
      assertEquals(2, int0);
      
      String string4 = StringUtils.replaceAll(":)QpU M3_#)Xu8s/IY", "/x", "");
      assertEquals(":)QpU M3_#)Xu8s/IY", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("fBqvE^T=l9p", 1);
      assertEquals("fBqvE^T=l9p", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int1 = StringUtils.getFuzzyDistance("fBqvE^T=l9p", "fBqvE^T=l9p", locale0);
      assertEquals(34, int1);
      assertFalse(int1 == int0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      String string0 = "Locale must not be null";
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Stack<Locale> stack1 = new Stack<Locale>();
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertFalse(stack1.contains(locale0));
      assertNotNull(stack1);
      
      Locale locale1 = Locale.lookup(stack0, stack1);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals(0, stack1.size());
      assertEquals(10, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertFalse(stack1.contains(locale0));
      assertNull(locale1);
      
      String string1 = StringUtils.upperCase("Locale must not be null", locale0);
      assertEquals("LOCALE MUST NOT BE NULL", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "LOCALE MUST NOT BE NULL";
      charSequenceArray0[1] = (CharSequence) "Locale must not be null";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      char char0 = 'l';
      int int0 = 0;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'y', 0, (int) 'l');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      String[] stringArray0 = new String[16];
      int int0 = StringUtils.lastIndexOfAny("{}", stringArray0);
      assertEquals((-1), int0);
      assertEquals(16, stringArray0.length);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[2] = (double) (-1);
      doubleArray0[5] = (double) (-1);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.abbreviate("", "{}", 2);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean2 = StringUtils.endsWith("{}", "");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = StringUtils.replacePattern("{}", "", "");
      assertEquals("{}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfAny("{}", stringArray0);
      assertEquals((-1), int0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      String string0 = StringUtils.chomp("qf#uC-t8X?ZFt$WSa");
      assertEquals("qf#uC-t8X?ZFt$WSa", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      String string1 = StringUtils.getDigits("a& }#6P\"O-t!5S:Kmg");
      assertEquals("65", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("65");
      assertEquals("65", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.join((short[]) null, 'O');
      assertNull(string1);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[3] = '!';
      boolean boolean0 = StringUtils.isWhitespace("[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)2289;
      shortArray0[1] = (short)565;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)32;
      shortArray0[4] = (short)3;
      shortArray0[5] = (short)32;
      shortArray0[6] = (short)3;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)2289;
      String string2 = StringUtils.join(shortArray0, 'K');
      assertEquals("2289K565K0K32K3K32K3K0K2289", string2);
      assertArrayEquals(new short[] {(short)2289, (short)565, (short)0, (short)32, (short)3, (short)32, (short)3, (short)0, (short)2289}, shortArray0);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(9, shortArray0.length);
      
      String string3 = StringUtils.mid("[", (short)3, (short)3);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeEndIgnoreCase("Cannot store ", "Cannot store ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.unwrap("6?(F!S,VY^$o<Ixdo", 'o');
      assertEquals("6?(F!S,VY^$o<Ixdo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("", "6?(F!S,VY^$o<Ixdo", charSequenceArray0);
      assertEquals("6?(F!S,VY^$o<Ixdo", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, charSequenceArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'o';
      doubleArray0[1] = (double) 'o';
      String string3 = StringUtils.removeEnd("gFeuq(aV", "6?(F!S,VY^$o<Ixdo");
      assertEquals("gFeuq(aV", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate("R^}RmJ7|?;@7[x5|", 0);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("", "6?(F!S,VY^$o<Ixdo", "Y-6fX%");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 18
         // 6?(F!S,VY^$o<Ixdo
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("Object varargs must not be null", 115);
      assertEquals("t not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.difference("...", "Object varargs must not be null");
      assertEquals("Object varargs must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("K#PqSxob:C|+wrc", 115, 'i');
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiK#PqSxob:C|+wrc", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("Object varargs must not be null", 181);
      assertEquals("Object varargs must not be null                                                                                                                                                      ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "{}", (CharSequence) "k9%OU~Qe|;%", 181);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      String string0 = StringUtils.replaceChars("2u&r", "t~3%xd3j]MnsXl$", "b");
      assertEquals("2u&r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "2u&r", (-1066), (-3411));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("2u&r");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      String string1 = StringUtils.join(booleanArray0, '2');
      assertEquals("true2false2false2true2false2false", string1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false}, booleanArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, booleanArray0.length);
      
      String string2 = StringUtils.replaceOnce("b", (String) null, "2u&r");
      assertEquals("b", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("b", " ", (-3514), 32);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Iterator<CharBuffer> iterator0 = stack0.iterator();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(iterator0);
      
      String string4 = StringUtils.join(iterator0, "b");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars("true2false2false2true2false2false", "2u&r", " ");
      assertEquals("te false false te false false", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToNull("");
      assertNull(string6);
      
      String string7 = StringUtils.replaceChars(" ", "", " ");
      assertEquals(" ", string7);
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "2u&r";
      charSequenceArray0[2] = (CharSequence) "2u&r";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'Z', (-1402), 3061);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1402
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "a& }#6P\"O-t!5S:Kmg";
      String string0 = StringUtils.appendIfMissing("a& }#6P\"O-t!5S:Kmg", "a& }#6P\"O-t!5S:Kmg", charSequenceArray0);
      assertEquals("a& }#6P\"O-t!5S:Kmg", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.leftPad("Local", 4, "6`9");
      assertEquals("Local", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chop("a& }#6P\"O-t!5S:Kmg");
      assertEquals("a& }#6P\"O-t!5S:Km", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("a& }#6P\"O-t!5S:Km", "j=e", "a& }#6P\"O-t!5S:Km");
      assertEquals("a& }#6P\"O-t!5S:Km", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "j=e", "a& }#6P\"O-t!5S:Km");
      assertTrue(boolean0);
      
      String string4 = StringUtils.removeEnd("a& }#6P\"O-t!5S:Kmg", "Minimum abbreviation width with offset is %d");
      assertEquals("a& }#6P\"O-t!5S:Kmg", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.upperCase("...");
      assertEquals("...", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      String string0 = StringUtils.repeat("RTx>wH+@", (-34));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string0 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(6, stringArray0.length);
      
      String string1 = StringUtils.repeat("", 1602);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      String string0 = StringUtils.replaceChars("2uE4&p{n\"E4&p{n\"&r", "t~3%xd3j]MnsXl$", "b");
      assertEquals("2uE4&p{\"E4&p{\"&r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "2uE4&p{\"E4&p{\"&r", (-1066), (-3411));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("2uE4&p{n\"E4&p{n\"&r");
      assertNotNull(stringArray0);
      assertEquals(17, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      String string1 = StringUtils.join(booleanArray0, '2');
      assertEquals("true2false2false2true2false2false", string1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false}, booleanArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, booleanArray0.length);
      
      String string2 = StringUtils.replaceOnce("b", (String) null, "2uE4&p{n\"E4&p{n\"&r");
      assertEquals("b", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("b", " ", (-3514), 32);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Iterator<CharBuffer> iterator0 = stack0.iterator();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertNotNull(iterator0);
      
      String string4 = StringUtils.repeat("b", (-3411));
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars("true2false2false2true2false2false", "2uE4&p{\"E4&p{\"&r", " ");
      assertEquals("te false false te false false", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToNull("");
      assertNull(string6);
      
      String string7 = StringUtils.replaceChars(" ", "", " ");
      assertEquals(" ", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertNotNull(string7);
      
      boolean boolean0 = StringUtils.isNotBlank(" ");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "2uE4&p{n\"E4&p{n\"&r";
      charSequenceArray0[2] = (CharSequence) "2uE4&p{n\"E4&p{n\"&r";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'Z', (-1402), 3061);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1402
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", " r@o&T{R)Jn*_6");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("", "|qu1h");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertFalse(treeSet0.contains("|qu1h"));
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.add("|qu1h");
      assertTrue(boolean0);
      assertFalse(treeSet0.contains(""));
      assertTrue(treeSet0.contains("|qu1h"));
      
      boolean boolean1 = treeSet0.add("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(treeSet0.contains(" r@o&T{R)Jn*_6"));
      assertTrue(treeSet0.contains("|qu1h"));
      
      Spliterator<Object> spliterator0 = treeSet0.spliterator();
      assertFalse(treeSet0.contains(" r@o&T{R)Jn*_6"));
      assertTrue(treeSet0.contains("|qu1h"));
      assertNotNull(spliterator0);
      
      Object object0 = treeSet0.higher("");
      assertEquals("|qu1h", object0);
      assertFalse(object0.equals((Object)string1));
      assertFalse(object0.equals((Object)string0));
      assertFalse(treeSet0.contains(" r@o&T{R)Jn*_6"));
      assertTrue(treeSet0.contains("|qu1h"));
      assertNotNull(object0);
      
      String string2 = StringUtils.join((Iterable<?>) treeSet0, '-');
      assertEquals("-|qu1h", string2);
      assertFalse(string2.equals((Object)object0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(treeSet0.contains(" r@o&T{R)Jn*_6"));
      assertTrue(treeSet0.contains("|qu1h"));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("", "Comparator should not be null.");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)object0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.swapCase("");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)object0));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.trim("");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)object0));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.removeAll("", "");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)object0));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.mid("", (-990), 0);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)object0));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertNotNull(string7);
      
      String string8 = StringUtils.trim("maxWith cannot be negative");
      assertEquals("maxWith cannot be negative", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)object0));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      String string0 = "s9_2KBZ~Vfa?bbRl";
      String string1 = StringUtils.chomp("org.apache.commons.lang3.StringUtils", "org.apache.commons.lang3.StringUtils");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[1];
      String string2 = StringUtils.join(stringArray0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      
      char[] charArray0 = new char[1];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'V', (-1), 97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "-]uF{du*jy/IBV?zwo";
      charSequenceArray0[1] = (CharSequence) "-]uF{du*jy/IBV?zwo";
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "-]uF{du*jy/IBV?zwo";
      String string1 = StringUtils.reverse("-]uF{du*jy/IBV?zwo");
      assertEquals("owz?VBI/yj*ud{Fu]-", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[4] = (CharSequence) "owz?VBI/yj*ud{Fu]-";
      charSequenceArray0[5] = (CharSequence) "-]uF{du*jy/IBV?zwo";
      String string2 = StringUtils.prependIfMissingIgnoreCase("-]uF{du*jy/IBV?zwo", "-]uF{du*jy/IBV?zwo", charSequenceArray0);
      assertEquals("-]uF{du*jy/IBV?zwo", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(6, charSequenceArray0.length);
      
      String string3 = StringUtils.removeStart("-]uF{du*jy/IBV?zwo", "XRr31{q!1K\"25L)'");
      assertEquals("-]uF{du*jy/IBV?zwo", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsWhitespace("-]uF{du*jy/IBV?zwo");
      assertFalse(boolean0);
      
      String string4 = StringUtils.reverse("-]uF{du*jy/IBV?zwo");
      assertEquals("owz?VBI/yj*ud{Fu]-", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      String string0 = "XRr31{q!1K\"25L)'org.apache.commons.lang3.CharUtils";
      String[] stringArray0 = StringUtils.split("XRr31{q!1K\"25L)'org.apache.commons.lang3.CharUtils", "XRr31{q!1K\"25L)'org.apache.commons.lang3.CharUtils");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[3];
      int int0 = 3;
      intArray0[0] = 3;
      intArray0[1] = (-32768);
      intArray0[2] = (-1999);
      char char0 = 'H';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'H', (-32768), (-1609));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -32768
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "pk=_^|/b9xhn";
      String string0 = StringUtils.joinWith("pk=_^|/b9xhn", objectArray0);
      assertEquals("pk=_^|/b9xhn", string0);
      assertNotNull(string0);
      assertEquals(1, objectArray0.length);
      
      boolean boolean0 = StringUtils.isBlank("pk=_^|/b9xhn");
      assertFalse(boolean0);
      
      String string1 = "j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type Cannot clone Cloneable type f-G_sk-c$O";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type j=eCannot clone Cloneable type Cannot clone Cloneable type f-G_sk-c$O", "pk=_^|/b9xhn", (-341), (-341));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 13
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      String string0 = StringUtils.left("Locale must not be null", 5);
      assertEquals("Local", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Local");
      assertFalse(boolean0);
      
      String string1 = StringUtils.left("8d9s", 5);
      assertEquals("8d9s", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("0480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC20480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC2", "Local");
      assertEquals("0480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC20480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC2", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Local", "Locale must not be null");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isMixedCase("0480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC20480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC2");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      char char0 = 'd';
      String string0 = StringUtils.unwrap("1(kxe8_QhhgBO66", 'd');
      assertEquals("1(kxe8_QhhgBO66", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("1(kxe8_QhhgBO66");
      assertTrue(boolean0);
      
      String string1 = "";
      int int0 = 3918;
      String string2 = "Index: ";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Index: ", "1(kxe8_QhhgBO66", 3918, 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 17
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.uncapitalize("6\"T");
      assertEquals("6\"T", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad((String) null, 2448, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.stripAccents("6\"T");
      assertEquals("6\"T", string3);
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern(";+On:8E>sXhMU\"", "{}/D", "iIc('hf3[?");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition
         // {}/D
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean0);
      assertEquals(250, stringArray0.length);
      
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.repeat((String) null, 350);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      String string0 = StringUtils.removeEnd("-", "-");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("JbFyfAJVNcF", 2611);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "JbFyfAJVNcF", (CharSequence) "JbFyfAJVNcF");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "JbFyfAJVNcF";
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.unwrap("", ".PauCD*D");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "JbFyfAJVNcF";
      charSequenceArray0[5] = (CharSequence) "JbFyfAJVNcF";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string3 = StringUtils.getIfEmpty("JbFyfAJVNcF", supplier0);
      assertEquals("JbFyfAJVNcF", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string4 = StringUtils.stripToEmpty("");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 1393);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.substringAfter("", (-1));
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.removeEnd("XRr31{q!1K\"25L)'", "org.apache.commons.lang3.CharUtils");
      assertEquals("XRr31{q!1K\"25L)'", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.truncate("", 2611);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("", "n0q[muJteLPkI.Qd@~I", "JbFyfAJVNcF");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 18
         // n0q[muJteLPkI.Qd@~I
         //                   ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("-");
      assertEquals("-", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnce("-", "-", "-");
      assertEquals("-", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("]>-wWv|dow[lWDxoq_", "9Hoa");
      assertEquals("]>-wWv|dow[lWDxoq_", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter((String) null, (-1229));
      assertNull(string3);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "9Hoa", 520, 5992);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string0 = StringUtils.join((Object[]) null, "K4{hk.zSW,<B", 1937, 1937);
      assertNull(string0);
      
      String string1 = StringUtils.substringAfter("K4{hk.zSW,<B", "");
      assertEquals("K4{hk.zSW,<B", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripEnd("", ".Y\"^&Vu7V!R");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.center(" vs ", 72, "org.apache.commons.lang3.Charsets");
      assertEquals("org.apache.commons.lang3.Charsetso vs org.apache.commons.lang3.Charsetso", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("^*5.[5$sMneP~Uc[g0", "Supplied value must be a valid byte literal between -32768 and 32767: [", "Minimum abbreviation width is %d");
      assertEquals("^*5.[5$sMneP~Uc[g0", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "^*5.[5$sMneP~Uc[g0", (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", (-1096));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", (char[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.repeat("-Gkf9-", 1128);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceAll("", "", "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((char[]) null, '4');
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "-Gkf9-", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("p{InCombiningDilcriticalMarks}+", "p{InCombiningDilcriticalMarks}+");
      assertEquals("p{InCombiningDilcriticalMarks}+", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("p{InCombiningDilcriticalMarks}+");
      assertFalse(boolean0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean1 = arrayList0.add((Integer) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      Integer integer0 = new Integer(1172);
      assertEquals(1172, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean2 = arrayList0.add(integer0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(integer0));
      
      Integer integer1 = new Integer(1172);
      assertEquals(1172, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean3 = arrayList0.add(integer1);
      assertTrue(boolean3);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertTrue(arrayList0.contains(integer1));
      
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(arrayList0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(arrayList0.contains(integer1));
      assertTrue(linkedHashSet0.contains(integer1));
      assertNotNull(linkedHashSet0);
      
      String string2 = StringUtils.join((Iterable<?>) linkedHashSet0, 'V');
      assertEquals("V1172", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(arrayList0.isEmpty());
      assertEquals(3, arrayList0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(arrayList0.contains(integer1));
      assertTrue(linkedHashSet0.contains(integer1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("Yi5b@", "c#]/z9dTV");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", " r@o&T{R)Jn*_6");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("", "|qu1h");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertFalse(treeSet0.contains(""));
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.add("|qu1h");
      assertTrue(boolean0);
      assertTrue(treeSet0.contains("|qu1h"));
      assertFalse(treeSet0.contains(""));
      
      boolean boolean1 = treeSet0.add("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(treeSet0.contains(""));
      assertFalse(treeSet0.contains(" r@o&T{R)Jn*_6"));
      
      Spliterator<Object> spliterator0 = treeSet0.spliterator();
      assertTrue(treeSet0.contains(""));
      assertFalse(treeSet0.contains(" r@o&T{R)Jn*_6"));
      assertNotNull(spliterator0);
      
      Object object0 = treeSet0.higher("");
      assertEquals("|qu1h", object0);
      assertFalse(object0.equals((Object)string0));
      assertFalse(object0.equals((Object)string1));
      assertTrue(treeSet0.contains(""));
      assertFalse(treeSet0.contains(" r@o&T{R)Jn*_6"));
      assertNotNull(object0);
      
      String string2 = StringUtils.join((Iterable<?>) treeSet0, '-');
      assertEquals("-|qu1h", string2);
      assertFalse(string2.equals((Object)object0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(treeSet0.contains(""));
      assertFalse(treeSet0.contains(" r@o&T{R)Jn*_6"));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("", "Comparator should not be null.");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)object0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.swapCase("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)object0));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.trim("");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)object0));
      assertNotNull(string5);
      
      String string6 = StringUtils.removeAll("x]61s !:El3", "");
      assertEquals("x]61s !:El3", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)object0));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOf((CharSequence) "x]61s !:El3", 0);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.mid("", (-990), 0);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)object0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      String string8 = StringUtils.trim("maxWith cannot be negative");
      assertEquals("maxWith cannot be negative", string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)object0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(76);
      assertEquals(76, (int)integer0);
      assertNotNull(integer0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(76));
      assertNotNull(arrayList0);
      
      Integer integer1 = new Integer(273);
      assertEquals(273, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean1 = arrayList0.add(integer0);
      assertTrue(boolean1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.contains(integer1));
      assertTrue(arrayList0.contains(76));
      
      boolean boolean2 = arrayList0.add(integer1);
      assertTrue(boolean2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(76));
      
      boolean boolean3 = arrayList0.add(integer0);
      assertTrue(boolean3);
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(76));
      
      Integer integer2 = new Integer(76);
      assertEquals(76, (int)integer2);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      boolean boolean4 = arrayList0.add(integer2);
      assertTrue(boolean4);
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertEquals(4, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(integer2));
      
      String string0 = StringUtils.join((Iterable<?>) arrayList0, 'V');
      assertEquals("76V273V76V76", string0);
      assertEquals(4, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(integer2));
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("nbD~|~/", "org.apache.commons.lang3.ArrayUtils");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      String string0 = StringUtils.remove("K4{hk.zSW,<B|[vBlooM '&.hYP", 'o');
      assertEquals("K4{hk.zSW,<B|[vBlM '&.hYP", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      String string0 = StringUtils.repeat("!2rOa", 1172);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("!2rOa");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substring("K4{hk.zSW,<B|[vBlooM '&.hYP", 9);
      assertEquals(",<B|[vBlooM '&.hYP", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      String string0 = "BB'BmBFBfBLBGBz()*I5 Fn+eVF!>'zn";
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 970;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'v', 108, 970);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 108
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      long[] longArray0 = new long[0];
      int int0 = 322;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'h', 322, 2145);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 322
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("M Zq", "3R:");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "3R:", (CharSequence) "M Zq", 720);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultString("M Zq", "");
      assertEquals("M Zq", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("", "ndex: ");
      assertNull(string2);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)13;
      String string3 = StringUtils.join(shortArray0, 'O');
      assertEquals("13", string3);
      assertArrayEquals(new short[] {(short)13}, shortArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(1, shortArray0.length);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "ndex: ", (CharSequence) "13");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.chomp("3R:", "Minimum abbreviation width with offset is %d");
      assertEquals("3R:", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string5 = StringUtils.getIfBlank((String) null, supplier0);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      String string0 = StringUtils.prependIfMissing("Object varargs must not be null", "Object varargs must not be null", charSequenceArray0);
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize("6\"T");
      assertEquals("6\"T", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[1] = (-601L);
      longArray0[2] = (-1L);
      longArray0[3] = (-182L);
      longArray0[4] = (-1L);
      longArray0[5] = (-1L);
      longArray0[6] = (-1L);
      longArray0[7] = 1L;
      String string3 = StringUtils.join(longArray0, '-');
      assertEquals("0--601--1--182--1--1--1-1", string3);
      assertArrayEquals(new long[] {0L, (-601L), (-1L), (-182L), (-1L), (-1L), (-1L), 1L}, longArray0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(8, longArray0.length);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "6\"T", (CharSequence) "6\"T", 5);
      assertEquals(0, int0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfBlank("|37", supplier0);
      assertEquals("|37", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      boolean boolean1 = StringUtils.containsNone(charSequenceArray0[0], charArray0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'-'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 'i';
      floatArray0[1] = (float) 'i';
      floatArray0[2] = (float) 'i';
      floatArray0[3] = (float) 'i';
      String string0 = StringUtils.join(floatArray0, 'i', 8, 8);
      assertEquals("", string0);
      assertArrayEquals(new float[] {105.0F, 105.0F, 105.0F, 105.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals(4, floatArray0.length);
      
      int int0 = 654;
      String string1 = StringUtils.substringBefore(", Length: 0", (-4345));
      assertEquals(", Length: 0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing("Minimum abbreviation width with offset is %d", ',');
      assertEquals(",Minimum abbreviation width with offset is %d,", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = ", Length: 0";
      stringArray0[2] = ", Length: 0";
      stringArray0[3] = "Minimum abbreviation width with offset is %d";
      stringArray0[4] = "";
      stringArray0[5] = "Minimum abbreviation width with offset is %d";
      stringArray0[2] = "";
      stringArray0[7] = ",Minimum abbreviation width with offset is %d,";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly(", Length: 0", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Stack<Locale> stack1 = new Stack<Locale>();
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertFalse(stack1.contains(locale0));
      assertNotNull(stack1);
      
      Locale locale1 = Locale.lookup(stack0, stack1);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertFalse(stack1.contains(locale0));
      assertNull(locale1);
      
      String string0 = StringUtils.upperCase("Locale must not be null", locale0);
      assertEquals("LOCALE MUST NOT BE NULL", string0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "LOCALE MUST NOT BE NULL";
      charSequenceArray0[1] = (CharSequence) "Locale must not be null";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      String string1 = StringUtils.join(booleanArray0, 'l', 0, 0);
      assertEquals("", string1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, true}, booleanArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, booleanArray0.length);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = (int) 'l';
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (int) 'l';
      String string2 = StringUtils.join(intArray0, '}');
      assertEquals("0}108}0}0}108", string2);
      assertArrayEquals(new int[] {0, 108, 0, 0, 108}, intArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(5, intArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "LOCALE MUST NOT BE NULL", 0, 2478);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "0}108}0}0}108";
      stringArray0[2] = "LOCALE MUST NOT BE NULL";
      stringArray0[3] = "";
      stringArray0[4] = "0}108}0}0}108";
      String string3 = StringUtils.replaceEachRepeatedly("Locale must not be null", stringArray0, stringArray0);
      assertEquals("Locale must not be null", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      String string0 = StringUtils.stripToNull("Comparator should not be null.");
      assertEquals("Comparator should not be null.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("vDPAP)*PTu'w", "Comparator should not be null.");
      assertEquals("vDPAP)*PTu'w", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast(" vs ", "Comparator should not be null.");
      assertEquals(" vs ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)1023;
      shortArray0[2] = (short)15;
      boolean boolean1 = StringUtils.isWhitespace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
      
      String string0 = StringUtils.joinWith((String) null, charSequenceArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.difference(";+On:8E>sXhMU\"", (String) null);
      assertEquals(";+On:8E>sXhMU\"", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad((String) null, (int) (short)15, 'i');
      assertNull(string2);
      
      String string3 = StringUtils.rightPad("{}", 32);
      assertEquals("{}                              ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "^*5.[5$sMneP~Uc[g0", (CharSequence) null, 3164);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean2 = StringUtils.isAlphanumeric(";+On:8E>sXhMU\"");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Minimum abbreviation width with offset is %d", "", (-1558));
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
      
      String string4 = StringUtils.deleteWhitespace("\n");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "org.apache.commons.lang3.ObjectUtils");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "", "");
      assertNull(stringArray1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", (CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("Object varargs must not be null", (-684), 64);
      assertEquals("Object varargs must not be null", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Object varargs must not be null", (CharSequence) "", (-1812));
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Object varargs must not be null", 2147483645);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 58, "");
      assertEquals("                                                          ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.reverseDelimited("", 'G');
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("Z]B");
      assertEquals("Z]B", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("Z]B", "", charSequenceArray0);
      assertEquals("Z]B", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(0, charSequenceArray0.length);
      
      String string4 = StringUtils.stripStart("Z]B", "AGw}{ZF6T4MRt}O~");
      assertEquals("]B", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int0 = StringUtils.countMatches((CharSequence) "Z]B", (CharSequence) "Z]B");
      assertEquals(1, int0);
      
      String string5 = StringUtils.substring("BQ<e", 58, 5);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("Z]B", (-1985), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      int int0 = 2;
      int int1 = (-364);
      String string0 = StringUtils.substring("Object varargs must not be null", 2, (-364));
      assertEquals("", string0);
      assertNotNull(string0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(2));
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((Object) "");
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(2));
      assertTrue(arrayList0.contains(""));
      
      // Undeclared exception!
      try { 
        arrayList0.subList(2, 13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 13
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string0 = StringUtils.reverseDelimited("", 'G');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull("Z]B");
      assertEquals("Z]B", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("Z]B", "Z]B", "Z]B");
      assertEquals("Z]B", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("BQ<e", 58, 5);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("Z]B", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.abbreviateMiddle("Z]B", "I]/o`ktf-{%Pj@", 5);
      assertEquals("Z]B", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[3] = (CharSequence) "l 'H;VR";
      String[] stringArray0 = StringUtils.split("PI", "PI");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("comparator", "PI", 0);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      float[] floatArray0 = new float[3];
      int int0 = 4;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'o', 0, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("", (String) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "p{InCombiningDiacriticalMarks}+", (-1));
      assertNull(stringArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '%', (-3162), (-1232));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3162
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      String string0 = "y`K5&ej!3^;\\ur\\@qd";
      String string1 = StringUtils.left(string0, 796);
      assertEquals("y`K5&ej!3^;\\ur\\@qd", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("", 'A');
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 'A';
      String string3 = StringUtils.join(floatArray0, 'A', 122, 15);
      assertEquals("", string3);
      assertArrayEquals(new float[] {65.0F}, floatArray0, 0.01F);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(1, floatArray0.length);
      
      String string4 = StringUtils.substringBefore("Search and Replace array lengths don't match: ", (-3162));
      assertEquals("Search and Replace array lengths don't match: ", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      String[] stringArray0 = new String[16];
      double[] doubleArray0 = new double[8];
      String string0 = StringUtils.replaceEach("{}", stringArray0, stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(16, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "{}", (CharSequence) "{}");
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip("{}");
      assertEquals("{}", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.reverse("^-`a:[Z");
      assertEquals("Z[:a`-^", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(16, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      String string0 = StringUtils.unwrap("1(kxe8_QhhgBO66", 'd');
      assertEquals("1(kxe8_QhhgBO66", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("1(kxe8_QhhgBO66");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "0RH$w";
      stringArray0[1] = "1(kxe8_QhhgBO66";
      stringArray0[2] = "1(kxe8_QhhgBO66";
      stringArray0[3] = "1(kxe8_QhhgBO66";
      String string1 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertNull(string1);
      assertEquals(4, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "1(kxe8_QhhgBO66", (CharSequence) "1(kxe8_QhhgBO66");
      assertEquals(0, int0);
      
      String string2 = StringUtils.repeat("1(kxe8_QhhgBO66", "6kV}cLG}U", 0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(4, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "1(kxe8_QhhgBO66", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      String string0 = StringUtils.stripEnd("wia", "$+%}AA,c+-;ij?1|p");
      assertEquals("wia", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-1L);
      longArray0[1] = (-251L);
      longArray0[2] = 1862L;
      longArray0[3] = 0L;
      longArray0[4] = (-82L);
      longArray0[5] = 3444L;
      longArray0[6] = 0L;
      longArray0[7] = 0L;
      String string1 = StringUtils.join(longArray0, '4');
      assertEquals("-14-25141862404-82434444040", string1);
      assertArrayEquals(new long[] {(-1L), (-251L), 1862L, 0L, (-82L), 3444L, 0L, 0L}, longArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, longArray0.length);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertNotNull(locale1);
      
      String string2 = locale1.getDisplayVariant();
      assertEquals("", string2);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertNotNull(string2);
      
      String string3 = StringUtils.lowerCase("wia", locale1);
      assertEquals("wia", string3);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      String string0 = StringUtils.repeat("~XHek.Lh8k-G<0LsUC", (-2453));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("1$7S6J-P.(~Orhj56g", "~XHek.Lh8k-G<0LsUC");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("\n", "\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)565;
      shortArray0[1] = (short)850;
      shortArray0[2] = (short)2289;
      String string1 = StringUtils.mid("\n", (short)2289, 15);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isWhitespace("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isNotEmpty("\n");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      String string0 = StringUtils.defaultString(", Length: 0");
      assertEquals(", Length: 0", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf(", Length: 0", ", Length: 0", 0);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[1] = (Object) ", Length: 0";
      objectArray0[2] = (Object) ", Length: 0";
      objectArray0[3] = (Object) ", Length: 0";
      objectArray0[4] = (Object) ", Length: 0";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      String string1 = StringUtils.join(objectArray0, ", Length: 0", 321, 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, objectArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha(", Length: 0");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) ", Length: 0");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.wrapIfMissing("", 'o');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1422.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(string2));
      assertNotNull(stack0);
      
      boolean boolean1 = stack0.add(", Length: 0");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("[, Length: 0]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(", Length: 0"));
      assertFalse(stack0.contains(string2));
      
      boolean boolean2 = stack0.add("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals("[, Length: 0, ]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(string2));
      
      Stream<String> stream0 = stack0.stream();
      assertEquals("[, Length: 0, ]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(string2));
      assertNotNull(stream0);
      
      String string3 = StringUtils.join((Iterable<?>) stack0, "");
      assertEquals(", Length: 0", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("[, Length: 0, ]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertTrue(stack0.contains(string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.normalizeSpace("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean3 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(0, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Threshold must not be negative", ", Length: 0");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(17, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      String string0 = StringUtils.remove("|Bo`~:$pr^'ZkWRyXw", '0');
      assertEquals("|Bo`~:$pr^'ZkWRyXw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("tM!^", 35);
      assertEquals("M!^t", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("tM!^", "M!^t", "11IR");
      assertEquals("tM!^", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("Cannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("Minimum abbreviation width is %d", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(9, stringArray0.length);
      
      String string0 = StringUtils.defaultString("?0wuO/^'~");
      assertEquals("?0wuO/^'~", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("Cannot store ");
      assertEquals(13, int0);
      
      String string1 = StringUtils.center("?0wuO/^'~", 13, '@');
      assertEquals("@@?0wuO/^'~@@", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "@@?0wuO/^'~@@");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.substring("Cannot store ", (-1042), (-1042));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<String> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, '@');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", true);
      assertEquals(0, int0);
      
      String string0 = StringUtils.wrap("r$Z!&oB+sh'%>r:", 'b');
      assertEquals("br$Z!&oB+sh'%>r:b", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "br$Z!&oB+sh'%>r:b");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("br$Z!&oB+sh'%>r:b", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.remove("Xt a\"BSxvr8,:<1", 'b');
      assertEquals("Xt a\"BSxvr8,:<1", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Xt a\"BSxvr8,:<1", (CharSequence) "p{InCombiningDiacriticalMarks}+");
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", " r@o&T{R)Jn*_6");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("", "|qu1h");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertFalse(treeSet0.contains(""));
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.add("|qu1h");
      assertTrue(boolean0);
      assertFalse(treeSet0.contains(""));
      assertTrue(treeSet0.contains("|qu1h"));
      
      Spliterator<Object> spliterator0 = treeSet0.spliterator();
      assertFalse(treeSet0.contains(""));
      assertTrue(treeSet0.contains("|qu1h"));
      assertNotNull(spliterator0);
      
      Object object0 = treeSet0.pollFirst();
      assertEquals("|qu1h", object0);
      assertFalse(object0.equals((Object)string1));
      assertFalse(object0.equals((Object)string0));
      assertFalse(treeSet0.contains(""));
      assertNotNull(object0);
      
      Object object1 = treeSet0.higher("");
      assertFalse(treeSet0.contains("|qu1h"));
      assertNull(object1);
      
      String string2 = StringUtils.join((Iterable<?>) treeSet0, '-');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)object0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(treeSet0.contains("|qu1h"));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("", "Comparator should not be null.");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)object0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.swapCase("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)object0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.trim("rKVG/++8)-r3;;CG+");
      assertEquals("rKVG/++8)-r3;;CG+", string5);
      assertFalse(string5.equals((Object)object0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.swapCase("");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)object0));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 0);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.mid("rKVG/++8)-r3;;CG+", (-990), 0);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)object0));
      assertNotNull(string7);
      
      String string8 = StringUtils.trim("maxWith cannot be negative");
      assertEquals("maxWith cannot be negative", string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)object0));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      String string0 = StringUtils.rotate("M^", (-881));
      assertEquals("^M", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("M^", "^M", "/D");
      assertEquals("M^", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("M^");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-890);
      doubleArray0[1] = (double) '0';
      String string2 = StringUtils.join(doubleArray0, '0');
      assertEquals("-890.0048.0", string2);
      assertArrayEquals(new double[] {(-890.0), 48.0}, doubleArray0, 0.01);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(2, doubleArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "M^";
      charSequenceArray0[1] = (CharSequence) "-890.0048.0";
      charSequenceArray0[2] = (CharSequence) "-890.0048.0";
      boolean boolean1 = StringUtils.equalsAny("M^", charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", true);
      assertEquals(0, int0);
      
      String string0 = StringUtils.chop("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoCannot store ", "\n");
      assertEquals("XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoCannot store ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("X97P!zkAW-[(TCDft", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.replaceChars("Cannot store ", '0', '0');
      assertEquals("Cannot store ", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("X97P!zkAW-[(TCDft"));
      assertNotNull(arrayDeque0);
      
      boolean boolean1 = arrayDeque0.add("org.apache.commons.lang3.RegExUtils");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.contains("X97P!zkAW-[(TCDft"));
      assertTrue(arrayDeque0.contains("org.apache.commons.lang3.RegExUtils"));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayDeque0, locale_FilteringMode0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(arrayDeque0.contains("X97P!zkAW-[(TCDft"));
      assertTrue(arrayDeque0.contains("org.apache.commons.lang3.RegExUtils"));
      assertFalse(list0.contains("X97P!zkAW-[(TCDft"));
      assertNotNull(list0);
      
      String string1 = StringUtils.lowerCase("X97P!zkAW-[(TCDft", locale0);
      assertEquals("x97p!zkaw-[(tcdft", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.startsWithAny("x97p!zkaw-[(tcdft", stringArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, '(');
      assertEquals("0", string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "0";
      charSequenceArray0[1] = (CharSequence) "0";
      charSequenceArray0[2] = (CharSequence) "0";
      charSequenceArray0[3] = (CharSequence) "0";
      charSequenceArray0[4] = (CharSequence) "0";
      charSequenceArray0[5] = (CharSequence) "0";
      boolean boolean0 = StringUtils.startsWithAny("0", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(6, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.leftPad(stringArray0[0], (-559), "4%Q&4.+T0]%v:_~");
      assertNull(string0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 58, "");
      assertEquals("                                                          ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.reverseDelimited("", 'G');
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("Z]B");
      assertEquals("Z]B", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("Z]B", "", charSequenceArray0);
      assertEquals("Z]B", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(0, charSequenceArray0.length);
      
      String string4 = StringUtils.stripStart("Z]B", "AGw}{ZF6T4MRt}O~");
      assertEquals("]B", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.trimToNull("gFeuq(aV");
      assertEquals("gFeuq(aV", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("AGw}{ZF6T4MRt}O~"));
      assertNotNull(linkedList0);
      
      int int0 = StringUtils.countMatches((CharSequence) "Z]B", 'J');
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "gFeuq(aV", (CharSequence) "Z]B");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string6 = StringUtils.leftPad("BB'BmBFBfBLBGBzorg.apache.commons.lang3.Charsets", 547, "Z]B");
      assertEqualsmBFBfBLBGBzorg.apache.commons.lang3.Charsets", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "Z]B", charSequenceArray0);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      String string0 = StringUtils.removePattern("l_~'1", "l_~'1");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("l_~'1");
      assertFalse(boolean0);
      
      String string1 = StringUtils.EMPTY;
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean2 = StringUtils.startsWithAny("l_~'1", charSequenceArray0);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      String string0 = StringUtils.leftPad("_BN", (-274), "89.0Y89.0Y109.0Y89.0Y109.0Y109.089.0Y89.0Y109.0Y89.0Y109.0Y109.0 ");
      assertEquals("_BN", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("_BN", ',');
      assertEquals("_BN", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeStart("o$$&Og-vA(~:f", (String) null);
      assertEquals("o$$&Og-vA(~:f", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank("o$$&Og-vA(~:f", "o$$&Og-vA(~:f");
      assertEquals("o$$&Og-vA(~:f", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "o$$&Og-vA(~:f", (CharSequence) "o$$&Og-vA(~:f");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "o$$&Og-vA(~:f";
      stringArray0[1] = "o$$&Og-vA(~:f";
      stringArray0[2] = null;
      stringArray0[3] = null;
      String string3 = StringUtils.replaceEach("", (String[]) null, stringArray0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(4, stringArray0.length);
      
      String string4 = StringUtils.chop(string0);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "o$$&Og-vA(~:f");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "o$$&Og-vA(~:f", (CharSequence) null);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      String string0 = StringUtils.rightPad(", Length: 0", 0, 'k');
      assertEquals(", Length: 0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("The character ", 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("i]", "k9%OU~Qe|;%");
      assertEquals("k9%OU~Qe|;%", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.center("i]", 72, "k9%OU~Qe|;%");
      assertEquals("k9%OU~Qe|;%k9%OU~Qe|;%k9%OU~Qe|;%k9i]k9%OU~Qe|;%k9%OU~Qe|;%k9%OU~Qe|;%k9", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("\n", "\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "\n");
      assertEquals(0, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) null, 'f');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) "\n", (CharSequence) "\n");
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string1 = StringUtils.leftPad("?R", 0, "xQ,Nq0QY3qky\"DJ|4");
      assertEquals("?R", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "?R";
      charSequenceArray0[1] = (CharSequence) "?R";
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = (CharSequence) "\n";
      charSequenceArray0[4] = (CharSequence) "?R";
      charSequenceArray0[5] = (CharSequence) "?R";
      charSequenceArray0[6] = (CharSequence) "?R";
      charSequenceArray0[7] = (CharSequence) "?R";
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("\n"));
      assertNotNull(arrayDeque0);
      
      String string2 = arrayDeque0.poll();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("\n"));
      assertNull(string2);
      
      boolean boolean3 = arrayDeque0.offerLast("xQ,Nq0QY3qky\"DJ|4");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("\n"));
      assertTrue(arrayDeque0.contains("xQ,Nq0QY3qky\"DJ|4"));
      
      boolean boolean4 = arrayDeque0.add("");
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("\n"));
      assertTrue(arrayDeque0.contains("xQ,Nq0QY3qky\"DJ|4"));
      
      String string3 = arrayDeque0.pollFirst();
      assertEquals("xQ,Nq0QY3qky\"DJ|4", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("\n"));
      assertTrue(arrayDeque0.contains(""));
      assertNotNull(string3);
      
      boolean boolean5 = arrayDeque0.removeFirstOccurrence(charSequenceArray0[6]);
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("\n"));
      assertTrue(arrayDeque0.contains(""));
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean6 = arrayDeque0.offerLast("");
      assertTrue(boolean6);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("\n"));
      assertTrue(arrayDeque0.contains(""));
      
      boolean boolean7 = arrayDeque0.add("?R");
      assertTrue(boolean7);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean1);
      assertEquals(3, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("\n"));
      assertTrue(arrayDeque0.contains("?R"));
      
      boolean boolean8 = arrayDeque0.add("");
      assertTrue(boolean8);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean1);
      assertFalse(boolean8 == boolean5);
      assertFalse(boolean8 == boolean0);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean6);
      assertEquals(4, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("\n"));
      assertTrue(arrayDeque0.contains("?R"));
      
      String string4 = StringUtils.join((Iterable<?>) arrayDeque0, (String) null);
      assertEquals("?R", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals(4, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("\n"));
      assertTrue(arrayDeque0.contains("?R"));
      assertNotNull(string4);
      
      boolean boolean9 = StringUtils.startsWithAny("?R", charSequenceArray0);
      assertTrue(boolean9);
      assertFalse(boolean9 == boolean5);
      assertTrue(boolean9 == boolean1);
      assertTrue(boolean9 == boolean6);
      assertTrue(boolean9 == boolean4);
      assertFalse(boolean9 == boolean0);
      assertTrue(boolean9 == boolean2);
      assertTrue(boolean9 == boolean7);
      assertTrue(boolean9 == boolean3);
      assertTrue(boolean9 == boolean8);
      assertEquals(8, charSequenceArray0.length);
      
      boolean boolean10 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean10);
      assertTrue(boolean10 == boolean5);
      assertFalse(boolean10 == boolean1);
      assertFalse(boolean10 == boolean9);
      assertTrue(boolean10 == boolean0);
      assertFalse(boolean10 == boolean2);
      assertFalse(boolean10 == boolean7);
      assertFalse(boolean10 == boolean8);
      assertFalse(boolean10 == boolean4);
      assertFalse(boolean10 == boolean6);
      assertFalse(boolean10 == boolean3);
      assertEquals(8, charSequenceArray0.length);
      
      String string5 = StringUtils.substringBefore("", "\r");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 6;
      floatArray0[1] = 1422.0F;
      floatArray0[2] = (float) 6;
      floatArray0[3] = 1422.0F;
      floatArray0[4] = (float) 6;
      String string0 = StringUtils.join(floatArray0, 'U');
      assertEquals("6.0U1422.0U6.0U1422.0U6.0", string0);
      assertArrayEquals(new float[] {6.0F, 1422.0F, 6.0F, 1422.0F, 6.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals(5, floatArray0.length);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(""));
      assertNotNull(stack0);
      
      stack0.setSize(6);
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[null, null, null, null, null, null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(6, stack0.size());
      assertFalse(stack0.contains(""));
      
      Stream<String> stream0 = stack0.stream();
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[null, null, null, null, null, null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(6, stack0.size());
      assertFalse(stack0.contains(""));
      assertNotNull(stream0);
      
      String string1 = StringUtils.join((Iterable<?>) stack0, (String) null);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[null, null, null, null, null, null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(6, stack0.size());
      assertFalse(stack0.contains(string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("|GQ");
      assertEquals("|GQ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("|GQ", "|GQ", 2715);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.left("|GQ", (-1));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfEmpty("YJmJ};'~", "\",");
      assertEquals("YJmJ};'~", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnce("YJmJ};'~", "LjB%\"ZF^iZ[&)c", "YJmJ};'~");
      assertEquals("YJmJ};'~", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate("YJmJ};'~", 2715, 2715);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("d/59j&5#J", "");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("lMIR3N?&K\"e*iGws", "lMIR3N?&K\"e*iGws", "lMIR3N?&K\"e*iGws", 4);
      assertEquals("lMIR3N?&K\"e*iGws", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = '\'';
      charArray0[2] = 'm';
      charArray0[3] = 'F';
      charArray0[4] = 'f';
      charArray0[5] = 'L';
      charArray0[6] = 'G';
      charArray0[7] = 'z';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "lMIR3N?&K\"e*iGws", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'B', '\'', 'm', 'F', 'f', 'L', 'G', 'z'}, charArray0);
      assertEquals(8, charArray0.length);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "lMIR3N?&K\"e*iGws", 4, 4);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-749), (-749));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.wrap("/x", 'J');
      assertEquals("J/xJ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle(stringArray0[0], "/x", 1);
      assertNull(string1);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.endsWith(string1, string1);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.substringAfterLast("/x", "J/xJ");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("", 'J');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      String string0 = StringUtils.replacePattern("o", " kdM?h@'L`", " kdM?h@'L`");
      assertEquals("o", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("-", "LW6%d/Gmd-AGo:/k( H");
      assertEquals((-31), int0);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[3] = '!';
      String string0 = StringUtils.join(charArray0, '\u0000', (-607), (-607));
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '!', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '!', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'h';
      charArray0[1] = '&';
      charArray0[2] = ']';
      charArray0[3] = 'D';
      charArray0[4] = 'f';
      String string0 = StringUtils.join(charArray0, ']', (-306), (-306));
      assertEquals("", string0);
      assertArrayEquals(new char[] {'h', '&', ']', 'D', 'f'}, charArray0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringBefore("", 6);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("Supplied value must be a valid byte literal between -32768 and 32767: [", "object");
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", (CharSequence) "object");
      assertEquals(0, int0);
      
      String string3 = StringUtils.leftPad("4%Q&4.+T0]%v:_~", 3909, "Cannot store ");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("null/empty items");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1422.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = 1422.0F;
      floatArray0[3] = (float) 6;
      floatArray0[4] = (float) 0;
      String string4 = StringUtils.join(floatArray0, 'k');
      assertEquals("1422.0k0.0k1422.0k6.0k0.0", string4);
      assertArrayEquals(new float[] {1422.0F, 0.0F, 1422.0F, 6.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(5, floatArray0.length);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(string1));
      assertNotNull(stack0);
      
      stack0.setSize(3909);
      assertEquals(3909, stack0.size());
      assertEquals(3909, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(string1));
      
      Stream<String> stream0 = stack0.stream();
      assertEquals(3909, stack0.size());
      assertEquals(3909, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(string1));
      assertNotNull(stream0);
      
      String string5 = StringUtils.join((Iterable<?>) stack0, "r7a`vk9J%0VC5M0R+L");
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals(3909, stack0.size());
      assertEquals(3909, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertFalse(stack0.contains(string1));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.remove((String) null, 'S');
      assertNull(string0);
      
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean1 = stack0.add("1(kxe8_QhhgBO66");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[1(kxe8_QhhgBO66]", stack0.toString());
      assertTrue(stack0.contains("1(kxe8_QhhgBO66"));
      
      boolean boolean2 = stack0.add("ZBmtr-Xb8|CQM~,nY]V");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[1(kxe8_QhhgBO66, ZBmtr-Xb8|CQM~,nY]V]", stack0.toString());
      assertTrue(stack0.contains("1(kxe8_QhhgBO66"));
      
      Stack<String> stack1 = new Stack<String>();
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.contains("1(kxe8_QhhgBO66"));
      assertNotNull(stack1);
      
      Stream<String> stream0 = stack1.stream();
      assertNotSame(stack1, stack0);
      assertFalse(stack1.equals((Object)stack0));
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertTrue(stack1.isEmpty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertFalse(stack1.contains("1(kxe8_QhhgBO66"));
      assertNotNull(stream0);
      
      String string1 = StringUtils.join((Iterable<?>) stack0, "cM(");
      assertEquals("1(kxe8_QhhgBO66cM(ZBmtr-Xb8|CQM~,nY]V", string1);
      assertNotSame(stack0, stack1);
      assertFalse(stack0.equals((Object)stack1));
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[1(kxe8_QhhgBO66, ZBmtr-Xb8|CQM~,nY]V]", stack0.toString());
      assertFalse(stack0.contains("cM("));
      assertTrue(stack0.contains("1(kxe8_QhhgBO66"));
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace((String) null);
      assertNull(string2);
      
      boolean boolean3 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      String string3 = StringUtils.join((short[]) null, 'j');
      assertNull(string3);
      
      String string4 = StringUtils.replaceAll((String) null, "0480452", (String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = "gFeuq(aV";
      String string2 = StringUtils.wrapIfMissing("", '5');
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains('5'));
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, (String) null, 0, (int) '5');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 53
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("|GQ");
      assertEquals("|GQ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("|GQ", "|GQ", 2715);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.unwrap("\",", "\",");
      assertEquals("\",", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfEmpty("YJmJ};'~", "4.Z?hsw*)$:Hl");
      assertEquals("YJmJ};'~", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnce("1P[Jq%v:d)", "LjB%\"ZF^iZ[&)c", "");
      assertEquals("1P[Jq%v:d)", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Object[]) null, "\",", (-1180), (-1));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.swapCase("Cannot clone Cloneable type ");
      assertEquals("cANNOT CLONE cLONEABLE TYPE ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("cANNOT CLONE cLONEABLE TYPE ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("04734734028HFo0 eTkjWx:", "XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwo");
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '\"';
      doubleArray0[1] = (-95.08);
      doubleArray0[2] = (double) '\"';
      String string0 = StringUtils.join(doubleArray0, '\"');
      assertEquals("34.0\"-95.08\"34.0\"0.0", string0);
      assertArrayEquals(new double[] {34.0, (-95.08), 34.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals(4, doubleArray0.length);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.apache.commons.lang3.Charsets", (CharSequence) "p{InCombiningDiacriticalMarks}+The String must not be empty");
      assertEquals(3, int0);
      
      String string1 = StringUtils.center("2%OCI={c0/g must not be empty", 823, '\"');
      assertEquals{c0/g must not be emptystring1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("org.apache.commons.lang3.Charsets");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens(":i]c", "org.apache.commons.lang3.Charsets", 3);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      boolean boolean1 = StringUtils.isAlphaSpace("34.0\"-95.08\"34.0\"0.0");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      String string1 = StringUtils.stripStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertNotNull(treeSet0);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>((SortedSet<? extends Integer>) treeSet0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace("The String must not be empty");
      assertEquals("The String must not be empty", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      String string0 = StringUtils.defaultString(", Length: 0");
      assertEquals(", Length: 0", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf(", Length: 0", ", Length: 0", 0);
      assertEquals((-1), int0);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) ", Length: 0";
      objectArray0[1] = (Object) ", Length: 0";
      objectArray0[2] = (Object) ", Length: 0";
      objectArray0[3] = (Object) ", Length: 0";
      objectArray0[4] = (Object) ", Length: 0";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[5] = object0;
      String string1 = StringUtils.join(objectArray0, ", Length: 0", 321, 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, objectArray0.length);
      
      boolean boolean0 = StringUtils.isAlpha(", Length: 0");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) ", Length: 0");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.wrapIfMissing("", 'o');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1422.0F;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      String string3 = StringUtils.join(floatArray0, 'o');
      assertEquals("1422.0o0.0o-1.0o-1.0o-1.0", string3);
      assertArrayEquals(new float[] {1422.0F, 0.0F, (-1.0F), (-1.0F), (-1.0F)}, floatArray0, 0.01F);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(5, floatArray0.length);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.contains(", Length: 0"));
      assertNotNull(stack0);
      
      boolean boolean1 = stack0.add(", Length: 0");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals("[, Length: 0]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(", Length: 0"));
      assertFalse(stack0.contains(string1));
      
      boolean boolean2 = stack0.add("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals("[, Length: 0, ]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertTrue(stack0.contains(", Length: 0"));
      assertFalse(stack0.contains(string3));
      
      Stream<String> stream0 = stack0.stream();
      assertEquals("[, Length: 0, ]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertTrue(stack0.contains(", Length: 0"));
      assertFalse(stack0.contains(string3));
      assertNotNull(stream0);
      
      String string4 = StringUtils.join((Iterable<?>) stack0, "");
      assertEquals(", Length: 0", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("[, Length: 0, ]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertTrue(stack0.contains(", Length: 0"));
      assertFalse(stack0.contains(string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.normalizeSpace("");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean3 = StringUtils.isAnyBlank(charSequenceArray0);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("\n", "\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "\n", 'f');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.leftPad("{w", 0, "nCombiningDiacriticalMarks}+");
      assertEquals("{w", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isAlpha("{w");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string2 = StringUtils.join((int[]) null, '{');
      assertNull(string2);
      
      String string3 = StringUtils.stripToEmpty("$g^&");
      assertEquals("$g^&", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "$g^&", (-4820));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 733;
      intArray0[1] = (-428);
      intArray0[2] = (-428);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '9', (-428), 733);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -428
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[2] = (int) 'd';
      intArray0[1] = (int) 'd';
      intArray0[2] = (int) 'd';
      String string0 = StringUtils.join(intArray0, 'd');
      assertEquals("0d100d100", string0);
      assertArrayEquals(new int[] {0, 100, 100}, intArray0);
      assertNotNull(string0);
      assertEquals(3, intArray0.length);
      
      String string1 = StringUtils.replacePattern("kbEc;ND'+:*\"|", (String) null, ";c^E+uJB~O");
      assertEquals("kbEc;ND'+:*\"|", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 3;
      String string0 = StringUtils.substringBetween("XRr31{q!1K\"25L)'org.apache.commons.lang3.CharUtils", "", "XRr31{q!1K\"25L)'org.apache.commons.lang3.CharUtils");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Integer integer0 = new Integer(65536);
      assertEquals(65536, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = StringUtils.join((List<?>) vector0, "Invalid locale format: ", 2154, 160);
      assertEquals("", string0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(65536));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("X97P!zkAW-[(TCDft", "X97P!zkAW-[(TCDft");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.upperCase("1(kxe8_QhhgBO66");
      assertEquals("1(KXE8_QHHGBO66", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("X97P!zkAW-[(TCDft");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("X97P!zkAW-[(TCDft", 'Y');
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.chomp("l4u|k~&jtvP&Cb^l1+#");
      assertEquals("l4u|k~&jtvP&Cb^l1+#", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("#:{9uPsx'.KOC4N|nn", "A.}N!u&~Cq9 )`pPb1Y");
      assertEquals("A.}N!u&~Cq9 )`pPb1Y", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate("1(KXE8_QHHGBO66", 109);
      assertEquals("1(KXE8_QHHGBO66", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 'Y';
      floatArray0[1] = (float) 'Y';
      floatArray0[2] = (float) 109;
      floatArray0[3] = (float) 'Y';
      floatArray0[4] = (float) 109;
      floatArray0[5] = (float) 109;
      String string4 = StringUtils.join(floatArray0, 'Y');
      assertEquals("89.0Y89.0Y109.0Y89.0Y109.0Y109.0", string4);
      assertArrayEquals(new float[] {89.0F, 89.0F, 109.0F, 89.0F, 109.0F, 109.0F}, floatArray0, 0.01F);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(6, floatArray0.length);
      
      String string5 = StringUtils.removeEndIgnoreCase("", "A.}N!u&~Cq9 )`pPb1Y");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "l4u|k~&jtvP&Cb^l1+#", 2176);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.chomp("89.0Y89.0Y109.0Y89.0Y109.0Y109.0", "89.0Y89.0Y109.0Y89.0Y109.0Y109.0");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.chomp("_|Jt", "X97P!zkAW-[(TCDft");
      assertEquals("_|Jt", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      String string8 = StringUtils.replaceEachRepeatedly("@RW|+Xj:1", stringArray1, stringArray1);
      assertEquals("@RW|+Xj:1", string8);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertNotNull(string8);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("qLQ<aX`L\"99xar[");
      assertEquals("QLQ<aX`L\"99xar[", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("l 'H;VR", (String) null);
      assertEquals("l 'H;VR", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("l 'H;VR", "l 'H;VR");
      assertNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("l 'H;VR");
      assertEquals("l 'h;vr", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("l 'H;VR"));
      assertNotNull(linkedList0);
      
      int int0 = StringUtils.compare("Minimum abbreviation width is %d5t_s:?i &g`z.S", "", true);
      assertEquals(47, int0);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      String string0 = StringUtils.remove("\n", "\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("}%`-4d-/^u", "\n");
      assertEquals("}%`-4d-/^u", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("}%`-4d-/^u", "}%`-4d-/^u");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-1), (-1));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.getDigits("yT06");
      assertEquals("06", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeEndIgnoreCase("s$|3nw5KepT}", "");
      assertEquals("s$|3nw5KepT}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-210), 32);
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '!';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "s$|3nw5KepT}", charArray0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'!'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, charArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "s$|3nw5KepT}";
      charSequenceArray0[2] = (CharSequence) "s$|3nw5KepT}";
      charSequenceArray0[3] = (CharSequence) "s$|3nw5KepT}";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "s$|3nw5KepT}";
      charSequenceArray0[6] = (CharSequence) "";
      String string2 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.strip("");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.equalsAny("", charSequenceArray0);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      int int1 = StringUtils.getFuzzyDistance("", charSequenceArray0[3], locale0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(7, charSequenceArray0.length);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "s$|3nw5KepT}";
      stringArray0[1] = "";
      stringArray0[2] = "s$|3nw5KepT}";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string4 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      String string0 = StringUtils.capitalize("p{InCombiningDiacriticalMarks}+");
      assertEquals("P{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("p{InCombiningDiacriticalMarks}+");
      assertEquals("P{InCombiningDiacriticalMarks}+", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      String string0 = StringUtils.replaceChars("o$$&Og-vA(~:f", ')', ')');
      assertEquals("o$$&Og-vA(~:f", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[1] = (CharSequence) "_";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "o$$&Og-vA(~:f";
      charSequenceArray0[4] = (CharSequence) "o$$&Og-vA(~:f";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "_";
      String string1 = StringUtils.center((String) null, (-3375));
      assertNull(string1);
      
      charSequenceArray0[7] = (CharSequence) null;
      String string2 = StringUtils.prependIfMissing((String) null, "o$$&Og-vA(~:f", charSequenceArray0);
      assertNull(string2);
      assertEquals(8, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("\n", "\n");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.normalizeSpace("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 809;
      longArray0[1] = (long) 809;
      String string3 = StringUtils.join(longArray0, '\\', 809, (-11));
      assertEquals("", string3);
      assertArrayEquals(new long[] {809L, 809L}, longArray0);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(2, longArray0.length);
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.lowerCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[1] = (CharSequence) "";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertNotNull(linkedList0);
      
      String string1 = StringUtils.join((List<?>) linkedList0, ", QLength: ", 6, 6);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertNotNull(string1);
      
      charSequenceArray0[2] = (CharSequence) "";
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<String> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, ';');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(string2);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = null;
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.substringAfter("Threshold must not be negative", 6);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.replace("", "Array element ", "", 57);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 57);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isEmpty("Array element ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      Class<String> class0 = String.class;
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0, classLoader0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<String> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(false));
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator1 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(false));
      assertNotNull(iterator1);
      
      String string2 = StringUtils.join(iterator0, 'V');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string1 = StringUtils.center("Locale must not be null", 0, '@');
      assertEquals("Locale must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "Locale must not be null");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("/RMo0");
      assertEquals("/RMo0", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-70);
      byteArray0[3] = (byte) (-17);
      String string1 = StringUtils.join(byteArray0, '(');
      assertEquals("-121(0(-70(-17", string1);
      assertArrayEquals(new byte[] {(byte) (-121), (byte)0, (byte) (-70), (byte) (-17)}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, byteArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (byte)0;
      shortArray0[1] = (short) (byte) (-70);
      shortArray0[2] = (short) (byte) (-121);
      shortArray0[3] = (short) (byte) (-17);
      shortArray0[4] = (short)102;
      shortArray0[5] = (short) (byte)0;
      shortArray0[6] = (short) (byte) (-17);
      String string2 = StringUtils.join(shortArray0, '(', 879, 770);
      assertEquals("", string2);
      assertArrayEquals(new short[] {(short)0, (short) (-70), (short) (-121), (short) (-17), (short)102, (short)0, (short) (-17)}, shortArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(7, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string1 = StringUtils.getDigits("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      String string2 = StringUtils.lowerCase("HBq(g");
      assertEquals("hbq(g", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[3] = (CharSequence) "hbq(g";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(7, charSequenceArray0.length);
      
      String string3 = StringUtils.center("", (-1), 'v');
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("", "hbq(g", (-4747), (-4747));
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)56;
      shortArray0[1] = (short)13;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)10;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'u', (int) (short)0, 2824);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      String[] stringArray0 = new String[18];
      String string0 = StringUtils.replaceEach("{}", stringArray0, stringArray0);
      assertEquals("{}", string0);
      assertNotNull(string0);
      assertEquals(18, stringArray0.length);
      
      String string1 = StringUtils.strip("{}");
      assertEquals("{}", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("org.apache.commons.lang3.RegExUtils");
      assertEquals("org.apache.commons.lang3.RegExUtils", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '\u001C';
      charArray0[1] = 'K';
      String string0 = StringUtils.uncapitalize("K1r)c+@4$P\"`kpm");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      String string0 = StringUtils.valueOf((char[]) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeStart("o$$&Og-vA(~:f", (String) null);
      assertEquals("o$$&Og-vA(~:f", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfBlank("o$$&Og-vA(~:f", "o$$&Og-vA(~:f");
      assertEquals("o$$&Og-vA(~:f", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "o$$&Og-vA(~:f", (CharSequence) "o$$&Og-vA(~:f");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "o$$&Og-vA(~:f";
      stringArray0[1] = "o$$&Og-vA(~:f";
      stringArray0[2] = null;
      stringArray0[3] = null;
      String string3 = StringUtils.chop(string0);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "o$$&Og-vA(~:f");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "o$$&Og-vA(~:f", (CharSequence) null);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.replace("org.apache.commons.lang3.CharUtils", "Arguments cannot both be null", "Arguments cannot both be null", 7);
      assertEquals("org.apache.commons.lang3.CharUtils", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.wrap("0.071.0", "-L");
      assertEquals("-L0.071.0-L", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      String string0 = StringUtils.removePattern("s9_2KBZ~Vfa?bbRl", "org.apache.commons.lang3.StringUtils");
      assertEquals("s9_2KBZ~Vfa?bbRl", string0);
      assertNotNull(string0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      assertEquals(Locale.FilteringMode.AUTOSELECT_FILTERING, locale_FilteringMode0);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      assertEquals(Locale.FilteringMode.IGNORE_EXTENDED_RANGES, locale_FilteringMode1);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      
      String string1 = StringUtils.removeStartIgnoreCase("s9_2KBZ~Vfa?bbRl", "zc");
      assertEquals("s9_2KBZ~Vfa?bbRl", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringBefore("", 6);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("Supplied value must be a valid byte literal between -32768 and 32767: [", "object");
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      char[] charArray0 = new char[1];
      String string3 = StringUtils.join(charArray0, 'u');
      assertEquals("\u0000", string3);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(1, charArray0.length);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("\u0000", "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertEquals(1, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      
      boolean boolean2 = StringUtils.startsWith(charBuffer0, "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertFalse(boolean2);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string0 = StringUtils.unwrap("6?(F!S,VY^$o<Ixdo", 'o');
      assertEquals("6?(F!S,VY^$o<Ixdo", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("", "6?(F!S,VY^$o<Ixdo", charSequenceArray0);
      assertEquals("6?(F!S,VY^$o<Ixdo", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, charSequenceArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'o';
      doubleArray0[1] = (double) 'o';
      String string2 = StringUtils.join(doubleArray0, '%', 0, (-3285));
      assertEquals("", string2);
      assertArrayEquals(new double[] {111.0, 111.0}, doubleArray0, 0.01);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(2, doubleArray0.length);
      
      char[] charArray0 = new char[4];
      String string3 = StringUtils.join((short[]) null, '%');
      assertNull(string3);
      
      String string4 = StringUtils.mid("Q>sf ?h?I]['q", (-3285), 958);
      assertEquals("Q>sf ?h?I]['q", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      String string0 = StringUtils.getIfBlank("C.t;1", (Supplier<String>) null);
      assertEquals("C.t;1", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "H]Z", 107, 107);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.chop("offset cannot be negative");
      assertEquals("offset cannot be negativ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("H]Z", "hQadcqbo");
      assertEquals("H]Z", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsWhitespace("C.t;1");
      assertFalse(boolean0);
      
      String string3 = StringUtils.trimToEmpty("=}{B$K*PO");
      assertEquals("=}{B$K*PO", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.wrap("", "=}{B$K*PO");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      String string0 = StringUtils.stripToNull("T~Dx0C0K167K167K32K3K289K00K167K167K2K3K2289K0CgGEN=CThrshold must not be negativeC2");
      assertEquals("T~Dx0C0K167K167K32K3K289K00K167K167K2K3K2289K0CgGEN=CThrshold must not be negativeC2", string0);
      assertNotNull(string0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      String string1 = StringUtils.removeStartIgnoreCase("T~Dx0C0K167K167K32K3K289K00K167K167K2K3K2289K0CgGEN=CThrshold must not be negativeC2", "T~Dx0C0K167K167K32K3K289K00K167K167K2K3K2289K0CgGEN=CThrshold must not be negativeC2");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.right("T~Dx0C0K167K167K32K3K289K00K167K167K2K3K2289K0CgGEN=CThrshold must not be negativeC2", 4);
      assertEquals("veC2", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("|GQ");
      assertEquals("|GQ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("|GQ", "|GQ", 2715);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.unwrap("\",", "\",");
      assertEquals("\",", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultIfEmpty("YJmJ};'~", "4.Z?hsw*)$:Hl");
      assertEquals("YJmJ};'~", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("w+YT3H67+", "|GQ", "YJmJ};'~");
      assertEquals("w+YT3H67+", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBeforeLast("4|9", "\",");
      assertEquals("4|9", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfterLast("4|9", (-1));
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      HashSet<Locale.FilteringMode> hashSet0 = new HashSet<Locale.FilteringMode>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      boolean boolean1 = hashSet0.add(locale_FilteringMode0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      
      Vector<Object> vector0 = new Vector<Object>(hashSet0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertEquals("[EXTENDED_FILTERING]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertFalse(vector0.contains(2715));
      assertNotNull(vector0);
      
      String string6 = StringUtils.join((Iterable<?>) vector0, 'q');
      assertEquals("EXTENDED_FILTERING", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, vector0.capacity());
      assertEquals("[EXTENDED_FILTERING]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(hashSet0.contains(locale_FilteringMode0));
      assertFalse(vector0.contains(2715));
      assertNotNull(string6);
      
      String string7 = StringUtils.leftPad("YJmJ};'~", (-317));
      assertEquals("YJmJ};'~", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      String string0 = StringUtils.remove("}%`-4d-/^u", "}%`-4d-/^u");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      String string0 = "}1{\\f6e^e";
      // Undeclared exception!
      try { 
        StringUtils.removeAll("}1{\f6e^e", "}1{\f6e^e");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 1
         // }1{\f6e^e
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      String string0 = StringUtils.stripEnd("wia", "$+%}AA,c+-;ij?1|p");
      assertEquals("wia", string0);
      assertNotNull(string0);
      
      TreeSet<CharBuffer> treeSet0 = new TreeSet<CharBuffer>();
      assertNotNull(treeSet0);
      
      TreeSet<CharBuffer> treeSet1 = new TreeSet<CharBuffer>((SortedSet<CharBuffer>) treeSet0);
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(treeSet1);
      
      HashSet<CharBuffer> hashSet0 = new HashSet<CharBuffer>(treeSet1);
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      String string1 = StringUtils.join((Iterable<?>) hashSet0, '^');
      assertEquals("", string1);
      assertNotSame(treeSet0, treeSet1);
      assertNotSame(treeSet1, treeSet0);
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertFalse(string1.equals((Object)string0));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("$+%}AA,c+-;ij?1|p");
      assertEquals("$+%}AA,c+-;ij?1|p", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", " r@o&T{R)Jn*_6");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("", "|qu1h");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertFalse(treeSet0.contains(""));
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.add("|qu1h");
      assertTrue(boolean0);
      assertFalse(treeSet0.contains(""));
      assertTrue(treeSet0.contains("|qu1h"));
      
      Spliterator<Object> spliterator0 = treeSet0.spliterator();
      assertFalse(treeSet0.contains(""));
      assertTrue(treeSet0.contains("|qu1h"));
      assertNotNull(spliterator0);
      
      Object object0 = treeSet0.higher("");
      assertEquals("|qu1h", object0);
      assertFalse(object0.equals((Object)string1));
      assertFalse(object0.equals((Object)string0));
      assertFalse(treeSet0.contains(""));
      assertTrue(treeSet0.contains("|qu1h"));
      assertNotNull(object0);
      
      String string2 = StringUtils.join((Iterable<?>) treeSet0, '-');
      assertEquals("|qu1h", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(treeSet0.contains(""));
      assertTrue(treeSet0.contains("|qu1h"));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrap("", "Comparator should not be null.");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)object0));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.swapCase("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)object0));
      assertNotNull(string4);
      
      String string5 = StringUtils.trim("");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)object0));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.removeAll("x]61s !:El3", "");
      assertEquals("x]61s !:El3", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)object0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOf((CharSequence) "x]61s !:El3", 0);
      assertEquals((-1), int0);
      
      String string7 = StringUtils.mid("", (-990), 0);
      assertEquals("", string7);
      assertFalse(string7.equals((Object)object0));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      String string8 = StringUtils.trim("maxWith cannot be negative");
      assertEquals("maxWith cannot be negative", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)object0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      String string0 = StringUtils.swapCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.rotate("", 56);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      assertNotNull(linkedList0);
      
      ListIterator<String> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList0.contains(string0));
      assertNotNull(listIterator0);
      
      boolean boolean1 = linkedList0.add("cannot store ");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains("cannot store "));
      assertFalse(linkedList0.contains(string0));
      
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, 'z');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      String string0 = "X97P!zkAW-[(TCDft";
      String[] stringArray0 = StringUtils.splitByWholeSeparator("X97P!zkAW-[(TCDft", "X97P!zkAW-[(TCDft");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.upperCase("1(kxe8_QhhgBO66");
      assertEquals("1(KXE8_QHHGBO66", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("X97P!zkAW-[(TCDft");
      assertFalse(boolean0);
      
      char char0 = 'Y';
      String[] stringArray1 = StringUtils.split("X97P!zkAW-[(TCDft", 'Y');
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean2 = StringUtils.isNumeric("1(KXE8_QHHGBO66");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string2 = "l4u|k~&jtvP&Cb^l1+#";
      String string3 = StringUtils.chomp("l4u|k~&jtvP&Cb^l1+#");
      assertEquals("l4u|k~&jtvP&Cb^l1+#", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = "A.}N!u&~Cq9 )`pPb1Y";
      String string5 = StringUtils.difference("#:{9uPsx'.KOC4N|nn", "A.}N!u&~Cq9 )`pPb1Y");
      assertEquals("A.}N!u&~Cq9 )`pPb1Y", string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int0 = (-545);
      // Undeclared exception!
      try { 
        StringUtils.truncate("\r", (-545));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (-735));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "\n";
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("\n", charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "\n");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("lMIR3N?&K\"e*iGws", "lMIR3N?&K\"e*iGws", "lMIR3N?&K\"e*iGws", 4);
      assertEquals("lMIR3N?&K\"e*iGws", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = '\'';
      charArray0[2] = 'm';
      charArray0[3] = 'F';
      charArray0[4] = 'f';
      charArray0[5] = 'L';
      charArray0[6] = 'G';
      charArray0[7] = 'z';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "lMIR3N?&K\"e*iGws", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'B', '\'', 'm', 'F', 'f', 'L', 'G', 'z'}, charArray0);
      assertEquals(8, charArray0.length);
      
      String string1 = StringUtils.swapCase("lMIR3N?&K\"e*iGws");
      assertEquals("Lmir3n?&k\"E*IgWS", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAllLowerCase("Lmir3n?&k\"E*IgWS");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.join(charArray0, 'B');
      assertEquals("BB'BmBFBfBLBGBz", string2);
      assertArrayEquals(new char[] {'B', '\'', 'm', 'F', 'f', 'L', 'G', 'z'}, charArray0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(8, charArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Lmir3n?&k\"E*IgWS", "BB'BmBFBfBLBGBz", 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 16
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.remove((String) null, 'S');
      assertNull(string0);
      
      String string1 = StringUtils.wrap((String) null, (String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.join((Iterator<?>) null, "hThe String must not be emptyh");
      assertNull(string2);
      
      boolean boolean2 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, false);
      assertEquals(0, int0);
      
      String string3 = StringUtils.center("XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoCannot store ", 1863, 'd');
      assertNotNull(string3);
      
      String string4 = StringUtils.capitalize((String) null);
      assertNull(string4);
      
      boolean boolean3 = StringUtils.isMixedCase("hThe String must not be emptyh");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      String string5 = StringUtils.leftPad(string3, 10, (String) null);
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBetween((String) null, "&2!k;iDbB{PrG7LwM", (String) null);
      assertNull(string6);
      
      boolean boolean4 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) string0, (CharSequence) null, 10);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string7 = StringUtils.join((Object[]) null, (String) null);
      assertNull(string7);
      
      String string8 = StringUtils.rotate("6`9&ePxZ|Vk*!'", 160);
      assertEquals("|Vk*!'6`9&ePxZ", string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      String string0 = "6\\?(F!S,VY^$o<Ixdo";
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "6?(F!S,VY^$o<Ixdo");
      assertNull(stringArray0);
      
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '\"', 0, 41);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[2] = (CharSequence) "l 'H;VR";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("]]E\"}pr]d_t];");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isEmpty("l 'H;VR");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      String string0 = StringUtils.remove("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "");
      assertNull(stringArray0);
      
      String string1 = StringUtils.replace("", "Array element ", "", 57);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 57);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isEmpty("Array element ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      String string2 = StringUtils.join(booleanArray0, '');
      assertEquals("falsefalsefalsefalsefalsefalsefalsefalse", string2);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(8, booleanArray0.length);
      
      String string3 = StringUtils.toRootLowerCase("falsefalsefalsefalsefalsefalsefalsefalse");
      assertEquals("falsefalsefalsefalsefalsefalsefalsefalse", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isNumeric("falsefalsefalsefalsefalsefalsefalsefalse");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = StringUtils.substringBeforeLast((String) null, "falsefalsefalsefalsefalsefalsefalsefalse");
      assertNull(string4);
      
      String string5 = StringUtils.join((String[]) null);
      assertNull(string5);
      
      Integer[] integerArray0 = new Integer[8];
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = new Integer(3110);
      assertEquals(3110, (int)integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotNull(integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = new Integer(0);
      assertEquals(0, (int)integer3);
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertNotNull(integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = new Integer((int) integerArray0[2]);
      assertEquals(3110, (int)integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertNotNull(integer4);
      assertEquals(8, integerArray0.length);
      
      integerArray0[4] = integer4;
      Integer integer5 = new Integer((-1));
      assertEquals((-1), (int)integer5);
      assertTrue(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)int0));
      assertNotNull(integer5);
      
      integerArray0[5] = integer5;
      Integer integer6 = new Integer(160);
      assertEquals(160, (int)integer6);
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer5));
      assertNotNull(integer6);
      
      integerArray0[6] = integer6;
      Integer integer7 = new Integer((-601));
      assertEquals((-601), (int)integer7);
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)int0));
      assertNotNull(integer7);
      
      integerArray0[7] = integer7;
      String string6 = StringUtils.join(integerArray0);
      assertEquals("-10311003110-1160-601", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals(8, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("f");
      assertEquals("f", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string1 = StringUtils.lowerCase("X^_?;!$7)Zg", locale0);
      assertEquals("x^_?;!$7)zg", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("f");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string2 = StringUtils.removeStart("6`9&ePxZ|Vk*!'", "");
      assertEquals("6`9&ePxZ|Vk*!'", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Qb", "Qb", (-871));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(2, stringArray0.length);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Qb", (CharSequence) "Qb");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string0 = StringUtils.substringBefore((String) null, 1089);
      assertNull(string0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("Qb");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string1 = StringUtils.defaultIfBlank("Qb", "");
      assertEquals("Qb", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Locale locale0 = Locale.lookup(stack0, arrayList0);
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNull(locale0);
      
      String string0 = StringUtils.upperCase("z.(", (Locale) null);
      assertEquals("Z.(", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("Z.(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      String string0 = StringUtils.unwrap("N", "N");
      assertEquals("N", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (-735));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "\n";
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("\n", charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "\n");
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.ArrayUtils";
      // Undeclared exception!
      try { 
        StringUtils.truncate("org.apache.commons.lang3.ArrayUtils", (-947), (-947));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("\n", "\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "\n", 'f');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) "\n", (CharSequence) "\n");
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string1 = StringUtils.leftPad("?R", 0, "xQ,Nq0QY3qky\"DJ|4");
      assertEquals("?R", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      String string0 = "n5&%K*/Xg^y8D4";
      String string1 = "8~GpJrQP\\h ,8=um";
      String[] stringArray0 = StringUtils.substringsBetween("8~GpJrQPh ,8=um", "|Bo`~:$pr^'ZkWRyXw", "|Bo`~:$pr^'ZkWRyXw");
      assertNull(stringArray0);
      
      char char0 = 'D';
      String string2 = StringUtils.replaceChars("|Bo`~:$pr^'ZkWRyXw", 'H', 'H');
      assertEquals("|Bo`~:$pr^'ZkWRyXw", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("|Bo`~:$pr^'ZkWRyXw");
      assertEquals("|Bo`~:$pr^'ZkWRyXw", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("n", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      String string0 = StringUtils.rotate("org.apache.commons.lang3.LocaleUtils", Integer.MIN_VALUE);
      assertEquals("ang3.LocaleUtilsorg.apache.commons.l", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean1 = StringUtils.containsWhitespace("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.replaceOnce((String) null, "Index: ", (String) null);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Index: ";
      objectArray0[1] = (Object) charSequenceArray0[1];
      String string2 = StringUtils.joinWith((String) null, objectArray0);
      assertEquals("Index: ", string2);
      assertNotNull(string2);
      assertEquals(2, objectArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) "Index: ");
      assertEquals(0, int0);
      
      String string3 = StringUtils.substring("R^}RmJ7|?;@7[x5|", (-4272), (-2442));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate("WqM20'{^s|", 102, 0);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.LocaleUtils", "1.071.0");
      assertNotNull(stringArray0);
      assertEquals(5, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("^hB-SrG", "1.071.0", (-4272));
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      String string0 = "\"qf:M?+";
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\"qf:M?+";
      objectArray0[1] = (Object) "\"qf:M?+";
      objectArray0[2] = (Object) "\"qf:M?+";
      objectArray0[3] = (Object) "\"qf:M?+";
      objectArray0[4] = (Object) "\"qf:M?+";
      objectArray0[5] = (Object) "\"qf:M?+";
      objectArray0[6] = (Object) "\"qf:M?+";
      objectArray0[7] = (Object) "\"qf:M?+";
      String string1 = StringUtils.joinWith("\"qf:M?+", objectArray0);
      assertEquals("\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, objectArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+", (CharSequence) "\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+");
      assertEquals(1, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+";
      charSequenceArray0[1] = (CharSequence) "\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+";
      charSequenceArray0[2] = (CharSequence) "\"qf:M?+";
      charSequenceArray0[3] = (CharSequence) "\"qf:M?+";
      charSequenceArray0[4] = (CharSequence) "\"qf:M?+";
      String string2 = StringUtils.substring("\"qf:M?+", 1, 1);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[5] = (CharSequence) "";
      // Undeclared exception!
      try { 
        StringUtils.truncate("\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+\"qf:M?+", 4713, (-1985));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      charSequenceArray0[0] = (CharSequence) "a& }#6P\"O-t!5S:4mg";
      String string0 = StringUtils.joinWith("a& }#6P\"O-t!5S:4mg", charSequenceArray0);
      assertEquals("a& }#6P\"O-t!5S:4mga& }#6P\"O-t!5S:4mga& }#6P\"O-t!5S:4mga& }#6P\"O-t!5S:4mga& }#6P\"O-t!5S:4mga& }#6P\"O-t!5S:4mga& }#6P\"O-t!5S:4mga& }#6P\"O-t!5S:4mga& }#6P\"O-t!5S:4mga& }#6P\"O-t!5S:4mg", string0);
      assertNotNull(string0);
      assertEquals(10, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfterLast("a& }#6P\"O-t!5S:4mg", 2981);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.unwrap("--Z;{v6|#8ab !kGe ", '*');
      assertEquals("--Z;{v6|#8ab !kGe ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      String string0 = StringUtils.center("The String must not be empty", 7);
      assertEquals("The String must not be empty", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String[] stringArray1 = new String[3];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "";
      stringArray1[2] = "";
      String string0 = StringUtils.replaceEach("", stringArray0, stringArray1);
      assertEquals("", string0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      String string1 = StringUtils.center("", 15);
      assertEquals("               ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray1);
      assertEquals("", string2);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(4, stringArray0.length);
      assertEquals(3, stringArray1.length);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.removePattern("", " ");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = "DA";
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      String string0 = StringUtils.defaultIfBlank("gC>jlLMJ", (String) null);
      assertEquals("gC>jlLMJ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithAny("gC>jlLMJ", (CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.stripToNull("gC>jlLMJ");
      assertEquals("gC>jlLMJ", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = classLoader1.getParent();
      assertFalse(classLoader0.equals((Object)classLoader1));
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNull(classLoader2);
      
      String string3 = StringUtils.stripStart("gC>jlLMJ", "szL?_I=bo*T/3eu");
      assertEquals("gC>jlLMJ", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBeforeLast("Array and element cannot both be null", ", Length: 0");
      assertEquals("Array and element cannot both be null", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      String string0 = "[~JrsYB[rh-?#s";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("[~JrsYB[rh-?#s");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("\r");
      assertTrue(boolean0);
      
      String string2 = "";
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", ')');
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      String string3 = StringUtils.getCommonPrefix(stringArray1);
      assertEquals("", string3);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(0, stringArray1.length);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) ')';
      doubleArray0[1] = (double) ')';
      doubleArray0[2] = (double) ')';
      doubleArray0[3] = (double) ')';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'k', 98, 1557);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 98
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      String string0 = "y`K5&ej!3^;\\ur\\@qd";
      String string1 = StringUtils.left(string0, 796);
      assertEquals("y`K5&ej!3^;\\ur\\@qd", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("", 'A');
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 8, 8);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.replacePattern("m>z=(al5Hl`^", "", "");
      assertEquals("m>z=(al5Hl`^", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllUpperCase("");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 796;
      String string4 = StringUtils.join(doubleArray0, '[');
      assertEquals("-1.0[796.0", string4);
      assertArrayEquals(new double[] {(-1.0), 796.0}, doubleArray0, 0.01);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(2, doubleArray0.length);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("m>z=(al5Hl`^", 'A');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string5 = "j],";
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = 'A';
      charArray0[2] = 'A';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-1791), 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string1 = StringUtils.stripStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertNotNull(treeSet0);
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>((SortedSet<? extends Integer>) treeSet0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace("The String must not be empty");
      assertEquals("The String must not be empty", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.replaceOnce((String) null, "Index: ", (String) null);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      char[] charArray0 = new char[1];
      charArray0[0] = ']';
      String string2 = StringUtils.valueOf(charArray0);
      assertEquals("]", string2);
      assertArrayEquals(new char[] {']'}, charArray0);
      assertNotNull(string2);
      assertEquals(1, charArray0.length);
      
      charSequenceArray0[2] = (CharSequence) "]";
      String string3 = StringUtils.join((Object[]) charSequenceArray0);
      assertEquals("]", string3);
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(4, charSequenceArray0.length);
      
      charSequenceArray0[3] = (CharSequence) "]";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("]", charSequence0);
      assertTrue(charSequence0.equals((Object)string3));
      assertTrue(charSequence0.equals((Object)string2));
      assertNotNull(charSequence0);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("]", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(4, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[2], charSequenceArray0[2]);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      String string0 = StringUtils.wrap("The String must not be empty", 'h');
      assertEquals("hThe String must not be emptyh", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "The String must not be empty";
      boolean boolean0 = StringUtils.equalsAny("hThe String must not be emptyh", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.replace("The String must not be empty", "hThe String must not be emptyh", "hThe String must not be emptyh", 1);
      assertEquals("The String must not be empty", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("A.}N!u&~Cq9 )`pPb1Y", 1, 'h');
      assertEquals("A.}N!u&~Cq9 )`pPb1Y", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.startsWith(charSequenceArray0[0], charSequenceArray0[0]);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[1] = (float) 1;
      String string3 = StringUtils.join(floatArray0, '7');
      assertEquals("0.071.0", string3);
      assertArrayEquals(new float[] {0.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(2, floatArray0.length);
      
      String string4 = StringUtils.trim("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.upperCase("The String must not be empty");
      assertEquals("THE STRING MUST NOT BE EMPTY", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOf((CharSequence) "hThe String must not be emptyh", (CharSequence) "0.071.0", 0);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("p{InCombiningDiacriticalMarks}+", charSequenceArray0[2]);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("The String must not be empty", "0.071.0", 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      String string0 = StringUtils.prependIfMissing("Object varargs must not be null", "Object varargs must not be null", charSequenceArray0);
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize("6\"T");
      assertEquals("6\"T", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 0L;
      longArray0[5] = (-614L);
      longArray0[2] = (-1L);
      longArray0[3] = (-182L);
      longArray0[4] = (-1L);
      longArray0[5] = (-1L);
      longArray0[6] = (-1L);
      longArray0[7] = 1L;
      String string3 = StringUtils.join(longArray0, '-');
      assertEquals("0-0--1--182--1--1--1-1", string3);
      assertArrayEquals(new long[] {0L, 0L, (-1L), (-182L), (-1L), (-1L), (-1L), 1L}, longArray0);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(8, longArray0.length);
      
      int int0 = StringUtils.compare((String) null, "jz=I]TU(~_Y", false);
      assertEquals(1, int0);
      
      int int1 = StringUtils.compareIgnoreCase("jz=I]TU(~_Y", "jz=I]TU(~_Y", true);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.upperCase((String) null);
      assertNull(string4);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("0-0--1--182--1--1--1-1", "(-'e?])*A =Kqx", (-81));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1422.0F;
      floatArray0[1] = (float) 352;
      String string0 = StringUtils.join(floatArray0, 'z');
      assertEquals("1422.0z352.0z0.0z0.0z0.0", string0);
      assertArrayEquals(new float[] {1422.0F, 352.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals(5, floatArray0.length);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertFalse(stack0.contains(string0));
      assertNotNull(stack0);
      
      // Undeclared exception!
      stack0.setSize(2147483645);
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      String string0 = StringUtils.difference("Minimum abbreviation width with offset is %d", (String) null);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is %d");
      assertTrue(boolean0);
      
      try { 
        StringUtils.getBytes("1.071.0", "Minimum abbreviation width with offset is %d");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      String string0 = StringUtils.remove("TLzo]9%", "TLzo]9%");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "TLzo]9%");
      assertNull(stringArray0);
      
      String string1 = StringUtils.replace("TLzo]9%", "Array element ", "", 57);
      assertEquals("TLzo]9%", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "TLzo]9%", 57);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isEmpty("Array element ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.split("TLzo]9%", "Minimum abbreviation width is %d");
      assertNotNull(stringArray1);
      assertEquals(2, stringArray1.length);
      
      String[] stringArray2 = StringUtils.substringsBetween("}Uc3mD==DOM2Q`FQ ", "", "Minimum abbreviation width is %d");
      assertNull(stringArray2);
      
      boolean boolean2 = StringUtils.containsIgnoreCase(", Length: 0", "TLzo]9%");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string2 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("-");
      assertEquals("-", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("-", "-", 2735);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultIfEmpty("YJmJ};'~", "-");
      assertEquals("YJmJ};'~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("YJmJ};'~", "-");
      assertEquals("YJmJ};'~", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("YJmJ};'~", "YJmJ};'~", "YJmJ};'~");
      assertEquals("YJmJ};'~", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "YJmJ};'~", (CharSequence) "-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("X97P!zkAW-[(TCDft", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Cannot store ", (CharSequence) "Cannot store ");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string0 = StringUtils.reverseDelimited("", '-');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("", "eA");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.defaultString("", "X97P!zkAW-[(TCDft");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("\n");
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("\n");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, 'v');
      assertEquals("", string0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string0);
      assertEquals(0, floatArray0.length);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(string0));
      assertNotNull(stack0);
      
      stack0.setSize(26);
      assertFalse(stack0.isEmpty());
      assertEquals(26, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(26, stack0.capacity());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", stack0.toString());
      assertFalse(stack0.contains(string0));
      
      Stream<String> stream0 = stack0.stream();
      assertFalse(stack0.isEmpty());
      assertEquals(26, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(26, stack0.capacity());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", stack0.toString());
      assertFalse(stack0.contains(string0));
      assertNotNull(stream0);
      
      String string1 = StringUtils.join((Iterable<?>) stack0, "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(stack0.isEmpty());
      assertEquals(26, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(26, stack0.capacity());
      assertEquals("[null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]", stack0.toString());
      assertFalse(stack0.contains(""));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      String string0 = StringUtils.stripEnd("P:=918Foq<~$]D\"G|]]", "P:=918Foq<~$]D\"G|]]");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      String string0 = StringUtils.wrap("The String must not be empty", 'h');
      assertEquals("hThe String must not be emptyh", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "hThe String must not be emptyh", (CharSequence) "hThe String must not be emptyh");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "The String must not be empty";
      charSequenceArray0[1] = (CharSequence) "hThe String must not be emptyh";
      charSequenceArray0[2] = (CharSequence) "hThe String must not be emptyh";
      boolean boolean1 = StringUtils.equalsAny("hThe String must not be emptyh", charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      int int0 = 1;
      String string1 = StringUtils.replace("The String must not be empty", "hThe String must not be emptyh", "hThe String must not be emptyh", 1);
      assertEquals("The String must not be empty", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("A.}N!u&~Cq9 )`pPb1Y", (-1231), 'h');
      assertEquals("A.}N!u&~Cq9 )`pPb1Y", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.startsWith(charSequenceArray0[0], charSequenceArray0[0]);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) 1;
      String string3 = StringUtils.join(floatArray0, '7');
      assertEquals("1.071.0", string3);
      assertArrayEquals(new float[] {1.0F, 1.0F}, floatArray0, 0.01F);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(2, floatArray0.length);
      
      String string4 = StringUtils.trim("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.upperCase("The String must not be empty");
      assertEquals("THE STRING MUST NOT BE EMPTY", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOf((CharSequence) "hThe String must not be emptyh", (CharSequence) "1.071.0", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean3 = StringUtils.containsIgnoreCase("p{InCombiningDiacriticalMarks}+", charSequenceArray0[2]);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean4 = StringUtils.isAsciiPrintable("The String must not be empty");
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("The String must not be empty", "1.071.0", 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      String string0 = StringUtils.substringAfter("=l9p", "org.apache.commons.lang3.Charsets");
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)6;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '4', (-502), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -502
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      String string0 = StringUtils.replaceChars("2uE4&p{n\"E4&p{n\"&r", "t~3%xd3j]MnsXl$", "b");
      assertEquals("2uE4&p{\"E4&p{\"&r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "2uE4&p{\"E4&p{\"&r", (-1066), (-3411));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("2uE4&p{n\"E4&p{n\"&r");
      assertNotNull(stringArray0);
      assertEquals(17, stringArray0.length);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("2uE4&p{n\"E4&p{n\"&r", "b", stringArray0);
      assertEquals("2uE4&p{n\"E4&p{n\"&r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(17, stringArray0.length);
      
      String string2 = StringUtils.lowerCase("2uE4&p{n\"E4&p{n\"&r");
      assertEquals("2ue4&p{n\"e4&p{n\"&r", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsWhitespace("b");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("0480480", "0480480", "0480480");
      assertEquals("0480480", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("0480480");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("0480480");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.uncapitalize("0480480");
      assertEquals("0480480", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("0480480", 89);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      String string0 = StringUtils.unwrap("\",", "\",");
      assertEquals("\",", string0);
      assertNotNull(string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "\",", (CharSequence) "\",");
      assertEquals("\",", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      boolean boolean0 = StringUtils.startsWith("\",", "\",");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\",", (CharSequence) "\",");
      assertEquals(0, int0);
      
      String string1 = StringUtils.remove("\n", "'lAi");
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("\",", (String) null, (-2389), 1);
      assertEquals(",", string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.getDigits("'lAi");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      String string0 = StringUtils.replaceChars(";{'4fH0`W#8LG,", ')', '3');
      assertEquals(";{'4fH0`W#8LG,", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) ";{'4fH0`W#8LG,";
      charSequenceArray0[1] = (CharSequence) ";{'4fH0`W#8LG,";
      charSequenceArray0[2] = (CharSequence) ";{'4fH0`W#8LG,";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.substringAfterLast("org.apache.commons.lang3.StringUtils", 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("org.apache.commons.lang3.StringUtils");
      assertEquals("org.apache.commons.lang3.StringUtils", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split((String) null, "");
      assertNull(stringArray0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("M,|?{_k_sY", "Cannot store ", 47);
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string3 = StringUtils.substringBefore("org.apache.commons.lang3.StringUtils", 1454);
      assertEquals("org.apache.commons.lang3.StringUtils", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.splitByCharacterTypeCamelCase("org.apache.commons.lang3.StringUtils");
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(11, stringArray2.length);
      
      String string4 = StringUtils.wrapIfMissing("Object varargs must not be null", 'l');
      assertEquals("lObject varargs must not be null", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) ";{'4fH0`W#8LG,", 2147483645);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\n", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.remove("\n", "\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("\n", "\n", (-1), (-1));
      assertEquals("\n\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits("\n\n");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.substringBetween("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.trimToNull(", Length: ");
      assertEquals(", Length:", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) ", Length:";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertNotNull(linkedList0);
      
      String string2 = StringUtils.join((List<?>) linkedList0, ", Length: ", 6, 6);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(""));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      Iterator<String> iterator0 = serviceLoader0.iterator();
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, ';');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = null;
      charSequenceArray0[6] = null;
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.remove((String) null, 'S');
      assertNull(string0);
      
      String string1 = StringUtils.wrap((String) null, (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast("hThe String must not be emptyh", 160);
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.join((Iterator<?>) null, "hThe String must not be emptyh");
      assertNull(string3);
      
      boolean boolean2 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = StringUtils.join((double[]) null, 'd');
      assertNull(string4);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, false);
      assertEquals(0, int0);
      
      String string5 = StringUtils.center("XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoCannot store ", 1863, 'd');
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.capitalize((String) null);
      assertNull(string6);
      
      boolean boolean3 = StringUtils.isMixedCase("hThe String must not be emptyh");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoCannot store ";
      stringArray0[6] = null;
      String string7 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals("XRr31{q!1K\"25L)'-]uF{du*jy/IBV?zwoCannot store ", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      String string0 = StringUtils.capitalize("p{InCombiningDiacriticalMarks}+");
      assertEquals("P{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("I", 1172);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAllLowerCase("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.substring("LQc!", 0);
      assertEquals("LQc!", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars(string2, (String) null, "3R:Minimum abbreviation width with offset is %d");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\"qf:M?+";
      char[] charArray0 = new char[4];
      charArray0[0] = ']';
      charArray0[1] = ']';
      charArray0[2] = ']';
      charArray0[3] = ']';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals("]]]]", string0);
      assertArrayEquals(new char[] {']', ']', ']', ']'}, charArray0);
      assertNotNull(string0);
      assertEquals(4, charArray0.length);
      
      String string1 = StringUtils.join(objectArray0);
      assertEquals("\"qf:M?+", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(8, objectArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      byte[] byteArray0 = new byte[7];
      byteArray0[2] = (byte) (-32);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)101;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-75);
      String string2 = StringUtils.join(byteArray0, '^', 2856, (int) (byte)0);
      assertEquals("", string2);
      assertArrayEquals(new byte[] {(byte)0, (byte)47, (byte)101, (byte)98, (byte)13, (byte)66, (byte) (-75)}, byteArray0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(7, byteArray0.length);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "\"qf:M?+";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("\"qf:M?+", charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      assertEquals(2, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase(charSequenceArray0[0], charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      String string0 = StringUtils.repeat("PI", 3941);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) string0, 3941, 3941);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      String string1 = StringUtils.join(booleanArray0, 'M');
      assertEquals("falseMfalseMtrue", string1);
      assertTrue(Arrays.equals(new boolean[] {false, false, true}, booleanArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Iterator<Locale.FilteringMode> iterator0 = linkedList0.descendingIterator();
      assertEquals(0, linkedList0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "NlcnIe3");
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      String string0 = StringUtils.replaceChars("tor", "tor", "/*|\"f'%:_H2'");
      assertEquals("/*|", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      String string0 = StringUtils.rightPad("f", 0, "f");
      assertEquals("f", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay((String) null, "", (-1732), 32);
      assertNull(string1);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Stack<CharBuffer> stack1 = new Stack<CharBuffer>();
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertNotNull(stack1);
      
      Iterator<CharBuffer> iterator0 = stack1.iterator();
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, (String) null);
      assertEquals("", string2);
      assertNotSame(stack1, stack0);
      assertTrue(stack1.equals((Object)stack0));
      assertFalse(string2.equals((Object)string0));
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceChars("", "BB'BmBFBfBLBGBz", "ud6^.# 0#8/_q=$`");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToNull("!yx");
      assertEquals("!yx", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars(",z b7D@JH!>)MD3m^dd", ",N$hUd`+#!74?)", "Object varargs must not be null");
      assertEquals("Oz baD@JHr>sMD3m^tt", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isNotBlank("f");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)81;
      String string6 = StringUtils.join(byteArray0, 'Z', 3041, (-1732));
      assertEquals("", string6);
      assertArrayEquals(new byte[] {(byte)0, (byte)81}, byteArray0);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      assertEquals(2, byteArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      String string0 = StringUtils.join(booleanArray0, 'C', 0, (-1415));
      assertEquals("", string0);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(string0);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      String string0 = StringUtils.join(byteArray0, '(');
      assertEquals("-70", string0);
      assertArrayEquals(new byte[] {(byte) (-70)}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteArray0.length);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'X', (-849), 3107);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -849
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      String string0 = StringUtils.replaceChars("2uE4&p{n\"&r", "t~3%xd3j]MnsXl$", "b");
      assertEquals("2uE4&p{\"&r", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "2uE4&p{\"&r", (-1066), (-3411));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("2uE4&p{n\"&r");
      assertNotNull(stringArray0);
      assertEquals(10, stringArray0.length);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      String string1 = StringUtils.join(booleanArray0, '2');
      assertEquals("true2false2false2true2false2false", string1);
      assertTrue(Arrays.equals(new boolean[] {true, false, false, true, false, false}, booleanArray0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, booleanArray0.length);
      
      String string2 = StringUtils.replaceOnce("b", (String) null, "2uE4&p{n\"&r");
      assertEquals("b", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = " ";
      String string4 = StringUtils.overlay("b", " ", (-3514), 32);
      assertEquals(" ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Iterator<CharBuffer> iterator0 = stack0.iterator();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(iterator0);
      
      String string5 = StringUtils.join(iterator0, "b");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceChars("true2false2false2true2false2false", "2uE4&p{\"&r", " ");
      assertEquals("te false false te false false", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.trimToNull("");
      assertNull(string7);
      
      String string8 = StringUtils.replaceChars(" ", "", " ");
      assertEquals(" ", string8);
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertNotNull(string8);
      
      boolean boolean0 = StringUtils.isNotBlank(" ");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "2uE4&p{n\"&r";
      charSequenceArray0[2] = (CharSequence) "2uE4&p{n\"&r";
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'Z', (-1402), 3061);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1402
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      String string0 = StringUtils.substringBefore("$Nr", 1766);
      assertEquals("$Nr", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("$Nr");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.center("$Nr", 20, (String) null);
      assertEquals("        $Nr         ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      String string0 = StringUtils.overlay("3F Sr", "3F Sr", 2715, 2715);
      assertEquals("3F Sr3F Sr", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("~:{'HC_CD");
      assertEquals("~:{'hc_cd", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("o$$&Og-vA(~:f");
      assertEquals("o$$&Og-vA(~:f", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("o$$&Og-vA(~:f");
      assertEquals("o$$&og-va(~:f", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("o$$&Og-vA(~:f");
      assertFalse(boolean0);
      
      String string2 = StringUtils.toRootUpperCase("o$$&og-va(~:f");
      assertEquals("O$$&OG-VA(~:F", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "o$$&og-va(~:f", (CharSequence) "Threshold must not be negative", 3332);
      assertEquals(27, int0);
      
      boolean[] booleanArray0 = new boolean[0];
      String string3 = StringUtils.join(booleanArray0, 'P');
      assertEquals("", string3);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(0, booleanArray0.length);
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("}%`-4d-/^u", (String) null, 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      String string0 = StringUtils.rightPad(", Length: 0", 0, 'k');
      assertEquals(", Length: 0", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ", Length: 0", (CharSequence) ", Length: 0", 0);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isEmpty(", Length: 0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      String string0 = StringUtils.rightPad("z]0@Nln^;", 0);
      assertEquals("z]0@Nln^;", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "z]0@Nln^;";
      charSequenceArray0[1] = (CharSequence) "z]0@Nln^;";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "z]0@Nln^;";
      String string1 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(5, charSequenceArray0.length);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "z]0@Nln^;";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(2, stringArray0.length);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      char char0 = 'o';
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      int int0 = 0;
      // Undeclared exception!
      try { 
        stack0.removeElementAt(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      String string0 = StringUtils.rightPad("]Z", 58, "]Z");
      assertEquals("]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)1023;
      shortArray0[2] = (short)15;
      String string1 = StringUtils.join(shortArray0, 'G');
      assertEquals("0G1023G15G0G0G0G0", string1);
      assertArrayEquals(new short[] {(short)0, (short)1023, (short)15, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, shortArray0.length);
      
      boolean boolean0 = StringUtils.isWhitespace("[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      String string0 = "f";
      String string1 = StringUtils.trimToEmpty("f");
      assertEquals("f", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)8;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '.', (int) (short)8, 2147483645);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      String string0 = StringUtils.rightPad("]Z", 58, "]Z");
      assertEquals("]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z", string0);
      assertNotNull(string0);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)1023;
      shortArray0[2] = (short)15;
      String string1 = StringUtils.join(shortArray0, 'G');
      assertEquals("0G1023G15G0G0G0G0", string1);
      assertArrayEquals(new short[] {(short)0, (short)1023, (short)15, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, shortArray0.length);
      
      String string2 = StringUtils.mid("]Z", (short)15, 97);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, 'Z');
      assertEquals("", string0);
      assertArrayEquals(new short[] {}, shortArray0);
      assertNotNull(string0);
      assertEquals(0, shortArray0.length);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(4, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "d}";
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.join((Object[]) stringArray0, 'E', 1185, 1185);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains(1185));
      assertNotNull(vector0);
      
      String string1 = StringUtils.join((List<?>) vector0, 'E', 81, (-1949));
      assertEquals("", string1);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.contains('E'));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.defaultString("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissing("Cannot qstore ", "", (CharSequence[]) null);
      assertEquals("Cannot qstore ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("1~2", (String) null, "Cannot qstore ", 2);
      assertEquals("1~2", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.ordinalIndexOf("", "1~2", 2895);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      char[] charArray0 = new char[6];
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[2] = (Object) '\u0000';
      objectArray0[1] = (Object) "9}";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      String string0 = StringUtils.join(objectArray0, "9}", 82, 82);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(5, objectArray0.length);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("\n", "\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "\n", (CharSequence) "\n");
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "\n", 5);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      String string0 = StringUtils.join((boolean[]) null, 's', 0, 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad(">3|OyJQPm_!c+O?8CP", 58, ">3|OyJQPm_!c+O?8CP");
      assertEquals(">3|OyJQPm_!c+O?8CP>3|OyJQPm_!c+O?8CP>3|OyJQPm_!c+O?8CP>3|O", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string2 = StringUtils.prependIfMissing(">3|OyJQPm_!c+O?8CP", (CharSequence) null, charSequenceArray0);
      assertEquals(">3|OyJQPm_!c+O?8CP", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, charSequenceArray0.length);
      
      String string3 = StringUtils.reverseDelimited("", 'G');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToNull("Z]B");
      assertEquals("Z]B", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("Z]B", "", charSequenceArray0);
      assertEquals("Z]B", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(0, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Z]B", (CharSequence) ">3|OyJQPm_!c+O?8CP", 0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-3);
      byteArray0[1] = (byte)0;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      String string6 = StringUtils.toEncodedString(byteArray0, charset0);
      assertEquals("\uFFFD\u0000", string6);
      assertArrayEquals(new byte[] {(byte) (-3), (byte)0}, byteArray0);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertNotNull(string6);
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("", "", 58);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.reverseDelimited("", 'G');
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("Z]B");
      assertEquals("Z]B", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("Z]B", "", charSequenceArray0);
      assertEquals("Z]B", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(0, charSequenceArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "Z]B", (CharSequence) "Z]B");
      assertEquals(1, int0);
      
      String string4 = StringUtils.trimToEmpty("z??");
      assertEquals("z??", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(0, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      String string0 = StringUtils.removePattern("s9_2KBZ~Vfa?bbRl", "org.apache.commons.lang3.StringUtils");
      assertEquals("s9_2KBZ~Vfa?bbRl", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.join(stringArray0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "s9_2KBZ~Vfa?bbRl", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'V', (-1), 97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      String string0 = StringUtils.replaceChars("2uE4&p{n\"E4&p{n\"&r", "2uE4&p{n\"E4&p{n\"&r", "b");
      assertEquals("b", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "b", (-1066), (-3411));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("2uE4&p{n\"E4&p{n\"&r");
      assertNotNull(stringArray0);
      assertEquals(17, stringArray0.length);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("2uE4&p{n\"E4&p{n\"&r", "b", stringArray0);
      assertEquals("2uE4&p{n\"E4&p{n\"&r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(17, stringArray0.length);
      
      String string2 = StringUtils.lowerCase("2uE4&p{n\"E4&p{n\"&r");
      assertEquals("2ue4&p{n\"e4&p{n\"&r", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsWhitespace("b");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      String string0 = StringUtils.rightPad("HSi+|/", 2114);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize(string0);
      assertNotNull(string1);
      
      String string2 = StringUtils.mid(string0, 2114, 2114);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      String string0 = StringUtils.prependIfMissing("Object varargs must not be null", "Object varargs must not be null", charSequenceArray0);
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      assertEquals(3, charSequenceArray0.length);
      
      String string1 = StringUtils.center("fPiFno'{T-M3", 14, '_');
      assertEquals("_fPiFno'{T-M3_", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      String string0 = StringUtils.join((boolean[]) null, 's', 0, 0);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad((String) null, 78, (String) null);
      assertNull(string1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Stack<Locale.FilteringMode> stack0 = new Stack<Locale.FilteringMode>();
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      String string2 = StringUtils.repeat((String) null, 23);
      assertNull(string2);
      
      String string3 = StringUtils.join((List<?>) stack0, 'i', 23, (-3406));
      assertEquals("", string3);
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("kT7", 'A');
      assertEquals("kT7", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'A';
      charArray0[1] = '9';
      charArray0[2] = '/';
      charArray0[3] = 'A';
      int int0 = StringUtils.indexOfAny((CharSequence) "kT7", charArray0);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'A', '9', '/', 'A'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[1] = (short)1033;
      shortArray0[2] = (short)15;
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(0, charSequenceArray0.length);
      
      int int1 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      String string0 = StringUtils.toEncodedString(byteArray0, charset0);
      assertEquals("\u0000", string0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(string0);
      assertEquals(1, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      String string0 = StringUtils.removePattern("s9_2KBZ~Vfa?bbRl", "org.apache.commons.lang3.StringUtils");
      assertEquals("s9_2KBZ~Vfa?bbRl", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[0];
      String string1 = StringUtils.join(byteArray0, 'I');
      assertEquals("", string1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, byteArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.StringUtils", (CharSequence) "org.apache.commons.lang3.StringUtils", 2586);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.split("0480480", 'O');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2462;
      shortArray0[1] = (short)160;
      String string0 = StringUtils.getDigits("R^}RmJ7|?;@7[x5|");
      assertEquals("775", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      String string0 = StringUtils.substringBetween("-", "-");
      assertNull(string0);
      
      String string1 = StringUtils.replaceOnce((String) null, "-", (String) null);
      assertNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("', has a length less than 2");
      assertEquals("', has a length less than 2", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("', has a length less than 2");
      assertFalse(boolean0);
      
      String string3 = StringUtils.getDigits((String) null);
      assertNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "', has a length less than 2", 3332);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      String string0 = StringUtils.trimToEmpty("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("", "", false);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(", Length: ", "}Uc3mD==DOM2Q`FQ ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("}Uc3mD==DOM2Q`FQ ", ", Length: 0", ", Length: ");
      assertNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsIgnoreCase(", Length: 0", ", Length: ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.trimToEmpty(", Length: 0");
      assertEquals(", Length: 0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getDigits("}Uc3mD==DOM2Q`FQ ");
      assertEquals("32", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("", "", stringArray0[0]);
      assertNull(stringArray1);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      try { 
        StringUtils.getBytes("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      String string0 = StringUtils.difference("u ,u9V", "u ,u9V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      try { 
        StringUtils.getBytes("1.071.0", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("-");
      assertEquals("-", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultIfEmpty("YJmJ};'~", "-");
      assertEquals("YJmJ};'~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.EMPTY;
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", (String) null, "offset cannot be negative");
      assertNull(string0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)27;
      byteArray0[3] = (byte)32;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-33), (byte)27, (byte)32}, byteArray0);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals(4, byteBuffer0.limit());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=4 cap=4]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(4, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertNotNull(byteBuffer0);
      assertEquals(4, byteArray0.length);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-33), (byte)27, (byte)32}, byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(4, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=4 cap=4]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals(4, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\uFFFD\u001B ", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      assertEquals(4, byteArray0.length);
      
      CharBuffer charBuffer1 = StringUtils.defaultIfEmpty(charBuffer0, charBuffer0);
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-33), (byte)27, (byte)32}, byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(4, byteBuffer0.position());
      assertEquals("java.nio.HeapByteBuffer[pos=4 lim=4 cap=4]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(4, byteBuffer0.capacity());
      assertEquals(4, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\uFFFD\u001B ", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(4, charBuffer1.capacity());
      assertEquals("\u0000\uFFFD\u001B ", charBuffer1.toString());
      assertEquals(4, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(4, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertEquals(4, charBuffer1.remaining());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertNotNull(charBuffer1);
      assertEquals(4, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "BB'BmBFBfBLBGBz";
      stringArray0[1] = "BB'BmBFBfBLBGBz";
      stringArray0[4] = "l 'H;VR";
      stringArray0[3] = "l 'H;VR";
      stringArray0[4] = "BB'BmBFBfBLBGBz";
      stringArray0[5] = "BB'BmBFBfBLBGBz";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      int int0 = StringUtils.compare("Local", "Local", false);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.substringsBetween(";+On:8E>sXhMU\"", "U&:HI+VH}Ib[Ai-!=+", ";;@$o0:");
      assertNull(stringArray0);
      
      String string0 = StringUtils.stripToEmpty("'(B/4");
      assertEquals("'(B/4", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOf((CharSequence) "'(B/4", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = locale0.getDisplayCountry();
      assertEquals("Italy", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(string1);
      
      String string2 = locale0.toLanguageTag();
      assertEquals("it-IT", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(string2);
      
      int int2 = StringUtils.getFuzzyDistance(";+On:8E>sXhMU\"", "'(B/4", locale0);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "UU8M!<\"9n/!C[)TCya";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "#|f-G2?O2%Kz8K)$";
      stringArray0[7] = "]/[HQ#FB>c";
      String string0 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(8, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "#|f-G2?O2%Kz8K)$");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertFalse(boolean0);
      assertEquals(8, stringArray0.length);
      
      boolean boolean1 = StringUtils.endsWith("", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "\n", (CharSequence) null);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      charSequenceArray0[4] = null;
      charSequenceArray0[5] = null;
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string0 = StringUtils.unwrap("\n", 'c');
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("\n", charSequenceArray0[1], charSequenceArray0);
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, charSequenceArray0.length);
      
      String string2 = StringUtils.substringBetween("I ", "\n", "dyAH6(`<");
      assertNull(string2);
      
      int int1 = StringUtils.countMatches((CharSequence) "dyAH6(`<", (CharSequence) null);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.substring("qYY|", (-1), 5);
      assertEquals("|", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(6, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("\n", (String) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string4 = StringUtils.defaultString("mY@7X(]_np");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "I ", 4);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string5 = StringUtils.center("\n", (-3064), "~0a7RW-&e,:;");
      assertEquals("\n", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("[ 7@L", 108);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNotEmpty("");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("_", "T");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.reverse("F=ui^a)1lf:y^4|");
      assertEquals("|4^y:fl1)a^iu=F", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String string2 = StringUtils.center("F=ui^a)1lf:y^4|", 12, 'F');
      assertEquals("F=ui^a)1lf:y^4|", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence charSequence0 = StringUtils.firstNonBlank((CharSequence[]) stringArray0);
      assertEquals("_", charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      assertEquals(1, stringArray0.length);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "_", (CharSequence) "");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      String string0 = StringUtils.remove("\n", "\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trim("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join((long[]) null, 'a');
      assertNull(string2);
      
      int int0 = StringUtils.compare("\n", "}%`-4d-/^u", false);
      assertEquals((-115), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("]", "zj=e", "_X%ARM$.aS#I~");
      assertNull(stringArray0);
      
      String string3 = StringUtils.stripToEmpty("v$5+2Gb?JkZgXx ");
      assertEquals("v$5+2Gb?JkZgXx", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "", (-865));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("v$5+2Gb?JkZgXx", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      String string0 = StringUtils.stripEnd("wia", "wia");
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 3L;
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "wia";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("", "Tcw");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "@<G", (-4816), (-4816));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.stripToNull("");
      assertNull(string2);
      
      String string3 = StringUtils.leftPad("", (-4816));
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(", Length: ", "}Uc3mD==DOM2Q`FQ ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ", Length: ", (CharSequence) "}Uc3mD==DOM2Q`FQ ");
      assertEquals(16, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "}Uc3mD==DOM2Q`FQ ", (CharSequence) ", Length: ");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      String string0 = StringUtils.substringBefore("The String must not be empty", "The String must not be empty");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertNull(string0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.substringBefore("*#", (String) null);
      assertEquals("*#", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "*#", "XRr31{q!1K\"25L)'");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(string1));
      assertNotNull(set0);
      
      String string2 = Locale.lookupTag(linkedList0, set0);
      assertEquals(0, linkedList0.size());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(string1));
      assertNull(string2);
      
      int int0 = StringUtils.getFuzzyDistance("*#", "*#", locale0);
      assertEquals(4, int0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertNull(string3);
      assertEquals(1, stringArray0.length);
      
      String string4 = StringUtils.defaultString("0O7xYyi", "XRr31{q!1K\"25L)'");
      assertEquals("0O7xYyi", string4);
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 4);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.replace((String) null, "fjVA`zjKvw3f", "$^~J>$PMjQD>6ZZ#z)");
      assertNull(string5);
      
      String string6 = StringUtils.substringBeforeLast((String) null, "0O7xYyi");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      String string0 = StringUtils.stripEnd("wia", "$+%}AA,c+-;ij?1|p");
      assertEquals("wia", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 3L;
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "$+%}AA,c+-;ij?1|p";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String[] stringArray0 = StringUtils.split("=\"&XGZ8YHdr[ID<!", "Tcw");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.leftPad(";8i1$#J1QX$", 2263, 'M');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'M';
      charArray0[3] = 'R';
      boolean boolean1 = StringUtils.containsNone((CharSequence) string1, charArray0);
      assertFalse(boolean1);
      assertArrayEquals(new char[] {'M', 'M', 'M', 'R'}, charArray0);
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      String string0 = StringUtils.stripStart("$+%}~ AA,cS-;ij?1|p", "w5K");
      assertEquals("$+%}~ AA,cS-;ij?1|p", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("=\"&XGZ8YHdr[INDqklSh~", "w5K");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "$+%}~ AA,cS-;ij?1|p", (CharSequence[]) stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      double double0 = StringUtils.getJaroWinklerDistance("\\u", "=\"&XGZ8YHdr[INDqklSh~");
      assertEquals(0.0, double0, 0.01);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[0];
      CharBuffer charBuffer0 = StringUtils.firstNonBlank(charBufferArray0);
      assertNull(charBuffer0);
      assertEquals(0, charBufferArray0.length);
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[3] = stringArray0[2];
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "W;sZg");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      boolean boolean0 = StringUtils.equalsAny("W;sZg", stringArray1);
      assertFalse(boolean0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      
      String string0 = StringUtils.upperCase(stringArray0[0]);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNull(string0);
      assertEquals(5, stringArray0.length);
      
      boolean boolean1 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertFalse(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(5, stringArray0.length);
      
      String string1 = StringUtils.stripAccents(", '");
      assertEquals(", '", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = 'S';
      charArray0[2] = '#';
      charArray0[3] = '7';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "wsy.0`pmz4cI=zX", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'X', 'S', '#', '7'}, charArray0);
      assertEquals(4, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)15;
      shortArray0[1] = (short)15;
      String string0 = StringUtils.join(shortArray0, 'W', (int) (short)15, 0);
      assertEquals("", string0);
      assertArrayEquals(new short[] {(short)15, (short)15}, shortArray0);
      assertNotNull(string0);
      assertEquals(2, shortArray0.length);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("', has a length less than 2", "", locale0);
      assertEquals(0, int0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("", (String) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "p{InCombiningDiacriticalMarks}+", (-1));
      assertNull(stringArray1);
      
      String string2 = StringUtils.reverseDelimited((String) null, 'r');
      assertNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.toRootLowerCase("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) " ", (CharSequence) "");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 's';
      charArray0[1] = 'b';
      charArray0[2] = 'v';
      charArray0[3] = 'W';
      charArray0[4] = '&';
      charArray0[5] = 's';
      charArray0[6] = '&';
      charArray0[7] = 'l';
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'s', 'b', 'v', 'W', '&', 's', '&', 'l'}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charArray0.length);
      
      String string4 = StringUtils.deleteWhitespace("");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      String[] stringArray0 = StringUtils.split(", Length: ", "}Uc3mD==DOM2Q`FQ ");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.substringBefore("/SMU'<m;", "*#");
      assertEquals("/SMU'<m;", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "/SMU'<m;", ", Length: ");
      assertTrue(boolean0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(set0.contains("/SMU'<m;"));
      assertNotNull(set0);
      
      String string1 = Locale.lookupTag(linkedList0, set0);
      assertEquals(0, linkedList0.size());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(set0.contains("/SMU'<m;"));
      assertNull(string1);
      
      int int0 = StringUtils.getFuzzyDistance("/SMU'<m;", "*#", locale0);
      assertEquals(0, int0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(",", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(2, stringArray0.length);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 's';
      charArray0[1] = '@';
      charArray0[2] = 'N';
      charArray0[3] = '#';
      charArray0[4] = '&';
      charArray0[5] = 'l';
      charArray0[6] = '}';
      charArray0[7] = 'b';
      charArray0[8] = 'v';
      boolean boolean1 = StringUtils.containsNone((CharSequence) ",", charArray0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'s', '@', 'N', '#', '&', 'l', '}', 'b', 'v'}, charArray0);
      assertTrue(boolean1 == boolean0);
      assertEquals(9, charArray0.length);
      
      String string3 = StringUtils.deleteWhitespace((String) null);
      assertNull(string3);
      
      boolean boolean2 = StringUtils.isNoneEmpty(stringArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("Array element ", "Array element ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "Array element ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      String string0 = StringUtils.left("Locale must not be null", 5);
      assertEquals("Local", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Local");
      assertFalse(boolean0);
      
      String string1 = StringUtils.left("8v9s", 5);
      assertEquals("8v9s", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("0480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC20480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC2", "Local");
      assertEquals("0480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC20480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC2", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "0480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC20480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC2", 't');
      assertEquals(6, int0);
      
      String string3 = StringUtils.stripEnd("Local", "8v9s");
      assertEquals("Local", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Local", "Locale must not be null");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isMixedCase("0480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC20480480C0K167K167K32K3K2289K00K167K167K32K3K2289K0CgGEN=CThreshold must not be negativeC2");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(int0));
      assertNotNull(arrayList0);
      
      Iterator<Integer> iterator0 = arrayList0.iterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(int0));
      assertNotNull(iterator0);
      
      String string4 = StringUtils.join(iterator0, 't');
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(int0));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBeforeLast("{}", (String) null);
      assertEquals("{}", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      String string0 = StringUtils.rightPad("f", 0, "f");
      assertEquals("f", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "f", (CharSequence) "f");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("}%`-4d-/^u", (String) null, 0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      String string0 = StringUtils.replace("x;yrd", "", "x;yrd");
      assertEquals("x;yrd", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "x;yrd", (CharSequence) "x;yrd", (-2777));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "The String must not be empty";
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("a#4`gF|4s3S5+d>\"l0", "a#4`gF|4s3S5+d>\"l0", (int) (short)0);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.compareIgnoreCase("Index: ", "a#4`gF|4s3S5+d>\"l0");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("", (String) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      String string2 = StringUtils.substringBefore((String) null, (-3487));
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = null;
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String string2 = StringUtils.reverseDelimited((String) null, ' ');
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", (String) null);
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[3] = (float) 0;
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-1);
      floatArray0[5] = (float) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '%', (-3162), (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3162
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null);
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.endsWithAny((CharSequence) null, (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.strip((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("d}", "d}");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("l 'H;Vg!#S0+", (String) null);
      assertEquals("l 'H;Vg!#S0+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast((String) null, 0);
      assertNull(string1);
      
      String string2 = StringUtils.trimToEmpty("l 'H;Vg!#S0+");
      assertEquals("l 'H;Vg!#S0+", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("fQA7", "fQA7");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("comparator", "", 0);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string3 = StringUtils.substringBefore("l 'H;Vg!#S0+", 654);
      assertEquals("l 'H;Vg!#S0+", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.trimToEmpty("l 'H;Vg!#S0+");
      assertEquals("l 'H;Vg!#S0+", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", 98);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("Cannot store< ");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "?0wuO/^'~";
      charSequenceArray0[3] = (CharSequence) "?0wuO/^'~";
      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width is %d";
      boolean boolean1 = StringUtils.endsWithAny("Cannot store< ", charSequenceArray0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string0 = StringUtils.replacePattern("Cannot store< ", "Cannot store< ", "]EpMbwQ");
      assertEquals("]EpMbwQ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("?0wuO/^'~", "\"}(\u0003Op+surX2");
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      String string0 = StringUtils.remove("|Bo`~:$pr^'ZkWRyXw", '0');
      assertEquals("|Bo`~:$pr^'ZkWRyXw", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("|Bo`~:$pr^'ZkWRyXw");
      assertEquals("|Bo`~:$pr^'ZkWRyXw", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("tM!^", "|Bo`~:$pr^'ZkWRyXw", "11IR[");
      assertEquals("tM!^", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains('0'));
      assertNotNull(set0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string0));
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add("1(kxe8_QhhgBO66");
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(linkedHashSet0.contains("1(kxe8_QhhgBO66"));
      assertFalse(linkedHashSet0.contains(string0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedHashSet0, locale_FilteringMode0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(linkedHashSet0.contains("1(kxe8_QhhgBO66"));
      assertFalse(linkedHashSet0.contains(string0));
      assertFalse(list0.contains(string0));
      assertNotNull(list0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfAny("1(kxe8_QhhgBO66", stringArray0);
      assertEquals(12, int0);
      assertEquals(250, stringArray0.length);
      
      String string3 = StringUtils.join((double[]) null, 'r', 711, 547);
      assertNull(string3);
      
      String string4 = StringUtils.swapCase("|Bo`~:$pr^'ZkWRyXw");
      assertEquals("|bO`~:$PR^'zKwrYxW", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("zaX:kO<b;(@uA", "zaX:kO<b;(@uA");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (double) 0;
      String string1 = StringUtils.join(doubleArray0, '~', 0, 0);
      assertEquals("", string1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(string1);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 'y';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'y', 32, 58);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string0 = StringUtils.center("$ ", (-1390), "$ ");
      assertEquals("$ ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 58, "");
      assertEquals("                                                          ", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.reverseDelimited("2Ryq", 'G');
      assertEquals("2Ryq", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("Z]B");
      assertEquals("Z]B", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("Z]B", "2Ryq", charSequenceArray0);
      assertEquals("Z]B2Ryq", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(0, charSequenceArray0.length);
      
      String string4 = StringUtils.rotate("2Ryq", Integer.MAX_VALUE);
      assertEquals("Ryq2", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.replace("2Ryq", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals("2Ryq", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("gC>jlLMJ", "gC>jlLMJ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("?*$tFL}e9O#!M%", 13);
      assertEquals("$tFL}e9O#!M%", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("$tFL}e9O#!M%", "CQ:", true);
      assertEquals((-31), int0);
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissing("@y1>y", "\r", charSequenceArray0);
      assertEquals("@y1>y\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(5, charSequenceArray0.length);
      
      int int0 = StringUtils.compare(" ", "@y1>y\r", false);
      assertEquals((-32), int0);
  }

  @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "The String must not be empty";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      short[] shortArray0 = new short[19];
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)0;
      String string0 = StringUtils.join(shortArray0, '!', (-145), (-2034458190));
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(19, shortArray0.length);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("a#4`gF|4s3S5+d>\"l0", (String) null, (int) (short)0);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.upperCase("a#4`gF|4s3S5+d>\"l0");
      assertEquals("A#4`GF|4S3S5+D>\"L0", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("The String must not be empty", "CGgBjN#am*", "CGgBjN#am*");
      assertEquals("The String must not be empty", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("0F1u", '0');
      assertEquals("0F1u", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[13];
      charSequenceArray0[0] = (CharSequence) "a& }#6P\"O-t!5S:4mg";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(13, charSequenceArray0.length);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(13, charSequenceArray0.length);
      
      String string0 = StringUtils.wrapIfMissing("", "~t3)4MW}Q+;ew.d(<O");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeEndIgnoreCase("Cannot store ", "Cannot store ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.unwrap("6?(F!S,VY^$o<Ixdo", 'o');
      assertEquals("6?(F!S,VY^$o<Ixdo", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("", "6?(F!S,VY^$o<Ixdo", charSequenceArray0);
      assertEquals("6?(F!S,VY^$o<Ixdo", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(0, charSequenceArray0.length);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 'o';
      doubleArray0[1] = (double) 'o';
      String string3 = StringUtils.join(doubleArray0, '%', 0, (-3285));
      assertEquals("", string3);
      assertArrayEquals(new double[] {111.0, 111.0}, doubleArray0, 0.01);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(2, doubleArray0.length);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '%';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      String string4 = StringUtils.valueOf(charArray0);
      assertEquals("%%%%", string4);
      assertArrayEquals(new char[] {'%', '%', '%', '%'}, charArray0);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(4, charArray0.length);
      
      int int0 = StringUtils.ordinalIndexOf("%%%%", "", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("X97P!zkAW-[(TCDft", "X97P!zkAW-[(TCDft");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertTrue(boolean0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.split("1(kxe8_QhhgBO66", "N[");
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray1.length);
      
      String string0 = StringUtils.removeEndIgnoreCase("1(kxe8_QhhgBO66", "X97P!zkAW-[(TCDft");
      assertEquals("1(kxe8_QhhgBO66", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAllEmpty(stringArray0);
      assertTrue(boolean1);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.unwrap("N[", 'o');
      assertEquals("N[", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("~RQ@x", "N[", stringArray0);
      assertEquals("~RQ@x", string2);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, stringArray0.length);
      
      String string3 = StringUtils.substringBetween("X97P!zkAW-[(TCDft", "", "Minimum abbreviation width is %d");
      assertNull(string3);
      
      String string4 = StringUtils.trimToNull("org.apache.commons.lang3.CharSequenceUtils");
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("X97P!zkAW-[(TCDft"));
      assertNotNull(linkedList0);
      
      String string5 = StringUtils.join((List<?>) linkedList0, "Minimum abbreviation width with offset is %d", 16, 16);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("Minimum abbreviation width with offset is %d"));
      assertNotNull(string5);
      
      Class<String> class0 = String.class;
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = ClassLoader.getSystemClassLoader();
      assertSame(classLoader1, classLoader0);
      assertNotNull(classLoader1);
      
      ClassLoader classLoader2 = classLoader1.getParent();
      assertSame(classLoader1, classLoader0);
      assertFalse(classLoader2.equals((Object)classLoader1));
      assertFalse(classLoader2.equals((Object)classLoader0));
      assertNotNull(classLoader2);
      
      Class<String> class1 = String.class;
      ServiceLoader<String> serviceLoader1 = ServiceLoader.load(class1, classLoader1);
      assertSame(class1, class0);
      assertNotSame(serviceLoader1, serviceLoader0);
      assertSame(classLoader1, classLoader0);
      assertFalse(serviceLoader1.equals((Object)serviceLoader0));
      assertFalse(classLoader1.equals((Object)classLoader2));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader1.toString());
      assertNotNull(serviceLoader1);
      
      Iterator<String> iterator0 = serviceLoader0.iterator();
      assertSame(class0, class1);
      assertNotSame(serviceLoader0, serviceLoader1);
      assertFalse(serviceLoader0.equals((Object)serviceLoader1));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(iterator0);
      
      String string6 = StringUtils.join(iterator0, 'r');
      assertEquals("", string6);
      assertSame(class0, class1);
      assertNotSame(serviceLoader0, serviceLoader1);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(serviceLoader0.equals((Object)serviceLoader1));
      assertEquals("java.util.ServiceLoader[java.lang.String]", serviceLoader0.toString());
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "N[", (CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertEquals(1, stringArray0.length);
      
      String string7 = StringUtils.join((Object[]) stringArray1, 'h', 16, (-3860));
      assertEquals("", string7);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      assertEquals(1, stringArray1.length);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("O", "yQvI");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      assertEquals(1, stringArray2.length);
      
      String string8 = StringUtils.prependIfMissing("/L", "N[", stringArray1);
      assertEquals("N[/L", string8);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      String string0 = StringUtils.repeat("PI", 3941);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) string0, 3941, 3941);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("...", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      String string0 = StringUtils.capitalize("p{InCombiningDiacriticalMarks}+");
      assertEquals("P{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripToNull("");
      assertNull(string1);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)90;
      byteArray0[3] = (byte) (-3);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)76;
      String string2 = StringUtils.join(byteArray0, '_');
      assertEquals("13_4_90_-3_0_76", string2);
      assertArrayEquals(new byte[] {(byte)13, (byte)4, (byte)90, (byte) (-3), (byte)0, (byte)76}, byteArray0);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(6, byteArray0.length);
      
      String string3 = StringUtils.getIfEmpty("", (Supplier<String>) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      String string0 = StringUtils.join((long[]) null, 'a');
      assertNull(string0);
      
      int int0 = StringUtils.compare("\n", "\n", false);
      assertEquals(0, int0);
      
      String string1 = StringUtils.stripToEmpty("v$5+2Gb?JkZgXx ");
      assertEquals("v$5+2Gb?JkZgXx", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (-735));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = StringUtils.split("}%`-4d-/^u", "\n", (-1));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "y");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "", 127);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "y";
      charSequenceArray0[2] = (CharSequence) "y";
      charSequenceArray0[3] = (CharSequence) null;
      String string1 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(4, charSequenceArray0.length);
      
      String string2 = StringUtils.strip((String) null, "E{agSS6t~^TS-m'WK");
      assertNull(string2);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-128);
      byteArray0[1] = (byte)29;
      String string3 = StringUtils.toString(byteArray0, (String) null);
      assertEquals("\uFFFD\u001D", string3);
      assertArrayEquals(new byte[] {(byte) (-128), (byte)29}, byteArray0);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(2, byteArray0.length);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string4 = StringUtils.substringAfterLast("y", "Q>sf ?h?I]['q");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      try { 
        StringUtils.getBytes("', is neither of type Map.Entry nor an Array", "y");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      assertFalse(boolean0);
      
      String string0 = StringUtils.truncate("1(kxe8_QhhgBO66", 14);
      assertEquals("1(kxe8_QhhgBO", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      String string0 = StringUtils.unwrap(",x$xG,|E+(", 'N');
      assertEquals(",x$xG,|E+(", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ClassLoader classLoader1 = classLoader0.getParent();
      assertFalse(classLoader1.equals((Object)classLoader0));
      assertNotNull(classLoader1);
      
      String string1 = StringUtils.stripStart("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2477;
      shortArray0[1] = (short)167;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)32;
      shortArray0[4] = (short)3;
      shortArray0[5] = (short)2289;
      shortArray0[6] = (short)0;
      String string0 = StringUtils.join(shortArray0, 'K');
      assertEquals("2477K167K0K32K3K2289K0", string0);
      assertArrayEquals(new short[] {(short)2477, (short)167, (short)0, (short)32, (short)3, (short)2289, (short)0}, shortArray0);
      assertNotNull(string0);
      assertEquals(7, shortArray0.length);
      
      String string1 = StringUtils.stripEnd("2477K167K0K32K3K2289K0", "P");
      assertEquals("2477K167K0K32K3K2289K0", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("2477K167K0K32K3K2289K0", "2477K167K0K32K3K2289K0");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "P", (CharSequence) "2477K167K0K32K3K2289K0");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.toRootLowerCase(", '");
      assertEquals(", '", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "P", (CharSequence) "P");
      assertTrue(boolean0);
      
      String string4 = StringUtils.removePattern("", "Hg");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "2477K167K0K32K3K2289K0", (int) (short)167);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.replace("CaRSi", "vk4bt[d]<@", "2477K167K0K32K3K2289K0");
      assertEquals("CaRSi", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBeforeLast("VDKqt7nSP&Fz0n", (String) null);
      assertEquals("VDKqt7nSP&Fz0n", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String string7 = StringUtils.substringAfterLast("[ 7@L", (int) (short)32);
      assertEquals("7@L", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.isNotEmpty("7@L");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      String string0 = StringUtils.truncate("=0\"9V+", 3421, 3872);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      String string0 = StringUtils.capitalize("p{InCombiningDiacriticalMarks}+");
      assertEquals("P{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.getIfEmpty("h\">dels!e;1FPbp(w\"", (Supplier<String>) null);
      assertEquals("h\">dels!e;1FPbp(w\"", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("...", "org.apache.commons.lang3.ObjectUtils$Null", "eL,9.v(", 9);
      assertEquals("...", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "...", 3);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.prependIfMissingIgnoreCase("maxWith cannot be negative", "maxWith cannot be negative", (CharSequence[]) null);
      assertEquals("maxWith cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("...");
      assertEquals("...", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("eL,9.v(");
      assertFalse(boolean0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("..."));
      assertNotNull(linkedList0);
      
      Iterator<Object> iterator0 = linkedList0.iterator();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("..."));
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, (String) null);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains("..."));
      assertNotNull(string3);
      
      int int1 = StringUtils.compareIgnoreCase("eL,9.v(", "maxWith cannot be negative", false);
      assertEquals((-8), int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.replaceIgnoreCase(")", "org.apache.commons.lang3.ObjectUtils$Null", "...", 1107);
      assertEquals(")", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.unwrap(")", 'm');
      assertEquals(")", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      String string0 = StringUtils.unwrap("1(kxe8_QhhgBO66", 'd');
      assertEquals("1(kxe8_QhhgBO66", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "1(kxe8_QhhgBO66", (CharSequence) null);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "1(kxe8_QhhgBO66";
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = (CharSequence) "1(kxe8_QhhgBO66";
      charSequenceArray0[3] = null;
      charSequenceArray0[4] = (CharSequence) "1(kxe8_QhhgBO66";
      charSequenceArray0[5] = (CharSequence) "1(kxe8_QhhgBO66";
      charSequenceArray0[6] = (CharSequence) "1(kxe8_QhhgBO66";
      charSequenceArray0[7] = null;
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("OZ(]yRcW(+d8*PZIO", supplier0);
      assertEquals("OZ(]yRcW(+d8*PZIO", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string2 = StringUtils.stripToEmpty("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "1(kxe8_QhhgBO66", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.substringAfter("OZ(]yRcW(+d8*PZIO", (-1));
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEnd("", "org.apache.commons.lang3.CharUtils");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("n0q[muJteLPkI.Qd@~I", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("^*5.[5$sMneP~Uc[g0", "Supplied value must be a valid byte literal between -32768 and 32767: [", "Minimum abbreviation width is %d");
      assertEquals("^*5.[5$sMneP~Uc[g0", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "^*5.[5$sMneP~Uc[g0", (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", (-1096));
      assertEquals((-1), int0);
      
      String string1 = "-GQkf9";
      String string2 = StringUtils.repeat("-GQkf9", 268);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Supplied value must be a valid byte literal between -32768 and 32767: [", "Minimum abbreviation width is %d", (-396));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 33
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      String string0 = StringUtils.remove("\n", "\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("\n");
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ");
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "\"qf:M?+";
      objectArray0[1] = (Object) "\"qf:M?+";
      objectArray0[2] = (Object) "\"qf:M?+";
      objectArray0[3] = (Object) "\"qf:M?+";
      objectArray0[4] = (Object) "\"qf:M?+";
      objectArray0[0] = (Object) "\"qf:M?+";
      objectArray0[6] = (Object) "\"qf:M?+";
      objectArray0[7] = (Object) "\"qf:M?+";
      String[] stringArray0 = StringUtils.split("The String must not be empty", "N[");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.ordinalIndexOf("\"qf:M?+", (CharSequence) null, 322);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      String string0 = StringUtils.remove("\n", "\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      String string0 = StringUtils.rightPad("]Z", 58, "]Z");
      assertEquals("]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z]Z", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)322;
      shortArray0[1] = (short)995;
      shortArray0[2] = (short)15;
      String string1 = StringUtils.join(shortArray0, 'G');
      assertEquals("322G995G15G0G0G0G0", string1);
      assertArrayEquals(new short[] {(short)322, (short)995, (short)15, (short)0, (short)0, (short)0, (short)0}, shortArray0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(7, shortArray0.length);
      
      String string2 = StringUtils.mid("org.apache.commos.lang3.RegExUtils", (short)15, (short)995);
      assertEquals("os.lang3.RegExUtils", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isWhitespace("[");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.EMPTY;
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", charSequenceArray0[0]);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1, charSequenceArray0.length);
      
      String string1 = StringUtils.rotate("org.apache.commons.lang3.LocaleUtils", Integer.MIN_VALUE);
      assertEquals("ang3.LocaleUtilsorg.apache.commons.l", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.split("org.apache.commons.lang3.LocaleUtils", "org.apache.commons.lang3.LocaleUtils");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string3 = StringUtils.mid("", 0, Integer.MIN_VALUE);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBefore("org.apache.commons.lang3.StringUtils", "");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars("org.apache.commons.lang3.StringUtils", "", "");
      assertEquals("org.apache.commons.lang3.StringUtils", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.replace("11IR[", "comparator", "T?S'7");
      assertEquals("11IR[", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("BG >'", 'i', 'f');
      assertEquals("BG >'", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.prependIfMissing(" is not in the range '0' - '9'", "11IR[", charSequenceArray0);
      assertEquals("11IR[ is not in the range '0' - '9'", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(7, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(5, charSequenceArray0.length);
      
      String string1 = StringUtils.stripStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "\n");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>();
      assertNotNull(treeSet0);
      
      Integer integer0 = new Integer(100);
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = treeSet0.add(integer0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(treeSet0.contains(integer0));
      
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>((SortedSet<? extends Integer>) treeSet0);
      assertEquals(1, priorityQueue0.size());
      assertTrue(treeSet0.contains(integer0));
      assertTrue(priorityQueue0.contains(integer0));
      assertNotNull(priorityQueue0);
      
      String string2 = StringUtils.chop("\n");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace("The String must not be empty");
      assertEquals("The String must not be empty", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(5, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("o(~u^0-_7E}U;", "HiQ!");
      assertEquals("o(~u^0-_7E}U;", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((float[]) null, '2');
      assertNull(string1);
      
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("HiQ!"));
      assertNotNull(stack0);
      
      // Undeclared exception!
      try { 
        stack0.setSize((-2147483644));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483644
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringBefore("", (-47));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = "X!KMbu9P";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("X!KMbu9P", (-47));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)2477;
      shortArray0[1] = (short)160;
      shortArray0[2] = (short)0;
      shortArray0[3] = (short)32;
      shortArray0[4] = (short)3;
      shortArray0[5] = (short)2289;
      shortArray0[6] = (short)0;
      String string0 = StringUtils.join(shortArray0, 'K');
      assertEquals("2477K160K0K32K3K2289K0", string0);
      assertArrayEquals(new short[] {(short)2477, (short)160, (short)0, (short)32, (short)3, (short)2289, (short)0}, shortArray0);
      assertNotNull(string0);
      assertEquals(7, shortArray0.length);
      
      String string1 = StringUtils.mid("2477K160K0K32K3K2289K0", 306, (short)32);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      String string0 = StringUtils.lowerCase("3:");
      assertEquals("3:", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "3:", (CharSequence) "M Zq", 720);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceAll("", "M Zq", "3:");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      String[] stringArray0 = new String[1];
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("1(kxe8_QhhgBO66", "_}h#(K|KE^B={k1~gX");
      assertNotNull(stringArray0);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (-735));
      assertEquals((-1), int0);
      
      String string0 = "\n";
      String string1 = StringUtils.substringAfterLast("\n", 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join((float[]) null, 'L');
      assertNull(string2);
      
      String string3 = StringUtils.wrap("\n", 'L');
      assertEquals("L\nL", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.mid("", (-735), (-735));
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.lowerCase("l");
      assertEquals("l", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int1 = StringUtils.lastOrdinalIndexOf("L\nL", "l", (-2113));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.isBlank("\n");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(", Length: ");
      assertNotNull(stringArray0);
      assertEquals(3, stringArray0.length);
      
      String string6 = "Q>sf ?h?I]['q";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("L\nL", "Q>sf ?h?I]['q", (-735));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 14
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test817()  throws Throwable  {
      String string0 = StringUtils.stripEnd("P:=918Foq<~$]D\"G|]]", "P:=918Foq<~$]D\"G|]]");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("P:=918Foq<~$]D\"G|]]");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test818()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 104);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test819()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "LqS;b^>!PbXGyzXrr~", (CharSequence) "LqS;b^>!PbXGyzXrr~", (-445));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test820()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) null, (CharSequence) null);
      assertNull(charSequence0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (-735));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("\n", charSequenceArray0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "\n");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test821()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string0 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(6, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip("^-`a:[Z");
      assertEquals("^-`a:[Z", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test822()  throws Throwable  {
      String string0 = StringUtils.strip(", '");
      assertEquals(", '", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace(", '");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test823()  throws Throwable  {
      String string0 = StringUtils.unwrap("\",", "\",");
      assertEquals("\",", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((char[]) null, '~');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(" in an array of ", "\",");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) " in an array of ", '~');
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " in an array of ", (CharSequence) "\",");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test824()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String string0 = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      String string1 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, stringArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.strip("^-`a:[Z");
      assertEquals("^-`a:[Z", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = (-162);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", (-162));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test825()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "LqS;b^>!PbXGyzXrr~", 97);
      assertEquals(18, int0);
  }

  @Test(timeout = 4000)
  public void test826()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("o$$&Og-vA(~:f");
      assertEquals("o$$&Og-vA(~:f", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("o$$&Og-vA(~:f", "o$$&Og-vA(~:f");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = new int[5];
      String string2 = StringUtils.join(intArray0, 'B', 0, 0);
      assertEquals("", string2);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(5, intArray0.length);
      
      String string3 = StringUtils.unwrap("", "o$$&Og-vA(~:f");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 0);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.leftPad("", (-1), 'B');
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test827()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[14];
      String string0 = StringUtils.replaceOnce((String) null, "Index: ", (String) null);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      char[] charArray0 = new char[1];
      String string2 = StringUtils.valueOf(charArray0);
      assertEquals("\u0000", string2);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(string2);
      assertEquals(1, charArray0.length);
      
      charSequenceArray0[2] = (CharSequence) "\u0000";
      String string3 = StringUtils.join((Object[]) charSequenceArray0);
      assertEquals("\u0000", string3);
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(14, charSequenceArray0.length);
      
      charSequenceArray0[3] = (CharSequence) "\u0000";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals("\u0000", charSequence0);
      assertTrue(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string3));
      assertNotNull(charSequence0);
      assertEquals(14, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("\u0000", charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(14, charSequenceArray0.length);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[2], charSequenceArray0[2]);
      assertEquals(0, int0);
      assertEquals(14, charSequenceArray0.length);
  }

  @Test(timeout = 4000)
  public void test828()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-70);
      String string0 = StringUtils.join(byteArray0, '(');
      assertEquals("-70", string0);
      assertArrayEquals(new byte[] {(byte) (-70)}, byteArray0);
      assertNotNull(string0);
      assertEquals(1, byteArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "-70", (int) (byte) (-70));
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("-70", "-70");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test829()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("0480480");
      assertEquals("0480480", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("0480480");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("0480480", "0480480");
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
      
      String string1 = StringUtils.wrap("0480480", '1');
      assertEquals("104804801", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test830()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
  }

  @Test(timeout = 4000)
  public void test831()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = 'K';
      charArray0[3] = 'V';
      charArray0[4] = 'r';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "$Nr", charArray0);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'!', 'K', '\u0000', 'V', 'r'}, charArray0);
      assertEquals(5, charArray0.length);
      
      boolean boolean1 = StringUtils.isAlphanumeric("vWNp{o;");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.join(charArray0, '!', (-607), (-607));
      assertEquals("", string0);
      assertArrayEquals(new char[] {'!', 'K', '\u0000', 'V', 'r'}, charArray0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test832()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "e";
      String string0 = StringUtils.replaceOnce("mom|", "wHI^sNfT4W)v,", "~!7xb)C+kfnf");
      assertEquals("mom|", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "mom|", (CharSequence) "fQA7");
      assertEquals(5, int0);
      
      String string1 = StringUtils.mid("mom|", 3165, 11);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceIgnoreCase("Minimum abbreviation width is %d", "e", "mom|", 1141);
      assertEquals("Minimum abbrmom|viation width is %d", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test833()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[3] = '!';
      charArray0[3] = 'V';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "$Nr", charArray0);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'V', '\u0000'}, charArray0);
      assertEquals(5, charArray0.length);
      
      String string0 = StringUtils.join(charArray0, '\u0000', (-607), (-607));
      assertEquals("", string0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'V', '\u0000'}, charArray0);
      assertNotNull(string0);
      assertEquals(5, charArray0.length);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertTrue(boolean1);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', 'V', '\u0000'}, charArray0);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, charArray0.length);
  }

  @Test(timeout = 4000)
  public void test834()  throws Throwable  {
      StringUtils.repeat("PI", 3911);
      StringUtils.abbreviate("PI", "PI", (-607), 3911);
      boolean boolean0 = StringUtils.containsAny((CharSequence) "s9_2KBZ~Vfa?bbRl", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test835()  throws Throwable  {
      StringUtils.normalizeSpace("o$$&Og-vA(~:f");
      StringUtils.strip("o$$&Og-vA(~:f", "o$$&Og-vA(~:f");
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test836()  throws Throwable  {
      String string0 = StringUtils.stripStart("org.apache.commons.lang3.StringUtils", "Qb");
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
  }

  @Test(timeout = 4000)
  public void test837()  throws Throwable  {
      StringUtils.replaceFirst("A%'QKLZn^I,T?um*", "A%'QKLZn^I,T?um*", "+}=<~lt]guw");
      StringUtils.lastOrdinalIndexOf("A%'QKLZn^I,T?um*", "m6'4BQHj=q7O", (byte) (-70));
      ArrayList<String> arrayList0 = new ArrayList<String>();
      String string0 = StringUtils.join((List<?>) arrayList0, "gFeuq(aVorg.apache.commons.lang3.CharUtils", (-1), (-140));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test838()  throws Throwable  {
      String string0 = StringUtils.repeat("PI", 3911);
      int int0 = StringUtils.indexOf((CharSequence) string0, 3911, 3911);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test839()  throws Throwable  {
      boolean boolean0 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test840()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      StringUtils.firstNonEmpty(stringArray0);
      StringUtils.isAllBlank(stringArray0);
      StringUtils.substringsBetween("", "", "");
      StringUtils.containsIgnoreCase("", (CharSequence) null);
      StringUtils.trimToEmpty("");
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test841()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      String string0 = StringUtils.lowerCase("Qb", locale0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToEmpty("qb");
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "qb", (CharSequence) "qb", 32);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test842()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 0);
      StringUtils.trimToEmpty((String) null);
      String[] stringArray0 = StringUtils.split("", (String) null);
      assertNotNull(stringArray0);
      
      StringUtils stringUtils0 = new StringUtils();
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "p{InCombiningDiacriticalMarks}+", (-1));
      assertNull(stringArray1);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-1);
      floatArray0[3] = (float) 0;
      floatArray0[2] = (float) (-1);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) 0;
      String string1 = StringUtils.chomp("", (String) null);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceEachRepeatedly("\"d~Y~N}`K<,Xn", stringArray0, stringArray0);
      assertEquals("\"d~Y~N}`K<,Xn", string2);
  }

  @Test(timeout = 4000)
  public void test843()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      StringUtils.getJaroWinklerDistance("Object varargs must not be null", charSequenceArray0[0]);
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test844()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.substringBefore("1.071.0", 6);
      assertEquals("1.071.0", string1);
  }

  @Test(timeout = 4000)
  public void test845()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{}";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      String string0 = StringUtils.leftPad("{}", 0, 'P');
      String string1 = StringUtils.wrap("~jO", 'J');
      assertEquals("J~jOJ", string1);
      
      String string2 = StringUtils.abbreviateMiddle("{}", "~jO", 0);
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.replaceIgnoreCase((String) null, (String) null, ";B7", 0);
      assertNull(string3);
      
      int int0 = new Integer('P');
      StringUtils.endsWith((CharSequence) null, (CharSequence) null);
      String string4 = StringUtils.chomp("~jO", "");
      assertEquals("~jO", string4);
      
      String string5 = StringUtils.replaceEachRepeatedly("1(kxe8_QhhgBO66", stringArray1, stringArray0);
      assertEquals("1(kxe8_QhhgBO66", string5);
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test846()  throws Throwable  {
      StringUtils.replaceChars("2u=`U%-Q`FJ}", "2u=`U%-Q`FJ}", "b");
      StringUtils.indexOf((CharSequence) "b", (-1076), (-3411));
      StringUtils.splitByCharacterType("2u=`U%-Q`FJ}");
      StringUtils.stripEnd((String) null, "e");
      StringUtils.indexOfAny((CharSequence) "e", "e");
      boolean boolean0 = StringUtils.isMixedCase("b");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test847()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", "China");
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 2053);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceAll("", "s'e", "Array and element cannot both be null");
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test848()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "eA";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Class<String> class0 = String.class;
      Class<String> class1 = String.class;
      ServiceLoader.load(class1);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      classLoader0.getParent();
      ServiceLoader.load(class0, classLoader0);
      ServiceLoader<String> serviceLoader0 = ServiceLoader.load(class0);
      Iterator<String> iterator0 = serviceLoader0.iterator();
      StringUtils.join(iterator0, 'd');
      StringUtils.join((Iterator<?>) null, ',');
      String string0 = StringUtils.remove("F+i@_yr", (String) null);
      assertNotNull(string0);
      assertEquals("F+i@_yr", string0);
  }

  @Test(timeout = 4000)
  public void test849()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumericSpace("Cannot store ");
      String string0 = StringUtils.substringAfterLast("Minimum abbreviation width is %d", (-1053));
      assertEquals("", string0);
      
      boolean boolean1 = StringUtils.isNotEmpty("[ 7@L");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test850()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("Z!M|#G-d9Hd");
      assertEquals("Z!M|#G-d9Hd", string0);
      
      LinkedList<Locale.FilteringMode> linkedList0 = new LinkedList<Locale.FilteringMode>();
      Iterator<Locale.FilteringMode> iterator0 = linkedList0.descendingIterator();
      String string1 = StringUtils.join(iterator0, 'z');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test851()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test852()  throws Throwable  {
      StringUtils.chomp("org.apache.commons.lang3.StringUtils", "E^T=l9p");
      String[] stringArray0 = new String[0];
      StringUtils.join(stringArray0);
      char[] charArray0 = new char[0];
      StringUtils.indexOfAnyBut((CharSequence) "org.apache.commons.lang3.StringUtils", charArray0);
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'V', (-1), 97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test853()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("zaX:kO<b;(@uA", "zaX:kO<b;(@uA");
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      String string1 = StringUtils.join(doubleArray0, '~', 0, 0);
      assertNotNull(string1);
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test854()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string0 = StringUtils.substringBefore("", 6);
      String string1 = StringUtils.abbreviate("", 6);
      assertTrue(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test855()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      stringArray0[5] = "";
      String string0 = StringUtils.replaceEach("", stringArray0, stringArray0);
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat("", "", 0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test856()  throws Throwable  {
      String string0 = "|Bo`~:$pr^'ZkWRyXw";
      String string1 = "";
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "|Bo`~:$pr^'ZkWRyXw";
      stringArray0[3] = "MYu_5K?1JY";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("MYu_5K?1JY", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test857()  throws Throwable  {
      String string0 = StringUtils.replaceEach("6", (String[]) null, (String[]) null);
      assertEquals("6", string0);
  }

  @Test(timeout = 4000)
  public void test858()  throws Throwable  {
      String string0 = StringUtils.abbreviate("ch", 51);
      assertEquals("ch", string0);
  }

  @Test(timeout = 4000)
  public void test859()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("]>`vPq;^(Xy,Pd6", 79);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "1(kxe8_QhhgBO66");
      String string1 = StringUtils.rightPad("1(kxe8_QhhgBO66", (-464));
      assertEquals("1(kxe8_QhhgBO66", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test860()  throws Throwable  {
      StringUtils.substringAfterLast("JbFyfAJVNcF", 2611);
      StringUtils.substringAfterLast("", "");
      StringUtils.isMixedCase("");
      StringUtils.abbreviate("", "", 3918, 3918);
      StringUtils.substringBefore("", 4063);
      StringUtils.chomp((String) null, (String) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "";
      StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      char char0 = 'w';
      StringUtils.join(iterator0, 'w');
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "", 3918, 1093);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test861()  throws Throwable  {
      StringUtils.rightPad("5t_s:?i &g`z.S", (-3063), '6');
      StringUtils.leftPad("5t_s:?i &g`z.S", (-3063), "5t_s:?i &g`z.S");
      StringUtils.replace("5t_s:?i &g`z.S", "5t_s:?i &g`z.S", "JD4", (-3063));
      StringUtils.indexOfIgnoreCase((CharSequence) "JD4", (CharSequence) "JD4", 2516);
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("Threshold must not be negative", ":)QpU M3_#G)Xu8s/IY", "JD4");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 0
         // :)QpU M3_#G)Xu8s/IY
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test862()  throws Throwable  {
      String string0 = StringUtils.replaceAll("n!_FyOn!_FyOjava.lang.Object@3b74fcd4n!_FyOn!_FyOn!_FyOn!_FyOn!_FyOn!_FyOn!_FyOCannot store n!_FyOn!_FyO", "3$keD#6&?Ceyv>G~aIp", "W;VFxU9BYjYB");
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test863()  throws Throwable  {
      String string0 = "yCH.011^h";
      String string1 = "\")W!|=R:";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("yCH.011^h", "\")W!|=R:", "yCH.011^h");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 0
         // \")W!|=R:
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test864()  throws Throwable  {
      String string0 = StringUtils.replaceChars("", '}', '}');
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test865()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("", 0);
      assertEquals("", string0);
      
      StringUtils.trimToEmpty((String) null);
      StringUtils.split("", (String) null);
      StringUtils stringUtils0 = new StringUtils();
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "p{InCombiningDiacriticalMarks}+", (-1));
      assertNull(stringArray0);
      
      StringUtils.reverseDelimited((String) null, 'r');
      StringUtils.indexOf((CharSequence) "", (CharSequence) "");
      StringUtils.toRootLowerCase("");
      boolean boolean0 = StringUtils.containsAny((CharSequence) " ", (CharSequence) "");
      assertFalse(boolean0);
      
      StringUtils.lastIndexOf((CharSequence) " ", (CharSequence) "ul|'.x`K{+7", (-1));
      String string1 = StringUtils.replace("ul|'.x`K{+7", "\n", "");
      assertEquals("ul|'.x`K{+7", string1);
      
      String string2 = StringUtils.substringBeforeLast(".%%?nx", (String) null);
      assertEquals(".%%?nx", string2);
  }

  @Test(timeout = 4000)
  public void test866()  throws Throwable  {
      String string0 = StringUtils.remove("|Bo`~:$pr^'ZkWRyXw", '0');
      assertEquals("|Bo`~:$pr^'ZkWRyXw", string0);
      
      String string1 = StringUtils.rotate("tM!^", (-890));
      assertEquals("!^tM", string1);
      
      String string2 = StringUtils.replace("tM!^", "!^tM", "11IR");
      assertEquals("tM!^", string2);
  }

  @Test(timeout = 4000)
  public void test867()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, "Cannot store ");
      String[] stringArray0 = StringUtils.split("Cannot store ", "Cannot store ");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String[] stringArray1 = StringUtils.substringsBetween("Cannot store ", "Supplied value must be a valid byte literal between -32768 and 32767: [", "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNull(stringArray1);
      
      boolean boolean1 = StringUtils.containsIgnoreCase((CharSequence) null, "Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertTrue(boolean1 == boolean0);
      
      String string0 = StringUtils.trimToEmpty("g!#S0+");
      assertEquals("g!#S0+", string0);
      
      StringUtils.getDigits((String) null);
      StringUtils.lastIndexOf((CharSequence) null, 49, 3);
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "g!#S0+", (CharSequence) "g!#S0+", (-1));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test868()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String string0 = StringUtils.capitalize("k,#TlJ5VSwfghc");
      assertEquals("K,#TlJ5VSwfghc", string0);
      
      String string1 = StringUtils.chomp("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("...", "p{InCombiningDiacriticalMarks}+", "Q(TCDft");
      assertEquals("...", string2);
      
      boolean boolean0 = StringUtils.isAlpha("Q(TCDft");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test869()  throws Throwable  {
      StringUtils.splitByWholeSeparatorPreserveAllTokens("0!OlRdr|5T2K\"[\"M_", "0!OlRdr|5T2K\"[\"M_");
      StringUtils.defaultString("", "0!OlRdr|5T2K\"[\"M_");
      StringUtils.removeIgnoreCase("o(~u^0-_7E}U;", "fvtG6 @6!U");
      byte[] byteArray0 = new byte[10];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte) (-105);
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte) (-41);
      byteArray0[5] = (byte)4;
      byteArray0[7] = (byte) (-6);
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test870()  throws Throwable  {
      String string0 = StringUtils.chomp("w5K");
      assertEquals("w5K", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("w5K", "$+%}AA,c+-;ij?1|p");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("$+%}AA,c+-;ij?1|p");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test871()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ", Lensth: 0", (CharSequence) ", Lensth: 0");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test872()  throws Throwable  {
      StringUtils.remove("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ");
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "Search and Replace array lengths don't match: ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test873()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "Y/% M");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Y/% M
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test874()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase("", "");
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test875()  throws Throwable  {
      String string0 = StringUtils.defaultString(", Length: 0");
      assertEquals(", Length: 0", string0);
      
      String string1 = StringUtils.substringBefore(": ", 352);
      assertEquals(": ", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) ": ", "()*I5 Fn+eVF!");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test876()  throws Throwable  {
      StringUtils.splitByWholeSeparatorPreserveAllTokens("0!OlRdr|5T2K\"[\"M_", "R^}RmJ7|?;@7[x5|");
      StringUtils.defaultString("", "0!OlRdr|5T2K\"[\"M_");
      StringUtils.removeIgnoreCase("o(~u^0-_7E}U;", "fvtG6 @6!U");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-105);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)102;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-6);
      byteArray0[8] = (byte) (-26);
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test877()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.ArrayUtils";
      StringUtils.removeFirst("Cannot store ", "org.apache.commons.lang3.ArrayUtils");
      StringUtils.indexOf((CharSequence) "Cannot store ", (-300), (-300));
      StringUtils.strip("org.apache.commons.lang3.ArrayUtils", "Threshold must not be negative");
      StringUtils.containsIgnoreCase("Cannot store ", "Threshold must not be negative");
      StringUtils.indexOfIgnoreCase((CharSequence) "Cannot store ", (CharSequence) "Threshold must not be negative", 57);
      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "Cannot store ", (-1), (-1966));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test878()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{}";
      StringUtils.stripAll(stringArray0);
      StringUtils.leftPad("{}", 0, 'P');
      StringUtils.wrap("/x", 'J');
      char[] charArray0 = new char[0];
      StringUtils.valueOf(charArray0);
      StringUtils.replaceIgnoreCase((String) null, (String) null, ";B7", 0);
      int int0 = StringUtils.indexOf((CharSequence) "J/xJ", 102);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test879()  throws Throwable  {
      String string0 = StringUtils.stripEnd("wia", "wia");
      long[] longArray0 = new long[8];
      longArray0[0] = 3L;
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "wia";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.split("=\"&XGZ8YHdr[ID<!", "Tcw");
      String string1 = StringUtils.join((Object[]) stringArray0, "@<G", (-4816), (-4816));
      assertEquals(1, stringArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("=\"&XGZ8YHdr[ID<!");
      assertEquals("=\"&XGZ8YHdr[ID<!", string2);
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("", (-4816));
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test880()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "eA";
      long[] longArray0 = new long[3];
      longArray0[2] = (long) 'P';
      String string0 = StringUtils.join(longArray0, '4');
      assertNotNull(string0);
      
      Locale locale0 = Locale.GERMANY;
      Locale.setDefault(locale0);
      Locale locale1 = Locale.FRENCH;
      String string1 = StringUtils.lowerCase("040480", locale0);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test881()  throws Throwable  {
      StringUtils.isAllBlank((CharSequence[]) null);
      StringUtils.toCodePoints("?");
      long[] longArray0 = new long[0];
      String string0 = StringUtils.join(longArray0, '>');
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test882()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", "");
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("p{InCombiningDiacriticalMarks}+", "");
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
  }

  @Test(timeout = 4000)
  public void test883()  throws Throwable  {
      long[] longArray0 = new long[2];
      longArray0[0] = 900L;
      longArray0[1] = 0L;
      String string0 = StringUtils.join(longArray0, 'O', 1436, 10);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test884()  throws Throwable  {
      String string0 = StringUtils.stripToNull("a#4`gF|4s3S5+d>\"l0");
      assertNotNull(string0);
      assertEquals("a#4`gF|4s3S5+d>\"l0", string0);
  }
}
