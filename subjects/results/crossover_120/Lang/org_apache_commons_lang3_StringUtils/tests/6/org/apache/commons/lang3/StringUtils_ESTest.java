/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:21:53 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.Buffer;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.NoSuchElementException;
import java.util.PriorityQueue;
import java.util.ServiceLoader;
import java.util.Set;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.Supplier;
import java.util.function.UnaryOperator;
import java.util.regex.PatternSyntaxException;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.stripStart("~", "~");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[4] = (CharSequence) "~";
      String string1 = StringUtils.strip("offset cannot be negative", "");
      assertEquals("offset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("~");
      assertEquals("~", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      String string3 = StringUtils.substring("Search and Replace array lengths don't match: ", 50, (-11));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("~", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.appendIfMissing("offset cannot be negative", "Search and Replace array lengths don't match: ", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("offset cannot be negativeSearch and Replace array lengths don't match: ", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isNotBlank("offset cannot be negativeSearch and Replace array lengths don't match: ");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.substring(">}avFr\"=T+=E<$p8", (-11), (-11));
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.rotate("$hEZyfwOL\"Q1", (-1042));
      assertEquals("Q1$hEZyfwOL\"", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "i@\"  \"BOmLOSTM", "Q1$hEZyfwOL\"");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = StringUtils.substring("p/,xfQ13fLP,|YUO", 13, 76);
      assertEquals("YUO", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("ro(.:xMa9\";\"B", 64);
      assertEquals("o(.:xMa9\";\"Br", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("p/,xfQ13fLP,|YUO", "P7 K$-@[_ Q", "ro(.:xMa9\";\"B");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("U`DT(cz}", "o(.:xMa9\";\"Br", 76);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.chomp((String) null);
      assertNull(string2);
      
      char[] charArray0 = new char[0];
      String string3 = StringUtils.join(charArray0, 'E', 64, (-627));
      assertEquals(0, charArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "Hi";
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1329;
      doubleArray0[2] = (double) 1329;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Hi", "JXMZ\u0005NiK18VOU", (-475));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("H", charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.countMatches((CharSequence) "JXMZ\u0005NiK18VOU", (CharSequence) "H");
      assertEquals(0, int0);
      
      String string1 = StringUtils.swapCase("Hi");
      assertEquals("hI", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("H");
      assertTrue(boolean0);
      
      String string2 = StringUtils.deleteWhitespace("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(string2);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[5];
      char[] charArray0 = new char[5];
      charArray0[0] = 'c';
      charArray0[2] = '[';
      charArray0[3] = '8';
      charArray0[4] = '-';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("c\u0000[8-", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.limit());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertArrayEquals(new char[] {'c', '\u0000', '[', '8', '-'}, charArray0);
      assertNotNull(charBuffer0);
      
      charBufferArray0[0] = charBuffer0;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "Hi", 1329, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = StringUtils.getDigits("_");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "Strings must not be null", 619);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.trimToEmpty("Cloneable type ");
      assertEquals("Cloneable type", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastOrdinalIndexOf("Strings must not be null", "Strings must not be null", 619);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string3 = StringUtils.replaceEachRepeatedly("", stringArray1, stringArray1);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("", string3);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)93;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)97;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "_8oK5I9AryRK.P");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // _8oK5I9AryRK.P
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = vector0.add((Integer) null);
      assertFalse(vector0.contains((-1)));
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertTrue(boolean0);
      
      boolean boolean1 = vector0.add(integer0);
      assertTrue(vector0.contains((-1)));
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[null, -1]", vector0.toString());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Integer integer1 = new Integer(10);
      assertEquals(10, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      boolean boolean2 = vector0.add(integer1);
      assertTrue(vector0.contains((-1)));
      assertEquals("[null, -1, 10]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(3, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean2);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-19);
      String string0 = StringUtils.join(byteArray0, 'P', 31, 3);
      assertEquals(5, byteArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {(byte)24, (byte)47, (byte)4, (byte)3, (byte) (-19)}, byteArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("", "", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("a|AXx", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "a|AXx", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      String string2 = StringUtils.strip("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "pU8p9ob");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      boolean boolean4 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[1] = (CharSequence) "Object varargs must not be null";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "\">^|qa~d8RBng,lzpH ";
      String string1 = StringUtils.prependIfMissing("_@7ED;", "Object varargs must not be null", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((byte[]) null, 'Q');
      assertNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("Locale must not be null", 'Q');
      assertEquals("QLocale must not be nullQ", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("Oh", (String) null);
      assertEquals("Oh", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int0 = StringUtils.compare("the StrWW %!+I", "...", false);
      assertEquals(70, int0);
      
      Locale locale0 = new Locale("_@7ED;", "UcH<HWWwDIg!idRaJ", "{{");
      assertEquals("{{", locale0.getVariant());
      assertEquals("UCH<HWWWDIG!IDRAJ", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "UcH<HWWwDIg!idRaJ", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "Q*}[:~\\uk7PoA";
      String string1 = StringUtils.center(string0, 24, '&');
      assertEquals("&&&&&Q*}[:~\\uk7PoA&&&&&&", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-0.63945365F);
      floatArray0[2] = (float) 748;
      String string2 = StringUtils.join(floatArray0, '&');
      assertEquals(3, floatArray0.length);
      assertEquals("-0.63945365&0.0&748.0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new float[] {(-0.63945365F), 0.0F, 748.0F}, floatArray0, 0.01F);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) string1;
      boolean boolean0 = StringUtils.isBlank(string1);
      assertFalse(boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = '&';
      charArray0[1] = '&';
      charArray0[2] = '&';
      charArray0[3] = '&';
      charArray0[4] = '&';
      charArray0[5] = '&';
      charArray0[6] = '&';
      charArray0[7] = '&';
      charArray0[8] = '&';
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[1], charArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(9, charArray0.length);
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'&', '&', '&', '&', '&', '&', '&', '&', '&'}, charArray0);
      
      String string3 = StringUtils.remove("]", '&');
      assertEquals("]", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("]", charSequenceArray0[1]);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("O7z7{");
      assertEquals("O7z7{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ListIterator<Locale.Category> listIterator0 = arrayList0.listIterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, "O7z7{");
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("O7z7{");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceOnce("Comparator should not be null.", ";oz^<8y[9,?o:NzwZi", "2Da4:");
      assertEquals("Comparator should not be null.", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string3 = StringUtils.join(booleanArray0, 'w');
      assertEquals(2, booleanArray0.length);
      assertEquals("falsewfalse", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "O7z7{", (CharSequence) "falsewfalse", 7);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      String string0 = StringUtils.prependIfMissing("Object varargs must not be null", "'U@%k,Fn|JnM~", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, 'z');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "Object varargs must not be null", 'C');
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "Object varargs must not be null", (String) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string2 = StringUtils.deleteWhitespace("Object varargs must not be null");
      assertEquals("Objectvarargsmustnotbenull", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean3 = StringUtils.isBlank("'U@%k,Fn|JnM~");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Object varargs must not be null", 32);
      assertEquals(26, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The StrWW %!+I");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("The", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The StrWW %!+I", (CharSequence) "The");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("The StrWW %!+I", "The StrWW %!+I", "The");
      assertEquals("The", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("The StrWW %!+I");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((Object[]) stringArray1, "nPRTm;z<^5D-", 0, 5);
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("ThenPRTm;z<^5D-nPRTm;z<^5D-StrnPRTm;z<^5D-WWnPRTm;z<^5D-", string2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Cloneable type ";
      charSequenceArray0[1] = (CharSequence) "Cloneable type ";
      charSequenceArray0[2] = (CharSequence) "Cloneable type ";
      charSequenceArray0[3] = (CharSequence) "Cloneable type ";
      charSequenceArray0[4] = (CharSequence) "Cloneable type ";
      charSequenceArray0[5] = (CharSequence) "Cloneable type ";
      String string0 = StringUtils.prependIfMissing("Cloneable type ", "Cloneable type ", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("Cloneable type ", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = StringUtils.firstNonBlank((CharBuffer[]) null);
      assertNull(charBuffer0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte) (-97);
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-91);
      byteArray0[7] = (byte)91;
      byteArray0[8] = (byte)8;
      String string1 = StringUtils.join(byteArray0, '$');
      assertEquals(9, byteArray0.length);
      assertEquals("76$16$-119$-31$-97$66$-91$91$8", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)76, (byte)16, (byte) (-119), (byte) (-31), (byte) (-97), (byte)66, (byte) (-91), (byte)91, (byte)8}, byteArray0);
      assertNotNull(string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      charArray0[1] = '$';
      charArray0[2] = '$';
      charArray0[3] = '$';
      int int0 = StringUtils.indexOfAny((CharSequence) "76$16$-119$-31$-97$66$-91$91$8", charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'$', '$', '$', '$'}, charArray0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'T', (int) (byte) (-119), (int) (byte)8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -119
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("O7z7{");
      assertEquals("O7z7{", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[4] = 'P';
      charArray0[1] = 'o';
      charArray0[4] = 'A';
      charArray0[5] = 'z';
      int int0 = StringUtils.indexOfAny((CharSequence) "O7z7{", charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'\u0000', 'o', '\u0000', '\u0000', 'A', 'z'}, charArray0);
      
      String string1 = StringUtils.stripEnd("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "O7z7{");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "p{InCombiningDiacriticalMarks}+", (CharSequence) "", 2);
      assertEquals(2, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'D';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      String string0 = StringUtils.getDigits("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.remove((String) null, "J");
      assertNull(string1);
      
      String string2 = StringUtils.capitalize("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.startsWithAny((CharSequence) null, stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertArrayEquals(new char[] {'D'}, charArray0);
      
      String string3 = "^<_W!`/6tJj$Z$ ";
      String[] stringArray1 = StringUtils.substringsBetween("^<_W!`/6tJj$Z$ ", "", "");
      assertNull(stringArray1);
      
      String string4 = StringUtils.repeat("", 0);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("$T*j#bP", "Exception cloning Cloneable type ", (-1));
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      String string5 = StringUtils.chomp("Exception cloning Cloneable type ");
      assertEquals("Exception cloning Cloneable type ", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("$T*j#bP");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.replaceIgnoreCase("6iPI", "6iPI", "Exception cloning Cloneable type ", 15);
      assertEquals("Exception cloning Cloneable type ", string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[9];
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      charBufferArray0[0] = charBuffer0;
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null, 0, (-31));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = StringUtils.truncate("nU6>thI>9o:8`m?bsATJ", 12, 52);
      assertEquals("8`m?bsATJ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'a';
      charArray0[1] = 'K';
      charArray0[2] = 'w';
      charArray0[3] = 'h';
      charArray0[4] = '%';
      charArray0[5] = 'n';
      charArray0[6] = ' ';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "8`m?bsATJ", charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'a', 'K', 'w', 'h', '%', 'n', ' '}, charArray0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "8`m?bsATJ", 489);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("Strings must not be null", 105, 3908);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "...t is %d";
      stringArray0[1] = "";
      stringArray0[2] = "...t is %d";
      stringArray0[3] = "";
      stringArray0[4] = "&i!%>`";
      stringArray0[5] = "%7L>zqzZg9WC";
      stringArray0[6] = "&i!%>`";
      String string2 = StringUtils.replaceEach("&i!%>`", stringArray0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("&i!%>`", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.join(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("...t is %d...t is %d&i!%>`%7L>zqzZg9WC&i!%>`", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "%7L>zqzZg9WC", (CharSequence) "&i!%>`");
      assertFalse(boolean0);
      
      String string4 = StringUtils.deleteWhitespace((String) null);
      assertNull(string4);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        ByteBuffer.wrap((byte[]) null, 128, 108);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = StringUtils.truncate("The character ", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)57;
      String string1 = StringUtils.substringBeforeLast("+ZW#~:e= ", "+ZW#~:e= ");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.substring("The character ", (int) (byte)3, 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.length("");
      assertEquals(0, int0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.abbreviate("{_", "0J@;Q<|", (int) (byte)55, (int) (byte)55);
      assertEquals("{_", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("{_", "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(charSequence0);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("0J@;Q<|", (CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("{", 'T');
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean3 = StringUtils.endsWithAny("{", stringArray0);
      assertEquals(188, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(boolean3);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      String string4 = StringUtils.substringAfter("{_", 78);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains("0J@;Q<|"));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      String string5 = StringUtils.join((List<?>) stack0, 'T', 78, (-504));
      assertFalse(stack0.contains("0J@;Q<|"));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("");
      assertEquals(0, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      String string6 = StringUtils.replacePattern("Threshold must not be negative", "", "Minimum abbreviation width with offset is %d");
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = StringUtils.overlay("(}{6RNPp<)Ooa", "", (byte)34, (-504));
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("aRK.dlw8", 'A');
      assertEquals("AaRK.dlw8A", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "AaRK.dlw8A";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBetween((String) null, (String) null, "aRK.dlw8");
      assertNull(string1);
      
      String string2 = StringUtils.stripAccents("JD6@CXAkI~|");
      assertEquals("JD6@CXAkI~|", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      int[] intArray0 = new int[9];
      intArray0[0] = (int) 'A';
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-738);
      intArray0[5] = (int) 'A';
      intArray0[6] = (int) '9';
      intArray0[7] = 3853;
      intArray0[8] = (int) 'A';
      String string3 = StringUtils.join(intArray0, 'i');
      assertEquals(9, intArray0.length);
      assertEquals("65i-1i-1i-1i-738i65i57i3853i65", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new int[] {65, (-1), (-1), (-1), (-738), 65, 57, 3853, 65}, intArray0);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "z?ECE[`}n~~_^");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", "JPR$qIhCjXO--B(");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.chop("_$J7iYA?LmCX_;)QuGM");
      assertEquals("_$J7iYA?LmCX_;)QuG", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore(" ", "855rc!UE?(VP|iQtm");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "_$J7iYA?LmCX_;)QuG");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      String string2 = StringUtils.join(intArray0, '#', 5, 1);
      assertEquals(1, intArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertNotNull(string2);
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range= 
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width is %d", 487);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("", "Minimum abbreviation width is %d", 487);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "", 487);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringBeforeLast("", "Minimum abbreviation width is %d");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("Minimum abbreviation width is %d", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", '^');
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.replaceEachRepeatedly("", stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("", string2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("Fj");
      assertEquals("Fj", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[2] = 'Y';
      charArray0[4] = 'A';
      boolean boolean0 = StringUtils.startsWith("Fj", "Fj");
      assertTrue(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("Fj");
      assertEquals("Fj", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chop(" l=K2p.k#iV");
      assertEquals(" l=K2p.k#i", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.isMixedCase("Fj");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.substringBefore("Fj", "Fj");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "Fj", (CharSequence) "Fj");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean2 = false;
      boolean boolean3 = false;
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = (int) 'A';
      intArray0[2] = (-1);
      intArray0[3] = (int) 'm';
      intArray0[4] = (int) 'Y';
      intArray0[5] = (int) 'Y';
      intArray0[6] = (-1);
      intArray0[7] = (int) 'm';
      intArray0[8] = (int) 'A';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'Y', (-1), 89);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)45;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)48;
      shortArray0[3] = (short)0;
      shortArray0[5] = (short)0;
      String string0 = StringUtils.substringBefore("253953-91", (int) (short)0);
      assertEquals("253953-91", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, "6(r:q+Ws");
      assertNull(stringArray1);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      String string1 = StringUtils.join((Iterable<?>) stack0, (String) null);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("J9ZTqY0GE]n", "0J@;Q<|");
      assertEquals("J9ZTqY0GE]n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string1 = StringUtils.leftPad("Object varargs must not be null", 3956, "/c9Nzv|{Dx+!B8");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("J9ZTqY0GE]n", "n=8J!ZejOU\"hg$o/-:");
      assertEquals("9ZTqY0GE]", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("Locale must not be null", 3956);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.replaceChars((String) null, "J9ZTqY0GE]n", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNull(string4);
      
      boolean boolean2 = StringUtils.startsWithAny(string3, (CharSequence[]) null);
      assertFalse(boolean2);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int[] intArray0 = new int[0];
      String string5 = StringUtils.join(intArray0, 'I');
      assertEquals(0, intArray0.length);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("0J@;Q<|", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = StringUtils.leftPad("~", 0);
      assertEquals("~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("~", 0);
      assertEquals("~", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "~";
      String string2 = StringUtils.leftPad("~", 21);
      assertEquals("                    ~", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBefore("Q1\"qo0FqbC~SL43>|", 0);
      assertEquals("Q1\"qo0FqbC~SL43>|", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string4 = StringUtils.normalizeSpace("The character ");
      assertEquals("The character", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAlpha("                    ~");
      assertFalse(boolean0);
      
      String string5 = StringUtils.swapCase("q");
      assertEquals("Q", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOf((CharSequence) "The character ", (CharSequence) "Le=8LM952");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte)120;
      byteArray0[2] = (byte)98;
      byteArray0[3] = (byte)80;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-70);
      String string6 = StringUtils.join(byteArray0, 'V', (int) (byte) (-86), (int) (byte) (-86));
      assertEquals(6, byteArray0.length);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertArrayEquals(new byte[] {(byte) (-86), (byte)120, (byte)98, (byte)80, (byte)10, (byte) (-70)}, byteArray0);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.wrap((String) null, "'U@%k,Fn|JnM~");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.toRootLowerCase("'U@%k,Fn|JnM~");
      assertEquals("'u@%k,fn|jnm~", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphaSpace("'U@%k,Fn|JnM~");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 21.0;
      doubleArray0[1] = (-1581.7935923008);
      doubleArray0[2] = (-396.5785573765);
      doubleArray0[3] = 996.0;
      doubleArray0[4] = 0.4129919393077288;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 2267.0;
      doubleArray0[7] = (-1532.75343);
      doubleArray0[8] = 1.0;
      String string3 = StringUtils.join(doubleArray0, 't', 20, 16);
      assertEquals(9, doubleArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new double[] {21.0, (-1581.7935923008), (-396.5785573765), 996.0, 0.4129919393077288, (-1.0), 2267.0, (-1532.75343), 1.0}, doubleArray0, 0.01);
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, (String) null, (-3133), (-3133));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The StrWW %!+I");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeStart("The StrWW %!+I", "The StrWW %!+I");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The StrWW %!+I", (CharSequence) "");
      assertEquals(14, int0);
      
      String string1 = StringUtils.chomp("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "\\u";
      String string3 = StringUtils.uncapitalize(string2);
      assertEquals("\\u", string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.truncate((String) null, 1, 97);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string5 = StringUtils.wrapIfMissing((String) null, "%za%");
      assertNull(string5);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "#<.${~pdPY", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 97;
      floatArray0[1] = (float) 97;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (float) 1;
      floatArray0[4] = (float) 1;
      floatArray0[5] = (float) 1;
      floatArray0[6] = (float) 1;
      floatArray0[7] = (float) 97;
      floatArray0[8] = (float) 1;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'E', (-217), 97);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -217
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("O7z7{", "O7z7{");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[2] = 'm';
      charArray0[4] = 'A';
      boolean boolean0 = StringUtils.startsWith("", "O7z7{");
      assertFalse(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("O7z7{");
      assertEquals("O7z7{", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chop(" l=K2p.k#iV");
      assertEquals(" l=K2p.k#i", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.substringBefore("O7z7{", "O7z7{");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "O7z7{", (CharSequence) "");
      assertEquals(5, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean2 = false;
      String string4 = StringUtils.rightPad(" l=K2p.k#iV", (-361), 'A');
      assertEquals(" l=K2p.k#iV", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange((String) null, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = StringUtils.upperCase("\n");
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isEmpty("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isEmpty("\n");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("\n");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string1 = StringUtils.chomp("Arguments cannot both be null", "\n");
      assertEquals("Arguments cannot both be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        linkedList0.listIterator(2453);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2453, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("~", 10, 10);
      assertEquals("~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "iZp!nv|8~-_._OYYNMu";
      charSequenceArray0[1] = (CharSequence) "iZp!nv|8~-_._OYYNMu";
      charSequenceArray0[2] = (CharSequence) "~";
      charSequenceArray0[3] = (CharSequence) "iZp!nv|8~-_._OYYNMu";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("...", '+');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.repeat("~", 620);
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("Exception cloning Cloneable type ", 50, "Strings must not be null");
      assertEquals("Exception cloning Cloneable type Strings must not ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("{", "_");
      assertEquals("_{_", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("_{_");
      assertEquals("_{_", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.UK;
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string2 = locale0.getDisplayVariant(locale1);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Locale locale2 = Locale.JAPANESE;
      assertEquals("", locale2.getISO3Country());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("ja", locale2.toString());
      assertEquals("ja", locale2.getLanguage());
      assertSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      
      String string3 = locale2.getDisplayScript();
      assertEquals("", locale2.getISO3Country());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("ja", locale2.toString());
      assertEquals("ja", locale2.getLanguage());
      assertSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", string3);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = locale0.getDisplayVariant(locale2);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale2.getISO3Country());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("ja", locale2.toString());
      assertEquals("ja", locale2.getLanguage());
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", string4);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      Locale locale3 = locale1.stripExtensions();
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en", locale3.getLanguage());
      assertEquals("eng", locale3.getISO3Language());
      assertEquals("", locale3.getVariant());
      assertEquals("GB", locale3.getCountry());
      assertEquals("GBR", locale3.getISO3Country());
      assertEquals("en_GB", locale3.toString());
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale3);
      assertNotSame(locale3, locale0);
      assertSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale2));
      assertNotNull(locale3);
      
      String string5 = StringUtils.uncapitalize("_{_");
      assertEquals("_{_", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int0 = StringUtils.getFuzzyDistance("{", "_{_", locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale3);
      assertEquals(0, int0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "_{_";
      charSequenceArray0[1] = (CharSequence) "_";
      charSequenceArray0[2] = (CharSequence) "";
      String string6 = StringUtils.wrap("'nS!toQFLJ-X}g$n", 's');
      assertEquals("s'nS!toQFLJ-X}g$ns", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      charSequenceArray0[3] = (CharSequence) "s'nS!toQFLJ-X}g$ns";
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = StringUtils.strip("n;$#DlV9*WH", "n;$#DlV9*WH");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "n;$#DlV9*WH", (CharSequence) "", (-488));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      String string2 = StringUtils.join(doubleArray0, '$');
      assertEquals(1, doubleArray0.length);
      assertEquals("1.0", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertNotNull(string2);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(""));
      assertNotNull(treeSet0);
      
      boolean boolean1 = treeSet0.add("^NgB3jP)@#f)\"Maqr");
      assertFalse(treeSet0.contains(""));
      assertTrue(treeSet0.contains("^NgB3jP)@#f)\"Maqr"));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertFalse(treeSet0.contains(""));
      assertTrue(treeSet0.contains("^NgB3jP)@#f)\"Maqr"));
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, "1.0");
      assertFalse(treeSet0.contains(""));
      assertTrue(treeSet0.contains(string3));
      assertEquals("^NgB3jP)@#f)\"Maqr", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isNumeric("n;$#DlV9*WH");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.replaceOnce(" ", "edMvsQ3", "Strings must not be null");
      assertEquals(" ", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.join((List<?>) null, "(r:qz+Ts(r:qz+Ts", 32767, (-8));
      assertNull(string5);
      
      String string6 = StringUtils.capitalize("n;$#DlV9*WH");
      assertEquals("N;$#DlV9*WH", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "(r:qz+Ts(r:qz+Ts", (CharSequence) " ", 22);
      assertEquals(16, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MIN_VALUE;
      String string0 = StringUtils.center("{_", Integer.MIN_VALUE, "U,Z8z]6{/5!e@==K 0");
      assertEquals("{_", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnce("WL(Q-:{^O", "U,Z8z]6{/5!e@==K 0", "U,Z8z]6{/5!e@==K 0");
      assertEquals("WL(Q-:{^O", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Mj{b=G ", (CharSequence) "{_", 12);
      assertEquals(6, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Threshold must not be negative", (-3488), Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = 2559.0F;
      String string0 = StringUtils.join(floatArray0, '3', 1976, 1976);
      assertEquals(1, floatArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new float[] {2559.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.remove((String) null, 'D');
      assertNull(string1);
      
      String string2 = StringUtils.rightPad((String) null, (-1887), (String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.substringBefore("", 1642);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens((String) null, (String) null);
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[2] = "";
      stringArray0[2] = "";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfter("Cannot store ", string0);
      assertEquals(5, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("Threshold must not be negative");
      assertEquals("threshold must not be negative", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("threshold must not be negative", stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) string0, (CharSequence[]) stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "Cannot store ", (CharSequence) string0);
      assertEquals(5, stringArray0.length);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String string3 = StringUtils.wrapIfMissing("offset cannot be negative", 'q');
      assertEquals("qoffset cannot be negativeq", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.joinWith("Cannot store ", stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("Cannot store Cannot store Cannot store Cannot store ", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int3 = StringUtils.indexOfAny((CharSequence) null, "");
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      int int4 = StringUtils.indexOf((CharSequence) "offset cannot be negative", 0);
      assertEquals((-1), int4);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      
      String string5 = StringUtils.deleteWhitespace("qoffset cannot be negativeq");
      assertEquals("qoffsetcannotbenegativeq", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains(""));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      linkedHashSet0.clear();
      assertFalse(linkedHashSet0.contains(""));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean1 = linkedHashSet0.add("org.apache.commons.lang3.ObjectUtils");
      assertFalse(linkedHashSet0.contains(""));
      assertTrue(linkedHashSet0.contains("org.apache.commons.lang3.ObjectUtils"));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(int3));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean2 = linkedHashSet0.containsAll(linkedList0);
      assertFalse(linkedList0.contains(int3));
      assertFalse(linkedHashSet0.contains(""));
      assertTrue(linkedHashSet0.contains("org.apache.commons.lang3.ObjectUtils"));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Integer integer0 = new Integer((-1144));
      assertEquals((-1144), (int)integer0);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int3));
      assertNotNull(integer0);
      
      boolean boolean3 = linkedList0.add(integer0);
      assertTrue(linkedList0.contains((-1144)));
      assertFalse(linkedList0.contains(int3));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean3);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(linkedList0);
      assertTrue(linkedList0.contains((-1144)));
      assertFalse(linkedList0.contains(int3));
      assertFalse(hashSet0.contains(""));
      assertTrue(hashSet0.contains((-1144)));
      assertEquals(1, linkedList0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean4 = hashSet0.add(integer0);
      assertTrue(linkedList0.contains((-1144)));
      assertFalse(linkedList0.contains(int3));
      assertFalse(hashSet0.contains(""));
      assertTrue(hashSet0.contains((-1144)));
      assertEquals(1, linkedList0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(boolean4);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int4));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int3));
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      
      boolean boolean5 = hashSet0.add("");
      assertTrue(linkedList0.contains((-1144)));
      assertFalse(linkedList0.contains(int3));
      assertFalse(hashSet0.contains("threshold must not be negative"));
      assertTrue(hashSet0.contains(""));
      assertEquals(1, linkedList0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertTrue(boolean5);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      
      String string6 = StringUtils.join((Iterable<?>) hashSet0, string0);
      assertTrue(linkedList0.contains((-1144)));
      assertFalse(linkedList0.contains(int3));
      assertFalse(hashSet0.contains("threshold must not be negative"));
      assertTrue(hashSet0.contains(""));
      assertEquals(5, stringArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertEquals("-1144", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.unwrap("qoffsetcannotbenegativeq", 'q');
      assertEquals("offsetcannotbenegative", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-197), 2331);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.leftPad("", 2331, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("", "");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.toRootLowerCase("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      assertNotSame(predicate1, predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertNotSame(predicate3, predicate4);
      assertNotSame(predicate4, predicate3);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate2));
      assertNotNull(predicate4);
      
      Predicate<Object> predicate5 = predicate1.negate();
      assertNotSame(predicate1, predicate0);
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate4));
      assertNotNull(predicate5);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-197);
      longArray0[1] = (long) (-197);
      String string4 = StringUtils.join(longArray0, ' ');
      assertEquals(2, longArray0.length);
      assertEquals("-197 -197", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertArrayEquals(new long[] {(-197L), (-197L)}, longArray0);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-492.60303890029644);
      String string0 = StringUtils.mid("?f>u@+*Ob", 1, 1);
      assertEquals("f", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("f", "f");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.lowerCase(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToEmpty("%!+I");
      assertEquals("%!+I", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripStart(" ", (String) null);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Locale locale1 = new Locale("+WALncp");
      assertEquals("+walncp", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("+walncp", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string4 = locale0.getDisplayVariant(locale1);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("+walncp", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("+walncp", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string4);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      Locale locale2 = Locale.JAPANESE;
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("ja", locale2.toString());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      
      String string5 = locale2.getDisplayScript();
      assertEquals("ja", locale2.getLanguage());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("ja", locale2.toString());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", string5);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      Locale locale3 = locale0.stripExtensions();
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("TWN", locale3.getISO3Country());
      assertEquals("", locale3.getVariant());
      assertEquals("zh_TW", locale3.toString());
      assertEquals("TW", locale3.getCountry());
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale3);
      assertNotSame(locale3, locale1);
      assertSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertNotNull(locale3);
      
      String string6 = StringUtils.abbreviate("", 2208);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      
      boolean boolean0 = StringUtils.startsWith((CharSequence) null, "");
      assertFalse(boolean0);
      
      String string7 = " is not in the range '0' - '9'";
      // Undeclared exception!
      try { 
        StringUtils.truncate(" is not in the range '0' - '9'", (-3407), 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = null;
      String string0 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string0);
      
      char char0 = ':';
      String string1 = StringUtils.remove("Supplied value must be a valid byte literal between -32768 and 32767: [%]@Supplied value must be a valid byte literal between -32768 and 32767: [Minimum abbreviation width with offset is %d", ':');
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767 [%]@Supplied value must be a valid byte literal between -32768 and 32767 [Minimum abbreviation width with offset is %d", string1);
      assertNotNull(string1);
      
      int int0 = 248;
      int int1 = StringUtils.lastOrdinalIndexOf("Supplied value must be a valid byte literal between -32768 and 32767: [%]@Supplied value must be a valid byte literal between -32768 and 32767: [Minimum abbreviation width with offset is %d", (CharSequence) null, 248);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Supplied value must be a valid byte literal between -32768 and 32767 [%]@Supplied value must be a valid byte literal between -32768 and 32767 [Minimum abbreviation width with offset is %d");
      assertEquals(31, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string2 = ".,^8v!wHY(";
      String string3 = null;
      String string4 = StringUtils.replaceIgnoreCase("Supplied value must be a valid byte literal between -32768 and 32767: [%]@Supplied value must be a valid byte literal between -32768 and 32767: [Minimum abbreviation width with offset is %d", ".,^8v!wHY(", (String) null);
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [%]@Supplied value must be a valid byte literal between -32768 and 32767: [Minimum abbreviation width with offset is %d", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) ".,^8v!wHY(", (CharSequence) null, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = StringUtils.remove("Supplied value must be a valid byte literal between -32768 and 32767: [%]@Supplied value must be a valid byte literal between -32768 and 32767: [Minimum abbreviation width with offset is %d", ':');
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767 [%]@Supplied value must be a valid byte literal between -32768 and 32767 [Minimum abbreviation width with offset is %d", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Supplied value must be a valid byte literal between -32768 and 32767 [%]@Supplied value must be a valid byte literal between -32768 and 32767 [Minimum abbreviation width with offset is %d");
      assertEquals(31, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceIgnoreCase("Supplied value must be a valid byte literal between -32768 and 32767: [%]@Supplied value must be a valid byte literal between -32768 and 32767: [Minimum abbreviation width with offset is %d", ".,^8v!wHY(", (String) null);
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [%]@Supplied value must be a valid byte literal between -32768 and 32767: [Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [%]@Supplied value must be a valid byte literal between -32768 and 32767: [Minimum abbreviation width with offset is %d", 248, Integer.MIN_VALUE);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceEachRepeatedly("(r:q+Ws", stringArray0, stringArray0);
      assertEquals(31, stringArray0.length);
      assertEquals("(r:q+Ws", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.chop("Supplied value must be a valid byte literal between -32768 and 32767 [%]@Supplied value must be a valid byte literal between -32768 and 32767 [Minimum abbreviation width with offset is %d");
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767 [%]@Supplied value must be a valid byte literal between -32768 and 32767 [Minimum abbreviation width with offset is %", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int int0 = 0;
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %offset is %d", 0, 3658);
      assertEquals("Minimum abbreviation width with offset is %offset is %d", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Minimum abbreviation width with offset is %offset is %d");
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(55, charBuffer0.capacity());
      assertEquals(55, charBuffer0.limit());
      assertEquals("Minimum abbreviation width with offset is %offset is %d", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(55, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(55, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width with offset is %offset is %d";
      char char0 = '2';
      String string1 = StringUtils.center("Minimum abbreviation width with offset is %offset is %d", 3658, '2');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(string1);
      assertTrue(boolean0);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.startsWith("Minimum abbreviation width with offset is %offset is %d", "Minimum abbreviation width with offset is %offset is %d");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.deleteWhitespace("Minimum abbreviation width with offset is %offset is %d");
      assertEquals("Minimumabbreviationwidthwithoffsetis%offsetis%d", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing("(r:q+Ws", "Minimum abbreviation width with offset is %offset is %d", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals("Minimum abbreviation width with offset is %offset is %d(r:q+Ws", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "Minimum abbreviation width with offset is %offset is %d", charSequenceArray0[0], 3658);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = StringUtils.unwrap("...", 'h');
      assertEquals("...", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("...", "...");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharBuffer charBuffer0 = StringUtils.getIfBlank((CharBuffer) null, supplier0);
      assertNull(charBuffer0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", 110);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "'c5");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.center("'c5", (-282), "");
      assertEquals("'c5", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("ig!a_9{&+b*");
      assertEquals("ig!a_9{&+b*", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.split("ig!a_9{&+b*");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'h';
      charArray0[1] = 'h';
      charArray0[2] = '9';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "...", charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'h', 'h', '9'}, charArray0);
      
      String string4 = StringUtils.center("ig!a_9{&+b*", 0, "WIsN>e");
      assertEquals("ig!a_9{&+b*", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("...", 0);
      assertEquals("...", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      Supplier<String> supplier1 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string6 = StringUtils.getIfEmpty("ig!a_9{&+b*", supplier1);
      assertEquals("ig!a_9{&+b*", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertNotNull(string6);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      int int1 = StringUtils.length("...");
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray3 = new String[9];
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      
      stringArray3[0] = "'c5";
      stringArray3[1] = "ig!a_9{&+b*";
      stringArray3[2] = "'c5";
      stringArray3[3] = "...";
      stringArray3[4] = "ig!a_9{&+b*";
      stringArray3[5] = "ig!a_9{&+b*";
      stringArray3[6] = "ig!a_9{&+b*";
      stringArray3[7] = "ig!a_9{&+b*";
      stringArray3[8] = "...";
      String[] stringArray4 = StringUtils.stripAll(stringArray3, "ig!a_9{&+b*");
      assertEquals(9, stringArray3.length);
      assertEquals(9, stringArray4.length);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray4);
      assertNotSame(stringArray4, stringArray1);
      assertNotSame(stringArray4, stringArray2);
      assertNotSame(stringArray4, stringArray0);
      assertNotSame(stringArray4, stringArray3);
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray1));
      assertFalse(stringArray4.equals((Object)stringArray2));
      assertFalse(stringArray4.equals((Object)stringArray0));
      assertFalse(stringArray4.equals((Object)stringArray3));
      assertNotNull(stringArray4);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("~", 10, 10);
      assertEquals("~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "~");
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("~", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[1] = (CharSequence) "iZp!nv|8~-_._OYYNMu";
      charSequenceArray0[2] = (CharSequence) "~";
      charSequenceArray0[4] = (CharSequence) "~";
      boolean boolean0 = StringUtils.containsWhitespace("\u0000");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat("iZp!nv|8~-_._OYYNMu", 10);
      assertEquals("iZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMu", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      String string3 = StringUtils.stripEnd("~", "\u0000");
      assertEquals("~", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string4 = StringUtils.getIfEmpty("~", supplier0);
      assertEquals("~", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOf((CharSequence) "\u0000", (-1), (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = StringUtils.repeat("Mini9*WH{N_", "Mini9*WH{N_", 2028);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf(string0, "Mini9*WH{N_", 2028);
      assertEquals(22297, int0);
      
      String string1 = StringUtils.substringBetween(string0, "B8tGy/!Q");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.split("Y}uG", "_{");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.wrap((String) null, 'S');
      assertNull(string2);
      
      String string3 = StringUtils.defaultString((String) null);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.countMatches((CharSequence) null, 'w');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("{", "_");
      assertEquals("_{_", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("_{_");
      assertEquals("_{_", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("_{_", "_{_");
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.split("Cloneable type ", "{");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 926;
      String string3 = StringUtils.join(floatArray0, 'z');
      assertEquals(1, floatArray0.length);
      assertEquals("926.0", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new float[] {926.0F}, floatArray0, 0.01F);
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.truncate("xGNH {f7wy5F')", 1163);
      assertEquals("xGNH {f7wy5F')", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad((String) null, 1416, "clone");
      assertNull(string5);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, "Array and element cannot both be nulllb");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharBuffer charBuffer0 = StringUtils.getIfEmpty((CharBuffer) null, supplier0);
      assertNull(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = StringUtils.stripEnd("qG@<7EKHqG@<7EKH", "_");
      assertEquals("qG@<7EKHqG@<7EKH", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 'e';
      charArray0[2] = '0';
      charArray0[4] = 'e';
      charArray0[5] = ')';
      charArray0[6] = 'n';
      String string1 = StringUtils.join(charArray0, '/');
      assertEquals(7, charArray0.length);
      assertEquals("0/e/0/\u0000/e/)/n", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'0', 'e', '0', '\u0000', 'e', ')', 'n'}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("qG@<7EKHqG@<7EKH", (-756), '#');
      assertEquals("qG@<7EKHqG@<7EKH", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replace((String) null, (String) null, "qG@<7EKHqG@<7EKH", (-756));
      assertNull(string3);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) "_");
      assertEquals(0, int0);
      
      String string4 = StringUtils.defaultString("qG@<7EKHqG@<7EKH");
      assertEquals("qG@<7EKHqG@<7EKH", string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Array and element cannot both be null", "Lm6RDw6KJnk2`is9");
      assertEquals("Array and element cannot both be null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("C<n7|l86iD`lafTv", "Lm6RDw6KJnk2`is9", (-1563));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.remove(" ", 'C');
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString((String) null);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, 2538, 'Q');
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '\\';
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-37.33496692024);
      String string0 = StringUtils.join(doubleArray0, '\\');
      assertEquals(3, doubleArray0.length);
      assertEquals("92.0\\1.0\\-37.33496692024", string0);
      assertArrayEquals(new double[] {92.0, 1.0, (-37.33496692024)}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(iterator0);
      
      String string1 = "SP,_P7,~L";
      String string2 = StringUtils.join(iterator0, "SP,_P7,~L");
      assertFalse(treeSet0.contains("SP,_P7,~L"));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric("92.0\u0001.0-37.33496692024");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceOnce("Zw", "Mj{b=G ", "s/Uqz<!lK9^5e");
      assertEquals("Zw", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = (-9);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Zw", (-9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("(r:qz+Ts", "(r:qz+Ts");
      assertEquals("(r:qz+Ts", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("clonkI~|", "The String must not be empty", "]eEI~|");
      assertNull(string1);
      
      String string2 = StringUtils.substring("The String must not be empty", (-336));
      assertEquals("The String must not be empty", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.center("_{", 7, '2');
      assertEquals("22_{222", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWith("clonkI~|", "(r:qz+Ts");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "(r:qz+Ts");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = Predicate.isEqual((Object) "(r:qz+Ts");
      assertNotSame(predicate3, predicate0);
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate1.or(predicate0);
      assertNotSame(predicate0, predicate3);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate1));
      assertNotNull(predicate4);
      
      Predicate<Object> predicate5 = predicate4.and(predicate0);
      assertNotSame(predicate0, predicate3);
      assertNotSame(predicate5, predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate1));
      assertNotNull(predicate5);
      
      Predicate<Object> predicate6 = predicate1.or(predicate0);
      assertNotSame(predicate0, predicate3);
      assertNotSame(predicate6, predicate4);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate3));
      assertNotNull(predicate6);
      
      Predicate<Locale.LanguageRange> predicate7 = Predicate.isEqual((Object) null);
      assertNotNull(predicate7);
      
      Predicate<Object> predicate8 = predicate1.or(predicate4);
      assertNotSame(predicate0, predicate3);
      assertNotSame(predicate4, predicate6);
      assertNotSame(predicate4, predicate8);
      assertNotSame(predicate8, predicate6);
      assertNotSame(predicate8, predicate4);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate3));
      assertFalse(predicate8.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate4));
      assertNotNull(predicate8);
      
      String string4 = StringUtils.left("(}.#,\"ACV {&9", (-336));
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.stripToNull("lb#<.${~pdPY");
      assertEquals("lb#<.${~pdPY", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.containsWhitespace("lb#<.${~pdPY");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = StringUtils.substringBetween("clonkI~|", "The String must not be empty", "]eEI~|");
      assertNull(string0);
      
      String string1 = StringUtils.center("_{", 7, '2');
      assertEquals("22_{222", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(7);
      assertEquals(7, (int)integer0);
      assertNotNull(integer0);
      
      Predicate<Locale.LanguageRange> predicate0 = Predicate.isEqual((Object) null);
      assertNotNull(predicate0);
      
      String string2 = StringUtils.left("(}.#,\"ACV {&9", (-336));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull("lb#<.${~pdPY");
      assertEquals("lb#<.${~pdPY", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsWhitespace("lb#<.${~pdPY");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.substring("Minimum abbreviation width is %d", 122);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("O7z7{");
      assertEquals("O7z7{", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[4] = 'P';
      charArray0[1] = 'm';
      charArray0[4] = 'A';
      String string1 = StringUtils.replace("_]", "|\"#r", (String) null);
      assertEquals("_]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-30);
      int int0 = StringUtils.countMatches((CharSequence) "0hDEhASKI5k-=CL", '-');
      assertEquals(1, int0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("0hDEhASKI5k-=CL"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'A';
      charArray0[1] = '-';
      int int1 = StringUtils.indexOfAny((CharSequence) "0hDEhASKI5k-=CL", charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(5, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'A', '-'}, charArray0);
      
      String string0 = StringUtils.stripEnd("LhkQ3EP:LIy==b(", "0hDEhASKI5k-=CL");
      assertEquals("LhkQ3EP:LIy==b(", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "LhkQ3EP:LIy==b(";
      stringArray0[1] = "LhkQ3EP:LIy==b(";
      stringArray0[2] = "B";
      stringArray0[3] = "LhkQ3EP:LIy==b(";
      stringArray0[4] = "LhkQ3EP:LIy==b(";
      stringArray0[5] = "LhkQ3EP:LIy==b(";
      stringArray0[6] = "Pp%}S8/$)u9n^TH";
      stringArray0[7] = "0hDEhASKI5k-=CL";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("LhkQ3EP:LIy==b(", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-492.60303890029644);
      String string0 = StringUtils.mid("?f>u@+*Ob", 1, 1);
      assertEquals("f", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("f", "f");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.lowerCase(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToEmpty("%!+I");
      assertEquals("%!+I", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripStart("g<", (String) null);
      assertEquals("g<", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = new Locale("+WALncp");
      assertEquals("+walncp", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("+walncp", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("g<", " vs ", 1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.unwrap("j", '!');
      assertEquals("j", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.getCommonPrefix(stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("g<", string5);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      int int0 = StringUtils.indexOf((CharSequence) "%!+I", 7, Integer.MIN_VALUE);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("g<", stringArray1, stringArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "";
      String string0 = StringUtils.deleteWhitespace("`E+Fod8Kt");
      assertEquals("`E+Fod8Kt", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("#<.${~pdPY", (-1));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("`E+Fod8Kt");
      assertFalse(boolean0);
      
      String string2 = StringUtils.deleteWhitespace("b-z{");
      assertEquals("b-z{", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isBlank(charSequenceArray0[1]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "IY:N~Q[])S";
      int int0 = (-1141);
      String string1 = StringUtils.right("IY:N~Q[])S", (-1141));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 28);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string2 = StringUtils.replaceIgnoreCase(">uaGDr QGSiZGDw", ">uaGDr QGSiZGDw", "IY:N~Q[])S");
      assertEquals("IY:N~Q[])S", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[0] = (CharSequence) "IY:N~Q[])S";
      charSequenceArray0[1] = (CharSequence) "IY:N~Q[])S";
      charSequenceArray0[2] = (CharSequence) "";
      short[] shortArray0 = new short[0];
      char char0 = 'G';
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'G', (-2202), (-1141));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2202
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "O7fG@t^~j+jq|!W]R";
      String string0 = StringUtils.leftPad("O7fG@t^~j+jq|!W]R", 8192, "O7fG@t^~j+jq|!W]R");
      assertNotNull(string0);
      
      String string1 = "Locale mst not be null";
      String string2 = StringUtils.strip("", "Locale mst not be null");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("BT%", (-1596));
      assertEquals("BT%", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.substringAfterLast("offset cannot be negative", "BT%");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      char[] charArray0 = new char[0];
      String string5 = StringUtils.join(charArray0, '4');
      assertEquals(0, charArray0.length);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string5);
      
      String string6 = "\\u";
      String string7 = StringUtils.substringBefore("00\u0000000z0z0)", string6);
      assertEquals("00\u0000000z0z0)", string7);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "BT%", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(int0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        linkedList0.listIterator((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = "Q*}[:~\\uk7PoA";
      String string1 = StringUtils.center(string0, 24, '2');
      assertEquals("22222Q*}[:~\\uk7PoA222222", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1.5587276F);
      floatArray0[2] = (float) 748;
      String string2 = StringUtils.join(floatArray0, '2');
      assertEquals(3, floatArray0.length);
      assertEquals("-1.558727620.02748.0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new float[] {(-1.5587276F), 0.0F, 748.0F}, floatArray0, 0.01F);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.truncate("", 24);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("", 748, "");
      assertEqualsstring4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "gaP|@K{vAG|!]RfY9");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharBuffer charBuffer0 = StringUtils.getIfEmpty((CharBuffer) null, supplier0);
      assertNull(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String string0 = "Q*}[:~\\uk7PoA";
      String string1 = StringUtils.center(string0, 24, '2');
      assertEquals("22222Q*}[:~\\uk7PoA222222", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.truncate("", 24);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("", 748, "");
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "gaP|@K{vAG|!]RfY9");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((CharBuffer) null).when(supplier0).get();
      CharBuffer charBuffer0 = StringUtils.getIfEmpty((CharBuffer) null, supplier0);
      assertNull(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = StringUtils.substring("gr%{", 0);
      assertEquals("gr%{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("gr%{", "gr%{", 0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "gr%{", (CharSequence) "fav_?7nk)", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) "gr%{", (CharSequence) "^");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      String string1 = StringUtils.defaultString("gr%{");
      assertEquals("gr%{", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      stack0.replaceAll(unaryOperator0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", "0o=<7JhwXUjcIJXMZ\u0005NiK18VOU");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'X');
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("0o", 1, 1);
      assertEquals("o", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripAccents("ch");
      assertEquals("ch", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsWhitespace("ch");
      assertFalse(boolean0);
      
      String string3 = StringUtils.wrapIfMissing("lb", "#<.${~pdPY");
      assertEquals("#<.${~pdPYlb#<.${~pdPY", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "#<.${~pdPYlb#<.${~pdPY");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = StringUtils.trimToNull("'U@%k,Fn|JnM~");
      assertEquals("'U@%k,Fn|JnM~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("'U@%k,Fn|JnM~", "'U@%k,Fn|JnM~");
      assertEquals("'U@%k,Fn|JnM~'U@%k,Fn|JnM~'U@%k,Fn|JnM~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("'U@%k,Fn|JnM~'U@%k,Fn|JnM~'U@%k,Fn|JnM~");
      assertFalse(boolean0);
      
      String string2 = StringUtils.capitalize("'U@%k,Fn|JnM~");
      assertEquals("'U@%k,Fn|JnM~", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "'U@%k,Fn|JnM~'U@%k,Fn|JnM~'U@%k,Fn|JnM~", '+');
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isNumericSpace("'U@%k,Fn|JnM~");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string3 = StringUtils.truncate("Supplied value must be a valid byte literal between -128 and 127: [", 0, 0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      charSequenceArray0[1] = (CharSequence) ".8";
      charSequenceArray0[2] = (CharSequence) "'U@%k,Fn|JnM~";
      boolean boolean2 = StringUtils.startsWithAny("'U@%k,Fn|JnM~'U@%k,Fn|JnM~'U@%k,Fn|JnM~", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isNumeric("'U@%k,Fn|JnM~'U@%k,Fn|JnM~'U@%k,Fn|JnM~");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string4 = StringUtils.joinWith(">", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(">.8>'U@%k,Fn|JnM~", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      String string0 = StringUtils.stripEnd("qG@<7EKHqG@<7EKH", "_");
      assertEquals("qG@<7EKHqG@<7EKH", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 'e';
      charArray0[2] = '0';
      charArray0[4] = 'e';
      charArray0[0] = ')';
      charArray0[6] = 'n';
      boolean boolean0 = StringUtils.containsWhitespace("qG@<7EKHqG@<7EKH");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "_";
      int int0 = StringUtils.indexOfAny((CharSequence) "qG@<7EKHqG@<7EKH", (CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("qG@<7EKHqG@<7EKH");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.join((Iterable<?>) null, 'Z');
      assertNull(string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "qG@<7EKHqG@<7EKH", (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Minimum abbreviation width with offset is %d");
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(44, charBuffer0.limit());
      assertEquals(44, charBuffer0.length());
      assertEquals(44, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("Minimum abbreviation width with offset is %d", charBuffer0.toString());
      assertEquals(44, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "The Array must not b~";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[2] = (CharSequence) "The Array must not b~";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "The Array must not b~", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.CR;
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("\r");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.startsWith("...t is %d", "...t is %d");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Integer integer0 = new Integer((-22));
      assertEquals((-22), (int)integer0);
      assertNotNull(integer0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate1.or(predicate0);
      assertNotSame(predicate4, predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate1));
      assertNotNull(predicate4);
      
      Predicate<Locale.LanguageRange> predicate5 = Predicate.isEqual((Object) "The Array must not b~");
      assertNotNull(predicate5);
      
      Predicate<Object> predicate6 = predicate2.or(predicate4);
      assertNotSame(predicate6, predicate4);
      assertNotSame(predicate6, predicate2);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate6);
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate1));
      assertNotNull(predicate6);
      
      String string2 = StringUtils.left(" v ", (-22));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull(" v ");
      assertEquals("v", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.containsWhitespace("The Array must not b~");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) " ";
      String string0 = StringUtils.prependIfMissing(" ", "", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      Class<CharBuffer> class0 = CharBuffer.class;
      ServiceLoader<CharBuffer> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.nio.CharBuffer]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      boolean boolean1 = StringUtils.isMixedCase(" ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase((String) null, " ", " ");
      assertNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) " ", (-1), (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("ck%{%K0xQfG", " ", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String string0 = StringUtils.stripEnd("qG@<7EKHqG@<7EKH", "_");
      assertEquals("qG@<7EKHqG@<7EKH", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = 'e';
      charArray0[2] = '0';
      charArray0[4] = 'e';
      charArray0[5] = ')';
      charArray0[6] = 'n';
      String string1 = StringUtils.join(charArray0, '/');
      assertEquals(7, charArray0.length);
      assertEquals("0/e/0/\u0000/e/)/n", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'0', 'e', '0', '\u0000', 'e', ')', 'n'}, charArray0);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("0/e/0/\u0000/e/)/n");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.toRootUpperCase("Search and Replace array lengths don't match: ");
      assertEquals("SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("]");
      assertEquals("]", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isEmpty("qG@<7EKHqG@<7EKH");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "SEARCH AND REPLACE ARRAY LENGTHS DON'T MATCH: ", "qG@<7EKHqG@<7EKH");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.chomp("_", "]");
      assertEquals("_", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.removeFirst((String) null, "/!D_CW&T!f<I0D");
      assertNull(string5);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'e';
      longArray0[1] = (long) 'e';
      longArray0[2] = (long) ')';
      longArray0[3] = 0L;
      longArray0[4] = (long) '0';
      longArray0[5] = (long) '/';
      longArray0[6] = (long) 'e';
      longArray0[7] = 131L;
      longArray0[8] = (long) '/';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'e', (-2), 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Integer integer0 = new Integer(587);
      assertEquals(587, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = vector0.add((Object) integer0);
      assertTrue(vector0.contains(587));
      assertFalse(vector0.contains(""));
      assertEquals("[587]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      
      boolean boolean1 = vector0.add((Object) "");
      assertTrue(vector0.contains(""));
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[587, ]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string1 = StringUtils.abbreviate("", "5'~h8:F5Tm", 587);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean3 = StringUtils.isWhitespace("");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.join((Iterable<?>) vector0, "5'~h8:F5Tm");
      assertTrue(vector0.contains(""));
      assertFalse(vector0.contains("5'~h8:F5Tm"));
      assertEquals(2, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[587, ]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals("5875'~h8:F5Tm", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = StringUtils.leftPad("~", 748, "~");
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string0);
      assertNotNull(string0);
      
      String string1 = "', has a length less than 2";
      char char0 = 'C';
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("', has a length less than 2", 'C');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = 57;
      // Undeclared exception!
      StringUtils.containsAny((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      String string0 = StringUtils.join((List<?>) stack0, (String) null, 110, 2);
      assertFalse(stack0.contains(string0));
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.unwrap("Exception cloning Cloneable type ", "p`X");
      assertEquals("Exception cloning Cloneable type ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = ',';
      charArray0[2] = 'S';
      String string0 = StringUtils.replaceOnce("pA7PSHb5x", "%]@Supplied value must be a valid byte literal between -32768 and 32767: [", "q+^U6;@j-HD");
      assertEquals("pA7PSHb5x", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "pA7PSHb5x", (CharSequence) "pA7PSHb5x", 12);
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("q+^U6;@j-HD", 12, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "O7fG@t^~j+jq|!W]R";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("O7fG@t^~j+jq|!W]R"));
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertFalse(treeSet0.contains("O7fG@t^~j+jq|!W]R"));
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "");
      assertFalse(treeSet0.contains(string0));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("", 161, '_');
      assertEquals("_________________________________________________________________________________________________________________________________________________________________", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("_________________________________________________________________________________________________________________________________________________________________");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceOnce("\"7Fpuws(pWD|Gm", "){2;P", "Search and Replace array lengths don't match: ");
      assertEquals("\"7Fpuws(pWD|Gm", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Z[!w", (CharSequence) "\"7Fpuws(pWD|Gm", 12);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.abbreviate("", 108, (-1));
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The StrWW %!+I");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeStart("The StrWW %!+I", "The StrWW %!+I");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The StrWW %!+I", (CharSequence) "");
      assertEquals(14, int0);
      
      String string1 = StringUtils.uncapitalize("a|AXx");
      assertEquals("a|AXx", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.split("a|AXx", "");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.strip("pU8p9ob");
      assertEquals("pU8p9ob", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnce("pU8p9ob", "The StrWW %!+I", "a|AXx");
      assertEquals("pU8p9ob", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "pU8p9ob", (CharSequence) "pU8p9ob");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "a|AXx", (CharSequence) "pU8p9ob", 15);
      assertEquals(7, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((Collection<? extends String>) treeSet0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string0 = StringUtils.difference("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "", 8);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) '$';
      doubleArray0[1] = (double) '$';
      String string1 = StringUtils.join(doubleArray0, ';');
      assertEquals(2, doubleArray0.length);
      assertEquals("36.0;36.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new double[] {36.0, 36.0}, doubleArray0, 0.01);
      assertNotNull(string1);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertFalse(treeSet0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertNotNull(iterator0);
      
      String string2 = StringUtils.join(iterator0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(treeSet0.contains(string1));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnce("", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "5w/af[h8lP2s,^,+");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean[] booleanArray0 = new boolean[0];
      String string4 = StringUtils.join(booleanArray0, '$');
      assertEquals(0, booleanArray0.length);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "5w/af[h8lP2s,^,+", (CharSequence) "5w/af[h8lP2s,^,+", 54);
      assertEquals(0, int0);
      
      String string5 = StringUtils.abbreviate("o90qqb\"'l,^o*Mh+pT,C#tdY4@k!k", 2421, 2421);
      assertEquals("o90qqb\"'l,^o*Mh+pT,C#tdY4@k!k", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.stripStart("~", "~");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[4] = (CharSequence) "~";
      String string1 = StringUtils.strip("offset cannot be negative", "");
      assertEquals("offset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("~");
      assertEquals("~", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      String string3 = StringUtils.substring("Search and Replace array lengths don't match: ", 47, (-11));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("~", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.appendIfMissing("offset cannot be negative", "Search and Replace array lengths don't match: ", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("offset cannot be negativeSearch and Replace array lengths don't match: ", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isNotBlank("offset cannot be negativeSearch and Replace array lengths don't match: ");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.substring(">}avFr\"=T+=E<$p8", 9, 9);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.rotate("", (-1042));
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.substringsBetween("", "i@\"  \"BOmLOSTM", "");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Minimum abbreviation width with offset is %d");
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(44, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("Minimum abbreviation width with offset is %d", charBuffer0.toString());
      assertEquals(44, charBuffer0.length());
      assertEquals(44, charBuffer0.limit());
      assertEquals(44, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "The Array must not b~";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[2] = (CharSequence) "The Array must not b~";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "The Array must not b~", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.center("Minimum abbreviation width with offset is %d", 10, '2');
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is %d");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.startsWith("...t is %d", "...t is %d");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Integer integer0 = new Integer((-22));
      assertEquals((-22), (int)integer0);
      assertNotNull(integer0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate1.or(predicate0);
      assertNotSame(predicate4, predicate2);
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertNotNull(predicate4);
      
      Predicate<Locale.LanguageRange> predicate5 = Predicate.isEqual((Object) "The Array must not b~");
      assertNotNull(predicate5);
      
      Predicate<Object> predicate6 = predicate2.or(predicate4);
      assertNotSame(predicate6, predicate4);
      assertNotSame(predicate6, predicate2);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate6);
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertNotNull(predicate6);
      
      String string2 = StringUtils.left(" vs ", (-22));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate("", (-125));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.prependIfMissing("Minimum abbreviation width with offset is %d", "", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("Minimum abbreviation width with offset is %d", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int0 = StringUtils.compare("The Array must not b~", "+WALncp18DS+p3k+WALncp18DS+p3k", true);
      assertEquals(41, int0);
      
      String string5 = StringUtils.wrapIfMissing("*cXK8", '^');
      assertEquals("^*cXK8^", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isMixedCase(" vs ");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Integer> priorityQueue0 = new PriorityQueue<Integer>(29, comparator0);
      assertFalse(priorityQueue0.contains(29));
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, "]");
      assertFalse(priorityQueue0.contains(29));
      assertEquals(0, priorityQueue0.size());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-492.60303890029644);
      String string0 = StringUtils.mid("?f>u@+*Ob", 1, 1);
      assertEquals("f", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("f", "f");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.lowerCase(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("f", 6);
      assertEquals("     f", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.normalizeSpace("     f");
      assertEquals("f", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, 2599, 'A');
      assertNull(string4);
      
      String string5 = StringUtils.substringBefore("^>\"8/<$+Rd", 8192);
      assertEquals("^>\"8/<$+Rd", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isBlank("     f");
      assertFalse(boolean0);
      
      String string6 = StringUtils.repeat('*', 6);
      assertEquals("******", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      boolean boolean1 = StringUtils.isNotBlank((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("duSHl$8V/2", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.difference("org.apache.commons.lang3.LocaleUtils", "r0mb{sTT(ywZ6|P");
      assertEquals("r0mb{sTT(ywZ6|P", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfter("", ", '");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.leftPad(", Length: 0", 11, '4');
      assertEquals(", Length: 0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeFirst("UJK5Y?32k(-1", "67\"l0uMDBnyU");
      assertEquals("UJK5Y?32k(-1", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "UJK5Y?32k(-1";
      String string2 = StringUtils.replaceOnceIgnoreCase("`bB<Li A>STr", "", ", Length: 0");
      assertEquals("`bB<Li A>STr", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.center("UJK5Y?32k(-1", 11, (String) null);
      assertEquals("UJK5Y?32k(-1", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "UJK5Y?32k(-1";
      boolean boolean0 = StringUtils.isNotBlank(", Length: 0");
      assertTrue(boolean0);
      
      String string4 = StringUtils.wrapIfMissing((String) null, ", Length: 0");
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = '4';
      String string5 = StringUtils.join(charArray0, 'a', 11, 11);
      assertEquals(5, charArray0.length);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertArrayEquals(new char[] {'4', '4', '4', '4', '4'}, charArray0);
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isAlpha("67\"l0uMDBnyU");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String[] stringArray0 = StringUtils.substringsBetween("6(r:q+Ws", "6(r:q+Ws", "xl");
      assertNull(stringArray0);
      
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.upperCase("N;{iGMvdh=Iu#wu`");
      assertEquals("N;{IGMVDH=IU#WU`", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = StringUtils.strip("n;$#DlV9*WH", "n;$#DlV9*WH");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "n;$#DlV9*WH", (CharSequence) "", (-488));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      String string2 = StringUtils.join(doubleArray0, '$');
      assertEquals(1, doubleArray0.length);
      assertEquals("1.0", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertNotNull(string2);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, "1.0");
      assertFalse(treeSet0.contains(string0));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isNumeric("n;$#DlV9*WH");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.replaceOnce(" ", "edMvsQ3", "Strings must not be null");
      assertEquals(" ", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string5 = StringUtils.join(booleanArray0, '$');
      assertEquals(2, booleanArray0.length);
      assertEquals("false$false", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertNotNull(string5);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "false$false", (CharSequence) "", 12);
      assertEquals(11, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Strings must not be null", 2421, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      String string0 = StringUtils.replaceOnce("Minimum abbreviation width with offset is %d", "){2;P", "\"7Fpuws(pWD|Gm");
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "){2;P", 0);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviate("Search and Replace array lengths don't match: ", 12, 108);
      assertEquals("Search and Replace array lengths don't match: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      
      boolean boolean0 = enumSet0.add(locale_Category0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      assertFalse(boolean0);
      
      String string0 = StringUtils.join(iterator0, 'g');
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      assertEquals("DISPLAY", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "DISPLAY";
      stringArray0[1] = "DISPLAY";
      stringArray0[2] = "DISPLAY";
      stringArray0[3] = "DISPLAY";
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "DISPLAY";
      stringArray1[1] = "DISPLAY";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("DISPLAY", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 4 vs 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("O7z7{");
      assertEquals("O7z7{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[2] = 'Y';
      charArray0[4] = 'A';
      boolean boolean0 = StringUtils.startsWith("O7z7{", "O7z7{");
      assertTrue(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("O7z7{");
      assertEquals("O7z7{", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chop(" l=K2p.k#iV");
      assertEquals(" l=K2p.k#i", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.isMixedCase("O7z7{");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.substringBefore("O7z7{", "O7z7{");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "O7z7{", (CharSequence) "O7z7{");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Iterator<Locale.LanguageRange> iterator0 = (Iterator<Locale.LanguageRange>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((Object) null).when(iterator0).next();
      String string4 = StringUtils.join(iterator0, 'Y');
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = "7yU.`x<jt{PNKf[N-";
      String string6 = ")[>eT!_";
      String string7 = StringUtils.substringAfter(string5, string6);
      assertEquals("", string7);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "The character ");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "The character ");
      assertNotSame(predicate1, predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate3.or(predicate0);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate4, predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertNotNull(predicate4);
      
      Predicate<Object> predicate5 = predicate4.negate();
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate4, predicate2);
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate0));
      assertNotNull(predicate5);
      
      Locale locale0 = Locale.US;
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.FRENCH;
      assertEquals("", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      Locale locale2 = Locale.ENGLISH;
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("en", locale2.getLanguage());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      
      String string0 = locale2.toLanguageTag();
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("en", locale2.getLanguage());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("en", string0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(string0);
      
      String string1 = locale0.getScript();
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertEquals("", string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("The character ", locale1);
      assertEquals("", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals("the character ", string2);
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad(",B:?tTH!DCF?&", (-1941), ",B:?tTH!DCF?&");
      assertEquals(",B:?tTH!DCF?&", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("The character ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWith(" ", " ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.deleteWhitespace(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) " ";
      String string1 = StringUtils.prependIfMissing(" ", "", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.compare("", "", true);
      assertEquals(0, int0);
      
      String string2 = StringUtils.wrapIfMissing(" ", 'z');
      assertEquals("z z", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isMixedCase(" ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd((String) null, "...t is %d");
      assertNull(string1);
      
      String string2 = StringUtils.repeat('Z', 26);
      assertEquals("ZZZZZZZZZZZZZZZZZZZZZZZZZZ", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "Minimum abbreviation width with offset is %d");
      assertNull(stringArray0);
      
      String string3 = StringUtils.getDigits((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.leftPad("ZZZZZZZZZZZZZZZZZZZZZZZZZZ", 557, '(');
      assertEqualsstring4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) null, (String) null);
      assertNull(string5);
      
      int int0 = StringUtils.compare((String) null, "Min~", true);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.repeat("Min~", "Minimum abbreviation width with offset is %d", 26);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.wrapIfMissing("+WALncp18DS+p3k", "+WALncp18DS+p3k");
      assertEquals("+WALncp18DS+p3k", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "ZZZZZZZZZZZZZZZZZZZZZZZZZZ", (CharSequence) "/WW ");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string8 = StringUtils.getDigits((String) null);
      assertNull(string8);
      
      Locale locale0 = Locale.US;
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale1 = Locale.KOREA;
      assertEquals("ko", locale1.getLanguage());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("KR", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("ko_KR", locale1.toString());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      Locale.setDefault(locale_Category0, locale1);
      assertEquals("ko", locale1.getLanguage());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("KR", locale1.getCountry());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("ko_KR", locale1.toString());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      
      String string9 = locale0.toLanguageTag();
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotSame(locale0, locale1);
      assertEquals("en-US", string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(string9);
      
      String string10 = locale0.getScript();
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertNotSame(locale0, locale1);
      assertEquals("", string10);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(string10);
      
      Locale locale2 = Locale.ENGLISH;
      assertEquals("", locale2.getCountry());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.toString());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      
      String string11 = StringUtils.lowerCase((String) null, locale2);
      assertEquals("", locale2.getCountry());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.toString());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNull(string11);
      
      String string12 = StringUtils.rightPad("oK0iq{^8^!yk&`wd", (-1), string6);
      assertEquals("oK0iq{^8^!yk&`wd", string12);
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string9));
      assertNotNull(string12);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) null);
      assertFalse(boolean0);
      
      String string13 = StringUtils.repeat("zM.'%gsok", "Minimum abbreviation width with offset is %d", (-1628));
      assertEquals("", string13);
      assertFalse(string13.equals((Object)string2));
      assertFalse(string13.equals((Object)string6));
      assertFalse(string13.equals((Object)string12));
      assertFalse(string13.equals((Object)string7));
      assertFalse(string13.equals((Object)string4));
      assertFalse(string13.equals((Object)string0));
      assertFalse(string13.equals((Object)string9));
      assertNotNull(string13);
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) '^';
      floatArray0[1] = (float) 798;
      floatArray0[2] = (float) 798;
      floatArray0[3] = (float) 798;
      floatArray0[4] = (float) 798;
      floatArray0[5] = (float) 798;
      floatArray0[6] = (float) 798;
      String string0 = StringUtils.join(floatArray0, ' ');
      assertEquals(9, floatArray0.length);
      assertEquals("94.0 798.0 798.0 798.0 798.0 798.0 798.0 0.0 0.0", string0);
      assertArrayEquals(new float[] {94.0F, 798.0F, 798.0F, 798.0F, 798.0F, 798.0F, 798.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "94.0 798.0 798.0 798.0 798.0 798.0 798.0 0.0 0.0";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.chomp("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      floatArray0[6] = (float) '@';
      floatArray0[6] = (float) ' ';
      charArray0[2] = '=';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '='}, charArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\n", "org.apache.commons.lang3.ObjectUtils$Null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.capitalize("p{1nCombiningDiacriticalMarki}+");
      assertEquals("P{1nCombiningDiacriticalMarki}+", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("p{1nCombiningDiacriticalMarki}+");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.toRootLowerCase("p{1nCombiningDiacriticalMarki}+");
      assertEquals("p{1ncombiningdiacriticalmarki}+", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "p{InCombiningDiacriticalMarks}+", "\n", 0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "O7fG@t^~j+jq|!W]R";
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("O7fG@t^~j+jq|!W]R"));
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertFalse(treeSet0.contains("O7fG@t^~j+jq|!W]R"));
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "");
      assertFalse(treeSet0.contains("O7fG@t^~j+jq|!W]R"));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("", 161, '_');
      assertEquals("_________________________________________________________________________________________________________________________________________________________________", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("_________________________________________________________________________________________________________________________________________________________________");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceOnce("\"7Fpuws(pWD|Gm", "){2;P", "Search and Replace array lengths don't match: ");
      assertEquals("\"7Fpuws(pWD|Gm", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Zw", (CharSequence) "\"7Fpuws(pWD|Gm", 12);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.abbreviate("", 108, (-1));
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '\\';
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-37.33496692024);
      String string0 = StringUtils.join(doubleArray0, '\\');
      assertEquals(3, doubleArray0.length);
      assertEquals("92.0\\1.0\\-37.33496692024", string0);
      assertArrayEquals(new double[] {92.0, 1.0, (-37.33496692024)}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, "SP,_P7,~L");
      assertFalse(treeSet0.contains(string1));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("92.0\u0001.0-37.33496692024");
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceOnce("Zw", "Mj{b=G ", "s/Uqz<!lK9^5e");
      assertEquals("Zw", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Zw", 12);
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("The", 12, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("O7z7{");
      assertEquals("O7z7{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[2] = 'Y';
      charArray0[4] = 'A';
      boolean boolean0 = StringUtils.startsWith("O7z7{", "O7z7{");
      assertTrue(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("O7z7{");
      assertEquals("O7z7{", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chop(" l=K2p.k#iV");
      assertEquals(" l=K2p.k#i", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.isMixedCase("O7z7{");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.substringBefore("O7z7{", "O7z7{");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "O7z7{", (CharSequence) "O7z7{");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Iterator<Locale.LanguageRange> iterator0 = (Iterator<Locale.LanguageRange>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iterator0).hasNext();
      String string4 = StringUtils.join(iterator0, 'Y');
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = StringUtils.replacePattern("{}", "pU8", "");
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "{}";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "{}", 42);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.containsWhitespace("");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(1114111);
      assertFalse(linkedHashSet0.contains("{}"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean4 = linkedHashSet0.add("{}");
      assertTrue(linkedHashSet0.contains("{}"));
      assertFalse(linkedHashSet0.contains("pU8"));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      
      boolean boolean5 = linkedHashSet0.add("pU8");
      assertTrue(linkedHashSet0.contains("{}"));
      assertFalse(linkedHashSet0.contains(""));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(boolean5);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      
      String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, 'E');
      assertTrue(linkedHashSet0.contains("{}"));
      assertFalse(linkedHashSet0.contains(""));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertEquals("{}EpU8", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing(" ", 'E');
      assertEquals("E E", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("pU8");
      assertEquals("pU8", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int[] intArray0 = StringUtils.toCodePoints("E E");
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {69, 32, 69}, intArray0);
      assertNotNull(intArray0);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) 1114111;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 42;
      longArray0[4] = 0L;
      String string4 = StringUtils.join(longArray0, 'E', 51, 0);
      assertEquals(5, longArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertArrayEquals(new long[] {(-1L), 1114111L, (-1L), 42L, 0L}, longArray0);
      assertNotNull(string4);
      
      String string5 = StringUtils.joinWith("pU8", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("{}", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd((String) null, "...t is %d");
      assertNull(string1);
      
      String string2 = StringUtils.repeat('Z', 1292);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "Minimum abbreviation width with offset is %d");
      assertNull(stringArray0);
      
      String string3 = StringUtils.getDigits((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.join((Object[]) null, (String) null);
      assertNull(string4);
      
      int int0 = StringUtils.compare((String) null, "Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d", true);
      assertEquals((-1), int0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate1.negate();
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate4, predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertNotNull(predicate4);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      String string5 = StringUtils.join(booleanArray0, '^', 1292, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertNotNull(string5);
      
      String string6 = StringUtils.left((String) null, 697);
      assertNull(string6);
      
      String string7 = StringUtils.stripToNull((String) null);
      assertNull(string7);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Minimum abbreviation width with offset is %d");
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasArray());
      assertEquals(44, charBuffer0.length());
      assertEquals(44, charBuffer0.remaining());
      assertEquals(44, charBuffer0.capacity());
      assertEquals(44, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("Minimum abbreviation width with offset is %d", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "The Array must not b~";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[2] = (CharSequence) "The Array must not b~";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "The Array must not b~", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.center("Minimum abbreviation width with offset is %d", 10, '2');
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is %d");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.startsWith("...t is %d", "...t is %d");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Integer integer0 = new Integer((-22));
      assertEquals((-22), (int)integer0);
      assertNotNull(integer0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate1.or(predicate0);
      assertNotSame(predicate4, predicate2);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate0));
      assertNotNull(predicate4);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      Predicate<Object> predicate5 = Predicate.isEqual((Object) locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertNotSame(predicate5, predicate0);
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertNotNull(predicate5);
      
      Predicate<Object> predicate6 = predicate5.negate();
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertNotSame(predicate5, predicate0);
      assertNotSame(predicate6, predicate1);
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate3));
      assertNotNull(predicate6);
      
      Predicate<Object> predicate7 = predicate2.or(predicate4);
      assertNotSame(predicate7, predicate2);
      assertNotSame(predicate7, predicate4);
      assertNotSame(predicate0, predicate5);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate2, predicate7);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate4, predicate7);
      assertNotSame(predicate4, predicate2);
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate0));
      assertNotNull(predicate7);
      
      Predicate<Object> predicate8 = predicate3.negate();
      assertNotSame(predicate8, predicate1);
      assertNotSame(predicate8, predicate6);
      assertNotSame(predicate0, predicate5);
      assertNotSame(predicate1, predicate8);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate2, predicate7);
      assertNotSame(predicate2, predicate4);
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate3));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate7));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate7));
      assertNotNull(predicate8);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      String string2 = StringUtils.join(booleanArray0, ':', 0, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0));
      assertNotNull(string2);
      
      String string3 = StringUtils.left(" vs ", (-22));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToNull(" vs ");
      assertEquals("vs", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.containsWhitespace("The Array must not b~");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String string5 = StringUtils.unwrap("", "Object varargs must not be null");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripAccents("e @vcaP\f%dq0V");
      assertEquals("e @vcaP\f%dq0V", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("null/empty items", 0, ':');
      assertEquals("null/empty items", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("null/empty items", "Strings must not be null", 0, 0);
      assertEquals("Strings must not be nullnull/empty items", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("X&_C@s<Dhz)7Nh;XvV#V!V`@2,s1");
      assertEquals("X&_C@s<Dhz)7Nh;XvV#V!V`@2,s1", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "H/:?y]w_,w9C";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[4] = (Object) "X&_C@s<Dhz)7Nh;XvV#V!V`@2,s1";
      objectArray0[5] = (Object) "e @vcaP\f%dq0V";
      objectArray0[6] = (Object) "null/empty items";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[7] = object1;
      String string4 = StringUtils.joinWith("5l}", objectArray0);
      assertEquals(8, objectArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.containsWhitespace("_}`?0X");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.defaultIfEmpty((String) null, "u[);Po-(t{x ");
      assertEquals("u[);Po-(t{x ", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = StringUtils.strip("Search and Replace array lengths don't match: ", " 0XLdM]e,");
      assertEquals("Search and Replace array lengths don't match:", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Search and Replace array lengths don't match:", (CharSequence) "Search and Replace array lengths don't match:");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Search and Replace array lengths don't match:", (CharSequence) "Search and Replace array lengths don't match:");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) " 0XLdM]e,";
      charSequenceArray0[1] = (CharSequence) "Search and Replace array lengths don't match:";
      charSequenceArray0[2] = (CharSequence) " 0XLdM]e,";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = "(r:q+Ws";
      int int2 = (-523);
      String string2 = StringUtils.replaceIgnoreCase("Search and Replace array lengths don't match:", " 0XLdM]e,", "(r:q+Ws", (-523));
      assertEquals("Search and Replace array lengths don't match:", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = "@fk^hd]/KY&Q,$e+";
      String string4 = StringUtils.leftPad("@fk^hd]/KY&Q,$e+", (-1));
      assertEquals("@fk^hd]/KY&Q,$e+", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " 0XLdM]e,", (CharSequence) "@fk^hd]/KY&Q,$e+");
      assertEquals((-1), int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      String string5 = StringUtils.substringBetween("%!+IjZFcC,A:&V6Z\"#", " 0XLdM]e,");
      assertNull(string5);
      
      String string6 = StringUtils.remove("by/z[hi99'/", "@fk^hd]/KY&Q,$e+");
      assertEquals("by/z[hi99'/", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (-1);
      longArray0[2] = (long) (-523);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'I', (-523), 102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -523
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      String string0 = StringUtils.getDigits("{}");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "{}", (CharSequence) "{}", 0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "{}";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "{}";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string1 = StringUtils.substringBetween("JD6@CXAe", (String) null, "JD6@CXAk]_(z#");
      assertNull(string1);
      
      String string2 = StringUtils.stripAccents("JD6@CXAe");
      assertEquals("JD6@CXAe", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean[] booleanArray0 = new boolean[23];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      String string3 = StringUtils.join(booleanArray0, 'l');
      assertEquals(23, booleanArray0.length);
      assertEquals("trueltrueltrueltruelfalselfalselfalselfalselfalselfalselfalselfalselfalselfalselfalselfalselfalselfalselfalselfalselfalselfalselfalse", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      
      EnumSet<Locale.Category> enumSet1 = enumSet0.clone();
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet1.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotNull(enumSet1);
      
      Iterator<Locale.Category> iterator0 = enumSet1.iterator();
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet1.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertNotNull(iterator0);
      
      String string4 = StringUtils.join(iterator0, (String) null);
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet1.contains(locale_Category0));
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals("DISPLAY", string4);
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      assertNotNull(object2);
      
      objectArray0[2] = object2;
      String string0 = StringUtils.join(objectArray0, '7');
      assertEquals(3, objectArray0.length);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("java.lang.Object@72e671b37java.lang.Object@ea0ce277java.lang.Object@5cc1405e", 2);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("java.lang.Object@72e671b37java.lang.Object@ea0ce277java.lang.Object@5cc1405e");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("java.lang.Object@72e671b37java.lang.Object@ea0ce277java.lang.Object@5cc1405e", "maxWith cannot be negative");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "The StrWW %!+IThe StrWW %!+I");
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsWhitespace("The StrWW %!+IThe StrWW %!+I");
      assertTrue(boolean0);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.length());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      boolean boolean1 = stack0.add(charBuffer0);
      assertTrue(stack0.contains(charBuffer0));
      assertEquals("[\u0000\u0000]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.length());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = stack0.add(charBuffer0);
      assertTrue(stack0.contains(charBuffer0));
      assertEquals("[\u0000\u0000, \u0000\u0000]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(2, charBuffer0.capacity());
      assertEquals(2, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer0.length());
      assertEquals("\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(2, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Iterator<CharBuffer> iterator0 = stack0.iterator();
      assertTrue(stack0.contains(charBuffer0));
      assertEquals("[\u0000\u0000, \u0000\u0000]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, "PhO1RRRFI2Z0,");
      assertTrue(stack0.contains(charBuffer0));
      assertEquals("[\u0000\u0000, \u0000\u0000]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals("\u0000\u0000PhO1RRRFI2Z0,\u0000\u0000", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = StringUtils.removeStart("~", "~");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceFirst("]}3~/=s;$CzuqXi~I", "~", "Array and element cannot both be nulllb");
      assertEquals("]}3Array and element cannot both be nulllb/=s;$CzuqXi~I", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "~";
      charSequenceArray0[1] = (CharSequence) "]}3Array and element cannot both be nulllb/=s;$CzuqXi~I";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "Array and element cannot both be nulllb";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "b4B2.[2-^y", 476);
      assertNull(stringArray0);
      
      boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("~", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.appendIfMissing("o90qqb\"'l,", "~", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("o90qqb\"'l,~", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "~", (CharSequence) "~");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("o90qqb\"'l,");
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {111, 57, 48, 113, 113, 98, 34, 39, 108, 44}, intArray0);
      assertNotNull(intArray0);
      
      boolean boolean2 = StringUtils.equalsAny("o90qqb\"'l,", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isWhitespace("~");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String string1 = StringUtils.uncapitalize("o90qqb\"'l,");
      assertEquals("o90qqb\"'l,", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.truncate("0o", 4, 2607);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBefore("Locale must not be null", "o90qqb\"'l,");
      assertEquals("Locale must not be null", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.normalizeSpace("e|[Y#g.vL)_b");
      assertEquals("e|[Y#g.vL)_b", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "Locale must not be null";
      stringArray0[2] = "o90qqb\"'l,";
      String string5 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1329;
      doubleArray0[2] = (double) 1329;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Hi", "JXMZ\u0005NiK18VOU", (-475));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("H", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.countMatches((CharSequence) "JXMZ\u0005NiK18VOU", (CharSequence) "H");
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.swapCase("Hi");
      assertEquals("hI", string0);
      assertFalse(string0.equals((Object)charSequence0));
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissing("Rr]SK~Sg%gBRr]SK~Sg%gB", "Rr]SK~Sg%gBRr]SK~Sg%gB", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("Rr]SK~Sg%gBRr]SK~Sg%gB", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join(byteArray0, '>');
      assertEquals(0, byteArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("...", '>');
      assertEquals(">...>", string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("Rr]SK~Sg%gBRr]SK~Sg%gB", "(r:q+Ws(r:q+Ws");
      assertEquals("Rr]SK~Sg%gBRr]SK~Sg%gB", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int1 = StringUtils.compare("org.apache.commons.lang3.RegExUtils", (String) null, false);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Locale locale0 = new Locale("(r:q+Ws(r:q+Ws", "hI", "...");
      assertEquals("...", locale0.getVariant());
      assertEquals("(r:q+ws(r:q+ws_HI_...", locale0.toString());
      assertEquals("(r:q+ws(r:q+ws", locale0.getLanguage());
      assertEquals("HI", locale0.getCountry());
      assertNotNull(locale0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.removeIgnoreCase("~", "~");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("~", "~", 15);
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.substring("hndIA3S]`", 3);
      assertEquals("IA3S]`", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "~", "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string3 = StringUtils.rightPad("", (int) '\u0000', "{N_");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((Collection<? extends String>) treeSet0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(treeSet0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertFalse(priorityQueue0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertEquals(0, priorityQueue0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "", 18);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.prependIfMissing("org.apache.commons.lang3.LocaleUtils", "", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("org.apache.commons.lang3.LocaleUtils", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.wrapIfMissing("org.apache.commons.lang3.LocaleUtils", '4');
      assertEquals("4org.apache.commons.lang3.LocaleUtils4", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isMixedCase("org.apache.commons.lang3.LocaleUtils");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.trimToEmpty("O7z7{");
      assertEquals("O7z7{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[6];
      charArray0[4] = 'P';
      charArray0[1] = 'm';
      charArray0[2] = 'Y';
      charArray0[4] = 'A';
      boolean boolean0 = StringUtils.startsWith("O7z7{", "O7z7{");
      assertTrue(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("ch");
      assertEquals("ch", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chop(" l=K2p.k#iV");
      assertEquals(" l=K2p.k#i", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.isMixedCase("O7z7{");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.substringBefore("ch", "O7z7{");
      assertEquals("ch", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = StringUtils.replaceAll("u", "", "u");
      assertEquals("uuu", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "uuu";
      stringArray0[1] = "uuu";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "uuu";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("uuu", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "uuu");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfter("Cannot store ", "uuu");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("Threshold must not be negative");
      assertEquals("threshold must not be negative", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("threshold must not be negative", stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("", "u");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int[] intArray0 = new int[0];
      String string4 = StringUtils.join(intArray0, 'P', 32, (-1));
      assertEquals(0, intArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceIgnoreCase((String) null, "Supplied value must be a valid byte literal between -128 and 127: [", (String) null);
      assertNull(string5);
      
      String string6 = StringUtils.chomp("Cannot store ", (String) null);
      assertEquals("Cannot store ", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      int int0 = 3;
      Integer integer2 = new Integer(3);
      assertEquals(3, (int)integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int0));
      assertNotNull(integer2);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer0;
      integerArray0[1] = integer2;
      String string0 = StringUtils.join(integerArray0);
      assertEquals(2, integerArray0.length);
      assertEquals("03", string0);
      assertNotNull(string0);
      
      String string1 = "Strings must not be null";
      String string2 = StringUtils.strip("null/empty items", "Strings must not be null");
      assertEquals("/empty", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = "\\p{InCombiningDiacriticalMarks}+";
      String string4 = StringUtils.substringAfter("03", "p{InCombiningDiacriticalMarks}+");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int1 = StringUtils.ordinalIndexOf("/empty", "~", int0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string5 = StringUtils.substringBetween("p{InCombiningDiacriticalMarks}+", "03", ")~!;3+");
      assertNull(string5);
      
      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        ByteBuffer.wrap((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.appendIfMissing("jZF", "", stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("jZF", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "jZF", (CharSequence) "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAny("jZF", stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.uncapitalize("4,kI8S");
      assertEquals("4,kI8S", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Minimum abbreviation width with offset is %d");
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(44, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("Minimum abbreviation width with offset is %d", charBuffer0.toString());
      assertEquals(44, charBuffer0.length());
      assertEquals(44, charBuffer0.remaining());
      assertEquals(44, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "The Array must not b~";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[2] = (CharSequence) "The Array must not b~";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "The Array must not b~", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.center("Minimum abbreviation width with offset is %d", 10, '2');
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is %d");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.startsWith("...t is %d", "...t is %d");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Integer integer0 = new Integer((-22));
      assertEquals((-22), (int)integer0);
      assertNotNull(integer0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate1.or(predicate0);
      assertNotSame(predicate4, predicate2);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertNotNull(predicate4);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Predicate<Object> predicate5 = Predicate.isEqual((Object) locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotSame(predicate5, predicate0);
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate4));
      assertNotNull(predicate5);
      
      Predicate<Object> predicate6 = predicate0.negate();
      assertNotSame(predicate6, predicate1);
      assertNotSame(predicate0, predicate5);
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertNotNull(predicate6);
      
      Predicate<Object> predicate7 = predicate6.or(predicate5);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotSame(predicate5, predicate0);
      assertNotSame(predicate6, predicate1);
      assertNotSame(predicate7, predicate2);
      assertNotSame(predicate7, predicate4);
      assertNotSame(predicate0, predicate5);
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate3));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertNotNull(predicate7);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(697);
      assertEquals(0, charBuffer1.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(697, charBuffer1.remaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(697, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(697, charBuffer1.length());
      assertEquals(697, charBuffer1.capacity());
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      boolean boolean3 = StringUtils.isWhitespace(charBuffer1);
      assertEquals(0, charBuffer1.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(697, charBuffer1.remaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(697, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(697, charBuffer1.length());
      assertEquals(697, charBuffer1.capacity());
      assertFalse(boolean3);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string2 = StringUtils.wrapIfMissing("(r:q+Ws", "6");
      assertEquals("6(r:q+Ws6", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.chomp("...t is %d");
      assertEquals("...t is %d", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean4 = StringUtils.isEmpty("6(r:q+Ws6");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      
      boolean boolean5 = StringUtils.containsNone((CharSequence) "(r:q+Ws", "Minimum abbreviation width with offset is %d");
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) charBuffer1, (CharSequence) "...t is %d");
      assertEquals(0, charBuffer1.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(697, charBuffer1.remaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(697, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(697, charBuffer1.length());
      assertEquals(697, charBuffer1.capacity());
      assertEquals(0, int0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      
      boolean boolean6 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean6);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = StringUtils.rightPad("~B?s", (-25));
      assertEquals("~B?s", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotSame(locale0, locale1);
      assertFalse(boolean0);
      assertTrue(locale0.equals((Object)locale1));
      
      String string1 = locale0.getDisplayVariant();
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotSame(locale0, locale1);
      assertEquals("", string1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.upperCase("~B?s", locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotSame(locale0, locale1);
      assertEquals("~B?S", string2);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      PriorityQueue<Locale.LanguageRange> priorityQueue0 = new PriorityQueue<Locale.LanguageRange>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertFalse(linkedHashSet0.contains(locale0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean1 = linkedHashSet0.add(locale1);
      assertTrue(linkedHashSet0.contains(locale0));
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TWN", locale1.getISO3Country());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(boolean1);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale1.equals((Object)locale0));
      assertFalse(boolean1 == boolean0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedHashSet0);
      assertTrue(linkedHashSet0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[2] = 'k';
      charArray0[6] = '\u0000';
      charArray0[8] = '\u0000';
      String string3 = StringUtils.unwrap("X&_C@s<Dhz)7Nh;", 'f');
      assertEquals("X&_C@s<Dhz)7Nh;", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "~B?s", (CharSequence) "X&_C@s<Dhz)7Nh;");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)24;
      shortArray0[1] = (short)2237;
      String string4 = StringUtils.join(shortArray0, 'k', 0, (-282));
      assertEquals(2, shortArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertArrayEquals(new short[] {(short)24, (short)2237}, shortArray0);
      assertNotNull(string4);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "~B?s";
      charSequenceArray0[2] = (CharSequence) "|#=h.&YxxH'^LE";
      boolean boolean2 = StringUtils.startsWithAny("X&_C@s<Dhz)7Nh;", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string5 = StringUtils.rightPad("", 0);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      String string0 = StringUtils.join(doubleArray0, 'Y');
      assertEquals(1, doubleArray0.length);
      assertEquals("1.0", string0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, "IoXF");
      assertFalse(treeSet0.contains(string1));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("1.0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = StringUtils.strip("n;$#DlV9*WH", "n;$#DlV9*WH");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "n;$#DlV9*WH", (CharSequence) "", (-488));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      int int1 = StringUtils.compareIgnoreCase("", (String) null, false);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) " ", 2929);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) "");
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string2 = StringUtils.substringAfterLast((String) null, (-1));
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = StringUtils.removeStart("~", "~");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("u*ef$/n8}w1%[>#'", 'K');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("Cloneable type ", "~", false);
      assertEquals((-27), int0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertFalse(arrayList0.contains(int0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string2 = StringUtils.join((List<?>) arrayList0, 'A', 13, (-813));
      assertFalse(arrayList0.contains(13));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "", (-27));
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = StringUtils.replaceAll("u", "", "u");
      assertEquals("uuu", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("/WW ", 730, '.');
      assertEqualsstring1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      StringUtils.removeFirst("VZJbaHNoP>/3~*J", "uuu");
      StringUtils.replaceOnceIgnoreCase("", "`bB<Li A>STr", "VZJbaHNoP>/3~*J");
      StringUtils.center((String) null, 730, "");
      float[] floatArray0 = new float[7];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 730;
      floatArray0[2] = (-1.0F);
      floatArray0[3] = (float) 'Y';
      floatArray0[4] = (float) 'Y';
      floatArray0[5] = (float) 730;
      floatArray0[6] = (float) '.';
      StringUtils.join(floatArray0, '.');
      StringUtils.center((String) null, 730, "U}NNC_");
      StringUtils.substringAfter("0.0.730.0.-1.0.89.0.89.0.730.0.46.0", (-834));
      StringUtils.leftPad("0.0.730.0.-1.0.89.0.89.0.730.0.46.0", 3262, '.');
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("~", "~", 15);
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("~");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "~");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.substring("'tGR8(", 748);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("", "_");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.LF;
      assertEquals("\n", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.rightPad("", 748, "{N_");
      assertEquals("{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "_", (CharSequence) "{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = StringUtils.leftPad("org.apache.commons.lang3.LocaleUtils", 36, (String) null);
      assertEquals("org.apache.commons.lang3.LocaleUtils", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("~", (String) null, true);
      assertEquals(1, int0);
      
      String string1 = StringUtils.wrap("~", "~");
      assertEquals("~~~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      int int1 = StringUtils.indexOfAny((CharSequence) "~~~", charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'3', '3', '0', '0', '0', '0'}, charArray0);
      
      String[] stringArray0 = StringUtils.split("~~~");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.rightPad((String) null, (int) '0');
      assertNull(string2);
      
      String string3 = StringUtils.replaceOnce("0wg$4dw9?S+Rh+Q#", ")p?[~lG[eQ", "_H;h\"X");
      assertEquals("0wg$4dw9?S+Rh+Q#", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "~", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(91, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string4 = StringUtils.substringAfterLast("Minimum abbreviation width with offset is %d", "");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = StringUtils.leftPad("org.apache.commons.lang3.LocaleUtils", 36, (String) null);
      assertEquals("org.apache.commons.lang3.LocaleUtils", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("~", (String) null, true);
      assertEquals(1, int0);
      
      String string1 = StringUtils.deleteWhitespace("~");
      assertEquals("~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = '_';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      int int1 = StringUtils.indexOfAny((CharSequence) "~", charArray0);
      assertEquals(6, charArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'3', '_', '0', '0', '0', '0'}, charArray0);
      
      String[] stringArray0 = StringUtils.split("~");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.rightPad((String) null, (int) '0');
      assertNull(string2);
      
      String string3 = StringUtils.replaceOnce("0wg$4dw9?S+Rh+Q#", ")p?[~lG[eQ", "_H;h\"X");
      assertEquals("0wg$4dw9?S+Rh+Q#", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "~", (CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(91, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string4 = StringUtils.substringAfterLast("+WALncp18DS+p3k+WALncp18DS+p3k", "");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("$d# (x!", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "$d# (x!";
      charSequenceArray0[1] = (CharSequence) "$d# (x!";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      String string1 = StringUtils.join(charArray0, 't');
      assertEquals(2, charArray0.length);
      assertEquals("\\t\\", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'\\', '\\'}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      char[] charArray1 = new char[6];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 't';
      charArray1[1] = '\\';
      charArray1[2] = 't';
      charArray1[3] = 't';
      charArray1[4] = 't';
      charArray1[5] = '\\';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray1);
      assertEquals(6, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertEquals((-1), int0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'t', '\\', 't', 't', 't', '\\'}, charArray1);
      
      String string3 = StringUtils.substringAfterLast("ppJ4)s", 659);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfAnyBut(charSequenceArray0[2], charArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(2, charArray0.length);
      assertNotSame(charArray0, charArray1);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertFalse(charArray0.equals((Object)charArray1));
      assertArrayEquals(new char[] {'\\', '\\'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfterLast("=%%", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '4';
      charArray0[1] = 'Q';
      charArray0[2] = '0';
      charArray0[3] = '4';
      charArray0[4] = '4';
      charArray0[5] = '4';
      String string1 = StringUtils.join(charArray0, '0');
      assertEquals(6, charArray0.length);
      assertEquals("40Q00040404", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'4', 'Q', '0', '4', '4', '4'}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("jH.7a69@;Uc5K73iGo", "]");
      assertEquals("jH.7a69@;Uc5K73iGo", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare(" in an array of ", "jH.7a69@;Uc5K73iGo", false);
      assertEquals((-74), int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.wrapIfMissing("Arguments cannot both be null\n", 'i');
      assertEquals("iArguments cannot both be null\ni", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isMixedCase("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      String string0 = StringUtils.join((List<?>) stack0, (String) null, 110, 9);
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      boolean boolean0 = stack0.add("");
      assertTrue(stack0.contains(string0));
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      
      boolean boolean1 = stack0.add("");
      assertTrue(stack0.contains(""));
      assertFalse(stack0.isEmpty());
      assertEquals("[, ]", stack0.toString());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "0xC~L`/2gL");
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.unwrap("Exception cloning Cloneable type ", "p`X");
      assertEquals("Exception cloning Cloneable type ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      double[] doubleArray0 = new double[0];
      String string2 = StringUtils.join(doubleArray0, 'S');
      assertEquals(0, doubleArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-1457), (-1348));
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.leftPad("", (-1348), "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("O7z7{");
      assertEquals("O7z7{", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToEmpty("");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.stripStart("O7z7{", "");
      assertEquals("O7z7{", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = new Locale("O7z7{");
      assertEquals("", locale1.getCountry());
      assertEquals("o7z7{", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("o7z7{", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string6 = locale0.getDisplayVariant(locale1);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("o7z7{", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("o7z7{", locale1.toString());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string6);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertNotNull(string6);
      
      Locale locale2 = Locale.JAPANESE;
      assertEquals("ja", locale2.toString());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("", locale2.getCountry());
      assertEquals("jpn", locale2.getISO3Language());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      
      String string7 = locale1.getDisplayScript();
      assertEquals("", locale1.getCountry());
      assertEquals("o7z7{", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("o7z7{", locale1.toString());
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals("", string7);
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertNotNull(string7);
      
      String string8 = locale0.getDisplayVariant((Locale) null);
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals("", string8);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertNotNull(string8);
      
      Locale locale3 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("", locale3.getVariant());
      assertEquals("zh_TW", locale3.toString());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("TWN", locale3.getISO3Country());
      assertEquals("TW", locale3.getCountry());
      assertNotSame(locale3, locale1);
      assertSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertNotNull(locale3);
      
      Locale locale4 = locale3.stripExtensions();
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("", locale3.getVariant());
      assertEquals("zh_TW", locale3.toString());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("TWN", locale3.getISO3Country());
      assertEquals("TW", locale3.getCountry());
      assertEquals("zh", locale4.getLanguage());
      assertEquals("zho", locale4.getISO3Language());
      assertEquals("zh_TW", locale4.toString());
      assertEquals("TWN", locale4.getISO3Country());
      assertEquals("", locale4.getVariant());
      assertEquals("TW", locale4.getCountry());
      assertNotSame(locale3, locale1);
      assertSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertSame(locale3, locale4);
      assertNotSame(locale4, locale1);
      assertNotSame(locale4, locale2);
      assertSame(locale4, locale0);
      assertSame(locale4, locale3);
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale4.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale2));
      assertNotNull(locale4);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "+WALncp", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-492.60303890029644);
      String string0 = StringUtils.mid("?f>u@+*Ob", 1, 1);
      assertEquals("f", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("f", "f");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.lowerCase(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("f", 6);
      assertEquals("     f", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.normalizeSpace("     f");
      assertEquals("f", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      char[] charArray0 = new char[2];
      charArray0[1] = 'A';
      int int1 = StringUtils.indexOfAny((CharSequence) " ", charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'\u0000', 'A'}, charArray0);
      
      String string4 = StringUtils.center("Strings must not be null", (-1));
      assertEquals("Strings must not be null", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      String string5 = StringUtils.leftPad(" ", 3833, "Strings must not be null");
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "Strings must not be null");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = StringUtils.ordinalIndexOf(" ", "Strings must not be null", 78);
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-492.60303890029644);
      String string0 = StringUtils.mid("?f>u@+*Ob", 1, 1);
      assertEquals("f", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("f", "f");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.lowerCase(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("f", 6);
      assertEquals("     f", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.normalizeSpace("     f");
      assertEquals("f", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'P';
      charArray0[1] = 'A';
      int int1 = StringUtils.indexOfAny((CharSequence) " ", charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'P', 'A'}, charArray0);
      
      String string4 = StringUtils.center("Strings must not be null", (-1));
      assertEquals("Strings must not be null", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)34;
      byteArray0[6] = (byte)22;
      byteArray0[7] = (byte)22;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'M', (int) (byte) (-34), (int) (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -34
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-197), 2331);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.leftPad("", 2331, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("+WALncp");
      assertEquals("+WALncp", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "+WALncp", 'b');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(11, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int2 = StringUtils.countMatches(charSequenceArray0[0], (CharSequence) ".8");
      assertEquals(11, charSequenceArray0.length);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      double double0 = StringUtils.getJaroWinklerDistance(string1, "+WALncp");
      assertEquals(0.0, double0, 0.01);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      
      int int3 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(11, charSequenceArray0.length);
      assertEquals(0, int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = StringUtils.strip("n;$#DlV9*WH", "n;$#DlV9*WH");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = (-488);
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "n;$#DlV9*WH", (CharSequence) "", (-488));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      int int2 = StringUtils.compareIgnoreCase("", (String) null, false);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string2 = StringUtils.replaceChars("Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null, "");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", 2929);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string4 = StringUtils.removeStart("%!+IjZFcC,A:&V6Z\"#EdK4XEH*~67", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("%!+IjZFcC,A:&V6Z\"#EdK4XEH*~67", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      char[] charArray0 = new char[12];
      charArray0[0] = '(';
      charArray0[1] = '/';
      charArray0[2] = '>';
      charArray0[3] = 'T';
      charArray0[4] = '+';
      String string5 = StringUtils.join(charArray0, '/', 160, 7);
      assertEquals(12, charArray0.length);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat("Aborting to protect against StackOverflowError - output of one loop is the input of another", "}lav([v:sXQ[$<0o", 99);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("Q", (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String string0 = StringUtils.getDigits("{}");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.strip("`K(7&e");
      assertEquals("`K(7&e", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      String string2 = StringUtils.upperCase("!jgrXzHwuy47C@R", locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("!JGRXZHWUY47C@R", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "`K(7&e", (CharSequence) "!JGRXZHWUY47C@R");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.add("The String must not be empty");
      assertTrue(treeSet0.contains("The String must not be empty"));
      assertTrue(boolean0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertTrue(treeSet0.contains("The String must not be empty"));
      assertNotNull(iterator0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.wrapIfMissing("+WALncp18DS+p3k+WALncp18DS+p3k", "(r:q+Ws");
      assertEquals("(r:q+Ws+WALncp18DS+p3k+WALncp18DS+p3k(r:q+Ws", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isEmpty("(r:q+Ws");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "]eE]_(z#", "]eE]_(z#");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "(r:q+Ws", (CharSequence) "]eE]_(z#");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "~";
      String string1 = StringUtils.leftPad("~", 0);
      assertEquals("~", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "~";
      charSequenceArray0[1] = (CharSequence) "";
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'p', (-2), 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[0] = 35L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 3443;
      longArray0[5] = 35L;
      longArray0[4] = (long) (-1238);
      longArray0[5] = 35L;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      String string0 = StringUtils.join(longArray0, 'X', (-128), (-1238));
      assertEquals(8, longArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new long[] {35L, 0L, 3443L, 0L, (-1238L), 35L, 0L, 0L}, longArray0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "{N_";
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAlphaSpace(charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 3443;
      intArray0[1] = (-128);
      intArray0[2] = 0;
      intArray0[3] = 64;
      intArray0[4] = (int) 'X';
      String string1 = StringUtils.join(intArray0, '7', 14, (-384));
      assertEquals(5, intArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new int[] {3443, (-128), 0, 64, 88}, intArray0);
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'z', 476, 1135);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 476
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      stack0.replaceAll(unaryOperator0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("'bk?m", "_");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("(}{6RNPp<)Ooa", 'P');
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string0 = "o=wQ,*3$ <4";
      // Undeclared exception!
      try { 
        StringUtils.removePattern("o=wQ,*3$ <4", "(}{6RNPp<)Ooa");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed counted closure near index 4
         // (}{6RNPp<)Ooa
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("$v3<s]qdlI?>$_", ",.q9G'-IEL>Ecxgvih", 0);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("$", charSequence0);
      assertNotNull(charSequence0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Comparator should not be null.", "Strings must not be null", 0);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.toRootUpperCase(" vs ");
      assertEquals(" VS ", string0);
      assertFalse(string0.equals((Object)charSequence0));
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) " VS ", (CharSequence) "$v3<s]qdlI?>$_");
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip(",.q9G'-IEL>Ecxgvih");
      assertEquals(",.q9G'-IEL>Ecxgvih", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceEach("nP]DiCUUpELOkIB(i6", stringArray0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals("nP]DiCUUpELOkIB(i6", string2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Comparator should not be null.", (CharSequence) "");
      assertEquals(30, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-704.88);
      long[] longArray0 = new long[3];
      longArray0[0] = (long) 'b';
      longArray0[1] = (long) 'b';
      longArray0[2] = (long) 'X';
      String string0 = StringUtils.rightPad((String) null, (int) 'b', 'Y');
      assertNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'z';
      charArray0[2] = 'z';
      charArray0[3] = 'g';
      charArray0[4] = 'b';
      charArray0[5] = 'Y';
      charArray0[6] = 'b';
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 13);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.normalizeSpace((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha(charSequenceArray0[0]);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.swapCase("s");
      assertEquals("S", string2);
      assertNotNull(string2);
      
      int int2 = StringUtils.indexOf(charSequenceArray0[0], charSequenceArray0[1]);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)45;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)48;
      shortArray0[3] = (short)0;
      shortArray0[5] = (short)0;
      String string0 = StringUtils.substringBefore("253953-91", (int) (short)0);
      assertEquals("253953-91", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.normalizeSpace("~hW@nEy");
      assertEquals("~hW@nEy", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("Le=8LM2");
      assertFalse(boolean0);
      
      String string2 = StringUtils.swapCase("Le=8LM2");
      assertEquals("lE=8lm2", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOf((CharSequence) "Le=8LM2", (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "~", 108, 108);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.reverseDelimited(",.q9G'-IEL>Ecxgvih", '8');
      assertEquals(",.q9G'-IEL>Ecxgvih", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "RBOq>1vzAG)pX", (CharSequence) "RBOq>1vzAG)pX");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "~";
      stringArray0[1] = ",.q9G'-IEL>Ecxgvih";
      stringArray0[2] = ",.q9G'-IEL>Ecxgvih";
      stringArray0[4] = "~";
      stringArray0[5] = ",.q9G'-IEL>Ecxgvih";
      stringArray0[6] = ",.q9G'-IEL>Ecxgvih";
      stringArray0[7] = "|=kurT*2ni#f;";
      String string1 = StringUtils.replaceEach("|=kurT*2ni#f;", stringArray0, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("|=kurT*2ni#f;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 938L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) '8';
      longArray0[4] = (long) 108;
      longArray0[5] = (long) (-1);
      longArray0[6] = (long) '8';
      longArray0[7] = (long) '8';
      longArray0[8] = (long) (-1);
      String string2 = StringUtils.join(longArray0, ' ');
      assertEquals(9, longArray0.length);
      assertEquals("938 0 0 56 108 -1 56 56 -1", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new long[] {938L, 0L, 0L, 56L, 108L, (-1L), 56L, 56L, (-1L)}, longArray0);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "org.apache.commons.lang3.ObjectUtils");
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.join((boolean[]) null, ' ');
      assertNull(string3);
      
      int int2 = StringUtils.indexOf((CharSequence) ",.q9G'-IEL>Ecxgvih", (CharSequence) null);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      String string0 = StringUtils.join((boolean[]) null, 'u');
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null, 110);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited(",.q9G'-IEL>Ecxgvih", '8');
      assertEquals(",.q9G'-IEL>Ecxgvih", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "RBOq>1vzAG)pX", (CharSequence) "RBOq>1vzAG)pX");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[1] = ",.q9G'-IEL>Ecxgvih";
      stringArray0[2] = ",.q9G'-IEL>Ecxgvih";
      stringArray0[3] = "Array and element cannot both be null";
      stringArray0[6] = ",.q9G'-IEL>Ecxgvih";
      stringArray0[7] = "|=kurT*2ni#f;";
      String string1 = StringUtils.replaceEach("|=kurT*2ni#f;", stringArray0, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("|=kurT*2ni#f;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      long[] longArray0 = new long[9];
      longArray0[0] = 938L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) '8';
      longArray0[4] = (long) 108;
      longArray0[6] = (long) '8';
      String string2 = StringUtils.join(longArray0, ' ');
      assertEquals(9, longArray0.length);
      assertEquals("938 0 0 56 108 0 56 0 0", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new long[] {938L, 0L, 0L, 56L, 108L, 0L, 56L, 0L, 0L}, longArray0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("`E+Fod8Kt", 2212);
      assertEquals("`E+Fod8Kt", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("`E+Fod8Kt");
      assertFalse(boolean0);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.right((String) null, 10);
      assertNull(string3);
      
      String string4 = StringUtils.join((Object[]) null, "bVP3kyRjzV(", (-1943), 2212);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String string0 = StringUtils.wrap("l[Ry^VTP)nvm", 'n');
      assertEquals("nl[Ry^VTP)nvmn", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      String string1 = StringUtils.center("", 3098, "nl[Ry^VTP)nvmn");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.rightPad((String) null, (-1), '4');
      assertNull(string2);
      
      String string3 = StringUtils.center(string1, 4, 'Y');
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.difference("nl[Ry^VTP)nvmn", "\";(VNy$X4n2MGDr");
      assertEquals("\";(VNy$X4n2MGDr", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAlphanumeric("\";(VNy$X4n2MGDr");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.unwrap("fW7*?{*B,xw1FRo1YY;", "&R8sT%eAX>N^^B");
      assertEquals("fW7*?{*B,xw1FRo1YY;", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.toRootUpperCase("\n");
      assertEquals("\n", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      int int0 = StringUtils.countMatches((CharSequence) "\n", 'v');
      assertEquals(0, int0);
      
      String string7 = StringUtils.removeEnd("\r", (String) null);
      assertEquals("\r", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "l[Ry^VTP)nvm", (CharSequence) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = StringUtils.wrap("l[Ry^VTP)nvm", 'n');
      assertEquals("nl[Ry^VTP)nvmn", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      String string1 = StringUtils.center("", 3098, "nl[Ry^VTP)nvmn");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.center(string1, 4, 'Y');
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("nl[Ry^VTP)nvmn", "\";(VNy$X4n2MGDr");
      assertEquals("\";(VNy$X4n2MGDr", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumeric("\";(VNy$X4n2MGDr");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.unwrap("fW7*?{*B,xw1FRo1YY;", "&R8sT%eAX>N^^B");
      assertEquals("fW7*?{*B,xw1FRo1YY;", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.substring("", 3);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.appendIfMissing(string1, "", (CharSequence[]) null);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) string6, (CharSequence) "nl[Ry^VTP)nvmn");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-79);
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "~", (CharSequence) "~");
      assertEquals(0, int0);
      
      String string0 = StringUtils.defaultIfBlank("~", "Object varargs must not be null");
      assertEquals("~", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = Integer.MIN_VALUE;
      String string0 = StringUtils.center("{_", Integer.MIN_VALUE, "U,Z8z]6{/5!e@==K 0");
      assertEquals("{_", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.ArrayUtils", '!');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringBetween("$J7iYA?LmCX_;)QuGM", "WL(Q-:{^O");
      assertNull(string1);
      
      String string2 = StringUtils.rightPad("$J7iYA?LmCX_;)QuGM", 1306, (String) null);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "{_", (CharSequence) " ");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      String string0 = StringUtils.wrap("l[Ry^VTP)nvm", 'n');
      assertEquals("nl[Ry^VTP)nvmn", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      String string1 = StringUtils.center("", 3098, "nl[Ry^VTP)nvmn");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.rightPad((String) null, (-1), '4');
      assertNull(string2);
      
      String string3 = StringUtils.center(string1, 4, 'Y');
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.difference("nl[Ry^VTP)nvmn", "\";(VNy$X4n2MGDr");
      assertEquals("\";(VNy$X4n2MGDr", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAlphanumeric("\";(VNy$X4n2MGDr");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.unwrap("fW7*?{*B,xw1FRo1YY;", "&R8sT%eAX>N^^B");
      assertEquals("fW7*?{*B,xw1FRo1YY;", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.substring("", 3);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.appendIfMissing(string1, "", (CharSequence[]) null);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string5));
      assertFalse(string1.equals((Object)string6));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) string7, (CharSequence) "nl[Ry^VTP)nvmn");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst(".3 pwZ$ -qYtPx^MTT:", "^|e3j7 Jizmp%y`?P.", ".3 pwZ$ -qYtPx^MTT:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      String string0 = StringUtils.truncate("The character ", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 921, (-119));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd("+ZW#~:e= ", "+ZW#~:e= ");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("The Array must not be null", (-1), "");
      assertEquals("The Array must not be null", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "The Array must not be null", (CharSequence) "The Array must not be null");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.join((float[]) null, 'q');
      assertNull(string3);
      
      int int2 = StringUtils.ordinalIndexOf("The character ", "", 65);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Integer integer0 = new Integer(10);
      assertEquals(10, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = vector0.add(integer0);
      assertTrue(vector0.contains(10));
      assertEquals("[10]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      String string0 = StringUtils.substring("p{InCombiningDiacriticalMarks}+", 121);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("", "", 121);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("h");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.unwrap("", 'Q');
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = StringUtils.truncate("", 1417);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 1417);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.mid("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", 2, 2);
      assertEquals("~~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", (-2147483612));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", 'c');
      assertEquals(2, int0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add("Locale must not be null");
      assertTrue(linkedList0.contains("Locale must not be null"));
      assertFalse(linkedList0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      String string2 = StringUtils.join((List<?>) linkedList0, 'T', (-647), (-647));
      assertTrue(linkedList0.contains("Locale must not be null"));
      assertFalse(linkedList0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertEquals(1, linkedList0.size());
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("Strings must not be null", 105, 3908);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("jZFcC,A:&V6Z\"#", "**=J!23#W&6");
      assertEquals("jZFcC,A:&V6Z\"#", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("...t is %d", 10);
      assertEquals("...t is %d", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsWhitespace("jZFcC,A:&V6Z\"#");
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "jZFcC,A:&V6Z\"#";
      stringArray0[1] = "Minimum abbreviation width with offset is %d";
      stringArray0[2] = "Strings must not be null";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string5 = StringUtils.join(booleanArray0, 'q');
      assertEquals(1, booleanArray0.length);
      assertEquals("false", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("Strings must not be null", stringArray0);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", "6");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWith(" ", " ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.deleteWhitespace(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) " ";
      String string1 = StringUtils.prependIfMissing(" ", "6", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches(charSequenceArray0[0], (CharSequence) "");
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.trim("6");
      assertEquals("6", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("6", charSequenceArray0[0]);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.chomp((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, "={)+rET=o3 Z,Fh@bo", 1280, 32);
      assertNull(string0);
      
      String string1 = StringUtils.repeat('H', 1280);
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) string1);
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) string1;
      charSequenceArray0[3] = (CharSequence) "={)+rET=o3 Z,Fh@bo";
      charSequenceArray0[4] = (CharSequence) string1;
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'H';
      charArray0[1] = 'H';
      charArray0[2] = 'H';
      charArray0[3] = 'H';
      charArray0[4] = 'H';
      charArray0[5] = 'H';
      charArray0[6] = 'r';
      charArray0[7] = 'H';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'H', 'H', 'H', 'H', 'H', 'H', 'r', 'H'}, charArray0);
      
      String string2 = StringUtils.substringAfter("GM;>BZ'", "={)+rET=o3 Z,Fh@bo");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("", string1, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
      assertEquals("", string3);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeFirst("GM;>BZ'", "");
      assertEquals("GM;>BZ'", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad((String) null, 32, 'H');
      assertNull(string5);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(charSequenceArray0[3], "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("GOy/?6P", "");
      assertEquals("GOy/?6P", string0);
      assertNotNull(string0);
      
      String string1 = "offset cannot be negative";
      String string2 = StringUtils.stripToEmpty("offset cannot be negative");
      assertEquals("offset cannot be negative", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("GOy/?6P", '%');
      assertEquals("%GOy/?6P%", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("GOy/?6P", "GOy/?6P");
      assertEquals("GOy/?6P", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      char[] charArray0 = new char[0];
      char char0 = 'K';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'K', 114, 1431655765);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 114
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = ',';
      charArray0[2] = 'S';
      charArray0[3] = 'F';
      charArray0[4] = '~';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("P,SF~", string0);
      assertArrayEquals(new char[] {'P', ',', 'S', 'F', '~'}, charArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "P,SF~", charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'P', ',', 'S', 'F', '~'}, charArray0);
      
      String string1 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase("P,SF~");
      assertFalse(boolean0);
      
      String string2 = StringUtils.overlay((String) null, "P,SF~", 0, 0);
      assertNull(string2);
      
      String string3 = StringUtils.trimToEmpty((String) null);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'P', ',', 'S', 'F', '~'}, charArray0);
      
      boolean boolean2 = StringUtils.isAlphanumeric("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      String string0 = StringUtils.reverse("hCo[+qg9vfstKX");
      assertEquals("XKtsfv9gq+[oCh", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("|o=Q|l<t'");
      assertEquals("|o=Q|l<t'", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "XKtsfv9gq+[oCh", charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "hCo[+qg9vfstKX";
      String string2 = StringUtils.appendIfMissing("o90qqb\"'l,", "|o=Q|l<t'", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("o90qqb\"'l,|o=Q|l<t'", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "|o=Q|l<t'", charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("XKtsfv9gq+[oCh");
      assertEquals(14, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean2 = StringUtils.equalsAny("o90qqb\"'l,", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray0 = StringUtils.split("o90qqb\"'l,", "|o=Q|l<t'");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean3 = StringUtils.isWhitespace("|o=Q|l<t'");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.abbreviate((String) null, 28, 0);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, '^');
      assertEquals(0, floatArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[2] = (CharSequence) "Arguments cannot both be null";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = ';';
      charArray0[2] = '^';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Arguments cannot both be null", charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'^', ';', '^'}, charArray0);
      
      long[] longArray0 = new long[0];
      String string1 = StringUtils.join(longArray0, ';');
      assertEquals(0, longArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString((String) null);
      assertEquals("", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-492.60303890029644);
      doubleArray0[1] = 837.898;
      String string0 = StringUtils.mid("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", (-73), (-73));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", '-');
      assertEquals(0, int0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)102;
      String string1 = StringUtils.join(shortArray0, 'W', 856, 0);
      assertEquals(1, shortArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new short[] {(short)102}, shortArray0);
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) linkedList0;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) 837.898;
      objectArray0[6] = (Object) "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";
      objectArray0[7] = (Object) linkedList0;
      String string2 = StringUtils.join(objectArray0, "");
      assertEquals(8, objectArray0.length);
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[]837.898~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[]", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeAll((String) null, ".2I_Fq5b");
      assertNull(string3);
      
      String string4 = StringUtils.join(doubleArray0, 'Q');
      assertEquals(9, doubleArray0.length);
      assertEquals("-492.60303890029644Q837.898Q0.0Q0.0Q0.0Q0.0Q0.0Q0.0Q0.0", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertArrayEquals(new double[] {(-492.60303890029644), 837.898, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[]837.898~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[]";
      charSequenceArray0[1] = (CharSequence) "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[]837.898~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[]";
      charSequenceArray0[2] = (CharSequence) "-492.60303890029644Q837.898Q0.0Q0.0Q0.0Q0.0Q0.0Q0.0Q0.0";
      charSequenceArray0[3] = (CharSequence) ".2I_Fq5b";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.lastIndexOfAny("MECx3S@9 *$pm,&", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(15, int0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      String string0 = StringUtils.wrapIfMissing((String) null, '\u000F');
      assertNull(string0);
      
      String string1 = StringUtils.capitalize("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("1j^14YPT!/", 2699);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d", 'V');
      assertEquals("VMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dV", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = StringUtils.replacePattern((String) null, "", "*Q]}J6`XtQ[wTfEA}/");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "*Q]}J6`XtQ[wTfEA}/";
      charSequenceArray0[1] = (CharSequence) null;
      String string1 = StringUtils.chop("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}", string1);
      assertNotNull(string1);
      
      String string2 = "', has a length less than 2";
      String string3 = StringUtils.replaceOnce((String) null, "', has a length less than 2", (String) null);
      assertNull(string3);
      
      int int0 = 0;
      String string4 = "\"c";
      String string5 = StringUtils.truncate("org.apache.commons.lang3.Charsets", 0);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string4));
      assertNotNull(treeSet0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("_XcPe1oy(jA@R[/", "org.apache.commons.lang3.Charsets", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 34
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = StringUtils.abbreviate("n;$#DlV9*WH", "{N_", (-1238), 3443);
      assertEquals("n;$#DlV9*WH", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 35L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 3443;
      longArray0[5] = 35L;
      longArray0[4] = (long) (-1238);
      longArray0[5] = 35L;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      String string1 = StringUtils.join(longArray0, 'X', (-128), (-1238));
      assertEquals(8, longArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {35L, 0L, 3443L, 0L, (-1238L), 35L, 0L, 0L}, longArray0);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "n;$#DlV9*WH";
      String string2 = StringUtils.deleteWhitespace("n;$#DlV9*WH");
      assertEquals("n;$#DlV9*WH", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing((String) null, "n;$#DlV9*WH", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "n;$#DlV9*WH");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("n;$#DlV9*WH", "JXMZ\u0005NiK18VO");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = StringUtils.reverse("hCo[+qg9vfstKX");
      assertEquals("XKtsfv9gq+[oCh", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("|o=Q|l<t'");
      assertEquals("|o=Q|l<t'", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "XKtsfv9gq+[oCh", charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "|o=Q|l<t'";
      charSequenceArray0[1] = (CharSequence) "|o=Q|l<t'";
      charSequenceArray0[2] = (CharSequence) "|o=Q|l<t'";
      charSequenceArray0[3] = (CharSequence) "|o=Q|l<t'";
      charSequenceArray0[2] = (CharSequence) "hCo[+qg9vfstKX";
      charSequenceArray0[5] = (CharSequence) "|o=Q|l<t'";
      charSequenceArray0[6] = (CharSequence) "|o=Q|l<t'";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "XKtsfv9gq+[oCh", charSequenceArray0[5], (-524));
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.upperCase("}ga");
      assertEquals("}GA", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("|o=Q|l<t'", (CharSequence) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("0o=<7JhwXUjcI", '/');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.removePattern("U.)><", "|o=Q|l<t'");
      assertEquals("U.)><", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "0o=<7JhwXUjcI");
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = StringUtils.repeat('Z', 3810);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) string0;
      charSequenceArray0[1] = (CharSequence) string0;
      charSequenceArray0[2] = (CharSequence) string0;
      charSequenceArray0[3] = (CharSequence) string0;
      charSequenceArray0[4] = (CharSequence) string0;
      charSequenceArray0[2] = (CharSequence) string0;
      charSequenceArray0[6] = (CharSequence) string0;
      String string1 = StringUtils.leftPad(string0, 3810, string0);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("NgD(d4(EC-", string1);
      assertEquals("NgD(d4(EC-", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("org.apache.commons.lang3.Charsets", "NgD(d4(EC-");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.equals(charSequenceArray0[2], charSequenceArray0[2]);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[6]);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(3810, intArray0.length);
      assertNotNull(intArray0);
      
      String string4 = StringUtils.reverseDelimited("NgD(d4(EC-", 'Z');
      assertEquals("NgD(d4(EC-", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfterLast("not both be null", 11);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.containsWhitespace("not both be null");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.toRootLowerCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1329;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.6216583F;
      floatArray0[1] = 0.0F;
      doubleArray0[4] = (double) 0.0F;
      floatArray0[3] = (float) 1224;
      floatArray0[4] = (float) 1329;
      floatArray0[5] = (float) 1224;
      floatArray0[6] = (float) '0';
      floatArray0[7] = 0.0F;
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\n", "\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.capitalize("\n");
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.toRootLowerCase("QwMnf#W4a#/TEH");
      assertEquals("qwmnf#w4a#/teh", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphaSpace("\n");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = StringUtils.replaceIgnoreCase("\n", " is not in the range '0' - '9'", " ", (-2472));
      assertEquals("\n", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.chomp("\n", "0o=<7JhwXUjcI");
      assertEquals("\n", string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.endsWithAny(" ", stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      stack0.replaceAll(unaryOperator0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'X');
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.removePattern("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals("", string1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("Aborting to protect against StackOverflowError - output of one loop is the input of another", ", '", 321, 2042);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      String string0 = StringUtils.replacePattern((String) null, "", "*Q]}J6`XtQ[wTfEA}/");
      assertNull(string0);
      
      String string1 = StringUtils.upperCase("The character ");
      assertEquals("THE CHARACTER ", string1);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "*Q]}J6`XtQ[wTfEA}/";
      charSequenceArray0[1] = (CharSequence) null;
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace(charSequenceArray0[1]);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("*Q]}J6`XtQ[wTfEA}/", "(r:q+Ws");
      assertEquals("(r:q+Ws*Q]}J6`XtQ[wTfEA}/(r:q+Ws", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBetween("}1'h6", "]eE]_(z#", "Minimum abbreviation width with offset is %offset is %d");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      String string0 = StringUtils.removePattern((String) null, (String) null);
      assertNull(string0);
      
      charSequenceArray0[2] = (CharSequence) null;
      String string1 = StringUtils.join((Iterable<?>) stack0, "@WfpW[");
      assertFalse(stack0.contains(string1));
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[3] = (CharSequence) "";
      String string2 = StringUtils.LF;
      assertEquals("\n", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[4] = (CharSequence) "\n";
      boolean boolean0 = StringUtils.containsAny((CharSequence) null, charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.center("QGwZE:xZn\"U)jn", 3059, '2');
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("QGwZE:xZn\"U)jn");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.startsWith(charSequenceArray0[2], charSequenceArray0[1]);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.deleteWhitespace("");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = StringUtils.getDigits("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart("5Y(1Ax8,2mBA}q34", "]");
      assertEquals("5Y(1Ax8,2mBA}q34", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("5Y(1Ax8,2mBA}q34", 2770, 'C');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string3 = StringUtils.join((int[]) null, 'C', (-5615), 8192);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd((String) null, "...t is %d");
      assertNull(string1);
      
      String string2 = StringUtils.repeat('Z', 1292);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "Minimum abbreviation width with offset is %d");
      assertNull(stringArray0);
      
      String string3 = StringUtils.getDigits((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.leftPad(string2, 557, '(');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) null, (String) null);
      assertNull(string5);
      
      int int0 = StringUtils.compare((String) null, "Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d", true);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.repeat("Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d", "]", 1292);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String string7 = StringUtils.wrapIfMissing("+WALncp18DS+p3k", "+WALncp18DS+p3k");
      assertEquals("+WALncp18DS+p3k", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string2, (CharSequence) "/WW ");
      assertEquals((-1), int1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string7));
      assertTrue(int1 == int0);
      
      String string8 = StringUtils.getDigits((String) null);
      assertNull(string8);
      
      Locale locale0 = Locale.US;
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string9 = locale0.toLanguageTag();
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en-US", string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertNotNull(string9);
      
      String string10 = locale0.getScript();
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", string10);
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string4));
      assertNotNull(string10);
      
      Locale locale1 = Locale.ENGLISH;
      assertEquals("en", locale1.getLanguage());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string11 = StringUtils.lowerCase((String) null, locale1);
      assertEquals("en", locale1.getLanguage());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNull(string11);
      
      String string12 = StringUtils.rightPad("oK0iq{^8^!yk&`wd", (-1), string6);
      assertEquals("oK0iq{^8^!yk&`wd", string12);
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string0));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string7));
      assertFalse(string6.equals((Object)string9));
      assertFalse(string6.equals((Object)string10));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string12);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Object varargs must not be null", (String) null);
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Object varargs must not be null", "\">^|qa~d8RBng,lzpH ", (-1563));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.remove("QDK}\u0005<R6", 'C');
      assertEquals("QDK}\u0005<R6", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertEquals("en", locale1.toString());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertEquals("en", locale1.getLanguage());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string2 = locale0.toLanguageTag();
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertNotSame(locale0, locale1);
      assertEquals("en", string2);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = locale0.getScript();
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertNotSame(locale0, locale1);
      assertEquals("", string3);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Locale locale2 = locale0.stripExtensions();
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.getLanguage());
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertNotSame(locale2, locale1);
      assertSame(locale2, locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      
      String string4 = StringUtils.lowerCase((String) null, locale2);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("en", locale2.getLanguage());
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertNotSame(locale2, locale1);
      assertSame(locale2, locale0);
      assertTrue(locale0.equals((Object)locale1));
      assertTrue(locale2.equals((Object)locale1));
      assertNull(string4);
      
      String string5 = StringUtils.rightPad("Wn0cB1", (-1563), "Wn0cB1");
      assertEquals("Wn0cB1", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("QDK}\u0005<R6", (-1563), (-1563));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd((String) null, "...t is %d");
      assertNull(string1);
      
      String string2 = StringUtils.repeat('Z', 1292);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "Minimum abbreviation width with offset is %d");
      assertNull(stringArray0);
      
      String string3 = StringUtils.getDigits((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.leftPad(string2, 557, '(');
      assertFalse(string2.equals((Object)string0));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.join((Object[]) null, (String) null);
      assertNull(string5);
      
      int int0 = StringUtils.compare((String) null, "Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d", true);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.repeat("Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d", "]", 1292);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.wrapIfMissing("+WALncp18DS+p3k", "+WALncp18DS+p3k");
      assertEquals("+WALncp18DS+p3k", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string2, (CharSequence) "/WW ");
      assertEquals((-1), int1);
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string0));
      assertTrue(int1 == int0);
      
      String string8 = StringUtils.getDigits((String) null);
      assertNull(string8);
      
      Locale locale0 = Locale.US;
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string9 = locale0.toLanguageTag();
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en-US", string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertNotNull(string9);
      
      String string10 = locale0.getScript();
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", string10);
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertNotNull(string10);
      
      Locale locale1 = Locale.ENGLISH;
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string11 = StringUtils.lowerCase((String) null, locale1);
      assertEquals("en", locale1.getLanguage());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("en", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNull(string11);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "en-US", (CharSequence) string2);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(string2.equals((Object)string10));
      assertFalse(string2.equals((Object)string6));
      assertFalse(string2.equals((Object)string9));
      assertFalse(string2.equals((Object)string7));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = StringUtils.leftPad("~", 0);
      assertEquals("~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((short[]) null, '', (-1503), (-1503));
      assertNull(string1);
      
      String string2 = StringUtils.CR;
      assertEquals("\r", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumericSpace("\r");
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviate((String) null, "||3{8@l:{", (-651));
      assertNull(string3);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "\r");
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertEquals("\r", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) null);
      assertNull(charSequence0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("J9ZTqY0GE]n", "0J@;Q<|");
      assertEquals("J9ZTqY0GE]n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      char char0 = '\"';
      int int0 = (-651);
      String string1 = StringUtils.join((short[]) null, '\"', (-651), (-651));
      assertNull(string1);
      
      int int1 = 1585;
      String string2 = StringUtils.repeat('\"', 1585);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNumericSpace(string2);
      assertFalse(boolean1);
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale1 = Locale.CHINESE;
      assertEquals("", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("zh", locale1.toString());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      assertFalse(set0.contains("0J@;Q<|"));
      assertEquals("", locale1.getISO3Country());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("zh", locale1.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(set0);
      
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) set0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '-';
      charArray0[1] = '-';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'-', '-'}, charArray0);
      
      String string0 = null;
      String string1 = StringUtils.upperCase((String) null);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = StringUtils.truncate("The character ", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 921, (-119));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd("+ZW#~:e= ", "+ZW#~:e= ");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("The Array must not be null", (-1), "");
      assertEquals("The Array must not be null", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "The Array must not be null", (CharSequence) "The Array must not be null");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "The character ";
      stringArray0[1] = "The Array must not be null";
      stringArray0[2] = "The Array must not be null";
      stringArray0[3] = "The Array must not be null";
      stringArray0[4] = "+ZW#~:e= ";
      stringArray0[5] = "The Array must not be null";
      stringArray0[6] = "The Array must not be null";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isNumericSpace("The Array must not be null");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("The Array must not be null", "b|.\"oyR,", "ll");
      assertEquals("The Array must not be null", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.getIfBlank("Af!JHslIxJm", (Supplier<String>) null);
      assertEquals("Af!JHslIxJm", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("+ZW#~:e= ", (-3642));
      assertEquals("+ZW#~:e= ", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceOnceIgnoreCase("+ZW#~:e= ", "i:TM@eZFE", "The character ");
      assertEquals("+ZW#~:e= ", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Af!JHslIxJm", (CharSequence) "The character ", (-800));
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("jZF", '^');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", '^');
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.stripEnd(", Length: ", (String) null);
      assertEquals(", Length:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.right((String) null, (-1610612734));
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, (-1610612734));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'Q';
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("...", "Hu[ G");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 4
         // Hu[ G
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) " ";
      String string0 = StringUtils.trimToNull(" ");
      assertNull(string0);
      
      String string1 = StringUtils.wrap("_$J7iYA?LmCX_;)QuGM", "");
      assertEquals("_$J7iYA?LmCX_;)QuGM", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly(charSequenceArray0[0], "...");
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.toRootLowerCase("...");
      assertEquals("...", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("org.apache.commons.lang3.StringUtils", 3484, 3484);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAlphaSpace("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isAlphaSpace("_$J7iYA?LmCX_;)QuGM");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String string0 = "Mini9*WH{N_";
      int int0 = 2028;
      String string1 = StringUtils.repeat("Mini9*WH{N_", "Mini9*WH{N_", 2028);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.ordinalIndexOf(string1, "Mini9*WH{N_", 2028);
      assertEquals(22297, int1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      StringUtils.splitPreserveAllTokens(string1, "", 2028);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "*WH", (CharSequence) "*WH");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "*WH";
      stringArray0[1] = "ZQuoA1X}vmQ^yY37";
      stringArray0[2] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[3] = "*WH";
      stringArray0[4] = "p{InCombiningDiacriticalMarks}+";
      stringArray0[5] = "*WH";
      String string0 = StringUtils.replaceEach("p{InCombiningDiacriticalMarks}+", stringArray0, stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-61);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-119);
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)9;
      byteArray0[5] = (byte)112;
      // Undeclared exception!
      try { 
        Charset.forName("p{InCombiningDiacriticalMarks}+");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // p{InCombiningDiacriticalMarks}+
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "-$^7");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate2.negate();
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate4, predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate2));
      assertNotNull(predicate4);
      
      String string0 = StringUtils.wrapIfMissing("Rr]SK~Sg%gBRr]SK~Sg%gB", "Rr]SK~Sg%gBRr]SK~Sg%gB");
      assertEquals("Rr]SK~Sg%gBRr]SK~Sg%gB", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("K", "(r:q+Ws", (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("~", 10, 10);
      assertEquals("~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "~");
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("~", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "\u0000";
      charSequenceArray0[1] = (CharSequence) "iZp!nv|8~-_._OYYNMu";
      charSequenceArray0[2] = (CharSequence) "~";
      charSequenceArray0[3] = (CharSequence) "iZp!nv|8~-_._OYYNMu";
      charSequenceArray0[4] = (CharSequence) "~";
      boolean boolean0 = StringUtils.containsWhitespace("\u0000");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat("iZp!nv|8~-_._OYYNMu", 10);
      assertEquals("iZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMu", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Locale locale0 = Locale.US;
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertNotNull(locale0);
      
      String string3 = locale0.toLanguageTag();
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en-US", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = locale0.getScript();
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.lowerCase("~", locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("~", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.rightPad("\u0000", 10, " vs ");
      assertEquals("\u0000 vs  vs  ", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-492.60303890029644);
      doubleArray0[1] = 837.898;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "MECx3S@9 *$pm,&";
      stringArray0[1] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.lastIndexOfAny("", stringArray1);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, int0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.wrapIfMissing("EdK4XEH*~67", '\u000F');
      assertEquals("\u000FEdK4XEH*~67\u000F", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("aEkce-");
      assertEquals("AEkce-", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("AEkce-", 32);
      assertEquals("AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-AEkce-", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("AEkce-", ':');
      assertEquals(":AEkce-:", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.wrapIfMissing("aRK.dlw8", 'A');
      assertEquals("AaRK.dlw8A", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("aRK.dlw8");
      assertEquals("ARK.dlw8", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat("", 32);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("ARK.dlw8", 'b');
      assertEquals("bARK.dlw8b", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("Minimum abbreviation width is %d", "Minimum abbreviation width is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("", "Minimum abbreviation width is %d", 3);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "", 3);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringBeforeLast("", "Minimum abbreviation width is %d");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.substring("Minimum abbreviation width is %d", 3, 3);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.length("");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", '^');
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.unwrap("", 'V');
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("", 8, 3);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringAfterLast("", (-530));
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string6 = StringUtils.substringAfter("Minimum abbreviation width is %d", "~~");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("~", 10, 10);
      assertEquals("~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "~");
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.limit());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("~", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "\u0000";
      charSequenceArray0[1] = (CharSequence) "iZp!nv|8~-_._OYYNMu";
      charSequenceArray0[2] = (CharSequence) "~";
      String string2 = StringUtils.mid("lb", 10, (-782));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("/539J-TzMfW}o", "jZFcC,A:&V6Z\"#XvV#V!V`@2,s1");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.lowerCase("not both be null");
      assertEquals("not both be null", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToEmpty(" ");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.stripStart("", "{N_");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.JAPANESE;
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string6 = locale0.getDisplayScript();
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotSame(locale0, locale1);
      assertEquals("", string6);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      
      Locale locale2 = Locale.ITALY;
      assertEquals("IT", locale2.getCountry());
      assertEquals("ITA", locale2.getISO3Country());
      assertEquals("ita", locale2.getISO3Language());
      assertEquals("it", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("it_IT", locale2.toString());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      
      String string7 = locale1.getDisplayVariant(locale2);
      assertEquals("IT", locale2.getCountry());
      assertEquals("ITA", locale2.getISO3Country());
      assertEquals("ita", locale2.getISO3Language());
      assertEquals("it", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("it_IT", locale2.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals("", string7);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string7);
      
      Locale locale3 = locale0.stripExtensions();
      assertEquals("TWN", locale3.getISO3Country());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("zh_TW", locale3.toString());
      assertEquals("TW", locale3.getCountry());
      assertEquals("", locale3.getVariant());
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertSame(locale3, locale0);
      assertNotSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertFalse(locale3.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
      assertNotNull(locale3);
      
      int int0 = StringUtils.getFuzzyDistance("aRK.dlw8", "#", locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertEquals(0, int0);
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale0.equals((Object)locale1));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((Object) "e5,:");
      assertTrue(vector0.contains("e5,:"));
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[e5,:]", vector0.toString());
      assertTrue(boolean0);
      
      String string0 = StringUtils.join((Iterable<?>) vector0, "");
      assertTrue(vector0.contains("e5,:"));
      assertFalse(vector0.contains(""));
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[e5,:]", vector0.toString());
      assertEquals("e5,:", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 587;
      floatArray0[1] = (float) 'q';
      floatArray0[2] = 0.0F;
      floatArray0[3] = (float) 'q';
      floatArray0[4] = (float) 587;
      String string1 = StringUtils.join(floatArray0, '4');
      assertEquals(5, floatArray0.length);
      assertEquals("587.04113.040.04113.04587.0", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new float[] {587.0F, 113.0F, 0.0F, 113.0F, 587.0F}, floatArray0, 0.01F);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "587.04113.040.04113.04587.0", 587);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = "gy1-.zub{Jg";
      char char0 = '#';
      String string1 = StringUtils.unwrap("gy1-.zub{Jg", '#');
      assertEquals("gy1-.zub{Jg", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("gy1-.zub{Jg", "gy1-.zub{Jg", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      String string0 = StringUtils.substringBefore((String) null, "{N_");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "{N_";
      charSequenceArray0[4] = (CharSequence) "{N_";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "{N_";
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[1], charSequenceArray0[1]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.unwrap((String) null, "The character ");
      assertNull(string1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "P#?FRtT&@ }8", charSequenceArray0[2]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) charBuffer0, (-1));
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      
      String string2 = StringUtils.repeat("jZFcC,A:&V6Z\"#XvV#V!V`@2,s1", (-1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("-tv4'j7", "%!+I");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlpha("P#?FRtT&@ }8");
      assertFalse(boolean0);
      
      String string3 = StringUtils.stripEnd("VZJbaHNoP>/3~*JaRK.dlw8", (String) null);
      assertEquals("VZJbaHNoP>/3~*JaRK.dlw8", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int4 = StringUtils.lastIndexOf((CharSequence) "{N_", (-1423), (-1));
      assertEquals((-1), int4);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertFalse(int4 == int2);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("JD6@CXAkI~|", "JD6@CXAkI~|", 664);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains("JD6@CXAkI~|"));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      boolean boolean0 = vector0.add((Object) null);
      assertFalse(vector0.contains("JD6@CXAkI~|"));
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertTrue(boolean0);
      
      String string0 = StringUtils.unwrap(" E].P", '2');
      assertEquals(" E].P", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring(" E].P", 2, (-1));
      assertEquals("].", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast(" E].P", (-1));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase(" E].P", (CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((Collection<? extends String>) treeSet0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string1 = StringUtils.join((Iterable<?>) priorityQueue0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(treeSet0.contains(string1));
      assertFalse(priorityQueue0.contains(string1));
      assertEquals(0, priorityQueue0.size());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((Object) "");
      assertFalse(stack0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertTrue(stack0.contains(""));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean0);
      
      int int0 = 18;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "", 18);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.substring("5'~h8:F5Tm", 90, 18);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      assertSame(unaryOperator1, unaryOperator0);
      assertNotNull(unaryOperator1);
      
      Integer integer0 = new Integer((-2));
      assertEquals((-2), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(18);
      assertEquals(18, (int)integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      Object object0 = unaryOperator0.apply(integer1);
      assertSame(unaryOperator0, unaryOperator1);
      assertEquals(18, object0);
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(object0.equals((Object)int0));
      assertFalse(object0.equals((Object)integer0));
      assertNotNull(object0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains(""));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      stack0.replaceAll(unaryOperator1);
      assertFalse(stack0.contains(18));
      assertTrue(stack0.contains(""));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertSame(unaryOperator1, unaryOperator0);
      
      Object[] objectArray0 = stack0.toArray((Object[]) stringArray0);
      assertFalse(stack0.contains(18));
      assertTrue(stack0.contains(""));
      assertEquals(1, objectArray0.length);
      assertEquals(0, stringArray0.length);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertNotSame(stringArray0, objectArray0);
      assertNotNull(objectArray0);
      
      char char0 = 'n';
      String[] stringArray1 = StringUtils.split("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'n');
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray1, objectArray0);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)objectArray0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("5'~h8:F5Tm", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "~", (CharSequence) "");
      assertEquals("~", charSequence0);
      assertNotNull(charSequence0);
      
      Integer integer0 = new Integer((-3451));
      assertEquals((-3451), (int)integer0);
      assertNotNull(integer0);
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Vector vector1 = (Vector)unaryOperator0.apply(vector0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals(0, vector1.size());
      assertEquals(0, vector1.capacity());
      assertEquals("[]", vector1.toString());
      assertTrue(vector1.isEmpty());
      assertNotNull(vector1);
      
      Vector<Object> vector2 = new Vector<Object>();
      assertFalse(vector2.contains(""));
      assertEquals("[]", vector2.toString());
      assertTrue(vector2.isEmpty());
      assertEquals(10, vector2.capacity());
      assertEquals(0, vector2.size());
      assertNotNull(vector2);
      
      vector2.replaceAll(unaryOperator0);
      assertFalse(vector2.contains(""));
      assertEquals("[]", vector2.toString());
      assertTrue(vector2.isEmpty());
      assertEquals(10, vector2.capacity());
      assertEquals(0, vector2.size());
      
      String string0 = StringUtils.leftPad("", (-3451));
      assertEquals("", string0);
      assertFalse(string0.equals((Object)charSequence0));
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "Lm6RDw6KJnk2`is9");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.normalizeSpace(", Length: 0");
      assertEquals(", Length: 0", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'Y';
      charArray0[1] = '[';
      charArray0[2] = 'Y';
      charArray0[3] = 'q';
      charArray0[4] = 'q';
      int int1 = StringUtils.indexOfAny((CharSequence) "~", charArray0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'Y', '[', 'Y', 'q', 'q'}, charArray0);
      
      String string2 = StringUtils.center("", (-1));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", "6");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWith(" ", " ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.deleteWhitespace(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) " ";
      String string1 = StringUtils.prependIfMissing(" ", "6", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches(charSequenceArray0[0], (CharSequence) "");
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.trim("6");
      assertEquals("6", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("6", charSequenceArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-197), 2331);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.strip("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("O7z7{");
      assertEquals("O7z7{", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains(2331));
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Object[] objectArray0 = stack0.toArray((Object[]) charSequenceArray0);
      assertFalse(stack0.contains(2331));
      assertEquals(9, charSequenceArray0.length);
      assertEquals(9, objectArray0.length);
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertSame(charSequenceArray0, objectArray0);
      assertNotNull(objectArray0);
      
      String[] stringArray0 = StringUtils.split(" in an array of ", '\\');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.reverse("5\"=/U$[c+3,HxR");
      assertEquals("RxH,3+c[$U/=\"5", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      char char0 = 'd';
      String string4 = StringUtils.replaceChars((String) null, 'd', 'Y');
      assertNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate((String) null, 1958, 712);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfter("#", "c7/mq^s");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Stack<Locale> stack0 = new Stack<Locale>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      String string0 = StringUtils.join((List<?>) stack0, "#B.?:#nq", 110, 2);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "%!+I/WW ";
      stringArray0[1] = "y";
      stringArray0[2] = "0xC~L`/2gL";
      stringArray0[3] = "y";
      stringArray0[4] = "";
      stringArray0[5] = null;
      stringArray0[6] = "y";
      stringArray0[7] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "0xC~L`/2gL");
      assertEquals(8, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.unwrap("y", (String) null);
      assertEquals("y", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEnd((String) null, "...t is %d");
      assertNull(string1);
      
      String string2 = StringUtils.repeat('Z', 1292);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "Minimum abbreviation width with offset is %d");
      assertNull(stringArray0);
      
      String string3 = StringUtils.getDigits((String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase(string2);
      assertFalse(boolean0);
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("offset cannot be negative", "offset cannot be negative");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "offset cannot be negative");
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("offset cannot be negative", "offset cannot be negative", (-2221));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.removeFirst("", "offset cannot be negative");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeEnd("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", (String) null);
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat('9', 1292);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, (String) null, "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
      assertNull(stringArray0);
      
      String string4 = StringUtils.getDigits("");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("", 317, '9');
      assertEquals("99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.join((Object[]) null, "GpV");
      assertNull(string6);
      
      int int1 = StringUtils.compare("offset cannot be negative", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", true);
      assertEquals((-15), int1);
      assertFalse(int1 == int0);
      
      String string7 = StringUtils.repeat("n;$#DlV9*WH{N_", "", 1292);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      String string8 = StringUtils.wrapIfMissing("%!+I", "/WW ");
      assertEquals("/WW %!+I/WW ", string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "/WW ", (CharSequence) string7);
      assertEquals((-1), int2);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string9 = StringUtils.getDigits("Dm?,vl+8$S*Vz'j");
      assertEquals("8", string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
      
      int int3 = StringUtils.ordinalIndexOf(string7, "offset cannot be negative", 102);
      assertEquals((-1), int3);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string9));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string8));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      
      String string10 = StringUtils.join((String[]) null);
      assertNull(string10);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", (CharSequence) "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string11 = StringUtils.deleteWhitespace("Dm?,vl+8$S*Vz'j");
      assertEquals("Dm?,vl+8$S*Vz'j", string11);
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string2));
      assertNotNull(string11);
      
      // Undeclared exception!
      try { 
        Charset.forName("GpV");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // GpV
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("{", "_");
      assertEquals("_{_", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("_{_");
      assertEquals("_{_", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("_{_", "_{_");
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.split("Cloneable type ", "{");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.wrap("_{_", 'S');
      assertEquals("S_{_S", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      String string0 = "*<&ted&:j}D$<$t";
      String string1 = StringUtils.substringBeforeLast("*<&ted&:j}D$<$t", "0J@;Q<|");
      assertEquals("*<&ted&:j}D$<$t", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      int int0 = 322;
      String string2 = StringUtils.substring("*<&ted&:j}D$<$t", 322, 322);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.length("0J@;Q<|");
      assertEquals(7, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("B.LkVjiZT:", '^');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.replaceChars("", "B.LkVjiZT:", "*<&ted&:j}D$<$t");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "*<&ted&:j}D$<$t", 428);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray1 = new String[6];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "*<&ted&:j}D$<$t";
      stringArray1[1] = "";
      stringArray1[2] = "B.LkVjiZT:";
      stringArray1[3] = "*<&ted&:j}D$<$t";
      stringArray1[4] = "*<&ted&:j}D$<$t";
      stringArray1[5] = "";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("*<&ted&:j}D$<$t", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 1 vs 6
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1329;
      doubleArray0[1] = (double) 1329;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) 1329.0;
      objectArray0[1] = (Object) "Hi";
      objectArray0[2] = (Object) "Hi";
      objectArray0[3] = (Object) "Hi";
      String string0 = StringUtils.join(objectArray0, "Fp;JQNsWt||HwX_", 98, (-2446));
      assertEquals(4, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Hi";
      stringArray0[1] = "nP]DiCUUpELOkIB(i6";
      stringArray0[2] = "";
      stringArray0[3] = "Hi";
      stringArray0[4] = "";
      stringArray0[5] = "nP]DiCUUpELOkIB(i6";
      stringArray0[6] = "Hi";
      stringArray0[7] = "nP]DiCUUpELOkIB(i6";
      stringArray0[8] = "nP]DiCUUpELOkIB(i6";
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "Fp;JQNsWt||HwX_";
      stringArray1[2] = "Fp;JQNsWt||HwX_";
      stringArray1[3] = "";
      stringArray1[4] = "nP]DiCUUpELOkIB(i6";
      stringArray1[5] = "Hi";
      stringArray1[6] = "Hi";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("rj{", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 9 vs 7
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      String string0 = "Minimum abbreviation ws ";
      String string1 = StringUtils.repeat("Minimum abbreviation ws ", "Minimum abbreviation ws ", (-60));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf("", "Minimum abbreviation ws ", (-60));
      assertEquals((-1), int0);
      
      String string2 = "";
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains((-60)));
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      vector0.replaceAll(unaryOperator0);
      assertFalse(vector0.contains((-60)));
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string3 = "offset cannot be negative";
      String string4 = StringUtils.reverse("offset cannot be negative");
      assertEquals("evitagen eb tonnac tesffo", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("/WW %!+I", ")hV", "/WW %!+I");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')'
         // )hV
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1329;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.6216583F;
      floatArray0[1] = 0.0F;
      doubleArray0[4] = (double) 0.0F;
      floatArray0[3] = (float) 1224;
      floatArray0[4] = (float) 1329;
      floatArray0[5] = (float) 1224;
      floatArray0[6] = (float) '0';
      floatArray0[7] = 0.0F;
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\n", "\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.capitalize("\n");
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split(" ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.toRootLowerCase("QwMnf#W4a#/TEH");
      assertEquals("qwmnf#w4a#/teh", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("\n", " is not in the range '0' - '9'", " ", (-2472));
      assertEquals("\n", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1329;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.6216583F;
      floatArray0[1] = 0.0F;
      doubleArray0[4] = (double) 0.0F;
      floatArray0[3] = (float) 1224;
      floatArray0[4] = (float) 1329;
      floatArray0[5] = (float) 1224;
      floatArray0[6] = (float) '0';
      floatArray0[7] = 0.0F;
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\n", "\n");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.capitalize("\n");
      assertEquals("\n", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.toRootLowerCase("QwMnf#W4a#/TEH");
      assertEquals("qwmnf#w4a#/teh", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("\n", " is not in the range '0' - '9'", " ", (-2472));
      assertEquals("\n", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", "6");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWith(" ", " ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.deleteWhitespace(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) " ";
      String string1 = StringUtils.prependIfMissing(" ", "6", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.compareIgnoreCase("...", " ", true);
      assertEquals(14, int0);
      
      String[] stringArray2 = StringUtils.split(" ");
      assertEquals(0, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[6] = 35L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 3443;
      longArray0[3] = 35L;
      longArray0[3] = 35L;
      longArray0[6] = (long) 0;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "{N_";
      stringArray0[1] = "{N_";
      stringArray0[2] = "-hCXnntwwf95-";
      stringArray0[3] = "{N_";
      stringArray0[4] = "Threshold must not be negative";
      stringArray0[5] = "-hCXnntwwf95-";
      stringArray0[6] = "n;$#DlV9*WH";
      stringArray0[7] = "/*PH8q]8";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(8, stringArray1.length);
      assertEquals(8, stringArray0.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.removeEndIgnoreCase("(-f(wkBAWf7hh [", "{N_");
      assertEquals("(-f(wkBAWf7hh [", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("(-f(wkBAWf7hh [");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("VZJbaHNoP>/3~*J", "+0", "/*PH8q]8");
      assertEquals("VZJbaHNoP>/3~*J", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.getIfBlank("#", (Supplier<String>) null);
      assertEquals("#", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("-hCXnntwwf95-", 3443);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("(-f(wkBAWf7hh [", "+0");
      assertEquals("(-f(wkBAWf7hh [", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviate("[+/#5l.]dCi-", "{N_", 4083);
      assertEquals("[+/#5l.]dCi-", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("(-f(wkBAWf7hh [", "[+/#5l.]dCi-");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.join((long[]) null, 'X', 4, 2607);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("~", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.appendIfMissing("o90qqb\"'l,", "~", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("o90qqb\"'l,~", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "~", (CharSequence) "~");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("o90qqb\"'l,");
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {111, 57, 48, 113, 113, 98, 34, 39, 108, 44}, intArray0);
      assertNotNull(intArray0);
      
      boolean boolean2 = StringUtils.equalsAny("o90qqb\"'l,", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray0 = StringUtils.split((String) null, "o90qqb\"'l,~");
      assertNull(stringArray0);
      
      boolean boolean3 = StringUtils.isWhitespace("~");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String[] stringArray1 = StringUtils.stripAll((String[]) null, (String) null);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-1457), (-1348));
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.leftPad("", (-1348), "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("O7z7{");
      assertEquals("O7z7{", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("", 1000);
      assertEqualsstring4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string5 = StringUtils.normalizeSpace("");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      char[] charArray0 = new char[6];
      charArray0[4] = 'P';
      charArray0[1] = 'm';
      charArray0[2] = 'Y';
      charArray0[4] = 'A';
      charArray0[5] = 'z';
      int int1 = StringUtils.indexOfAny((CharSequence) "O7z7{", charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'\u0000', 'm', 'Y', '\u0000', 'A', 'z'}, charArray0);
      
      String string6 = StringUtils.center("not both be null", 2);
      assertEquals("not both be null", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The StrWW %!+I");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("The", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The StrWW %!+I", (CharSequence) "The");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("The StrWW %!+I", "The StrWW %!+I", "The");
      assertEquals("The", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.split("The", "The");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "The", "The");
      assertFalse(boolean0);
      
      String string2 = StringUtils.strip("pU8p9ob");
      assertEquals("pU8p9ob", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "The", (CharSequence) "The");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(boolean1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The StrWW %!+I");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceOnceIgnoreCase("The StrWW %!+I", "[NX/&LQdI3", "{B{Y|tchZ");
      assertEquals("The StrWW %!+I", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern("[NX/&LQdI3", "e");
      assertEquals("[NX/&LQdI3", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap("", 'd');
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.removeFirst("UJK5Y?32k(-1", "67\"l0uDBnyU");
      assertEquals("UJK5Y?32k(-1", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase("...");
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToEmpty("67\"l0uDBnyU");
      assertEquals("67\"l0uDBnyU", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripStart((String) null, "UJK5Y?32k(-1");
      assertNull(string3);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.JAPANESE;
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("ja", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      Locale locale2 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("CA", locale2.getCountry());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      
      String string4 = locale2.getDisplayScript();
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("CA", locale2.getCountry());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", string4);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = locale1.getDisplayVariant(locale2);
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("CA", locale2.getCountry());
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", string5);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      Locale locale3 = locale2.stripExtensions();
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("CA", locale2.getCountry());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("fr_CA", locale3.toString());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("", locale3.getVariant());
      assertEquals("CAN", locale3.getISO3Country());
      assertEquals("CA", locale3.getCountry());
      assertNotSame(locale2, locale1);
      assertSame(locale2, locale3);
      assertNotSame(locale2, locale0);
      assertSame(locale3, locale2);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertNotNull(locale3);
      
      Locale locale4 = locale3.stripExtensions();
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("CA", locale2.getCountry());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("fr_CA", locale3.toString());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("", locale3.getVariant());
      assertEquals("CAN", locale3.getISO3Country());
      assertEquals("CA", locale3.getCountry());
      assertEquals("CAN", locale4.getISO3Country());
      assertEquals("fr", locale4.getLanguage());
      assertEquals("fr_CA", locale4.toString());
      assertEquals("fra", locale4.getISO3Language());
      assertEquals("", locale4.getVariant());
      assertEquals("CA", locale4.getCountry());
      assertSame(locale2, locale4);
      assertNotSame(locale2, locale1);
      assertSame(locale2, locale3);
      assertNotSame(locale2, locale0);
      assertSame(locale3, locale2);
      assertSame(locale3, locale4);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertNotSame(locale4, locale1);
      assertSame(locale4, locale2);
      assertSame(locale4, locale3);
      assertNotSame(locale4, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale0));
      assertNotNull(locale4);
      
      String string6 = locale3.getDisplayLanguage(locale4);
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("CA", locale2.getCountry());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("fr_CA", locale3.toString());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("", locale3.getVariant());
      assertEquals("CAN", locale3.getISO3Country());
      assertEquals("CA", locale3.getCountry());
      assertEquals("CAN", locale4.getISO3Country());
      assertEquals("fr", locale4.getLanguage());
      assertEquals("fr_CA", locale4.toString());
      assertEquals("fra", locale4.getISO3Language());
      assertEquals("", locale4.getVariant());
      assertEquals("CA", locale4.getCountry());
      assertSame(locale2, locale4);
      assertNotSame(locale2, locale1);
      assertSame(locale2, locale3);
      assertNotSame(locale2, locale0);
      assertSame(locale3, locale2);
      assertSame(locale3, locale4);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertNotSame(locale4, locale1);
      assertSame(locale4, locale2);
      assertSame(locale4, locale3);
      assertNotSame(locale4, locale0);
      assertEquals("fran\u00E7ais", string6);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale1));
      assertFalse(locale4.equals((Object)locale0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      int int0 = StringUtils.getFuzzyDistance("UJK5Y?32k(-1", "", locale3);
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("CA", locale2.getCountry());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("fr_CA", locale3.toString());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("", locale3.getVariant());
      assertEquals("CAN", locale3.getISO3Country());
      assertEquals("CA", locale3.getCountry());
      assertSame(locale2, locale4);
      assertNotSame(locale2, locale1);
      assertSame(locale2, locale3);
      assertNotSame(locale2, locale0);
      assertSame(locale3, locale2);
      assertSame(locale3, locale4);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale0);
      assertEquals(0, int0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale0));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-704.88);
      char char0 = 'b';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'b', 10, 121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width is %d", 3);
      assertEquals("imum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("imum abbreviation width is %d", "Minimum abbreviation width is %d", 3);
      assertEquals((-1), int0);
      
      char char0 = 'e';
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 16.0;
      doubleArray0[1] = 0.7;
      doubleArray0[2] = (double) (-278);
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = 0.7;
      int int1 = 736;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'e', (-1), 736);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1329;
      doubleArray0[1] = (double) 1329;
      doubleArray0[2] = (double) 1329;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Hi", "JXMZ\u0005NiK18VOU", (-475));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("H", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.countMatches((CharSequence) "JXMZ\u0005NiK18VOU", (CharSequence) "H");
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.normalizeSpace("Hi");
      assertEquals("Hi", string0);
      assertFalse(string0.equals((Object)charSequence0));
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissing("Rr]SK~Sg%gBRr]SK~Sg%gB", "Rr]SK~Sg%gBRr]SK~Sg%gB", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("Rr]SK~Sg%gBRr]SK~Sg%gB", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join(byteArray0, '>');
      assertEquals(0, byteArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "-$^7");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate2.negate();
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate2.negate();
      assertNotSame(predicate4, predicate3);
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate0));
      assertNotNull(predicate4);
      
      Predicate<Object> predicate5 = predicate4.or(predicate2);
      assertNotSame(predicate2, predicate5);
      assertNotSame(predicate4, predicate3);
      assertNotSame(predicate5, predicate2);
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate4));
      assertNotNull(predicate5);
      
      boolean[] booleanArray0 = new boolean[4];
      Predicate<Object> predicate6 = predicate1.negate();
      assertNotSame(predicate6, predicate4);
      assertNotSame(predicate6, predicate3);
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate3));
      assertNotNull(predicate6);
      
      String string0 = StringUtils.replaceAll("-$^7", "-$^7", "-$^7");
      assertEquals("-$^7", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("-$^7", 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("', has a length less than 2");
      assertEquals("', has a length less than 2", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsWhitespace("', has a length less than 2");
      assertTrue(boolean0);
      
      String string3 = StringUtils.repeat("-$^7", (-278));
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "-$^7";
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "-$^7");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate3, predicate1);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate2.negate();
      assertNotSame(predicate1, predicate3);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertNotNull(predicate4);
      
      Predicate<Object> predicate5 = predicate1.and(predicate0);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate5);
      assertNotSame(predicate5, predicate3);
      assertNotSame(predicate5, predicate1);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      assertNotNull(predicate5);
      
      Predicate<Object> predicate6 = predicate1.or(predicate3);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate5);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate5);
      assertNotSame(predicate6, predicate2);
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate0));
      assertNotNull(predicate6);
      
      Predicate<Object> predicate7 = predicate4.or(predicate2);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate5);
      assertNotSame(predicate2, predicate7);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate7, predicate2);
      assertNotSame(predicate7, predicate6);
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate3));
      assertFalse(predicate7.equals((Object)predicate6));
      assertNotNull(predicate7);
      
      int int0 = 0;
      boolean[] booleanArray0 = new boolean[4];
      Predicate<Object> predicate8 = predicate1.negate();
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate5);
      assertNotSame(predicate8, predicate4);
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate3));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate2));
      assertNotNull(predicate8);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "-$^7", "-$^7");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, ':', 0, 24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The String must not be empty");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(11, stringArray0.length);
      assertEquals("The", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The String must not be empty", (CharSequence) "The");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfter("The String must not be empty", "The String must not be empty");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("a|AXx");
      assertEquals("a|AXx", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertEquals(11, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("a|AXx", "The");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.join((byte[]) null, 'P');
      assertNull(string3);
      
      String string4 = StringUtils.strip((String) null);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "The", "The");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.removeStart("pU8p9ob", "");
      assertEquals("pU8p9ob", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.join(charArray0, 'P', 55, 0);
      assertEquals(5, charArray0.length);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string6);
      
      String string7 = StringUtils.repeat("", "", 55);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      String string8 = StringUtils.truncate((String) null, 0);
      assertNull(string8);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = StringUtils.leftPad("Hi", 1329);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'm';
      charArray0[1] = '7';
      charArray0[2] = '7';
      charArray0[3] = 'm';
      charArray0[4] = '7';
      charArray0[5] = 'm';
      charArray0[6] = 'm';
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      int[] intArray0 = new int[3];
      intArray0[1] = 0;
      intArray0[2] = 0;
      String string1 = StringUtils.join(intArray0, '^');
      assertEquals(3, intArray0.length);
      assertEquals("0^0^0", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.remove("6Xg**wRyg,", "");
      assertEquals("6Xg**wRyg,", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, '8', (-98), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -98
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = StringUtils.leftPad("~", 777, "");
      assertEquals~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("P7 K$-@[_ Q", "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ~");
      assertEquals("P7 K$-@[_ Q", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ~~");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "P7 K$-@[_ Q", (CharSequence) "");
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[1] = (CharSequence) "~";
      charSequenceArray0[1] = (CharSequence) "P7 K$-@[_ Q";
      String string3 = StringUtils.abbreviateMiddle("P7 K$-@[_ Q", "P7 K$-@[_ Q", 11);
      assertEquals("P7 K$-@[_ Q", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsWhitespace(charSequenceArray0[1]);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.toRootLowerCase~");
      assertEquals~", string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = StringUtils.strip("n;$#DlV9*WH", "n;$#DlV9*WH");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "n;$#DlV9*WH", (CharSequence) "", (-488));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      int int1 = StringUtils.compareIgnoreCase("", (String) null, false);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.replaceChars("Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null, "");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", 2929);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) "");
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string3 = StringUtils.substringAfterLast((String) null, (-1));
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String string0 = StringUtils.leftPad("~", 748, "");
      assertEquals~", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("", "~", false);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.deleteWhitespace("mYrPLJQ>}WGj kH");
      assertEquals("mYrPLJQ>}WGjkH", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      charArray0[4] = '0';
      charArray0[5] = '0';
      charArray0[6] = '0';
      int int1 = StringUtils.indexOfAny((CharSequence) "mYrPLJQ>}WGj kH", charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'0', '0', '0', '0', '0', '0', '0'}, charArray0);
      
      String[] stringArray0 = StringUtils.split("~");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.substringAfterLast("V", 32);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnce~", " Uf$");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("{", "_");
      assertEquals("_{_", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("_{_");
      assertEquals("_{_", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("_{_", "#]", 926);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.unwrap("{", '!');
      assertEquals("{", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("_{_", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("X&_C@s<Dhz)7Nh;", "X&_C@s<Dhz)7Nh;", "X&_C@s<Dhz)7Nh;");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 9
         // X&_C@s<Dhz)7Nh;
         //          ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = StringUtils.repeat("\r", "Minimum abbreviation width with offset is %d", 13);
      assertEquals("\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\r", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\r");
      assertFalse(boolean0);
      
      String string1 = StringUtils.reverseDelimited((String) null, '\\');
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) ",.q9G'-IEL>Ecxgvih", (CharSequence) null);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = "\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\r";
      stringArray0[2] = null;
      stringArray0[3] = "\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\r";
      String string2 = StringUtils.replaceEach(",.q9G'-IEL>Ecxgvih", stringArray0, stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(",.q9G'-IEL>Ecxgvih", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isEmpty("\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\rMinimum abbreviation width with offset is %d\r");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Vector<CharBuffer> vector0 = new Vector<CharBuffer>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      String string3 = StringUtils.join((List<?>) vector0, "7M9X9@p3t\"jiLO;tZ", 13, (-483));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int1 = StringUtils.compareIgnoreCase("$v3<s]qdlI?>$_", "7M9X9@p3t\"jiLO;tZ", false);
      assertEquals((-19), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", 32);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.rightPad("", 0, '1');
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      try { 
        StringUtils.getBytes("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "UKIDw!\"[8m?%Qz=H";
      String string1 = StringUtils.replaceChars((String) null, (String) null, "UKIDw!\"[8m?%Qz=H");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("f&S%", (String) null, 36);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("f&S%", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      char char0 = '&';
      int int0 = StringUtils.countMatches((CharSequence) null, '&');
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "f&S%", (CharSequence) null, 13);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string3 = "Search and Replace array lengths don't match: ";
      String string4 = StringUtils.removeIgnoreCase("f&S%", "Search and Replace array lengths don't match: ");
      assertEquals("f&S%", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isEmpty("f&S%");
      assertFalse(boolean0);
      
      int int2 = StringUtils.countMatches((CharSequence) "UKIDw!\"[8m?%Qz=H", (CharSequence) null);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string5 = StringUtils.stripToEmpty("` -ss([zov7bY[");
      assertEquals("` -ss([zov7bY[", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, '&', 33, 1031);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Array and element cannot both be null", "lb");
      assertEquals("Array and element cannot both be null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("0.VSeqw(V:!3p6/m1c?", "lb", (-1563));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Array and element cannot both be null", stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'C';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      charArray0[3] = 'C';
      charArray0[4] = 'C';
      charArray0[5] = 'C';
      charArray0[6] = 'C';
      charArray0[7] = 'C';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "lb", charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C'}, charArray0);
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains("lb"));
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean2 = stack0.add((Object) "Array and element cannot both be null");
      assertTrue(stack0.contains("Array and element cannot both be null"));
      assertFalse(stack0.contains("lb"));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[Array and element cannot both be null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      stack0.replaceAll(unaryOperator0);
      assertTrue(stack0.contains("Array and element cannot both be null"));
      assertFalse(stack0.contains("lb"));
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[Array and element cannot both be null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      
      Object[] objectArray0 = stack0.toArray((Object[]) stringArray0);
      assertTrue(stack0.contains("Array and element cannot both be null"));
      assertFalse(stack0.contains("lb"));
      assertEquals(1, objectArray0.length);
      assertEquals(1, stringArray0.length);
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[Array and element cannot both be null]", stack0.toString());
      assertFalse(stack0.isEmpty());
      assertSame(stringArray0, objectArray0);
      assertNotNull(objectArray0);
      
      String[] stringArray1 = StringUtils.split("Array and element cannot both be null", '3');
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, objectArray0);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)objectArray0));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.repeat("lb", (-1563));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Array and element cannot both be null", (CharSequence) "");
      assertEquals(0, int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("0.VSeqw(V:!3p6/m1c?", "Array and element cannot both be null");
      assertEquals(0.41, double0, 0.01);
      
      String string2 = StringUtils.reverse("Array and element cannot both be null");
      assertEquals("llun eb htob tonnac tnemele dna yarrA", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.join((long[]) null, 'C', 3, 1412);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\n", ")@}4@xWT7X\"");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.removeEnd(")@}4@xWT7X\"", ")@}4@xWT7X\"");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Threshold must not be negative");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.toRootLowerCase(">");
      assertEquals(">", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphaSpace(">");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string3 = StringUtils.replaceIgnoreCase("Search and Replace array lengths don't match: ", (String) null, "S^,&Jf*I", 1224);
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", (CharSequence[]) stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean3 = StringUtils.isAllLowerCase("Search and Replace array lengths don't match: ");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      double double0 = StringUtils.getJaroWinklerDistance("Threshold must not be negative", "\n");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.prependIfMissing(" ", "", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase(" ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isWhitespace(" ");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = StringUtils.repeat("~", "~", 15);
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substring("hndIA3S]`", 3);
      assertEquals("IA3S]`", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("hndIA3S]`", "{N_");
      assertEquals("hndIA3S]`", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "~", "hndIA3S]`");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isWhitespace("~");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "IoXF");
      assertFalse(treeSet0.contains(string0));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnce("", "IoXF", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate("\"c", 0);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "\"c", 1170, (-818));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.stripEnd("", "Minimum abbreviation width with offset is %d");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("Minimum abbreviation width with offset is %d", 53, "Minimum abbreviation width with offset is %d");
      assertEquals("Minimum aMinimum abbreviation width with offset is %d", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.SPACE;
      assertEquals(" ", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) " ");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string7 = StringUtils.join((float[]) null, 'q');
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("~", 10, 10);
      assertEquals("~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "~");
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals("~", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.remaining());
      assertEquals(1, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "\u0000";
      charSequenceArray0[1] = (CharSequence) "iZp!nv|8~-_._OYYNMu";
      charSequenceArray0[2] = (CharSequence) "~";
      charSequenceArray0[3] = (CharSequence) "iZp!nv|8~-_._OYYNMu";
      charSequenceArray0[4] = (CharSequence) "~";
      charSequenceArray0[5] = (CharSequence) "iZp!nv|8~-_._OYYNMu";
      charSequenceArray0[6] = (CharSequence) charBuffer0;
      charSequenceArray0[7] = (CharSequence) "~";
      String string2 = StringUtils.appendIfMissing("iZp!nv|8~-_._OYYNMu", "~", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("iZp!nv|8~-_._OYYNMu", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray1 = new CharSequence[8];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "The Array must not b~";
      charSequenceArray1[1] = (CharSequence) "~";
      charSequenceArray1[2] = (CharSequence) "iZp!nv|8~-_._OYYNMu";
      charSequenceArray1[3] = (CharSequence) "iZp!nv|8~-_._OYYNMu";
      charSequenceArray1[4] = (CharSequence) "The Array must not b~";
      charSequenceArray1[5] = (CharSequence) charBuffer0;
      charSequenceArray1[6] = (CharSequence) "The Array must not b~";
      charSequenceArray1[7] = (CharSequence) "~";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "iZp!nv|8~-_._OYYNMu", charSequenceArray1);
      assertEquals(8, charSequenceArray1.length);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertTrue(boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      String string3 = StringUtils.center("~P0o=<7JhwXUjcIJXMZ\u0005NiK18VOU", (-871), 'e');
      assertEquals("~P0o=<7JhwXUjcIJXMZ\u0005NiK18VOU", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("The Array must not b~");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.startsWith(charSequenceArray0[5], "The Array must not b~");
      assertEquals(8, charSequenceArray0.length);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertFalse(boolean2);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.deleteWhitespace((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      String string0 = "Q*}[:~\\uk7PoA";
      String string1 = StringUtils.center(string0, 24, '2');
      assertEquals("22222Q*}[:~\\uk7PoA222222", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 748;
      String string2 = StringUtils.join(floatArray0, '2');
      assertEquals(3, floatArray0.length);
      assertEquals("0.02748.020.0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new float[] {0.0F, 748.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) string1;
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.strip(" _fw,WSm+[#(;=%", "0qY;;2=s%aGPE");
      assertEquals(" _fw,WSm+[#(", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("org.apache.commons.lang3.CharSequenceUtils");
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.leftPad("@Ie1", 65);
      assertEquals("                                                             @Ie1", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.substringBefore("offset cannot be negative", 0);
      assertEquals("offset cannot be negative", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "0qY;;2=s%aGPE", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string7 = StringUtils.normalizeSpace("~~");
      assertEquals("~~", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      boolean boolean1 = StringUtils.isAlpha("0.02748.020.0");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int2 = StringUtils.indexOf(charSequenceArray0[1], 88, 24);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) " ";
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", charSequenceArray0[0]);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) " ", 0, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1224;
      floatArray0[1] = (float) 1224;
      floatArray0[2] = (float) '0';
      floatArray0[3] = (float) 748;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 748;
      floatArray0[6] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[8] = (float) (-408);
      String string0 = StringUtils.join(floatArray0, '0', 230, (-408));
      assertEquals(9, floatArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new float[] {1224.0F, 0.0F, 48.0F, 748.0F, 0.0F, 748.0F, 0.0F, 0.0F, (-408.0F)}, floatArray0, 0.01F);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("Strings must not be null", "JXMZ\u0005NiK18VO", 230);
      assertEquals("Strings must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("~", ".VFw*yK&\"");
      assertEquals("~", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat('m', (-3244));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      String string0 = StringUtils.join((List<?>) null, "", 32767, 1360);
      assertNull(string0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "", (-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "-$^7");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate2.or(predicate2);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate3, predicate2);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotNull(predicate3);
      
      boolean boolean0 = linkedList0.removeIf(predicate1);
      assertFalse(linkedList0.contains("-$^7"));
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      
      String string0 = StringUtils.join((List<?>) linkedList0, "-$^7", 0, 0);
      assertFalse(linkedList0.contains("-$^7"));
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("X&_C@s<Dhz)7Nh;", 0);
      assertEquals("X&_C@s<Dhz)7Nh;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string2 = StringUtils.substringBetween("-$^7", "X&_C@s<Dhz)7Nh;");
      assertNull(string2);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "-$^7";
      charSequenceArray0[2] = (CharSequence) "-$^7";
      charSequenceArray0[4] = (CharSequence) "-$^7";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, 48, 'U');
      assertNull(string4);
      
      String string5 = StringUtils.center("Minimum abbreviation width with offset is %d", 7, ')');
      assertEquals("Minimum abbreviation width with offset is %d", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.left((String) null, 48);
      assertNull(string6);
      
      boolean boolean2 = StringUtils.isAllUpperCase("X&_C@s<Dhz)7Nh;");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The StrWW %!+I");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("The", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The StrWW %!+I", (CharSequence) "The");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("The StrWW %!+I", "The StrWW %!+I", "The");
      assertEquals("The", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("a|AXx");
      assertEquals("a|AXx", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.split("a|AXx", "The");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "The", "The");
      assertFalse(boolean0);
      
      String string3 = StringUtils.strip("pU8p9ob");
      assertEquals("pU8p9ob", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "The", (CharSequence) "The");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(8, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, int2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("The");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("J9ZTqY0GE]n", "J9ZTqY0GE]n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      String string1 = StringUtils.leftPad("Object varargs must not be null", 3956, "/c9Nzv|{Dx+!B8");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("", "n=8J!ZejOU\"hg$o/-:");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = "Locale must not be null";
      String string4 = StringUtils.rightPad("Locale must not be null", 3956);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.replaceChars((String) null, "", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNull(string5);
      
      boolean boolean2 = StringUtils.startsWithAny(string4, (CharSequence[]) null);
      assertFalse(boolean2);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("", "/c9Nzv|{Dx+!B8", string1);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 6
         // /c9Nzv|{Dx+!B8
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[2] = "";
      stringArray0[2] = "";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) string0);
      assertEquals(5, stringArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfter("Cannot store ", string0);
      assertEquals(5, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("Threshold must not be negative");
      assertEquals("threshold must not be negative", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("threshold must not be negative", stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) string0, (CharSequence[]) stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "Cannot store ", (CharSequence) string0);
      assertEquals(5, stringArray0.length);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String string3 = StringUtils.wrapIfMissing("offset cannot be negative", 'q');
      assertEquals("qoffset cannot be negativeq", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.joinWith("Cannot store ", stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("Cannot store Cannot store Cannot store Cannot store ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int3 = StringUtils.indexOfAny((CharSequence) null, "");
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      
      int int4 = StringUtils.indexOf((CharSequence) "offset cannot be negative", 0);
      assertEquals((-1), int4);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      
      String string5 = StringUtils.deleteWhitespace("qoffset cannot be negativeq");
      assertEquals("qoffsetcannotbenegativeq", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("Cannot store "));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      linkedHashSet0.clear();
      assertFalse(linkedHashSet0.contains("Cannot store "));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean1 = linkedHashSet0.add("org.apache.commons.lang3.ObjectUtils");
      assertFalse(linkedHashSet0.contains("Cannot store "));
      assertTrue(linkedHashSet0.contains("org.apache.commons.lang3.ObjectUtils"));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(int0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean2 = linkedHashSet0.containsAll(linkedList0);
      assertFalse(linkedList0.contains(int0));
      assertFalse(linkedHashSet0.contains("Cannot store "));
      assertTrue(linkedHashSet0.contains("org.apache.commons.lang3.ObjectUtils"));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(linkedList0);
      assertFalse(linkedList0.contains(int0));
      assertFalse(hashSet0.contains("Cannot store "));
      assertEquals(0, linkedList0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      String string6 = StringUtils.join((Iterable<?>) hashSet0, string0);
      assertFalse(linkedList0.contains(int0));
      assertFalse(hashSet0.contains("Cannot store "));
      assertEquals(5, stringArray0.length);
      assertEquals(0, linkedList0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = StringUtils.unwrap("qoffsetcannotbenegativeq", 'q');
      assertEquals("offsetcannotbenegative", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[2] = "";
      stringArray0[2] = "";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) string0);
      assertEquals(5, stringArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfter("Cannot store ", string0);
      assertEquals(5, stringArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("Threshold must not be negative");
      assertEquals("threshold must not be negative", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("threshold must not be negative", stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) string0, (CharSequence[]) stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "Cannot store ", (CharSequence) string0);
      assertEquals(5, stringArray0.length);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String string3 = StringUtils.wrapIfMissing("offset cannot be negative", 'q');
      assertEquals("qoffset cannot be negativeq", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.joinWith("Cannot store ", stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("Cannot store Cannot store Cannot store Cannot store ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int3 = StringUtils.indexOfAny((CharSequence) null, "");
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      int int4 = StringUtils.indexOf((CharSequence) "offset cannot be negative", 0);
      assertEquals((-1), int4);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      
      String string5 = StringUtils.deleteWhitespace("qoffset cannot be negativeq");
      assertEquals("qoffsetcannotbenegativeq", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains(string1));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      linkedHashSet0.clear();
      assertFalse(linkedHashSet0.contains(string1));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean1 = linkedHashSet0.add("org.apache.commons.lang3.ObjectUtils");
      assertTrue(linkedHashSet0.contains("org.apache.commons.lang3.ObjectUtils"));
      assertFalse(linkedHashSet0.contains(string1));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string6 = StringUtils.unwrap("qoffsetcannotbenegativeq", 'q');
      assertEquals("offsetcannotbenegative", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      String string0 = StringUtils.leftPad("{", 1329);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate(string0, 1329);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap(string0, "{");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1329;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      String string3 = StringUtils.stripStart(string2, "Aborting to protect against StackOverflowError - output of one loop is the input of anotherRr]SK~Sg%gBRr]SK~Sg%gB");
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.JAPANESE;
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string4 = locale0.getDisplayScript();
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertNotSame(locale0, locale1);
      assertEquals("", string4);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      Locale locale2 = locale1.stripExtensions();
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("ja", locale2.toString());
      assertEquals("ja", locale2.getLanguage());
      assertNotSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      
      int int0 = StringUtils.getFuzzyDistance("", string2, locale2);
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertEquals("ja", locale2.toString());
      assertEquals("ja", locale2.getLanguage());
      assertNotSame(locale1, locale0);
      assertSame(locale1, locale2);
      assertNotSame(locale2, locale0);
      assertSame(locale2, locale1);
      assertEquals(0, int0);
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale0));
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.repeat('Z', 3810);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) string0;
      charSequenceArray0[1] = (CharSequence) string0;
      charSequenceArray0[2] = (CharSequence) string0;
      charSequenceArray0[3] = (CharSequence) string0;
      charSequenceArray0[4] = (CharSequence) string0;
      charSequenceArray0[5] = (CharSequence) string0;
      charSequenceArray0[6] = (CharSequence) string0;
      charSequenceArray0[7] = (CharSequence) string0;
      charSequenceArray0[8] = (CharSequence) string0;
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(string0, charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      charArray0[4] = 'Z';
      charArray0[5] = 'Z';
      boolean boolean1 = StringUtils.containsOnly(charSequenceArray0[5], charArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(6, charArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', 'Z', 'Z', 'Z'}, charArray0);
      
      String string1 = StringUtils.unwrap("5'~h8:F5Tm", 'Z');
      assertEquals("5'~h8:F5Tm", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("org.apache.commons.lang3.CharUtils", 0, 3810);
      assertEquals("org.apache.commons.lang3.CharUtils", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate("jIR}f&wz!g", 711, 1);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsIgnoreCase(charSequenceArray0[6], "org.apache.commons.lang3.CharUtils");
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.uncapitalize("oBn");
      assertEquals("oBn", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)308;
      shortArray0[1] = (short)1499;
      shortArray0[2] = (short) (-1);
      shortArray0[3] = (short)32;
      shortArray0[4] = (short) (-182);
      shortArray0[5] = (short)3505;
      shortArray0[6] = (short)160;
      shortArray0[7] = (short)13;
      shortArray0[8] = (short)575;
      String string5 = StringUtils.join(shortArray0, 'Z', Integer.MAX_VALUE, (-3536));
      assertEquals(9, shortArray0.length);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertArrayEquals(new short[] {(short)308, (short)1499, (short) (-1), (short)32, (short) (-182), (short)3505, (short)160, (short)13, (short)575}, shortArray0);
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>((Collection<? extends String>) treeSet0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      String string0 = StringUtils.join((Iterable<?>) priorityQueue0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(treeSet0.contains(string0));
      assertFalse(priorityQueue0.contains(string0));
      assertEquals(0, priorityQueue0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add((Object) "");
      assertFalse(stack0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertTrue(stack0.contains(""));
      assertEquals("[]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean0);
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      stack0.replaceAll(unaryOperator0);
      assertFalse(stack0.contains("Aborting to protect against StackOverflowError - output of one loop is the input of another"));
      assertTrue(stack0.contains(""));
      assertEquals("[]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", "0o=<7JhwXUjcIJXMZ\u0005NiK18VOU");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.reverse("Array and element cannot both be null");
      assertEquals("llun eb htob tonnac tnemele dna yarrA", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceAll("Aborting to protect against StackOverflowError - output of one loop is the input of another", "", "0o=<7JhwXUjcIJXMZ\u0005NiK18VOU");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(string2, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'X');
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.removePattern("0o=<7JhwXUjcIJXMZ\u0005NiK18VOU", "0o=<7JhwXUjcIJXMZ\u0005NiK18VOU");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart("0o=<7JhwXUjcIJXMZ\u0005NiK18VOU", "~P");
      assertEquals("0o=<7JhwXUjcIJXMZ\u0005NiK18VOU", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-492.60303890029644);
      String string0 = StringUtils.mid("?f>u@+*Ob", 1, 1);
      assertEquals("f", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("f", "f");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.lowerCase(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToEmpty("%!+I");
      assertEquals("%!+I", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripStart("g<", (String) null);
      assertEquals("g<", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = new Locale("+WALncp");
      assertEquals("", locale1.getCountry());
      assertEquals("+walncp", locale1.toString());
      assertEquals("+walncp", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string4 = locale0.getDisplayVariant(locale1);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale1.getCountry());
      assertEquals("+walncp", locale1.toString());
      assertEquals("+walncp", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string4);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      Locale locale2 = Locale.JAPANESE;
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("ja", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      
      String string5 = locale2.getDisplayScript();
      assertEquals("jpn", locale2.getISO3Language());
      assertEquals("ja", locale2.getLanguage());
      assertEquals("ja", locale2.toString());
      assertEquals("", locale2.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getISO3Country());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals("", string5);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = locale0.getDisplayVariant((Locale) null);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotSame(locale0, locale1);
      assertNotSame(locale0, locale2);
      assertEquals("", string6);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      Locale locale3 = locale0.stripExtensions();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale3.getISO3Country());
      assertEquals("zh", locale3.getLanguage());
      assertEquals("zho", locale3.getISO3Language());
      assertEquals("zh_TW", locale3.toString());
      assertEquals("TW", locale3.getCountry());
      assertEquals("", locale3.getVariant());
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertNotSame(locale3, locale1);
      assertNotSame(locale3, locale2);
      assertSame(locale3, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
      assertFalse(locale3.equals((Object)locale1));
      assertFalse(locale3.equals((Object)locale2));
      assertNotNull(locale3);
      
      int int0 = StringUtils.getFuzzyDistance(" ", "", locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale3);
      assertNotSame(locale0, locale2);
      assertEquals(0, int0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale0.equals((Object)locale2));
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      String string0 = StringUtils.leftPad("~", 748, "");
      assertEquals~", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("", "~", false);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (-1), 57);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width is %d", "$v3<s]qdlI?>$_", (-1356));
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("Minimum abbre", charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) ",.q9G'-IEL>Ecxgvih", (CharSequence~", 57);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("~", "$v3<s]qdlI?>$_", (-1));
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.toRootUpperCase("");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      int int3 = StringUtils.countMatches((CharSequence) "Minimum abbre", (CharSequence) "Minimum abbre");
      assertEquals(1, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      String string2 = StringUtils.strip("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      String string3 = StringUtils.join(objectArray0, ",.q9G'-IEL>Ecxgvih", 57, (-1513));
      assertEquals(3, objectArray0.length);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      char char0 = 'F';
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'F';
      intArray0[1] = (int) 'F';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'F', (-207), 1880);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -207
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = "Minimum abbreviation ws ";
      String string1 = StringUtils.substringAfterLast("Minimum abbreviation ws ", "Minimum abbreviation ws ");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation ws ";
      charSequenceArray0[2] = (CharSequence) "Minimum abbreviation ws ";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (int) 'F';
      intArray0[1] = (int) 'F';
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 'F', (-207), 1880);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -207
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = StringUtils.leftPad((String) null, 1381, "0o=<7JhwXUjcIJXMZ\u0005NiK18VOU");
      assertNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("QGwZE:xZn\"U)jn", (String) null, false);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAny((CharSequence) "QGwZE:xZn\"U)jn", charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "0o=<7JhwXUjcIJXMZ\u0005NiK18VOU";
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "0o=<7JhwXUjcIJXMZ\u0005NiK18VOU";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      int int2 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      String string2 = StringUtils.leftPad("QGwZE:xZn\"U)jn", 1899, ", Length: 0");
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("~", "~", 128);
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "\u0000");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.substring((String) null, 128);
      assertNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("hndIA3S]`", "{}");
      assertEquals("hndIA3S]`", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "~", "hndIA3S]`");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.rightPad("\u0000", (int) '\u0000', "{}");
      assertEquals("\u0000", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "\u0000", charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "~", (CharSequence) "");
      assertEquals("~", charSequence0);
      assertNotNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "";
      String string0 = StringUtils.removeStart("JXMZ\u0005NiK18VOU", "0o=<7JhwXUjcI");
      assertEquals("JXMZ\u0005NiK18VOU", string0);
      assertFalse(string0.equals((Object)charSequence0));
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "JXMZ\u0005NiK18VOU");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "jZFcC,A:&V6Z\"#]by\"", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("3l|=6", "JXMZ\u0005NiK18VOU");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.rotate("offset cannot be negative", 0);
      assertEquals("offset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.chomp("n;$#DlV9*WH", "{N_");
      assertEquals("n;$#DlV9*WH", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[8];
      longArray0[6] = 35L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 3443;
      longArray0[3] = 35L;
      longArray0[4] = (long) (-1238);
      longArray0[3] = 35L;
      longArray0[6] = (long) 0;
      longArray0[2] = (long) 0;
      String string1 = StringUtils.join(longArray0, 'L', (-128), (-1238));
      assertEquals(8, longArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {0L, 0L, 0L, 35L, (-1238L), 0L, 0L, 0L}, longArray0);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "n;$#DlV9*WH";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "{N_";
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("n;$#DlV9*WH", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split("", 'L');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "{N_", '3');
      assertEquals(0, int0);
      
      String string2 = StringUtils.join(longArray0, 'L');
      assertEquals(8, longArray0.length);
      assertEquals("0L0L0L35L-1238L0L0L0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new long[] {0L, 0L, 0L, 35L, (-1238L), 0L, 0L, 0L}, longArray0);
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.unwrap("1[n:Exw .%PWa-sKZnq", '3');
      assertEquals("1[n:Exw .%PWa-sKZnq", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAlphaSpace("1[n:Exw .%PWa-sKZnq");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "0L0L0L35L-1238L0L0L0", (CharSequence) "");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "*WH";
      stringArray0[1] = "6atWG-#o}gb[";
      stringArray0[2] = "T'KNQf_/9BK'O";
      stringArray0[3] = "not both be null";
      stringArray0[4] = "87BwKrUTG+l?!{RS_Th";
      stringArray0[5] = "V9ncB6'qr)Ca[~VM";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("87BwKrUTG+l?!{RS_Th", stringArray0);
      assertEquals(6, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertTrue(boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      String string0 = StringUtils.wrapIfMissing("not both be null", 'z');
      assertEquals("znot both be nullz", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      TreeSet<Locale> treeSet0 = new TreeSet<Locale>();
      assertNotNull(treeSet0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) treeSet0);
      assertFalse(list0.contains(locale0));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Locale locale1 = Locale.lookup(stack0, list0);
      assertFalse(list0.contains(locale0));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(locale1);
      
      String string1 = StringUtils.lowerCase("V9ncB6'qr)Ca[~VM", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("v9ncb6'qr)ca[~vm", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "V9ncB6'qr)Ca[~VM", (CharSequence) "V9ncB6'qr)Ca[~VM");
      assertEquals(1, int0);
      
      String string2 = StringUtils.rightPad("V9ncB6'qr)Ca[~VM", (-1491), '+');
      assertEquals("V9ncB6'qr)Ca[~VM", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsAny("V9ncB6'qr)Ca[~VM", stringArray1);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertTrue(boolean1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1 == boolean0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.join((Object[]) stringArray0, "*WH", 1, (-1491));
      assertEquals(6, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals("", string3);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("S");
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeStart("S", "S");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("", (-649));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      String string2 = StringUtils.uncapitalize("K");
      assertEquals("k", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isNumericSpace("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      String string0 = " in an array of ";
      String string1 = StringUtils.replaceIgnoreCase("s^Tz=yUHOLBfB)r", "G(`txMTGuCr/", " in an array of ");
      assertEquals("s^Tz=yUHOLBfB)r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "Strings must not be null";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Strings must not be null", "{N_", (-382), (-88));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      String string0 = StringUtils.replaceIgnoreCase((String) null, (String) null, (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "~", 108, 108);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.reverseDelimited(",.q9G'-IEL>Ecxgvih", '8');
      assertEquals(",.q9G'-IEL>Ecxgvih", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "RBOq>1vzAG)pX", (CharSequence) "RBOq>1vzAG)pX");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "~";
      stringArray0[1] = ",.q9G'-IEL>Ecxgvih";
      stringArray0[2] = ",.q9G'-IEL>Ecxgvih";
      stringArray0[3] = "WPW~%a:{U";
      stringArray0[4] = "~";
      stringArray0[5] = ",.q9G'-IEL>Ecxgvih";
      stringArray0[6] = ",.q9G'-IEL>Ecxgvih";
      stringArray0[7] = "|=kurT*2ni#f;";
      String string1 = StringUtils.replaceEach("|=kurT*2ni#f;", stringArray0, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("|=kurT*2ni#f;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      String string0 = StringUtils.mid("~", 'e', 'e');
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("~", "~", 15);
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.substring("hndIA3S]`", 3);
      assertEquals("IA3S]`", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", (CharSequence) "IA3S]`");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.removeStartIgnoreCase("hndIA3S]`", "{N_");
      assertEquals("hndIA3S]`", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "~", "hndIA3S]`");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = StringUtils.rightPad("", (-1), "Search and Replace array lengths don't match: ");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new char[] {'e'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = StringUtils.repeat("Mini9*WH{N_", "Mini9*WH{N_", 2028);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf(string0, "Mini9*WH{N_", 2028);
      assertEquals(22297, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "Mini9*WH{N_");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string1 = StringUtils.unwrap((String) null, 'Q');
      assertNull(string1);
      
      String string2 = StringUtils.getDigits("Mini9*WH{N_");
      assertEquals("9", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("Object varargs must not be null", "Object varargs must not be null");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("$v3<s]qdlI?>$_", ",.q9G'-IEL>Ecxgvih", 0);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("$", charSequence0);
      assertNotNull(charSequence0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Comparator should not be null.", "Strings must not be null", 0);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.toRootUpperCase(" vs ");
      assertEquals(" VS ", string0);
      assertFalse(string0.equals((Object)charSequence0));
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) " VS ", (CharSequence) "$v3<s]qdlI?>$_");
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip(",.q9G'-IEL>Ecxgvih");
      assertEquals(",.q9G'-IEL>Ecxgvih", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      String string2 = StringUtils.difference(" VS ", "{N_");
      assertEquals("{N_", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(string2);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertFalse(stack0.contains(0));
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = stack0.add(object0);
      assertTrue(stack0.contains(object0));
      assertFalse(stack0.contains(0));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("$v3<s]qdlI?>$_", "{N_");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens((String) null, '4');
      assertNull(stringArray2);
      
      String string3 = StringUtils.removeEndIgnoreCase("Minimum abbreviation width is %d", "wi?kmiWk{K+D");
      assertEquals("Minimum abbreviation width is %d", string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Iterable<?>) stack0, "...");
      assertTrue(stack0.contains(object0));
      assertFalse(stack0.contains(0));
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "java.lang.Object@67c8e32b");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string5 = StringUtils.abbreviate("$v3<s]qdlI?>$_", (String) null, 500);
      assertEquals("$v3<s]qdlI?>$_", string5);
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isWhitespace("{N_");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.replaceAll("u", "", "u");
      assertEquals("uuu", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "uuu";
      stringArray0[1] = "uuu";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[3] = "uuu";
      String string1 = StringUtils.strip(stringArray0[4], "uuu");
      assertEquals(5, stringArray0.length);
      assertNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("uuu", (CharSequence) null, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("uuu", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("XvV#V!V`@2,s1", (String) null);
      assertEquals("XvV#V!V`@2,s1", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "XvV#V!V`@2,s1");
      assertFalse(boolean0);
      
      String string4 = StringUtils.removeEndIgnoreCase("uuu", "uuu");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle(" is not in the range '0' - '9'", "Ubxi", (short)2607);
      assertEquals(" is not in the range '0' - '9'", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.containsWhitespace("uuu");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.truncate("uuu", (int) (short)2607, (int) (short)897);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      
      String string7 = StringUtils.wrap("", "uuu");
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertNotNull(string7);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)0;
      String string8 = StringUtils.join(byteArray0, '9', (int) (short)897, (int) (byte)0);
      assertEquals(4, byteArray0.length);
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte)11, (byte) (-16), (byte)17, (byte)0}, byteArray0);
      assertNotNull(string8);
      
      boolean boolean2 = StringUtils.containsAnyIgnoreCase("", stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)2607;
      intArray0[1] = (-207);
      intArray0[2] = (int) (short)2607;
      intArray0[3] = (int) (byte) (-16);
      String string9 = StringUtils.join(intArray0, 'S', (int) (short)2607, (int) (byte)17);
      assertEquals(4, intArray0.length);
      assertEquals("", string9);
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string2));
      assertArrayEquals(new int[] {2607, (-207), 2607, (-16)}, intArray0);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("Threshold must not be negative", "Threshold must not be negative");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      char char0 = 'D';
      int int0 = StringUtils.countMatches((CharSequence) "", 'D');
      assertEquals(0, int0);
      
      String string1 = StringUtils.difference("/c(>jH{k&S%J`i@", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("Threshold must not be negative", "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllLowerCase("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.abbreviate("", 0, (-32768));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[1] = (CharSequence) "";
      int int1 = StringUtils.lastIndexOfAny("Threshold must not be negative", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(30, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.trimToEmpty("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("", 503, "nJ3U296lm%Ro~[#+Z");
      assertEquals("nJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int2 = StringUtils.indexOfAnyBut(charSequenceArray0[1], (char[]) null);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = (-141);
      int int4 = StringUtils.indexOf((CharSequence) "", 4, (-141));
      assertEquals((-1), int4);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      
      boolean boolean3 = StringUtils.startsWithAny("nJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%Ro~[#+ZnJ3U296lm%", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      String string5 = StringUtils.substringBetween("/c(>jH{k&S%J`i@", "/c(>jH{k&S%J`i@", "");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertNotNull(string5);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      boolean boolean4 = vector0.removeElement("ws+C~");
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("ws+C~", (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // weight=-1.0
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.stripStart("~", "~");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.strip("offset cannot be negative", "");
      assertEquals("offset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("~");
      assertEquals("~", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string3 = StringUtils.leftPad("~", 0);
      assertEquals("~", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "~";
      String string4 = StringUtils.substringBefore("~", 0);
      assertEquals("~", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[4], (CharSequence) "offset cannot be negative", 0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.normalizeSpace("~");
      assertEquals("~", string5);
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      String string6 = StringUtils.substringBefore((String) null, "pZU=(*+odSN4`.qfNCW");
      assertNull(string6);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width is %d", 3);
      assertEquals("imum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("imum abbreviation width is %d", "Minimum abbreviation width is %d", 3);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("imum abbreviation width is %d", "", 3);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("imum abbreviation width is %d", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "imum abbreviation width is %d", (CharSequence) "", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("imum abbreviation width is %d", "JXMZ\u0005NiK18VOU", 3);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int2 = StringUtils.countMatches((CharSequence) "imum abbreviation width is %d", (CharSequence) "");
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-127);
      String string1 = StringUtils.join(byteArray0, 'j', 9, (int) (byte) (-127));
      assertEquals(1, byteArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-127)}, byteArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("{N_");
      assertEquals("{N_", string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing("{N_", "imum abbreviation width is %d", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals("imum abbreviation width is %d{N_", string3);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.join(byteArray0, '$');
      assertEquals(1, byteArray0.length);
      assertEquals("-127", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertArrayEquals(new byte[] {(byte) (-127)}, byteArray0);
      assertNotNull(string4);
      
      String string5 = StringUtils.difference("", (String) null);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)charSequence0));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String[] stringArray2 = new String[4];
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = "imum abbreviation width is %d";
      stringArray2[1] = "imum abbreviation width is %d";
      stringArray2[2] = null;
      stringArray2[3] = "";
      String string6 = StringUtils.firstNonEmpty(stringArray2);
      assertEquals(4, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals("imum abbreviation width is %d", string6);
      assertTrue(string6.equals((Object)charSequence0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceChars((String) null, "{N_", "{N_");
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width is %d", 0);
      assertEquals("Minimum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", 0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", 0);
      assertEquals(33, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringBeforeLast("", "Minimum abbreviation width is %d");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(33, stringArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substring("Minimum abbreviation width is %d", 0, 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("Minimum abbreviation width is %d", "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", '^');
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      CharSequence[] charSequenceArray0 = null;
      String string0 = StringUtils.substringBeforeLast("*<&ted&:j}D$<$t", "0J@;Q<|");
      assertEquals("*<&ted&:j}D$<$t", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substring("*<&ted&:j}D$<$t", 82, 82);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.length("0J@;Q<|");
      assertEquals(7, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "0J@;Q<|", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("W3", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.substringBefore("x)U&){zu{JYK'`<F9", "i%g~L");
      assertEquals("x)U&){zu{JYK'`<F9", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("i%g~L", (CharSequence[]) null);
      assertFalse(boolean0);
      
      int int0 = 65;
      String string1 = StringUtils.substringAfter("x)U&){zu{JYK'`<F9", 65);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = (-662);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "x)U&){zu{JYK'`<F9", (CharSequence) "", (-662));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "-$^7");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate2.or(predicate2);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate3, predicate2);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotNull(predicate3);
      
      boolean boolean0 = linkedList0.removeIf(predicate1);
      assertFalse(linkedList0.contains("-$^7"));
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      
      String string0 = StringUtils.join((List<?>) linkedList0, "-$^7", 0, 0);
      assertFalse(linkedList0.contains(string0));
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("X&_C@s<Dhz)7Nh;", 0);
      assertEquals("X&_C@s<Dhz)7Nh;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      String string2 = StringUtils.substringBetween("-$^7", "X&_C@s<Dhz)7Nh;");
      assertNull(string2);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "-$^7";
      charSequenceArray0[2] = (CharSequence) "-$^7";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "-$^7";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, 48, 'U');
      assertNull(string4);
      
      String string5 = StringUtils.center("Minimum abbreviation width with offset is %d", 7, ')');
      assertEquals("Minimum abbreviation width with offset is %d", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.left((String) null, 48);
      assertNull(string6);
      
      String string7 = StringUtils.prependIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string7);
      
      String string8 = StringUtils.join((Iterable<?>) linkedList0, '*');
      assertFalse(linkedList0.contains("X&_C@s<Dhz)7Nh;"));
      assertEquals(0, linkedList0.size());
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      String string0 = StringUtils.abbreviate("P(k'WN706,4Xv$d1:`", 5);
      assertEquals("P(...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith("gs must not be null", "P(...");
      assertFalse(boolean0);
      
      String string1 = StringUtils.deleteWhitespace("P(k'WN706,4Xv$d1:`");
      assertEquals("P(k'WN706,4Xv$d1:`", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "gs must not be null";
      String string2 = StringUtils.prependIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string3 = StringUtils.wrapIfMissing("gs must not be null", 'z');
      assertEquals("zgs must not be nullz", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBeforeLast("5]\"Fv6", "?");
      assertEquals("5]\"Fv6", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.isMixedCase("5]\"Fv6");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("*<&ted&:j}D$<$d", "0J@;Q<|");
      assertEquals("*<&ted&:j}D$<$d", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring("*<&ted&:j}D$<$d", 49, 49);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.length("0J@;Q<|");
      assertEquals(7, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("B.LkVjiZT:", '^');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase((CharSequence) null, "B.LkVjiZT:");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("*<&ted&:j}D$<$d", ',');
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean3 = StringUtils.endsWithAny("*<&ted&:j}D$<$d", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(boolean3);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = "~B?s";
      String string1 = StringUtils.trim("~B?s");
      assertEquals("~B?s", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("~B?s", ">%=U+lkE:)jqQbY@", (-642));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 17
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast((String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring((String) null, 49, 49);
      assertNull(string1);
      
      int int0 = StringUtils.length("0J@;Q<|");
      assertEquals(7, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("B.LkVjiZT:", '^');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase((CharSequence) null, "0J@;Q<|");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("*<&ted&:j}D$<$t", ',');
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean3 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(boolean3);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string2 = StringUtils.valueOf((char[]) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.truncate("", 1417);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = ' ';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'l', ' '}, charArray0);
      
      String string1 = StringUtils.trimToEmpty("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.appendIfMissing("", "", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-96);
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.abbreviate("P(k'WN706,4Xv$d1:`", 5);
      assertEquals("P(...", string0);
      assertNotNull(string0);
      
      String string1 = "org.apache.commons.lang3.ObjectUtils";
      String string2 = StringUtils.substring("org.apache.commons.lang3.ObjectUtils", (-3848), (-3848));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnceIgnoreCase("-!)vW78OY D<7w C", "P(...", "org.apache.commons.lang3.ObjectUtils");
      assertEquals("-!)vW78OY D<7w C", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-3848);
      longArray0[1] = (long) (-3848);
      longArray0[2] = (long) (-3848);
      longArray0[3] = (long) (-3848);
      longArray0[4] = (long) 5;
      longArray0[5] = (long) 5;
      longArray0[6] = (-840L);
      longArray0[7] = (long) 5;
      longArray0[8] = (long) 5;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'Z', (-2749), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2749
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.strip("n;$#DlV9*WH", "n;$#DlV9*WH");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "n;$#DlV9*WH", (CharSequence) "", (-488));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      int int1 = StringUtils.compareIgnoreCase("", (String) null, false);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'Z';
      String string2 = StringUtils.stripEnd("n;$#DlV9*WH", "");
      assertEquals("n;$#DlV9*WH", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.toRootUpperCase("");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Search and Replace array lengths don't match: ", ")]f`DIPqx9G60Ts|");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.chomp("n;$#DlV9*WH", "Cloneable type ");
      assertEquals("n;$#DlV9*WH", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "6");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // 6
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Array and element cannot both be null", "Lm6RDw6KJnk2`is9");
      assertEquals("Array and element cannot both be null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("Lm6RDw6KJnk2`is9", "Array and element cannot both be null", "Lm6RDw6KJnk2`is9");
      assertNull(stringArray0);
      
      String string1 = StringUtils.remove(" ", 'C');
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString((String) null);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllEmpty((CharSequence[]) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      String string0 = StringUtils.leftPad("{", 1329);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate(string0, 1329);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap(string0, "{");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1329;
      String string3 = StringUtils.leftPad(string0, (-2472), "+z`");
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase(string3, string0);
      assertTrue(boolean0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.center("+z`", 24, '0');
      assertEquals("0000000000+z`00000000000", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 1329;
      floatArray0[1] = 1972.8844F;
      floatArray0[2] = (float) (-2472);
      floatArray0[3] = (float) (-2472);
      String string5 = StringUtils.join(floatArray0, 'z');
      assertEquals(4, floatArray0.length);
      assertEquals("1329.0z1972.8844z-2472.0z-2472.0", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertArrayEquals(new float[] {1329.0F, 1972.8844F, (-2472.0F), (-2472.0F)}, floatArray0, 0.01F);
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.join((Object[]) charSequenceArray0, "l&+E3");
      assertEquals(0, charSequenceArray0.length);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "clone");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // clone
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("*<&ted&:j}D$<$t", "0J@;Q<|");
      assertEquals("*<&ted&:j}D$<$t", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.remove("*<&ted&:j}D$<$t", 'k');
      assertEquals("*<&ted&:j}D$<$t", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("*<&ted&:j}D$<$t", "offset cannot be negative");
      assertEquals("*<&ted&:j}D$<$t", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[1] = (CharSequence) "*<&ted&:j}D$<$t";
      charSequenceArray0[2] = (CharSequence) "0J@;Q<|";
      charSequenceArray0[3] = (CharSequence) "*<&ted&:j}D$<$t";
      int int0 = StringUtils.indexOfAny((CharSequence) "*<&ted&:j}D$<$t", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "*<&ted&:j}D$<$t", (CharSequence) "*<&ted&:j}D$<$t");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.unwrap((String) null, "The character ");
      assertNull(string3);
      
      String string4 = StringUtils.leftPad((String) null, 622, 'j');
      assertNull(string4);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0[1], (CharSequence) "0J@;Q<|");
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "*<&ted&:j}D$<$t", (CharSequence) "*<&ted&:j}D$<$t", (-1982));
      assertEquals(0, int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      
      int int4 = StringUtils.countMatches((CharSequence) null, 'D');
      assertEquals(0, int4);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      
      int int5 = StringUtils.compare("*<&ted&:j}D$<$t", "?FK", false);
      assertEquals((-21), int5);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      
      boolean boolean1 = StringUtils.isEmpty("*<&ted&:j}D$<$t");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1329;
      doubleArray0[2] = (double) 1329;
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Hi", "JXMZ\u0005NiK18VOU", (-475));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("H", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.countMatches((CharSequence) "JXMZ\u0005NiK18VOU", (CharSequence) "H");
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.swapCase("Hi");
      assertEquals("hI", string0);
      assertFalse(string0.equals((Object)charSequence0));
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissing("Rr]SK~Sg%gBRr]SK~Sg%gB", "Rr]SK~Sg%gBRr]SK~Sg%gB", stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals("Rr]SK~Sg%gBRr]SK~Sg%gB", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join(byteArray0, '>');
      assertEquals(0, byteArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("...", 'J');
      assertEquals("J...J", string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("Rr]SK~Sg%gBRr]SK~Sg%gB", "(r:q+Ws(r:q+Ws");
      assertEquals("Rr]SK~Sg%gBRr]SK~Sg%gB", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int1 = StringUtils.compare("org.apache.commons.lang3.RegExUtils", (String) null, false);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      int int2 = StringUtils.getFuzzyDistance("(r:q+Ws(r:q+Ws", "Hi", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)64;
      String string0 = StringUtils.substring("not both be null", 90, 90);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.length("r]$I7^[8Lh.%rRulA~");
      assertEquals(18, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("GlgI&I?@wsO4`V%V", 'f');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("r]$I7^[8Lh.%rRulA~", "B.LkVjiZT:");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", "B.LkVjiZT:");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("UJK5Y?32k(-1", 'f');
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean2 = StringUtils.endsWithAny((CharSequence) null, stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(boolean2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", 'p');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("^o*Mh+pT,C", 'p');
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean2 = StringUtils.endsWithAny("", stringArray1);
      assertEquals(2, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(boolean2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = StringUtils.wrap("-Aavj{a/", '&');
      assertEquals("&-Aavj{a/&", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToEmpty("PZMo");
      assertEquals("PZMo", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-76);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte) (-63);
      byteArray0[4] = (byte)35;
      byteArray0[5] = (byte)16;
      byteArray0[6] = (byte)24;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(7, byteArray0.length);
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertEquals(7, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=7 cap=7]", byteBuffer0.toString());
      assertEquals(7, byteBuffer0.limit());
      assertEquals(7, byteBuffer0.capacity());
      assertArrayEquals(new byte[] {(byte) (-76), (byte)4, (byte) (-76), (byte) (-63), (byte)35, (byte)16, (byte)24}, byteArray0);
      assertNotNull(byteBuffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(106);
      assertEquals(106, charBuffer0.length());
      assertEquals(106, charBuffer0.remaining());
      assertEquals(106, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(106, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      ByteBuffer byteBuffer1 = charset0.encode(charBuffer0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(106, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(106, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(106, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertEquals(106, byteBuffer1.remaining());
      assertEquals(0, byteBuffer1.position());
      assertEquals(116, byteBuffer1.capacity());
      assertFalse(byteBuffer1.isReadOnly());
      assertTrue(byteBuffer1.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=106 cap=116]", byteBuffer1.toString());
      assertFalse(byteBuffer1.isDirect());
      assertTrue(byteBuffer1.hasRemaining());
      assertEquals(106, byteBuffer1.limit());
      assertNotSame(byteBuffer1, byteBuffer0);
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertNotNull(byteBuffer1);
      
      CharBuffer charBuffer1 = charset0.decode(byteBuffer1);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(106, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(106, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(106, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertFalse(byteBuffer1.hasRemaining());
      assertEquals(116, byteBuffer1.capacity());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=106 lim=106 cap=116]", byteBuffer1.toString());
      assertTrue(byteBuffer1.hasArray());
      assertEquals(0, byteBuffer1.remaining());
      assertEquals(106, byteBuffer1.position());
      assertFalse(byteBuffer1.isDirect());
      assertEquals(106, byteBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(106, charBuffer1.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(106, charBuffer1.remaining());
      assertEquals(106, charBuffer1.capacity());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(106, charBuffer1.length());
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      CharBuffer charBuffer2 = StringUtils.defaultIfBlank(charBuffer0, charBuffer1);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(106, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(106, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(106, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertFalse(byteBuffer1.hasRemaining());
      assertEquals(116, byteBuffer1.capacity());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=106 lim=106 cap=116]", byteBuffer1.toString());
      assertTrue(byteBuffer1.hasArray());
      assertEquals(0, byteBuffer1.remaining());
      assertEquals(106, byteBuffer1.position());
      assertFalse(byteBuffer1.isDirect());
      assertEquals(106, byteBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(106, charBuffer1.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertEquals(106, charBuffer1.remaining());
      assertEquals(106, charBuffer1.capacity());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(106, charBuffer1.length());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(0, charBuffer2.arrayOffset());
      assertFalse(charBuffer2.isDirect());
      assertEquals(106, charBuffer2.length());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals(106, charBuffer2.limit());
      assertEquals(106, charBuffer2.remaining());
      assertEquals(106, charBuffer2.capacity());
      assertTrue(charBuffer2.hasArray());
      assertEquals(0, charBuffer2.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer2.toString());
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer0, charBuffer2);
      assertNotSame(byteBuffer1, byteBuffer0);
      assertNotSame(charBuffer1, charBuffer0);
      assertSame(charBuffer1, charBuffer2);
      assertNotSame(charBuffer2, charBuffer0);
      assertSame(charBuffer2, charBuffer1);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertFalse(charBuffer2.equals((Object)charBuffer0));
      assertNotNull(charBuffer2);
      
      String string0 = StringUtils.substringBetween((String) null, (String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.difference((String) null, (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The StrWW %!+I");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeStart("The StrWW %!+I", "The StrWW %!+I");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.uncapitalize("a|AXx");
      assertEquals("a|AXx", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.split("a|AXx", "");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.strip("pU8p9ob");
      assertEquals("pU8p9ob", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.capitalize(".8");
      assertEquals(".8", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      Class<Integer> class0 = Integer.class;
      ServiceLoader<Integer> serviceLoader0 = ServiceLoader.load(class0);
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertNotNull(serviceLoader0);
      
      String string4 = StringUtils.join((Iterable<?>) serviceLoader0, "The Array must not be null");
      assertEquals("java.util.ServiceLoader[java.lang.Integer]", serviceLoader0.toString());
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) ".8", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      String string0 = StringUtils.leftPad("~", 748, "");
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip~");
      assertEquals("P7 K$-@[_ Q", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", "a|2{wm2q}Z:>8MO5-");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "P7 K$-@[_ Q", (CharSequence) "");
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "a|2{wm2q}Z:>8MO5-";
      charSequenceArray0[1] = (CharSequence) "P7 K$-@[_ Q";
      charSequenceArray0[2] = (CharSequence) "P7 K$-@[_ Q";
      charSequenceArray0[3] = (CharSequence) "P7 K$-@[_ Q";
      charSequenceArray0[4] = (CharSequence) "P7 K$-@[_ Q";
      charSequenceArray0[5] = (CharSequence) "P7 K$-@[_ Q";
      charSequenceArray0[6] = (CharSequence~";
      charSequenceArray0[7] = (CharSequence) "~";
      boolean boolean1 = StringUtils.equalsAny("", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOf(charSequenceArray0[2], charSequenceArray0[1], 748);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, '7', (-7), (-1119));
      assertEquals(8, charSequenceArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.difference("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0[2], (CharSequence) "a|2{wm2q}Z:>8MO5-");
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.leftPad("~", 748);
      assertEquals~", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence~", (CharSequence) "a|2{wm2q}Z:>8MO5-", (-3052));
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '7';
      charArray0[1] = 'j';
      charArray0[2] = '7';
      charArray0[3] = '7';
      charArray0[4] = '7';
      charArray0[5] = '7';
      charArray0[6] = 'j';
      charArray0[7] = 'j';
      charArray0[8] = '7';
      String string6 = StringUtils.valueOf(charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("7j7777jj7", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertArrayEquals(new char[] {'7', 'j', '7', '7', '7', '7', 'j', 'j', '7'}, charArray0);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("", 47, "l?4?j<oz:$X*");
      assertEquals("l?4?j<oz:$X*l?4?j<oz:$Xl?4?j<oz:$X*l?4?j<oz:$X*", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "H/:?y]w_,w9C";
      charSequenceArray0[3] = (CharSequence) "\n";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.substringBetween((String) null, "JD6@CXAkI~|", "Z}=i$lfs)N.i#h");
      assertNull(string3);
      
      String string4 = StringUtils.repeat(":", 75);
      assertEquals(":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.endsWithAny("l?4?j<oz:$X*", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[2], (CharSequence) "H/:?y]w_,w9C");
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, 'y', 0, 95);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "...";
      stringArray0[1] = "%";
      stringArray0[2] = "6";
      stringArray0[3] = "-hCXnntwwf95-";
      String[] stringArray1 = new String[10];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.joinWith("...", stringArray1);
      assertEquals(10, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("...........................", string0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'd';
      charArray0[1] = 'w';
      charArray0[2] = 'o';
      charArray0[3] = '3';
      charArray0[4] = 'h';
      charArray0[5] = 'J';
      charArray0[6] = 'u';
      charArray0[7] = '+';
      charArray0[8] = 'G';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "-hCXnntwwf95-", charArray0);
      assertEquals(9, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'d', 'w', 'o', '3', 'h', 'J', 'u', '+', 'G'}, charArray0);
      
      String string1 = StringUtils.defaultString("UJK5Y?32k(-1", "'bA'");
      assertEquals("UJK5Y?32k(-1", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.getDigits("Minimum abbreviation width is %d");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("h<KpB{VKVpZ6);dZLx7", 2221);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      long[] longArray0 = new long[8];
      longArray0[6] = 35L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 3443;
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "n;$#DlV9*WH";
      charSequenceArray0[1] = (CharSequence) "n;$#DlV9*WH";
      charSequenceArray0[2] = (CharSequence) "{N_";
      charSequenceArray0[3] = (CharSequence) "n;$#DlV9*WH";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.rightPad("Threshold must not be negative", 0, 'd');
      assertEquals("Threshold must not be negative", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("bxyoK9Gh", (-1), '\'');
      assertEquals("bxyoK9Gh", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.difference("#MO", "\";(VNy$X4n2MGDr");
      assertEquals("\";(VNy$X4n2MGDr", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphanumeric(charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>(590);
      assertFalse(vector0.contains(590));
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(590, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string0 = StringUtils.difference((String) null, "j{henp;CU");
      assertEquals("j{henp;CU", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "j{henp;CU", 38);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.abbreviateMiddle((String) null, "luj<M*%NG5)%UL", 38);
      assertNull(string1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("j{henp;CU"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet1.contains("j{henp;CU"));
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertNotNull(linkedHashSet1);
      
      linkedHashSet1.clear();
      assertFalse(linkedHashSet1.contains("j{henp;CU"));
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(38));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.FORMAT;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category6;
      Locale.Category locale_Category7 = Locale.Category.DISPLAY;
      locale_CategoryArray0[7] = locale_Category7;
      Locale.Category locale_Category8 = Locale.Category.DISPLAY;
      locale_CategoryArray0[8] = locale_Category8;
      Locale.Category[] locale_CategoryArray1 = linkedList0.toArray(locale_CategoryArray0);
      assertFalse(linkedList0.contains(38));
      assertEquals(9, locale_CategoryArray0.length);
      assertEquals(9, locale_CategoryArray1.length);
      assertEquals(0, linkedList0.size());
      assertSame(locale_CategoryArray0, locale_CategoryArray1);
      assertSame(locale_CategoryArray1, locale_CategoryArray0);
      assertNotNull(locale_CategoryArray1);
      
      boolean boolean0 = linkedHashSet1.containsAll(vector0);
      assertFalse(vector0.contains("j{henp;CU"));
      assertFalse(linkedHashSet1.contains("j{henp;CU"));
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(590, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      assertTrue(linkedHashSet1.isEmpty());
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertTrue(boolean0);
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      
      HashSet<Object> hashSet0 = new HashSet<Object>(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("j{henp;CU"));
      assertFalse(hashSet0.contains("j{henp;CU"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(linkedHashSet0.equals((Object)linkedHashSet1));
      assertNotNull(hashSet0);
      
      Integer integer0 = new Integer((-4381));
      assertEquals((-4381), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      boolean boolean1 = linkedList0.add(integer0);
      assertFalse(linkedList0.contains(38));
      assertTrue(linkedList0.contains(integer0));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.join((Iterable<?>) linkedList0, "Z1iE<g4BW");
      assertFalse(linkedList0.contains(38));
      assertTrue(linkedList0.contains(integer0));
      assertEquals(1, linkedList0.size());
      assertEquals("-4381", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isBlank("luj<M*%NG5)%UL");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = StringUtils.substringBetween("offset cannot be negative", "offset cannot be negative");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) "offset cannot be negative");
      assertFalse(boolean0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string1 = StringUtils.join((List<?>) linkedList0, "offset cannot be negative", 110, (-2221));
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate((String) null, (-2221));
      assertNull(string2);
      
      String string3 = StringUtils.difference((String) null, "~}Pt%{");
      assertEquals("~}Pt%{", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "IoXF");
      assertFalse(treeSet0.contains(string0));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnce("", "IoXF", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("q$&");
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", (-1952), 10);
      assertEquals("Minimum...", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Iterable<?>) treeSet0, 'c');
      assertFalse(treeSet0.contains(string3));
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int0 = StringUtils.compareIgnoreCase("Minimum abbreviation width with offset is %d", (String) null, false);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.deleteWhitespace("mYrPLJQ>}WGj kH");
      assertEquals("mYrPLJQ>}WGjkH", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'c';
      charArray0[1] = '0';
      charArray0[2] = 'c';
      charArray0[3] = 'c';
      charArray0[4] = 'c';
      charArray0[5] = 'c';
      charArray0[6] = 'c';
      charArray0[7] = 'c';
      charArray0[8] = 'c';
      int int1 = StringUtils.indexOfAny((CharSequence) "q$&", charArray0);
      assertEquals(9, charArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'c', '0', 'c', 'c', 'c', 'c', 'c', 'c', 'c'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)4;
      char char0 = 'H';
      String string0 = StringUtils.join(shortArray0, 'H');
      assertEquals(1, shortArray0.length);
      assertEquals("4", string0);
      assertArrayEquals(new short[] {(short)4}, shortArray0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("ll", 3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) ".";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) ".";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) ".";
      charSequenceArray0[7] = (CharSequence) null;
      boolean boolean0 = StringUtils.startsWithAny(".", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string0 = StringUtils.stripEnd((String) null, ".");
      assertNull(string0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) ".", ".");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String string0 = StringUtils.rightPad("~B?s", 0);
      assertEquals("~B?s", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotSame(locale0, locale1);
      assertFalse(boolean0);
      assertTrue(locale0.equals((Object)locale1));
      
      String string1 = locale0.getDisplayVariant();
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotSame(locale0, locale1);
      assertEquals("", string1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.getFuzzyDistance("~B?s", "~B?s", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotSame(locale0, locale1);
      assertEquals(10, int0);
      assertTrue(locale0.equals((Object)locale1));
      
      String string2 = StringUtils.upperCase("~B?s", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotSame(locale0, locale1);
      assertEquals("~B?S", string2);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      PriorityQueue<Locale.LanguageRange> priorityQueue0 = new PriorityQueue<Locale.LanguageRange>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertFalse(linkedHashSet0.contains(locale0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedHashSet0);
      assertFalse(linkedHashSet0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertEquals(0, priorityQueue0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = 'b';
      charArray0[2] = 'k';
      charArray0[3] = 'b';
      charArray0[2] = 'b';
      charArray0[6] = 'b';
      charArray0[7] = 'b';
      charArray0[8] = '{';
      String string3 = StringUtils.unwrap("X&_C@s<Dhz)7Nh;", 'f');
      assertEquals("X&_C@s<Dhz)7Nh;", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("|#=h.&YxxH'^LE", 10, 20);
      assertEquals("H'^LE", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "~B?s", (CharSequence) "X&_C@s<Dhz)7Nh;");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)24;
      shortArray0[1] = (short)2237;
      String string5 = StringUtils.join(shortArray0, 'k', 0, (-282));
      assertEquals(2, shortArray0.length);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertArrayEquals(new short[] {(short)24, (short)2237}, shortArray0);
      assertNotNull(string5);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "~B?s";
      charSequenceArray0[2] = (CharSequence) "|#=h.&YxxH'^LE";
      boolean boolean1 = StringUtils.startsWithAny("X&_C@s<Dhz)7Nh;", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.chop("jZFcC,A=:&V6Z\" ");
      assertEquals("jZFcC,A=:&V6Z\"", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("M2@GjM%$'FZ");
      assertEquals("M2@GjM%$'FZ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("M2@GjM%$'FZ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.length("jZFcC,A=:&V6Z\" ");
      assertEquals(16, int0);
      
      String string2 = StringUtils.deleteWhitespace("\n");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("M2@GjM%$'FZ", "I<");
      assertEquals("M2@GjM%$'FZ", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.leftPad("~", 818, "");
      assertEquals~", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence~";
      String string1 = StringUtils.strip~");
      assertEquals("P7 K$-@[_ Q", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence~", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase(charSequenceArray0[0], "P7 K$-@[_ Q");
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.difference~", "~");
      assertEquals("~", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "~", (CharSequence) "P7 K$-@[_ Q", 9);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase~", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals~", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStart((String) null, "P7 K$-@[_ Q");
      assertNull(string4);
      
      String string5 = StringUtils.substring("P7 K$-@[_ Q", 0, (-1));
      assertEquals("P7 K$-@[_ ", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("P7 K$-@[_ ", "Rr]SK~Sg%gB");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.center("w|7kuE-qkrO", 0, 't');
      assertEquals("w|7kuE-qkrO", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      
      String string7 = StringUtils.removeEnd((String) null, "org.apache.commons.lang3.StringUtils");
      assertNull(string7);
      
      String string8 = StringUtils.prependIfMissing~", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals~", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertNotNull(string8);
      
      String string9 = StringUtils.join((byte[]) null, '/');
      assertNull(string9);
      
      int int2 = StringUtils.countMatches((CharSequence) "P7 K$-@[_ ", 'n');
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 'I';
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (byte)4;
      doubleArray0[4] = (double) (byte)4;
      doubleArray0[5] = 100.0;
      String string0 = StringUtils.join(doubleArray0, 'I');
      assertEquals(6, doubleArray0.length);
      assertEquals("73.0I0.0I0.0I4.0I4.0I100.0", string0);
      assertArrayEquals(new double[] {73.0, 0.0, 0.0, 4.0, 4.0, 100.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "0hDEhASKI5k-=CL", (CharSequence) "73.0I0.0I0.0I4.0I4.0I100.0", Integer.MIN_VALUE);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("p{InCombiningDiacriticalMarks}+", (String) null, "p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.unwrap("0hDEhASKI5k-=CL", 'j');
      assertEquals("0hDEhASKI5k-=CL", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlpha("p{InCombiningDiacriticalMarks}+");
      assertFalse(boolean0);
      
      String string4 = StringUtils.trim("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.overlay("xL{yEbJyT-!~vNf[j&", "Search and Replace array lengths don't match: ", 1779, 76);
      assertEquals("xL{yEbJyT-!~vNf[j&Search and Replace array lengths don't match: ", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.wrapIfMissing("maxWith cannot be negative", 'I');
      assertEquals("ImaxWith cannot be negativeI", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("0hDEhASKI5k-=CL", (-2379));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.leftPad("~", 748, "");
      assertEquals~", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence~";
      String string1 = StringUtils.strip("~~");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.trimToEmpty("~");
      assertEquals("~", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "~";
      String string3 = StringUtils.leftPad("~", 0);
      assertEquals("~", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "~";
      int int0 = StringUtils.indexOfAny((CharSequence) "", "\n");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.normalizeSpace("~");
      assertEquals("~", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short)55;
      shortArray0[1] = (short) (-101);
      shortArray0[2] = (short) (-1464);
      String string5 = StringUtils.trim("\n");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.strip("n;$#DlV9*WH", "n;$#DlV9*WH");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("", (String) null, false);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceChars("*WH", (String) null, "");
      assertEquals("*WH", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "*WH", 2929);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.substringBetween("X&_C@s<Dhz)7Nh;jZFcC,A:&V6Z\"#]by\"", "", "");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("CN/1YzOUKN", 59);
      assertEquals("CN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKN", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isAlphanumeric("CN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKN");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string5 = StringUtils.prependIfMissing(" ", "", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(" ", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
      
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) "X&_C@s<Dhz)7Nh;jZFcC,A:&V6Z\"#]by\"";
      charSequenceArray0[2] = (CharSequence) "*WH";
      charSequenceArray0[3] = (CharSequence) "";
      String string6 = StringUtils.valueOf((char[]) null);
      assertNull(string6);
      
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) "*WH";
      charSequenceArray0[6] = (CharSequence) "n;$#DlV9*WH";
      String string7 = StringUtils.prependIfMissingIgnoreCase("", "CN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKN", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      String string8 = StringUtils.repeat(" ", "*WH", (-576));
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string3));
      assertNotNull(string8);
      
      String string9 = StringUtils.chomp("^{E9j");
      assertEquals("^{E9j", string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.rotate("Jm*`5{Mn.", 57);
      assertEquals("Mn.Jm*`5{", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("Jm*`5{Mn.", 160);
      assertEquals("Jm*`5{Mn.", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Jm*`5{Mn.", (-136), 64);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.reverseDelimited("Jm*`5{Mn.", 'E');
      assertEquals("Jm*`5{Mn.", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Mn.Jm*`5{", (CharSequence) "Jm*`5{Mn.");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "Jm*`5{Mn.";
      charSequenceArray0[1] = (CharSequence) "Jm*`5{Mn.";
      charSequenceArray0[2] = (CharSequence) "Mn.Jm*`5{";
      charSequenceArray0[3] = (CharSequence) "Mn.Jm*`5{";
      charSequenceArray0[4] = (CharSequence) "Jm*`5{Mn.";
      charSequenceArray0[5] = (CharSequence) "Jm*`5{Mn.";
      charSequenceArray0[6] = (CharSequence) "Jm*`5{Mn.";
      charSequenceArray0[7] = (CharSequence) "Mn.Jm*`5{";
      charSequenceArray0[8] = (CharSequence) "Mn.Jm*`5{";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Mn.Jm*`5{", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.substring("gr%{", 3);
      assertEquals("{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("{", "gr%{", 3);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("{", "^", 3);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("{", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "{", (CharSequence) "", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("{", "{", 3);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int2 = StringUtils.countMatches((CharSequence) "{", (CharSequence) "^");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      boolean boolean0 = StringUtils.equalsIgnoreCase("^", "{");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("{N_", "gr%{");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", '.');
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String string0 = StringUtils.trim("p>#67,}@lxBWR9v+(}");
      assertEquals("p>#67,}@lxBWR9v+(}", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("", "p>#67,}@lxBWR9v+(}", 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "p>#67,}@lxBWR9v+(}");
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(18, charBuffer0.remaining());
      assertEquals("p>#67,}@lxBWR9v+(}", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertEquals(18, charBuffer0.length());
      assertEquals(18, charBuffer0.limit());
      assertEquals(18, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = StringUtils.isNumeric("p>#67,}@lxBWR9v+(}");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("(r:qr]+Ws", "p>#67,}@lxBWR9v+(}");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.stripEnd("lb", "The String must not be empty");
      assertEquals("l", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("", charset0);
      assertEquals(0, byteArray0.length);
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width is %d", 3);
      assertEquals("imum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("imum abbreviation width is %d", "Minimum abbreviation width is %d", 3);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("imum abbreviation width is %d", "", 3);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("imum abbreviation width is %d", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "imum abbreviation width is %d", (CharSequence) "", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("imum abbreviation width is %d", "JXMZ\u0005NiK18VOU", 3);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int2 = StringUtils.countMatches((CharSequence) "imum abbreviation width is %d", (CharSequence) "");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      String string1 = StringUtils.join(byteArray0, 'Z', 9, (int) (byte) (-127));
      assertEquals(1, byteArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-73)}, byteArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("{N_");
      assertEquals("{N_", string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.prependIfMissing("{N_", "imum abbreviation width is %d", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals("imum abbreviation width is %d{N_", string3);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.join(byteArray0, '$');
      assertEquals(1, byteArray0.length);
      assertEquals("-73", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte) (-73)}, byteArray0);
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars("", 'Z', 'Z');
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("e", string0);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      charSequenceArray0[0] = (CharSequence) "e";
      String string1 = StringUtils.replaceChars("e", 's', 'e');
      assertEquals("e", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "e";
      charSequenceArray0[2] = (CharSequence) "e";
      charSequenceArray0[3] = (CharSequence) "~";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(18, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "e";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("e", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceEachRepeatedly("{N_", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("{N_", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate("$RM}0=6bQp*yq+:8W", "rj{", 34);
      assertEquals("$RM}0=6bQp*yq+:8W", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = StringUtils.center("W1Kf'[@l", 64, "D4hIcI");
      assertEquals("D4hIcID4hIcID4hIcID4hIcID4hIW1Kf'[@lD4hIcID4hIcID4hIcID4hIcID4hI", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "VoHp bwiM'";
      stringArray0[1] = "D4hIcID4hIcID4hIcID4hIcID4hIW1Kf'[@lD4hIcID4hIcID4hIcID4hIcID4hI";
      stringArray0[2] = "D4hIcID4hIcID4hIcID4hIcID4hIW1Kf'[@lD4hIcID4hIcID4hIcID4hIcID4hI";
      String string1 = StringUtils.rightPad("D4hIcI", (-1), '\'');
      assertEquals("D4hIcI", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("1qB}", 805, '\'');
      assertEquals("''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''1qB}'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.difference("#MO", "\";(VNy$X4n2MGDr");
      assertEquals("\";(VNy$X4n2MGDr", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumeric("W1Kf'[@l");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("O7z7{");
      assertEquals("O7z7{", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[1] = 'P';
      charArray0[4] = 'A';
      charArray0[5] = 'z';
      int int0 = StringUtils.indexOfAny((CharSequence) "O7z7{", charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'\u0000', 'P', '\u0000', '\u0000', 'A', 'z'}, charArray0);
      
      String string1 = StringUtils.stripEnd("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-197), 2331);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.leftPad("cwhpk", 2331, "");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip(string1, string1);
      assertEquals("", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("O7z7{");
      assertEquals("O7z7{", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("", 1000);
      assertEqualsstring4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "JXMZ\u0005NiK18VOU");
      assertEquals((-1), int0);
      
      String string5 = StringUtils.normalizeSpace("");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'P';
      charArray0[1] = 'm';
      charArray0[2] = 'Y';
      charArray0[3] = 'S';
      charArray0[4] = 'A';
      charArray0[5] = 'z';
      int int1 = StringUtils.indexOfAny((CharSequence) "O7z7{", charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(2, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'P', 'm', 'Y', 'S', 'A', 'z'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.leftPad("~", 748, "");
      assertEquals~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip~");
      assertEquals("P7 K$-@[_ Q", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", "a|2{wm2q}Z:>8MO5-");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "P7 K$-@[_ Q", (CharSequence) "");
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "a|2{wm2q}Z:>8MO5-";
      charSequenceArray0[1] = (CharSequence) "P7 K$-@[_ Q";
      charSequenceArray0[2] = (CharSequence) "P7 K$-@[_ Q";
      charSequenceArray0[3] = (CharSequence) "P7 K$-@[_ Q";
      charSequenceArray0[4] = (CharSequence) "P7 K$-@[_ Q";
      charSequenceArray0[5] = (CharSequence) "P7 K$-@[_ Q";
      charSequenceArray0[6] = (CharSequence~";
      charSequenceArray0[7] = (CharSequence) "~";
      boolean boolean1 = StringUtils.equalsAny("", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.split("7LGAS^Q^K_0UZ", "                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ~");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.substringBefore((String) null, 748);
      assertNull(string3);
      
      boolean boolean2 = StringUtils.isAllBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      assertEquals(0, int0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((Object) null);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      hashSet0.forEach(consumer0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.KOREA;
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("KR", locale1.getCountry());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("KR", locale1.getCountry());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("kor", locale1.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-3945));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.stripAccents((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      String string0 = StringUtils.join(booleanArray0, ';', 32767, (-2835));
      assertEquals(6, booleanArray0.length);
      assertEquals("", string0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, false, true}, booleanArray0));
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("", "W8Id<9=03B (", 12, 32767);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertFalse(set0.contains(';'));
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      String string3 = StringUtils.upperCase(">psv NRC+mBlqqWl:+%", locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(">PSV NRC+MBLQQWL:+%", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) ">PSV NRC+MBLQQWL:+%", (CharSequence) null, 12);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) ">psv NRC+mBlqqWl:+%", (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.rotate((String) null, (-1));
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string0 = StringUtils.lowerCase("1noi-BZd4[M4{gw", locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("1noi-bzd4[m4{gw", string0);
      assertNotNull(string0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertFalse(vector0.contains(locale0));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Locale locale1 = Locale.lookup(linkedList0, vector0);
      assertFalse(vector0.contains(locale0));
      assertEquals(0, linkedList0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNull(locale1);
      
      String string1 = StringUtils.join((Iterable<?>) vector0, "1noi-BZd4[M4{gw");
      assertFalse(vector0.contains(locale0));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertFalse(hashSet0.contains("1noi-BZd4[M4{gw"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add("");
      assertTrue(hashSet0.contains(""));
      assertFalse(hashSet0.contains("1noi-BZd4[M4{gw"));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(boolean0);
      
      String string2 = StringUtils.chop("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.lowerCase("1noi-bzd4[m4{gw");
      assertEquals("1noi-bzd4[m4{gw", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "1noi-BZd4[M4{gw", (CharSequence) "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.replace("lb", "", "1Q5FvO^+xMK8)zcRhi");
      assertEquals("lb", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "\r";
      String[] stringArray0 = new String[6];
      stringArray0[0] = " ";
      stringArray0[1] = "\n";
      stringArray0[2] = "";
      stringArray0[3] = "\r";
      stringArray0[4] = "\n";
      stringArray0[5] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray2 = StringUtils.split((String) null, (String) null, (-1));
      assertNull(stringArray2);
      
      String string1 = StringUtils.wrapIfMissing("u:", '+');
      assertEquals("+u:+", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("ZjO1<?9bF;JO]o9jl@");
      assertEquals("ZjO1<?9bF;JO]o9jl@", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("u:", 16);
      assertEquals("u:u:u:u:u:u:u:u:u:u:u:u:u:u:u:u:", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing((String) null, '+');
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add("~B?s");
      assertTrue(hashSet0.contains("~B?s"));
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = hashSet0.remove("~B?s");
      assertFalse(hashSet0.contains("~B?s"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Spliterator<Object> spliterator0 = hashSet0.spliterator();
      assertFalse(hashSet0.contains("~B?s"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(spliterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      hashSet0.forEach(consumer0);
      assertFalse(hashSet0.contains("~B?s"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean2 = hashSet0.add(object0);
      assertTrue(hashSet0.contains(object0));
      assertFalse(hashSet0.contains("~B?s"));
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string0 = StringUtils.join((Iterable<?>) hashSet0, "~B?s");
      assertTrue(hashSet0.contains(object0));
      assertFalse(hashSet0.contains("~B?s"));
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertNotNull(string0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      boolean boolean3 = hashSet0.add(object1);
      assertTrue(hashSet0.contains(object1));
      assertFalse(hashSet0.contains("~B?s"));
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertNotSame(object1, object0);
      assertTrue(boolean3);
      assertFalse(object1.equals((Object)object0));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string1 = StringUtils.chop("java.lang.Object@61daf6ab");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("Ik");
      assertEquals("ik", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean4 = StringUtils.contains((CharSequence) null, (CharSequence) "Ik");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      
      String string3 = StringUtils.replace("~B?s", "O", "Ik");
      assertEquals("~B?s", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      String string0 = "gy1-.zub{Jg";
      String string1 = StringUtils.unwrap("gy1-.zub{Jg", '#');
      assertEquals("gy1-.zub{Jg", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("gy1-.zub{Jg", "gy1-.zub{Jg", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string1);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      assertEquals(0, int0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      String string2 = StringUtils.rightPad((String) null, 0);
      assertNull(string2);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotSame(locale0, locale1);
      assertFalse(boolean0);
      assertTrue(locale0.equals((Object)locale1));
      
      String string3 = locale0.getDisplayVariant();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotSame(locale0, locale1);
      assertEquals("", string3);
      assertTrue(locale0.equals((Object)locale1));
      assertNotNull(string3);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      
      String string4 = StringUtils.center("uKDB%2cX3hsZJ9t<ib", 102);
      assertEquals("                                          uKDB%2cX3hsZJ9t<ib                                          ", string4);
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "                                          uKDB%2cX3hsZJ9t<ib                                          ", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.appendIfMissing("jZF", "", stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("jZF", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "jZF", (CharSequence) "");
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      boolean boolean1 = StringUtils.equalsAny("jZF", stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.uncapitalize("4DkI8S");
      assertEquals("4DkI8S", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isNumericSpace((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "jZF", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "-$^7");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate2.or(predicate2);
      assertNotSame(predicate2, predicate3);
      assertNotSame(predicate3, predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotNull(predicate3);
      
      boolean boolean0 = linkedList0.removeIf(predicate1);
      assertFalse(linkedList0.contains("-$^7"));
      assertEquals(0, linkedList0.size());
      assertFalse(boolean0);
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      
      String string0 = StringUtils.join((List<?>) linkedList0, "-$^7", 0, 0);
      assertFalse(linkedList0.contains("-$^7"));
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.leftPad("X&_C@s<Dhz)7Nh;", 0);
      assertEquals("X&_C@s<Dhz)7Nh;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string2 = StringUtils.substringBetween("-$^7", "X&_C@s<Dhz)7Nh;");
      assertNull(string2);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "-$^7";
      charSequenceArray0[2] = (CharSequence) "-$^7";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "-$^7";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = new String[0];
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string3);
      
      String string4 = StringUtils.rightPad((String) null, 48, 'U');
      assertNull(string4);
      
      String string5 = StringUtils.center("Minimum abbreviation width with offset is %d", 7, ')');
      assertEquals("Minimum abbreviation width with offset is %d", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.left((String) null, 48);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.add("The String must not be empty");
      assertTrue(treeSet0.contains("The String must not be empty"));
      assertTrue(boolean0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertTrue(treeSet0.contains("The String must not be empty"));
      assertNotNull(iterator0);
      
      Integer integer0 = new Integer(11);
      assertEquals(11, (int)integer0);
      assertNotNull(integer0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate1.negate();
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate2.or(predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate3.negate();
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate4, predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertNotNull(predicate4);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      String string0 = StringUtils.join(booleanArray0, ':', 11, (-623));
      assertEquals(6, booleanArray0.length);
      assertEquals("", string0);
      assertTrue(Arrays.equals(new boolean[] {true, true, true, true, true, true}, booleanArray0));
      assertNotNull(string0);
      
      String string1 = StringUtils.left((String) null, 11);
      assertNull(string1);
      
      String string2 = StringUtils.stripToNull("f*|^XH.Z!KC_X ");
      assertEquals("f*|^XH.Z!KC_X", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsWhitespace("f*|^XH.Z!KC_X ");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      String string0 = StringUtils.upperCase("offset cannot be negative");
      assertEquals("OFFSET CANNOT BE NEGATIVE", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern("offset cannot be negative", "offset cannot be negative");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "\\u";
      int int0 = StringUtils.compareIgnoreCase(string2, "O7fG@ty~j+jq|!W]R");
      assertEquals((-19), int0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'q';
      charArray0[1] = '~';
      charArray0[2] = '5';
      charArray0[3] = 'n';
      charArray0[4] = 'v';
      String string3 = StringUtils.join(charArray0, '~');
      assertEquals(5, charArray0.length);
      assertEquals("q~~~5~n~v", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new char[] {'q', '~', '5', 'n', 'v'}, charArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceChars("org.apache.commons.lang3.ArrayUtils", '5', 'q');
      assertEquals("org.apache.commons.lang3.ArrayUtils", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.chomp("JD6@CXAkI~|");
      assertEquals("JD6@CXAkI~|", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "JD6@CXAkI~|", (-1663), 1282);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.unwrap("JD6@CXAkI~|", (String) null);
      assertEquals("JD6@CXAkI~|", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("VZJbaHNoP>/3~*JaRK.dlw8", "JD6@CXAkI~|", "JD6@CXAkI~|");
      assertEquals("VZJbaHNoP>/3~*JaRK.dlw8", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "JD6@CXAkI~|";
      String string3 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("JD6@CXAkI~|", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "JD6@CXAkI~|", (CharSequence) "JD6@CXAkI~|");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-12);
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte) (-121);
      String string4 = StringUtils.toString(byteArray0, (String) null);
      assertEquals(4, byteArray0.length);
      assertEquals("\uFFFDi\uFFFD\uFFFD", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte) (-12), (byte)105, (byte) (-8), (byte) (-121)}, byteArray0);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)64;
      String string0 = StringUtils.remove("r]$I7^[8Lh.%rRulA~", 'V');
      assertEquals("r]$I7^[8Lh.%rRulA~", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      String string1 = StringUtils.substringBefore("r]$I7^[8Lh.%rRulA~", "r]$I7^[8Lh.%rRulA~");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[3] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[4] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[5] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[6] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[7] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      int int0 = StringUtils.indexOfAny((CharSequence) "r]$I7^[8Lh.%rRulA~", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[2], charSequenceArray0[4]);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.unwrap("pZ5X<a\"D.", "P#?FRtT&@ }8");
      assertEquals("pZ5X<a\"D.", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("The character ", (int) 'V', 'V');
      assertEquals("VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVThe character ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "SYx^UPxb", (CharSequence) "SYx^UPxb");
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "SYx^UPxb", (CharSequence) "SYx^UPxb", (int) (byte)64);
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      String string0 = StringUtils.join((List<?>) stack0, (String) null, 110, 2);
      assertFalse(stack0.contains(string0));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "0xC~L`/2gL");
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.unwrap("Exception cloning Cloneable type ", "p`X");
      assertEquals("Exception cloning Cloneable type ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.replaceAll("u", "", "u");
      assertEquals("uuu", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "uuu";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "uuu";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("uuu", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) stringArray0[1]);
      assertEquals(5, stringArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfter("Cannot store ", stringArray0[1]);
      assertEquals(5, stringArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("Threshold must not be negative");
      assertEquals("threshold must not be negative", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("threshold must not be negative", stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("", "u");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) stringArray0[1], (CharSequence[]) stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals((-1), int1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "Cannot store ", (CharSequence) stringArray0[1]);
      assertEquals(5, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals((-1), int2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String string4 = StringUtils.wrapIfMissing("offset cannot be negative", 'q');
      assertEquals("qoffset cannot be negativeq", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.joinWith("Cannot store ", stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals("uuuCannot store Cannot store Cannot store Cannot store uuu", string5);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceFirst("", "", "#");
      assertEquals("#", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      int int3 = StringUtils.indexOfAny((CharSequence) "#", "");
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      int int4 = StringUtils.indexOf((CharSequence) "offset cannot be negative", 0);
      assertEquals((-1), int4);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      
      String string7 = StringUtils.abbreviateMiddle("offset cannot be negative", "0RCUIxWaQ#Wg`)>", (-1));
      assertEquals("offset cannot be negative", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains(string4));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(int4));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(linkedList0);
      assertFalse(linkedList0.contains(int4));
      assertFalse(hashSet0.contains("Threshold must not be negative"));
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      String string8 = StringUtils.join((Iterable<?>) hashSet0, stringArray0[1]);
      assertFalse(linkedList0.contains(int4));
      assertFalse(hashSet0.contains("Threshold must not be negative"));
      assertEquals(5, stringArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotSame(stringArray0, stringArray1);
      assertEquals("", string8);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.swapCase("zsn D3bg5G(LRl{HB");
      assertEquals("ZSN d3BG5g(lrL{hb", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "ZSN d3BG5g(l\rL{hb", (CharSequence) "zsn D3bg5G(LRl{HB");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfter("Arguments cannot both be null", "Cannot store ");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "Threshold must not be negative";
      String string3 = StringUtils.uncapitalize("Threshold must not be negative");
      assertEquals("threshold must not be negative", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("Threshold must not be negative", (CharSequence[]) null);
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "zsn D3bg5G(LRl{HB", (CharSequence[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.repeat("", "", (-1));
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string5 = StringUtils.wrapIfMissing("CS^F}:}#8ORP\u0000Q_Pw9", 'q');
      assertEquals("qCS^F}:}#8ORP\u0000Q_Pw9q", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("qCS^F}:}#8ORP\u0000Q_Pw9q", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith("-$^7", "-$^7");
      assertTrue(boolean0);
      
      String string0 = StringUtils.deleteWhitespace("-$^7");
      assertEquals("-$^7", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("s");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.strip("-$^7");
      assertEquals("-$^7", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isMixedCase("-$^7");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.substringBefore("", "s");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "-$^7", (CharSequence) " l=K2p.k#iV");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string4 = StringUtils.join((Iterator<?>) null, 'i');
      assertNull(string4);
      
      String string5 = StringUtils.substringAfter("-$^7", (String) null);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      stack0.replaceAll(unaryOperator0);
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", "0o=<7JhwXUjcIJXMZ\u0005NiK18VOU");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'X');
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparator("Aborting to protect against StackOverflowError - output of one loop is the input of another", "#YP\"@`2Qd$[ke`bYF", (-247));
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      String string0 = StringUtils.toRootLowerCase("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("#YP\"@`2Qd$[ke`bYF");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase(", '", "Cvj^Nj(", ", '", (-247));
      assertEquals(", '", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray2);
      assertNotSame(stringArray0, stringArray1);
      assertEquals((-1), int0);
      assertFalse(stringArray0.equals((Object)stringArray2));
      assertFalse(stringArray0.equals((Object)stringArray1));
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      String string0 = StringUtils.rightPad("Minimum abbreviation width with offset is %offset is %d", 265, 'p');
      assertEquals("Minimum abbreviation width with offset is %offset is %dpppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Minimum abbreviation width with offset is %offset is %dpppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", (CharSequence) "Minimum abbreviation width with offset is %offset is %d");
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("Minimum abbreviation width with offset is %offset is %d");
      assertEquals(55, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean1 = StringUtils.equalsAny("Minimum abbreviation width with offset is %offset is %d", (CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isWhitespace("Minimum abbreviation width with offset is %offset is %dpppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string1 = StringUtils.uncapitalize("Minimum abbreviation width with offset is %offset is %dpppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp");
      assertEquals("minimum abbreviation width with offset is %offset is %dpppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.truncate((String) null, 151, 265);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = StringUtils.remove("\n", "\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("", "Search and Replace array lengths don't match: ", "\n");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string2 = StringUtils.substringAfter("Cannot store ", "");
      assertEquals("Cannot store ", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("Threshold must not be negative");
      assertEquals("threshold must not be negative", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("threshold must not be negative", stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("", "u");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.join((byte[]) null, 'P');
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.strip("");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.appendIfMissing("", "", stringArray1);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string6);
      
      String string7 = StringUtils.removeStartIgnoreCase("Cannot store ", "org.apache.commons.lang3.StringUtils");
      assertEquals("Cannot store ", string7);
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      String string8 = StringUtils.replaceOnceIgnoreCase("qG@<7EKHqG@<7EKH", "", "Cannot store ");
      assertEquals("qG@<7EKHqG@<7EKH", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertNotNull(string8);
      
      String[] stringArray2 = StringUtils.split("offset cannot be negative", "");
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      String string9 = StringUtils.wrap("~\" R", 'P');
      assertEquals("P~\" RP", string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertNotNull(string9);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string10 = StringUtils.join((List<?>) arrayList0, "", 1719, 1719);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("", string10);
      assertTrue(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string3));
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-30);
      int int0 = StringUtils.countMatches((CharSequence) "0hDEhASKI5k-=CL", '-');
      assertEquals(1, int0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("0hDEhASKI5k-=CL"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.substringAfter("0hDEhASKI5k-=CL", "0hDEhASKI5k-=CL");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = StringUtils.leftPad("~", 748, "");
      assertEquals~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip~");
      assertEquals("P7 K$-@[_ Q", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", "a|2{wm2q}Z:>8MO5-");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "P7 K$-@[_ Q", (CharSequence) "");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "~";
      charSequenceArray0[1] = (CharSequence) "P7 K$-@[_ Q";
      charSequenceArray0[2] = (CharSequence) "~";
      String string3 = StringUtils.substring("NRL\":tRmru;{", 748, 74);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("P7 K$-@[_ Q", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.appendIfMissing~", "~", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals~", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.isEmpty("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      
      String string5 = StringUtils.substring("", 74, (-125));
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "~", (CharSequence) "");
      assertEquals("~", charSequence0);
      assertNotNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "~";
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "~", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("", string0);
      assertFalse(string0.equals((Object)charSequence0));
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("JXMZ\u0005NiK18VOU", "0o=<7JhwXUjcI");
      assertEquals("JXMZ\u0005NiK18VOU", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "JXMZ\u0005NiK18VOU");
      assertFalse(boolean0);
      
      String string2 = StringUtils.center("jZFcC,A:&V6Z\"#]by\"", (int) (short)897, 'd');
      assertEquals("dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddjZFcC,A:&V6Z\"#]by\"ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd", string2);
      assertFalse(string2.equals((Object)charSequence0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      StringUtils.abbreviateMiddle(" ", "JXMZ\u0005NiK18VOU", (short)1);
      StringUtils.containsWhitespace("jZFcC,A:&V6Z\"#]by\"");
      StringUtils.deleteWhitespace("JXMZ\u0005NiK18VOU");
      StringUtils.toRootLowerCase("dddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddjZFcC,A:&V6Z\"#]by\"ddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddd");
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = StringUtils.trim("X&_C@s<Dhz)7Nh;");
      assertEquals("X&_C@s<Dhz)7Nh;", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "X&_C@s<Dhz)7Nh;";
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      charSequenceArray0[1] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      charSequenceArray0[2] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      charSequenceArray0[3] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      charSequenceArray0[4] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      charSequenceArray0[5] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      charSequenceArray0[6] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      charSequenceArray0[7] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      String string1 = StringUtils.repeat("V~$lHx$+", "X&_C@s<Dhz)7Nh;", (-660));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[8] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("lb", "lb", "...");
      assertNull(stringArray0);
      
      String string2 = StringUtils.removeAll("X&_C@s<Dhz)7Nh;", "V~$lHx$+");
      assertEquals("X&_C@s<Dhz)7Nh;", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[1], charSequenceArray0[8], 1746);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(15, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-492.617425835);
      doubleArray0[1] = 837.898;
      doubleArray0[3] = (-492.617425835);
      doubleArray0[5] = 0.0;
      String string0 = StringUtils.replaceAll("N", "N", "N");
      assertEquals("N", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("rj{", "rj{");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "QwMnf#W4a#/TEH";
      String string2 = StringUtils.appendIfMissingIgnoreCase("QwMnf#W4a#/TEH", "N", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("QwMnf#W4a#/TEH", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("XvV#V!V`@2,s1", "jZFcC,A:&V6Z\"#");
      assertEquals("XvV#V!V`@2,s1", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("XvV#V!V`@2,s1", "jZFcC,A:&V6Z\"#");
      assertFalse(boolean0);
      
      String string4 = StringUtils.center((String) null, (int) (short)2607, 'S');
      assertNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle((String) null, (String) null, (short)2607);
      assertNull(string5);
      
      boolean boolean1 = StringUtils.containsWhitespace("N");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.truncate("~#&dy\">p{)'Wg3", (int) (short)2607, (int) (short)897);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String string7 = StringUtils.toRootLowerCase((String) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      char char0 = ' ';
      String string0 = StringUtils.join((int[]) null, ' ', 24, 1321);
      assertNull(string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)22;
      byteArray0[0] = (byte)22;
      byteArray0[1] = (byte)61;
      byte byte1 = (byte) (-110);
      byteArray0[2] = (byte) (-110);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, ' ', 10, 616);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = StringUtils.replaceAll("u", "", "u");
      assertEquals("uuu", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "uuu";
      stringArray0[1] = "uuu";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[3] = "uuu";
      String string1 = StringUtils.strip(stringArray0[4], "uuu");
      assertEquals(5, stringArray0.length);
      assertNull(string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("uuu", (CharSequence) null, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("uuu", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("XvV#V!V`@2,s1", (String) null);
      assertEquals("XvV#V!V`@2,s1", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "XvV#V!V`@2,s1");
      assertFalse(boolean0);
      
      String string4 = StringUtils.center("XvV#V!V`@2,s1", (int) (short)2607, 'S');
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.abbreviateMiddle(" is not in the range '0' - '9'", "Ubxi", (short)2607);
      assertEquals(" is not in the range '0' - '9'", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.containsWhitespace("uuu");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.truncate("uuu", (int) (short)2607, (int) (short)897);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.toRootLowerCase("uuu");
      assertEquals("uuu", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string0));
      assertNotNull(string7);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-16);
      byteArray0[2] = (byte)17;
      byteArray0[3] = (byte)0;
      String string8 = StringUtils.join(byteArray0, '9', (int) (short)897, (int) (byte)0);
      assertEquals(4, byteArray0.length);
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte)11, (byte) (-16), (byte)17, (byte)0}, byteArray0);
      assertNotNull(string8);
      
      boolean boolean2 = StringUtils.containsAnyIgnoreCase("", stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (int) (short)2607;
      intArray0[1] = (-207);
      intArray0[2] = (int) (short)2607;
      intArray0[3] = (int) (byte) (-16);
      String string9 = StringUtils.join(intArray0, 'S', (int) (short)2607, (int) (byte)17);
      assertEquals(4, intArray0.length);
      assertEquals("", string9);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertArrayEquals(new int[] {2607, (-207), 2607, (-16)}, intArray0);
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, "");
      assertFalse(boolean0);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[1];
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "{}", (char[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.unwrap((String) null, '1');
      assertNull(string1);
      
      String string2 = StringUtils.substring((String) null, (-1), 1704);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>(587);
      assertFalse(vector0.contains(587));
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(587, vector0.capacity());
      assertNotNull(vector0);
      
      String string0 = StringUtils.join((Iterable<?>) vector0, "");
      assertFalse(vector0.contains(587));
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(587, vector0.capacity());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = vector0.add((Object) "");
      assertTrue(vector0.contains(""));
      assertFalse(vector0.contains(587));
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(587, vector0.capacity());
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) vector0;
      objectArray0[1] = (Object) vector0;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      vector0.replaceAll(unaryOperator0);
      assertTrue(vector0.contains(""));
      assertFalse(vector0.contains(587));
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(587, vector0.capacity());
      
      objectArray0[2] = (Object) vector0;
      Object[] objectArray1 = vector0.toArray(objectArray0);
      assertTrue(vector0.contains(""));
      assertFalse(vector0.contains(587));
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(587, vector0.capacity());
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      String[] stringArray0 = StringUtils.split("", '4');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.removeStart("Rr]SK~Sg%gB", "Rr]SK~Sg%gB");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join(objectArray1, "aTDX5<.F3-*[6zGS<}S");
      assertTrue(vector0.contains(""));
      assertFalse(vector0.contains("aTDX5<.F3-*[6zGS<}S"));
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(587, vector0.capacity());
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals("aTDX5<.F3-*[6zGS<}SaTDX5<.F3-*[6zGS<}S[]", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("aTDX5<.F3-*[6zGS<}SaTDX5<.F3-*[6zGS<}S[]", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.center("", 15, '4');
      assertEquals("444444444444444", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEnd("", "qG@<7EKHqG@<7EKH");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.prependIfMissing("444444444444444", "...", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("...444444444444444", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.join((byte[]) null, ',');
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "O7fG@~";
      String string0 = StringUtils.leftPad("O7fG@~", 2048, "O7fG@~");
      assertNotNull(string0);
      
      String string1 = StringUtils.strip("", "Locale mst not be null");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.compare(" ", "");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.repeat('v', 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      String string2 = StringUtils.join(booleanArray0, 'v');
      assertEquals(5, booleanArray0.length);
      assertEquals("falsevfalsevfalsevfalsevfalse", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0));
      assertNotNull(string2);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains(string0));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>();
      assertFalse(arrayDeque1.contains(false));
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertNotNull(arrayDeque1);
      
      boolean boolean1 = arrayDeque0.add("falsevfalsevfalsevfalsevfalse");
      assertTrue(arrayDeque0.contains("falsevfalsevfalsevfalsevfalse"));
      assertFalse(arrayDeque0.contains(string0));
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = arrayDeque0.retainAll(arrayDeque1);
      assertFalse(arrayDeque0.contains(string0));
      assertFalse(arrayDeque1.contains("falsevfalsevfalsevfalsevfalse"));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string3 = StringUtils.removeFirst("", "");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Iterable<?>) arrayDeque0, "falsevfalsevfalsevfalsevfalse");
      assertFalse(arrayDeque0.contains(""));
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)64;
      String string0 = StringUtils.remove("r]$I7^[8Lh.%rRulA~", 'V');
      assertEquals("r]$I7^[8Lh.%rRulA~", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      String string1 = StringUtils.substringBefore("r]$I7^[8Lh.%rRulA~", "JD6@CXAkI~|");
      assertEquals("r]$I7^[8Lh.%rRulA~", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[2] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[3] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[4] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[5] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[6] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[7] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      int int0 = StringUtils.indexOfAny((CharSequence) "r]$I7^[8Lh.%rRulA~", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[2], charSequenceArray0[4]);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.substringAfterLast("r]$I7^[8Lh.%rRulA~", (-1982));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("The character ", (int) 'V', 'V');
      assertEquals("VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVThe character ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "SYx^UPxb", (CharSequence) "SYx^UPxb");
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "SYx^UPxb", (CharSequence) "SYx^UPxb", (int) (byte)64);
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.rightPad("D1)hJD}C?c}", 1323);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string2 = StringUtils.left("E", 1323);
      assertEquals("E", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[0] = (CharSequence) "E";
      charSequenceArray0[1] = (CharSequence) "D1)hJD}C?c}";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "E";
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.mid("B_]<Y6VQ97?T)w#d", 3, 60);
      assertEquals("<Y6VQ97?T)w#d", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfterLast("E", 1323);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.rotate("B_]<Y6VQ97?T)w#d", (-1645));
      assertEquals("w#dB_]<Y6VQ97?T)", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = StringUtils.rightPad("le%|}w^;:_-)c1Z7", 16, '<');
      assertEquals("le%|}w^;:_-)c1Z7", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("...", 16);
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("...");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat('k', 95);
      assertEquals("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", "le%|}w^;:_-)c1Z7");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.substring("hndIA3S]`", 76);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "le%|}w^;:_-)c1Z7", (CharSequence) "");
      assertEquals(16, int0);
      
      String string4 = StringUtils.removeStartIgnoreCase("Rr]SK~Sg%gBRr]SK~Sg%gB", "");
      assertEquals("Rr]SK~Sg%gBRr]SK~Sg%gB", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "", "kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = 'w';
      charArray0[2] = 'k';
      charArray0[3] = '|';
      charArray0[4] = '<';
      charArray0[5] = 'k';
      charArray0[6] = 'w';
      charArray0[7] = 'k';
      boolean boolean3 = StringUtils.containsAny((CharSequence) "le%|}w^;:_-)c1Z7", charArray0);
      assertEquals(8, charArray0.length);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertArrayEquals(new char[] {'k', 'w', 'k', '|', '<', 'k', 'w', 'k'}, charArray0);
      
      String string5 = StringUtils.substringBetween("...", "...", (String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, '^');
      assertEquals(0, floatArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[2] = (CharSequence) "Arguments cannot both be null";
      boolean boolean0 = StringUtils.isNumeric(charSequenceArray0[1]);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[2] = '^';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Arguments cannot both be null", charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'^', '\u0000', '^'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = StringUtils.rightPad("~B?s", 0);
      assertEquals("~B?s", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("TW", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotSame(locale0, locale1);
      assertFalse(boolean0);
      assertTrue(locale0.equals((Object)locale1));
      
      String string1 = locale0.getDisplayVariant();
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotSame(locale0, locale1);
      assertEquals("", string1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      
      int int0 = StringUtils.getFuzzyDistance("~B?s", "~B?s", locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotSame(locale0, locale1);
      assertEquals(10, int0);
      assertTrue(locale0.equals((Object)locale1));
      
      String string2 = StringUtils.upperCase("~B?s", locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotSame(locale0, locale1);
      assertEquals("~B?S", string2);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      PriorityQueue<Locale.LanguageRange> priorityQueue0 = new PriorityQueue<Locale.LanguageRange>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertFalse(linkedHashSet0.contains(locale1));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedHashSet0);
      assertFalse(linkedHashSet0.contains(locale1));
      assertFalse(list0.contains(locale1));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = 'b';
      charArray0[2] = 'k';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      charArray0[6] = 'b';
      charArray0[7] = 'b';
      charArray0[8] = '{';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "~B?S", charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'.', 'b', 'k', 'b', 'b', '\u0000', 'b', 'b', '{'}, charArray0);
      
      String string3 = StringUtils.unwrap("X&_C@s<Dhz)7Nh;", 'f');
      assertEquals("X&_C@s<Dhz)7Nh;", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("|#=h.&YxxH'^LE", 10, 20);
      assertEquals("H'^LE", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int1 = StringUtils.indexOf((CharSequence) "~B?s", (CharSequence) "X&_C@s<Dhz)7Nh;");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = StringUtils.join((int[]) null, 'j');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.capitalize((String) null);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphaSpace(charSequenceArray0[1]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-1176.28F);
      floatArray0[1] = (float) 'j';
      floatArray0[2] = (float) 'j';
      floatArray0[3] = (float) 'j';
      floatArray0[4] = (float) 'j';
      floatArray0[5] = 1.0F;
      floatArray0[6] = (float) 'j';
      floatArray0[7] = 0.0F;
      floatArray0[8] = (float) 'j';
      String string2 = StringUtils.join(floatArray0, 'D', (-2660), (-2660));
      assertEquals(9, floatArray0.length);
      assertEquals("", string2);
      assertArrayEquals(new float[] {(-1176.28F), 106.0F, 106.0F, 106.0F, 106.0F, 1.0F, 106.0F, 0.0F, 106.0F}, floatArray0, 0.01F);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = StringUtils.defaultString("3mz]5d");
      assertEquals("3mz]5d", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "{N_";
      objectArray0[1] = (Object) "3mz]5d";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      String string1 = StringUtils.join(objectArray0, "{N_", 1892, 97);
      assertEquals(3, objectArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlpha("3mz]5d");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((int[]) null, '\"');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "a|2{wm2q}Z:>8MO5-";
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = StringUtils.isWhitespace(charSequenceArray0[0]);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, charSequenceArray0[0]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = StringUtils.substringBetween("org.apache.commons.lang3.ObjectUtils$Null", "JXMZ\u0005NiK18VOU", "org.apache.commons.lang3.ObjectUtils$Null");
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "JXMZ\u0005NiK18VOU", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-1060);
      String string0 = StringUtils.join(intArray0, 'm');
      assertEquals(1, intArray0.length);
      assertEquals("-1060", string0);
      assertArrayEquals(new int[] {(-1060)}, intArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsAny("-1060", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBeforeLast("-1060", "-1060");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "-1060");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.substringBefore("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.right("Search and Replace array lengths don't match: ", 122);
      assertEquals("Search and Replace array lengths don't match: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = "yV=";
      String string1 = StringUtils.removePattern("yV=", "yV=");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = 14;
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", 14);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsAny("", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "yV=", (CharSequence) "");
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean1 = StringUtils.isAlpha("yV=");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.substringBetween("org.apache.commons.lang3.ObjectUtils$Null", "JXMZ\u0005NiK18VOU", "org.apache.commons.lang3.ObjectUtils$Null");
      assertNull(string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "JXMZ\u0005NiK18VOU", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = StringUtils.rightPad("'U@%k,Fn|JnM~", 0);
      assertEquals("'U@%k,Fn|JnM~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.LF;
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\n", "'U@%k,Fn|JnM~");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.capitalize(" ");
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'U@%k,Fn|JnM~");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.toRootLowerCase("QwMnf#W4a#/TEH");
      assertEquals("qwmnf#w4a#/teh", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAlphaSpace("QwMnf#W4a#/TEH");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = StringUtils.replaceIgnoreCase("|-*5u7TmH+<X{", "qwmnf#w4a#/teh", "'U@%k,Fn|JnM~", 1399);
      assertEquals("|-*5u7TmH+<X{", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      char[] charArray0 = new char[0];
      boolean boolean3 = StringUtils.containsAny((CharSequence) " ", charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertArrayEquals(new char[] {}, charArray0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.RegExUtils", "Aborting to protect against StackOverflowError - output of one loop is the input of another", 2120);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "org.apache.commons.lang3.RegExUtils");
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)97;
      byteArray0[6] = (byte)80;
      byteArray0[7] = (byte) (-127);
      String string0 = StringUtils.join(byteArray0, '|', 739, 48);
      assertEquals(8, byteArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte)97, (byte)97, (byte) (-127), (byte) (-127), (byte)97, (byte)80, (byte) (-127)}, byteArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("n^eR!D}MmX${o^u7iF", 0, "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("n^eR!D}MmX${o^u7iF", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray1 = StringUtils.getBytes("Array and element cannot both be null", (String) null);
      assertEquals(37, byteArray1.length);
      assertNotSame(byteArray1, byteArray0);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "]");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("gG7g5>", "Object varargs must not be null", 365);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'B';
      charArray0[1] = 'C';
      charArray0[2] = 'C';
      String string1 = StringUtils.join(charArray0, 'C', 365, 365);
      assertEquals(3, charArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'B', 'C', 'C'}, charArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace((String) null);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAlpha("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string3 = StringUtils.deleteWhitespace("...");
      assertEquals("...", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.substringBeforeLast("%DaDIB((", (String) null);
      assertEquals("%DaDIB((", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = ' ';
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.substringAfter("org.apache.commons.lang3.StringUtils", 1417);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 3321, 1417);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substring("]", (-1));
      assertEquals("]", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = StringUtils.center("W1Kf'[@l", 64, "D4hIcI");
      assertEquals("D4hIcID4hIcID4hIcID4hIcID4hIW1Kf'[@lD4hIcID4hIcID4hIcID4hIcID4hI", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "VoHp bwiM'";
      stringArray0[1] = "D4hIcID4hIcID4hIcID4hIcID4hIW1Kf'[@lD4hIcID4hIcID4hIcID4hIcID4hI";
      stringArray0[2] = "D4hIcID4hIcID4hIcID4hIcID4hIW1Kf'[@lD4hIcID4hIcID4hIcID4hIcID4hI";
      String string1 = StringUtils.replaceEachRepeatedly("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)48;
      shortArray0[2] = (short)48;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1580;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)5096;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)5096;
      String string0 = StringUtils.join(shortArray0, '\"', (int) (short)5096, (int) (short)0);
      assertEquals(9, shortArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new short[] {(short)0, (short)48, (short)48, (short)0, (short)1580, (short)0, (short)5096, (short)0, (short)5096}, shortArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat('\"', 0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat("&x*oFz", "", 2698);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isBlank(string2);
      assertFalse(boolean1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) string2;
      charSequenceArray0[1] = (CharSequence) "";
      String string3 = StringUtils.mid("", (short)0, (short)0);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "&x*oFz";
      charSequenceArray0[4] = (CharSequence) string2;
      charSequenceArray0[5] = (CharSequence) string2;
      charSequenceArray0[6] = (CharSequence) "&x*oFz";
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.replaceEach("", (String[]) null, (String[]) null);
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("", 'I');
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "", (CharSequence) "&x*oFz");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string6 = StringUtils.replaceEachRepeatedly("Aborting to protect against StackOverflowError - output of one loop is the input of another", (String[]) null, (String[]) null);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("Q}$=ErrLs]p&1Qf8]", "org.apache.commons.lang3.StringUtils", true);
      assertEquals(2, int0);
      
      String string0 = StringUtils.rotate("org.apache.commons.lang3.CharUtils", 2704);
      assertEquals("ns.lang3.CharUtilsorg.apache.commo", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("Q}$=ErrLs]p&1Qf8]", 937);
      assertEquals("Q}$=ErrLs]p&1Qf8]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceEachRepeatedly("Supplied value must be a valid byte literal between -32768 and 32767: [", (String[]) null, (String[]) null);
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("Supplied value must be a valid byte literal between -32768 and 32767: [", (-2723), '=');
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [", string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = '=';
      charArray0[2] = '=';
      charArray0[3] = '=';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'=', '=', '=', '='}, charArray0);
      
      boolean boolean0 = StringUtils.containsWhitespace("ns.lang3.CharUtilsorg.apache.commo");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = StringUtils.reverse("hCo[+qg9vfstKX");
      assertEquals("XKtsfv9gq+[oCh", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("|o=Q|l<t'");
      assertEquals("|o=Q|l<t'", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("253953-91", (-524));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '/';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "XKtsfv9gq+[oCh", charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'/'}, charArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "253953-91";
      charSequenceArray0[2] = (CharSequence) "|o=Q|l<t'";
      charSequenceArray0[3] = (CharSequence) "|o=Q|l<t'";
      charSequenceArray0[4] = (CharSequence) "hCo[+qg9vfstKX";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "|o=Q|l<t'";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "XKtsfv9gq+[oCh", charSequenceArray0[5], (-524));
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.upperCase("}ga");
      assertEquals("}GA", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, 322);
      assertNull(string4);
      
      String string5 = StringUtils.substringBetween("}ga", (String) null, "253953-91");
      assertNull(string5);
      
      String string6 = StringUtils.substringBetween((String) null, "/", "/");
      assertNull(string6);
      
      String string7 = StringUtils.swapCase(", '");
      assertEquals(", '", string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      String string8 = StringUtils.appendIfMissing((String) null, charSequenceArray0[3], charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertNull(string8);
      
      String string9 = StringUtils.stripEnd("@)-rC\"&nIDv", (String) null);
      assertEquals("@)-rC\"&nIDv", string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string2));
      assertNotNull(string9);
      
      String string10 = StringUtils.chomp("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Rr]SK~Sg%gBRr]SK~Sg%gB");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string10);
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertNotNull(string10);
      
      String string11 = StringUtils.removeAll("Aborting to protect against StackOverflowError - output of one loop is the input of another", "}ga");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string11);
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string0));
      assertTrue(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string7));
      assertNotNull(string11);
      
      int int1 = StringUtils.lastOrdinalIndexOf("Aborting to protect against StackOverflowError - output of one loop is the input of another", "}GA", 64);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = StringUtils.replaceAll("u", "", "u");
      assertEquals("uuu", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[23];
      stringArray0[0] = "uuu";
      stringArray0[1] = "uuu";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "uuu";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(23, stringArray0.length);
      assertEquals("uuu", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "uuu");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfter("Cannot store ", "uuu");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("Threshold must not be negative");
      assertEquals("threshold must not be negative", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("threshold must not be negative", stringArray0);
      assertEquals(23, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("", "u");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.join((byte[]) null, 'P');
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.strip("");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.appendIfMissing("", "uuu", stringArray1);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("uuu", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string6);
      
      String string7 = StringUtils.removeStartIgnoreCase("Cannot store ", "org.apache.commons.lang3.StringUtils");
      assertEquals("Cannot store ", string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertNotNull(string7);
      
      String string8 = StringUtils.replaceOnceIgnoreCase("qG@<7EKHqG@<7EKH", "", "Cannot store ");
      assertEquals("qG@<7EKHqG@<7EKH", string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
      
      String[] stringArray2 = StringUtils.split("offset cannot be negative", "");
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      String string9 = StringUtils.wrap("~\" R", 'P');
      assertEquals("P~\" RP", string9);
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertNotNull(string9);
      
      String string10 = StringUtils.join(stringArray1);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertEquals("", string10);
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertNotNull(string10);
      
      String string11 = StringUtils.replace((String) null, "p{InCombiningDiacriticalMarks}+", "...");
      assertNull(string11);
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("JD6@CXAkI~|", "JD6@CXAkI~|", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.countMatches((CharSequence) "JD6@CXAkI~|", (CharSequence) "JD6@CXAkI~|");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-127);
      int int2 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string0 = StringUtils.substringBetween("JD6@CXAkI~|", "Z}=i$lfs)N.i#h", "$");
      assertNull(string0);
      
      String string1 = StringUtils.repeat("JD6@CXAkI~|", 81);
      assertEquals("JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|JD6@CXAkI~|", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "\r";
      String[] stringArray0 = new String[6];
      stringArray0[0] = " ";
      stringArray0[1] = "\n";
      stringArray0[2] = "";
      stringArray0[3] = "\r";
      stringArray0[4] = "\n";
      stringArray0[5] = " ";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray2 = StringUtils.split((String) null, (String) null, (-1));
      assertNull(stringArray2);
      
      String string1 = StringUtils.wrapIfMissing("uYa (TIVB", '+');
      assertEquals("+uYa (TIVB+", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("ZjO1<?9bF;JO]o9jl@");
      assertEquals("ZjO1<?9bF;JO]o9jl@", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("uYa (TIVB", 0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing((String) null, '+');
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) " ";
      String string0 = StringUtils.prependIfMissing(" ", "", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing(" ", 'z');
      assertEquals("z z", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) "z z", 'z');
      assertEquals(2, int0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) " ", "");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Integer integer0 = new Integer(10);
      assertEquals(10, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = vector0.add(integer0);
      assertTrue(vector0.contains(10));
      assertEquals("[10]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, 'P', 10, 121);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 121
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = StringUtils.abbreviate("n;$#DlV9*WH", "{N_", (-1238), 3443);
      assertEquals("n;$#DlV9*WH", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 35L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 3443;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      String string1 = StringUtils.join(byteArray0, 'v');
      assertEquals(5, byteArray0.length);
      assertEquals("0v11v0v0v0", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)0, (byte)11, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(" vs ", "QwMnf#W4a#/TEH");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.lowerCase("CWHpk");
      assertEquals("cwhpk", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToEmpty("CWHpk");
      assertEquals("CWHpk", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      Charset charset1 = Charset.defaultCharset();
      assertEquals("UTF-8", charset1.displayName());
      assertTrue(charset1.isRegistered());
      assertEquals("UTF-8", charset1.toString());
      assertTrue(charset1.canEncode());
      assertEquals("UTF-8", charset1.name());
      assertSame(charset1, charset0);
      assertNotNull(charset1);
      
      byte[] byteArray1 = StringUtils.getBytes("jZFcC,A:&V6Z\"#", charset0);
      assertEquals(15, byteArray1.length);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertNotSame(byteArray1, byteArray0);
      assertSame(charset0, charset1);
      assertFalse(byteArray1.equals((Object)byteArray0));
      assertNotNull(byteArray1);
      
      String string4 = StringUtils.trimToNull("s#/yc])'$(");
      assertEquals("s#/yc])'$(", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("*<&ted&:j}D$<$t", "0J@;Q<|");
      assertEquals("*<&ted&:j}D$<$t", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring("*<&ted&:j}D$<$t", 49, 49);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.length("0J@;Q<|");
      assertEquals(7, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("B.LkVjiZT:", '^');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("*<&ted&:j}D$<$t", "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("*<&ted&:j}D$<$t", "0J@;Q<|");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("*<&ted&:j}D$<$t", ',');
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean3 = StringUtils.endsWithAny("*<&ted&:j}D$<$t", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(boolean3);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      String string2 = StringUtils.rightPad("", 7, "0J@;Q<|");
      assertEquals("0J@;Q<|", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      String string0 = StringUtils.difference("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", '\u0012');
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.center("0deWYMBbg+%j", 0, 'p');
      assertEquals("0deWYMBbg+%j", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithAny("0deWYMBbg+%j", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      String string2 = StringUtils.rightPad("00\u0000000z0z0)", 0, "00\u0000000z0z0)");
      assertEquals("00\u0000000z0z0)", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>(590);
      assertFalse(vector0.contains(590));
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(590, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string0 = StringUtils.join((Iterable<?>) vector0, "");
      assertFalse(vector0.contains(590));
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(590, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = vector0.add((Object) "/hJPac1P#bINR8iMmb");
      assertFalse(vector0.contains(590));
      assertTrue(vector0.contains("/hJPac1P#bINR8iMmb"));
      assertFalse(vector0.isEmpty());
      assertEquals("[/hJPac1P#bINR8iMmb]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(590, vector0.capacity());
      assertTrue(boolean0);
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      vector0.replaceAll(unaryOperator0);
      assertFalse(vector0.contains(590));
      assertTrue(vector0.contains("/hJPac1P#bINR8iMmb"));
      assertFalse(vector0.isEmpty());
      assertEquals("[/hJPac1P#bINR8iMmb]", vector0.toString());
      assertEquals(1, vector0.size());
      assertEquals(590, vector0.capacity());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.reverse("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      long[] longArray0 = new long[6];
      longArray0[0] = 35L;
      longArray0[1] = (long) (-1);
      boolean boolean1 = StringUtils.equalsIgnoreCase("{", "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.unwrap("/hJPac1P#bINR8iMmb", 'g');
      assertEquals("/hJPac1P#bINR8iMmb", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("", "/hJPac1P#bINR8iMmb");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", 'X');
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.removePattern("wUzBi3< 40d=M6RB", (String) null);
      assertEquals("wUzBi3< 40d=M6RB", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceEach("/hJPac1P#bINR8iMmb", stringArray0, stringArray1);
      assertEquals(0, stringArray1.length);
      assertEquals(0, stringArray0.length);
      assertSame(stringArray1, stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals("/hJPac1P#bINR8iMmb", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("%");
      assertFalse(boolean0);
      
      String string0 = StringUtils.lowerCase("h;ZbZ;<Z8q=");
      assertEquals("h;zbz;<z8q=", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isNumeric("h;zbz;<z8q=");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("h;zbz;<z8q=", "h;ZbZ;<Z8q=", 32);
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "%";
      String string1 = StringUtils.replaceEachRepeatedly("h;zbz;<z8q=", stringArray0, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("h;zbz;<z8q=", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>(587);
      assertFalse(vector0.contains(587));
      assertEquals(587, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      String string0 = StringUtils.join((Iterable<?>) vector0, "");
      assertFalse(vector0.contains(587));
      assertEquals(587, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = vector0.add((Object) "");
      assertFalse(vector0.contains(587));
      assertTrue(vector0.contains(""));
      assertEquals(587, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) vector0;
      objectArray0[1] = (Object) vector0;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      vector0.replaceAll(unaryOperator0);
      assertFalse(vector0.contains(587));
      assertTrue(vector0.contains(""));
      assertEquals(587, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.isEmpty());
      
      objectArray0[2] = (Object) vector0;
      Object[] objectArray1 = vector0.toArray(objectArray0);
      assertFalse(vector0.contains(587));
      assertTrue(vector0.contains(""));
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertEquals(587, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      String[] stringArray0 = StringUtils.split("", '4');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", (char[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.unwrap("X&_C@s<Dhz)7Nh;", '1');
      assertEquals("X&_C@s<Dhz)7Nh;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("X&_C@s<Dhz)7Nh;", 471, 1704);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "{}", (char[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = StringUtils.upperCase("offset cannot be negative");
      assertEquals("OFFSET CANNOT BE NEGATIVE", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removePattern("offset cannot be negative", "offset cannot be negative");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "\\u";
      int int0 = StringUtils.compareIgnoreCase(string2, "O7fG@ty~j+jq|!W]R");
      assertEquals((-19), int0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'q';
      charArray0[1] = '~';
      charArray0[2] = '5';
      charArray0[3] = 'n';
      charArray0[4] = 'v';
      String string3 = StringUtils.join(charArray0, '~');
      assertEquals(5, charArray0.length);
      assertEquals("q~~~5~n~v", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new char[] {'q', '~', '5', 'n', 'v'}, charArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.replaceOnceIgnoreCase("Ix8uoG=", string2, "Array and element cannot both be null");
      assertEquals("Ix8uoG=", string4);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string5 = StringUtils.lowerCase("q~~~5~n~v", locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("q~~~5~n~v", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String string0 = "Array and element cannot both be null";
      String string1 = "lb";
      String string2 = StringUtils.removeEnd("Array and element cannot both be null", "lb");
      assertEquals("Array and element cannot both be null", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("0.VSeqw(V:!3p6/m1c?", "lb", (-1563));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.remove(" ", 'C');
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString((String) null);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) " ");
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(" ", (-1378), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = "\"v2";
      String string1 = StringUtils.stripAccents("\"v2");
      assertEquals("\"v2", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.right("!<b@%VzW?D(>m", 2065);
      assertEquals("!<b@%VzW?D(>m", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "!<b@%VzW?D(>m", (char[]) null);
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "!<b@%VzW?D(>m", (CharSequence) "!<b@%VzW?D(>m", 2065);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.upperCase("org.apache.commons.lang3.ObjectUtils");
      assertEquals("ORG.APACHE.COMMONS.LANG3.OBJECTUTILS", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      LinkedHashSet<String> linkedHashSet0 = null;
      try {
        linkedHashSet0 = new LinkedHashSet<String>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -1
         //
         verifyException("java.util.HashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("$v3<s]qdlI?>$_", ",.q9G'-IEL>Ecxgvih", 0);
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("$", charSequence0);
      assertNotNull(charSequence0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Comparator should not be null.", "Strings must not be null", 0);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string0 = StringUtils.toRootUpperCase(" vs ");
      assertEquals(" VS ", string0);
      assertFalse(string0.equals((Object)charSequence0));
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) " VS ", (CharSequence) "$v3<s]qdlI?>$_");
      assertEquals(0, int0);
      
      String string1 = StringUtils.strip(",.q9G'-IEL>Ecxgvih");
      assertEquals(",.q9G'-IEL>Ecxgvih", string1);
      assertFalse(string1.equals((Object)charSequence0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray1, "", (int) (byte) (-73), 15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -73
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = StringUtils.substring("}9grj{", 3);
      assertEquals("rj{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("rj{", "}9grj{", 3);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("rj{", "", 3);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("rj{", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "rj{", (CharSequence) "", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("rj{", "rj{", 3);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int2 = StringUtils.countMatches((CharSequence) "rj{", (CharSequence) "");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-73);
      String string1 = StringUtils.strip("{N_");
      assertEquals("{N_", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray1, "253953-91", (-350), (int) (byte) (-73));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -350
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "IoXF");
      assertFalse(treeSet0.contains(string0));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnce("", "IoXF", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("q$&");
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Iterable<?>) treeSet0, 'c');
      assertFalse(treeSet0.contains(string4));
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int0 = StringUtils.compareIgnoreCase("Minimum abbreviation width with offset is %d", (String) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.leftPad("~", 748, "");
      assertEquals~", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence~";
      String string1 = StringUtils.strip~");
      assertEquals("P7 K$-@[_ Q", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("[BakL!(/gAYry>5POe", 1323);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.mid("=s}@@f", 4, 748);
      assertEquals("@f", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'Q';
      charArray0[2] = 'z';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("\u0000Qz", string0);
      assertArrayEquals(new char[] {'\u0000', 'Q', 'z'}, charArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\u0000Qz");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("\u0000Qz", 'K');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("\u0000Qz");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "\u0000Qz");
      assertEquals(1, stringArray0.length);
      assertEquals("\u0000Qz", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      long[] longArray0 = new long[4];
      longArray0[0] = (long) 'z';
      longArray0[1] = (long) 'z';
      longArray0[2] = (long) 'Q';
      longArray0[3] = 0L;
      String string2 = StringUtils.join(longArray0, 'Q', (-1066), (-1066));
      assertEquals(4, longArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new long[] {122L, 122L, 81L, 0L}, longArray0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      String string0 = StringUtils.rightPad("le%|}w^;:_-)c1Z7", 16, '<');
      assertEquals("le%|}w^;:_-)c1Z7", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "le%|}w^;:_-)c1Z7";
      stringArray0[1] = "2@eXZR#-.&a{xc-$Iu";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.isNumericSpace("le%|}w^;:_-)c1Z7");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("2@eXZR#-.&a{xc-$Iu", stringArray0[2], "le%|}w^;:_-)c1Z7");
      assertEquals(3, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.getIfBlank("G?Z<{V6'X", (Supplier<String>) null);
      assertEquals("G?Z<{V6'X", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("C9h&~->0'VAgbj%,", 13);
      assertEquals("C9h&~->0'VAgbj%,", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "C9h&~->0'VAgbj%,";
      charSequenceArray0[1] = (CharSequence) "2@eXZR#-.&a{xc-$Iu";
      charSequenceArray0[2] = (CharSequence) "le%|}w^;:_-)c1Z7";
      String string4 = StringUtils.prependIfMissingIgnoreCase("2@eXZR#-.&a{xc-$Iu", "2@eXZR#-.&a{xc-$Iu", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "-$^7");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate2.negate();
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate4, predicate2);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertNotNull(predicate4);
      
      boolean boolean0 = linkedList0.removeIf(predicate3);
      assertFalse(linkedList0.contains("-$^7"));
      assertEquals(0, linkedList0.size());
      assertNotSame(predicate2, predicate4);
      assertFalse(boolean0);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate4));
      
      String string0 = StringUtils.join((List<?>) linkedList0, "-$^7", 0, 0);
      assertFalse(linkedList0.contains("-$^7"));
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[4];
      Predicate<Object> predicate5 = predicate1.and(predicate2);
      assertNotSame(predicate1, predicate5);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate5, predicate1);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate3));
      assertNotNull(predicate5);
      
      Predicate<Object> predicate6 = predicate0.or(predicate5);
      assertNotSame(predicate1, predicate5);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate5, predicate1);
      assertNotSame(predicate6, predicate4);
      assertNotSame(predicate6, predicate2);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate2));
      assertNotNull(predicate6);
      
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[0] = false;
      Predicate<Object> predicate7 = predicate1.negate();
      assertNotSame(predicate1, predicate5);
      assertNotSame(predicate7, predicate3);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate3));
      assertFalse(predicate7.equals((Object)predicate4));
      assertNotNull(predicate7);
      
      String string1 = StringUtils.join(booleanArray0, ':', 0, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals("", string1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertNotNull(string1);
      
      String string2 = StringUtils.left("", 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "-$^7";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      String string3 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isNotEmpty(charSequenceArray0[5]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = StringUtils.getDigits("{}");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "{}", (CharSequence) "{}", 0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "{}";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "{}";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string1 = StringUtils.substringBetween("JD6@CXAkI~|", (String) null, "JD6@CXAkI~|");
      assertNull(string1);
      
      String string2 = StringUtils.repeat((String) null, 0);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb");
      assertEquals("yoU4kcwT-4WvSGM!Rb", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[1] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[2] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[3] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[4] = (Object) "yoU4kcwT-4WvSGM!Rb";
      String string1 = StringUtils.wrapIfMissing("YBTop5BN|:gF8,Zxm", 'g');
      assertEquals("gYBTop5BN|:gF8,Zxmg", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.joinWith((String) null, objectArray0);
      assertEquals(8, objectArray0.length);
      assertEquals("yoU4kcwT-4WvSGM!RbyoU4kcwT-4WvSGM!RbyoU4kcwT-4WvSGM!RbyoU4kcwT-4WvSGM!RbyoU4kcwT-4WvSGM!Rb", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "b>^o3pp}isb>^o3pp}is", "N7^5~`4is9I]");
      assertEquals(2, int0);
      
      String string3 = StringUtils.trim("?=9,*5ZvUd7t;");
      assertEquals("?=9,*5ZvUd7t;", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "?=9,*5ZvUd7t;", (-1));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.abbreviateMiddle("\"c", "ch", 1305);
      assertEquals("\"c", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains(string3));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(int0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer integer0 = new Integer((-766));
      assertEquals((-766), (int)integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      boolean boolean1 = linkedList0.add(integer0);
      assertTrue(linkedList0.contains(integer0));
      assertFalse(linkedList0.contains(int1));
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = linkedHashSet0.containsAll(linkedList0);
      assertFalse(linkedHashSet0.contains(string3));
      assertTrue(linkedList0.contains(integer0));
      assertFalse(linkedList0.contains(int1));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, linkedList0.size());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(linkedHashSet0);
      assertFalse(hashSet0.contains("yoU4kcwT-4WvSGM!Rb"));
      assertFalse(linkedHashSet0.contains(string3));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(hashSet0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean3 = hashSet0.add(object0);
      assertFalse(hashSet0.contains("yoU4kcwT-4WvSGM!Rb"));
      assertTrue(hashSet0.contains(object0));
      assertFalse(linkedHashSet0.contains(string3));
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string5 = StringUtils.join((Iterable<?>) hashSet0, "-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7");
      assertFalse(hashSet0.contains("yoU4kcwT-4WvSGM!Rb"));
      assertTrue(hashSet0.contains(object0));
      assertFalse(linkedHashSet0.contains(string3));
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceFirst((String) null, "YBTop5BN|:gF8,Zxm", (String) null);
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals(44, charBuffer0.remaining());
      assertEquals(44, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(44, charBuffer0.length());
      assertEquals(44, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("Minimum abbreviation width with offset is %d", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[2] = (CharSequence) "The Array must not b~";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "The Array must not b~", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.center("Minimum abbreviation width with offset is %d", 10, '2');
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.startsWith("...t is %d", "...t is %d");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Integer integer0 = new Integer((-22));
      assertEquals((-22), (int)integer0);
      assertNotNull(integer0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate0.and(predicate2);
      assertNotSame(predicate4, predicate3);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertNotNull(predicate4);
      
      Predicate<Object> predicate5 = predicate0.and(predicate4);
      assertNotSame(predicate4, predicate5);
      assertNotSame(predicate4, predicate3);
      assertNotSame(predicate5, predicate4);
      assertNotSame(predicate5, predicate3);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate0));
      assertNotNull(predicate5);
      
      Predicate<Object> predicate6 = predicate1.or(predicate0);
      assertNotSame(predicate6, predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate2));
      assertNotNull(predicate6);
      
      Predicate<Locale.LanguageRange> predicate7 = Predicate.isEqual((Object) "The Array must not b~");
      assertNotNull(predicate7);
      
      Predicate<Object> predicate8 = predicate2.or(predicate6);
      assertNotSame(predicate8, predicate2);
      assertNotSame(predicate8, predicate6);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate2, predicate8);
      assertNotSame(predicate6, predicate8);
      assertNotSame(predicate6, predicate2);
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate3));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate0));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate2));
      assertNotNull(predicate8);
      
      String string2 = StringUtils.left(" vs ", (-22));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.rotate("", (-125));
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.prependIfMissing("Minimum abbreviation width with offset is %d", "", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("Minimum abbreviation width with offset is %d", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int0 = StringUtils.compare("The Array must not b~", "+WALncp18DS+p3k+WALncp18DS+p3k", true);
      assertEquals(41, int0);
      
      String string5 = StringUtils.wrapIfMissing("*cXK8", '^');
      assertEquals("^*cXK8^", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.isMixedCase(" vs ");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.stripStart("~", "~");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.strip("offset cannot be negative", "");
      assertEquals("offset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("~");
      assertEquals("~", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "offset cannot be negative", (CharSequence) "~");
      assertEquals("offset cannot be negative", charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertNotNull(charSequence0);
      
      String[] stringArray0 = StringUtils.substringsBetween("6(r:q+Ws", "6(r:q+Ws", "xl");
      assertNull(stringArray0);
      
      String string3 = StringUtils.capitalize("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)charSequence0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.stripStart("~", "~");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string1 = StringUtils.strip("offset cannot be negative", "");
      assertEquals("offset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chomp("~");
      assertEquals("~", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.leftPad("~", 0);
      assertEquals("~", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "~";
      String string4 = StringUtils.substringBefore("~", 0);
      assertEquals("~", string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[4], (CharSequence) "offset cannot be negative", 0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.normalizeSpace("~");
      assertEquals("~", string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertFalse(arrayList0.contains("offset cannot be negative"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>(arrayList0);
      assertFalse(arrayList0.contains("offset cannot be negative"));
      assertFalse(linkedList0.contains("offset cannot be negative"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "", 0, 11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 11
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      String string0 = StringUtils.truncate(" vs ", 3810);
      assertEquals(" vs ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(" vs ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter(" vs ", 196);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("-Cy!.Z.:dv\"Li", 175, 175);
      assertEquals("-Cy!.Z.:dv\"Li", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.replace("QsimbW", "-Cy!.Z.:dv\"Li", "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", 175);
      assertEquals("QsimbW", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "QsimbW";
      objectArray0[1] = (Object) "QsimbW";
      objectArray0[2] = (Object) "-Cy!.Z.:dv\"Li";
      objectArray0[3] = (Object) "QsimbW";
      objectArray0[4] = (Object) "QsimbW";
      objectArray0[5] = (Object) "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      objectArray0[7] = (Object) "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";
      String string4 = StringUtils.join(objectArray0, '8', 481, (-3337));
      assertEquals(8, objectArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = StringUtils.mid("1j^14YPT!/", Integer.MIN_VALUE, 1);
      assertEquals("1", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)45;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)48;
      shortArray0[3] = (short)0;
      shortArray0[6] = (short)5096;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)1580;
      String string1 = StringUtils.join(shortArray0, '\"', 1, (-651));
      assertEquals(7, shortArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new short[] {(short)45, (short)0, (short)48, (short)0, (short)0, (short)0, (short)1580}, shortArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat('\"', 1764);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumericSpace(string2);
      assertFalse(boolean0);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.repeat(" ", "1", (int) (short)0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isBlank(" ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAllBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertFalse(set0.contains(""));
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      assertEquals(0, linkedList0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string4 = StringUtils.join((List<?>) list0, 't', 55, (int) (short)0);
      assertFalse(set0.contains(""));
      assertFalse(list0.contains(""));
      assertEquals(0, linkedList0.size());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb");
      assertEquals("yoU4kcwT-4WvSGM!Rb", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[1] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[2] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[3] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[4] = (Object) "yoU4kcwT-4WvSGM!Rb";
      String string1 = StringUtils.wrapIfMissing("YBTop5BN|:gF8,Zxm", 'g');
      assertEquals("gYBTop5BN|:gF8,Zxmg", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.joinWith((String) null, objectArray0);
      assertEquals(8, objectArray0.length);
      assertEquals("yoU4kcwT-4WvSGM!RbyoU4kcwT-4WvSGM!RbyoU4kcwT-4WvSGM!RbyoU4kcwT-4WvSGM!RbyoU4kcwT-4WvSGM!Rb", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "b>^o3pp}isb>^o3pp}is", "N7^5~`4is9I]");
      assertEquals(2, int0);
      
      String string3 = StringUtils.trim("?=9,*5ZvUd7t;");
      assertEquals("?=9,*5ZvUd7t;", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOf((CharSequence) "?=9,*5ZvUd7t;", (-1));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.abbreviateMiddle("\"c", "ch", 1305);
      assertEquals("\"c", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains(string1));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(int1));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedHashSet0.containsAll(linkedList0);
      assertFalse(linkedHashSet0.contains(string1));
      assertFalse(linkedList0.contains(int1));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(linkedHashSet0);
      assertFalse(hashSet0.contains("\"c"));
      assertFalse(linkedHashSet0.contains(string1));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean2 = hashSet0.add("TguU");
      assertTrue(hashSet0.contains("TguU"));
      assertFalse(hashSet0.contains("\"c"));
      assertFalse(linkedHashSet0.contains(string1));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string5 = StringUtils.join((Iterable<?>) hashSet0, "?=9,*5ZvUd7t;");
      assertTrue(hashSet0.contains("TguU"));
      assertFalse(hashSet0.contains("\"c"));
      assertFalse(linkedHashSet0.contains(string1));
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("TguU", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, ':', (-509), 5801);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -509
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb");
      assertEquals("yoU4kcwT-4WvSGM!Rb", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[1] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[2] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[3] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[4] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[5] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[6] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[7] = (Object) "yoU4kcwT-4WvSGM!Rb";
      String string1 = StringUtils.join(objectArray0, 'j', (int) 'j', (int) 'j');
      assertEquals(8, objectArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("yoU4kcwT-4WvSGM!Rb", "The character ");
      assertEquals("yoU4kcwT-4WvSGM!Rb", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "yoU4kcwT-4WvSGM!Rb", (CharSequence) "yoU4kcwT-4WvSGM!Rb", 5);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string3 = StringUtils.defaultIfBlank("\n", "yoU4kcwT-4WvSGM!Rb");
      assertEquals("yoU4kcwT-4WvSGM!Rb", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string4 = StringUtils.rightPad("", 5);
      assertEquals("     ", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      charSequenceArray0[0] = (CharSequence) "     ";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "yoU4kcwT-4WvSGM!Rb";
      charSequenceArray0[3] = (CharSequence) "The character ";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "yoU4kcwT-4WvSGM!Rb";
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'j', (-1), 90);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (-1129));
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "3CD`& K3aN0rY!\"!/Hw";
      charSequenceArray0[1] = (CharSequence) "3CD`& K3aN0rY!\"!/Hw";
      String string0 = StringUtils.toRootUpperCase("The type must not be null");
      assertEquals("THE TYPE MUST NOT BE NULL", string0);
      assertNotNull(string0);
      
      charSequenceArray0[2] = (CharSequence) "THE TYPE MUST NOT BE NULL";
      charSequenceArray0[3] = (CharSequence) "3CD`& K3aN0rY!\"!/Hw";
      String string1 = StringUtils.appendIfMissing("3CD`& K3aN0rY!\"!/Hw", "3CD`& K3aN0rY!\"!/Hw", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("3CD`& K3aN0rY!\"!/Hw", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chop("JXMZ\u0005NiK18VOU");
      assertEquals("JXMZ\u0005NiK18VO", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStartIgnoreCase("The type must not be null", "");
      assertEquals("The type must not be null", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.center("AhF^6wcrlK79*", (-1129), "@B`x#[{f-MTS4CZs8!");
      assertEquals("AhF^6wcrlK79*", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("aRK.dlw8");
      assertEquals("aRK.dlw8", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripStart("#", (String) null);
      assertEquals("#", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.JAPANESE;
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string2 = locale1.getDisplayScript();
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertNotSame(locale1, locale0);
      assertEquals("", string2);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = locale0.getDisplayVariant(locale1);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("jpn", locale1.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string3);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Locale locale2 = locale0.stripExtensions();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      
      int int0 = StringUtils.getFuzzyDistance("#", "aRK.dlw8", locale2);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale2.getVariant());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("TWN", locale2.getISO3Country());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zho", locale2.getISO3Language());
      assertSame(locale0, locale2);
      assertNotSame(locale0, locale1);
      assertSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertEquals(0, int0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "-$^7");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate1.negate();
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 24;
      longArray0[1] = (long) 24;
      longArray0[2] = (long) 24;
      Locale locale0 = Locale.US;
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.FRENCH;
      assertEquals("", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.toString());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string0 = locale1.toLanguageTag();
      assertEquals("", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.toString());
      assertNotSame(locale1, locale0);
      assertEquals("fr", string0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string0);
      
      Locale locale2 = Locale.GERMANY;
      assertEquals("DE", locale2.getCountry());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("de_DE", locale2.toString());
      assertEquals("de", locale2.getLanguage());
      assertEquals("DEU", locale2.getISO3Country());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertNotNull(locale2);
      
      String string1 = locale2.getScript();
      assertEquals("DE", locale2.getCountry());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("", locale2.getVariant());
      assertEquals("de_DE", locale2.toString());
      assertEquals("de", locale2.getLanguage());
      assertEquals("DEU", locale2.getISO3Country());
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals("", string1);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("H7ga5l", locale1);
      assertEquals("", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("fr", locale1.toString());
      assertNotSame(locale1, locale2);
      assertNotSame(locale1, locale0);
      assertEquals("h7ga5l", string2);
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("- cS5 .wdOu;z", 846, " vs ");
      assertEquals("- cS5 .wdOu;z vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  vs  ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(" vs ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      String string0 = StringUtils.chop("jZFcC,A:&V6Z\"#");
      assertEquals("jZFcC,A:&V6Z\"", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "jZFcC,A:&V6Z\"#", (CharSequence) "jZFcC,A:&V6Z\"");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultIfBlank("jZFcC,A:&V6Z\"", "&JW!!;GD6=xQ;?)9");
      assertEquals("jZFcC,A:&V6Z\"", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnce("jZFcC,A:&V6Z\"", "jZFcC,A:&V6Z\"", "jZFcC,A:&V6Z\"#");
      assertEquals("jZFcC,A:&V6Z\"#", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)102;
      String string3 = StringUtils.join(byteArray0, 'B', (-901), (-1909));
      assertEquals(4, byteArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)8, (byte) (-1), (byte)102}, byteArray0);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)102;
      floatArray0[1] = 340.81F;
      floatArray0[0] = 0.0F;
      floatArray0[3] = 103.05193F;
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = 0.0F;
      String string4 = StringUtils.join(floatArray0, 'B');
      assertEquals(6, floatArray0.length);
      assertEquals("0.0B340.81B0.0B103.05193B-1.0B0.0", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertArrayEquals(new float[] {0.0F, 340.81F, 0.0F, 103.05193F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertNotNull(string4);
      
      charSequenceArray0[1] = (CharSequence) "0.0B340.81B0.0B103.05193B-1.0B0.0";
      charSequenceArray0[2] = (CharSequence) "jZFcC,A:&V6Z\"";
      charSequenceArray0[3] = (CharSequence) "jZFcC,A:&V6Z\"#";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = "Q*}[:~\\uk7PoA";
      String string1 = StringUtils.center(string0, 24, '&');
      assertEquals("&&&&&Q*}[:~\\uk7PoA&&&&&&", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-0.63945365F);
      floatArray0[2] = (float) 748;
      String string2 = StringUtils.join(floatArray0, '&');
      assertEquals(3, floatArray0.length);
      assertEquals("-0.63945365&0.0&748.0", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new float[] {(-0.63945365F), 0.0F, 748.0F}, floatArray0, 0.01F);
      assertNotNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) string1;
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("jZFcC,A:&V6Z\"#", '@');
      assertEquals("jZFcC,A:&V6Z\"#", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("jZFcC,A:&V6Z\"#");
      assertFalse(boolean0);
      
      String string1 = StringUtils.uncapitalize("jZFcC,A:&V6Z\"#");
      assertEquals("jZFcC,A:&V6Z\"#", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "jZFcC,A:&V6Z\"#", (CharSequence) "jZFcC,A:&V6Z\"#");
      assertEquals(0, int0);
      
      String string2 = StringUtils.defaultIfBlank("%c3", "&JW!!;D6=xQ;?)9");
      assertEquals("%c3", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceOnce("%c3", "jZFcC,A:&V6Z\"#", "jZFcC,A:&V6Z\"#");
      assertEquals("%c3", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)102;
      String string4 = StringUtils.join(byteArray0, '@', (-901), (-1909));
      assertEquals(4, byteArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)8, (byte) (-1), (byte)102}, byteArray0);
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "jZFcC,A:&V6Z\"#";
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (byte)102;
      floatArray0[1] = 340.81F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 103.05193F;
      floatArray0[4] = (float) (byte) (-1);
      floatArray0[5] = 0.0F;
      String string5 = StringUtils.join(floatArray0, '@');
      assertEquals(6, floatArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertArrayEquals(new float[] {102.0F, 340.81F, 0.0F, 103.05193F, (-1.0F), 0.0F}, floatArray0, 0.01F);
      assertNotNull(string5);
      
      charSequenceArray0[1] = (CharSequence) "102.0@340.81@0.0@103.05193@-1.0@0.0";
      charSequenceArray0[2] = (CharSequence) "jZFcC,A:&V6Z\"#";
      charSequenceArray0[3] = (CharSequence) "%c3";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'm';
      charArray0[2] = 'Y';
      charArray0[4] = 'A';
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Vector<String> vector0 = new Vector<String>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      String string0 = StringUtils.join((List<?>) vector0, 'G', (int) (short)0, (-651));
      assertFalse(vector0.contains(string0));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray0[2] = 'Y';
      int int1 = StringUtils.indexOfAnyBut(charSequenceArray0[2], charArray1);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(2, charArray1.length);
      assertNotSame(charArray1, charArray0);
      assertEquals((-1), int1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = StringUtils.replacePattern("{}", "pU8", "");
      assertEquals("{}", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "{}";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "{}", 42);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.containsWhitespace("");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      String string1 = StringUtils.strip("pU8");
      assertEquals("pU8", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "pU8", (CharSequence) "");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      TreeSet<Locale.Category> treeSet0 = new TreeSet<Locale.Category>();
      assertNotNull(treeSet0);
      
      TreeSet<Locale.Category> treeSet1 = new TreeSet<Locale.Category>((SortedSet<Locale.Category>) treeSet0);
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(treeSet1);
      
      String string1 = StringUtils.join((Iterable<?>) treeSet1, (String) null);
      assertNotSame(treeSet0, treeSet1);
      assertNotSame(treeSet1, treeSet0);
      assertEquals("", string1);
      assertTrue(treeSet0.equals((Object)treeSet1));
      assertTrue(treeSet1.equals((Object)treeSet0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      String string2 = StringUtils.join((float[]) null, '2', 1088, 519);
      assertNull(string2);
      
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) '2';
      doubleArray0[1] = (double) '2';
      doubleArray0[2] = (double) 519;
      doubleArray0[3] = (double) '2';
      String string3 = StringUtils.join(doubleArray0, '[', 322, (-1));
      assertEquals(4, doubleArray0.length);
      assertEquals("", string3);
      assertArrayEquals(new double[] {50.0, 50.0, 519.0, 50.0}, doubleArray0, 0.01);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String string0 = StringUtils.rotate("Jm*`5{Mn.", 57);
      assertEquals("Mn.Jm*`5{", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("Jm*`5{Mn.", 160);
      assertEquals("Jm*`5{Mn.", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Mn.Jm*`5{", (CharSequence) "Jm*`5{Mn.", 0);
      assertEquals((-1), int0);
      
      String string2 = "p>#67,}@lxBWR9v+(}";
      String string3 = StringUtils.trim("p>#67,}@lxBWR9v+(}");
      assertEquals("p>#67,}@lxBWR9v+(}", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertFalse(set0.contains("Jm*`5{Mn."));
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0);
      assertFalse(set0.contains("Jm*`5{Mn."));
      assertFalse(list0.contains("Jm*`5{Mn."));
      assertEquals(0, linkedList0.size());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, 'g', 108, 2757);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 2757
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width with offset is %d", 'F');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removePattern("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate("7qH:R}ddm{aSQ+poa", "7qH:R}ddm{aSQ+poa", 2042, 2868);
      assertEquals("7qH:R}ddm{aSQ+poa", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-197), 2331);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)25;
      String string1 = StringUtils.join(byteArray0, '~');
      assertEquals(6, byteArray0.length);
      assertEquals("28~61~-21~0~97~25", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)28, (byte)61, (byte) (-21), (byte)0, (byte)97, (byte)25}, byteArray0);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("28~61~-21~0~97~25", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.lowerCase("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      String string1 = StringUtils.joinWith("", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("_}`?0X", 57, "");
      assertEquals("                         _}`?0X                          ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, 'P', (-3160), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3160
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      byte byte0 = (byte)64;
      char char0 = 'V';
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)64;
      String string0 = StringUtils.remove("r]$I7^[8Lh.%rRulA~", 'V');
      assertEquals("r]$I7^[8Lh.%rRulA~", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      String string1 = StringUtils.substringBefore("r]$I7^[8Lh.%rRulA~", "JD6@CXAkI~|");
      assertEquals("r]$I7^[8Lh.%rRulA~", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[2] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[3] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[4] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[5] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[6] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[7] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      int int0 = StringUtils.indexOfAny((CharSequence) "r]$I7^[8Lh.%rRulA~", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[2], charSequenceArray0[4]);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, 'j', (-1982), (-1787));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1982
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb");
      assertEquals("yoU4kcwT-4WvSGM!Rb", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[1] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[2] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[3] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[4] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[5] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[6] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[7] = (Object) "yoU4kcwT-4WvSGM!Rb";
      String string1 = StringUtils.join(objectArray0, 'j', (int) 'j', (int) 'j');
      assertEquals(8, objectArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "yoU4kcwT-4WvSGM!Rb", (CharSequence) "yoU4kcwT-4WvSGM!Rb");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 5);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = 't';
      charArray0[2] = '9';
      charArray0[3] = '*';
      charArray0[4] = 'e';
      charArray0[5] = '?';
      charArray0[6] = '+';
      charArray0[7] = '3';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("kt9*e?+3", string0);
      assertArrayEquals(new char[] {'k', 't', '9', '*', 'e', '?', '+', '3'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("-$^7", "-$^7", 15);
      assertEquals("-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7", "-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.substring("hndIA3S]`", 16);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "hndIA3S]`", (CharSequence) "hndIA3S]`");
      assertEquals(0, int0);
      
      String string3 = StringUtils.removeStartIgnoreCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", "kt9*e?+3");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", "ld+S%p3/acmQhBA/");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new char[] {'k', 't', '9', '*', 'e', '?', '+', '3'}, charArray0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)7;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      String string4 = StringUtils.toEncodedString(byteArray0, charset0);
      assertEquals(1, byteArray0.length);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("\u0007", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)7}, byteArray0);
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBefore("-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7-$^7", "");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("X&_C@s<Dhz)7Nh;", (String) null);
      assertEquals("X&_C@s<Dhz)7Nh;", string1);
      assertNotNull(string1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertFalse(stack0.contains(locale0));
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(locale0);
      assertTrue(stack0.contains(locale0));
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(stack0.isEmpty());
      assertEquals("[fr_FR]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(boolean0);
      
      boolean boolean1 = stack0.add(locale0);
      assertTrue(stack0.contains(locale0));
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(stack0.isEmpty());
      assertEquals("[fr_FR, fr_FR]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.leftPad((String) null, 3956, "/c9Nzv|{Dx+!B8");
      assertNull(string2);
      
      String string3 = StringUtils.strip((String) null, "Threshold must not be negative");
      assertNull(string3);
      
      String string4 = StringUtils.rightPad("Search and Replace array lengths don't match: ", 3956);
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Threshold must not be negative";
      charSequenceArray0[1] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string5 = StringUtils.replaceChars("Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null, "/c9Nzv|{Dx+!B8");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = "X&_C@s<Dhz)7Nh;";
      String string1 = StringUtils.trim("X&_C@s<Dhz)7Nh;");
      assertEquals("X&_C@s<Dhz)7Nh;", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      String string2 = StringUtils.repeat("X&_C@s<Dhz)7Nh;", "X&_C@s<Dhz)7Nh;", (-579));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("lb", "lb", ".");
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll("X&_C@s<Dhz)7Nh;", "X&_C@s<Dhz)7Nh;");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 9
         // X&_C@s<Dhz)7Nh;
         //          ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "~", (CharSequence) "");
      assertEquals("~", charSequence0);
      assertNotNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = "O7fG@ty~j+jq|!W]R";
      String[] stringArray0 = StringUtils.substringsBetween("~", "O7fG@ty~j+jq|!W]R", "O7fG@ty~j+jq|!W]R");
      assertNull(stringArray0);
      
      String string1 = StringUtils.removeAll("Py-!eF-", "CS^F}:}#8ORP\u0000Q_Pw9");
      assertEquals("Py-!eF-", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) string1, (CharSequence) string0, int0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertFalse(string0.equals((Object)charSequence0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-933L);
      longArray0[1] = 1072L;
      longArray0[2] = (-1L);
      longArray0[3] = 1252L;
      String string0 = StringUtils.join(longArray0, 'd', 2213, (-1));
      assertEquals(4, longArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new long[] {(-933L), 1072L, (-1L), 1252L}, longArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("1", "1", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)77;
      String[] stringArray0 = StringUtils.split("rxQjo5z7B(t-", '$');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'o');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.substringBeforeLast("lb", "");
      assertEquals("lb", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String string0 = StringUtils.leftPad("b>^o3pp}is", 3900);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast(string0, Integer.MAX_VALUE);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "", '5');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = StringUtils.repeat("Minimum abbreviation ws ", "Minimum abbreviation ws ", (-60));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("", "Minimum abbreviation ws ", (-60));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "", (-60));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring("Minimum abbreviation ws ", (-60), (-60));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      assertSame(unaryOperator1, unaryOperator0);
      assertNotNull(unaryOperator1);
      
      String string2 = StringUtils.join((long[]) null, '(');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("*<&ted&:j}D$<$t", "0J@;Q<|");
      assertEquals("*<&ted&:j}D$<$t", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      boolean boolean1 = stack0.add(locale1);
      assertTrue(stack0.contains(locale0));
      assertEquals("[zh_CN]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("CHN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("zh_CN", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("CN", locale1.getCountry());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.leftPad("Object varargs must not be null", 3956, "/c9Nzv|{Dx+!B8");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("*<&ted&:j}D$<$t", "n=8J!ZejOU\"hg$o/-:");
      assertEquals("*<&ted&:j}D$<$t", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("Locale must not be null", 3956);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.replaceChars((String) null, "*<&ted&:j}D$<$t", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNull(string4);
      
      boolean boolean3 = StringUtils.startsWithAny(string3, (CharSequence[]) null);
      assertFalse(boolean3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The StrWW %!+I");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeStart("The StrWW %!+I", "The StrWW %!+I");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The StrWW %!+I", (CharSequence) "");
      assertEquals(14, int0);
      
      String string1 = StringUtils.uncapitalize("a|AXx");
      assertEquals("a|AXx", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.split("a|AXx", "");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.strip("pU8p9ob");
      assertEquals("pU8p9ob", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.capitalize(".8");
      assertEquals(".8", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int2 = StringUtils.countMatches((CharSequence) "a|AXx", 'b');
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean1 = StringUtils.isNumericSpace("pU8p9ob");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.startsWithAny("pU8p9ob", stringArray0);
      assertEquals(8, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(boolean2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String string0 = StringUtils.rightPad("le%|}w^;:_-)c1Z7", 16, '<');
      assertEquals("le%|}w^;:_-)c1Z7", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("...", 16);
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isBlank("...");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat('k', 95);
      assertEquals("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNotBlank("le%|}w^;:_-)c1Z7");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("...");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      String string0 = StringUtils.rightPad("~B?s", 0);
      assertEquals("~B?s", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNotSame(locale0, locale1);
      assertFalse(boolean0);
      assertTrue(locale0.equals((Object)locale1));
      
      String string1 = locale0.getDisplayVariant();
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNotSame(locale0, locale1);
      assertEquals("", string1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      
      int int0 = StringUtils.getFuzzyDistance("~B?s", "~B?s", locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNotSame(locale0, locale1);
      assertEquals(10, int0);
      assertTrue(locale0.equals((Object)locale1));
      
      String string2 = StringUtils.upperCase("~B?s", locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertNotSame(locale0, locale1);
      assertEquals("~B?S", string2);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      PriorityQueue<Locale.LanguageRange> priorityQueue0 = new PriorityQueue<Locale.LanguageRange>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertFalse(linkedHashSet0.contains(locale0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedHashSet0);
      assertFalse(linkedHashSet0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertEquals(0, priorityQueue0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("~B?S", "~B?s");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = 'b';
      charArray0[2] = 'k';
      charArray0[3] = 'b';
      charArray0[4] = 'b';
      charArray0[5] = 'b';
      charArray0[6] = 'b';
      charArray0[7] = 'b';
      charArray0[8] = '{';
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "~B?S", charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new char[] {'.', 'b', 'k', 'b', 'b', 'b', 'b', 'b', '{'}, charArray0);
      
      String string3 = StringUtils.unwrap("X&_C@s<Dhz)7Nh;", 'f');
      assertEquals("X&_C@s<Dhz)7Nh;", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.substring("|#=h.&YxxH'^LE", 10, 20);
      assertEquals("H'^LE", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      String string0 = StringUtils.replaceAll("u", "", "u");
      assertEquals("uuu", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "uuu";
      stringArray0[1] = "uuu";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "uuu";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("uuu", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "uuu");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfter("Cannot store ", "uuu");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("Threshold must not be negative");
      assertEquals("threshold must not be negative", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("threshold must not be negative", stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("", "u");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "uuu", (CharSequence[]) stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, int1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "Cannot store ", (CharSequence) "uuu");
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string4 = StringUtils.wrapIfMissing("offset cannot be negative", 'q');
      assertEquals("qoffset cannot be negativeq", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.joinWith("Cannot store ", stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals("uuuCannot store uuuCannot store Cannot store Cannot store uuu", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(string5);
      
      String string6 = StringUtils.replaceFirst("", "", "#");
      assertEquals("#", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      int int3 = StringUtils.indexOfAny((CharSequence) "#", "");
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      
      int int4 = StringUtils.indexOf((CharSequence) "offset cannot be negative", 0);
      assertEquals((-1), int4);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      
      String string7 = StringUtils.abbreviateMiddle("offset cannot be negative", "0RCUIxWaQ#Wg`)>", (-1));
      assertEquals("offset cannot be negative", string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertNotNull(string7);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("uuu"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(int1));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedHashSet0.containsAll(linkedList0);
      assertFalse(linkedHashSet0.contains("uuu"));
      assertFalse(linkedList0.contains(int1));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, linkedList0.size());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(linkedList0);
      assertFalse(linkedList0.contains(int1));
      assertFalse(hashSet0.contains("uuu"));
      assertEquals(0, linkedList0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      String string8 = StringUtils.join((Iterable<?>) hashSet0, "uuu");
      assertFalse(linkedList0.contains(int1));
      assertFalse(hashSet0.contains("uuu"));
      assertEquals(0, linkedList0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertNotNull(string8);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      String string0 = "Q*}[:~\\uk7PoA";
      String string1 = StringUtils.center(string0, 24, '2');
      assertEquals("22222Q*}[:~\\uk7PoA222222", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("P7 K$-@[_ Q", "");
      assertEquals("P7 K$-@[_ Q", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToEmpty("");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.leftPad("`", 24);
      assertEquals("                       `", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "`", (String) null);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.normalizeSpace("\n");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "                       `";
      stringArray0[1] = string0;
      stringArray0[2] = null;
      stringArray0[3] = string0;
      stringArray0[4] = "";
      stringArray0[5] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(6, stringArray0.length);
      assertEquals(6, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The String must not be empty");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = 'P';
      charArray0[2] = 'g';
      charArray0[3] = 'P';
      charArray0[4] = 'o';
      String string0 = StringUtils.join(charArray0, 'o');
      assertEquals(5, charArray0.length);
      assertEquals("PoPogoPoo", string0);
      assertArrayEquals(new char[] {'P', 'P', 'g', 'P', 'o'}, charArray0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) 'P';
      longArray0[1] = (long) 'o';
      longArray0[2] = (long) 'P';
      longArray0[3] = (long) 'g';
      longArray0[4] = (long) 'g';
      longArray0[5] = (long) (-132);
      longArray0[6] = (long) 'P';
      longArray0[7] = (long) 'o';
      String string1 = StringUtils.join(longArray0, 'g', 1112, 52);
      assertEquals(9, longArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {80L, 111L, 80L, 103L, 103L, (-132L), 80L, 111L, 0L}, longArray0);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertEquals(11, stringArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.appendIfMissing("The String must not be empty", "PoPogoPoo", stringArray0);
      assertEquals(11, stringArray0.length);
      assertEquals("The String must not be empty", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isEmpty("The String must not be empty");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("The String must not be empty");
      assertEquals(28, intArray0.length);
      assertNotNull(intArray0);
      
      String string3 = StringUtils.substring(" vs ", 1112, 52);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Vector<Integer> vector0 = new Vector<Integer>();
      assertFalse(vector0.contains(1112));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      String string4 = StringUtils.join((List<?>) vector0, "PoPogoPoo", 1112, (-1054));
      assertFalse(vector0.contains(52));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = StringUtils.trim("X&_C@s<Dhz)7Nh;");
      assertEquals("X&_C@s<Dhz)7Nh;", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "X&_C@s<Dhz)7Nh;";
      objectArray0[1] = (Object) "X&_C@s<Dhz)7Nh;";
      objectArray0[2] = (Object) "X&_C@s<Dhz)7Nh;";
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      charSequenceArray0[2] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      String string1 = StringUtils.appendIfMissingIgnoreCase("X&_C@s<Dhz)7Nh;", "X&_C@s<Dhz)7Nh;", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("X&_C@s<Dhz)7Nh;", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("jZFcC,A:&V6Z\"#]by\"", "X&_C@s<Dhz)7Nh;");
      assertEquals("jZFcC,A:&V6Z\"#]by\"", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)897;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)2887;
      shortArray0[5] = (short)2607;
      boolean boolean0 = StringUtils.endsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[2]);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.center("<A7]'@", (int) (short)897, '`');
      assertEquals("`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````<A7]'@``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("jZFcC,A:&V6Z\"#]by\"", "X&_C@s<Dhz)7Nh;", (short)2607);
      assertEquals("jZFcC,A:&V6Z\"#]by\"", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsWhitespace("jZFcC,A:&V6Z\"#]by\"");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.truncate("Locale must not be null", 3105, (int) (short)2887);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.toRootLowerCase("");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertNotNull(string6);
      
      String string7 = StringUtils.replaceChars("", "jZFcC,A:&V6Z\"#]by\"", "jZFcC,A:&V6Z\"#]by\"");
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertNotNull(string7);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "jZFcC,A:&V6Z\"#]by\"");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String string0 = StringUtils.remove("\n", "\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceChars("", "\n", "Search and Replace array lengths don't match: ");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("*<&ted&:j}D$<$t", "*<&ted&:j}D$<$t");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.length("*<&ted&:j}D$<$t");
      assertEquals(15, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("B.LkVjiZT:", '^');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("*<&ted&:j}D$<$t", ',');
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean2 = StringUtils.endsWithAny("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertFalse(boolean2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = StringUtils.wrap("*<&ted&:j}D$<$t", (String) null);
      assertEquals("*<&ted&:j}D$<$t", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "", 895, 31);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
      
      String string0 = StringUtils.removeStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "]");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("gG7g5>", "Object varargs must not be null", 365);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 365;
      String string1 = StringUtils.join(doubleArray0, 'C', 79, (-936));
      assertEquals(2, doubleArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new double[] {365.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      String string0 = StringUtils.wrap("_]", "(mZAP'Ow4I@)5k]`+#");
      assertEquals("(mZAP'Ow4I@)5k]`+#_](mZAP'Ow4I@)5k]`+#", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("(mZAP'Ow4I@)5k]`+#_](mZAP'Ow4I@)5k]`+#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      String string0 = StringUtils.leftPad("{", 1329);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate(string0, 1329);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap(string0, "{");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1329;
      doubleArray0[1] = (double) 1329;
      doubleArray0[2] = (double) 1329;
      doubleArray0[3] = (double) 1329;
      doubleArray0[4] = (double) 1329;
      doubleArray0[5] = (double) 1329;
      doubleArray0[6] = (double) 1329;
      doubleArray0[7] = 0.7;
      char char0 = 'e';
      String string3 = StringUtils.join(doubleArray0, 'e', (-278), (-278));
      assertEquals(8, doubleArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new double[] {1329.0, 1329.0, 1329.0, 1329.0, 1329.0, 1329.0, 1329.0, 0.7}, doubleArray0, 0.01);
      assertNotNull(string3);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate(string0, (-278), 1329);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      String string0 = StringUtils.join((boolean[]) null, '%', 98, 98);
      assertNull(string0);
      
      charSequenceArray0[0] = (CharSequence) null;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte) (-49);
      byteArray0[2] = (byte)15;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte) (-12);
      byteArray0[7] = (byte)66;
      byteArray0[8] = (byte)32;
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The StrWW %!+I");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("The", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The StrWW %!+I", (CharSequence) "The");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("The StrWW %!+I", "The StrWW %!+I", "The");
      assertEquals("The", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("a|AXx");
      assertEquals("a|AXx", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.split("a|AXx", "The");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "The", "The");
      assertFalse(boolean0);
      
      String string3 = StringUtils.strip("pU8p9ob");
      assertEquals("pU8p9ob", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((boolean[]) null, 'J', 1164, 0);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-30);
      int int0 = StringUtils.compare("0hDEhASKI5k-=CL", "0hDEhASKI5k-=CL");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      int int0 = StringUtils.compare((String) null, "-KvzSI]", false);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String string0 = StringUtils.chop("O7fG@t^~j+jq|!W]R");
      assertEquals("O7fG@t^~j+jq|!W]", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "O7fG@t^~j+jq|!W]R";
      String string1 = StringUtils.leftPad("O7fG@t^~j+jq|!W]R", 8192, "O7fG@t^~j+jq|!W]R");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.strip("", "Locale mst not be null");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("BT%", (-1596));
      assertEquals("BT%", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.substringAfterLast("offset cannot be negative", "BT%");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int0 = StringUtils.compare(" ", "BT%");
      assertEquals((-34), int0);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "~", (CharSequence) "");
      assertEquals("~", charSequence0);
      assertNotNull(charSequence0);
      
      String[] stringArray0 = StringUtils.substringsBetween("~", "O7fG@ty~j+jq|!W]R", "O7fG@ty~j+jq|!W]R");
      assertNull(stringArray0);
      
      String string0 = StringUtils.capitalize("");
      assertEquals("", string0);
      assertFalse(string0.equals((Object)charSequence0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String string0 = StringUtils.substringBefore("Jm*`5{Mn.", 57);
      assertEquals("Jm*`5{Mn.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("Jm*`5{Mn.", 160);
      assertEquals("Jm*`5{Mn.", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Jm*`5{Mn.", (CharSequence) "Jm*`5{Mn.", 0);
      assertEquals(0, int0);
      
      String string2 = StringUtils.trim("p>#67,}@lxBWR9v+(}");
      assertEquals("p>#67,}@lxBWR9v+(}", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("", "(r:q+Ws", (-234));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      Buffer buffer0 = charBuffer0.clear();
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, buffer0.remaining());
      assertTrue(buffer0.isReadOnly());
      assertEquals(0, buffer0.limit());
      assertFalse(buffer0.hasRemaining());
      assertEquals(0, buffer0.capacity());
      assertFalse(buffer0.hasArray());
      assertFalse(buffer0.isDirect());
      assertEquals(0, buffer0.position());
      assertNotNull(buffer0);
      
      charSequenceArray0[0] = (CharSequence) charBuffer0;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "p>#67,}@lxBWR9v+(}";
      charSequenceArray0[3] = (CharSequence) "Jm*`5{Mn.";
      charSequenceArray0[4] = (CharSequence) "Jm*`5{Mn.";
      charSequenceArray0[5] = (CharSequence) "p>#67,}@lxBWR9v+(}";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "p>#67,}@lxBWR9v+(}";
      charSequenceArray0[8] = (CharSequence) "Jm*`5{Mn.";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Jm*`5{Mn.", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.capitalize((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String string0 = StringUtils.repeat("Minimum abbreviation ws ", "Minimum abbreviation ws ", (-60));
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("", "Minimum abbreviation ws ", (-60));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "", (-60));
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringBeforeLast("", "Minimum abbreviation ws ");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.substring("Minimum abbreviation ws ", (-60), (-60));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.length("");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.chomp("", "");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat('[', 1924);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 1924);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.substring((String) null, (-2739), 1924);
      assertNull(string5);
      
      String string6 = StringUtils.substringAfterLast("Rr]SK~Sg%gBRr]SK~Sg%gB", "Threshold must not be negative");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isAlpha("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertFalse(arrayList0.contains((-60)));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertFalse(stack0.contains((-60)));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean3 = arrayList0.addAll((Collection<? extends Integer>) stack0);
      assertFalse(arrayList0.contains((-60)));
      assertFalse(stack0.contains((-60)));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      String string7 = StringUtils.join((List<?>) arrayList0, "G", 0, 0);
      assertFalse(arrayList0.contains((-60)));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertNotNull(string7);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string8 = StringUtils.upperCase("", locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", string8);
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertNotNull(string8);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "");
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      
      String string9 = StringUtils.mid("G", 0, (-1));
      assertEquals("", string9);
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string3));
      assertTrue(string9.equals((Object)string2));
      assertNotNull(string9);
      
      boolean boolean4 = StringUtils.equalsIgnoreCase("Minimum abbreviation ws ", "");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      
      String string10 = StringUtils.difference("", "");
      assertEquals("", string10);
      assertTrue(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string1));
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The String must not be empty");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(11, stringArray0.length);
      assertEquals("The", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The String must not be empty", (CharSequence) "The");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfter((String) null, "{");
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize("{");
      assertEquals("{", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertEquals(11, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("{", "{");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.join((byte[]) null, 'P');
      assertNull(string3);
      
      String string4 = StringUtils.strip((String) null);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "{");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.removeStart("pU8p9ob", (String) null);
      assertEquals("pU8p9ob", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "pU8p9ob", (CharSequence) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      String[] stringArray0 = StringUtils.split("8N", '4');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      double double0 = StringUtils.getJaroWinklerDistance("8N", "8N");
      assertEquals(1.0, double0, 0.01);
      
      String[] stringArray1 = StringUtils.split("$RO{");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = 35L;
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.leftPad("~", 748, "");
      assertEquals~", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence~";
      String string1 = StringUtils.strip~");
      assertEquals("P7 K$-@[_ Q", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("[BakL!(/gAYry>5POe", 1323);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.upperCase(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The String must not be empty");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(11, stringArray0.length);
      assertEquals("The", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The String must not be empty", (CharSequence) "The");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfter((String) null, "{");
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize("{");
      assertEquals("{", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertEquals(11, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("{", "{");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.join((byte[]) null, 'P');
      assertNull(string3);
      
      String string4 = StringUtils.strip((String) null);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "{");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.removeStart("pU8p9ob", (String) null);
      assertEquals("pU8p9ob", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "The String must not be empty", 1481);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      String string0 = StringUtils.leftPad("b>^o3pp}is", 3900);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = "b>^o3pp}is";
      stringArray0[4] = "W3IdC1QDO";
      stringArray0[6] = string0;
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("b>^o3pp}is", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.left("W3IdC1QDO", (-2097));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeFirst("b>^o3pp}is", "W3IdC1QDO");
      assertEquals("b>^o3pp}is", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("~", "~", 15);
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "\u0000");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.substring("hndIA3S]`", 3);
      assertEquals("IA3S]`", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "~", "\u0000");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.rightPad("\u0000", (int) '\u0000', "{N_");
      assertEquals("\u0000", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "\u0000", charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<String, String> function0 = Function.identity();
      assertNotNull(function0);
      
      stack0.replaceAll(unaryOperator0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("0o", 1, 1);
      assertEquals("o", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.wrapIfMissing("lb", "#<.${~pdPY");
      assertEquals("#<.${~pdPYlb#<.${~pdPY", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "#<.${~pdPYlb#<.${~pdPY");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumericSpace("0o");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String string0 = StringUtils.center("", 24, '2');
      assertEquals("222222222222222222222222", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "222222222222222222222222";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.truncate("", 24);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", charBuffer0.toString());
      assertEquals(44, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(44, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(44, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(44, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      String string1 = StringUtils.repeat("Minimum abbreviation width with offset is %d", 10);
      assertEquals("Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.startsWith("...t is %d", "...t is %d");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = ">-k";
      stringArray0[1] = "...t is %d";
      stringArray0[2] = "...t is %d";
      String string2 = StringUtils.replaceEach("q5>OPEbe-4", stringArray0, (String[]) null);
      assertEquals(3, stringArray0.length);
      assertEquals("q5>OPEbe-4", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      byte byte0 = (byte)4;
      byte byte1 = (byte)112;
      // Undeclared exception!
      try { 
        Charset.forName("q5>OPEbe-4");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // q5>OPEbe-4
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      String string1 = StringUtils.mid("", 0, 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = StringUtils.leftPad("~", 748, "");
      assertEquals~", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "~");
      assertFalse(boolean0);
      
      String string1 = "Q*}[:~\\uk7PoA";
      String string2 = StringUtils.center(string1, 24, '2');
      assertEquals("22222Q*}[:~\\uk7PoA222222", string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 748;
      floatArray0[2] = 340.81F;
      String string3 = StringUtils.join(floatArray0, '2');
      assertEquals(3, floatArray0.length);
      assertEquals("0.02748.02340.81", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new float[] {0.0F, 748.0F, 340.81F}, floatArray0, 0.01F);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) string2;
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, "am");
      assertEquals(2, charSequenceArray0.length);
      assertEquals("am22222Q*}[:~\\uk7PoA222222", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) string4, charSequenceArray0[1]);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(2, int0);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[11];
      String string0 = StringUtils.strip("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "", 'b');
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(11, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int1 = StringUtils.countMatches(charSequenceArray0[0], (CharSequence) ".8");
      assertEquals(11, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(11, charSequenceArray0.length);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      short[] shortArray0 = new short[9];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)48;
      shortArray0[2] = (short)48;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)1580;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)5096;
      shortArray0[7] = (short)0;
      shortArray0[8] = (short)5096;
      String string0 = StringUtils.join(shortArray0, '\"', (int) (short)5096, (int) (short)0);
      assertEquals(9, shortArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new short[] {(short)0, (short)48, (short)48, (short)0, (short)1580, (short)0, (short)5096, (short)0, (short)5096}, shortArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat('\"', 0);
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.repeat("&x*oFz", "", 2698);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isBlank(string2);
      assertFalse(boolean1);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean1 == boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) string2;
      charSequenceArray0[1] = (CharSequence) "";
      String string3 = StringUtils.mid("Object varargs must not be null", (short)0, (short)0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "&x*oFz";
      charSequenceArray0[4] = (CharSequence) string2;
      charSequenceArray0[5] = (CharSequence) string2;
      charSequenceArray0[6] = (CharSequence) "&x*oFz";
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.replaceEach("", (String[]) null, (String[]) null);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-933L);
      longArray0[1] = 1072L;
      longArray0[2] = (-1L);
      longArray0[3] = 1252L;
      char char0 = 'R';
      String string0 = StringUtils.join(longArray0, 'R', 2213, (-1));
      assertEquals(4, longArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new long[] {(-933L), 1072L, (-1L), 1252L}, longArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("1", "1", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("1", (-1), 2213);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      char char0 = 'e';
      // Undeclared exception!
      try { 
        StringUtils.truncate("D!,z6E7Hyfbc<AIi", (-278), 3795);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      String string0 = StringUtils.joinWith("", objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string1 = StringUtils.defaultString("", (String) null);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String string0 = StringUtils.truncate("", 1417);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("", "8PT0Lpuq9$");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((byte[]) null, 'P');
      assertNull(string1);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(37);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(37, charBuffer0.capacity());
      assertEquals(37, charBuffer0.length());
      assertEquals(37, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(37, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = StringUtils.isNotEmpty(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(37, charBuffer0.capacity());
      assertEquals(37, charBuffer0.length());
      assertEquals(37, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(37, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(boolean0);
      
      String string2 = StringUtils.strip("0o=<7JhwXUjcI");
      assertEquals("0o=<7JhwXUjcI", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissing("x9sW\"M^7k-0obo>r", "0o=<7JhwXUjcI", stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals("x9sW\"M^7k-0obo>r0o=<7JhwXUjcI", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("x9sW\"M^7k-0obo>r0o=<7JhwXUjcI", "x9sW\"M^7k-0obo>r");
      assertEquals("0o=<7JhwXUjcI", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceOnceIgnoreCase("QGwZE:xZn\"U)jn", "", "8PT0Lpuq9$");
      assertEquals("QGwZE:xZn\"U)jn", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String[] stringArray1 = StringUtils.split("org.apache.commons.lang3.exception.CloneFailedException", "x9sW\"M^7k-0obo>r");
      assertEquals(9, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string6 = StringUtils.wrap("", 'C');
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String string0 = StringUtils.replaceAll("u", "", "u");
      assertEquals("uuu", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "uuu";
      stringArray0[1] = "uuu";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "uuu";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("uuu", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "uuu");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfter("Cannot store ", "uuu");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("Threshold must not be negative");
      assertEquals("threshold must not be negative", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("threshold must not be negative", stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("", "u");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.join((byte[]) null, 'P');
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.strip("");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.appendIfMissing("", "uuu", stringArray1);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("uuu", string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string6);
      
      String string7 = StringUtils.removeStartIgnoreCase("Cannot store ", "org.apache.commons.lang3.StringUtils");
      assertEquals("Cannot store ", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertNotNull(string7);
      
      String string8 = StringUtils.replaceOnceIgnoreCase("qG@<7EKHqG@<7EKH", "", "Cannot store ");
      assertEquals("qG@<7EKHqG@<7EKH", string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertNotNull(string8);
      
      String[] stringArray2 = StringUtils.split("offset cannot be negative", "");
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      String string9 = StringUtils.wrap("~\" R", 'P');
      assertEquals("P~\" RP", string9);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertNotNull(string9);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = (-738);
      intArray0[2] = 3853;
      intArray0[3] = 3853;
      String string0 = StringUtils.substringBetween((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = StringUtils.strip("n;$#DlV9*WH", "n;$#DlV9*WH");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "n;$#DlV9*WH", (CharSequence) "", (-488));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      int int1 = StringUtils.compareIgnoreCase("", (String) null, false);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.replaceChars("*WH", (String) null, "");
      assertEquals("*WH", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "*WH", 2929);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.substringBetween("X&_C@s<Dhz)7Nh;jZFcC,A:&V6Z\"#]by\"", "", "");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat("CN/1YzOUKN", 59);
      assertEquals("CN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKNCN/1YzOUKN", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("~", 10, 10);
      assertEquals("~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "iZp!nv|8~-_._OYYNMu";
      charSequenceArray0[1] = (CharSequence) "iZp!nv|8~-_._OYYNMu";
      charSequenceArray0[2] = (CharSequence) "~";
      charSequenceArray0[3] = (CharSequence) "~";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("...", '+');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.repeat("~", 620);
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "~", charSequenceArray0[0]);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string2 = StringUtils.joinWith("\n", objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.center("", 47, "l?4?j<oz:$X*");
      assertEquals("l?4?j<oz:$X*l?4?j<oz:$Xl?4?j<oz:$X*l?4?j<oz:$X*", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "H/:?y]w_,w9C";
      charSequenceArray0[3] = (CharSequence) "\n";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "maxWith cannot be negative";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string4 = StringUtils.substringBetween((String) null, "JD6@CXAkI~|", "Z}=i$lfs)N.i#h");
      assertNull(string4);
      
      String string5 = StringUtils.repeat(":", 47);
      assertEquals(":::::::::::::::::::::::::::::::::::::::::::::::", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("\r");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Threshold must not be negative";
      String string1 = StringUtils.valueOf((char[]) null);
      assertNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Threshold must not be negative", (char[]) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string2);
      
      boolean boolean2 = StringUtils.isMixedCase("\r");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.overlay("", "S-[>*e~9zr", 7, 7);
      assertEquals("S-[>*e~9zr", string3);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      String string0 = StringUtils.mid("1j^14YPT!/", Integer.MIN_VALUE, 1);
      assertEquals("1", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)45;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)48;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)5096;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)1580;
      String string1 = StringUtils.join(shortArray0, '\"', 0, (-651));
      assertEquals(7, shortArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new short[] {(short)45, (short)0, (short)48, (short)0, (short)5096, (short)0, (short)1580}, shortArray0);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat('\"', 1764);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumericSpace(string2);
      assertFalse(boolean0);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.repeat(" ", "1", (int) (short)0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isBlank(" ");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width is %d", 3);
      assertEquals("imum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("imum abbreviation width is %d", "Minimum abbreviation width is %d", 3);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("imum abbreviation width is %d", "", 3);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringBeforeLast("", "Minimum abbreviation width is %d");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.substring("Minimum abbreviation width is %d", 3, 3);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.length("");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.chomp("", "");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat('[', 1924);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 1924);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.substring((String) null, (-2739), 1924);
      assertNull(string5);
      
      String string6 = StringUtils.rightPad("imum abbreviation width is %d", 346);
      assertEquals("imum abbreviation width is %d                                                                                                                                                                                                                                                                                                                             ", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.leftPad("~", 748, "");
      assertEquals~", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence~";
      String string1 = StringUtils.strip~");
      assertEquals("P7 K$-@[_ Q", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast("Aborting to protect against StackOverflowError - output of one loop is the input of another", "a|2{wm2q}Z:>8MO5-");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlpha("~");
      assertFalse(boolean0);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertFalse(arrayList0.contains(748));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertFalse(stack0.contains(748));
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean1 = arrayList0.addAll((Collection<? extends Integer>) stack0);
      assertFalse(arrayList0.contains(748));
      assertFalse(stack0.contains(748));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Stack<String> stack1 = new Stack<String>();
      assertFalse(stack1.contains(string2));
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertNotNull(stack1);
      
      String string3 = StringUtils.join((List<?>) stack1, "a<aXM,/{F/:1z", 748, (-5551));
      assertFalse(stack1.contains(string2));
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(10, stack1.capacity());
      assertEquals(0, stack1.size());
      assertTrue(stack1.isEmpty());
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string4 = StringUtils.upperCase("", locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("P7 K$-@[_ Q", "O7fG@ty~j+jq|!W]R");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string5 = StringUtils.mid("...", 3896, 1323);
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("P7 K$-@[_ Q", "P7 K$-@[_ Q");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string6 = StringUtils.difference("", "*WH");
      assertEquals("*WH", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "P7 K$-@[_ Q";
      String string0 = StringUtils.abbreviateMiddle("P7 K$-@[_ Q", "P7 K$-@[_ Q", 11);
      assertEquals("P7 K$-@[_ Q", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("P7 K$-@[_ Q");
      assertTrue(boolean0);
      
      String string1 = StringUtils.chomp("jvxs5JJkOadl", "p?o7Ojk6\"L]c!|");
      assertEquals("jvxs5JJkOadl", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-197), 2331);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)97;
      byteArray0[5] = (byte)25;
      String string1 = StringUtils.join(byteArray0, '~');
      assertEquals(6, byteArray0.length);
      assertEquals("28~61~-21~0~97~25", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new byte[] {(byte)28, (byte)61, (byte) (-21), (byte)0, (byte)97, (byte)25}, byteArray0);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("28~61~-21~0~97~25", " ");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.lowerCase("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) " ";
      String string0 = StringUtils.prependIfMissing(" ", "", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase(" ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.capitalize("_]");
      assertEquals("_]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.remove("", 's');
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Array and element cannot both be null", "Lm6RDw6KJnk2`is9");
      assertEquals("Array and element cannot both be null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("0.VSeqw(V:!3p6/m1c?", "Lm6RDw6KJnk2`is9", (-1563));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.remove(" ", 'C');
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString((String) null);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)64;
      String string0 = StringUtils.remove("r]$I7^[8Lh.%rRulA~", 'V');
      assertEquals("r]$I7^[8Lh.%rRulA~", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      String string1 = StringUtils.substringBefore("r]$I7^[8Lh.%rRulA~", "JD6@CXAkI~|");
      assertEquals("r]$I7^[8Lh.%rRulA~", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[2] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[3] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[4] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[5] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[6] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      charSequenceArray0[7] = (CharSequence) "r]$I7^[8Lh.%rRulA~";
      int int0 = StringUtils.indexOfAny((CharSequence) "r]$I7^[8Lh.%rRulA~", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[2], charSequenceArray0[4]);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.wrapIfMissing("r]$I7^[8Lh.%rRulA~", 'V');
      assertEquals("Vr]$I7^[8Lh.%rRulA~V", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.joinWith("r]$I7^[8Lh.%rRulA~", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "JD6@CXAkI~|", "b>^o3pp}isb>^o3pp}is");
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = StringUtils.indexOf(charSequenceArray0[1], 8173);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      String string4 = StringUtils.abbreviateMiddle("r]$I7^[8Lh.%rRulA~", "r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~", (-1543));
      assertEquals("r]$I7^[8Lh.%rRulA~", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains(string2));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertFalse(linkedList0.contains(int0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedHashSet0.containsAll(linkedList0);
      assertFalse(linkedHashSet0.contains(string2));
      assertFalse(linkedList0.contains(int0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(boolean0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(string2));
      assertFalse(hashSet0.contains("r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      String string5 = StringUtils.join((Iterable<?>) hashSet0, "r]$I7^[8Lh.%rRulA~");
      assertFalse(linkedHashSet0.contains("r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~"));
      assertFalse(hashSet0.contains("r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~r]$I7^[8Lh.%rRulA~"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("offset cannot be negative", "offset cannot be negative");
      assertEquals("", string0);
      assertNotNull(string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(string0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string1 = StringUtils.join((List<?>) linkedList0, '4', 8192, 1241);
      assertFalse(linkedList0.contains(string0));
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      String string0 = StringUtils.remove("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", '2');
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "");
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.isMixedCase("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String string2 = StringUtils.repeat("Array element ", (String) null, 293);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripToNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean4 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      
      String string4 = StringUtils.substring("org.apache.commons.lang3.ArrayUtils", 102);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~";
      boolean boolean5 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      String string0 = StringUtils.abbreviate("n;$#DlV9*WH", "{N_", (-1238), 3443);
      assertEquals("n;$#DlV9*WH", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 35L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 3443;
      longArray0[5] = 35L;
      longArray0[4] = (long) (-1238);
      longArray0[5] = 35L;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      String string1 = StringUtils.join(longArray0, 'X', (-132), (-1238));
      assertEquals(8, longArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {35L, 0L, 3443L, 0L, (-1238L), 35L, 0L, 0L}, longArray0);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "n;$#DlV9*WH";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "{N_";
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("n;$#DlV9*WH", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.appendIfMissing("n;$#DlV9*WH", charSequenceArray0[3], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("n;$#DlV9*WH", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isEmpty(charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("n;$#DlV9*WH");
      assertEquals(11, intArray0.length);
      assertNotNull(intArray0);
      
      String string3 = StringUtils.substring(" vs ", (-132), 54);
      assertEquals(" vs ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("offset cannot be negative", "offset cannot be negative");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "offset cannot be negative");
      assertFalse(boolean0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string1 = StringUtils.join((List<?>) linkedList0, "offset cannot be negative", 110, (-2221));
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.abbreviate((String) null, (-2221));
      assertNull(string2);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("", "offset cannot be negative");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("W3IdC1QDO");
      assertEquals("w3idc1qdo", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("b>^o3pp}is", 3900);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "b>^o3pp}is";
      stringArray0[1] = "b>^o3pp}is";
      stringArray0[2] = "b>^o3pp}is";
      stringArray0[3] = "w3idc1qdo";
      stringArray0[4] = "W3IdC1QDO";
      stringArray0[5] = "w3idc1qdo";
      stringArray0[6] = string1;
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("b>^o3pp}is", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("w3idc1qdo", 1, 'U');
      assertEquals("w3idc1qdo", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Stream<Locale.LanguageRange> stream0 = vector0.parallelStream();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(stream0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains("W3IdC1QDO"));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean2 = arrayList0.add("b>^o3pp}is");
      assertFalse(arrayList0.contains("W3IdC1QDO"));
      assertTrue(arrayList0.contains(string2));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.removeStart("b>^o3pp}is", "b>^o3pp}is");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.replaceChars(" is not in the range '0' - '9'", "p{InCombiningDiacriticalMarks}+", "w3idc1qdo");
      assertEquals(" o d1 od he de '0' - '9'", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The String must not be empty");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(11, stringArray0.length);
      assertEquals("The", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The String must not be empty", (CharSequence) "The");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfter("The", "{");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("{");
      assertEquals("{", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.split("{", "{");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "The", "{");
      assertTrue(boolean0);
      
      String string3 = StringUtils.removeStart("", "");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)64;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)64;
      byteArray0[4] = (byte)64;
      byteArray0[5] = (byte)64;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte)64;
      byteArray0[8] = (byte)64;
      String string0 = StringUtils.join(byteArray0, 'V');
      assertEquals(9, byteArray0.length);
      assertEquals("64V64V64V64V64V64V64V64V64", string0);
      assertArrayEquals(new byte[] {(byte)64, (byte)64, (byte)64, (byte)64, (byte)64, (byte)64, (byte)64, (byte)64, (byte)64}, byteArray0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("...", "...");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.lowerCase("CWHpk");
      assertEquals("cwhpk", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("p{InCombiningDiacriticalMarks}+", "cwhpk", (int) (byte)64);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      String string0 = StringUtils.repeat('k', 95);
      assertEquals("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "le%|}w^;:_-)c1Z7", (-3228));
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String string0 = StringUtils.trim("X&_C@s<Dhz)7Nh;");
      assertEquals("X&_C@s<Dhz)7Nh;", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "X&_C@s<Dhz)7Nh;";
      objectArray0[1] = (Object) "X&_C@s<Dhz)7Nh;";
      objectArray0[2] = (Object) "X&_C@s<Dhz)7Nh;";
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      charSequenceArray0[2] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      String string1 = StringUtils.appendIfMissingIgnoreCase("X&_C@s<Dhz)7Nh;", "X&_C@s<Dhz)7Nh;", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("X&_C@s<Dhz)7Nh;", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("XvV#V!V`@2,s1", "X&_C@s<Dhz)7Nh;");
      assertEquals("XvV#V!V`@2,s1", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)897;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)2887;
      shortArray0[5] = (short)2607;
      boolean boolean0 = StringUtils.endsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[2]);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.center("<A7]'@", (int) (short)897, '`');
      assertEquals("`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````<A7]'@``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("XvV#V!V`@2,s1", "X&_C@s<Dhz)7Nh;", (short)2607);
      assertEquals("XvV#V!V`@2,s1", string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsWhitespace("XvV#V!V`@2,s1");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.truncate("Locale must not be null", 3105, (int) (short)2887);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.toRootLowerCase("");
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The String must not be empty");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(11, stringArray0.length);
      assertEquals("The", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The String must not be empty", (CharSequence) "The");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfter((String) null, "{");
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize("a|AXx");
      assertEquals("a|AXx", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertEquals(11, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("a|AXx", "{");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.join((byte[]) null, 'P');
      assertNull(string3);
      
      String string4 = StringUtils.strip((String) null);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "{");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.removeStart("pU8p9ob", (String) null);
      assertEquals("pU8p9ob", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.join(charArray0, 'P', 55, 0);
      assertEquals(5, charArray0.length);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "The String must not be empty", (char[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.unwrap((String) null, '4');
      assertNull(string1);
      
      String string2 = StringUtils.substring((String) null, (-1), 1704);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      String string0 = StringUtils.trim("X&_C@s<Dhz)7Nh;");
      assertEquals("X&_C@s<Dhz)7Nh;", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "X&_C@s<Dhz)7Nh;";
      objectArray0[1] = (Object) "X&_C@s<Dhz)7Nh;";
      objectArray0[2] = (Object) "X&_C@s<Dhz)7Nh;";
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      charSequenceArray0[2] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      String string1 = StringUtils.appendIfMissingIgnoreCase("X&_C@s<Dhz)7Nh;", "X&_C@s<Dhz)7Nh;", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("X&_C@s<Dhz)7Nh;", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("XvV#V!V`@2,s1", "X&_C@s<Dhz)7Nh;");
      assertEquals("XvV#V!V`@2,s1", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)897;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)2887;
      shortArray0[4] = (short)0;
      shortArray0[5] = (short)2607;
      boolean boolean0 = StringUtils.endsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[2]);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.center("<A7]'@", (int) (short)897, '`');
      assertEquals("`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````<A7]'@``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.abbreviateMiddle("XvV#V!V`@2,s1", "X&_C@s<Dhz)7Nh;", (short)2607);
      assertEquals("XvV#V!V`@2,s1", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsWhitespace("XvV#V!V`@2,s1");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isEmpty("X&_C@s<Dhz)7Nh;");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.leftPad("~", 748, "");
      assertEquals~", string0);
      assertNotNull(string0);
      
      charSequenceArray0[4] = (CharSequence~";
      String string1 = StringUtils.strip("offset cannot be negative~");
      assertEquals("offset cannot be negative", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "offset cannot be negative";
      String string2 = StringUtils.chomp("~");
      assertEquals("~", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "~";
      String string3 = StringUtils.leftPad("~", 0);
      assertEquals("~", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "~";
      String string4 = StringUtils.substringBefore("~", 0);
      assertEquals("~", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "\n");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.normalizeSpace("~");
      assertEquals("~", string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-197), (-197));
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[3], charSequenceArray0[8]);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.deleteWhitespace("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.joinWith("", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = StringUtils.indexOf(charSequenceArray0[3], 2747);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      
      String string3 = StringUtils.abbreviateMiddle("", "m", 0);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains(""));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(""));
      assertFalse(hashSet0.contains((-197)));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      String string4 = StringUtils.join((Iterable<?>) hashSet0, "ch");
      assertFalse(linkedHashSet0.contains(""));
      assertFalse(hashSet0.contains((-197)));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      String string0 = StringUtils.substring("gr%{", 3);
      assertEquals("{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("{", "gr%{", 3);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.reverseDelimited("", ']');
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "{");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "gr%{";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "gr%{";
      charSequenceArray0[3] = (CharSequence) "{";
      String string2 = StringUtils.removeIgnoreCase("The character ", "#`~cYby*'K[Bz'~0");
      assertEquals("The character ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[4] = (CharSequence) "The character ";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "gr%{";
      String string3 = StringUtils.prependIfMissingIgnoreCase("gr%{", "{", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals("gr%{", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.capitalize(".8");
      assertEquals(".8", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.prependIfMissing("Arguments cannot both be null", ".8", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(".8Arguments cannot both be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) ".8Arguments cannot both be null", 'b');
      assertEquals(2, int0);
      
      boolean boolean0 = StringUtils.isNumericSpace(".8");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.startsWithAny(".8", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.countMatches((CharSequence) ".8", (CharSequence) " ");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      double double0 = StringUtils.getJaroWinklerDistance(".8", ".8Arguments cannot both be null");
      assertEquals(0.69, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The StrWW %!+I");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("The", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The StrWW %!+I", (CharSequence) "The");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("The StrWW %!+I", "The StrWW %!+I", "The");
      assertEquals("The", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.deleteWhitespace("b-zFj");
      assertEquals("b-zFj", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBeforeLast("The", "b-zFj");
      assertEquals("The", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("X&_C@s<Dhz)7Nh;", (String) null);
      assertEquals("X&_C@s<Dhz)7Nh;", string1);
      assertNotNull(string1);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertFalse(stack0.contains(locale0));
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = stack0.add(locale0);
      assertTrue(stack0.contains(locale0));
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertFalse(stack0.isEmpty());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[fr_FR]", stack0.toString());
      assertEquals(1, stack0.size());
      assertTrue(boolean0);
      
      boolean boolean1 = stack0.add(locale0);
      assertTrue(stack0.contains(locale0));
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertFalse(stack0.isEmpty());
      assertEquals("[fr_FR, fr_FR]", stack0.toString());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Locale locale1 = Locale.lookup(vector0, stack0);
      assertTrue(stack0.contains(locale0));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[fr_FR, fr_FR]", stack0.toString());
      assertEquals(2, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNull(locale1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "X&_C@s<Dhz)7Nh;", (CharSequence) null);
      assertEquals("X&_C@s<Dhz)7Nh;", charSequence0);
      assertTrue(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      charSequenceArray0[1] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      charSequenceArray0[2] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      charSequenceArray0[3] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      charSequenceArray0[4] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("@[yTRcl5/<uej^f", "|NDB?", (String) null);
      assertNull(stringArray0);
      
      int int1 = StringUtils.indexOf((CharSequence) "X&_C@s<Dhz)7Nh;", (CharSequence) "X&_C@s<Dhz)7Nh;", 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      String string0 = StringUtils.trimToNull("'U@%k,Fn|JnM~");
      assertEquals("'U@%k,Fn|JnM~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("'U@%k,Fn|JnM~", "'U@%k,Fn|JnM~");
      assertEquals("'U@%k,Fn|JnM~'U@%k,Fn|JnM~'U@%k,Fn|JnM~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("'U@%k,Fn|JnM~'U@%k,Fn|JnM~'U@%k,Fn|JnM~");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "'U@%k,Fn|JnM~'U@%k,Fn|JnM~'U@%k,Fn|JnM~", "'U@%k,Fn|JnM~");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.capitalize(" ");
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("'U@%k,Fn|JnM~");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.toRootLowerCase("QwMnf#W4a#/TEH");
      assertEquals("qwmnf#w4a#/teh", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAlphaSpace("QwMnf#W4a#/TEH");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.replaceIgnoreCase("|-*5u7TmH+<X{", "qwmnf#w4a#/teh", "'U@%k,Fn|JnM~", 1399);
      assertEquals("|-*5u7TmH+<X{", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.uncapitalize((String) null);
      assertNull(string5);
      
      int int0 = StringUtils.indexOf((CharSequence) "'U@%k,Fn|JnM~", (CharSequence) null, 1399);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Minimum abbreviation width with offset is %d");
      assertFalse(charBuffer0.hasArray());
      assertEquals(44, charBuffer0.capacity());
      assertEquals(44, charBuffer0.length());
      assertEquals(44, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("Minimum abbreviation width with offset is %d", charBuffer0.toString());
      assertEquals(44, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "The Array must not b~";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[2] = (CharSequence) "The Array must not b~";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "The Array must not b~", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.center("Minimum abbreviation width with offset is %d", 10, '2');
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is %d");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.startsWith("...t is %d", "...t is %d");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Integer integer0 = new Integer((-22));
      assertEquals((-22), (int)integer0);
      assertNotNull(integer0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate1.or(predicate0);
      assertNotSame(predicate4, predicate2);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate0));
      assertNotNull(predicate4);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      String string2 = StringUtils.repeat("The Array must not b~", "...t is %d", (-22));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing("Jd*:.", "{");
      assertEquals("{Jd*:.{", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals((-1), int0);
      
      String string4 = StringUtils.getDigits("The Array must not b~");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      Locale locale1 = Locale.US;
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("US", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string5 = locale0.toLanguageTag();
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertNotSame(locale0, locale1);
      assertEquals("fr-FR", string5);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = locale0.getScript();
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertNotSame(locale0, locale1);
      assertEquals("", string6);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertNotNull(string6);
      
      Locale locale2 = Locale.ENGLISH;
      assertEquals("eng", locale2.getISO3Language());
      assertEquals("", locale2.getISO3Country());
      assertEquals("en", locale2.toString());
      assertEquals("en", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("", locale2.getCountry());
      assertNotSame(locale2, locale0);
      assertNotSame(locale2, locale1);
      assertFalse(locale2.equals((Object)locale0));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      
      String string7 = StringUtils.lowerCase("IFf{RG`m", locale1);
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("en_US", locale1.toString());
      assertEquals("USA", locale1.getISO3Country());
      assertEquals("en", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("US", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertNotSame(locale1, locale2);
      assertEquals("iff{rg`m", string7);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(locale1.equals((Object)locale2));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      
      String string8 = StringUtils.rightPad("", 51, "");
      assertEquals("                                                   ", string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertNotNull(string8);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("...", "<A++~(M<.[OHvr$1o_", 64);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      String string0 = StringUtils.capitalize(" ");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceFirst(" ", " ", "QwMnf#W4a#/TEH");
      assertEquals("QwMnf#W4a#/TEH", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("QwMnf#W4a#/TEH");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 22);
      assertEquals(0, int0);
      
      String string1 = StringUtils.center("@,l<{YqFzfg", 5, "");
      assertEquals("@,l<{YqFzfg", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      int int0 = 11;
      char char0 = '4';
      String string0 = StringUtils.leftPad(", Length: 0", 11, '4');
      assertEquals(", Length: 0", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) ", Length: 0";
      String string1 = StringUtils.removeFirst("UJK5Y?32k(-1", "67\"l0uDBnyU");
      assertEquals("UJK5Y?32k(-1", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "UJK5Y?32k(-1";
      String string2 = StringUtils.replaceOnceIgnoreCase("`bB<Li A>STr", "", "a");
      assertEquals("`bB<Li A>STr", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "`bB<Li A>STr";
      String string3 = StringUtils.center("&ELh~R4` `nF w-!", 11, (String) null);
      assertEquals("&ELh~R4` `nF w-!", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "&ELh~R4` `nF w-!";
      float[] floatArray0 = new float[0];
      String string4 = StringUtils.join(floatArray0, 'Y');
      assertEquals(0, floatArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      String string5 = StringUtils.center("null/empty items", 160, "#");
      assertEquals("########################################################################null/empty items########################################################################", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      charSequenceArray0[5] = (CharSequence) "########################################################################null/empty items########################################################################";
      String string6 = StringUtils.substringAfter("########################################################################null/empty items########################################################################", 160);
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      
      charSequenceArray0[6] = (CharSequence) "";
      char[] charArray0 = new char[7];
      charArray0[0] = '4';
      charArray0[1] = '4';
      charArray0[2] = '4';
      charArray0[3] = '4';
      charArray0[4] = '4';
      charArray0[5] = 'Y';
      charArray0[6] = 'Y';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 11, 160);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      String string0 = StringUtils.repeat("Supplied value must be a valid byte literal between -32768 and 32767: [%]@", "org.apache.commons.lang3.ArrayUtils", (-258));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeFirst("org.apache.commons.lang3.ArrayUtils", "XdHP_");
      assertEquals("org.apache.commons.lang3.ArrayUtils", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.ordinalIndexOf("org.apache.commons.lang3.ArrayUtils", "org.apache.commons.lang3.ArrayUtils", (-258));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Supplied value must be a valid byte literal between -32768 and 32767: [%]@", "q[q^H.yQ$uO\"", (-258));
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.unwrap("", 'Q');
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-197), 2331);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[3], charSequenceArray0[8]);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.wrapIfMissing("", 's');
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.joinWith("", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = StringUtils.indexOf(charSequenceArray0[3], 2747);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      
      String string3 = StringUtils.abbreviateMiddle("", "\n", 0);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains(string0));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(string0));
      assertFalse(hashSet0.contains(2747));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      String string4 = StringUtils.join((Iterable<?>) hashSet0, "ch");
      assertFalse(linkedHashSet0.contains(string0));
      assertFalse(hashSet0.contains(2747));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
      
      String string5 = StringUtils.swapCase("ch");
      assertEquals("CH", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.trimToEmpty("CH");
      assertEquals("CH", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>(590);
      assertFalse(vector0.contains(590));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(590, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      String string0 = StringUtils.join((Iterable<?>) vector0, "");
      assertFalse(vector0.contains(590));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(590, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = vector0.add((Object) "/hJPac1P#bINR8iMmb");
      assertFalse(vector0.contains(590));
      assertTrue(vector0.contains("/hJPac1P#bINR8iMmb"));
      assertEquals(590, vector0.capacity());
      assertEquals("[/hJPac1P#bINR8iMmb]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) vector0;
      objectArray0[1] = (Object) vector0;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      vector0.replaceAll(unaryOperator0);
      assertFalse(vector0.contains(590));
      assertTrue(vector0.contains("/hJPac1P#bINR8iMmb"));
      assertEquals(590, vector0.capacity());
      assertEquals("[/hJPac1P#bINR8iMmb]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      
      objectArray0[2] = (Object) vector0;
      Object[] objectArray1 = vector0.toArray(objectArray0);
      assertFalse(vector0.contains(590));
      assertTrue(vector0.contains("/hJPac1P#bINR8iMmb"));
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertEquals(590, vector0.capacity());
      assertEquals("[/hJPac1P#bINR8iMmb]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      String[] stringArray0 = StringUtils.split("", '4');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.reverse("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 35L;
      longArray0[1] = (long) (-1);
      boolean boolean1 = StringUtils.equalsIgnoreCase("{", "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.unwrap("/hJPac1P#bINR8iMmb", 'g');
      assertEquals("/hJPac1P#bINR8iMmb", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("", "/hJPac1P#bINR8iMmb");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", 'X');
      assertEquals(0, stringArray1.length);
      assertSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("O7z7{");
      assertEquals("O7z7{", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[6];
      charArray0[4] = 'P';
      charArray0[1] = 'm';
      charArray0[4] = 'A';
      charArray0[5] = 'z';
      int int0 = StringUtils.indexOfAny((CharSequence) "O7z7{", charArray0);
      assertEquals(6, charArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'\u0000', 'm', '\u0000', '\u0000', 'A', 'z'}, charArray0);
      
      String string1 = StringUtils.substringAfter((String) null, (-2415));
      assertNull(string1);
      
      String string2 = StringUtils.abbreviate("Supplied value must be a valid byte literal between -32768 and 32767: [", 2, 53);
      assertEquals("Supplied value must be a valid byte literal betwee...", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String string0 = StringUtils.mid("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", '-', '-');
      assertEquals("", string0);
      assertNotNull(string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains(string0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "{}", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap((String) null, '1');
      assertNull(string1);
      
      String string2 = StringUtils.substring((String) null, (-1), 1704);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      String string0 = StringUtils.getDigits("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart("5Y(1Axle%|}w^;:_-)c1Z7", "]");
      assertEquals("5Y(1Axle%|}w^;:_-)c1Z7", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("5Y(1Axle%|}w^;:_-)c1Z7", 365, 'C');
      assertEquals("5Y(1Axle%|}w^;:_-)c1Z7CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      String string0 = "";
      String string1 = "{}";
      String string2 = StringUtils.getDigits("{}");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "{}", (CharSequence) "{}", 0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string3 = null;
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", (String) null, 3915);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[1];
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      String string0 = StringUtils.leftPad("~", 777, "");
      assertEquals~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.strip~");
      assertEquals("P7 K$-@[_ Q", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("|2{w~nm2q}~");
      assertNull(string2);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "P7 K$-@[_ Q", (CharSequence) "");
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[1] = (CharSequence) "|2{w~nm2q}Z:8MO5-";
      charSequenceArray0[1] = (CharSequence) "P7 K$-@[_ Q";
      String string3 = StringUtils.abbreviateMiddle("P7 K$-@[_ Q", "P7 K$-@[_ Q", 11);
      assertEquals("P7 K$-@[_ Q", string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsWhitespace(charSequenceArray0[1]);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.truncate("Invalid locale format: ", 777, 1215);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.toRootLowerCase~");
      assertEquals~", string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\n", ")@}4@xWT7X\"");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.capitalize(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Threshold must not be negative");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.toRootLowerCase(" ");
      assertEquals(" ", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphaSpace(" ");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string3 = StringUtils.replaceIgnoreCase("Search and Replace array lengths don't match: ", (String) null, "S^,&Jf*I", 1224);
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", (CharSequence[]) stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      String string0 = StringUtils.abbreviate("n;$#DlV9*WH", "{N_", (-1238), 3443);
      assertEquals("n;$#DlV9*WH", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 35L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 3443;
      longArray0[5] = 35L;
      longArray0[4] = (long) (-1238);
      longArray0[5] = 35L;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      String string1 = StringUtils.join(longArray0, 'X', (-128), (-1238));
      assertEquals(8, longArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {35L, 0L, 3443L, 0L, (-1238L), 35L, 0L, 0L}, longArray0);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "n;$#DlV9*WH";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "{N_";
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("n;$#DlV9*WH", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.appendIfMissing("n;$#DlV9*WH", charSequenceArray0[3], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals("n;$#DlV9*WH", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace(charSequenceArray0[3]);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("n;$#DlV9*WH");
      assertEquals(11, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.leftPad("~", 748, "");
      assertEquals~", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence~";
      String string1 = StringUtils.join((float[]) null, 'S');
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((Object[]) charSequenceArray0, "6(r:q+Ws");
      assertEquals(5, charSequenceArray0.length);
      assertEquals~6(r:q+Ws6(r:q+Ws6(r:q+Ws6(r:q+Ws", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("", (CharSequence) null, charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.abbreviate((String) null, 748, 2425);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "a|2{wm2q}Z:>8MO5-";
      String string0 = StringUtils.abbreviateMiddle("P7 K$-@[_ Q", "P7 K$-@[_ Q", 11);
      assertEquals("P7 K$-@[_ Q", string0);
      assertNotNull(string0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string1 = StringUtils.appendIfMissing("a|2{wm2q}Z:>8MO5-", "P7 K$-@[_ Q", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals("a|2{wm2q}Z:>8MO5-", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equals(charSequenceArray0[0], (CharSequence) "P7 K$-@[_ Q");
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("P7 K$-@[_ Q");
      assertEquals(11, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean1 = StringUtils.equalsAny(charSequenceArray0[0], charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.uncapitalize("\" U");
      assertEquals("\" U", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate(">;[~<n", 15, 13);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.unwrap("bIqz,v9cH1|e/9Tt|", "\" U");
      assertEquals("bIqz,v9cH1|e/9Tt|", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = StringUtils.appendIfMissing("jZF", "", stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("jZF", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "jZF", (CharSequence) "");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.equalsAny("jZF", stringArray0);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.uncapitalize("4DkI8S");
      assertEquals("4DkI8S", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "~", (CharSequence) "~");
      assertTrue(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("o90qqb\"'l,");
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {111, 57, 48, 113, 113, 98, 34, 39, 108, 44}, intArray0);
      assertNotNull(intArray0);
      
      boolean boolean1 = StringUtils.isWhitespace("~");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.uncapitalize("o90qqb\"'l,");
      assertEquals("o90qqb\"'l,", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.truncate("0o", 4, 2607);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.containsWhitespace("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-933L);
      longArray0[1] = 1072L;
      longArray0[2] = (-1L);
      longArray0[3] = 1252L;
      String string0 = StringUtils.join(longArray0, 'd', 2213, (-1));
      assertEquals(4, longArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new long[] {(-933L), 1072L, (-1L), 1252L}, longArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("1", "1", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.join(longArray0, 'a', 0, (-859));
      assertEquals(4, longArray0.length);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertArrayEquals(new long[] {(-933L), 1072L, (-1L), 1252L}, longArray0);
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "1";
      charSequenceArray0[1] = null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "1";
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      charSequenceArray0[5] = (CharSequence) stringBuffer0;
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAny("1", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.removeStart("\"c", "Object varargs must not be null");
      assertEquals("\"c", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null, true);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.repeat((String) null, "(r:q+Ws6", 8192);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      String string0 = StringUtils.capitalize(" ");
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Threshold must not be negative");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.abbreviateMiddle(" ", " ", 1224);
      assertEquals(" ", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string2 = StringUtils.join((List<?>) linkedList0, "Qj'x#(S7qJ>!b6/=f", 1224, 10);
      assertEquals(0, linkedList0.size());
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllBlank(stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) " ", (CharSequence) "");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("~");
      assertFalse(boolean0);
      
      String string0 = StringUtils.unwrap("--------------------------------SP,_P7,~L", "--------------------------------SP,_P7,~L");
      assertEquals("--------------------------------SP,_P7,~L", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastOrdinalIndexOf(charSequenceArray0[4], charSequenceArray0[5], 0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string1 = StringUtils.replace("", "", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-1);
      intArray0[6] = 0;
      intArray0[7] = 0;
      String string2 = StringUtils.join(intArray0, '2');
      assertEquals(8, intArray0.length);
      assertEquals("0202020202-12020", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, (-1), 0, 0}, intArray0);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string3 = StringUtils.center("0202020202-12020", 95);
      assertEquals("                                       0202020202-12020                                        ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      String string0 = StringUtils.chomp("jZF", "jZF");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.remove("\r", "jZF");
      assertEquals("\r", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)32;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '8', 4, (int) (short)32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      String string1 = StringUtils.joinWith("", objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      String string2 = StringUtils.join(intArray0, '^');
      assertEquals(4, intArray0.length);
      assertEquals("0^0^0^0", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = (-738);
      intArray0[2] = 3853;
      intArray0[3] = 3853;
      String string0 = StringUtils.join(intArray0, '9');
      assertEquals(4, intArray0.length);
      assertEquals("09-7389385393853", string0);
      assertArrayEquals(new int[] {0, (-738), 3853, 3853}, intArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("2W+}", "org.apache.commons.lang3.Charsets");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "p @[zAX\"-8BKd;f");
      assertTrue(boolean0);
      
      String string0 = StringUtils.strip("2W+}");
      assertEquals("2W+}", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "pU8p9ob", (CharSequence) "org.apache.commons.lang3.Charsets");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb");
      assertEquals("yoU4kcwT-4WvSGM!Rb", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[1] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[2] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[3] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[4] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[5] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[6] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[7] = (Object) "yoU4kcwT-4WvSGM!Rb";
      String string1 = StringUtils.join(objectArray0, 'j', (int) 'j', (int) 'j');
      assertEquals(8, objectArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("yoU4kcwT-4WvSGM!Rb", "The character ");
      assertEquals("yoU4kcwT-4WvSGM!Rb", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "The character ", (CharSequence) "yoU4kcwT-4WvSGM!Rb");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "yoU4kcwT-4WvSGM!Rb", (CharSequence) "yoU4kcwT-4WvSGM!Rb", 5);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      String string0 = null;
      byte[] byteArray0 = StringUtils.getBytes("fyG4$&=)Pw5:K{0<", (String) null);
      assertEquals(16, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string1 = StringUtils.chop("fyG4$&=)Pw5:K{0<");
      assertEquals("fyG4$&=)Pw5:K{0", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("fyG4$&=)Pw5:K{0");
      assertEquals("fyG4$&=)Pw5:K{0", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "fyG4$&=)Pw5:K{0<", (CharSequence) null);
      assertEquals(0, int0);
      
      ArrayList<Locale.Category> arrayList0 = new ArrayList<Locale.Category>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ListIterator<Locale.Category> listIterator0 = arrayList0.listIterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = arrayList0.add(locale_Category0);
      assertTrue(arrayList0.contains(locale_Category0));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        arrayList0.subList(1618, 1618);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1618
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      String string0 = StringUtils.difference("o|}7?$e!0", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains(""));
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("y4_EP", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Iterable<?>) vector0, "");
      assertFalse(vector0.contains("y4_EP"));
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = vector0.add((Object) "");
      assertTrue(vector0.contains(""));
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = StringUtils.abbreviate("", "5'~h8:F5Tm", 587);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean3 = StringUtils.isWhitespace("");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      String string2 = StringUtils.rightPad("", 587, '<');
      assertEquals("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringBefore("", 987);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean4 = StringUtils.isBlank("");
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      
      String string4 = StringUtils.repeat(']', 587);
      assertEqualsstring4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean5 = StringUtils.isNotBlank("");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = StringUtils.isWhitespace(charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("+WALncp18DS+p3k+WALncp18DS+p3k", "(r:q+Ws");
      assertEquals("(r:q+Ws+WALncp18DS+p3k+WALncp18DS+p3k(r:q+Ws", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBetween("clonkI~|", "The String must not be empty", "]eEI~|");
      assertNull(string1);
      
      String string2 = StringUtils.substring("The String must not be empty", (-336));
      assertEquals("The String must not be empty", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "The String must not be empty", (CharSequence) "The String must not be empty");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "...";
      stringArray0[1] = "Go";
      stringArray0[2] = "";
      stringArray0[3] = "-hCXnntwwf95-";
      stringArray0[4] = "The type must not be null";
      stringArray0[5] = "d52},NH|V&&g5{OuaGu";
      stringArray0[6] = "The type must not be null";
      stringArray0[7] = "The type must not be null";
      stringArray0[8] = "";
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray2.length);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "The type must not be null", (char[]) null);
      assertFalse(boolean0);
      
      String[] stringArray3 = StringUtils.splitByCharacterType("");
      assertEquals(0, stringArray3.length);
      assertNotSame(stringArray3, stringArray2);
      assertNotSame(stringArray3, stringArray0);
      assertNotSame(stringArray3, stringArray1);
      assertFalse(stringArray3.equals((Object)stringArray2));
      assertFalse(stringArray3.equals((Object)stringArray0));
      assertFalse(stringArray3.equals((Object)stringArray1));
      assertNotNull(stringArray3);
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[0];
      String string1 = StringUtils.join(floatArray0, '^');
      assertEquals(0, floatArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Arguments cannot both be null";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[2] = (CharSequence) "Arguments cannot both be null";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.trimToEmpty("...t is %d");
      assertEquals("...t is %d", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = ';';
      charArray0[2] = '^';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "Arguments cannot both be null", charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'^', ';', '^'}, charArray0);
      
      String string3 = StringUtils.substringBetween("Minimum abbreviation width with offset is %d", "...t is %d", "...t is %d");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-30);
      int int0 = StringUtils.countMatches((CharSequence) "0hDEhASKI5k-=CL", '-');
      assertEquals(1, int0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("0hDEhASKI5k-=CL"));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, '-', 3, 8192);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 8192
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      String string0 = StringUtils.abbreviate("n;$#DlV9*WH", "{N_", (-1238), 3443);
      assertEquals("n;$#DlV9*WH", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = 35L;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 3443;
      longArray0[3] = 35L;
      longArray0[4] = (long) (-1238);
      longArray0[5] = 35L;
      longArray0[6] = (long) 0;
      longArray0[7] = (long) 0;
      String string1 = StringUtils.join(longArray0, 'X', (-128), (-1238));
      assertEquals(8, longArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {35L, 0L, 3443L, 35L, (-1238L), 35L, 0L, 0L}, longArray0);
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "n;$#DlV9*WH";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "{N_";
      charSequenceArray0[3] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("n;$#DlV9*WH", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split("", 'X');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.countMatches((CharSequence) "{N_", '3');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      String string0 = StringUtils.repeat("~", "~", 15);
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("IC`V&1CeQeAxmU", 15);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "~", '/');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      String string0 = StringUtils.replaceAll("u", "", "u");
      assertEquals("uuu", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "uuu";
      stringArray0[1] = "uuu";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "uuu";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals("uuu", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "uuu");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfter("Cannot store ", "uuu");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.uncapitalize("Threshold must not be negative");
      assertEquals("threshold must not be negative", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("threshold must not be negative", stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("", "u");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.join((byte[]) null, 'P');
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isNotEmpty((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.strip("");
      assertEquals("", string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      String string6 = StringUtils.appendIfMissing("", "uuu", stringArray1);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("uuu", string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(string6);
      
      String string7 = StringUtils.removeStartIgnoreCase("Cannot store ", "org.apache.commons.lang3.StringUtils");
      assertEquals("Cannot store ", string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertNotNull(string7);
      
      String string8 = StringUtils.replaceOnceIgnoreCase("qG@<7EKHqG@<7EKH", "", "Cannot store ");
      assertEquals("qG@<7EKHqG@<7EKH", string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertNotNull(string8);
      
      String[] stringArray2 = StringUtils.split("offset cannot be negative", "");
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      String string9 = StringUtils.join((short[]) null, 'P');
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, "yJ");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      String string1 = StringUtils.replace("T", (String) null, "yJ", 5);
      assertEquals("T", string1);
      assertNotNull(string1);
      
      charSequenceArray0[4] = (CharSequence) "T";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "yJ";
      String string2 = StringUtils.appendIfMissingIgnoreCase("@0h,5Rrc8cVKzE", "@0h,5Rrc8cVKzE", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals("@0h,5Rrc8cVKzE", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      String string0 = StringUtils.trim("X&_C@s<Dhz)7Nh;");
      assertEquals("X&_C@s<Dhz)7Nh;", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "X&_C@s<Dhz)7Nh;";
      objectArray0[1] = (Object) "X&_C@s<Dhz)7Nh;";
      objectArray0[2] = (Object) "X&_C@s<Dhz)7Nh;";
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      charSequenceArray0[2] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      String string1 = StringUtils.appendIfMissingIgnoreCase("X&_C@s<Dhz)7Nh;", "X&_C@s<Dhz)7Nh;", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("X&_C@s<Dhz)7Nh;", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("XvV#V!V`@2,s1", "X&_C@s<Dhz)7Nh;");
      assertEquals("XvV#V!V`@2,s1", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)0;
      shortArray0[1] = (short)897;
      shortArray0[2] = (short)1;
      shortArray0[3] = (short)2887;
      shortArray0[4] = (short)2887;
      shortArray0[5] = (short)2607;
      boolean boolean0 = StringUtils.endsWithIgnoreCase(charSequenceArray0[0], charSequenceArray0[2]);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.center("<A7]'@", (int) (short)897, '`');
      assertEquals("`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````<A7]'@``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "\n", ")@}4@xWT7X\"");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.capitalize(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Threshold must not be negative");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.toRootLowerCase(">");
      assertEquals(">", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphaSpace(">");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string3 = StringUtils.replaceIgnoreCase("Search and Replace array lengths don't match: ", (String) null, "S^,&Jf*I", 1224);
      assertEquals("Search and Replace array lengths don't match: ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", (CharSequence[]) stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean3 = StringUtils.isAllLowerCase("Search and Replace array lengths don't match: ");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String string4 = StringUtils.stripToEmpty((String) null);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int1 = StringUtils.lastIndexOfAny((CharSequence) null, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The String must not be empty");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[1] = '?';
      charArray0[2] = 'g';
      charArray0[3] = '?';
      charArray0[4] = 'o';
      String string0 = StringUtils.join(charArray0, 'o');
      assertEquals(5, charArray0.length);
      assertEquals("Po?ogo?oo", string0);
      assertArrayEquals(new char[] {'P', '?', 'g', '?', 'o'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase("The type must not be null");
      assertEquals("the type must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)11;
      byteArray0[1] = (byte) (-2);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-29);
      byteArray0[4] = (byte)4;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)64;
      String string2 = StringUtils.join(byteArray0, 'V');
      assertEquals(7, byteArray0.length);
      assertEquals("11V-2V0V-29V4V0V64", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)11, (byte) (-2), (byte)0, (byte) (-29), (byte)4, (byte)0, (byte)64}, byteArray0);
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("Po?ogo?oo", "The type must not be null");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.lowerCase("CWHpk");
      assertEquals("cwhpk", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.stripToEmpty("{N_");
      assertEquals("{N_", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("e", string0);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.repeat("~", "~", 15);
      assertEquals("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", "e");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.substring("hndIA3S]`", 3);
      assertEquals("IA3S]`", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~", (CharSequence) "IA3S]`");
      assertEquals((-1), int0);
      
      String string3 = StringUtils.removeStartIgnoreCase("hndIA3S]`", "{N_");
      assertEquals("hndIA3S]`", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "~", "hndIA3S]`");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string4 = StringUtils.rightPad("e", (-1), "Search and Replace array lengths don't match: ");
      assertEquals("e", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "e", charArray0);
      assertEquals(1, charArray0.length);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertArrayEquals(new char[] {'e'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("~");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "~");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.substring("'tGR8(", 748);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStartIgnoreCase("", "_");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("", 748, "{N_");
      assertEquals("{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "_", (CharSequence) "{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{N_{");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = vector0.add((Object) "");
      assertTrue(vector0.contains(""));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      String string1 = StringUtils.unwrap((String) null, '4');
      assertNull(string1);
      
      String string2 = StringUtils.substring((String) null, 587, 1);
      assertNull(string2);
      
      String string3 = StringUtils.substringAfterLast((String) null, (int) '4');
      assertNull(string3);
      
      boolean boolean1 = StringUtils.containsIgnoreCase((CharSequence) null, "=3E@NZ/{m");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("", 76, 'k');
      assertEquals("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.overlay("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", "", 76, 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.defaultString("5l}");
      assertEquals("5l}", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("5l}");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "5l}";
      String string4 = StringUtils.joinWith("H/:?y]w_,w9C", objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkH/:?y]w_,w9CH/:?y]w_,w9C5l}", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = StringUtils.center("", 0, "maxWith cannot be negative");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk";
      charSequenceArray0[4] = (CharSequence) "H/:?y]w_,w9C";
      charSequenceArray0[5] = (CharSequence) "5l}";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-197), 2331);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[3], charSequenceArray0[8]);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.wrapIfMissing("", 's');
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.joinWith("", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = StringUtils.indexOf(charSequenceArray0[3], 2747);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      
      String string3 = StringUtils.abbreviateMiddle("", "\n", 0);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains(""));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Object[] objectArray0 = linkedHashSet0.toArray((Object[]) charSequenceArray0);
      assertFalse(linkedHashSet0.contains(""));
      assertEquals(9, charSequenceArray0.length);
      assertEquals(9, objectArray0.length);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertSame(charSequenceArray0, objectArray0);
      assertNotNull(objectArray0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(""));
      assertFalse(hashSet0.contains((-197)));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      String string4 = StringUtils.join((Iterable<?>) hashSet0, "ch");
      assertFalse(linkedHashSet0.contains(string4));
      assertFalse(hashSet0.contains((-197)));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.substringBetween(" has no clone method", "& ?1O\"eN!*Q;p^eQU");
      assertNull(string5);
      
      byte[] byteArray0 = new byte[0];
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      String string6 = StringUtils.toEncodedString(byteArray0, charset0);
      assertEquals(0, byteArray0.length);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string4));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      String string0 = StringUtils.rightPad("CS^F}:}#8ORP\u0000Q_Pw9", (-2970));
      assertEquals("CS^F}:}#8ORP\u0000Q_Pw9", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("CS^F}:}#8ORP\u0000Q_Pw9");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.substringsBetween("CS^F}:}#8ORP\u0000Q_Pw9", (String) null, ".~<={>cmpo5uH0jpk");
      assertNull(stringArray0);
      
      int int0 = StringUtils.length((CharSequence) null);
      assertEquals(0, int0);
      
      String string1 = StringUtils.right("253953-91", 3759);
      assertEquals("253953-91", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToEmpty("CONx+bI\"43p8Z'-J7");
      assertEquals("CONx+bI\"43p8Z'-J7", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.countMatches((CharSequence) "CS^F}:}#8ORP\u0000Q_Pw9", 'R');
      assertEquals(1, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("aRK.dlw8", 'A');
      assertEquals("AaRK.dlw8A", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "AaRK.dlw8A";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBetween((String) null, (String) null, "aRK.dlw8");
      assertNull(string1);
      
      String string2 = StringUtils.stripAccents("JD6@CXAkI~|");
      assertEquals("JD6@CXAkI~|", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      String string3 = StringUtils.join(booleanArray0, 'l');
      assertEquals(2, booleanArray0.length);
      assertEquals("trueltrue", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.substringsBetween("Lo", "h$?", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      String string0 = "X&_C@s<Dhz)7Nh;";
      String string1 = StringUtils.trim("X&_C@s<Dhz)7Nh;");
      assertEquals("X&_C@s<Dhz)7Nh;", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "X&_C@s<Dhz)7Nh;";
      String string2 = StringUtils.repeat("X&_C@s<Dhz)7Nh;", "X&_C@s<Dhz)7Nh;", (-579));
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.substringsBetween("lb", "lb", ".");
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll("X&_C@s<Dhz)7Nh;", "X&_C@s<Dhz)7Nh;");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 9
         // X&_C@s<Dhz)7Nh;
         //          ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      String string0 = StringUtils.remove("HdiHZg4^i_3A4W", "R]BM<fa]xy");
      assertEquals("HdiHZg4^i_3A4W", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '6';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "R]BM<fa]xy", charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'6'}, charArray0);
      
      String string1 = StringUtils.removeEndIgnoreCase("HdiHZg4^i_3A4W", (String) null);
      assertEquals("HdiHZg4^i_3A4W", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "HdiHZg4^i_3A4W", (CharSequence) "HdiHZg4^i_3A4W");
      assertEquals(0, int0);
      
      String string2 = StringUtils.leftPad("HdiHZg4^i_3A4W", (-542), "Cloneable type ");
      assertEquals("HdiHZg4^i_3A4W", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("(r:q+Ws");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.isAlpha("Cloneable type ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.leftPad("HdiHZg4^i_3A4W", (-159));
      assertEquals("HdiHZg4^i_3A4W", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean2 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      LinkedHashSet<Locale.LanguageRange> linkedHashSet0 = new LinkedHashSet<Locale.LanguageRange>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "~", (CharSequence) "~");
      assertEquals("~", charSequence0);
      assertNotNull(charSequence0);
      
      String[] stringArray0 = StringUtils.substringsBetween("~", "O7fG@ty~j+jq|!W]R", "O7fG@ty~j+jq|!W]R");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.uncapitalize((String) null);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.split((String) null, "0pD");
      assertNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "((`/OVYyEzS_+<");
      assertTrue(boolean0);
      
      String string2 = StringUtils.strip("((`/OVYyEzS_+<");
      assertEquals("((`/OVYyEzS_+<", string2);
      assertNotNull(string2);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      String string3 = StringUtils.upperCase((String) null, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "((`/OVYyEzS_+<", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      String string0 = StringUtils.getDigits("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart("", "]");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("Aborting to protect against StackOverflowError - output of one loop is the input of another", 2770, 'C');
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      long[] longArray0 = new long[7];
      longArray0[0] = (-576L);
      longArray0[1] = (long) 'Q';
      longArray0[2] = 0L;
      longArray0[3] = 35L;
      longArray0[4] = (long) 'Q';
      longArray0[5] = 1556L;
      longArray0[6] = (long) 'p';
      String string0 = StringUtils.join(longArray0, 'C', 0, 0);
      assertEquals(7, longArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new long[] {(-576L), 81L, 0L, 35L, 81L, 1556L, 112L}, longArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("", " vs ", 0, 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("Strings must not be null", 160, 3908);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("jZFcC,A:&V6Z\"#", "**=J!23#W&6");
      assertEquals("jZFcC,A:&V6Z\"#", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.trimToNull("Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsWhitespace("jZFcC,A:&V6Z\"#");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.substringBefore("  ", "  ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.right("Search and Replace array lengths don't match: ", 122);
      assertEquals("Search and Replace array lengths don't match: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      String string0 = StringUtils.repeat("", 19);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBefore("(r:q+Ws(r:q+Ws", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb");
      assertEquals("yoU4kcwT-4WvSGM!Rb", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[1] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[2] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[3] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[4] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[5] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[6] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[7] = (Object) "yoU4kcwT-4WvSGM!Rb";
      String string1 = StringUtils.join(objectArray0, 'j', 0, 0);
      assertEquals(8, objectArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("yoU4kcwT-4WvSGM!Rb", "The character ");
      assertEquals("yoU4kcwT-4WvSGM!Rb", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNotNull(hashMap0);
      
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.mapEquivalents(vector0, hashMap0);
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = StringUtils.join((Iterable<?>) list0, 'Y');
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width is %d", 3);
      assertEquals("imum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("imum abbreviation width is %d", "Minimum abbreviation width is %d", 3);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("imum abbreviation width is %d", "", 3);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringBeforeLast("", "Minimum abbreviation width is %d");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.substring("Minimum abbreviation width is %d", 3, 3);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.length("");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", '^');
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 3;
      longArray0[1] = (long) 0;
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '^', 0, 322);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>(587);
      assertFalse(vector0.contains(587));
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(587, vector0.capacity());
      assertNotNull(vector0);
      
      String string0 = StringUtils.join((Iterable<?>) vector0, "");
      assertFalse(vector0.contains(""));
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(587, vector0.capacity());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = vector0.add((Object) "/hJPac1P#bINR8iMmb");
      assertTrue(vector0.contains("/hJPac1P#bINR8iMmb"));
      assertFalse(vector0.contains(""));
      assertEquals(587, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[/hJPac1P#bINR8iMmb]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) vector0;
      objectArray0[1] = (Object) vector0;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      vector0.replaceAll(unaryOperator0);
      assertTrue(vector0.contains("/hJPac1P#bINR8iMmb"));
      assertFalse(vector0.contains(""));
      assertEquals(587, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[/hJPac1P#bINR8iMmb]", vector0.toString());
      assertFalse(vector0.isEmpty());
      
      objectArray0[2] = (Object) vector0;
      Object[] objectArray1 = vector0.toArray(objectArray0);
      assertTrue(vector0.contains("/hJPac1P#bINR8iMmb"));
      assertFalse(vector0.contains(""));
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertEquals(587, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[/hJPac1P#bINR8iMmb]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      String[] stringArray0 = StringUtils.split("", '4');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.reverse("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 35L;
      longArray0[1] = (long) (-1);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '4', (-1), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      String string0 = StringUtils.rotate("Jm*`5{Mn.", 57);
      assertEquals("Mn.Jm*`5{", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("Jm*`5{Mn.", 160);
      assertEquals("Jm*`5{Mn.", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Mn.Jm*`5{", (CharSequence) "Jm*`5{Mn.", 0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.trim("p>#67,}@lxBWR9v+(}");
      assertEquals("p>#67,}@lxBWR9v+(}", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("", "(r:q+Ws", (-234));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "p>#67,}@lxBWR9v+(}", (CharSequence) "Jm*`5{Mn.");
      assertEquals("p>#67,}@lxBWR9v+(}", charSequence0);
      assertFalse(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string1));
      assertNotNull(charSequence0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "p>#67,}@lxBWR9v+(}", (CharSequence) "Jm*`5{Mn.");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "~", (CharSequence) "~");
      assertTrue(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("o90qqb\"'l,");
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {111, 57, 48, 113, 113, 98, 34, 39, 108, 44}, intArray0);
      assertNotNull(intArray0);
      
      boolean boolean1 = StringUtils.isWhitespace("~");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.normalizeSpace(" has no clone method");
      assertEquals("has no clone method", string0);
      assertNotNull(string0);
      
      boolean boolean2 = StringUtils.isAlpha("~");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = StringUtils.swapCase(" has no clone method");
      assertEquals(" HAS NO CLONE METHOD", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) " has no clone method", (CharSequence) "Array element ");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.leftPad("~", 748, "");
      assertEquals~", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence~";
      String string1 = StringUtils.strip~");
      assertEquals("P7 K$-@[_ Q", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "P7 K$-@[_ Q";
      String string2 = StringUtils.trimToEmpty("P7 K$-@[_ Q");
      assertEquals("P7 K$-@[_ Q", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "P7 K$-@[_ Q";
      String string3 = StringUtils.leftPad("P7 K$-@[_ Q", 0);
      assertEquals("P7 K$-@[_ Q", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "P7 K$-@[_ Q";
      String string4 = StringUtils.wrapIfMissing("", 'a');
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "\n");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.normalizeSpace("P7 K$-@[_ Q");
      assertEquals("P7 K$-@[_ Q", string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width is %d", 3);
      assertEquals("imum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("imum abbreviation width is %d", "Minimum abbreviation width is %d", 3);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("imum abbreviation width is %d", "", 3);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringBeforeLast("", "Minimum abbreviation width is %d");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.substring("Minimum abbreviation width is %d", 3, 3);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.length("");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", '^');
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("imum abbreviation width is %d", "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", '^');
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.replaceOnceIgnoreCase("X&_C@s<Dhz)7Nh;", "null/empty items", "e @vcaP\f%dq0V");
      assertEquals("X&_C@s<Dhz)7Nh;", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("#A6ELG$k3");
      assertEquals("#A6ELG$k3", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("null/empty items", 0, ':');
      assertEquals("null/empty items", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("null/empty items", "Strings must not be null", 0, 0);
      assertEquals("Strings must not be nullnull/empty items", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("X&_C@s<Dhz)7Nh;XvV#V!V`@2,s1");
      assertEquals("X&_C@s<Dhz)7Nh;XvV#V!V`@2,s1", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAllLowerCase((CharSequence) null);
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "X&_C@s<Dhz)7Nh;XvV#V!V`@2,s1";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "H/:?y]w_,w9C";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "X&_C@s<Dhz)7Nh;XvV#V!V`@2,s1";
      objectArray0[5] = (Object) "e @vcaP\f%dq0V";
      objectArray0[6] = (Object) "null/empty items";
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[7] = object1;
      String string5 = StringUtils.joinWith("5l}", objectArray0);
      assertEquals(8, objectArray0.length);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.center("_}`?0X", 721, "#A6ELG$k3");
      assertEquals("#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG_}`?0X#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$k3#A6ELG$", string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      String string0 = StringUtils.truncate("", 1417);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      String string1 = StringUtils.substringBetween("]<-aX1wSXl^]h;~x", "JD6@CXAkI~|", "AsBl~s=b");
      assertNull(string1);
      
      String string2 = StringUtils.stripAccents("(r:q+Ws6");
      assertEquals("(r:q+Ws6", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean[] booleanArray0 = new boolean[0];
      String string3 = StringUtils.join(booleanArray0, 'l');
      assertEquals(0, booleanArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(string3);
      
      String string4 = StringUtils.join(booleanArray0, 'l', 1417, 1417);
      assertEquals(0, booleanArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "-$^7", (-1), (-1));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      String string0 = StringUtils.appendIfMissing(",.q9G'-IEL>Ecxgvih", "-$^7", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(",.q9G'-IEL>Ecxgvih-$^7", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("hI>9o:8`m?bsATJ(r:q+Ws6", (-1), (String) null);
      assertEquals("hI>9o:8`m?bsATJ(r:q+Ws6", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "...";
      stringArray0[1] = "Go";
      stringArray0[2] = "6";
      String[] stringArray1 = new String[10];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "The type must not be null";
      String string0 = StringUtils.rightPad((String) null, 846, "+");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Go");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>(587);
      assertFalse(vector0.contains(587));
      assertEquals(0, vector0.size());
      assertEquals(587, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string0 = StringUtils.join((Iterable<?>) vector0, "");
      assertFalse(vector0.contains(""));
      assertEquals(0, vector0.size());
      assertEquals(587, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = vector0.add((Object) "/hJPac1P#bINR8iMmb");
      assertTrue(vector0.contains("/hJPac1P#bINR8iMmb"));
      assertFalse(vector0.contains(""));
      assertEquals("[/hJPac1P#bINR8iMmb]", vector0.toString());
      assertEquals(587, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) vector0;
      objectArray0[1] = (Object) vector0;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      objectArray0[2] = (Object) vector0;
      Object[] objectArray1 = vector0.toArray(objectArray0);
      assertTrue(vector0.contains("/hJPac1P#bINR8iMmb"));
      assertFalse(vector0.contains(""));
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertEquals("[/hJPac1P#bINR8iMmb]", vector0.toString());
      assertEquals(587, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      String[] stringArray0 = StringUtils.split("", '4');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray1 = StringUtils.split("{");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.reverse("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      String string2 = StringUtils.removeEnd("", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isNumeric("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.repeat('v', 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.wrapIfMissing("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      String string2 = StringUtils.join(booleanArray0, 'v');
      assertEquals(5, booleanArray0.length);
      assertEquals("falsevfalsevtruevfalsevfalse", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray0));
      assertNotNull(string2);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains(""));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      boolean boolean2 = arrayDeque0.add("The type must not be null");
      assertFalse(arrayDeque0.contains(""));
      assertTrue(arrayDeque0.contains("The type must not be null"));
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>();
      assertFalse(arrayDeque1.contains(""));
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotNull(arrayDeque1);
      
      String string3 = StringUtils.removeIgnoreCase(" ", "");
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean3 = arrayDeque0.retainAll(arrayDeque1);
      assertFalse(arrayDeque0.contains(""));
      assertFalse(arrayDeque1.contains(""));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      // Undeclared exception!
      try { 
        arrayDeque0.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The String must not be empty");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(11, stringArray0.length);
      assertEquals("The", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The String must not be empty", (CharSequence) "The");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfter((String) null, "{");
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize("{");
      assertEquals("{", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertEquals(11, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("{", "{");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "{");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.removeStart("pU8p9ob", (String) null);
      assertEquals("pU8p9ob", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "-$^7", (-1), (-1));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      String string0 = StringUtils.appendIfMissing(",.q9G'-IEL>Ecxgvih", "-$^7", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(",.q9G'-IEL>Ecxgvih-$^7", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) ",.q9G'-IEL>Ecxgvih-$^7", charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      String string0 = StringUtils.trimToNull("'U@%k,Fn|JnM~");
      assertEquals("'U@%k,Fn|JnM~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("'U@%k,Fn|JnM~", "'U@%k,Fn|JnM~");
      assertEquals("'U@%k,Fn|JnM~'U@%k,Fn|JnM~'U@%k,Fn|JnM~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("'U@%k,Fn|JnM~'U@%k,Fn|JnM~'U@%k,Fn|JnM~");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "'U@%k,Fn|JnM~'U@%k,Fn|JnM~'U@%k,Fn|JnM~", "'U@%k,Fn|JnM~");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.toRootLowerCase("'U@%k,Fn|JnM~");
      assertEquals("'u@%k,fn|jnm~", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphaSpace("'U@%k,Fn|JnM~");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string3 = StringUtils.replaceOnce("\r", "\r", "'U@%k,Fn|JnM~");
      assertEquals("'U@%k,Fn|JnM~", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing((String) null, 'z');
      assertNull(string4);
      
      boolean boolean3 = StringUtils.isMixedCase("\r");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      String string5 = StringUtils.appendIfMissing("Minimum abbreviation width with offset is %d", "'U@%k,Fn|JnM~", (CharSequence[]) null);
      assertEquals("Minimum abbreviation width with offset is %d'U@%k,Fn|JnM~", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      int int0 = StringUtils.countMatches((CharSequence) "Minimum abbreviation width with offset is %d'U@%k,Fn|JnM~", 'z');
      assertEquals(0, int0);
      
      boolean boolean4 = StringUtils.isAlphanumericSpace("'U@%k,Fn|JnM~");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      
      boolean boolean5 = StringUtils.containsOnly((CharSequence) null, "6(r:q+Ws");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      assertEquals(0, int0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((Object) null);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      Spliterator<Object> spliterator0 = hashSet0.spliterator();
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertNotNull(spliterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      hashSet0.forEach(consumer0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      boolean boolean1 = hashSet0.add((Object) null);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.join((Iterable<?>) hashSet0, (String) null);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "", 0, 0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      boolean boolean2 = hashSet0.add(charBuffer0);
      assertFalse(hashSet0.contains(0));
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.isReadOnly());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = hashSet0.add((Object) null);
      assertFalse(hashSet0.contains(0));
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      String string2 = StringUtils.chop((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.lowerCase((String) null);
      assertNull(string3);
      
      boolean boolean4 = StringUtils.contains((CharSequence) null, (CharSequence) "");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      
      String string4 = StringUtils.replace((String) null, "", "");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, '/');
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.toRootUpperCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast("Supplied value must be a valid byte literal between -128 and 127: [", (int) '/');
      assertEquals("", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", (String) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.chomp("Supplied value must be a valid byte literal between -128 and 127: [", "");
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      assertEquals(0, int0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((Object) null);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      Spliterator<Object> spliterator0 = hashSet0.spliterator();
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertNotNull(spliterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      hashSet0.forEach(consumer0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      boolean boolean1 = hashSet0.add((Object) null);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.join((Iterable<?>) hashSet0, "org.apache.commons.lang3.StringUtils");
      assertFalse(hashSet0.contains("org.apache.commons.lang3.StringUtils"));
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("org.apache.commons.lang3.StringUtils");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      boolean boolean2 = hashSet0.add(charBuffer0);
      assertFalse(hashSet0.contains("org.apache.commons.lang3.StringUtils"));
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = hashSet0.add((Object) null);
      assertFalse(hashSet0.contains("org.apache.commons.lang3.StringUtils"));
      assertFalse(hashSet0.isEmpty());
      assertEquals(2, hashSet0.size());
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      String string2 = StringUtils.substringAfterLast("", 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.lowerCase((String) null);
      assertNull(string3);
      
      boolean boolean4 = StringUtils.contains((CharSequence) null, (CharSequence) "");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      
      String string4 = StringUtils.replace((String) null, "", "");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      String string0 = StringUtils.leftPad("b>^o3pp}is", 3900);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("", Integer.MAX_VALUE);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "", '5');
      assertEquals(0, int0);
      
      String string2 = StringUtils.substring("", 3900);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      String string0 = StringUtils.chop("O7fG@ty~j+jq|!W]R");
      assertEquals("O7fG@ty~j+jq|!W]", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "O7fG@ty~j+jq|!W]";
      objectArray0[1] = (Object) "O7fG@ty~j+jq|!W]";
      objectArray0[2] = (Object) "O7fG@ty~j+jq|!W]";
      objectArray0[3] = (Object) "O7fG@ty~j+jq|!W]";
      String string1 = StringUtils.join(objectArray0, 'k');
      assertEquals(4, objectArray0.length);
      assertEquals("O7fG@ty~j+jq|!W]kO7fG@ty~j+jq|!W]kO7fG@ty~j+jq|!W]kO7fG@ty~j+jq|!W]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "O7fG@ty~j+jq|!W]kO7fG@ty~j+jq|!W]kO7fG@ty~j+jq|!W]kO7fG@ty~j+jq|!W]", 2066, 0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.reverseDelimited(";|gW)q", 'k');
      assertEquals(";|gW)q", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("RBOq>1vzAG)pX", 20);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) ";|gW)q", (CharSequence) "O7fG@ty~j+jq|!W]");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1252.8293105573143);
      doubleArray0[1] = (-239.26);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      String string0 = StringUtils.join(doubleArray0, 'M');
      assertEquals(4, doubleArray0.length);
      assertEquals("-1252.8293105573143M-239.26M0.0M-1.0", string0);
      assertArrayEquals(new double[] {(-1252.8293105573143), (-239.26), 0.0, (-1.0)}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllUpperCase("-1252.8293105573143M-239.26M0.0M-1.0");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripStart("2:?/E", "2:?/E");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.EMPTY;
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.endsWith("2:?/E", "");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      String string0 = StringUtils.getDigits("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("Aborting to protect against StackOverflowError - output of one loop is the input of another", (int) 'C', 'C');
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Array and element cannot both be null", "lb");
      assertEquals("Array and element cannot both be null", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string1 = StringUtils.wrap("lb", "g7:[=> 3`B: 8c");
      assertEquals("g7:[=> 3`B: 8clbg7:[=> 3`B: 8c", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[0] = (CharSequence) "g7:[=> 3`B: 8clbg7:[=> 3`B: 8c";
      charSequenceArray0[1] = (CharSequence) "Array and element cannot both be null";
      charSequenceArray0[2] = (CharSequence) "0.VSeqw(V:!3p6/m1c?";
      charSequenceArray0[3] = (CharSequence) "Array and element cannot both be null";
      charSequenceArray0[4] = (CharSequence) "0.VSeqw(V:!3p6/m1c?";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.trimToEmpty("lb");
      assertEquals("lb", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = ';';
      charArray0[1] = 'b';
      charArray0[2] = ';';
      charArray0[3] = ';';
      charArray0[4] = ';';
      charArray0[5] = ';';
      boolean boolean1 = StringUtils.containsAny(charSequenceArray0[2], charArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(6, charArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {';', 'b', ';', ';', ';', ';'}, charArray0);
      
      String string3 = StringUtils.substringBetween("<~", "<~", "g7:[=> 3`B: 8clbg7:[=> 3`B: 8c");
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = StringUtils.isWhitespace(charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringBetween("clone", "The String must not be empty", "]eE]_(z#");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      String string0 = StringUtils.getDigits((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase((CharSequence) null, "");
      assertFalse(boolean0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "{}", (CharSequence) "{}", 0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[1];
      String string1 = StringUtils.appendIfMissingIgnoreCase("", (CharSequence) null, charBufferArray0);
      assertEquals(1, charBufferArray0.length);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("Rr]SK~Sg%gB", "Rr]SK~Sg%gB");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("Rr]SK~Sg%gB", "{}");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.center("Rr]SK~Sg%gB", 0, 't');
      assertEquals("Rr]SK~Sg%gB", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeEnd((String) null, "Rr]SK~Sg%gB");
      assertNull(string4);
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) "Rr]SK~Sg%gB";
      objectArray0[1] = (Object) "";
      String string5 = StringUtils.join(objectArray0, (String) null, 2, 0);
      assertEquals(2, objectArray0.length);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      String string0 = "Q*}[:~\\uk7PoA";
      String string1 = StringUtils.center(string0, 24, '2');
      assertEquals("22222Q*}[:~\\uk7PoA222222", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.wrap(string0, '2');
      assertEquals("2Q*}[:~\\uk7PoA2", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      String string0 = StringUtils.rightPad((String) null, (-478897636), '\'');
      assertNull(string0);
      
      String string1 = StringUtils.substringBefore("--------------------------------", (-478897636));
      assertEquals("--------------------------------", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.repeat('k', 64);
      assertEquals("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNotBlank("--------------------------------");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-492.617425835);
      doubleArray0[1] = 837.898;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3696.150955216);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 100.0;
      String string0 = StringUtils.join(doubleArray0, 'I');
      assertEquals(9, doubleArray0.length);
      assertEquals("-492.617425835I837.898I1.0I0.0I-3696.150955216I0.0I100.0I0.0I0.0", string0);
      assertArrayEquals(new double[] {(-492.617425835), 837.898, 1.0, 0.0, (-3696.150955216), 0.0, 100.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "-492.617425835I837.898I1.0I0.0I-3696.150955216I0.0I100.0I0.0I0.0", (CharSequence) "-492.617425835I837.898I1.0I0.0I-3696.150955216I0.0I100.0I0.0I0.0", 7);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("-492.617425835I837.898I1.0I0.0I-3696.150955216I0.0I100.0I0.0I0.0", "-492.617425835I837.898I1.0I0.0I-3696.150955216I0.0I100.0I0.0I0.0", "p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("Z@|2 8 +J");
      assertEquals("z@|2 8 +j", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("", 'I');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.deleteWhitespace("p{InCombiningDiacriticalMarks}+");
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAlpha("Z@|2 8 +J");
      assertFalse(boolean0);
      
      String string5 = StringUtils.trim("xL{yEbJyT-!~vNf[j&");
      assertEquals("xL{yEbJyT-!~vNf[j&", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.overlay("", "Z@|2 8 +J", 7, (-1332));
      assertEquals("Z@|2 8 +J", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertNotNull(string6);
      
      String string7 = StringUtils.wrapIfMissing("{", 'I');
      assertEquals("I{I", string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertNotNull(string7);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("p{InCombiningDiacriticalMarks}+", (-1332));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.leftPad("b>^o3pp}is", 3900);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = "b>^o3pp}is";
      stringArray0[4] = "W3IdC1QDO";
      stringArray0[6] = string0;
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("b>^o3pp}is", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.join((boolean[]) null, '~', 10, 3900);
      assertNull(string2);
      
      String string3 = StringUtils.left("W3IdC1QDO", (-2097));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate0.and(predicate0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate0.or(predicate0);
      assertNotSame(predicate3, predicate1);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate3, predicate1);
      assertNotSame(predicate3, predicate4);
      assertNotSame(predicate4, predicate3);
      assertNotSame(predicate4, predicate1);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertNotNull(predicate4);
      
      String string0 = StringUtils.left("0o=<7JhwXUjcIJXMZ\u0005NiK18VOU", 16);
      assertEquals("0o=<7JhwXUjcIJXM", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripToNull(" v ");
      assertEquals("v", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("v");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "-$^7");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate2.negate();
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate4, predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate2));
      assertNotNull(predicate4);
      
      boolean boolean0 = linkedList0.removeIf(predicate3);
      assertFalse(linkedList0.contains("-$^7"));
      assertEquals(0, linkedList0.size());
      assertNotSame(predicate2, predicate4);
      assertFalse(boolean0);
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      
      String string0 = StringUtils.join((List<?>) linkedList0, "-$^7", 0, 0);
      assertFalse(linkedList0.contains("-$^7"));
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      Predicate<Object> predicate5 = predicate1.negate();
      assertNotSame(predicate5, predicate3);
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate4));
      assertNotNull(predicate5);
      
      String string1 = StringUtils.join(booleanArray0, ':', 0, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals("", string1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertNotNull(string1);
      
      String string2 = StringUtils.left("", 0);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      String string0 = "]02B8s";
      String string1 = StringUtils.replacePattern("]02B8s", "]02B8s", "{}");
      assertEquals("{}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "{}", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("{}", "]02B8s");
      assertFalse(boolean0);
      
      int int1 = 0;
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "{}", (CharSequence) "{}", 0);
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("]02B8s", (String) null, 3915);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[1];
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(2358);
      assertEquals(2358, charBuffer1.length());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasArray());
      assertEquals(2358, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(2358, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(2358, charBuffer1.remaining());
      assertFalse(charBuffer1.isReadOnly());
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      CharBuffer charBuffer2 = CharBuffer.allocate(3915);
      assertTrue(charBuffer2.hasArray());
      assertEquals(3915, charBuffer2.limit());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals(0, charBuffer2.position());
      assertEquals(3915, charBuffer2.remaining());
      assertFalse(charBuffer2.isDirect());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(3915, charBuffer2.length());
      assertEquals(0, charBuffer2.arrayOffset());
      assertEquals(3915, charBuffer2.capacity());
      assertNotSame(charBuffer2, charBuffer1);
      assertNotSame(charBuffer2, charBuffer0);
      assertFalse(charBuffer2.equals((Object)charBuffer1));
      assertFalse(charBuffer2.equals((Object)charBuffer0));
      assertNotNull(charBuffer2);
      
      int int3 = (-1854);
      // Undeclared exception!
      try { 
        charBuffer0.append((CharSequence) charBuffer1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Minimum abbreviation width with offset is %d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      String string0 = StringUtils.center("Uvl9%1B", (-704), ',');
      assertEquals("Uvl9%1B", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("1j^14YPT!/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "IoXF");
      assertFalse(treeSet0.contains("IoXF"));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.mid("(V*rn(^", 3, (-2970));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphanumeric("q$&");
      assertFalse(boolean0);
      
      String string3 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", (-1952), 10);
      assertEquals("Minimum...", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string1 = StringUtils.getIfBlank((String) null, supplier0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      try { 
        StringUtils.getBytes("", "Threshold must not be negative");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.defaultString("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = "";
      int int0 = 0;
      String[] stringArray0 = StringUtils.split("", "", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Stream<Locale.LanguageRange> stream0 = vector0.parallelStream();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(stream0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains(""));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean1 = arrayList0.add("");
      assertTrue(arrayList0.contains(""));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean2 = arrayList0.retainAll(vector0);
      assertFalse(arrayList0.contains(""));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string3 = "5*k~NsY/!";
      arrayList0.forEach(consumer0);
      assertFalse(arrayList0.contains(""));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("e", string0);
      assertArrayEquals(new char[] {'e'}, charArray0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[18];
      charSequenceArray0[0] = (CharSequence) "e";
      String string1 = StringUtils.replaceChars("e", 's', 'e');
      assertEquals("e", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "e";
      charSequenceArray0[2] = (CharSequence) "e";
      charSequenceArray0[3] = (CharSequence) "~";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(18, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "e";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals("e", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.rightPad("XvV#V!V`@2,s1", 49, 's');
      assertEquals("XvV#V!V`@2,s1ssssssssssssssssssssssssssssssssssss", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.center((String) null, 3, 'e');
      assertNull(string4);
      
      String string5 = StringUtils.difference("e", (String) null);
      assertEquals("e", string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertNotNull(string5);
      
      boolean boolean1 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width is %d", 3);
      assertEquals("imum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("imum abbreviation width is %d", "Minimum abbreviation width is %d", 3);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("imum abbreviation width is %d", "", 3);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringBeforeLast("", "Minimum abbreviation width is %d");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.substring("Minimum abbreviation width is %d", 3, 3);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.length("");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.chomp("", "");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.repeat('[', 1924);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 1924);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean1 = StringUtils.containsWhitespace("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.substring((String) null, (-2739), 1924);
      assertNull(string5);
      
      String string6 = StringUtils.substringAfterLast("", "Threshold must not be negative");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertNotNull(string6);
      
      boolean boolean2 = StringUtils.isAlpha("");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertFalse(arrayList0.contains(3));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertFalse(stack0.contains(3));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      boolean boolean3 = arrayList0.addAll((Collection<? extends Integer>) stack0);
      assertFalse(arrayList0.contains(3));
      assertFalse(stack0.contains(3));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string7 = StringUtils.join((List<?>) arrayList0, "G", 0, 0);
      assertFalse(arrayList0.contains(0));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals("", string7);
      assertTrue(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string6));
      assertNotNull(string7);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string8 = StringUtils.upperCase("", locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", string8);
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string1));
      assertNotNull(string8);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string9 = StringUtils.mid("G", 0, (-1));
      assertEquals("", string9);
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertTrue(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string6));
      assertNotNull(string9);
      
      boolean boolean4 = StringUtils.equalsIgnoreCase("Minimum abbreviation width is %d", "");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      
      String string10 = StringUtils.difference("", "");
      assertEquals("", string10);
      assertTrue(string10.equals((Object)string8));
      assertTrue(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string4));
      assertNotNull(string10);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.normalizeSpace("Le=8LM2");
      assertEquals("Le=8LM2", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase((String) null);
      assertNull(string1);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[0], charSequenceArray0[1]);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.leftPad("~", 748, "");
      assertEquals~", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence~";
      String string1 = StringUtils.strip~");
      assertEquals("P7 K$-@[_ Q", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "P7 K$-@[_ Q";
      String string2 = StringUtils.trimToEmpty("P7 K$-@[_ Q");
      assertEquals("P7 K$-@[_ Q", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      charSequenceArray0[2] = (CharSequence) "P7 K$-@[_ Q";
      String string3 = StringUtils.leftPad("P7 K$-@[_ Q", 0);
      assertEquals("P7 K$-@[_ Q", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "P7 K$-@[_ Q";
      String string4 = StringUtils.wrapIfMissing("", 'a');
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "\n");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-4309));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[2] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      String string1 = StringUtils.joinWith("", objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The String must not be empty");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.defaultString("(r:q+Ws(r:q+Ws", "The String must not be empty");
      assertEquals("(r:q+Ws(r:q+Ws", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("The String must not be empty", "(r:q+Ws(r:q+Ws", true);
      assertEquals(44, int0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      int int1 = StringUtils.getFuzzyDistance("(r:q+Ws(r:q+Ws", "(r:q+Ws(r:q+Ws", locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(40, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      String string0 = StringUtils.mid("1j^14YPT!/", Integer.MIN_VALUE, (-2093));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)45;
      shortArray0[1] = (short)0;
      String string1 = StringUtils.lowerCase("', has a length less than 2");
      assertEquals("', has a length less than 2", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToEmpty("aRK.dlw8");
      assertEquals("aRK.dlw8", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.stripStart("#", (String) null);
      assertEquals("#", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.JAPANESE;
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string4 = locale1.getDisplayScript();
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertEquals("", string4);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      
      String string5 = locale0.getDisplayVariant(locale1);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("ja", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string5);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      Locale locale2 = locale0.stripExtensions();
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("TWN", locale2.getISO3Country());
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertNotSame(locale2, locale1);
      assertSame(locale2, locale0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
      assertNotNull(locale2);
      
      int int0 = StringUtils.getFuzzyDistance("#", "aRK.dlw8", locale2);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zho", locale2.getISO3Language());
      assertEquals("TW", locale2.getCountry());
      assertEquals("zh_TW", locale2.toString());
      assertEquals("zh", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("TWN", locale2.getISO3Country());
      assertNotSame(locale0, locale1);
      assertSame(locale0, locale2);
      assertNotSame(locale2, locale1);
      assertSame(locale2, locale0);
      assertEquals(0, int0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale1));
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "~", (CharSequence) "");
      assertEquals("~", charSequence0);
      assertNotNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "~";
      String string0 = StringUtils.appendIfMissingIgnoreCase("", "~", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("", string0);
      assertFalse(string0.equals((Object)charSequence0));
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("JXMZ\u0005NiK18VOU", "0o=<7JhwXUjcI");
      assertEquals("JXMZ\u0005NiK18VOU", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "JXMZ\u0005NiK18VOU");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "jZFcC,A:&V6Z\"#]by\"", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split("3l|=6", "JXMZ\u0005NiK18VOU");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The String must not be empty");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("WL(Q-:{^O", 'h');
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.endsWithAny("WL(Q-:{^O", stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertTrue(boolean0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.abbreviate("WL(Q-:{^O", 3597, 3597);
      assertEquals("WL(Q-:{^O", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("The String must not be empty", "The String must not be empty", true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      String string0 = StringUtils.rightPad("'BT%", 238);
      assertEquals("'BT%                                                                                                                                                                                                                                          ", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.LF;
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chop("'BT%                                                                                                                                                                                                                                          ");
      assertEquals("'BT%                                                                                                                                                                                                                                         ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.CHINESE;
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh", locale1.toString());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      int int0 = StringUtils.getFuzzyDistance("", "", locale1);
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("zh", locale1.toString());
      assertNotSame(locale1, locale0);
      assertEquals(0, int0);
      assertFalse(locale1.equals((Object)locale0));
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      String string0 = StringUtils.removeStart("~", "~");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceFirst("%!+IjZFcC,A:&V6Z\"#EdK4XEH*~67", "~", "Array and element cannot both be nulllb");
      assertEquals("%!+IjZFcC,A:&V6Z\"#EdK4XEH*Array and element cannot both be nulllb67", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.capitalize("");
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      String string0 = StringUtils.rightPad("~B?s", 0);
      assertEquals("~B?s", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Locale locale1 = (Locale)locale0.clone();
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale1.getCountry());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("TWN", locale1.getISO3Country());
      assertEquals("zh_TW", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertTrue(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotSame(locale0, locale1);
      assertFalse(boolean0);
      assertTrue(locale0.equals((Object)locale1));
      
      String string1 = locale0.getDisplayVariant();
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotSame(locale0, locale1);
      assertEquals("", string1);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale.setDefault(locale_Category0, locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotSame(locale0, locale1);
      assertTrue(locale0.equals((Object)locale1));
      
      int int0 = StringUtils.getFuzzyDistance("~B?s", "~B?s", locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotSame(locale0, locale1);
      assertEquals(10, int0);
      assertTrue(locale0.equals((Object)locale1));
      
      String string2 = StringUtils.upperCase("~B?s", locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotSame(locale0, locale1);
      assertEquals("~B?S", string2);
      assertTrue(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      PriorityQueue<Locale.LanguageRange> priorityQueue0 = new PriorityQueue<Locale.LanguageRange>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertFalse(linkedHashSet0.contains(locale0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedHashSet0);
      assertFalse(linkedHashSet0.contains(locale0));
      assertFalse(list0.contains(locale0));
      assertEquals(0, priorityQueue0.size());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase("~B?S", "~B?s");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Spliterator<Locale> spliterator0 = linkedHashSet0.spliterator();
      assertFalse(linkedHashSet0.contains(locale0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(spliterator0);
      
      String string3 = StringUtils.leftPad("", 0, 'b');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int1 = StringUtils.compareIgnoreCase("qG@<7EKH", "Arguments cannot both be null");
      assertEquals(30, int1);
      assertFalse(int1 == int0);
      
      boolean boolean2 = StringUtils.endsWith("~B?S", "qG@<7EKH");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.removeStart("qG@<7EKH", "qG@<7EKH");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) arrayList0;
      objectArray0[2] = (Object) "~B?s";
      objectArray0[3] = (Object) linkedHashSet0;
      objectArray0[4] = (Object) "Arguments cannot both be null";
      objectArray0[5] = (Object) "qG@<7EKH";
      objectArray0[6] = (Object) linkedHashSet0;
      String string5 = StringUtils.join(objectArray0);
      assertEquals(7, objectArray0.length);
      assertEquals("zh_TW[]~B?s[]Arguments cannot both be nullqG@<7EKH[]", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      
      String string6 = StringUtils.toRootUpperCase("");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("zmP", (String) null, (-727));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.replaceOnceIgnoreCase("X&_C@s<Dhz)7Nh;", "null/empty items", "e @vcaP\f%dq0V");
      assertEquals("X&_C@s<Dhz)7Nh;", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("e @vcaP\f%dq0V");
      assertEquals("e @vcaP\f%dq0V", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("null/empty items", 0, ':');
      assertEquals("null/empty items", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.trim("e @vcaP\f%dq0V");
      assertEquals("e @vcaP\f%dq0V", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.overlay("Strings must not be null", "X&_C@s<Dhz)7Nh;", 1114111, (-3362));
      assertEquals("X&_C@s<Dhz)7Nh;", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      String string5 = StringUtils.wrapIfMissing("offset cannot be negative", '=');
      assertEquals("=offset cannot be negative=", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.truncate("8?Wo@OK'?d(z(,ej", 1114111);
      assertEquals("8?Wo@OK'?d(z(,ej", string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      String string1 = StringUtils.joinWith(" vs ", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(" vs  vs  vs  vs  vs  vs  vs ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("_}`?0X", 57, "");
      assertEquals("                         _}`?0X                          ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string0 = StringUtils.normalizeSpace("Le=8LM2");
      assertEquals("Le=8LM2", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase((String) null);
      assertNull(string1);
      
      int int1 = StringUtils.indexOf(charSequenceArray0[0], charSequenceArray0[1]);
      assertEquals(4, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      String string0 = StringUtils.rightPad("-$^7", 2, ',');
      assertEquals("-$^7", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.overlay("-$^7", "Strings must not be null", (-1760), 2);
      assertEquals("Strings must not be null^7", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString("X&_C@s<Dhz)7Nh;XvV#V!V`@2,s1");
      assertEquals("X&_C@s<Dhz)7Nh;XvV#V!V`@2,s1", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAllLowerCase("X&_C@s<Dhz)7Nh;XvV#V!V`@2,s1");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "-$^7";
      objectArray0[1] = (Object) "-$^7";
      objectArray0[2] = object0;
      objectArray0[3] = (Object) "SkO+yK'Cl";
      String string3 = StringUtils.joinWith("SkO+yK'Cl", objectArray0);
      assertEquals(4, objectArray0.length);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "X&_C@s<Dhz)7Nh;XvV#V!V`@2,s1";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.containsWhitespace("SkO+yK'Cl");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[2] = Integer.MIN_VALUE;
      String string0 = StringUtils.center("{_", Integer.MIN_VALUE, "U,Z8z]6{/5!e@==K 0");
      assertEquals("{_", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.swapCase("{_");
      assertEquals("{_", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "`h=O~\"PS@zi", (CharSequence) "U,Z8z]6{/5!e@==K 0");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isWhitespace("{_");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.leftPad("~", 748, "");
      assertEquals~", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence~";
      String string1 = StringUtils.strip~");
      assertEquals("P7 K$-@[_ Q", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      charSequenceArray0[1] = (CharSequence) "P7 K$-@[_ Q";
      String string2 = StringUtils.trimToEmpty("P7 K$-@[_ Q");
      assertEquals("P7 K$-@[_ Q", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      charSequenceArray0[3] = (CharSequence) "P7 K$-@[_ Q";
      String string3 = StringUtils.leftPad("P7 K$-@[_ Q", 0);
      assertEquals("P7 K$-@[_ Q", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      charSequenceArray0[3] = (CharSequence) "P7 K$-@[_ Q";
      String string4 = StringUtils.wrapIfMissing("", 'a');
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      charSequenceArray0[4] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", "\n");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("", (-4309));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      String string0 = StringUtils.lowerCase("1noi-BZd4[M4{gw", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("1noi-bzd4[m4{gw", string0);
      assertNotNull(string0);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Vector<Locale> vector0 = new Vector<Locale>();
      assertFalse(vector0.contains(locale0));
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Locale locale1 = Locale.lookup(linkedList0, vector0);
      assertFalse(vector0.contains(locale0));
      assertEquals(0, linkedList0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNull(locale1);
      
      String string1 = locale0.getDisplayVariant((Locale) null);
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "1noi-bzd4[m4{gw", (CharSequence) "1noi-BZd4[M4{gw", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "1noi-BZd4[M4{gw", "1noi-bzd4[m4{gw");
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string2 = StringUtils.stripAccents((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.truncate((String) null, 7, 598);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)97;
      boolean boolean0 = StringUtils.containsNone((CharSequence) "JD6@CXAkI~|", "JD6@CXAkI~|");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("JD6@CXAkI~|");
      assertEquals(7, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      String string0 = StringUtils.center("W1Kf'[@l", 64, "D4hIcI");
      assertEquals("D4hIcID4hIcID4hIcID4hIcID4hIW1Kf'[@lD4hIcID4hIcID4hIcID4hIcID4hI", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("D4hIcID4hIcID4hIcID4hIcID4hIW1Kf'[@lD4hIcID4hIcID4hIcID4hIcID4hI");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("D4hIcI");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "a|2{wm2q}Z:>8MO5-";
      String string0 = StringUtils.toRootLowerCase("a|2{wm2q}Z:>8MO5-");
      assertEquals("a|2{wm2q}z:>8mo5-", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("a|2{wm2q}z:>8mo5-");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replaceIgnoreCase("Minimum abbreviation width with offset is %d", "', has a length less than 2", "P7 K$-@[_ Q", 64);
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray1 = new CharSequence[1];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      char[] charArray0 = new char[5];
      charArray0[0] = '8';
      charArray0[1] = '=';
      charArray0[2] = ']';
      charArray0[3] = ',';
      charArray0[4] = 'u';
      String string2 = StringUtils.join(charArray0, '1');
      assertEquals(5, charArray0.length);
      assertEquals("81=1]1,1u", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new char[] {'8', '=', ']', ',', 'u'}, charArray0);
      assertNotNull(string2);
      
      charSequenceArray1[0] = (CharSequence) "81=1]1,1u";
      int int0 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray1);
      assertEquals(1, charSequenceArray1.length);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals((-1), int0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      boolean boolean1 = StringUtils.isAllLowerCase("a|2{wm2q}Z:>8MO5-");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.lastIndexOfAny(charSequenceArray1[0], charSequenceArray1);
      assertEquals(1, charSequenceArray1.length);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string0 = StringUtils.overlay("^o*Mh+pT,C#tdY4@k!ko90qqb\"'l,", "^o*Mh+pT,C#tdY4@k!ko90qqb\"'l,", 63, 63);
      assertEquals("^o*Mh+pT,C#tdY4@k!ko90qqb\"'l,^o*Mh+pT,C#tdY4@k!ko90qqb\"'l,", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("", 76, 'k');
      assertEquals("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.overlay("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", "", 76, 0);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString("5l}");
      assertEquals("5l}", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAllLowerCase("5l}");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "5l}";
      String string5 = StringUtils.joinWith("H/:?y]w_,w9C", objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkH/:?y]w_,w9CH/:?y]w_,w9C5l}", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      
      String string6 = StringUtils.center("", 0, "maxWith cannot be negative");
      assertEquals("", string6);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertNotNull(string6);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk";
      charSequenceArray0[4] = (CharSequence) "H/:?y]w_,w9C";
      charSequenceArray0[5] = (CharSequence) "5l}";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripAccents("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.split("", "", 21);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Stream<Locale.LanguageRange> stream0 = vector0.parallelStream();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(stream0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains(""));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean1 = arrayList0.add("");
      assertTrue(arrayList0.contains(""));
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.left("", 21);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The StrWW %!+I");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("The", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The StrWW %!+I", (CharSequence) "The");
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat("The", "The StrWW %!+I", 0);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("a|AXx");
      assertEquals("a|AXx", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertEquals(8, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("a|AXx", "The");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.join((byte[]) null, 'P');
      assertNull(string3);
      
      String string4 = StringUtils.strip((String) null);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.isNumeric("The StrWW %!+I");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("^");
      assertEquals("^", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The String must not be empty");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(11, stringArray0.length);
      assertEquals("The", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The String must not be empty", (CharSequence) "The");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfter((String) null, "{");
      assertNull(string1);
      
      String string2 = StringUtils.uncapitalize("{");
      assertEquals("{", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      assertEquals(11, stringArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.split("{", "{");
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) null, "{");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "{", (CharSequence) "{");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The StrWW %!+I");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("The", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The StrWW %!+I", (CharSequence) "The");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("The StrWW %!+I", "The StrWW %!+I", "The");
      assertEquals("The", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("The");
      assertEquals("the", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray1 = StringUtils.split("the", "The");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "The", "The");
      assertFalse(boolean0);
      
      String string3 = StringUtils.strip("pU8p9ob");
      assertEquals("pU8p9ob", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "The", (CharSequence) "The");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(8, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(0, int2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("The");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isAlphanumeric("The StrWW %!+I");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("The", "The", 66);
      assertEquals(2, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      String string4 = StringUtils.rotate((String) null, 0);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "P7 K$-@[_ Q";
      String string0 = StringUtils.abbreviateMiddle("P7 K$-@[_ Q", "P7 K$-@[_ Q", 11);
      assertEquals("P7 K$-@[_ Q", string0);
      assertNotNull(string0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string1 = StringUtils.join((List<?>) linkedList0, "P7 K$-@[_ Q", 11, 11);
      assertEquals(0, linkedList0.size());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.center("P7 K$-@[_ Q", 111, 'h');
      assertEquals("hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhP7 K$-@[_ Qhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("P7 K$-@[_ Q", "P7 K$-@[_ Q", 111);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Object varargs must not be null", (String) null);
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Object varargs must not be null", "Object varargs must not be null", (-1563));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.defaultString("puvCx:@%P<zNpF1B^6");
      assertEquals("puvCx:@%P<zNpF1B^6", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAllEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[4];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "JD6@CXAkI~|", "JD6@CXAkI~|");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("JD6@CXAkI~|");
      assertEquals(7, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      String string0 = StringUtils.substring("gr%{", 3);
      assertEquals("{", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("{", "gr%{", 3);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "{", (CharSequence) "", (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) "{", (CharSequence) "^");
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      byte[] byteArray0 = new byte[1];
      String string1 = StringUtils.defaultString("gr%{");
      assertEquals("gr%{", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("JD6@CXAkI~|", "JD6@CXAkI~|", 664);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.countMatches((CharSequence) "JD6@CXAkI~|", (CharSequence) "JD6@CXAkI~|");
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte) (-127);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 't', (int) (byte)97, 321);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 97
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      String string0 = StringUtils.rightPad("le%|}w^;:_-)c1Z7", 16, '<');
      assertEquals("le%|}w^;:_-)c1Z7", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "le%|}w^;:_-)c1Z7";
      objectArray0[1] = (Object) "le%|}w^;:_-)c1Z7";
      objectArray0[2] = (Object) "le%|}w^;:_-)c1Z7";
      String string1 = StringUtils.joinWith("le%|}w^;:_-)c1Z7", objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals("le%|}w^;:_-)c1Z7le%|}w^;:_-)c1Z7le%|}w^;:_-)c1Z7le%|}w^;:_-)c1Z7le%|}w^;:_-)c1Z7", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "le%|}w^;:_-)c1Z7", charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string2 = StringUtils.defaultString((String) null, "sCR.JQ[mOHj]w");
      assertEquals("sCR.JQ[mOHj]w", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.normalizeSpace("Comparator should not be null.");
      assertEquals("Comparator should not be null.", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("ZF+e]h]uw(?,", "le%|}w^;:_-)c1Z7le%|}w^;:_-)c1Z7le%|}w^;:_-)c1Z7le%|}w^;:_-)c1Z7le%|}w^;:_-)c1Z7", (-1));
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "le%|}w^;:_-)c1Z7", (CharSequence) "sCR.JQ[mOHj]w", 258);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      String string0 = "";
      String string1 = "e'";
      String string2 = StringUtils.defaultString("", "e'");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = "";
      int int0 = 0;
      String[] stringArray0 = StringUtils.split("e'", "", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Stream<Locale.LanguageRange> stream0 = vector0.parallelStream();
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(stream0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertFalse(arrayList0.contains("e'"));
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean1 = arrayList0.add("e'");
      assertFalse(arrayList0.contains(string3));
      assertTrue(arrayList0.contains("e'"));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      boolean boolean2 = arrayList0.retainAll(vector0);
      assertFalse(arrayList0.contains("e'"));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string4 = "5*k~NsY/!";
      boolean boolean3 = arrayList0.add("5*k~NsY/!");
      assertFalse(arrayList0.contains("e'"));
      assertTrue(arrayList0.contains(string4));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      arrayList0.forEach(consumer0);
      assertFalse(arrayList0.contains("e'"));
      assertTrue(arrayList0.contains(string4));
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("", 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.defaultIfBlank("X&_C@s<Dhz)7Nh;", "X&_C@s<Dhz)7Nh;");
      assertEquals("X&_C@s<Dhz)7Nh;", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("X&_C@s<Dhz)7Nh;");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", (-307));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("", 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<Character> set0 = locale0.getExtensionKeys();
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Locale locale1 = Locale.FRANCE;
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) null);
      assertFalse(list0.contains(""));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string2 = locale0.getDisplayLanguage(locale1);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("anglais", string2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.lowerCase("", locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotSame(locale0, locale1);
      assertEquals("", string3);
      assertFalse(locale0.equals((Object)locale1));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllUpperCase("fJW!!tGD6=xQ;?)9");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      Integer integer0 = new Integer(10);
      assertEquals(10, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = StringUtils.normalizeSpace("Id~l@I)d{tVYm");
      assertEquals("Id~l@I)d{tVYm", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Id~l@I)d{tVYm", "inimum abbreviation width is %d", 121);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.abbreviate("inimum abbreviation width is %d", "Id~l@I)d{tVYm", 121, 3063);
      assertEquals("inimum abbreviation width is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[1] = (CharSequence) "";
      String string0 = StringUtils.difference(";B[\"mN&-IBA", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains(""));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) ";B[\"mN&-IBA");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", " has no clone method");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.join((Iterable<?>) vector0, "");
      assertFalse(vector0.contains(" has no clone method"));
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      float[] floatArray0 = new float[0];
      String string0 = StringUtils.join(floatArray0, '^');
      assertEquals(0, floatArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertNotNull(string0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("Minimum abbreviation width with offset is %d", "f1rP", "Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 1287, 18);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", "hndIA3S]`", 18, 1287);
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("Minimum abbreviation width with offset is %d", "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1.0F);
      int int0 = 1224;
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, '0', (-2472), 1224);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2472
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      String string0 = StringUtils.removeEnd("Array and element cannot both be null", "lb");
      assertEquals("Array and element cannot both be null", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Array and element cannot both be null", (CharSequence) "0.VSeqw(V:!3p6/m1c?");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultIfBlank("", "Array and element cannot both be null");
      assertEquals("Array and element cannot both be null", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnce("lb", "", "+WALncp18DS+p3k+WALncp18DS+p3k(r:q+Ws");
      assertEquals("lb", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Array and element cannot both be null";
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      String string0 = StringUtils.replaceChars("ny=", "ny=", (String) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", (CharSequence) null, 1767);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceOnce("vDnP_", "", "vDnP_");
      assertEquals("vDnP_", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      String string2 = StringUtils.appendIfMissingIgnoreCase((String) null, "", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNull(string2);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)10;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(2, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=2 cap=2]", byteBuffer0.toString());
      assertEquals(2, byteBuffer0.capacity());
      assertArrayEquals(new byte[] {(byte)56, (byte)10}, byteArray0);
      assertNotNull(byteBuffer0);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertEquals(2, byteArray0.length);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("java.nio.HeapByteBuffer[pos=2 lim=2 cap=2]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(2, byteBuffer0.position());
      assertEquals(2, byteBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.limit());
      assertEquals("8\n", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertArrayEquals(new byte[] {(byte)56, (byte)10}, byteArray0);
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      assertEquals(2, byteArray0.length);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("java.nio.HeapByteBuffer[pos=2 lim=2 cap=2]", byteBuffer0.toString());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(2, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(2, byteBuffer0.position());
      assertEquals(2, byteBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.limit());
      assertEquals("8\n", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(2, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(2, charBuffer1.capacity());
      assertEquals(2, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isDirect());
      assertEquals("8\n", charBuffer1.toString());
      assertEquals(2, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertArrayEquals(new byte[] {(byte)56, (byte)10}, byteArray0);
      assertNotNull(charBuffer1);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((Object) null);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(boolean0);
      
      Spliterator<Object> spliterator0 = hashSet0.spliterator();
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertNotNull(spliterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      hashSet0.forEach(consumer0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      boolean boolean1 = hashSet0.add((Object) null);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.join((Iterable<?>) hashSet0, (String) null);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean2 = hashSet0.add((Object) null);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String string2 = StringUtils.chop((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.lowerCase((String) null);
      assertNull(string3);
      
      boolean boolean3 = StringUtils.contains((CharSequence) null, (CharSequence) "");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      String string4 = StringUtils.replace((String) null, "", "");
      assertNull(string4);
      
      boolean boolean4 = StringUtils.contains((CharSequence) "", (CharSequence) null);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("aRK.dlw8", 'A');
      assertEquals("AaRK.dlw8A", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "AaRK.dlw8A";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBetween((String) null, (String) null, "aRK.dlw8");
      assertNull(string1);
      
      String string2 = StringUtils.stripAccents("JD6@CXAkI~|");
      assertEquals("JD6@CXAkI~|", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      byte[] byteArray0 = new byte[0];
      String string3 = StringUtils.join(byteArray0, 'T');
      assertEquals(0, byteArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals(15, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.lowerCase((String) null);
      assertNull(string4);
      
      String string5 = StringUtils.substringAfterLast("JD6@CXAkI~|", "yVy6n ");
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      String string6 = StringUtils.repeat('T', (-1));
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      assertEquals(0, int0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((Object) null);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertTrue(boolean0);
      
      Spliterator<Object> spliterator0 = hashSet0.spliterator();
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertNotNull(spliterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      hashSet0.forEach(consumer0);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      
      boolean boolean1 = hashSet0.add((Object) null);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.join((Iterable<?>) hashSet0, "org.apache.commons.lang3.StringUtils");
      assertFalse(hashSet0.contains("org.apache.commons.lang3.StringUtils"));
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertEquals("", string1);
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("org.apache.commons.lang3.StringUtils");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "", 0, 0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      boolean boolean2 = hashSet0.add(charBuffer0);
      assertFalse(hashSet0.contains("org.apache.commons.lang3.StringUtils"));
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = hashSet0.add((Object) null);
      assertFalse(hashSet0.contains("org.apache.commons.lang3.StringUtils"));
      assertEquals(2, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      String string2 = StringUtils.chop((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.lowerCase((String) null);
      assertNull(string3);
      
      boolean boolean4 = StringUtils.contains((CharSequence) null, (CharSequence) "");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      
      String string4 = StringUtils.replace((String) null, "", "");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      String string0 = StringUtils.chop((String) null);
      assertNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBefore((String) null, (String) null);
      assertNull(string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-1);
      String string2 = StringUtils.join(intArray0, '<', 1424, (-916));
      assertEquals(1, intArray0.length);
      assertEquals("", string2);
      assertArrayEquals(new int[] {(-1)}, intArray0);
      assertNotNull(string2);
      
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("s");
      assertNotNull(locale_LanguageRange0);
      
      Stack<CharBuffer> stack1 = new Stack<CharBuffer>();
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertNotNull(stack1);
      
      Iterator<CharBuffer> iterator0 = stack1.iterator();
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertNotNull(iterator0);
      
      String string3 = StringUtils.join(iterator0, '<');
      assertEquals(10, stack1.capacity());
      assertTrue(stack1.isEmpty());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertEquals(0, stack1.size());
      assertEquals("", string3);
      assertNotNull(string3);
      
      String string4 = StringUtils.substringAfter("Cannot clone Cloneable type ", "!!f>");
      assertEquals("", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, (String) null);
      assertEquals(0, int0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      boolean boolean0 = hashSet0.add((Object) null);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertTrue(boolean0);
      
      Spliterator<Object> spliterator0 = hashSet0.spliterator();
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertNotNull(spliterator0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      hashSet0.forEach(consumer0);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      
      boolean boolean1 = hashSet0.add((Object) null);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.join((Iterable<?>) hashSet0, (String) null);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertEquals("", string1);
      assertNotNull(string1);
      
      boolean boolean2 = hashSet0.add((Object) null);
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.isEmpty());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string2 = StringUtils.chop((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.lowerCase((String) null);
      assertNull(string3);
      
      boolean boolean3 = StringUtils.contains((CharSequence) null, (CharSequence) "");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string4 = StringUtils.replace((String) null, "", "");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = vector0.add((Object) "");
      assertTrue(vector0.contains(""));
      assertEquals("[]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string1 = StringUtils.abbreviate("", "5'~h8:F5Tm", 587);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.join((Iterable<?>) vector0, "5'~h8:F5Tm");
      assertFalse(vector0.contains(587));
      assertTrue(vector0.contains(""));
      assertEquals("[]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      char[] charArray0 = new char[1];
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("\u0000", string0);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      assertNotNull(string0);
      
      int int0 = 10;
      String string1 = StringUtils.abbreviate("~", 10, 10);
      assertEquals("~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "~");
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("~", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "\u0000";
      charSequenceArray0[1] = (CharSequence) "iZp!nv|8~-_._OYYNMu";
      charSequenceArray0[2] = (CharSequence) "~";
      charSequenceArray0[3] = (CharSequence) "iZp!nv|8~-_._OYYNMu";
      charSequenceArray0[4] = (CharSequence) "~";
      boolean boolean0 = StringUtils.containsWhitespace("\u0000");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat("iZp!nv|8~-_._OYYNMu", 10);
      assertEquals("iZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMu", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "iZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMu";
      stringArray0[1] = "iZp!nv|8~-_._OYYNMu";
      stringArray0[2] = "~";
      stringArray0[3] = "~";
      stringArray0[4] = "\u0000";
      stringArray0[5] = "~";
      stringArray0[6] = "~";
      String string3 = StringUtils.replaceEach("iZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMu", stringArray0, stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("iZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMu", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      int int1 = StringUtils.ordinalIndexOf("iZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMu", charBuffer0, 10);
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("~", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.limit());
      assertEquals(179, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.join(stringArray1);
      assertEquals(0, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("", string4);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.equals(charSequenceArray0[1], (CharSequence) "\u0000");
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string5 = StringUtils.deleteWhitespace("~");
      assertEquals("~", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      
      // Undeclared exception!
      try { 
        Charset.forName("iZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMu");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // iZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMuiZp!nv|8~-_._OYYNMu
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      long[] longArray0 = new long[7];
      longArray0[0] = (-576L);
      longArray0[1] = (long) 'Q';
      String string0 = StringUtils.center("U8A", 0, "Mp3Gc9>SLjQ");
      assertEquals("U8A", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string1 = StringUtils.upperCase((String) null, locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNull(string1);
      
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "U8A";
      String string2 = StringUtils.removeEndIgnoreCase("X&_C@s<Dhz)7Nh;", (String) null);
      assertEquals("X&_C@s<Dhz)7Nh;", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      Stack<Locale> stack0 = new Stack<Locale>();
      assertFalse(stack0.contains(locale0));
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Locale locale1 = Locale.lookup(vector0, stack0);
      assertFalse(stack0.contains(locale0));
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNull(locale1);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "X&_C@s<Dhz)7Nh;", (CharSequence) "X&_C@s<Dhz)7Nh;");
      assertEquals("X&_C@s<Dhz)7Nh;", charSequence0);
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string2));
      assertNotNull(charSequence0);
      
      charSequenceArray0[2] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("The type must not be null", "Supplied value must be a valid byte literal between -32768 and 32767: [", (String) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[2] = " has no clone method";
      stringArray0[3] = " has no clone method";
      String string0 = StringUtils.wrap(" has no clone method", " has no clone method");
      assertEquals(" has no clone method has no clone method has no clone method", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringBeforeLast("0J@;Q<|", "org.apache.commons.lang3.LocaleUtils");
      assertEquals("0J@;Q<|", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.substring(" has no clone method", 2033, 49);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.length("0J@;Q<|");
      assertEquals(7, int0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("~Q{45Bc;zPsM5QP", '^');
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.trimToNull("org.apache.commons.lang3.LocaleUtils");
      assertEquals("org.apache.commons.lang3.LocaleUtils", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("org.apache.commons.lang3.LocaleUtils", " has no clone method");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("~Q{45Bc;zPsM5QP", " has no clone method has no clone method has no clone method");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens(" has no clone method", '^');
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertNotNull(stringArray2);
      
      boolean boolean3 = StringUtils.endsWithAny("~Q{45Bc;zPsM5QP", stringArray2);
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertFalse(boolean3);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string0 = StringUtils.unwrap((String) null, '4');
      assertNull(string0);
      
      String string1 = StringUtils.substring((String) null, 587, 1);
      assertNull(string1);
      
      String string2 = StringUtils.substringAfterLast((String) null, (int) '4');
      assertNull(string2);
      
      boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, "=3E@NZ/{m");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.CR;
      assertEquals("\r", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "\r";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("\r");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.substringBefore("gtA>7->9cxWndAY", 8);
      assertEquals("gtA>7->9cxWndAY", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfterLast((String) null, (String) null);
      assertNull(string2);
      
      boolean boolean2 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      String string3 = StringUtils.join(charArray0, '\\');
      assertEquals(1, charArray0.length);
      assertEquals("\\", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new char[] {'\\'}, charArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.defaultString((String) null, "");
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'\\'}, charArray0);
      
      String string5 = StringUtils.substringAfterLast("", (-1227));
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", (-3315));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String string0 = StringUtils.substringBeforeLast("b,", "b,");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("{");
      assertEquals("{", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.toRootLowerCase("{");
      assertEquals("{", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("{", "{");
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.split("Cloneabletype ", "{");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.chomp("{", "{");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("{");
      assertEquals("{", string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      String string0 = StringUtils.substringAfter("Mini9*WH{N_", 2028);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("", "Mini9*WH{N_", 2028);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Mini9*WH{N_");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.unwrap((String) null, 'Q');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "-$^7", (-1), (-1));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.unwrap(",.q9G'-IEL>Ecxgvih", "*@#~");
      assertEquals(",.q9G'-IEL>Ecxgvih", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "-$^7";
      charSequenceArray0[1] = (CharSequence) ",.q9G'-IEL>Ecxgvih";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      String string0 = StringUtils.removeStart("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) null;
      objectArray0[4] = object1;
      objectArray0[5] = (Object) null;
      String string2 = StringUtils.joinWith("cwhpk", objectArray0);
      assertEquals(6, objectArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substring((String) null, 888);
      assertNull(string3);
      
      String string4 = StringUtils.substring("{", 888);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String string5 = StringUtils.upperCase((String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      String string0 = Locale.lookupTag(vector0, treeSet0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNull(string0);
      
      String string1 = StringUtils.upperCase("Minimum abbreviation width with offset is %dMinimum abbreviation width with offset is %d", (Locale) null);
      assertEquals("MINIMUM ABBREVIATION WIDTH WITH OFFSET IS %DMINIMUM ABBREVIATION WIDTH WITH OFFSET IS %D", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, '^', 686, 1726);
      assertNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("ixKQx");
      assertEquals("ixKQx", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBeforeLast((String) null, "ixKQx");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      String string0 = StringUtils.rightPad("~Pjdx]:srs", 66, 'l');
      assertEquals("~Pjdx]:srsllllllllllllllllllllllllllllllllllllllllllllllllllllllll", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "~Pjdx]:srsllllllllllllllllllllllllllllllllllllllllllllllllllllllll", (CharSequence) "~Pjdx]:srs");
      assertEquals(0, int0);
      
      String string1 = StringUtils.unwrap("00\u0000000z0z0)", 'r');
      assertEquals("00\u0000000z0z0)", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "00\u0000000z0z0)", 322, 66);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      long[] longArray0 = new long[0];
      String string2 = StringUtils.join(longArray0, 'T', 2, 0);
      assertEquals(0, longArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new long[] {}, longArray0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.startsWith(" ", " ");
      assertTrue(boolean0);
      
      String string0 = StringUtils.deleteWhitespace(" ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) " ";
      charSequenceArray0[1] = (CharSequence) " ";
      String string1 = StringUtils.prependIfMissing(" ", "", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String string2 = StringUtils.wrapIfMissing(" ", 'z');
      assertEquals("z z", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.isMixedCase(" ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.trimToEmpty("IoXF");
      assertEquals("IoXF", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("IoXF");
      assertEquals("IoX", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnce("IoXF", "IoXF", "IoXF");
      assertEquals("IoXF", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      NavigableSet<String> navigableSet0 = treeSet0.tailSet("IoX", false);
      assertFalse(treeSet0.contains("IoXF"));
      assertFalse(navigableSet0.contains("IoXF"));
      assertEquals(0, navigableSet0.size());
      assertTrue(navigableSet0.isEmpty());
      assertNotNull(navigableSet0);
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Minimum abbreviation width with offset is %d");
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(44, charBuffer0.limit());
      assertEquals(44, charBuffer0.remaining());
      assertEquals(44, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals("Minimum abbreviation width with offset is %d", charBuffer0.toString());
      assertEquals(44, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "The Array must not b~";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[2] = (CharSequence) "The Array must not b~";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "The Array must not b~", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.center("Minimum abbreviation width with offset is %d", 10, '2');
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is %d");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.startsWith("...t is %d", "...t is %d");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string2 = StringUtils.deleteWhitespace("Minimum abbreviation width with offset is %d");
      assertEquals("Minimumabbreviationwidthwithoffsetis%d", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      String string0 = StringUtils.leftPad("b>^o3pp}is", 3900);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("b", Integer.MAX_VALUE);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "b", (CharSequence) string0, 3606);
      assertEquals((-1), int0);
      assertFalse(string0.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      String string0 = "{3YB5\\u~@";
      String string1 = StringUtils.deleteWhitespace(string0);
      assertEquals("{3YB5\\u~@", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "IoXF");
      assertFalse(treeSet0.contains(string0));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnce("", "IoXF", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.truncate("\"c", 0);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      NavigableSet<String> navigableSet0 = treeSet0.tailSet("", false);
      assertFalse(treeSet0.contains(""));
      assertFalse(navigableSet0.contains(""));
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      assertNotNull(navigableSet0);
      
      String string4 = StringUtils.abbreviate("maxWith cannot be negative", "", 0);
      assertEquals("maxWith cannot be negative", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "IoXF", (CharSequence) "\"c", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("Mini9*WH{N_");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.unwrap((String) null, 'Q');
      assertNull(string0);
      
      String string1 = StringUtils.substringAfterLast("Mini9*WH{N_", 100);
      assertEquals("", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.normalizeSpace("~hW@nEy");
      assertEquals("~hW@nEy", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlpha("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.swapCase("~hW@nEy");
      assertEquals("~Hw@NeY", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "~hW@nEy", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.normalizeSpace("~hW@nEy");
      assertEquals("~hW@nEy", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlpha("Le=8LM2");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.swapCase((String) null);
      assertNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) "~hW@nEy", (CharSequence) "");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      boolean boolean0 = StringUtils.equals((CharSequence) "~", (CharSequence) "~");
      assertTrue(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("o90qqb\"'l,");
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {111, 57, 48, 113, 113, 98, 34, 39, 108, 44}, intArray0);
      assertNotNull(intArray0);
      
      boolean boolean1 = StringUtils.isWhitespace("~");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.difference("Array element ", "~");
      assertEquals("~", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~";
      stringArray0[1] = "o90qqb\"'l,";
      String string1 = StringUtils.replaceOnceIgnoreCase("o90qqb\"'l,", "~", "~");
      assertEquals("o90qqb\"'l,", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) "";
      String string1 = StringUtils.joinWith("", objectArray0);
      assertEquals(4, objectArray0.length);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-492.617425835);
      doubleArray0[1] = 837.898;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3696.150955216);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 100.0;
      String string0 = StringUtils.join(doubleArray0, 'I');
      assertEquals(7, doubleArray0.length);
      assertEquals("-492.617425835I837.898I1.0I0.0I-3696.150955216I0.0I100.0", string0);
      assertArrayEquals(new double[] {(-492.617425835), 837.898, 1.0, 0.0, (-3696.150955216), 0.0, 100.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "-492.617425835I837.898I1.0I0.0I-3696.150955216I0.0I100.0", (CharSequence) "-492.617425835I837.898I1.0I0.0I-3696.150955216I0.0I100.0", 7);
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceOnceIgnoreCase("-492.617425835I837.898I1.0I0.0I-3696.150955216I0.0I100.0", "-492.617425835I837.898I1.0I0.0I-3696.150955216I0.0I100.0", "{}");
      assertEquals("{}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.swapCase("Z@|2 8 +J");
      assertEquals("z@|2 8 +j", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.unwrap("", 'I');
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.deleteWhitespace("{}");
      assertEquals("{}", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      boolean boolean0 = StringUtils.isAlpha("Z@|2 8 +J");
      assertFalse(boolean0);
      
      String string5 = StringUtils.trim("xL{yEbJyT-!~vNf[j&");
      assertEquals("xL{yEbJyT-!~vNf[j&", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertNotNull(string5);
      
      String string6 = StringUtils.abbreviate((String) null, "z@|2 8 +j", (-1332));
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      String string0 = StringUtils.substringBefore("", 32);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat('1', 32);
      assertEquals("11111111111111111111111111111111", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("r/v%? w.a/");
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      try { 
        StringUtils.getBytes("&\")-B:Y[jr=Q2vW;J", "&\")-B:Y[jr=Q2vW;J");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.replaceFirst("", "~", "~");
      assertEquals("", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence) "";
      String string1 = StringUtils.join((List<?>) null, "Search and Replace array lengths don't match: ", (-254), 54);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.join((List<?>) linkedList0, "org.apache.commons.lang3.CharUtils", 1886, 571);
      assertFalse(linkedList0.contains(571));
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, "org.apache.commons.lang3.CharUtils", 571, 1886);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 1886
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "-$^7");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate2.negate();
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate4, predicate2);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertNotNull(predicate4);
      
      boolean boolean0 = linkedList0.removeIf(predicate3);
      assertFalse(linkedList0.contains("-$^7"));
      assertEquals(0, linkedList0.size());
      assertNotSame(predicate2, predicate4);
      assertFalse(boolean0);
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate2));
      
      String string0 = StringUtils.join((List<?>) linkedList0, "-$^7", 0, 0);
      assertFalse(linkedList0.contains("-$^7"));
      assertEquals(0, linkedList0.size());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      String string1 = StringUtils.join(booleanArray0, ':', 0, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals("", string1);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = 'p';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("pp\u0000", string0);
      assertArrayEquals(new char[] {'p', 'p', '\u0000'}, charArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", 31, 31);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 31, 2318);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd("Cannot store ", "+ZW#~:e= ");
      assertEquals("Cannot stor", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("Cannot store ", 1709, "(r:q+Ws");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.SPACE;
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) " ", (CharSequence) "+ZW#~:e= ");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.ordinalIndexOf("+ZW#~:e= ", "", 1084);
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = StringUtils.indexOf((CharSequence) "Cannot store ", (CharSequence) "(r:q+Ws");
      assertEquals((-1), int3);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      String string4 = StringUtils.stripToNull("");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      String string0 = "^o*Mh+pT,C";
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "^o*Mh+pT,C");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ^o*Mh+pT,C
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      String string0 = StringUtils.stripToNull("");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "0hDEhASKI5k-=CL");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-30);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte) (-6);
      byteArray0[8] = (byte)2;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "0hDEhASKI5k-=CL");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 0hDEhASKI5k-=CL
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("Xy*QFN1VuD*$KT", 'o');
      assertEquals("oXy*QFN1VuD*$KTo", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("oXy*QFN1VuD*$KTo");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Minimum abbreviation width with offset is %d");
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(44, charBuffer0.length());
      assertEquals(44, charBuffer0.capacity());
      assertEquals("Minimum abbreviation width with offset is %d", charBuffer0.toString());
      assertEquals(44, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(44, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      String string0 = StringUtils.repeat("Minimum abbreviation width with offset is %d", 697);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("Minimum abbreviation width with offset is %d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      String string0 = StringUtils.leftPad("b>^o3pp}is", 3900);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = "b>^o3pp}is";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals(7, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      int int0 = StringUtils.lastIndexOfAny(string0, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrapIfMissing(string0, '+');
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.repeat((String) null, 0);
      assertNull(string3);
      
      String string4 = StringUtils.wrapIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of another", '+');
      assertEquals("+Aborting to protect against StackOverflowError - output of one loop is the input of another+", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("The StrWW %!+I", "The StrWW %!+I");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The StrWW %!+I", (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceIgnoreCase("The StrWW %!+I", "The StrWW %!+I", (String) null);
      assertEquals("The StrWW %!+I", string1);
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.split((String) null, (String) null);
      assertNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, (String) null);
      assertTrue(boolean0);
      
      String string2 = StringUtils.substringBefore((String) null, "The StrWW %!+I");
      assertNull(string2);
      
      int int1 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.stripToNull("smharb3a");
      assertEquals("smharb3a", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\r";
      String[] stringArray0 = new String[6];
      stringArray0[0] = " ";
      stringArray0[1] = "\n";
      stringArray0[2] = "";
      stringArray0[3] = "\r";
      String string0 = StringUtils.center("", (-1), "\r");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.left("\n", (-2097));
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeFirst("\r", " ");
      assertEquals("\r", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The StrWW %!+I");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.trimToNull("The StrWW %!+I");
      assertEquals("The StrWW %!+I", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The StrWW %!+I", (CharSequence) "The StrWW %!+I");
      assertEquals(0, int0);
      
      String string1 = StringUtils.capitalize("The StrWW %!+I");
      assertEquals("The StrWW %!+I", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("The StrWW %!+I", " ", 0);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.toRootLowerCase("The StrWW %!+I");
      assertEquals("the strww %!+i", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("The StrWW %!+I");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceIgnoreCase(" ", "Supplied value must be a valid byte literal between -32768 and 32767: [%]@Supplied value must be a valid byte literal between -32768 and 32767: [", (String) null, 0);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "The StrWW %!+I", (CharSequence[]) stringArray1);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, int1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width is %d", 1);
      assertEquals("inimum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("inimum abbreviation width is %d", "Minimum abbreviation width is %d", 1);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("inimum abbreviation width is %d", "inimum abbreviation width is %d", 1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceIgnoreCase("Minimum abbreviation width is %d", "org.apache.commons.lang3.ArrayUtils", "[X:!<k@", 108);
      assertEquals("Minimum abbreviation width is %d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width is %d", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      String string0 = StringUtils.trim("X&_C@s<Dhz)7Nh;");
      assertEquals("X&_C@s<Dhz)7Nh;", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("Search and Replace array lengths don't match: ", "!`\",h", 11);
      assertEquals("Sea!`\",hh: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Stack<String> stack0 = new Stack<String>();
      assertFalse(stack0.contains("Search and Replace array lengths don't match: "));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      String string2 = StringUtils.join((List<?>) stack0, "o90qqb\"'l,^o*Mh+pT,C#tdY4@k!k", 11, 11);
      assertFalse(stack0.contains(string0));
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      String string0 = StringUtils.truncate("'SQ`Mcp@QV", 1803);
      assertEquals("'SQ`Mcp@QV", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((double[]) null, 'I', (-36), (-142));
      assertNull(string1);
      
      String string2 = StringUtils.substringBefore("", 58);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.wrapIfMissing((String) null, 'C');
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      String string0 = "~";
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "~", (CharSequence) "");
      assertEquals("~", charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertNotNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "~";
      String string1 = StringUtils.appendIfMissingIgnoreCase("", "~", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)charSequence0));
      assertNotNull(string1);
      
      String string2 = StringUtils.removeStart("JXMZ\u0005NiK18VOU", "0o=<7JhwXUjcI");
      assertEquals("JXMZ\u0005NiK18VOU", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)charSequence0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("", "JXMZ\u0005NiK18VOU");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "jZFcC,A:&V6Z\"#]by\"", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "~", (CharSequence) "0o=<7JhwXUjcI");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = (-1982);
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, 'j', (int) (short)0, (int) (short)897);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("...", '^');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.unwrap((String) null, 'N');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (-197), 2331);
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfIgnoreCase(charSequenceArray0[3], charSequenceArray0[8]);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string1 = StringUtils.wrapIfMissing("", 's');
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.joinWith("", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = StringUtils.indexOf(charSequenceArray0[3], 2747);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      
      String string3 = StringUtils.abbreviateMiddle("", "\n", 0);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains(""));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      HashSet<Object> hashSet0 = new HashSet<Object>(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(""));
      assertFalse(hashSet0.contains(""));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      String string4 = StringUtils.join((Iterable<?>) hashSet0, "ch");
      assertFalse(linkedHashSet0.contains(""));
      assertFalse(hashSet0.contains(""));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string0 = StringUtils.difference("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Integer integer0 = new Integer(13);
      assertEquals(13, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vector0.add(object0);
      assertTrue(vector0.contains(object0));
      assertFalse(vector0.contains(""));
      assertFalse(vector0.isEmpty());
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean0);
      
      boolean boolean1 = vector0.add((Object) integer0);
      assertTrue(vector0.contains(object0));
      assertFalse(vector0.contains(""));
      assertFalse(vector0.isEmpty());
      assertEquals(2, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = vector0.add((Object) "");
      assertTrue(vector0.contains(""));
      assertFalse(vector0.isEmpty());
      assertEquals(3, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.endsWithIgnoreCase("", "");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", '4');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean4 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      
      String string1 = StringUtils.abbreviate("", "5'~h8:F5Tm", 587);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean5 = StringUtils.isWhitespace("");
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      
      String string2 = StringUtils.removeIgnoreCase("wcxAMLqiX*jQ", "wcxAMLqiX*jQ");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The StrWW %!+I");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("The", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The StrWW %!+I", (CharSequence) "The");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("The StrWW %!+I", "The StrWW %!+I", "The");
      assertEquals("The", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBetween("The", "The", "a|AXx");
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.split((String) null, "The");
      assertNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "The", "The");
      assertFalse(boolean0);
      
      String string3 = StringUtils.strip("pU8p9ob");
      assertEquals("pU8p9ob", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      boolean boolean1 = StringUtils.isAlphanumeric("The StrWW %!+I");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) "a|AXx", (String) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string4 = StringUtils.capitalize("YO< t7z)g+FrLTj");
      assertEquals("YO< t7z)g+FrLTj", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("pU8p9ob");
      assertEquals(1, stringArray2.length);
      assertNotSame(stringArray2, stringArray0);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertNotNull(stringArray2);
      
      String string5 = StringUtils.toRootLowerCase("5!l<");
      assertEquals("5!l<", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      
      boolean boolean3 = StringUtils.isAlphaSpace("The");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      String string6 = StringUtils.replaceIgnoreCase("5!l<", "C(a}~j'tFy;dn}", "C(a}~j'tFy;dn}", 0);
      assertEquals("5!l<", string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertNotNull(string6);
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllLowerCase("%");
      assertFalse(boolean0);
      
      String string0 = StringUtils.lowerCase("MPKl<lp.L#w9mBF02)");
      assertEquals("mpkl<lp.l#w9mbf02)", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("mpkl<lp.l#w9mbf02)", "MPKl<lp.L#w9mBF02)", 32);
      assertEquals((-1), int0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = (long) 32;
      longArray0[1] = (long) (-1);
      String string1 = StringUtils.join(longArray0, 'N', 1234, 32);
      assertEquals(2, longArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new long[] {32L, (-1L)}, longArray0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      String string0 = StringUtils.strip("n;$#DlV9*WH", "n;$#DlV9*WH");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("", (String) null, false);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "", 2929);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.join((byte[]) null, '%', (-1), (-3319));
      assertNull(string2);
      
      String string3 = StringUtils.removeEnd("QGwZE:x", "Zn\"U)jn");
      assertEquals("QGwZE:x", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 24;
      longArray0[2] = (long) 24;
      longArray0[4] = (long) 24;
      String string0 = StringUtils.join(longArray0, ' ');
      assertEquals(5, longArray0.length);
      assertEquals("0 24 24 0 24", string0);
      assertArrayEquals(new long[] {0L, 24L, 24L, 0L, 24L}, longArray0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.deleteWhitespace((String) null);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string2 = StringUtils.toRootLowerCase("'U@%k,Fn|JnM~");
      assertEquals("'u@%k,fn|jnm~", string2);
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isAlphaSpace("'U@%k,Fn|JnM~");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-127);
      byteArray0[1] = (byte) (-127);
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-127);
      String string0 = StringUtils.join(byteArray0, '5', (-1270), (-1270));
      assertEquals(5, byteArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new byte[] {(byte) (-127), (byte) (-127), (byte) (-127), (byte)0, (byte) (-127)}, byteArray0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (int) (byte)0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      String string0 = StringUtils.remove("\n", "\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("", "\n", "\n");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      long[] longArray0 = new long[4];
      longArray0[0] = (-933L);
      longArray0[1] = 1072L;
      longArray0[2] = (-1L);
      longArray0[3] = 1252L;
      String string0 = StringUtils.join(longArray0, 'd', 2213, (-1));
      assertEquals(4, longArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new long[] {(-933L), 1072L, (-1L), 1252L}, longArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.replace("1", "1", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.trimToNull("");
      assertNull(string2);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 0);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)58;
      byteArray0[2] = (byte)77;
      byteArray0[3] = (byte) (-68);
      String string3 = StringUtils.join(byteArray0, 'd', 127, 0);
      assertEquals(4, byteArray0.length);
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)78, (byte)58, (byte)77, (byte) (-68)}, byteArray0);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      String string0 = StringUtils.replaceFirst((String) null, (String) null, "y");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "y";
      charSequenceArray0[2] = (CharSequence) null;
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertEquals(0, byteArray0.length);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.uncapitalize("Object varargs must not be null");
      assertEquals("object varargs must not be null", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "object varargs must not be null", "object varargs must not be null");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart("MiaL{wv!J-05F", "pU8p9ob");
      assertEquals("MiaL{wv!J-05F", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("n;$#DlV9*WH");
      assertEquals("n;$#DlV9*WH", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.SPACE;
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("", "n;$#DlV9*WH", false);
      assertEquals((-11), int0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) " ", 2929);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.isNumeric("");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) " ", (CharSequence) "n;$#DlV9*WH");
      assertEquals(11, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      String string0 = StringUtils.replaceFirst((String) null, (String) null, "y");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "y";
      charSequenceArray0[2] = (CharSequence) null;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("Exception cloning Cloneable type ", charset0);
      assertEquals(33, byteArray0.length);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      String string0 = StringUtils.trim("X&_C@s<Dhz)7Nh;");
      assertEquals("X&_C@s<Dhz)7Nh;", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "X&_C@s<Dhz)7Nh;";
      objectArray0[1] = (Object) "X&_C@s<Dhz)7Nh;";
      objectArray0[2] = (Object) "X&_C@s<Dhz)7Nh;";
      String string1 = StringUtils.join(objectArray0, 'n', (-2527), (-2527));
      assertEquals(3, objectArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "X&_C@s<Dhz)7Nh;";
      String string2 = StringUtils.appendIfMissingIgnoreCase("X&_C@s<Dhz)7Nh;", "X&_C@s<Dhz)7Nh;", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals("X&_C@s<Dhz)7Nh;", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.removeStart("XvV#V!V`@2,s1", "X&_C@s<Dhz)7Nh;");
      assertEquals("XvV#V!V`@2,s1", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.reverse((String) null);
      assertNull(string4);
      
      int int0 = StringUtils.compareIgnoreCase("X&_C@s<Dhz)7Nh;", "", false);
      assertEquals(15, int0);
      
      String string5 = StringUtils.replacePattern((String) null, "Comparator should not be null.", (String) null);
      assertNull(string5);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      ByteBuffer byteBuffer0 = charset0.encode("C-.>9w=9MUKQj*");
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(14, byteBuffer0.remaining());
      assertEquals(15, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(14, byteBuffer0.limit());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=14 cap=15]", byteBuffer0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(byteBuffer0);
      
      ByteBuffer byteBuffer1 = charset0.encode("");
      assertTrue(byteBuffer1.hasArray());
      assertFalse(byteBuffer1.hasRemaining());
      assertEquals(0, byteBuffer1.limit());
      assertEquals(0, byteBuffer1.capacity());
      assertEquals(0, byteBuffer1.remaining());
      assertFalse(byteBuffer1.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer1.toString());
      assertEquals(0, byteBuffer1.position());
      assertEquals(0, byteBuffer1.arrayOffset());
      assertFalse(byteBuffer1.isDirect());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotSame(byteBuffer1, byteBuffer0);
      assertFalse(byteBuffer1.equals((Object)byteBuffer0));
      assertNotNull(byteBuffer1);
      
      ByteBuffer byteBuffer2 = charset0.encode("M");
      assertEquals(1, byteBuffer2.limit());
      assertFalse(byteBuffer2.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer2.toString());
      assertEquals(0, byteBuffer2.position());
      assertFalse(byteBuffer2.isReadOnly());
      assertTrue(byteBuffer2.hasArray());
      assertEquals(1, byteBuffer2.capacity());
      assertTrue(byteBuffer2.hasRemaining());
      assertEquals(0, byteBuffer2.arrayOffset());
      assertEquals(1, byteBuffer2.remaining());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotSame(byteBuffer2, byteBuffer0);
      assertNotSame(byteBuffer2, byteBuffer1);
      assertFalse(byteBuffer2.equals((Object)byteBuffer0));
      assertFalse(byteBuffer2.equals((Object)byteBuffer1));
      assertNotNull(byteBuffer2);
      
      byte[] byteArray0 = StringUtils.getBytes("O", charset0);
      assertEquals(1, byteArray0.length);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertArrayEquals(new byte[] {(byte)79}, byteArray0);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = 'Z';
      charArray0[2] = 'Z';
      charArray0[3] = 'Z';
      charArray0[4] = 'Z';
      charArray0[5] = 'Z';
      boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[5], charArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'Z', 'Z', 'Z', 'Z', 'Z', 'Z'}, charArray0);
      
      String string0 = StringUtils.unwrap("5'~h8:F5Tm", 'Z');
      assertEquals("5'~h8:F5Tm", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("org.apache.commons.lang3.CharUtils", 0, 3810);
      assertEquals("org.apache.commons.lang3.CharUtils", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) "-$^7", (-1), (-1));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.unwrap(",.q9G'-IEL>Ecxgvih", "*@#~");
      assertEquals(",.q9G'-IEL>Ecxgvih", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase(",.q9G'-IEL>Ecxgvih", ",.q9G'-IEL>Ecxgvih");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat(",.q9G'-IEL>Ecxgvih", 2170);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("*<&ted&:j}D$<$t", "0J@;Q<|");
      assertEquals("*<&ted&:j}D$<$t", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring("*<&ted&:j}D$<$t", 49, 49);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.length("0J@;Q<|");
      assertEquals(7, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("TnfL7\"s", '^');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("*<&ted&:j}D$<$t", "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("*<&ted&:j}D$<$t", "0J@;Q<|");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("*<&ted&:j}D$<$t", ',');
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      String string0 = StringUtils.reverse("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '7';
      charArray0[1] = 'w';
      charArray0[2] = '_';
      charArray0[3] = ',';
      charArray0[4] = 'm';
      charArray0[5] = 'q';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertEquals(6, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'7', 'w', '_', ',', 'm', 'q'}, charArray0);
      
      String string1 = StringUtils.unwrap("Y-}5(o([74b~ J6;", 'O');
      assertEquals("Y-}5(o([74b~ J6;", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substring("S(f|_]Q$2*8r!", 0, 0);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The String must not be empty");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.unwrap("The String must not be empty", 'R');
      assertEquals("The String must not be empty", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(11, stringArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-492.60303890029644);
      String string0 = StringUtils.mid("?f>u@+*Ob", 1, 1);
      assertEquals("f", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(" ", "?f>u@+*Ob");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.lowerCase(" ");
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase(" ", stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("Strings must not be null", 697, 3908);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringBefore("jZFcC,A:&V6Z\"#", "");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("...t is %d", 10);
      assertEquals("...t is %d", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      String string0 = StringUtils.replaceAll("u", "", "u");
      assertEquals("uuu", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "uuu";
      String string1 = StringUtils.difference("uuu", "");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains("u"));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Integer integer0 = new Integer(72);
      assertEquals(72, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = vector0.add((Object) integer0);
      assertTrue(vector0.contains(72));
      assertFalse(vector0.contains("u"));
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[72]", vector0.toString());
      assertTrue(boolean0);
      
      String string2 = StringUtils.unwrap("u", 'W');
      assertEquals("u", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.substring("bL8V>&#NA59km*", 1078, 72);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.removeAll("", "uuu");
      assertEquals("", string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "uuu");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("*Q]}J6`XtQ[wTfEA}/(r:q+Ws", "~B?s", "&% Z2;3Bx9yE@C#sb", 2);
      assertEquals("*Q]}J6`XtQ[wTfEA}/(r:q+Ws", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("Search and Replace array lengths don't match: ");
      assertFalse(boolean0);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "&% Z2;3Bx9yE@C#sb", 2);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'Q';
      charArray0[2] = 'z';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("\u0000Qz", string0);
      assertArrayEquals(new char[] {'\u0000', 'Q', 'z'}, charArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("\u0000Qz");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("\u0000Qz", "\u0000Qz");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.substring("y7v >e:x^WciAJg ]_", (-128));
      assertEquals("y7v >e:x^WciAJg ]_", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "y7v >e:x^WciAJg ]_", (CharSequence) "y7v >e:x^WciAJg ]_");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "-$^7");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate1.negate();
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 24;
      intArray0[1] = 24;
      String string0 = StringUtils.join(intArray0, ' ', 24, 24);
      assertEquals(2, intArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new int[] {24, 24}, intArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rotate("-$^7", (-2109));
      assertEquals("$^7-", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "-$^7";
      int int0 = StringUtils.indexOfAny((CharSequence) "-$^7", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Jm*`5{Mn.", "Jm*`5{Mn.", "Jm*`5{Mn.");
      assertEquals("Jm*`5{Mn.", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("Jm*`5{Mn.", 160);
      assertEquals("Jm*`5{Mn.", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      String string0 = StringUtils.substring("gs must not be null", (-3848), (-3848));
      assertEquals("", string0);
      assertNotNull(string0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (long) (-3848);
      longArray0[1] = (long) (-3848);
      String string1 = StringUtils.substringBetween("a+#e8r`NX!oB[:h\"!", "P(k'WN706,4Xv$d1:`", " is not in the range '0' - '9'");
      assertNull(string1);
      
      String string2 = StringUtils.repeat("a+#e8r`NX!oB[:h\"!", (-3848));
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      String string0 = StringUtils.trim((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, "");
      assertTrue(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) null, (String) null);
      assertEquals((-1), int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      assertNotNull(stringUtils0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "\r";
      int int1 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String[] stringArray0 = StringUtils.split((String) null, (String) null, (-1));
      assertNull(stringArray0);
      
      String string1 = StringUtils.wrapIfMissing("uYa (TIVB", '+');
      assertEquals("+uYa (TIVB+", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.capitalize("ZjO1<?9bF;JO]o9jl@");
      assertEquals("ZjO1<?9bF;JO]o9jl@", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.repeat("uYa (TIVB", 0);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.wrapIfMissing((String) null, '+');
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("^o*Mh+pT,C", 'p');
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.wrap("-Aavj{a/", '&');
      assertEquals("&-Aavj{a/&", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substring("Y", (-526));
      assertEquals("Y", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      Stack<String> stack0 = new Stack<String>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      String string0 = StringUtils.substring("', is neither of type Map.Entry nor an Array", (int) ',', (int) ',');
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[5] = "Go";
      stringArray0[2] = "6";
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(stringArray0[1]);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "6", "\n");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.rotate("The type must not be null", 25);
      assertEquals("The type must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "The chracter ", (CharSequence) "The chracter ");
      assertEquals(0, int0);
      
      String string0 = StringUtils.defaultIfBlank("&JW!!;GD6=xQ;?)9", "Na9F-");
      assertEquals("&JW!!;GD6=xQ;?)9", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      String string0 = StringUtils.trim("p>#67,}@lxBWR9v+(}");
      assertEquals("p>#67,}@lxBWR9v+(}", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviate("", "(r:q+Ws", (-234));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      String string0 = StringUtils.substring("Locale must not be null", 256);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      String string0 = StringUtils.rotate("Jm*`5{Mn.", 57);
      assertEquals("Mn.Jm*`5{", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("Jm*`5{Mn.", 160);
      assertEquals("Jm*`5{Mn.", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Mn.Jm*`5{", (CharSequence) "Jm*`5{Mn.", 0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.trim("p>#67,}@lxBWR9v+(}");
      assertEquals("p>#67,}@lxBWR9v+(}", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("", "(r:q+Ws", (-234));
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      charSequenceArray0[0] = (CharSequence) charBuffer0;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "p>#67,}@lxBWR9v+(}";
      charSequenceArray0[3] = (CharSequence) "Mn.Jm*`5{";
      charSequenceArray0[4] = (CharSequence) "Jm*`5{Mn.";
      charSequenceArray0[5] = (CharSequence) "p>#67,}@lxBWR9v+(}";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "(r:q+Ws";
      charSequenceArray0[8] = (CharSequence) "Mn.Jm*`5{";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Jm*`5{Mn.", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      String string0 = StringUtils.truncate("The character ", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 904, (-119));
      assertEquals((-1), int0);
      
      String string1 = StringUtils.stripEnd("+ZW#~:e= ", "+ZW#~:e= ");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("Te Array must not be ull", (-1), "");
      assertEquals("Te Array must not be ull", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Te Array must not be ull", (CharSequence) "Te Array must not be ull");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.ordinalIndexOf("The character ", "", 'q');
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("{");
      assertEquals("{", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.stripEnd("{", "{");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.chop("");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.chomp("{", "");
      assertEquals("{", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp("{");
      assertEquals("{", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.leftPad("~", 748, "");
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ~", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence~";
      String string1 = StringUtils.strip~");
      assertEquals("P7 K$-@[_ Q", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.rightPad("[BakL!(/gAYry>5POe", 748);
      assertEquals("[BakL!(/gAYry>5POestring2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      String string0 = StringUtils.truncate(">6S%L_M?O\t", 17, 1326);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      String string0 = StringUtils.leftPad("~", 624, "");
      assertEquals~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((float[]) null, 'S');
      assertNull(string1);
      
      String string2 = StringUtils.abbreviate((String) null, 624, 178);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      boolean boolean0 = treeSet0.add("The String must not be empty");
      assertTrue(treeSet0.contains("The String must not be empty"));
      assertTrue(boolean0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertTrue(treeSet0.contains("The String must not be empty"));
      assertNotNull(iterator0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean1 = StringUtils.isWhitespace(charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = StringUtils.wrapIfMissing("(r:q+Ws", "(r:q+Ws");
      assertEquals("(r:q+Ws", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("Search and Replace array lengths don't match: ");
      assertEquals("Search and Replace array lengths don't match: ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean2 = StringUtils.isEmpty("(r:q+Ws");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = StringUtils.containsNone((CharSequence) "]eE]_(z#", "]eE]_(z#");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "(r:q+Ws", (CharSequence) "]eE]_(z#");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      String string0 = StringUtils.truncate("The character ", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 921, (-85));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("+ZW#~:e= ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.truncate("MRi/O)XzRt", (-1474));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 2331;
      longArray0[2] = (long) 'C';
      longArray0[3] = (long) (-197);
      longArray0[4] = (long) (-197);
      String string0 = StringUtils.join(longArray0, 'C', 2331, 10);
      assertEquals(5, longArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new long[] {2331L, 0L, 67L, (-197L), (-197L)}, longArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      String string0 = StringUtils.chop("O7fG@ty~j+jq|!W]R");
      assertEquals("O7fG@ty~j+jq|!W]", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "O7fG@ty~j+jq|!W]";
      objectArray0[1] = (Object) "O7fG@ty~j+jq|!W]";
      objectArray0[2] = (Object) "O7fG@ty~j+jq|!W]";
      objectArray0[3] = (Object) "O7fG@ty~j+jq|!W]";
      String string1 = StringUtils.join(objectArray0, 'k');
      assertEquals(4, objectArray0.length);
      assertEquals("O7fG@ty~j+jq|!W]kO7fG@ty~j+jq|!W]kO7fG@ty~j+jq|!W]kO7fG@ty~j+jq|!W]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "O7fG@ty~j+jq|!W]kO7fG@ty~j+jq|!W]kO7fG@ty~j+jq|!W]kO7fG@ty~j+jq|!W]", 2066, 0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.reverseDelimited(";|gW)q", 'k');
      assertEquals(";|gW)q", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.substringAfterLast("RBOq>1vzAG)pX", 20);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.containsAny((CharSequence) "O7fG@ty~j+jq|!W]", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      String string0 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string0);
      assertNotNull(string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Minimum abbreviation width with offset is %d");
      assertEquals(44, charBuffer0.limit());
      assertEquals("Minimum abbreviation width with offset is %d", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(44, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(44, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(44, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "The Array must not b~";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[2] = (CharSequence) "The Array must not b~";
      boolean boolean0 = StringUtils.containsAny((CharSequence) "The Array must not b~", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.startsWith("...t is %d", "...t is %d");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string1 = StringUtils.deleteWhitespace("Minimum abbreviation width with offset is %d");
      assertEquals("Minimumabbreviationwidthwithoffsetis%d", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("W3IdC1QDO");
      assertEquals("w3idc1qdo", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = false;
      String string1 = StringUtils.join(booleanArray0, ':', 3900, 3900);
      assertEquals(1, booleanArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertNotNull(string1);
      
      String string2 = StringUtils.right("1_X", 3900);
      assertEquals("1_X", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      String string0 = StringUtils.join(booleanArray0, 'l');
      assertEquals(2, booleanArray0.length);
      assertEquals("trueltrue", string0);
      assertTrue(Arrays.equals(new boolean[] {true, true}, booleanArray0));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "-$^7");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate2.negate();
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate4, predicate2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertNotNull(predicate4);
      
      boolean[] booleanArray0 = new boolean[4];
      Predicate<Object> predicate5 = predicate1.negate();
      assertNotSame(predicate5, predicate3);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertNotNull(predicate5);
      
      String string0 = StringUtils.join(booleanArray0, ':', 0, 0);
      assertEquals(4, booleanArray0.length);
      assertEquals("", string0);
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0));
      assertNotNull(string0);
      
      String string1 = StringUtils.left("", 0);
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.stripToNull("', has a length less than 2");
      assertEquals("', has a length less than 2", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsWhitespace("', has a length less than 2");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      boolean boolean0 = StringUtils.containsWhitespace("1j^14YPT!/");
      assertFalse(boolean0);
      
      String string0 = StringUtils.repeat((String) null, (-3726));
      assertNull(string0);
      
      Locale locale0 = Locale.US;
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("1j^14YPT!/"));
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Locale locale1 = Locale.JAPAN;
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      String string1 = locale0.getDisplayVariant(locale1);
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale1.getISO3Language());
      assertEquals("JP", locale1.getCountry());
      assertEquals("ja", locale1.getLanguage());
      assertEquals("ja_JP", locale1.toString());
      assertEquals("JPN", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", string1);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(string1);
      
      String string2 = StringUtils.lowerCase("Qpr~6Pg&VC", locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotSame(locale0, locale1);
      assertEquals("qpr~6pg&vc", string2);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "a|2{wm2q}Z:>8MO5-";
      String string0 = StringUtils.abbreviateMiddle("P7 K$-@[_ Q", "P7 K$-@[_ Q", 11);
      assertEquals("P7 K$-@[_ Q", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.containsWhitespace(charSequenceArray0[1]);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviateMiddle("P7 K$-@[_ Q", (String) null, 11);
      assertEquals("P7 K$-@[_ Q", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale locale0 = new Locale("", "");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      String string1 = StringUtils.lowerCase("", locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-81);
      byteArray0[2] = (byte) (-96);
      byteArray0[3] = (byte)127;
      byteArray0[4] = (byte) (-118);
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertNotNull(charset0);
      
      String string2 = StringUtils.toEncodedString(byteArray0, charset0);
      assertEquals(5, byteArray0.length);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("\u0003\uFFFD\uFFFD\uFFFD", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new byte[] {(byte)3, (byte) (-81), (byte) (-96), (byte)127, (byte) (-118)}, byteArray0);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("org.apache.commons.lang3.LocaleUtils");
      assertEquals("ORG.APACHE.COMMONS.LANG3.LOCALEUTILS", string0);
      assertNotNull(string0);
      
      int[] intArray0 = StringUtils.toCodePoints("ORG.APACHE.COMMONS.LANG3.LOCALEUTILS");
      assertEquals(36, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.substringBetween("\n", "ORG.APACHE.COMMONS.LANG3.LOCALEUTILS", "The StrWW %!+IThe StrWW %!+I");
      assertNull(string1);
      
      String string2 = StringUtils.overlay("org.apache.commons.lang3.LocaleUtils", "Object varargs must not be null", 5555, 5555);
      assertEquals("org.apache.commons.lang3.LocaleUtilsObject varargs must not be null", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      String string0 = StringUtils.replacePattern((String) null, (String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.defaultIfEmpty((String) null, ")?r*bq\"\")");
      assertEquals(")?r*bq\"\")", string1);
      assertNotNull(string1);
      
      String string2 = "', is neither of type Map.Entry nor an Array";
      try { 
        StringUtils.getBytes("Uu5HmgIAF]ZCh.qw_Re", "', is neither of type Map.Entry nor an Array");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "...";
      stringArray0[1] = "Go";
      stringArray0[2] = "";
      stringArray0[3] = "-hCXnntwwf95-";
      stringArray0[4] = "The type must not be null";
      stringArray0[5] = "d52},NH|V&&g5{OuaGu";
      stringArray0[6] = "The type must not be null";
      stringArray0[7] = "";
      stringArray0[8] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(9, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase(" ");
      assertFalse(boolean0);
      
      int int0 = StringUtils.compareIgnoreCase("", (String) null, false);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceChars("Aborting to protect against StackOverflowError - output of one loop is the input of another", (String) null, "");
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Aborting to protect against StackOverflowError - output of one loop is the input of another", 2929);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'p';
      charArray0[1] = 'Q';
      charArray0[2] = 'z';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("pQz", string0);
      assertArrayEquals(new char[] {'p', 'Q', 'z'}, charArray0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("pQz");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      String string0 = StringUtils.replaceChars("-Zm", "-Zm", "-Zm");
      assertEquals("-Zm", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("-Zm", 1);
      assertEquals("m", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints("-Zm");
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {45, 90, 109}, intArray0);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string0);
      
      int int0 = StringUtils.compareIgnoreCase("Rwo'H\u0006", (String) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[0];
      String string0 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNull(string0);
      
      String[] stringArray1 = StringUtils.substringsBetween("Array element ", (String) null, "(r:q+Ws6");
      assertNull(stringArray1);
      
      String string1 = StringUtils.replaceChars("X&_C@s<Dhz)7Nh;", "Array element ", "WK.6e2ovX$$XC");
      assertEquals("X&_C@s<Dhz)7Nh;", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      String string0 = StringUtils.strip("n;$#DlV9*WH", "n;$#DlV9*WH");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "n;$#DlV9*WH", (CharSequence) "", (-488));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("yGC7ZV1", "n;$#DlV9*WH", true);
      assertEquals(11, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      String string0 = StringUtils.strip("pU8p9ob");
      assertEquals("pU8p9ob", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("IC`V&1CeQeAxmU", 15);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("IC`V&1CeQeAxmU");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "IC`V&1CeQeAxmU", 15);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      boolean boolean0 = StringUtils.isMixedCase("~");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("o90qqb\"'l,");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("", "", true);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.join((long[]) null, 'X', 4, 2607);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("~", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.appendIfMissing("o90qqb\"'l,", "~", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals("o90qqb\"'l,~", string1);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("o90qqb\"'l,");
      assertEquals(10, intArray0.length);
      assertArrayEquals(new int[] {111, 57, 48, 113, 113, 98, 34, 39, 108, 44}, intArray0);
      assertNotNull(intArray0);
      
      boolean boolean2 = StringUtils.equalsAny("o90qqb\"'l,", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      String[] stringArray0 = StringUtils.split((String) null, "o90qqb\"'l,~");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, "yJ");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      String string0 = StringUtils.remove("}{6RNPp<)Ooa", "}{6RNPp<)Ooa");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "...";
      stringArray0[1] = "Go";
      String string0 = StringUtils.replace("Go", "T", "@!", 5);
      assertEquals("Go", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.appendIfMissingIgnoreCase("...", "...", stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals("...", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, 3059, 3059);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "-$^7");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("-$^7", "-$^7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "-$^7", (-1), (-1));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      String string0 = StringUtils.appendIfMissing("-$^7", "-$^7", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals("-$^7", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "-$^7", charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      String string0 = StringUtils.wrap((String) null, "yJ");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      String string1 = StringUtils.replace("", (String) null, "yJ", 5);
      assertEquals("", string1);
      assertNotNull(string1);
      
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "yJ";
      String string2 = StringUtils.appendIfMissingIgnoreCase("@0h,5Rrc8cVKzE", "@0h,5Rrc8cVKzE", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals("@0h,5Rrc8cVKzE", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", 'D');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removePattern(" ", " ");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(" ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(", '", "~", 321, (-1349));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The String must not be empty");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(11, stringArray0.length);
      assertEquals("The", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The String must not be empty", (CharSequence) "The");
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfter("The", "The String must not be empty");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.uncapitalize("The");
      assertEquals("the", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "The", "The String must not be empty");
      assertFalse(boolean0);
      
      String string3 = StringUtils.removeStart("", "");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "the");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      String string0 = StringUtils.replacePattern("1!QP~isYvl~7=Ts", "1!QP~isYvl~7=Ts", "1!QP~isYvl~7=Ts");
      assertEquals("1!QP~isYvl~7=Ts", string0);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("1!QP~isYvl~7=Ts", "1!QP~isYvl~7=Ts");
      assertEquals(1.0, double0, 0.01);
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short) (-398);
      shortArray0[1] = (short)421;
      shortArray0[2] = (short) (-3572);
      shortArray0[3] = (short)0;
      String string1 = StringUtils.join(shortArray0, 'd', 50, (-1972));
      assertEquals(4, shortArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new short[] {(short) (-398), (short)421, (short) (-3572), (short)0}, shortArray0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.firstNonEmpty((CharSequence[]) null);
      assertNull(charSequence0);
      
      String string0 = "JD6@\\CXAkI~|";
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "JD6@CXAkI~|", "JD6@CXAkI~|");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("JD6@CXAkI~|");
      assertEquals(7, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Iterable<?>) null, "");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "IoXF");
      assertFalse(treeSet0.contains("IoXF"));
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumeric("IoXF");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("/g^V", "/g^V");
      assertEquals(1.0, double0, 0.01);
      
      String string0 = StringUtils.stripStart("/g^V", "9.cQTB");
      assertEquals("/g^V", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      String string0 = StringUtils.join((Iterable<?>) vector0, "");
      assertFalse(vector0.contains(""));
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      String string0 = StringUtils.difference("~", "~");
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>(587);
      assertFalse(vector0.contains(587));
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(587, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String string0 = StringUtils.join((Iterable<?>) vector0, "");
      assertFalse(vector0.contains(587));
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(587, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("", string0);
      assertNotNull(string0);
      
      char char0 = '4';
      boolean boolean0 = vector0.add((Object) "/hJPac1P#bINR8iMmb");
      assertTrue(vector0.contains("/hJPac1P#bINR8iMmb"));
      assertFalse(vector0.contains(587));
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[/hJPac1P#bINR8iMmb]", vector0.toString());
      assertEquals(587, vector0.capacity());
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) vector0;
      objectArray0[1] = (Object) vector0;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      vector0.replaceAll(unaryOperator0);
      assertTrue(vector0.contains("/hJPac1P#bINR8iMmb"));
      assertFalse(vector0.contains(587));
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[/hJPac1P#bINR8iMmb]", vector0.toString());
      assertEquals(587, vector0.capacity());
      
      objectArray0[2] = (Object) vector0;
      Object[] objectArray1 = vector0.toArray(objectArray0);
      assertTrue(vector0.contains("/hJPac1P#bINR8iMmb"));
      assertFalse(vector0.contains(587));
      assertEquals(3, objectArray0.length);
      assertEquals(3, objectArray1.length);
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals("[/hJPac1P#bINR8iMmb]", vector0.toString());
      assertEquals(587, vector0.capacity());
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      String[] stringArray0 = StringUtils.split("", '4');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertEquals((-1), int0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String[] stringArray1 = StringUtils.split("{");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string1 = StringUtils.reverse("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("{", "{", 587, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "IoXF");
      assertFalse(treeSet0.contains("IoXF"));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceOnce("", "IoXF", "");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.abbreviate("Minimum abbreviation width with offset is %d", 697, 10);
      assertEquals("...t is %d", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.join((Iterable<?>) treeSet0, 'c');
      assertFalse(treeSet0.contains("IoXF"));
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      String string0 = StringUtils.truncate("", 1417);
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = ' ';
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Object[]) null, 'S');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "-$^7", (-1), (-1));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.reverseDelimited((String) null, '8');
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      String string1 = StringUtils.appendIfMissing(",.q9G'-IEL>Ecxgvih", "-$^7", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(",.q9G'-IEL>Ecxgvih-$^7", string1);
      assertNotNull(string1);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) ",.q9G'-IEL>Ecxgvih-$^7", charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      Object[] objectArray0 = new Object[3];
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      String[] stringArray0 = StringUtils.split("", '4');
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[2];
      longArray0[0] = 35L;
      boolean boolean0 = StringUtils.isAlpha("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      String string0 = StringUtils.chop("jZ*WH");
      assertEquals("jZ*W", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("jZ*WH");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "jZ*WH", (CharSequence) "jZ*W");
      assertEquals(0, int0);
      
      String string1 = StringUtils.defaultIfBlank("jZ*W", "01e/,.Od9");
      assertEquals("jZ*W", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      int int0 = StringUtils.lastIndexOf((CharSequence) "~", 108, 3);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.reverseDelimited(",.q9G'-IEL>Ecxgvih", '8');
      assertEquals(",.q9G'-IEL>Ecxgvih", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "RBOq>1vzAG)pX", (CharSequence) "RBOq>1vzAG)pX");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The StrWW %!+I");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeStart("The StrWW %!+I", "The StrWW %!+I");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The StrWW %!+I", (CharSequence) "");
      assertEquals(14, int0);
      
      String string1 = StringUtils.capitalize("");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("The StrWW %!+I", " ", 15);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string2 = StringUtils.toRootLowerCase("The StrWW %!+I");
      assertEquals("the strww %!+i", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace("The StrWW %!+I");
      assertFalse(boolean0);
      
      String string3 = StringUtils.replaceIgnoreCase(" ", "Supplied value must be a valid byte literal between -32768 and 32767: [%]@Supplied value must be a valid byte literal between -32768 and 32767: [", (String) null, 15);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray1);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals((-1), int1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.leftPad("~", 818, "");
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ~", string0);
      assertNotNull(string0);
      
      charSequenceArray0[0] = (CharSequence~";
      String string1 = StringUtils.unwrap~", ',');
      assertEquals~", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = 'n';
      charArray0[2] = ',';
      String string2 = StringUtils.join(charArray0, 'n');
      assertEquals(3, charArray0.length);
      assertEquals(",nnn,", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new char[] {',', 'n', ','}, charArray0);
      assertNotNull(string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("9HXbS:OHk>]+Pw");
      assertEquals(11, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.toRootUpperCase("P7 K$-@[_ Q");
      assertEquals("P7 K$-@[_ Q", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      String string4 = StringUtils.chomp~");
      assertEquals~", string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (int) ',';
      intArray0[1] = (int) ',';
      intArray0[2] = (int) 'n';
      intArray0[3] = (int) ',';
      intArray0[4] = (int) ',';
      String string5 = StringUtils.join(intArray0, ',', 2299, 49);
      assertEquals(5, intArray0.length);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertArrayEquals(new int[] {44, 44, 110, 44, 44}, intArray0);
      assertNotNull(string5);
      
      boolean boolean0 = StringUtils.isEmpty("");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence~", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The StrWW %!+I");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.upperCase("The StrWW %!+I");
      assertEquals("THE STRWW %!+I", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", (String) null, 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      String string0 = StringUtils.chomp((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.removeStart("Rr]SK~Sg%gB", "Rr]SK~Sg%gB");
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.join((char[]) null, 'D');
      assertNull(string2);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("/ing must not be empty");
      assertEquals(10, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      String string3 = StringUtils.toRootUpperCase((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.chomp((String) null);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The StrWW %!+I");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeStart("The StrWW %!+I", "The StrWW %!+I");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The StrWW %!+I", (CharSequence) "");
      assertEquals(14, int0);
      
      String string1 = StringUtils.uncapitalize("a|AXx");
      assertEquals("a|AXx", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String[] stringArray1 = StringUtils.split("a|AXx", "");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.join((Object[]) stringArray0, 'h');
      assertEquals(8, stringArray0.length);
      assertNotSame(stringArray0, stringArray1);
      assertEquals("Theh hStrhWWh h%!h+hI", string2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'h';
      String string3 = StringUtils.join(charArray0, 'h');
      assertEquals(1, charArray0.length);
      assertEquals("h", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new char[] {'h'}, charArray0);
      assertNotNull(string3);
      
      String string4 = StringUtils.joinWith("Exception cloning Cloneable type ", stringArray1);
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertEquals("a|AXx", string4);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)25;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-91);
      String string0 = StringUtils.join(byteArray0, '3');
      assertEquals(3, byteArray0.length);
      assertEquals("253953-91", string0);
      assertArrayEquals(new byte[] {(byte)25, (byte)95, (byte) (-91)}, byteArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.lowerCase("Object varargs must not be null");
      assertEquals("object varargs must not be null", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      String[] stringArray0 = new String[9];
      boolean boolean0 = StringUtils.isAllLowerCase("%");
      assertFalse(boolean0);
      
      String string0 = StringUtils.lowerCase("h;ZbZ;<Z8q=");
      assertEquals("h;zbz;<z8q=", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isNumeric("h;zbz;<z8q=");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)48;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte)48;
      byteArray0[3] = (byte) (-41);
      byteArray0[4] = (byte)56;
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, 'C', (int) (byte)48, (int) (byte)56);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      String string0 = StringUtils.wrap("l[Ry^VTP)nvm", 'n');
      assertEquals("nl[Ry^VTP)nvmn", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'n';
      String string1 = StringUtils.join(charArray0, 'U', 3098, 3098);
      assertEquals(2, charArray0.length);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'n', 'n'}, charArray0);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("y4_EP", "KWdFSO5$J6");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.stripToNull("y4_EP");
      assertEquals("y4_EP", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("_");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      String string0 = StringUtils.rightPad("'U@%k,Fn|JnM~", (-24));
      assertEquals("'U@%k,Fn|JnM~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.LF;
      assertEquals("\n", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "\n", "'U@%k,Fn|JnM~");
      assertFalse(boolean0);
      
      String string2 = StringUtils.toRootLowerCase("QwMnf#W4a#/TEH");
      assertEquals("qwmnf#w4a#/teh", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.replaceIgnoreCase("*-iQZlzXz|+N2w", "'U@%k,Fn|JnM~", "l");
      assertEquals("*-iQZlzXz|+N2w", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      int int0 = StringUtils.length("0J@;Q<|");
      assertEquals(7, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("*<&ted&:j}D$<$t", ',');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The StrWW %!+I");
      assertEquals(8, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("The", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The StrWW %!+I", (CharSequence) "The");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceIgnoreCase("The StrWW %!+I", "The StrWW %!+I", "The");
      assertEquals("The", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("The StrWW %!+I", 0);
      assertEquals("The StrWW %!+I", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals("The", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string0 = StringUtils.leftPad("b>^o3pp}is", 3900);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[1] = "b>^o3pp}is";
      stringArray0[2] = "b>^o3pp}is";
      stringArray0[4] = "W3IdC1QDO";
      stringArray0[6] = string0;
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("b>^o3pp}is", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad(stringArray0[5], 1, 'U');
      assertEquals(7, stringArray0.length);
      assertNull(string2);
      
      String string3 = StringUtils.rightPad("b>^o3pp}is", (-1568), 'v');
      assertEquals("b>^o3pp}is", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.center("", 57, "");
      assertEquals("                                                         ", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      String string0 = StringUtils.trimToNull("'U@%k,Fn|JnM~");
      assertEquals("'U@%k,Fn|JnM~", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrap("'U@%k,Fn|JnM~", "'U@%k,Fn|JnM~");
      assertEquals("'U@%k,Fn|JnM~'U@%k,Fn|JnM~'U@%k,Fn|JnM~", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isAlphanumeric("'U@%k,Fn|JnM~'U@%k,Fn|JnM~'U@%k,Fn|JnM~");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "'U@%k,Fn|JnM~'U@%k,Fn|JnM~'U@%k,Fn|JnM~", "'U@%k,Fn|JnM~");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string2 = StringUtils.toRootLowerCase("'U@%k,Fn|JnM~");
      assertEquals("'u@%k,fn|jnm~", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean2 = StringUtils.isAlphaSpace("'U@%k,Fn|JnM~");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = StringUtils.isAlphaSpace("'U@%k,Fn|JnM~");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
  }

  @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "The String must not be empty", (CharSequence) "The String must not be empty");
      assertEquals("The String must not be empty", charSequence0);
      assertNotNull(charSequence0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The String must not be empty", (CharSequence) "The String must not be empty");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("W3IdC1QDO");
      assertEquals("w3idc1qdo", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.leftPad("b>^o3pp}is", 3900);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "b>^o3pp}is";
      stringArray0[1] = "b>^o3pp}is";
      stringArray0[2] = "b>^o3pp}is";
      stringArray0[3] = "w3idc1qdo";
      stringArray0[4] = "W3IdC1QDO";
      stringArray0[5] = "w3idc1qdo";
      stringArray0[6] = string1;
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertEquals("b>^o3pp}is", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      String string3 = StringUtils.leftPad("w3idc1qdo", 1, 'U');
      assertEquals("w3idc1qdo", string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = StringUtils.rightPad("b>^o3pp}is", (-1568), 'v');
      assertEquals("b>^o3pp}is", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      String string0 = StringUtils.LF;
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", "\n");
      assertEquals(0, int0);
      
      String string1 = StringUtils.normalizeSpace("\n");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOf((CharSequence) "\n", 0);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.compare("P7A:", "+WALncp18DS+p3k+WALncp18DS+p3k(r:q+Ws", false);
      assertEquals(37, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string2 = StringUtils.unwrap("", ")=~kn71O");
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("+WALncp18DS+p3k+WALncp18DS+p3k(r:q+Ws", "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'P';
      charArray0[3] = 'F';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("P\u0000\u0000F\u0000", string0);
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000', 'F', '\u0000'}, charArray0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "P\u0000\u0000F\u0000", charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'P', '\u0000', '\u0000', 'F', '\u0000'}, charArray0);
      
      boolean boolean0 = StringUtils.isMixedCase("P\u0000\u0000F\u0000");
      assertFalse(boolean0);
      
      String string1 = StringUtils.overlay("P\u0000\u0000F\u0000", "P\u0000\u0000F\u0000", 0, 0);
      assertEquals("P\u0000\u0000F\u0000P\u0000\u0000F\u0000", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "P\u0000\u0000F\u0000P\u0000\u0000F\u0000", (CharSequence) "P\u0000\u0000F\u0000P\u0000\u0000F\u0000");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[1] = 'Q';
      charArray0[2] = 'z';
      String string0 = StringUtils.valueOf(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("\u0000Qz", string0);
      assertArrayEquals(new char[] {'\u0000', 'Q', 'z'}, charArray0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase(" PeOveD'(`|f5", "\u0000Qz");
      assertEquals(" PeOveD'(`|f5", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.mid(" PeOveD'(`|f5", 892, 3);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "(V*rn(^", "*KPd%-5}KH`&nh");
      assertEquals(2, int0);
      
      String string3 = StringUtils.truncate("q$&", 3);
      assertEquals("q$&", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      
      boolean boolean0 = StringUtils.isAlphanumeric("(V*rn(^");
      assertFalse(boolean0);
      
      String string4 = StringUtils.substringAfter("q$&", 196);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", 196, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      String string0 = "";
      String string1 = StringUtils.replacePattern("", "", "{}");
      assertEquals("{}", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "{}", (char[]) null);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("{}", "");
      assertTrue(boolean0);
      
      int int1 = 0;
      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "{}", (CharSequence) "{}", 0);
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", (String) null, 3915);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[1];
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(2358);
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(2358, charBuffer1.remaining());
      assertEquals(2358, charBuffer1.capacity());
      assertFalse(charBuffer1.isDirect());
      assertEquals(2358, charBuffer1.length());
      assertEquals(2358, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertNotSame(charBuffer1, charBuffer0);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      
      // Undeclared exception!
      try { 
        charBuffer0.put(charBuffer1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", "le%|}w^;:_-)c1Z7");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.normalizeSpace((String) null);
      assertNull(string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = null;
      stringArray0[1] = "\n";
      stringArray0[2] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      String string0 = StringUtils.remove("\n", "\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string1 = StringUtils.stripEnd("-KvzSI]", "\n");
      assertEquals("-KvzSI]", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = StringUtils.substringAfter("", "");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", (-1), (-1));
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      String string0 = StringUtils.SPACE;
      assertEquals(" ", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = '{';
      charArray0[2] = ' ';
      charArray0[3] = '#';
      charArray0[4] = '-';
      charArray0[5] = '.';
      charArray0[6] = '3';
      charArray0[7] = 'm';
      int int0 = StringUtils.indexOfAny((CharSequence) " ", charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {'f', '{', ' ', '#', '-', '.', '3', 'm'}, charArray0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range= 
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.upperCase((String) null);
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "IoXF");
      assertFalse(treeSet0.contains("IoXF"));
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chop("");
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate(".", (-6714));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[1] = object1;
      String string0 = StringUtils.join(objectArray0, '_');
      assertEquals(2, objectArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "-$^7");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.negate();
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate0.and(predicate2);
      assertNotSame(predicate4, predicate3);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertNotNull(predicate4);
      
      Predicate<Object> predicate5 = predicate0.and(predicate0);
      assertNotSame(predicate5, predicate4);
      assertNotSame(predicate5, predicate3);
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertNotNull(predicate5);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("-$^7", 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      String string0 = StringUtils.abbreviate("P(k'WN706,4Xv$d1:`", 13);
      assertEquals("P(k'WN706,...", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.startsWith("gs must not be null", "P(k'WN706,...");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("]5Y(1Ax8,2mBA}q34", 1326);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      String string0 = StringUtils.join(doubleArray0, '\\');
      assertEquals(1, doubleArray0.length);
      assertEquals("1.0", string0);
      assertArrayEquals(new double[] {1.0}, doubleArray0, 0.01);
      assertNotNull(string0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(treeSet0);
      
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      assertFalse(treeSet0.contains(string0));
      assertNotNull(iterator0);
      
      String string1 = StringUtils.join(iterator0, " ");
      assertFalse(treeSet0.contains(" "));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric("1.0");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "-$^7");
      assertNotNull(predicate0);
      
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      assertFalse(predicate1.equals((Object)predicate0));
      assertNotNull(predicate1);
      
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertNotNull(predicate2);
      
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate3, predicate1);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertNotNull(predicate3);
      
      Predicate<Object> predicate4 = predicate2.negate();
      assertNotSame(predicate1, predicate3);
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertNotNull(predicate4);
      
      Predicate<Object> predicate5 = predicate4.or(predicate2);
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate2, predicate5);
      assertNotSame(predicate5, predicate2);
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertNotNull(predicate5);
      
      boolean[] booleanArray0 = new boolean[4];
      Predicate<Object> predicate6 = predicate1.negate();
      assertNotSame(predicate1, predicate3);
      assertNotSame(predicate6, predicate4);
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate2));
      assertNotNull(predicate6);
      
      String string0 = StringUtils.stripToNull("', has a length less than 2");
      assertEquals("', has a length less than 2", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("', has a length less than 2");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsWhitespace("', has a length less than 2");
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat("-$^7", (-278));
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      String string0 = StringUtils.repeat("Mini9*WH{N_", "Mini9*WH{N_", 2028);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf(string0, "Mini9*WH{N_", 2028);
      assertEquals(22297, int0);
      
      // Undeclared exception!
      StringUtils.splitPreserveAllTokens(string0, "", 2028);
  }

  @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "...";
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("...");
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      String string0 = StringUtils.substring("Minimum abbreviation width is %d", 1);
      assertEquals("inimum abbreviation width is %d", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf("inimum abbreviation width is %d", "Minimum abbreviation width is %d", 1);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("inimum abbreviation width is %d", "inimum abbreviation width is %d", 1);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.substringBeforeLast("", "Minimum abbreviation width is %d");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.substring("Minimum abbreviation width is %d", 1, 1);
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("inimum abbreviation width is %d", "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("Minimum abbreviation width is %d", "");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("Aborting to protect against StackOverflowError - output of one loop is the input of another", '^');
      assertEquals(1, stringArray1.length);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.repeat('v', 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence[]) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = StringUtils.wrapIfMissing("", "");
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      String string2 = StringUtils.join(booleanArray0, 'v');
      assertEquals(5, booleanArray0.length);
      assertEquals("falsevfalsevtruevfalsevfalse", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertTrue(Arrays.equals(new boolean[] {false, false, true, false, false}, booleanArray0));
      assertNotNull(string2);
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      assertFalse(arrayDeque0.contains(""));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>();
      assertFalse(arrayDeque1.contains(0));
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotNull(arrayDeque1);
      
      boolean boolean2 = arrayDeque0.retainAll(arrayDeque1);
      assertFalse(arrayDeque0.contains(""));
      assertFalse(arrayDeque1.contains(0));
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      // Undeclared exception!
      try { 
        arrayDeque0.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The String must not be empty");
      StringUtils.firstNonEmpty(stringArray0);
      StringUtils.lastIndexOf((CharSequence) "The String must not be empty", (CharSequence) "The");
      StringUtils.substringAfter((String) null, "{");
      StringUtils.uncapitalize("{");
      StringUtils.equalsAnyIgnoreCase((CharSequence) null, stringArray0);
      StringUtils.splitByWholeSeparator("The", "{");
      StringUtils.join((byte[]) null, 'P');
      StringUtils.strip((String) null);
      StringUtils.containsNone((CharSequence) null, "{");
      StringUtils.removeStart("pU8p9ob", (String) null);
      StringUtils.indexOf((CharSequence) null, (CharSequence) "The String must not be empty", 1769);
      String string0 = StringUtils.mid((String) null, 0, 1769);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "...";
      stringArray0[1] = "Go";
      stringArray0[2] = "6";
      stringArray0[3] = "-hCXnntwwf95-";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "The type must not be null";
      stringArray1[1] = "-hCXnntwwf95-";
      stringArray1[2] = "-hCXnntwwf95-";
      stringArray1[3] = "Go";
      stringArray1[4] = "...";
      stringArray1[5] = "-hCXnntwwf95-";
      stringArray1[6] = "Go";
      stringArray1[7] = "The type must not be null";
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertEquals(8, stringArray2.length);
      assertNotSame(stringArray2, stringArray1);
      
      boolean boolean0 = StringUtils.isNumericSpace("6");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      Object[] objectArray0 = new Object[4];
      String string0 = StringUtils.repeat('%', 1351);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      StringUtils.replaceOnce("yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb");
      StringUtils.endsWithIgnoreCase("yoU4kcwT-4WvSGM!Rb", "yoU4kcwT-4WvSGM!Rb");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[1] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[2] = (Object) "yoU4kcwT-4WvSGM!Rb";
      objectArray0[3] = (Object) "yoU4kcwT-4WvSGM!Rb";
      short[] shortArray0 = new short[0];
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, 'd', (int) (short) (-3572), (-1972));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3572
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-hCXnntwwf95-";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      boolean boolean0 = StringUtils.isNumericSpace("The type must not be null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      String string0 = StringUtils.mid("1j^14YPT!/", Integer.MIN_VALUE, 1);
      assertNotNull(string0);
      assertEquals("1", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", "");
      assertEquals(1, stringArray0.length);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)45;
      shortArray0[1] = (short)0;
      shortArray0[2] = (short)48;
      shortArray0[3] = (short)0;
      shortArray0[4] = (short)5096;
      shortArray0[5] = (short)0;
      shortArray0[6] = (short)1580;
      StringUtils.join(shortArray0, '\"', 54, (-2431));
      String string1 = StringUtils.repeat('\"', 1764);
      boolean boolean0 = StringUtils.isNumericSpace(string1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      String string0 = StringUtils.repeat("Minimum abbreviation ws ", "Minimum abbreviation ws ", (-60));
      int int0 = StringUtils.ordinalIndexOf("", "Minimum abbreviation ws ", (-60));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "", (-60));
      assertNotNull(stringArray0);
      
      StringUtils.isNoneBlank(stringArray0);
      String string1 = StringUtils.substring("Minimum abbreviation ws ", (-60), (-60));
      assertTrue(string1.equals((Object)string0));
      
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Object, ?>) unaryOperator1);
      Integer integer0 = new Integer(3916);
      unaryOperator0.apply(integer0);
      Vector<Object> vector0 = new Vector<Object>();
      vector0.replaceAll(unaryOperator0);
      vector0.toArray((Object[]) stringArray0);
      String[] stringArray1 = StringUtils.split("Minimum abbreviation ws ", '8');
      assertEquals(1, stringArray1.length);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.reverse("zKLn");
      assertEquals("nLKz", string2);
      
      String string3 = StringUtils.abbreviate("O7fG@ty~j+jq|!W]R", "", (-60), (-1));
      assertEquals("O7fG@ty~j+jq|!W]R", string3);
      
      long[] longArray0 = new long[0];
      String string4 = StringUtils.join(longArray0, '8', (-1), (-60));
      assertTrue(string4.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      StringUtils.substringBeforeLast("*<&ted&:j}D$<$t", "0J@;Q<|");
      StringUtils.isNoneBlank((CharSequence[]) null);
      StringUtils.substring("*<&ted&:j}D$<$t", 49, 49);
      StringUtils.length("0J@;Q<|");
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("B.LkVjiZT:", '^');
      StringUtils.equalsIgnoreCase("*<&ted&:j}D$<$t", "");
      StringUtils.endsWithIgnoreCase("*<&ted&:j}D$<$t", "0J@;Q<|");
      StringUtils.splitPreserveAllTokens("*<&ted&:j}D$<$t", ',');
      StringUtils.endsWithAny("*<&ted&:j}D$<$t", stringArray0);
      StringUtils.chomp("U,%S}wu");
      String string0 = StringUtils.removeStartIgnoreCase((String) null, "Cloneable type ");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      StringUtils.startsWith("", "gs must not be null");
      String string0 = StringUtils.truncate("d6S%L_SUiy?O\t", 16, 1326);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "...";
      stringArray0[1] = "%";
      stringArray0[2] = "6";
      stringArray0[3] = "-hCXnntwwf95-";
      String[] stringArray1 = new String[10];
      stringArray1[0] = "The type must not be null";
      stringArray1[1] = "-hCXnntwwf95-";
      stringArray1[2] = "-hCXnntwwf95-";
      stringArray1[3] = "Go";
      stringArray1[4] = "...";
      stringArray1[5] = "-hCXnntwwf95-";
      stringArray1[6] = "%";
      stringArray1[7] = "The type must not be null";
      String[] stringArray2 = StringUtils.stripAll(stringArray1);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(10, stringArray2.length);
      
      boolean boolean0 = StringUtils.isNumericSpace("6");
      assertTrue(boolean0);
      
      String string0 = StringUtils.replaceOnceIgnoreCase("Go", "Aborting to protect against StackOverflowError - output of one loop is the input of another", "Object varargs must not be null");
      String string1 = StringUtils.getIfBlank("p{InCombiningDiacriticalMarks}+", (Supplier<String>) null);
      assertNotNull(string1);
      
      String string2 = StringUtils.leftPad("Go", (-1379));
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("~");
      assertEquals("~", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("hndIA3S]`", "{N_");
      assertEquals("hndIA3S]`", string1);
      
      StringUtils.containsNone((CharSequence) "~", "hndIA3S]`");
      boolean boolean0 = StringUtils.isWhitespace("~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test817()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Iterator<String> iterator0 = treeSet0.descendingIterator();
      StringUtils.join(iterator0, "IoXF");
      StringUtils.chop("");
      String string0 = StringUtils.replaceOnce("", "IoXF", "");
      String string1 = StringUtils.truncate("\"c", 0);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrapIfMissing("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      
      String string3 = StringUtils.replaceAll("", "Arguments cannot both be null", "org.apache.commons.lang3.ArrayUtils");
      assertEquals("", string3);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", '^');
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test818()  throws Throwable  {
      StringUtils.split((String) null, 'e');
      StringUtils.chomp((String) null);
      StringUtils.wrapIfMissing(",%b~c", (String) null);
      StringUtils.splitByWholeSeparatorPreserveAllTokens(",%b~c", "(>@lHIL", (-1579));
      StringUtils.toCodePoints((CharSequence) null);
      StringUtils.equals((CharSequence) ",%b~c", (CharSequence) ",%b~c");
      StringUtils.rightPad((String) null, 102);
      StringUtils.trimToEmpty("(>@lHIL");
      StringUtils.containsOnly((CharSequence) "(>@lHIL", "Array and element cannot both be null");
      StringUtils.unwrap((String) null, 'e');
      StringUtils.indexOfDifference((CharSequence) null, (CharSequence) ",%b~c");
      char[] charArray0 = new char[4];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      StringUtils.containsNone((CharSequence) "Array and element cannot both be null", charArray0);
      StringUtils.repeat('e', 11);
      // Undeclared exception!
      try { 
        StringUtils.truncate("Supplied value must be a valid byte literal between -128 and 127: [", 0, (-1312));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test819()  throws Throwable  {
      StringUtils.substringAfterLast("offset cannot be negative", "offset cannot be negative");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      TreeSet<Locale> treeSet0 = new TreeSet<Locale>();
      Locale.lookup(vector0, treeSet0);
      StringUtils.lowerCase("offset cannot be negative", (Locale) null);
      StringUtils.countMatches((CharSequence) "offset cannot be negative", (CharSequence) "offset cannot be negative");
      StringUtils.rightPad((String) null, (-1491), '3');
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "offset cannot be negative";
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      StringUtils.equalsAny("offset cannot be negative", charSequenceArray0);
      String string0 = StringUtils.join((Object[]) null, (String) null, (-2239), (-2239));
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test820()  throws Throwable  {
      String[] stringArray0 = new String[6];
      String string0 = StringUtils.strip("i?[Z.x*B");
      assertEquals("i?[Z.x*B", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "i?[Z.x*B", (int) (byte) (-73), (-1566));
      assertNotNull(string1);
      
      String string2 = StringUtils.replaceEach("", stringArray0, stringArray0);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test821()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      StringUtils.join(doubleArray0, 'Y');
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("1.0", (-475));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test822()  throws Throwable  {
      StringUtils.substringBefore("", 32);
      StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");
      StringUtils.rightPad("", 0, '1');
      StringUtils.isBlank("");
      StringUtils.repeat('1', 32);
      StringUtils.isNotBlank("");
      StringUtils.splitByCharacterTypeCamelCase("r/v%? w.a/");
      try { 
        StringUtils.getBytes("r/v%? w.a/", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test823()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", '\u001B');
      assertNotNull(stringArray1);
      assertEquals(0, stringArray1.length);
      
      String string0 = StringUtils.removePattern("0o=<7JhwXUjcI", "\n");
      assertEquals("0o=<7JhwXUjcI", string0);
  }

  @Test(timeout = 4000)
  public void test824()  throws Throwable  {
      long[] longArray0 = new long[5];
      longArray0[1] = (long) 24;
      longArray0[2] = (long) 24;
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string0 = StringUtils.getIfBlank("\n", supplier0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test825()  throws Throwable  {
      String string0 = StringUtils.truncate("", 1417);
      assertNotNull(string0);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      String string1 = StringUtils.abbreviate("", (-1));
      assertTrue(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test826()  throws Throwable  {
      String string0 = StringUtils.defaultString("", "");
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.split("", "", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.rightPad("AK", 160, ']');
      assertEquals("AK]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test827()  throws Throwable  {
      StringUtils.replaceEach("offset cannot be negative", (String[]) null, (String[]) null);
      StringUtils.join((String[]) null);
      StringUtils.equals((CharSequence) "offset cannot be negative", (CharSequence) "offset cannot be negative");
      StringUtils.deleteWhitespace("Y$");
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        ByteBuffer.wrap((byte[]) null, 15, 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test828()  throws Throwable  {
      String string0 = StringUtils.removeStart("Rr]SK~Sg%gB", "Rr]SK~Sg%gB");
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("/WW %!+I");
      String string1 = StringUtils.chomp("{{}");
      assertEquals("{{}", string1);
      
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(6, stringArray0.length);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsNone((CharSequence) "{{}", "{{}");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test829()  throws Throwable  {
      String string0 = StringUtils.replaceAll("u", "", "u");
      assertEquals("uuu", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "uuu";
      stringArray0[1] = "uuu";
      stringArray0[2] = "";
      stringArray0[3] = "";
      String string1 = StringUtils.joinWith("", stringArray0);
      assertEquals("uuuuuu", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test830()  throws Throwable  {
      StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      StringUtils.repeat('v', 0);
      StringUtils.wrapIfMissing("", "");
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      StringUtils.join(booleanArray0, 'v');
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();
      ArrayDeque<Object> arrayDeque1 = new ArrayDeque<Object>();
      arrayDeque0.add("falsevfalsevfalsevfalsevfalse");
      arrayDeque0.retainAll(arrayDeque1);
      // Undeclared exception!
      try { 
        arrayDeque0.remove();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayDeque", e);
      }
  }

  @Test(timeout = 4000)
  public void test831()  throws Throwable  {
      String string0 = StringUtils.truncate("The character ", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string1 = StringUtils.defaultString("A{}R+");
      assertEquals("A{}R+", string1);
      
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test832()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test833()  throws Throwable  {
      String string0 = StringUtils.repeat(".", "Strings must not be null", (-579));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween(".", "Strings must not be null", ".");
      assertNull(stringArray0);
      
      String string1 = StringUtils.removeAll(".", "^F8kcn`MQ");
      assertEquals(".", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "^F8kcn`MQ", (CharSequence) "^F8kcn`MQ", (-579));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test834()  throws Throwable  {
      String string0 = StringUtils.substringBefore("(Tyr`(V:^IAQVzM(C.", 6);
      assertEquals("(Tyr`(V:^IAQVzM(C.", string0);
      
      boolean boolean0 = StringUtils.isBlank("(Tyr`(V:^IAQVzM(C.");
      String string1 = StringUtils.repeat("org.apache.commons.lang3.StringUtils", 49);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test835()  throws Throwable  {
      String string0 = StringUtils.capitalize("Cannot clone Cloneable type ");
      String string1 = StringUtils.abbreviate("Cannot clone Cloneable type ", 160, 160);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test836()  throws Throwable  {
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      StringUtils.join((Iterable<?>) vector0, 'Y');
      String string0 = StringUtils.defaultIfBlank((String) null, "");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test837()  throws Throwable  {
      StringUtils.getBytes((String) null, (String) null);
      StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 8);
      StringUtils.wrap("W_H c^w`$6'", 'I');
      StringUtils.rightPad("comparator", 918, 'K');
      StringUtils.equals((CharSequence) "comparator", (CharSequence) "comparator");
  }

  @Test(timeout = 4000)
  public void test838()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("^o*Mh+pT,C", 'a');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.wrap("\"", 'a');
      assertEquals("a\"a", string0);
      
      String string1 = StringUtils.removeIgnoreCase("\"", "^o*Mh+pT,C");
      assertEquals("\"", string1);
  }

  @Test(timeout = 4000)
  public void test839()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("IoXF", "IoXF");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test840()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      StringUtils.getIfBlank((String) null, supplier0);
      StringUtils.getBytes((String) null, "Threshold must not be negative");
      StringUtils.join((Object[]) stringArray0, "", 48, 48);
      String string0 = StringUtils.removeAll("5h,p1nv", "");
      assertEquals("5h,p1nv", string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      boolean boolean0 = StringUtils.isNoneEmpty(stringArray1);
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "Arguments cannot both be null");
      assertEquals("", string1);
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = new Integer(0);
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      integerArray0[1] = integer1;
      Integer integer2 = new Integer((-874));
      integerArray0[2] = integer2;
      String string2 = StringUtils.join(integerArray0);
      assertEquals("00-874", string2);
      
      String string3 = StringUtils.abbreviate("", "5h,p1nv", 4403, 0);
      String string4 = StringUtils.wrapIfMissing("", (String) null);
      assertTrue(string4.equals((Object)string3));
      
      String string5 = StringUtils.replaceAll((String) null, "Arguments cannot both be null", "7t8UW=8)");
      assertNull(string5);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("", '^');
      assertSame(stringArray2, stringArray1);
  }

  @Test(timeout = 4000)
  public void test841()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("The String must not be empty");
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      
      String string0 = StringUtils.joinWith("vB-=F{ux*y", stringArray0);
      assertEquals("ThevB-=F{ux*y vB-=F{ux*yStringvB-=F{ux*y vB-=F{ux*ymustvB-=F{ux*y vB-=F{ux*ynotvB-=F{ux*y vB-=F{ux*ybevB-=F{ux*y vB-=F{ux*yempty", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test842()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("", "", "", 0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test843()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("'U@%k@,Fn|JnM~");
      assertEquals("'U@%k@,Fn|JnM~", string0);
  }

  @Test(timeout = 4000)
  public void test844()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, '_', 19, 19);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test845()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 728);
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) null);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, 0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.removeEndIgnoreCase((String) null, "JXMZ\u0005NiK18VOU");
      assertNull(string1);
      
      String string2 = StringUtils.rightPad("JXMZ\u0005NiK18VOU", 728, '@');
      assertEquals("JXMZ\u0005Nistring2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test846()  throws Throwable  {
      short[] shortArray0 = new short[0];
      StringUtils.join(shortArray0, '{');
      StringUtils.countMatches((CharSequence) "", (CharSequence) "");
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-113);
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        CharBuffer.allocate((byte) (-113));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
}
