/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 14:56:02 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.BufferUnderflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.Locale;
import java.util.NavigableSet;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.SortedSet;
import java.util.Spliterator;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Supplier;
import java.util.regex.PatternSyntaxException;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringUtils.removeStartIgnoreCase("", "");
      StringUtils.equals((CharSequence) "", (CharSequence) "");
      StringUtils.capitalize("");
      StringUtils.ordinalIndexOf("", "", 1339);
      StringUtils.join((byte[]) null, 'h', 0, 97);
      StringUtils.isAlphaSpace((CharSequence) null);
      StringUtils.toRootLowerCase("gv+U}g");
      StringUtils.lastIndexOf((CharSequence) "gv+U}g", (CharSequence) "");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "Index: ";
      String[] stringArray0 = null;
      StringUtils.replaceEach("Index: ", (String[]) null, (String[]) null);
      StringUtils.abbreviate("WKU}'{b&)yv WKU}'{b&)yv ", 121);
      StringUtils.indexOf((CharSequence) "WKU}'{b&)yv WKU}'{b&)yv ", 121);
      short[] shortArray0 = new short[2];
      shortArray0[0] = (short) (-1087);
      shortArray0[1] = (short)51;
      StringUtils.join(shortArray0, 'H', 121, (-2232));
      StringUtils.abbreviate("Aborting to protect against StackOverflowError - output of one loop is the input of another", 9, 9);
      String string1 = "', is neither of type Map.Entry n({F{n7^pWOfGn";
      // Undeclared exception!
      try { 
        StringUtils.truncate("', is neither of type Map.Entry n({F{n7^pWOfGn", 65, (-7));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      StringUtils.abbreviate("88*dlMu#{L.", 2405, 4530);
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      ListIterator<CharBuffer> listIterator0 = linkedList0.listIterator();
      CharBuffer charBuffer0 = null;
      linkedList0.add((CharBuffer) null);
      char char0 = '8';
      // Undeclared exception!
      try { 
        StringUtils.join((Iterator<?>) listIterator0, '8');
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      StringUtils.substringBefore("', is neither of type Map.Entry n({F{n7^pWOf", "kz6.]_cor an Array");
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      StringUtils.wrap("kz6.]_cor an Array", '4');
      StringUtils.replace("', is neither of type Map.Entry n({F{n7^pWOf", "", "");
      StringUtils.contains((CharSequence) "", (CharSequence) "4kz6.]_cor an Array4");
      StringUtils.substring("", (-1630), 55);
      StringUtils.wrap("', is neither of type Map.Entry n({F{n7^pWOf", '4');
      StringUtils.chomp("', is neither of type Map.Entry n({F{n7^pWOf", "Gn");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("");
      Iterator<String> iterator0 = linkedHashSet0.iterator();
      StringUtils.defaultString("kz6.]_cor an Array");
      StringUtils.join(iterator0, "Index: ");
      StringUtils.toCodePoints("', is neither of type Map.Entry n({F{n7^pWOf");
      StringUtils.center("&F<;/@6)!^{", 5);
      StringUtils.splitByCharacterTypeCamelCase((String) null);
      StringUtils.containsOnly((CharSequence) "', is neither of type Map.Entry n({F{n7^pWOf", "kz6.]_cor an Array");
      StringUtils.repeat("##AWGRVp2hc&z9qq", " vs  vs ", 1034);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      StringUtils.substring("[", (-1217), (-1217));
      StringUtils.getJaroWinklerDistance("", "");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet.of(locale_Category0, locale_Category1);
      StringUtils.removeAll("", "");
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      StringUtils.isWhitespace("[");
      StringUtils.capitalize("");
      StringUtils.leftPad("", (-1217), "");
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.add("");
      StringUtils.mid("Invalid locale format: ", 10, 10);
      StringUtils.abbreviate("", ")@<Wli$~3Tj[A\"i", (-1217), 89);
      StringUtils.getDigits(")@<Wli$~3Tj[A\"i");
      StringUtils.abbreviate("", ")@<Wli$~3Tj[A\"i", 10);
      StringUtils.compareIgnoreCase("", "");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Iterator<Integer> iterator0 = stack0.iterator();
      StringUtils.join(iterator0, "Noajt\"oXWe6@hF()>Gr");
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      StringUtils.getIfEmpty((CharSequence) "", supplier0);
      StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, Integer.MIN_VALUE);
      Integer integer0 = new Integer((-1648));
      stack0.add(integer0);
      StringUtils.indexOfAny((CharSequence) "Noajt\"oXWe6@hF()>Gr", "");
      StringUtils.containsNone((CharSequence) "", (char[]) null);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      StringUtils.stripAccents("K'N\"/");
      StringUtils.getLevenshteinDistance((CharSequence) "K'N\"/", (CharSequence) "K'N\"/");
      StringUtils.replaceIgnoreCase("K'N\"/", "K'N\"/", "K'N\"/");
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = (long) 0;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 0;
      StringUtils.join(longArray0, 'q', 92, 0);
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "K'N\"/";
      charSequenceArray0[2] = (CharSequence) "K'N\"/";
      StringUtils.indexOfDifference(charSequenceArray0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'M';
      charArray0[1] = 'q';
      charArray0[2] = 'a';
      StringUtils.join(charArray0, 'M', 92, 92);
      StringUtils.equalsIgnoreCase("K'N\"/", "K'N\"/");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      StringUtils.replaceOnceIgnoreCase("-7K?Wf`#_`", "-7K?Wf`#_`", "-7K?Wf`#_`");
      StringUtils.join((short[]) null, 'X', 9, 3);
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "-7K?Wf`#_`";
      StringUtils.difference("-7K?Wf`#_`", (String) null);
      charSequenceArray0[2] = (CharSequence) "-7K?Wf`#_`";
      StringUtils.isAllBlank(charSequenceArray0);
      StringUtils.overlay("h.[", (String) null, 1554, 1497);
      StringUtils.leftPad("-7K?Wf`#_`", 2278, 'X');
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringUtils.compareIgnoreCase("BI'C4", "BI'C4");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "BI'C4";
      stringArray0[1] = "BI'C4";
      StringUtils.stripAll(stringArray0, ", Length: 0");
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = '~';
      charArray0[2] = 'j';
      StringUtils.lastIndexOf((CharSequence) "BI'C4", (CharSequence) "BI'C4");
      StringUtils.substringAfterLast("<}AD')Erh8_@6|7+v~`vxGOhcNnkz6q'nT ", 84);
      StringUtils.chop(" ");
      StringUtils.replaceOnce("", ", Length: 0", "<}AD')Erh8_@6|7+v~`vxGOhcNnkz6q'nT ");
      StringUtils.deleteWhitespace(",z-");
      StringUtils.removeEnd(",z-", "1&dxYRua{`7");
      StringUtils.left("BI'C4", 0);
      StringUtils.indexOfAny((CharSequence) "", charArray0);
      StringUtils.strip("1&dxYRua{`7", "Array and element cannot both be null");
      StringUtils.strip(",z-");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringUtils.replaceOnce("L", "L", "L");
      StringUtils.leftPad("Cloneable type ", (-2407), '*');
      StringUtils.isAlphanumeric("L");
      Locale locale0 = Locale.JAPAN;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale locale1 = Locale.TRADITIONAL_CHINESE;
      Locale.setDefault(locale_Category0, locale1);
      StringUtils.upperCase("?kUU-l6/LdDKS5N*qY", locale0);
      StringUtils.truncate("?KUU-L6/LDDKS5N*QY", 759, 759);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L";
      stringArray0[1] = "L";
      stringArray0[2] = "L";
      StringUtils.replaceOnce("L", "L", "L");
      StringUtils.upperCase("Gn", (Locale) null);
      StringUtils.leftPad("Cloneable type ", (-2407), '*');
      StringUtils.isAlphanumeric("L");
      StringUtils.wrap("b?Z<>B,FK)$(", '?');
      StringUtils.replaceFirst("L", "L", "L");
      StringUtils.indexOfIgnoreCase((CharSequence) "L", (CharSequence) "L");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringUtils.capitalize("1&dxYRua{`7");
      StringUtils.lastIndexOf((CharSequence) "1&dxYRua{`7", (CharSequence) "1&dxYRua{`7");
      StringUtils.isNumeric("1&dxYRua{`7");
      StringUtils.substringBetween("1&dxYRua{`7", "O_B1RA*", "O_B1RA*");
      StringUtils.stripAccents("Arguments cannot both be null");
      StringUtils.getLevenshteinDistance((CharSequence) "Arguments cannot both be null", (CharSequence) "Arguments cannot both be null", 0);
      StringUtils.isAlphanumeric("O_B1RA*");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.clear();
      arrayList0.add((Object) "Arguments cannot both be null");
      Object object0 = new Object();
      arrayList0.add(0, object0);
      arrayList0.parallelStream();
      char char0 = 'j';
      StringUtils.join((List<?>) arrayList0, 'j', 3, 0);
      StringUtils.left("Arguments cannot both be null", 3);
      // Undeclared exception!
      try { 
        StringUtils.truncate("Arguments cannot both be null", (-2166), (-2166));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringUtils.capitalize("1&dxYRua{`7");
      StringUtils.lastIndexOf((CharSequence) "1&dxYRua{`7", (CharSequence) "1&dxYRua{`7");
      StringUtils.isNumeric("1&dxYRua{`7");
      StringUtils.substringBetween("1&dxYRua{`7", "O_B1RA*", "O_B1RA*");
      StringUtils.stripAccents("Arguments cannot both be null");
      StringUtils.getLevenshteinDistance((CharSequence) "Arguments cannot both be null", (CharSequence) "Arguments cannot both be null", 0);
      StringUtils.isAlphanumeric("O_B1RA*");
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      arrayList0.clear();
      StringUtils.unwrap("rW\"y5*<0H(/>o@QZ", "[9'g");
      StringUtils.upperCase("&Pg");
      StringUtils.unwrap("1&dxYRua{`7", "[9'g");
      StringUtils.toCodePoints("1&dxYRua{`7");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      StringUtils.removeAll("b", "b");
      charSequenceArray0[2] = (CharSequence) "";
      StringUtils.startsWithAny(charSequenceArray0[2], charSequenceArray0);
      StringUtils.center("b", 25);
      StringUtils.removeEndIgnoreCase("            b            ", "");
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.join((Object[]) charSequenceArray0, 'R', 99, (-112));
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "WeZfqP~Z<L;xu7:**", 1);
      StringUtils.containsNone((CharSequence) "            b            ", "");
      StringUtils.substringBeforeLast("            b            ", "b");
      StringUtils.countMatches((CharSequence) "            b            ", (CharSequence) "b");
      StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      StringUtils.stripEnd((String) null, "");
      StringUtils.length((CharSequence) null);
      StringUtils.mid("WeZfqP~Z<L;xu7:**", 0, 2);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "jsh}V";
      String string1 = "$";
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("jsh}V", "$", "$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal group reference: group index is missing
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringUtils.replaceIgnoreCase("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      String string0 = null;
      StringUtils.removeStartIgnoreCase((String) null, "Minimum abbreviation width with offset is %d");
      StringUtils.equals((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      int int0 = 1643;
      StringUtils.rotate("Minimum abbreviation width with offset is %d", 1643);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      StringUtils.defaultString("Comparator should not be null.");
      StringUtils.isNumericSpace("Comparator should not be null.");
      char char0 = '>';
      StringUtils.join((Object[]) null, '>', 1643, (int) (byte) (-75));
      StringUtils.join((Object[]) null, (String) null);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "Comparator should not be null.", (int) (byte) (-75));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringUtils.isAnyEmpty((CharSequence[]) null);
      StringUtils.remove("ARPm)1Np^_WIByARPm)1Np^_WIBy", '8');
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[2] = '8';
      charArray0[0] = '?';
      StringUtils.containsOnly((CharSequence) "ARPm)1Np^_WIByARPm)1Np^_WIBy", charArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "ARPm)1Np^_WIByARPm)1Np^_WIBy");
      StringUtils.indexOfDifference((CharSequence) "ARPm)1Np^_WIByARPm)1Np^_WIBy", (CharSequence) charBuffer0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringUtils.join((Object[]) null, "");
      StringUtils.unwrap("jF-u", ".VNQ0T6P>`x");
      StringUtils.upperCase(".VNQ0T6P>`x");
      char[] charArray0 = new char[0];
      StringUtils.valueOf(charArray0);
      StringUtils.equalsIgnoreCase("", (CharSequence) null);
      StringUtils.repeat('D', 10);
      StringUtils.replaceFirst("jF-u", "`]:qMn y$yI_}U=6", ".VNQ0T6P>`X");
      StringUtils.isNotEmpty("jF-u");
      StringUtils.substringBetween("", "1&dxYRua{`7");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringUtils.removeEnd("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      int[] intArray0 = new int[7];
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-880);
      StringUtils.abbreviateMiddle("WKU}'{b&)yv ", "(F$LjQ+yQ|", 1);
      StringUtils.substringAfter("~`vxGOhcNnkz6q'nT negative", 13);
      StringUtils.indexOfAnyBut((CharSequence) "(F$LjQ+yQ|", (char[]) null);
      StringUtils.compare("WKU}'{b&)yv ", (String) null, false);
      StringUtils.substringBefore("WKU}'{b&)yv ", 0);
      CharBuffer[] charBufferArray0 = new CharBuffer[1];
      StringUtils.firstNonEmpty(charBufferArray0);
      StringUtils.leftPad("p{InCombiningDiacriticalMarks}+", 9, "WKU}'{b&)yv ");
      StringUtils.valueOf((char[]) null);
      StringUtils.rightPad("~`vxGOhcNnkz6q'nT negative", (-1), "15&dxYRua{i`7");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.indexOfAnyBut((CharSequence) "\r", (CharSequence) "\r");
      StringUtils.stripAccents("*c'M");
      Locale locale0 = Locale.KOREAN;
      StringUtils.upperCase("]l,>nA^/", locale0);
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      Iterator<Integer> iterator0 = arrayDeque0.descendingIterator();
      StringUtils.join(iterator0, ')');
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      StringUtils.toRootLowerCase("]l,>nA^/");
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category1, locale_Category1, locale_Category2);
      enumSet0.clone();
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      enumSet0.add(locale_Category3);
      StringUtils.length("*c'M");
      StringUtils.toCodePoints("*c'M");
      StringUtils.strip("\n", "*c'M");
      StringUtils.equalsIgnoreCase("\n", "");
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.abbreviate((String) null, "", (-1), 1557);
      StringUtils.isMixedCase("*c'M");
      StringUtils.defaultString("kzJemn8<*wH", "`]:qMn y$yI_}U=6!7tm']w9a>M`G;");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringUtils.uncapitalize("L[}T|");
      String string0 = StringUtils.CR;
      StringUtils.abbreviate("\r", "The type must not be null", (-2066), 3385);
      char[] charArray0 = new char[0];
      StringUtils.containsNone((CharSequence) "\r", charArray0);
      StringUtils.getDigits("nqfl\"$RYb8aG97P");
      StringUtils.removePattern("\r", "\r");
      StringUtils.indexOf((CharSequence) "...", (CharSequence) "\r");
      StringUtils.swapCase("897");
      StringUtils.join((List<?>) null, '`', 5, 3337);
      StringUtils.isAlphaSpace((CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringUtils.replace("3[Y>:<}+z=\"8", "3[Y>:<}+z=\"8", "3[Y>:<}+z=\"8", 9);
      char[] charArray0 = new char[2];
      charArray0[0] = '+';
      charArray0[1] = '!';
      StringUtils.containsAny((CharSequence) "3[Y>:<}+z=\"8", charArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      StringUtils.indexOfAnyBut((CharSequence) "3[Y>:<}+z=\"8", charArray0);
      String string0 = null;
      StringUtils.compare((String) null, ".df", true);
      StringUtils.rightPad("`sO", 11, (String) null);
      String string1 = "!8e.(3tnF7W{o0";
      StringUtils.substring("!8e.(3tnF7W{o0", 0, 11);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1554);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "!8e.(3tnF7W", (CharSequence) null, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.indexOfAnyBut((CharSequence) "\r", (CharSequence) "\r");
      StringUtils.unwrap("*c'M", "\n");
      Locale locale0 = Locale.KOREAN;
      StringUtils.upperCase("]l,>nA^/", locale0);
      StringUtils.indexOf((CharSequence) "X 4m5m", (CharSequence) "\n", 14);
      StringUtils.splitByWholeSeparator("X 4m5m", " ", 4064);
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "*c'M", (CharSequence) "");
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      StringUtils.normalizeSpace("*c'M");
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "*c'M";
      charSequenceArray0[1] = (CharSequence) "\n";
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 5;
      longArray0[1] = (long) 5;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 276;
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "]L,>NA^/", (CharSequence) " ");
      StringUtils.toRootUpperCase("*c'M");
      StringUtils.getFuzzyDistance("\n", "X 4m5m", locale0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.indexOfAnyBut((CharSequence) "\r", (CharSequence) "\r");
      StringUtils.stripAccents("*c'M");
      Locale locale0 = Locale.KOREAN;
      StringUtils.upperCase("]l,>nA^/", locale0);
      StringUtils.indexOf((CharSequence) "X 4m5m", (CharSequence) "\n", 14);
      StringUtils.splitByWholeSeparator("X 4m5m", " ", 4064);
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "*c'M", (CharSequence) "");
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      StringUtils.mid(" ", (-1), 276);
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "*c'M";
      charSequenceArray0[1] = (CharSequence) "\n";
      long[] longArray0 = new long[6];
      longArray0[0] = (long) 5;
      longArray0[1] = (long) 5;
      longArray0[2] = (long) (-1);
      longArray0[3] = (long) 276;
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "]L,>NA^/", (CharSequence) " ");
      StringUtils.toRootUpperCase(" ");
      StringUtils.getFuzzyDistance("\n", "X 4m5m", locale0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "MVb<GK }izowG29kGgE";
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("MVb<GK }izowG29kGgE"));
      
      charSequenceArray0[2] = (CharSequence) "MVb<GK }izowG29kGgE";
      charSequenceArray0[3] = (CharSequence) "MVb<GK }izowG29kGgE";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = treeSet0.add(charSequenceArray0[0]);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(treeSet0.contains("MVb<GK }izowG29kGgE"));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.mid("MVb<GK }izowG29kGgE", 8, 64);
      assertNotNull(string0);
      assertEquals("izowG29kGgE", string0);
      
      String string1 = StringUtils.removeAll("MVb<GK }izowG29kGgE", "MVb<GK }izowG29kGgE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfAny("MVb<GK }izowG29kGgE", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      StringUtils.equalsAny("", charSequenceArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "MVb<GK }izowG29kGgE";
      stringArray0[2] = "izowG29kGgE";
      stringArray0[3] = "izowG29kGgE";
      stringArray0[4] = "";
      stringArray0[5] = "MVb<GK }izowG29kGgE";
      stringArray0[6] = "";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "";
      stringArray1[1] = "MVb<GK }izowG29kGgE";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("*u[s.V;S`[pA9OIDZF", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 7 vs 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringUtils.chop("V");
      StringUtils.difference("V", "");
      StringUtils.substringBetween("", "");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "#";
      stringArray0[1] = "V";
      stringArray0[3] = "";
      stringArray0[1] = "";
      stringArray0[5] = "";
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.removeStart("XXx/XYmYT;m&s(,", "e5F[5");
      StringUtils.removeAll(",H,H", "");
      StringUtils.startsWithAny(stringArray0[2], stringArray0);
      StringUtils.left("", 1);
      StringUtils.center("", 1);
      StringUtils.splitPreserveAllTokens("', is neither of type Map.Entry nor an ArrayGn", "");
      StringUtils.length("#");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringUtils.right("=", 1089);
      StringUtils.length("=");
      StringUtils.difference("=", "=");
      StringUtils.equals((CharSequence) "", (CharSequence) "");
      StringUtils.reverse((String) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      StringUtils.firstNonBlank(stringArray0);
      StringUtils.leftPad((String) null, 1089, "=");
      StringUtils.countMatches((CharSequence) "=", '\'');
      StringUtils.removeStart("{}", (String) null);
      StringUtils.length("=");
      StringUtils.compareIgnoreCase("\n", "z5U0zm$YFRKMn!|L'", false);
      StringUtils.deleteWhitespace("z5U0zm$YFRKMn!|L'");
      StringUtils.startsWithAny((CharSequence) null, stringArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 99;
      intArray0[1] = (int) '\'';
      StringUtils.join(intArray0, '-', 0, (-112));
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringUtils.reverse((String) null);
      StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null);
      StringUtils.splitByWholeSeparatorPreserveAllTokens("8Q6RoGe;3r&A?O", ".VNQ0T6P>`x");
      StringUtils.substringBetween("8Q6RoGe;3r&A?O", "", (String) null);
      StringUtils.stripStart((String) null, (String) null);
      StringUtils.chop((String) null);
      char char0 = '0';
      StringUtils.reverseDelimited(".VNQ0T6P>`x", '0');
      StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) "T6P>`x0.VNQ");
      int int0 = 23;
      StringUtils.left("T6P>`x0.VNQ", 23);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringUtils.difference("The Array must not be null", "The Array must not be null");
      StringUtils.overlay("", "The Array must not be null", (-876), (-876));
      StringUtils.isNumericSpace("");
      HashSet<String> hashSet0 = new HashSet<String>();
      Iterator<String> iterator0 = hashSet0.iterator();
      hashSet0.add("tGsGN?`ctgw");
      StringUtils.join(iterator0, 'B');
      hashSet0.add("Search and Replace array lengths don't match: ");
      hashSet0.add("Search and Replace array lengths don't match: ");
      StringUtils.splitPreserveAllTokens((String) null, '');
      StringUtils.isAllUpperCase("");
      StringUtils.join((Object[]) null, (String) null, (-876), (-506));
      StringUtils.left("The Array must not be null", 8173);
      StringUtils.getDigits("");
      StringUtils.toCodePoints((CharSequence) null);
      StringUtils.countMatches((CharSequence) "tGsGN?`ctgw", (CharSequence) "");
      StringUtils.replaceIgnoreCase("Search and Replace array lengths don't match: ", "Search and Replace array lengths don't match: ", "Cannot store ");
      char[] charArray0 = new char[7];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      charArray0[3] = 'B';
      charArray0[4] = '';
      charArray0[5] = '!';
      charArray0[6] = 'B';
      StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      CharBuffer[] charBufferArray0 = new CharBuffer[2];
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-506), (-936));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Noajt\"oXWe6@hF()>Gr");
      StringUtils.isAnyBlank(stringArray0);
      StringUtils.toRootLowerCase((String) null);
      StringUtils.chomp("Noajt\"oXWe6@hF()>Gr");
      StringUtils.splitPreserveAllTokens((String) null, 'C');
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      String string0 = "fheMGhvu(O3%.Pt";
      int int0 = 2;
      int int1 = 347;
      StringUtils.center("Cloneable type ", 347);
      String string1 = "brOG:pt*\\Ec$sVWM}=:";
      StringUtils.appendIfMissingIgnoreCase("brOG:pt*Ec$sVWM}=:", "                                                                                                                                                                      Cloneable type                                                                                                                                                                       ", (CharSequence[]) null);
      // Undeclared exception!
      StringUtils.getJaroWinklerDistance("brOG:pt*Ec$sVWM}=:                                                                                                                                                                      Cloneable type                                                                                                                                                                       ", "brOG:pt*Ec$sVWM}=:                                                                                                                                                                      Cloneable type                                                                                                                                                                       ");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("#YQ2sCZ*Mt{\"9-P1", supplier0);
      assertNotNull(string0);
      assertEquals("#YQ2sCZ*Mt{\"9-P1", string0);
      
      String string1 = StringUtils.replaceChars(" in an array of ", "^", " in an array of ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" in an array of ", string1);
      
      String string2 = StringUtils.abbreviateMiddle("Threshold must not be negative", "^", 32);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Threshold must not be negative", string2);
      
      boolean boolean1 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split(" in an array of ");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.substringBefore("", (-1399));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " in an array of ", (CharSequence) "^", 1943);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      int int1 = StringUtils.indexOf((CharSequence) " in an array of ", (CharSequence) "#YQ2sCZ*Mt{\"9-P1", (-1399));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      StringUtils.lowerCase((String) null);
      StringUtils.join((Integer[]) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String string0 = StringUtils.lowerCase((String) null);
      StringUtils.isWhitespace((CharSequence) null);
      StringUtils.isAlpha((CharSequence) null);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.left("", 10);
      char[] charArray0 = new char[6];
      charArray0[0] = 'g';
      charArray0[1] = '1';
      charArray0[2] = ';';
      charArray0[3] = 'A';
      charArray0[4] = '=';
      charArray0[5] = '#';
      StringUtils.indexOfAny((CharSequence) string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringUtils.remove("Supplied value must be a valid byte literal between -128 and 127: [", '2');
      StringUtils.isEmpty("Supplied value must be a valid byte literal between -18 and 17: [");
      StringUtils.countMatches((CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [", (CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [");
      StringUtils.leftPad("', is neither of type Map.Entry n({F{n7^pWOfGn", 1, '2');
      StringUtils.center(" WBUy#{g3 7{`vP*", 1, '2');
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) " WBUy#{g3 7{`vP*";
      charSequenceArray0[1] = (CharSequence) "Supplied value must be a valid byte literal between -18 and 17: [";
      StringUtils.lastIndexOfAny(" WBUy#{g3 7{`vP*", charSequenceArray0);
      StringUtils.chomp("', is neither of type Map.Entry n({F{n7^pWOfGn");
      String string0 = "\\u";
      StringUtils.split(" WBUy#{g3 7{`vP*", string0, 1);
      StringUtils.defaultIfEmpty(string0, "Strings must not be null");
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '2';
      charArray0[2] = '2';
      charArray0[3] = '2';
      StringUtils.containsNone((CharSequence) "Supplied value must be a valid byte literal between -18 and 17: [", charArray0);
      StringUtils.isAlphaSpace("Strings must not be null");
      StringUtils.appendIfMissing("offset cannot be negative", " WBUy#{g3 7{`vP*", charSequenceArray0);
      StringUtils.stripEnd(" WBUy#{g3 7{`vP*", "\r           3b            ");
      StringUtils.abbreviate("<?\"", 1, 340);
      StringUtils.isAlphanumericSpace(" WBUy#{g3 7{`vP*");
      StringUtils.abbreviate("_", 32767, 2185);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      StringUtils.remove("Supplied value must be a valid byte literal between -128 and 127: [", '2');
      StringUtils.countMatches((CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [", (CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [");
      StringUtils.leftPad("', is neither of type Map.Entry n({F{n7^pWOfGn", 1, '2');
      String string0 = " WBUy#{g3 7{`vP*";
      StringUtils.center(" WBUy#{g3 7{`vP*", 1, '2');
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) " WBUy#{g3 7{`vP*";
      charSequenceArray0[1] = (CharSequence) "Supplied value must be a valid byte literal between -18 and 17: [";
      StringUtils.lastIndexOfAny(" WBUy#{g3 7{`vP*", charSequenceArray0);
      StringUtils.chomp("', is neither of type Map.Entry n({F{n7^pWOfGn");
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, '2', (-1737), 58);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1737
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = 'e';
      charArray0[2] = '8';
      charArray0[3] = 'k';
      charArray0[5] = '%';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      CharBuffer charBuffer1 = charBuffer0.slice();
      StringUtils.lastOrdinalIndexOf(charBuffer0, charBuffer0, 113);
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      ArrayList<String> arrayList0 = new ArrayList<String>();
      charSequenceArray0[1] = (CharSequence) charBuffer1;
      StringUtils.equalsAny(charBuffer0, charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringUtils.substringBeforeLast((String) null, ";)a7m6Y)*gO");
      char[] charArray0 = new char[6];
      char char0 = 'U';
      charArray0[0] = 'U';
      char char1 = '%';
      charArray0[1] = '%';
      char char2 = 'E';
      charArray0[2] = 'E';
      char char3 = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'k';
      char char4 = 'k';
      charArray0[5] = 'k';
      StringUtils.indexOfAny((CharSequence) null, charArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte)0;
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate((byte)2);
      charset0.decode(byteBuffer0);
      StringUtils.toEncodedString(byteArray0, charset0);
      StringUtils.isWhitespace(" \u0002\u0017\u0000");
      StringUtils.chop((String) null);
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, (-1866), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet.of(locale_Category0, locale_Category1);
      StringUtils.replaceOnce("                                             ese6'q?yT9/#Aborting to protect against StackOverflowError - output of one loop is the input of another", "lF>8VA0", "$G`M 85{xXfc%");
      StringUtils.isWhitespace("                                             ese6'q?yT9/#Aborting to protect against StackOverflowError - output of one loop is the input of another");
      StringUtils.join((byte[]) null, 'Y');
      StringUtils.capitalize("lF>8VA0");
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'Y';
      StringUtils.indexOfAnyBut((CharSequence) "$G`M 85{xXfc%", charArray0);
      StringUtils.repeat((String) null, 207);
      StringUtils.strip("?~EU6c<@\"pnpiE%;\"");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "";
      StringUtils.rightPad("O4Wyv<v", 0, "");
      StringUtils.rotate("O4Wyv<v", 0);
      char[] charArray0 = new char[2];
      charArray0[1] = '\u0000';
      StringUtils.containsAny((CharSequence) "", charArray0);
      StringUtils.center("O4Wyv<v", 0);
      StringUtils.abbreviate("", 0, 0);
      Integer integer0 = new Integer((-866));
      StringUtils.trim("H");
      StringUtils.join((Iterable<?>) null, "lBv?5,HWP6MZ");
      StringUtils.isAllUpperCase("O4Wyv<v");
      StringUtils.unwrap((String) null, 'P');
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-866));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringUtils.removeFirst("Ty,HVnggok}20]", "Ty,HVnggok}20]");
      String string0 = StringUtils.substringBetween("", "Ty,HVnggok}20]");
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Ty,HVnggok}20]");
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      StringUtils.mid("Locale mustnot be nll", 8175, 14);
      StringUtils.replaceChars("KT=.N", "nXDIkwRf#a1Xmo=B%@", "");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Ty,HVnggok}20]";
      stringArray0[1] = null;
      stringArray0[2] = "KT.N";
      stringArray0[3] = "";
      stringArray0[4] = null;
      stringArray0[5] = "a,*`KKG)4fc@F6:S";
      stringArray0[6] = "";
      StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      StringUtils.replaceChars("AE79\"N", "", "KT.N");
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 14;
      floatArray0[1] = (float) 8175;
      floatArray0[2] = (-2154.687F);
      floatArray0[3] = (float) 8175;
      floatArray0[4] = (float) 8175;
      floatArray0[5] = (float) 8175;
      floatArray0[6] = (float) 8175;
      floatArray0[7] = (float) 14;
      StringUtils.join(floatArray0, '7', 57, (-947));
      StringUtils.stripAll(stringArray0, string0);
      StringUtils.leftPad(string0, 8175);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      StringUtils.stripToEmpty("$`i");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-7);
      byteArray0[2] = (byte) (-75);
      StringUtils.rotate("$`i", (byte) (-75));
      StringUtils.join(byteArray0, 'z', (int) (byte) (-7), (int) (byte) (-7));
      StringUtils.uncapitalize("$`i");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      StringUtils.stripStart("[b/!%,8TIPNyW", "(a'wo`9gy ");
      charSequenceArray0[0] = (CharSequence) "[b/!%,8TIPNyW";
      StringUtils.isAllEmpty(charSequenceArray0);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.getIfBlank("[b/!%,8TIPNyW", supplier0);
      StringUtils.indexOf((CharSequence) "[b/!%,8TIPNyW", 22, 8192);
      StringUtils.isAllUpperCase("[b/!%,8TIPNyW");
      StringUtils.prependIfMissing("[b/!%,8TIPNyW", "[b/!%,8TIPNyW", charSequenceArray0);
      StringUtils.abbreviate("(a'wo`9gy ", "[b/!%,8TIPNyW", 5, 2034);
      StringUtils.indexOf((CharSequence) "[b/!%,8TIPNyW", 3, 13);
      StringUtils.center("", (-1115), "[b/!%,8TIPNyW");
      StringUtils.splitByWholeSeparator("Ut552D0OQ", "[b/!%,8TIPNyW", 108);
      StringUtils.contains((CharSequence) "Ut552D0OQ", 322);
      StringUtils.trimToNull((String) null);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      StringUtils.leftPad("Qv\"R&qVyebN6|)`Zy", (-1), ".k");
      StringUtils.compareIgnoreCase("Qv\"R&qVyebN6|)`Zy", ".k", false);
      StringUtils.overlay((String) null, "Qv\"R&qVyebN6|)`Zy", 1, (-1));
      StringUtils.wrapIfMissing((String) null, (String) null);
      StringUtils.isAlphanumericSpace("Qv\"R&qVyebN6|)`Zy");
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      StringUtils.join(booleanArray0, 'q', 13, 1);
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) false;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) null;
      objectArray0[4] = (Object) "Qv\"R&qVyebN6|)`Zy";
      objectArray0[5] = (Object) false;
      StringUtils.joinWith("rdBn>Hi<_Jf@@e&Mk#", objectArray0);
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      StringUtils.equalsAny("rdBn>Hi<_Jf@@e&Mk#", charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringUtils.removeFirst("Ty,HVnggok}20]", "Ty,HVnggok}20]");
      StringUtils.substringBetween("", "Ty,HVnggok}20]");
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Ty,HVnggok}20]");
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      StringUtils.mid("Locale mustnot be nll", 8175, 14);
      StringUtils.replaceChars("KT=.N", "nXDIkwRf#a1Xmo=B%@", "");
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "nXDIkwRf#a1Xmo=B%@";
      charSequenceArray0[1] = (CharSequence) "nXDIkwRf#a1Xmo=B%@";
      StringUtils.abbreviate("org.apache.commons.lang3.RegExUtils", "negative~`vxGOhcNnkz6q'nT ", 1096, 2437);
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      StringUtils.substringAfter((String) null, "', is neither of type Map.Entry n({F{n7^pWOfGn");
      StringUtils.removeAll("", "Ty,HVnggok}20]");
      StringUtils.repeat("org.apache.commons.lang3.RegExUtils", 2437);
      StringUtils.strip("");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      StringUtils.strip("Ty,HVnggok}20]", "Ty,HVnggok}20]");
      long[] longArray0 = new long[6];
      longArray0[0] = (-1720L);
      longArray0[1] = (-1720L);
      longArray0[2] = (-1720L);
      longArray0[3] = (-1720L);
      longArray0[4] = (-1720L);
      longArray0[5] = (-1720L);
      StringUtils.join(longArray0, 'u');
      StringUtils.containsOnly((CharSequence) "", "Ty,HVnggok}20]");
      StringUtils.replaceFirst("", "Ty,HVnggok}20]", "=");
      int[] intArray0 = new int[0];
      StringUtils.join(intArray0, 'q');
      String string0 = StringUtils.repeat('q', 4073);
      StringUtils.replaceChars("", string0, "Ty,HVnggok}20]");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      StringUtils.substringBefore("{", 853);
      StringUtils.isNumeric("{");
      StringUtils.rightPad("{", 853, "{");
      StringUtils.isNumeric("{");
      StringUtils.containsWhitespace("{");
      StringUtils.substringsBetween("{", " ", "{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{");
      StringUtils.trim("Q=v");
      StringUtils.isNoneBlank((CharSequence[]) null);
      StringUtils.isNumeric("{");
      StringUtils.substringAfterLast("{", (String) null);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      StringUtils.overlay("R g!uKRu ghqx#hL", "R g!uKRu ghqx#hL", 0, 0);
      StringUtils.replace("Strings must not be null", "", "");
      StringUtils.contains((CharSequence) "R g!uKRu ghqx#hLR g!uKRu ghqx#hL", (CharSequence) "Strings must not be null");
      StringUtils.substring("Strings must not be null", 2029, 2029);
      StringUtils.wrap("R g!uKRu ghqx#hL", '7');
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "R g!uKRu ghqx#hLR g!uKRu ghqx#hL";
      StringUtils.chomp(" vs ", "negative~`vxGOhcNnkz6q'nT ");
      charSequenceArray0[3] = (CharSequence) " vs ";
      charSequenceArray0[4] = (CharSequence) "Strings must not be null";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "Strings must not be null";
      charSequenceArray0[7] = (CharSequence) "R g!uKRu ghqx#hLR g!uKRu ghqx#hL";
      StringUtils.appendIfMissingIgnoreCase("]LYg$yxA", "Strings must not be null", charSequenceArray0);
      StringUtils.getJaroWinklerDistance(" vs ", "Strings must not be null");
      StringUtils.abbreviateMiddle((String) null, "u!0w'}l#gr0wMinimum abbreviation width wit offset is %d", 0);
      StringUtils.lastIndexOf((CharSequence) "", charSequenceArray0[2], 0);
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2029;
      StringUtils.join(intArray0, 'n', 0, 0);
      StringUtils.isAnyEmpty(charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringUtils.abbreviate((String) null, (String) null, 8);
      StringUtils.isNumeric((CharSequence) null);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      StringUtils.getIfEmpty((String) null, supplier0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      StringUtils.removeAll("3b", "3b");
      charSequenceArray0[2] = (CharSequence) "";
      StringUtils.startsWithAny(charSequenceArray0[2], charSequenceArray0);
      StringUtils.center("3b", 25);
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.join((Object[]) charSequenceArray0, 'R', 99, (-112));
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "WeZfqP~Z L;xu7:**", 1);
      StringUtils.equals(charSequenceArray0[2], (CharSequence) "");
      StringUtils.countMatches((CharSequence) "           3b            ", (CharSequence) "3b");
      StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      StringUtils.split("", "gjU6D");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringUtils.difference("Cannot store ", "$}gKB&};");
      StringUtils.isAlpha("$}gKB&};");
      StringUtils.substringAfter("", 10);
      StringUtils.reverse("Cannot store ");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = " erots tonnaC";
      stringArray0[2] = "";
      stringArray0[3] = "XXx/X";
      stringArray0[4] = "$}gKB&};";
      stringArray0[5] = "$}gKB&};";
      StringUtils.replaceEach("XXx/X", stringArray0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1692.7743625627284;
      doubleArray0[2] = 821.62188257;
      doubleArray0[3] = 3276.3;
      doubleArray0[4] = 2115.20044405;
      doubleArray0[5] = (-3555.1302618946);
      StringUtils.join(doubleArray0, '3');
      StringUtils.length("0.031692.77436256272843821.6218825733276.332115.200444053-3555.1302618946");
      StringUtils.replace("Of", "maxWith cannot be negative", "maxWith cannot be negative", (-136));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "0.031692.77436256272843821.6218825733276.332115.200444053-3555.1302618946";
      stringArray0[1] = "Of";
      stringArray0[2] = "maxWith cannot be negative";
      stringArray0[3] = "l %";
      stringArray0[4] = "Of";
      stringArray0[5] = "Of";
      stringArray0[6] = "0.031692.77436256272843821.6218825733276.332115.200444053-3555.1302618946";
      stringArray0[7] = "...";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "maxWith cannot be negative";
      // Undeclared exception!
      try { 
        StringUtils.replaceEach("Of", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 8 vs 1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      StringUtils.stripToEmpty("i$`i");
      StringUtils.unwrap("i$`i", "hF-u");
      StringUtils.truncate(".VNQ0T6P>`x", 23, 23);
      StringUtils.substringsBetween("i$`i", "hF-u", "i$`i");
      StringUtils.isAlphanumeric("*c'M");
      StringUtils.splitByWholeSeparator("BAu3/If", "i$`i", 23);
      StringUtils.isAlphanumeric("");
      StringUtils.isAlphanumericSpace("i$`i");
      String string0 = StringUtils.LF;
      StringUtils.getLevenshteinDistance((CharSequence) "hF-u", (CharSequence) "hF-u");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "i$`i";
      stringArray1[1] = ".VNQ0T6P>`x";
      stringArray1[2] = "\n";
      stringArray0[0] = "BAu3/If";
      stringArray1[4] = "hF-u";
      stringArray1[5] = "";
      stringArray1[6] = "i$`i";
      stringArray1[7] = "cX%x";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("cX%x", stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Search and Replace array lengths don't match: 2 vs 8
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      StringUtils.chomp("K[[$`1Jqi&@6\"k>xgU$", "K[[$`1Jqi&@6\"k>xgU$");
      StringUtils.replace("~>tN8B-\u0000Lrhlj", "(hxpD]gq", "b6sdFC");
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      StringUtils.join(booleanArray0, '\\', 1638, 1638);
      StringUtils.splitByWholeSeparator((String) null, "org.apache.commons.lang3.StringUtils");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      StringUtils.removeFirst("Ty,HVnggok}20]", "Ty,HVnggok}20]");
      StringUtils.substringBetween("", "Ty,HVnggok}20]");
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Ty,HVnggok}20]");
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      StringUtils.mid("Locale mustnot be nll", 8175, 14);
      StringUtils.replaceChars("KT=.N", "nXDIkwRf#a1Xmo=B%@", "");
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "nXDIkwRf#a1Xmo=B%@";
      charSequenceArray0[1] = (CharSequence) "nXDIkwRf#a1Xmo=B%@";
      StringUtils.abbreviate("org.apache.commons.lang3.RegExUtils", "negative~`vxGOhcNnkz6q'nT ", 1096, 2437);
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.RegExUtils";
      charSequenceArray0[3] = (CharSequence) "";
      StringUtils.deleteWhitespace("Exception cloning Cloneable type ");
      charSequenceArray0[4] = (CharSequence) "ExceptioncloningCloneabletype";
      charSequenceArray0[5] = (CharSequence) "KT.N";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "KT=.N";
      StringUtils.lastIndexOfAny("KT.N", charSequenceArray0);
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.removeEndIgnoreCase("negative~`vxGOhcNnkz6q'nT ", "Exception cloning Cloneable type ");
      StringUtils.defaultIfBlank("nXDIkwRf#a1Xmo=B%@", "org.apache.commons.lang3.RegExUtils");
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.getIfBlank("nH=UBzm-A", supplier0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringUtils.stripToEmpty("i$`i");
      StringUtils.strip("i$`i", "i$`i");
      StringUtils.ordinalIndexOf("V", "V", 0);
      StringUtils.containsOnly((CharSequence) "i$`i", (char[]) null);
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "V";
      charSequenceArray0[1] = (CharSequence) "i$`i";
      charSequenceArray0[0] = (CharSequence) "V";
      charSequenceArray0[3] = (CharSequence) "V";
      charSequenceArray0[4] = (CharSequence) "V";
      charSequenceArray0[5] = (CharSequence) "i$`i";
      StringUtils.firstNonBlank(charSequenceArray0);
      StringUtils.indexOfDifference(charSequenceArray0[1], (CharSequence) "i$`i");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringUtils.containsOnly((CharSequence) "l %", (char[]) null);
      StringUtils.indexOfDifference((CharSequence) "l %", (CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringUtils.chop("\r");
      StringUtils.wrapIfMissing("tGsGN?`ctgw", 'l');
      StringUtils.deleteWhitespace("ltGsGN?`ctgwl");
      StringUtils.removeEnd((String) null, "tGsGN?`ctgw");
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      StringUtils.rightPad("Search and Replace array lengths don't match: ", (-640), "Array element ");
      Vector<Object> vector0 = new Vector<Object>();
      vector0.listIterator();
      Object object0 = new Object();
      StringUtils.join((List<?>) vector0, '9', 74, 0);
      StringUtils.trimToEmpty("P{Rr)");
      StringUtils.getDigits("n+M*}/P");
      StringUtils.replaceChars("P{Rr)", 'l', 'l');
      StringUtils.capitalize("");
      StringUtils.repeat("N~", (String) null, (-640));
      StringUtils.repeat(", Length: 0", 74);
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) ", Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0, Length: 0", (CharSequence) "Array element ");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringUtils.normalizeSpace("WKU}'{b&)yv ");
      char[] charArray0 = new char[0];
      StringUtils.indexOfAny((CharSequence) "WKU}'{b&)yv", charArray0);
      StringUtils.strip("\n", "WKU}'{b&)yv");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "WKU}'{b&)yv ";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      charSequenceArray0[4] = (CharSequence) "WKU}'{b&)yv";
      charSequenceArray0[5] = (CharSequence) "WKU}'{b&)yv";
      charSequenceArray0[6] = (CharSequence) "WKU}'{b&)yv ";
      StringUtils.isNoneBlank(charSequenceArray0);
      StringUtils.isAlphanumericSpace(charSequenceArray0[2]);
      StringUtils.join((double[]) null, 'D');
      StringUtils.repeat("WKU}'{b&)yv", 29);
      StringUtils.swapCase("p{InCombiningDiacriticalMarks}+");
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      StringUtils.join(booleanArray0, 'D', 1102, (-1));
      StringUtils.getDigits((String) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      StringUtils.normalizeSpace("WKU}'{b&)yv ");
      char[] charArray0 = new char[0];
      StringUtils.indexOfAny((CharSequence) "WKU}'{b&)yv", charArray0);
      StringUtils.strip("\n", "WKU}'{b&)yv");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "WKU}'{b&)yv ";
      charSequenceArray0[1] = (CharSequence) "\n";
      charSequenceArray0[2] = (CharSequence) "\n";
      charSequenceArray0[3] = (CharSequence) "\n";
      charSequenceArray0[4] = (CharSequence) "WKU}'{b&)yv";
      charSequenceArray0[5] = (CharSequence) "WKU}'{b&)yv";
      charSequenceArray0[6] = (CharSequence) "WKU}'{b&)yv ";
      StringUtils.isNoneBlank(charSequenceArray0);
      StringUtils.isAlphanumericSpace(charSequenceArray0[2]);
      StringUtils.join((double[]) null, 'D');
      StringUtils.substringBefore(", Length: ", "\n");
      StringUtils.indexOfAny((CharSequence) ", Length: ", "The String must not be empty");
      StringUtils.indexOfAnyBut(charSequenceArray0[0], charArray0);
      StringUtils.isAnyEmpty(charSequenceArray0);
      StringUtils.right("A?Yh7,Q9}JxG!pMj", 2729);
      StringUtils.split("\r");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.iterator();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "#";
      stringArray0[1] = "#";
      stringArray0[2] = "#";
      stringArray0[3] = "#";
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.removeStart("org.apache.commons.lang3.CharUtils", "lith cannot be negative");
      StringUtils.removeAll("Locale must not be null", "org.apache.commons.lang3.LocaleUtils");
      StringUtils.startsWithAny("#", stringArray0);
      StringUtils.left("#", 1);
      StringUtils.center("#", 1);
      StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwBorg.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", "org.apache.commons.lang3.CharUtils");
      StringUtils.length(",H,H");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      StringUtils.substringBefore("{", 853);
      StringUtils.isNumeric("{");
      StringUtils.rightPad("{", 853, "{");
      StringUtils.isNumeric("{");
      StringUtils.containsWhitespace("{");
      StringUtils.substringsBetween("{", " ", "{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{");
      StringUtils.abbreviate("', is neither of type Map.Entry n({F{n7^pWOfGn", "cX%x", 22, 853);
      StringUtils.contains((CharSequence) null, (CharSequence) " ");
      StringUtils.trimToEmpty("org.apache.commons.lang3.LocaleUtils");
      StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.LocaleUtils", 97, 22);
      String string0 = StringUtils.center("{", 1795, (String) null);
      StringUtils.isAllLowerCase(string0);
      StringUtils.stripAll((String[]) null, "org.apache.commons.lang3.LocaleUtils");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringUtils.abbreviateMiddle("org.apache.commons.lang3.exception.CloneFailedException", "?J-{0TIL,p", 6);
      StringUtils.strip("org.apache.commons.lang3.exception.CloneFailedException", "org.apache.commons.lang3.exception.CloneFailedException");
      StringUtils.isNoneBlank((CharSequence[]) null);
      StringUtils.isAlphanumericSpace("");
      StringUtils.substringsBetween("org.apache.commons.lang3.exception.CloneFailedException", "org.apache.commons.lang3.exception.CloneFailedException", "Cannot clone Cloneable type ");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringUtils.chop("V");
      StringUtils.difference("V", "");
      StringUtils.substringBetween("", "");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "#";
      stringArray0[2] = "V";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.replaceOnceIgnoreCase("V", "V", "");
      StringUtils.removeAll(",H,H", "");
      StringUtils.startsWithAny("V", stringArray0);
      StringUtils.left("#", 1);
      StringUtils.center("vDLs>G}z", 1);
      StringUtils.substringsBetween("vDLs>G}z", "XXx/XYmYT;m&s(,", "");
      StringUtils.length("#");
      StringUtils.equalsAnyIgnoreCase(",H,H", stringArray0);
      StringUtils.compare("", (String) null, true);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringUtils.isAnyEmpty((CharSequence[]) null);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.getIfBlank("#YQ2sCZ*Mt{\"9-P1", supplier0);
      StringUtils.countMatches((CharSequence) "#YQ2sCZ*Mt{\"9-P1", '\\');
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[4] = '\\';
      charArray0[5] = '\\';
      StringUtils.join(charArray0, '\\');
      StringUtils.rightPad("", 0, '\\');
      StringUtils.repeat("ceM-BxYW~2", "#YQ2sCZ*Mt{\"9-P1", 102);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringUtils.isAnyEmpty((CharSequence[]) null);
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.getIfEmpty((CharSequence) "#YQ2sCZ*Mt{\"9-P1", supplier0);
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "#YQ2sCZ*Mt{\"9-P1", (CharSequence) "#YQ2sCZ*Mt{\"9-P1", 321);
      StringUtils.indexOfAny((CharSequence) "@:%8", ",5}lRQ}j0");
      StringUtils.toRootLowerCase("@:%8");
      StringUtils.replaceAll("@:%8", ",5}lRQ}j0", "aso)KQY-A2");
      StringUtils.containsIgnoreCase("@:%8", (CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringUtils.compareIgnoreCase("BI'C4", "BI'C4");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "BI'C4";
      stringArray0[1] = "BI'C4";
      StringUtils.center("-7gw/", 0, "XXx/X");
      StringUtils.splitPreserveAllTokens("-7gw/", 'R');
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 21;
      CharBuffer charBuffer0 = CharBuffer.allocate(21);
      charBuffer0.chars();
      String string0 = ">|\\~m";
      charBuffer0.put(">|~m");
      Stack<Object> stack0 = new Stack<Object>();
      String string1 = "Locale must not be null";
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, "Locale must not be null", Integer.MAX_VALUE, (-1308));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(2147483647) > toIndex(-1308)
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      StringUtils.replace("3[Y>:<}+z=\"8", "3[Y>:<}+z=\"8", "3[Y>:<}+z=\"8", 9);
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = '!';
      StringUtils.containsAny((CharSequence) "3[Y>:<}+z=\"8", charArray0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      StringUtils.indexOfAnyBut((CharSequence) "3[Y>:<}+z=\"8", charArray0);
      StringUtils.compare((String) null, ".df", true);
      StringUtils.rightPad("s ", (-1989), (String) null);
      StringUtils.substring("!8e.(3tnF7W{o0", 0, (-1989));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1554);
      doubleArray0[1] = (-3040.2);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '7', 5, 92);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringUtils.chop("\r");
      StringUtils.wrapIfMissing("tGsGN?`ctgw", 'l');
      StringUtils.deleteWhitespace("ltGsGN?`ctgwl");
      StringUtils.removeEnd((String) null, "tGsGN?`ctgw");
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      charArray0[1] = 'G';
      charArray0[2] = 'l';
      StringUtils.indexOfAny((CharSequence) "tGsGN?`ctgw", charArray0);
      StringUtils.strip("ltGsGN?`ctgwl", "Locale must not be null");
      CharSequence[] charSequenceArray0 = new CharSequence[14];
      charSequenceArray0[1] = (CharSequence) "ltGsGN?`ctgwl";
      charSequenceArray0[2] = (CharSequence) "tGsGN?`ctgw";
      charSequenceArray0[3] = (CharSequence) "tGsGN?`ctgw";
      StringUtils.isNoneBlank(charSequenceArray0);
      StringUtils.isAlphanumericSpace("GsGN?`ctgw");
      StringUtils.join((double[]) null, 'l');
      StringUtils.repeat("Minimum abbreviation width with offset is %d", 1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      StringUtils.right("5F:D34SA.II\")^P", 237);
      charSequenceArray0[0] = (CharSequence) "5F:D34SA.II\")^P";
      StringUtils.substring("5F:D34SA.II\")^P", 237, 237);
      charSequenceArray0[1] = (CharSequence) "";
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1780);
      shortArray0[1] = (short) (-1780);
      shortArray0[2] = (short) (-1780);
      shortArray0[3] = (short) (-1780);
      shortArray0[4] = (short) (-1780);
      StringUtils.join(shortArray0, '&');
      StringUtils.split("", "", (int) (short) (-1780));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.iterator();
      byte[] byteArray0 = new byte[0];
      StringUtils.join(byteArray0, 'l', 126, 1);
      StringUtils.reverseDelimited("", '1');
      StringUtils.leftPad(";[n-EPLbcGV{CS&IqO4a)jU6UYbpK4d", 3, ')');
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 3);
      StringUtils.trim("");
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      CharSequence[] charSequenceArray1 = new CharSequence[9];
      charSequenceArray1[0] = (CharSequence) ";[n-EPLbcGV{CS&IqO4a)jU6UYbpK4d";
      charSequenceArray1[1] = (CharSequence) "";
      charSequenceArray1[2] = (CharSequence) "";
      charSequenceArray1[3] = (CharSequence) "";
      charSequenceArray1[4] = (CharSequence) "";
      charSequenceArray1[5] = (CharSequence) "";
      charSequenceArray1[6] = (CharSequence) ";[n-EPLbcGV{CS&IqO4a)jU6UYbpK4d";
      charSequenceArray1[7] = (CharSequence) "";
      StringUtils.substringAfter("org.apache.commons.lang3.LocaleUtils", "");
      charSequenceArray1[8] = (CharSequence) "org.apache.commons.lang3.LocaleUtils";
      StringUtils.firstNonBlank(charSequenceArray1);
      charSequenceArray0[0] = (CharSequence) ";[n-EPLbcGV{CS&IqO4a)jU6UYbpK4d";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      StringUtils.isNoneBlank(charSequenceArray0);
      StringUtils.replaceIgnoreCase(";[n-EPLbcGV{CS&IqO4a)jU6UYbpK4d", "Search and Replace array lengths don't match: ", "");
      StringUtils.isNumeric(";[n-EPLbcGV{CS&IqO4a)jU6UYbpK4d");
      StringUtils.substringAfterLast("p{InCombiningDiacriticalMarks}+", "]");
      StringUtils.isAllEmpty(charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = StringUtils.trimToNull("(L");
      assertNotNull(string0);
      assertEquals("(L", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("(L");
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("(L", "(L");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("(L", string1);
      
      StringUtils.substringAfterLast("(L", "(L");
      StringUtils.isAsciiPrintable("(L");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)66;
      StringUtils.join(byteArray0, '`', 48, (int) (byte) (-75));
      StringUtils.rightPad("=8`4XwRr,HfV\"g2&$", 2048);
      StringUtils.isAlphaSpace("");
      StringUtils.wrapIfMissing("=8`4XwRr,HfV\"g2&$", " ");
      StringUtils.join(byteArray0, '`', (int) (byte)66, (int) (byte) (-75));
      StringUtils.splitPreserveAllTokens("T52%^~Gr+'m;64", "rU}", 108);
      StringUtils.splitPreserveAllTokens("", "Of", (int) (byte)66);
      StringUtils.chop("rU}");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      StringUtils.substringBefore("q", 853);
      StringUtils.isNumeric("q");
      StringUtils.rightPad("q", 853, "q");
      StringUtils.isNumeric("q");
      StringUtils.containsWhitespace("q");
      StringUtils.substringsBetween("q", " ", "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq");
      StringUtils.abbreviate("Strings must not be null", "cX%x", 22, 853);
      StringUtils.rightPad("", 22, "cX%x");
      StringUtils.replace("fLhNt! hp", "q", "Strings must not be null", 22);
      StringUtils.removeEndIgnoreCase("fLhNt! hp", "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq");
      StringUtils.indexOfIgnoreCase((CharSequence) "cX%xcX%xcX%xcX%xcX", (CharSequence) "Strings must not be null", 32);
      StringUtils.difference("q", "q");
      Locale locale0 = new Locale("lAY8");
      String[] stringArray0 = Locale.getISOCountries();
      StringUtils.getFuzzyDistance("q", "", locale0);
      StringUtils.substringsBetween("Xu>~+[", "fLhNt! hp", " ");
      StringUtils.join(stringArray0);
      StringUtils.isNumeric("88)H9(ph2l[?IY)");
      StringUtils.center("Strings must not be null", 22, 'U');
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      StringUtils.trimToEmpty("', is neither of type Map.Entry nor an Array");
      StringUtils.lastIndexOf((CharSequence) "', is neither of type Map.Entry nor an Array", 101, 101);
      StringUtils.getDigits("', is neither of type Map.Entry nor an Array");
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[3] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[6] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[7] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      StringUtils.endsWithAny("", charSequenceArray0);
      StringUtils.isAlphanumeric(charSequenceArray0[7]);
      String[] stringArray0 = StringUtils.split("", 'A');
      StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      StringUtils.abbreviate("#lHb", 101);
      StringUtils.isAnyBlank(stringArray0);
      StringUtils.replaceChars(":8tb", "", "4\")l.acn;a");
      StringUtils.uncapitalize(" vs ");
      StringUtils.repeat("\n", "\"v\u0002*S7\"s", 20);
      StringUtils.mid(" vs ", (-190), (-1188));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      StringUtils.join((Object[]) null, "");
      StringUtils.unwrap("jF-u", ".VNQ0T6P>`x");
      StringUtils.upperCase(".VNQ0T6P>`x");
      StringUtils.startsWith("", ".VNQ0T6P>`x");
      StringUtils.replacePattern((String) null, "jF-u", "");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "jF-u";
      StringUtils.isAnyEmpty(charSequenceArray0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)50;
      byteArray0[1] = (byte)94;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-53);
      byteArray0[5] = (byte) (-112);
      byteArray0[6] = (byte)118;
      Charset charset0 = Charset.defaultCharset();
      StringUtils.toEncodedString(byteArray0, charset0);
      StringUtils.ordinalIndexOf("2^\u0014\uFFFD\u02D0v", (CharSequence) null, 34);
      StringUtils.swapCase("The character ");
      StringUtils.prependIfMissingIgnoreCase("8_wL2U@Jn~s6[V", "P<jzRUZN8#~", charSequenceArray0);
      StringUtils.containsAny(charSequenceArray0[0], charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      StringUtils.removeAll("3\"6", "3\"6");
      charSequenceArray0[2] = (CharSequence) "";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "3\"6";
      StringUtils.replaceEach("u5k(Ug `g,5vt!(kr.", stringArray0, stringArray0);
      StringUtils.containsIgnoreCase("81NGpx&]R", charSequenceArray0[2]);
      StringUtils.repeat('5', 1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = 'G';
      charArray0[2] = '$';
      StringUtils.normalizeSpace("-J~].WK*ta1h.e");
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "-J~].WK*ta1h.e";
      charSequenceArray0[1] = (CharSequence) "qD}uLU";
      charSequenceArray0[2] = (CharSequence) "-J~].WK*ta1h.e";
      charSequenceArray0[3] = (CharSequence) "-J~].WK*ta1h.e";
      charSequenceArray0[4] = (CharSequence) "-J~].WK*ta1h.e";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-J~].WK*ta1h.e";
      stringArray0[1] = "-J~].WK*ta1h.e";
      stringArray0[2] = "-J~].WK*ta1h.e";
      stringArray0[3] = "[k;O$x";
      stringArray0[4] = "-J~].WK*ta1h.e";
      stringArray0[5] = "qD}uLU";
      stringArray0[6] = "maxWi";
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.substringBetween("(L", "-J~].WK*ta1h.e");
      StringUtils.unwrap((String) null, 'G');
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringUtils.overlay("R g!uKRu ghqx#hq#!u1", "R g!uKRu ghqx#hq#!u1", 0, 0);
      StringUtils.replace("#", "", "");
      StringUtils.contains((CharSequence) "R g!uKRu ghqx#hq#!u1R g!uKRu ghqx#hq#!u1", (CharSequence) "#");
      StringUtils.substring("#", 2029, 2);
      StringUtils.wrap("R g!uKRu ghqx#hq#!u1", '7');
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "R g!uKRu ghqx#hq#!u1";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "R g!uKRu ghqx#hq#!u1R g!uKRu ghqx#hq#!u1";
      StringUtils.chomp(" vs ", "negative~`vxGOhcNnkz6q'nT ");
      charSequenceArray0[3] = (CharSequence) " vs ";
      charSequenceArray0[4] = (CharSequence) "#";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "#";
      charSequenceArray0[7] = (CharSequence) "R g!uKRu ghqx#hq#!u1R g!uKRu ghqx#hq#!u1";
      StringUtils.appendIfMissingIgnoreCase("]LYg$yxA", "#", charSequenceArray0);
      StringUtils.getJaroWinklerDistance(" vs ", "#");
      StringUtils.abbreviateMiddle((String) null, "u!y0w'}l#gr_wMinimum abbreviation width with offset is %d", 0);
      StringUtils.lastIndexOf((CharSequence) "", charSequenceArray0[2], 2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringUtils.replaceFirst("', is neither of type Map.Entry nor an Array", (String) null, "m");
      StringUtils.replacePattern("', is neither of type Map.Entry nor an Array", (String) null, "m");
      StringUtils.center("', is neither of type Map.Entry nor an Array", (-1047), '\"');
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      enumSet0.add(locale_Category0);
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      enumSet0.add(locale_Category1);
      enumSet0.iterator();
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "m";
      StringUtils.substringBefore("', is neither of type Map.Entry nor an Array", "maxWith cannot be negative");
      charSequenceArray0[2] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      StringUtils.equalsAnyIgnoreCase("', is neither of type Map.Entry nor an Array", charSequenceArray0);
      StringUtils.leftPad((String) null, (-1047), "+lz1~0YY");
      StringUtils.indexOfDifference(charSequenceArray0);
      StringUtils.removeIgnoreCase("4g$lc/_aKq2K", "', is neither of type Map.Entry nor an Array");
      StringUtils.joinWith("maxWith cannot be negative", charSequenceArray0);
      StringUtils.replaceChars("maxWith cannot be negativemmaxWith cannot be negative', is neither of type Map.Entry nor an Array", "', is neither of type Map.Entry nor an Array", "{{{{{{{{{{{{{{{");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "WKU}'{b&)yv ";
      StringUtils.removeEnd("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      int int0 = 2;
      String string1 = null;
      StringUtils.center((String) null, 2);
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0);
      StringUtils.getJaroWinklerDistance(charSequenceArray0[4], charSequenceArray0[4]);
      StringUtils.abbreviateMiddle((String) null, "h(3", (-18));
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      TreeSet<Locale> treeSet0 = new TreeSet<Locale>();
      ArrayList<Locale> arrayList0 = new ArrayList<Locale>();
      Locale locale0 = Locale.KOREAN;
      arrayList0.add(locale0);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("g!sbY_(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=g!sby_(
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringUtils.unwrap("hF-u", ".VNQ0T6P>`x");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.apache.commons.lang3.ObjectUtils$Null";
      stringArray0[0] = "*c'M";
      stringArray0[3] = "kz6q'nT ";
      stringArray0[4] = "hF-u";
      stringArray0[5] = "$";
      stringArray0[6] = "81NGpx&]R";
      StringUtils.replaceEach("org.apache.commons.lang3.ObjectUtils$Null", stringArray0, stringArray0);
      StringUtils.repeat('q', 23);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.getIfEmpty(")MBY/", supplier0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("fheMGhvu(O3%.Pt");
      linkedHashSet0.iterator();
      StringUtils.defaultString(".[6~");
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) ".[6~";
      charSequenceArray0[2] = (CharSequence) ".[6~";
      charSequenceArray0[4] = (CharSequence) ".[6~";
      charSequenceArray0[5] = (CharSequence) ".[6~";
      charSequenceArray0[8] = (CharSequence) ".[6~";
      StringUtils.appendIfMissingIgnoreCase("#", "", charSequenceArray0);
      StringUtils.getJaroWinklerDistance("#", charSequenceArray0[2]);
      StringUtils.containsOnly(charSequenceArray0[8], ".[6~");
      StringUtils.split("fheMGhvu(O3%.Pt", "object", (-2743));
      StringUtils.indexOfAny(charSequenceArray0[4], charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      StringUtils.stripToNull("3\"6");
      charSequenceArray0[2] = (CharSequence) "3\"6";
      StringUtils.startsWithAny(charSequenceArray0[2], charSequenceArray0);
      StringUtils.left("3\"6", 1);
      StringUtils.center("3\"6", 1);
      char[] charArray0 = new char[19];
      charArray0[0] = 's';
      charArray0[1] = '%';
      charArray0[2] = '<';
      charArray0[3] = 'O';
      charArray0[4] = 'f';
      long[] longArray0 = new long[9];
      longArray0[0] = (-901L);
      longArray0[1] = (long) 'O';
      longArray0[2] = (long) 'O';
      longArray0[3] = 1L;
      longArray0[4] = (-1720L);
      longArray0[5] = (long) '%';
      longArray0[6] = (long) 'O';
      longArray0[7] = (long) 's';
      longArray0[8] = (long) '%';
      StringUtils.join(longArray0, 'O');
      StringUtils.containsOnly((CharSequence) "-901O79O79O1O-1720O37O79O115O37", "-901O79O79O1O-1720O37O79O115O37");
      StringUtils.replaceFirst("-901O79O79O1O-1720O37O79O115O37", "pu", "(L");
      int[] intArray0 = new int[7];
      intArray0[0] = (int) 'f';
      intArray0[1] = 513;
      intArray0[2] = (int) '%';
      intArray0[3] = (int) '<';
      intArray0[4] = (int) '%';
      intArray0[5] = (int) '<';
      intArray0[6] = (int) 'f';
      StringUtils.join(intArray0, 'q');
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      ListIterator<CharBuffer> listIterator0 = linkedList0.listIterator();
      StringUtils.join((Iterator<?>) listIterator0, '#');
      StringUtils.leftPad(",", (int) (byte) (-22), "...");
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.trimToSize();
      StringUtils.removeEndIgnoreCase(",", ",");
      linkedList0.toArray();
      stack0.iterator();
      StringUtils.splitPreserveAllTokens("", "i,}");
      StringUtils.removePattern("4|rITE", "4|rITE");
      long[] longArray0 = new long[2];
      longArray0[0] = (long) (-1);
      longArray0[1] = (long) (byte)0;
      StringUtils.stripEnd("...", "...");
      StringUtils.wrapIfMissing("", 'u');
      StringUtils.substringsBetween("Exception cloning Cloneable type ", "Cannot clone Cloneable type ", "...e.commons.lan#(bk.");
      StringUtils.countMatches((CharSequence) "i,}", '#');
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      StringUtils.removeAll("3b", "3b");
      charSequenceArray0[2] = (CharSequence) "";
      StringUtils.startsWithAny(charSequenceArray0[2], charSequenceArray0);
      StringUtils.center("3b", 25);
      StringUtils.removeEndIgnoreCase("           3b            ", "");
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.join((Object[]) charSequenceArray0, 'R', 99, (-112));
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "WeZfqP~Z L;xu7:**", 1);
      StringUtils.equals(charSequenceArray0[2], (CharSequence) "");
      StringUtils.abbreviateMiddle("", "           3b            ", (-112));
      StringUtils.countMatches((CharSequence) "           3b            ", (CharSequence) "3b");
      StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = StringUtils.leftPad("L", 8192, "L");
      Stack<Integer> stack0 = new Stack<Integer>();
      Stack<Integer> stack1 = new Stack<Integer>();
      Integer integer0 = new Integer(240);
      stack1.add(integer0);
      stack0.addAll((Collection<? extends Integer>) stack1);
      Integer integer1 = new Integer(1907);
      stack1.trimToSize();
      StringUtils.removeEndIgnoreCase("Threshold must not be negativek-1_^iD]c'udaJHf", "Threshold must not be negativek-1_^iD]c'udaJHf");
      stack0.iterator();
      StringUtils.splitPreserveAllTokens("i,}", "");
      StringUtils.removePattern(string0, (String) null);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1907;
      longArray0[1] = (long) 8192;
      longArray0[2] = (long) 1907;
      longArray0[3] = (long) 8192;
      longArray0[4] = (long) 8192;
      StringUtils.join(longArray0, 'J');
      StringUtils.wrapIfMissing("1907J8192J1907J8192J8192", 'J');
      StringUtils.substringBefore(";}7ZTT$%d}V1V_*jMf8", 1907);
      StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) ";}7ZTT$%d}V1V_*jMf8", (-3125));
      StringUtils.substringsBetween("org.apache.commons.lang3.RegExUtils", "", "1%G}CZ^kZcMBVP=f");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      StringUtils.right("5F:D34SA.I\")^P", 237);
      charSequenceArray0[0] = (CharSequence) "5F:D34SA.I\")^P";
      charSequenceArray0[1] = (CharSequence) "5F:D34SA.I\")^P";
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1780);
      shortArray0[1] = (short) (-1780);
      StringUtils.right("5F:D34SA.I\")^P", (-1));
      StringUtils.substring("org.apache.commons.lang3.exception.CloneFailedException", (int) (short) (-1780), 10);
      StringUtils.wrapIfMissing("I8+zaA:VHpTk)<", '=');
      StringUtils.substringsBetween("=I8+zaA:VHpTk)<=", (String) null, "jKd$");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L";
      stringArray0[1] = "L";
      stringArray0[2] = "L";
      StringUtils.replaceAll("", "L", "");
      StringUtils.right("L", 45);
      StringUtils.abbreviate("Comparator should not be null.", "L", (-1601), 63);
      StringUtils.isMixedCase("Comparator should not be null.");
      StringUtils.isNotEmpty("");
      StringUtils.removeStart((String) null, "7OJ3CfmDo[D}H?");
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      StringUtils.right("7OJ3CfmDo[D}H?", 14);
      StringUtils.join((int[]) null, 'g');
      StringUtils.difference((String) null, "ay");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringUtils.join((Object[]) null, "");
      StringUtils.unwrap("hF-u", ".VNQ0T6P>`x");
      boolean[] booleanArray0 = new boolean[1];
      StringUtils.join(booleanArray0, 'j');
      StringUtils.toCodePoints((CharSequence) null);
      StringUtils.compareIgnoreCase("false", ")c:", true);
      StringUtils.join((double[]) null, 'j', (-4123), (-4123));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = 'G';
      charArray0[2] = '$';
      StringUtils.normalizeSpace("-J~].WK*ta1h.e");
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "-J~].WK*ta1h.e";
      charSequenceArray0[1] = (CharSequence) "qD}uLU";
      charSequenceArray0[2] = (CharSequence) "-J~].WK*ta1h.e";
      charSequenceArray0[3] = (CharSequence) "-J~].WK*ta1h.e";
      charSequenceArray0[4] = (CharSequence) "-J~].WK*ta1h.e";
      charSequenceArray0[5] = (CharSequence) "-J~].WK*ta1h.e";
      charSequenceArray0[6] = (CharSequence) "-J~].WK*ta1h.e";
      charSequenceArray0[7] = (CharSequence) "-J~].WK*ta1h.e";
      StringUtils.lastIndexOfAny("-J~].WK*ta1h.e", charSequenceArray0);
      StringUtils.repeat("-J~].WK*ta1h.e", 48);
      StringUtils.strip("a)jU6UYbpK4d;[n-EPLbcGV{CS&IqO4");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Ty,HVnggok}20]", "Ty,HVnggok}20]");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBetween("", "Ty,HVnggok}20]");
      assertNull(string1);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Ty,HVnggok}20]");
      assertEquals(14, int0);
      
      String string2 = StringUtils.substringBetween("Locale mustnot be nll", "", "Locale mustnot be nll");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.isReadOnly());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteBuffer0);
      
      String string3 = StringUtils.firstNonBlank(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      assertNull(string3);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");
      StringUtils.stripStart("", (String) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringUtils.substringBefore("q", 853);
      StringUtils.isNumeric("q");
      StringUtils.rightPad("q", 853, "q");
      StringUtils.isNumeric("q");
      StringUtils.containsWhitespace("q");
      StringUtils.substringsBetween("q", " ", "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq");
      StringUtils.abbreviate("Strings must not be null", "cX%x", 15, 853);
      StringUtils.contains((CharSequence) null, (CharSequence) " ");
      StringUtils.trimToEmpty("org.apache.commons.lang3.LocaleUtils");
      StringUtils.indexOf((CharSequence) "org.apache.commons.lang3.LocaleUtils", 97, 15);
      StringUtils.center("q", 1795, (String) null);
      StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.LocaleUtils", '.');
      StringUtils.indexOfDifference((CharSequence) "org.apache.commons.lang3.LocaleUtils", (CharSequence) "Strings must not be null");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringUtils.removeStart("j+2&{()=)F.VAwUFs.", "K'N\"/");
      StringUtils.contains((CharSequence) "K'N\"/", 16);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "kz6q'nT ";
      stringArray0[1] = "j+2&{()=)F.VAwUFs.";
      stringArray0[2] = "K'N\"/";
      stringArray0[3] = "81NGpx&]R";
      stringArray0[4] = "kz6q'nT ";
      StringUtils.replaceEach("j+2&{()=)F.VAwUFs.", stringArray0, stringArray0);
      StringUtils.containsIgnoreCase("K'N\"/", "kz6q'nT ");
      char[] charArray0 = new char[8];
      charArray0[0] = '@';
      charArray0[1] = ' ';
      charArray0[2] = 'T';
      charArray0[3] = '=';
      charArray0[4] = '4';
      charArray0[5] = 't';
      charArray0[6] = '2';
      charArray0[7] = 'S';
      StringUtils.containsNone((CharSequence) "K'N\"/", charArray0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L";
      stringArray0[1] = "L";
      stringArray0[2] = "L";
      StringUtils.abbreviate("L", 1497);
      StringUtils.join((short[]) null, ':', 1497, 117);
      StringUtils.defaultIfBlank((CharSequence) "L", (CharSequence) "");
      StringUtils.isAllBlank(stringArray0);
      StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.getIfBlank("#YQ2sCZ*Mt{\"9-P1", supplier0);
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      StringUtils.chomp("|'>sGfgVYD9Cc~");
      StringUtils.isAlphaSpace("#YQ2sCZ*Mt{\"9-P1");
      StringUtils.toRootLowerCase("|'>sGfgVYD9Cc~");
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) '\\';
      floatArray0[1] = (float) '\\';
      floatArray0[2] = (float) '\\';
      floatArray0[3] = (float) '\\';
      StringUtils.join(floatArray0, '');
      StringUtils.indexOfIgnoreCase((CharSequence) "#YQ2sCZ*Mt{\"9-P1", (CharSequence) "|'>sgfgvyd9cc~");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = new Object();
      Vector<Object> vector0 = new Vector<Object>();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ch";
      stringArray0[1] = "LqWbV<mb<3=>ks";
      stringArray0[2] = "UPM,";
      stringArray0[3] = "?@;uWKU}'{b&)yv ?@;uWKU}'{b&)yv ?@;uWKU}'{b&)yv ?@;uWKU}'{b&)yv WKU}'{b&)yv ";
      stringArray0[4] = "~";
      StringUtils.getCommonPrefix(stringArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      vector0.add((Object) charBuffer0);
      StringUtils.join((List<?>) vector0, 'd', (-2011), (-2011));
      StringUtils.replaceChars("I/l+RvL", 'd', '|');
      StringUtils.capitalize("I/l+RvL");
      StringUtils.repeat("a]Z`", "I/l+RvL", (-2011));
      StringUtils.getLevenshteinDistance((CharSequence) "I/l+RvL", (CharSequence) "");
      float[] floatArray0 = new float[0];
      StringUtils.join(floatArray0, 'd');
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringUtils.removeEnd("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      StringUtils.rightPad("VD(", (-880), "T?@;uN");
      StringUtils.replace("", "VD(", "L6<d]3EH>k=E39", 32);
      StringUtils.removeEndIgnoreCase("", "^#H:}D?");
      StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "VD(", (-880));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "WKU}'{b&)yv ";
      stringArray0[1] = "fLhNt! hp";
      StringUtils.difference("", "");
      Locale locale0 = new Locale("fLhNt! hp");
      String[] stringArray1 = Locale.getISOCountries();
      StringUtils.getFuzzyDistance("WKU}'{b&)yv ", "HPuD", locale0);
      StringUtils.substringsBetween("", "88)H9(ph2l[?IY)", "fLhNt! hp");
      StringUtils.join(stringArray1);
      StringUtils.isNumeric("HPuD");
      StringUtils.center("HPuD", 32, 'U');
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = StringUtils.upperCase("K'N\"/", (Locale) null);
      assertNotNull(string0);
      assertEquals("K'N\"/", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "K'N\"/", (CharSequence) "K'N\"/");
      assertEquals(0, int0);
      
      String string1 = StringUtils.lowerCase("Locale must not be null", (Locale) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("locale must not be null", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(comparator0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("K'N\"/"));
      
      boolean boolean0 = priorityQueue0.add("");
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains(""));
      assertFalse(priorityQueue0.contains("K'N\"/"));
      assertTrue(boolean0);
      
      boolean boolean1 = priorityQueue0.add("");
      assertEquals(2, priorityQueue0.size());
      assertTrue(priorityQueue0.contains(""));
      assertFalse(priorityQueue0.contains("K'N\"/"));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, ':');
      assertEquals(2, priorityQueue0.size());
      assertNotNull(string2);
      assertTrue(priorityQueue0.contains(""));
      assertFalse(priorityQueue0.contains("K'N\"/"));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(":", string2);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1.0);
      StringUtils.join(doubleArray0, 'b');
      StringUtils.substringsBetween("", "Supplied value must be a valid byte literal between -128 and 127: [", "Supplied value must be a valid byte literal between -128 and 127: [");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      StringUtils.compareIgnoreCase("BI'C4", "BI'C4");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "BI'C4";
      stringArray0[1] = "BI'C4";
      StringUtils.indexOfIgnoreCase((CharSequence) "BI'C4", (CharSequence) "BI'C4", 56);
      StringUtils.wrapIfMissing((String) null, '*');
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)0;
      StringUtils.join(byteArray0, 'O', 2147483645, (int) (byte) (-28));
      StringUtils.reverseDelimited("", '#');
      StringUtils.leftPad("81NGpx&", (int) (byte) (-22), 'D');
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "81NGpx&", (CharSequence) "", (int) (byte)0);
      Integer integer0 = new Integer((byte)0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(21);
      charBuffer0.chars();
      charBuffer0.put(">|~m");
      StringUtils.substringAfter("^O", "^O");
      StringUtils.removeAll("", "");
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "^O";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) ">|~m";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) null;
      StringUtils.lastIndexOfAny("^O", charSequenceArray0);
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.repeat("^O", 21);
      StringUtils.strip("R5");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringUtils.rightPad("O4Wyv<v", 0, "");
      StringUtils.stripStart("O4Wyv<v", "O4Wyv<v");
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '/';
      StringUtils.containsAny((CharSequence) "", charArray0);
      StringUtils.replaceOnceIgnoreCase("O4Wyv<v", "1(ctXP", "");
      StringUtils.abbreviate("", 0, 0);
      StringUtils.indexOf((CharSequence) "1(ctXP", 0, (-63));
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "O4Wyv<v";
      charSequenceArray0[4] = (CharSequence) "O4Wyv<v";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "O4Wyv<v";
      StringUtils.prependIfMissingIgnoreCase("", "O4Wyv<v", charSequenceArray0);
      Locale.getISOLanguages();
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '/', (-63), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -63
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringUtils.unwrap("(L", "(L");
      StringUtils.containsWhitespace("(L");
      StringUtils.unwrap("(L", "(L");
      StringUtils.isAsciiPrintable("(L");
      String string0 = StringUtils.LF;
      StringUtils.isNumeric("\n");
      StringUtils.capitalize("Z");
      StringUtils.split("l'yn2b/:+9TmA", "Z", 121);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringUtils.chop("V");
      StringUtils.difference("V", "");
      StringUtils.substringBetween("", "");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "#";
      stringArray0[2] = "V";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.removeStart("XXx/XYmYT;m&s(,", "e5F[5");
      StringUtils.removeAll(",H,H", "");
      StringUtils.startsWithAny("V", stringArray0);
      StringUtils.left("#", 1);
      StringUtils.center("vDLs>G}z", 1);
      StringUtils.splitPreserveAllTokens("', is neither of type Map.Entry nor an ArrayGn", "#");
      StringUtils.length("#");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringUtils.chop("V");
      StringUtils.difference("V", "");
      StringUtils.substringBetween("", "");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "#";
      stringArray0[2] = "V";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.removeStart("XXx/XYmYT;m&s(,", "e5F[5");
      StringUtils.capitalize("XXx/XYmYT;m&s(,");
      int int0 = StringUtils.INDEX_NOT_FOUND;
      StringUtils.repeat('r', 2985);
      StringUtils.unwrap("Yg;J~vekVh3q}", 'r');
      StringUtils.indexOfAny((CharSequence) "Yg;J~vekVh3q}", (CharSequence[]) stringArray0);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.getIfBlank("qTW@R.@", supplier0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringUtils.substring("[", (-1217), (-1217));
      StringUtils.getJaroWinklerDistance("", "");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      EnumSet.of(locale_Category0, locale_Category1);
      enumSet0.iterator();
      StringUtils.replaceOnce("", "", "[");
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      StringUtils.isWhitespace("[");
      StringUtils.join((byte[]) null, 'Y');
      StringUtils.replace((String) null, "", "");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      StringUtils.stripAccents("");
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.add("");
      StringUtils.mid("U8B'!", 10, 10);
      StringUtils.removeAll("KT=.N", (String) null);
      StringUtils.lastIndexOfAny(charSequenceArray0[2], charSequenceArray0);
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.removeEndIgnoreCase((String) null, "objecyv ");
      StringUtils.replace("KT=.N", "", (String) null, 8);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringUtils.stripToEmpty("i$`i");
      StringUtils.ordinalIndexOf("i$`i", "i$`i", (-3623));
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-75);
      StringUtils.rotate("i$`i", (byte) (-75));
      StringUtils.join(byteArray0, 'z', (int) (byte)0, (int) (byte)0);
      StringUtils.isAlphaSpace("ii$`");
      StringUtils.toRootLowerCase("i$`i");
      Object[] objectArray0 = new Object[0];
      StringUtils.join(objectArray0, 's');
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "i$`i";
      StringUtils.endsWithAny("i$`i", charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      StringUtils.removeEndIgnoreCase("i$`i", "i$`i");
      charSequenceArray0[0] = (CharSequence) "";
      StringUtils.prependIfMissingIgnoreCase("~`vxGOhc", charSequenceArray0[0], charSequenceArray0);
      charSequenceArray0[1] = (CharSequence) "~`vxGOhc";
      StringUtils.replacePattern("i$`i", "2,ik0n?HcBJ948", "x|zVbwR{/O8\"Q");
      charSequenceArray0[2] = (CharSequence) "i$`i";
      StringUtils.capitalize("");
      charSequenceArray0[3] = (CharSequence) "";
      StringUtils.rightPad("#}cn", 84, 'E');
      charSequenceArray0[4] = (CharSequence) "#}cnEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE";
      StringUtils.reverse("t9gw$A)lQVVkB");
      StringUtils.left("i$`i", (-2149));
      StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "");
      charSequenceArray0[6] = (CharSequence) "";
      StringUtils.isAllBlank(charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("i$`i");
      assertNotNull(string0);
      assertEquals("i$`i", string0);
      
      String string1 = StringUtils.capitalize("i$`i");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("I$`i", string1);
      
      int int0 = StringUtils.ordinalIndexOf("V", "V", 0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rightPad("g%*]FJ", (-2925), " vs ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("g%*]FJ", string2);
      
      String string3 = StringUtils.rotate("g%*]FJ", (-1));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("%*]FJg", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "g%*]FJ";
      int int1 = StringUtils.indexOfAny((CharSequence) "g%*]FJ", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      String string4 = StringUtils.substringAfterLast(" vs ", (-2925));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.substringBeforeLast("i$`i", "g%*]FJ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("i$`i", string5);
      
      boolean boolean0 = StringUtils.containsWhitespace(charSequenceArray0[0]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" vs ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      StringUtils.splitPreserveAllTokens("I$`i", "Gn", (-2925));
      StringUtils.substringBetween("Wk}&N$e!t0 4sW~LpT", ";R4>U[W&im", "i$`i");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      StringUtils.prependIfMissing("", "", charSequenceArray0);
      StringUtils.removeFirst("", "");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-1082));
      StringUtils.containsNone((CharSequence) "", ", '");
      StringUtils.repeat("GM5B", 11);
      StringUtils.chomp("", "");
      StringUtils.unwrap("", "");
      StringUtils.rightPad("", 11);
      long[] longArray0 = new long[1];
      longArray0[0] = (long) '|';
      StringUtils.join(longArray0, '|');
      StringUtils.startsWithIgnoreCase(charSequenceArray0[1], "GM5B");
      StringUtils.stripStart("", ":KU}(tb&)yv :KU}(tb&)yv ");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      SortedSet<String> sortedSet0 = treeSet0.tailSet(", '");
      StringUtils.join((Iterable<?>) sortedSet0, '|');
      StringUtils.isNotBlank("");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      char[] charArray0 = new char[4];
      StringUtils.valueOf(charArray0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      enumSet0.clear();
      enumSet0.add(locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      StringUtils.join(iterator0, '\u0000');
      enumSet0.add(locale_Category0);
      StringUtils.length("FORMAT");
      StringUtils.toCodePoints("FORMAT");
      StringUtils.equalsIgnoreCase("\u0000\u0000\u0000\u0000", "l %");
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\u0000\u0000\u0000\u0000";
      charSequenceArray0[2] = (CharSequence) "FORMAT";
      charSequenceArray0[3] = (CharSequence) "\u0000\u0000\u0000\u0000";
      charSequenceArray0[6] = (CharSequence) "\u0000\u0000\u0000\u0000";
      charSequenceArray0[2] = (CharSequence) "FORMAT";
      charSequenceArray0[8] = (CharSequence) "FORMAT";
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.repeat('D', 100);
      StringUtils.isMixedCase(charSequenceArray0[5]);
      StringUtils.startsWithAny(charSequenceArray0[3], charSequenceArray0);
      StringUtils.isNotEmpty(charSequenceArray0[5]);
      StringUtils.substringBetween("FORMAT", "FORMAT", "org.apache.commons.lang3.LocaleUtils");
      StringUtils.isAllEmpty(charSequenceArray0);
      StringUtils.join(iterator0, 'D');
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringUtils.replaceIgnoreCase("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      StringUtils.center("~`vxGOhcNnkz6q'nT negative", 5, "Minimum abbreviation width with offset is %d");
      StringUtils.abbreviate("p{InCombiningDiacriticalMarks}+", (String) null, 2311, 1490);
      StringUtils.isNumeric((CharSequence) null);
      StringUtils.split((String) null, (String) null);
      StringUtils.abbreviate("J", (String) null, 2311, 1490);
      StringUtils.indexOf((CharSequence) "J", 0, 37);
      StringUtils.center("~`vxGOhcNnkz6q'nT negative", (-1376), "M*a.S[t A");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringUtils.strip("Aborting to protect against StackOverflowError - output of one loop is the input of another", "', is neither of type Map.Entry nor an Array");
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      StringUtils.wrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", '4');
      StringUtils.replace("borting to protect against StackOverflowError - output of one loop is the inpu", "", "");
      StringUtils.contains((CharSequence) "", (CharSequence) "4Aborting to protect against StackOverflowError - output of one loop is the input of another4");
      StringUtils.substring("Aborting to protect against StackOverflowError - output of one loop is the input of another", (-1630), 2);
      StringUtils.wrap("", '4');
      StringUtils.chomp("borting to protect against StackOverflowError - output of one loop is the inpu", "Gn");
      HashSet<String> hashSet0 = new HashSet<String>();
      Iterator<String> iterator0 = hashSet0.iterator();
      StringUtils.join(iterator0, 'L');
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "negative~`vxGOhcNnkz6q'nT ";
      charSequenceArray0[1] = (CharSequence) "]LYg$yxA";
      charSequenceArray0[2] = (CharSequence) "Ab";
      StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0);
      StringUtils.getJaroWinklerDistance("", " vs ");
      StringUtils.abbreviateMiddle("", "", 55);
      StringUtils.lastIndexOf((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) "", 2);
      StringUtils.endsWithAny("", charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringUtils.wrapIfMissing("org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", "org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB");
      StringUtils.remove("org.apache.commons.lang3.ObjectUtils", '?');
      char[] charArray0 = new char[0];
      StringUtils.containsOnly((CharSequence) "org.apache.commons.lang3.ObjectUtils", charArray0);
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.ObjectUtils";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.ObjectUtils";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.ObjectUtils";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.ObjectUtils";
      StringUtils.indexOfDifference((CharSequence) "org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", charSequenceArray0[1]);
      StringUtils.endsWithAny((CharSequence) null, charSequenceArray0);
      StringUtils.substringBeforeLast(">t=", "org.apache.commons.lang3.ObjectUtils");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Iterator<Integer> iterator0 = stack0.iterator();
      StringUtils.join(iterator0, "Noajt\"oXWe6@hF()>Gr");
      StringUtils.toCodePoints("");
      StringUtils.rotate("", (-3657));
      StringUtils.splitByCharacterTypeCamelCase("Noajt\"oXWe6@hF()>Gr");
      StringUtils.containsOnly((CharSequence) "Noajt\"oXWe6@hF()>Gr", "");
      StringUtils.reverse("pu");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      StringUtils.join(byteArray0, '=', (int) (byte)0, (int) (byte)0);
      StringUtils.compareIgnoreCase("", "");
      StringUtils.trim("");
      StringUtils stringUtils0 = new StringUtils();
      Integer integer0 = new Integer((-1));
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("\r", "");
      StringUtils.substring("", 0);
      StringUtils.containsWhitespace("\r");
      StringUtils.stripAll(stringArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      StringUtils.right("5F:D34SA.II\")^P", 237);
      charSequenceArray0[0] = (CharSequence) "5F:D34SA.II\")^P";
      StringUtils.defaultString("5F:D34SA.II\")^P");
      charSequenceArray0[1] = (CharSequence) "5F:D34SA.II\")^P";
      StringUtils.mid("5F:D34SA.II\")^P", 1263, 1263);
      charSequenceArray0[2] = (CharSequence) "";
      StringUtils.firstNonEmpty(charSequenceArray0);
      charSequenceArray0[3] = (CharSequence) "5F:D34SA.II\")^P";
      StringUtils.isAllBlank(charSequenceArray0);
      StringUtils.isWhitespace("");
      StringUtils.leftPad("kz6q'nT ", 114, '{');
      StringUtils.isAllUpperCase("");
      char[] charArray0 = new char[0];
      StringUtils.join(charArray0, 'V');
      StringUtils.isNumeric("5F:D34SA.II\")^P");
      String string0 = StringUtils.EMPTY;
      StringUtils.isNumeric("");
      StringUtils.splitPreserveAllTokens("");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      StringUtils.replaceIgnoreCase("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      StringUtils.removeStartIgnoreCase((String) null, "Minimum abbreviation width with offset is %d");
      StringUtils.equals((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      StringUtils.rotate("Minimum abbreviation width with offset is %d", 1643);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-75);
      byteArray0[2] = (byte) (-75);
      StringUtils.isAlphaSpace("th offset is %dMinimum abbreviation width wi");
      StringUtils.toRootLowerCase("Minimum abbreviation width with offset is %d");
      StringUtils.substringAfterLast("th offset is %dMinimum abbreviation width wi", (int) (byte) (-75));
      StringUtils.chomp("Minimum abbreviation width with offset is %d");
      StringUtils.splitPreserveAllTokens("", '\"');
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      StringUtils.replaceIgnoreCase("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      StringUtils.center("Minimum abbreviation width with offset is %d", 5, "Minimum abbreviation width with offset is %d");
      String string0 = "pu";
      StringUtils.removeStartIgnoreCase((String) null, "pu");
      StringUtils.equals((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "Minimum abbreviation width with offset is %d");
      StringUtils.unwrap("pu", "Minimum abbreviation width with offset is %d");
      // Undeclared exception!
      try { 
        StringUtils.truncate("pu", (-3989), 2311);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      StringUtils.substring("[", (-1217), (-1217));
      StringUtils.getJaroWinklerDistance("", "");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet.of(locale_Category0, locale_Category1);
      StringUtils.replaceOnce("", "", "[");
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      StringUtils.isWhitespace("[");
      StringUtils.join((byte[]) null, 'Y');
      StringUtils.capitalize("");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      StringUtils.leftPad("", (-1217), "");
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.add("");
      StringUtils.mid("Invalid locale format: ", 10, 10);
      StringUtils.removeAll("KT=.N", "");
      StringUtils.lastIndexOfAny(charSequenceArray0[2], charSequenceArray0);
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.removeEndIgnoreCase("", "object");
      StringUtils.abbreviate((String) null, (-3537), 10);
      StringUtils.countMatches((CharSequence) null, 'd');
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringUtils.isAnyEmpty((CharSequence[]) null);
      StringUtils.lastIndexOf((CharSequence) "ARPm)1Np^_WIByARPm)1Np^_WIBy", (CharSequence) "ARPm)1Np^_WIByARPm)1Np^_WIBy");
      StringUtils.substringAfterLast("<}AD')Erh8_@6|7+v~`vxGOhcNnkz6q'nT ", 91);
      StringUtils.defaultString((String) null);
      StringUtils.compareIgnoreCase("B(^H#y9p+Z", "3\"63\"6");
      StringUtils.isAsciiPrintable("");
      Object object0 = new Object();
      StringUtils.join((Object[]) null, '>', 13, 56);
      StringUtils.defaultIfBlank((String) null, "PW4[Tib0$:");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      String string0 = "P{Rr)maxWith cannot be negative";
      StringUtils.repeat("P{Rr)maxWith cannot be negative", 22);
      StringUtils.center("32Vh$ iU4uw8", 160, 'X');
      StringUtils.rotate("P{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negativeP{Rr)maxWith cannot be negative", 160);
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "P{Rr)maxWith cannot be negative", (CharSequence) "32Vh$ iU4uw8", 160);
      CharBuffer[] charBufferArray0 = new CharBuffer[8];
      CharBuffer charBuffer0 = CharBuffer.allocate(53);
      charBufferArray0[0] = charBuffer0;
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = 'X';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-1), (-3957));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      StringUtils.isAnyEmpty((CharSequence[]) null);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.getIfBlank("#YQ2sCZ*Mt{\"9-P1", supplier0);
      StringUtils.difference(".VNQ0T6P>e loop is the input of another", ".VNQ0T6P>e loop is the input of another");
      String string0 = null;
      Locale locale0 = new Locale(".VNQ0T6P>e loop is the input of another");
      Locale.getISOCountries();
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.ArrayUtils", '.');
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.trimToNull("org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string0);
      
      String string1 = StringUtils.replaceEach("Locale must not be null", stringArray0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Locale must not be null", string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("org.apache.commons.lang3.ArrayUtils", stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripToNull((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.mid("Locale must not be null", 239, 239);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.ArrayUtils", (CharSequence) "", 1049);
      assertEquals(35, int0);
      
      String string4 = StringUtils.abbreviate("yvpX;C3]", "15&dxYRua{i`7", 35);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("yvpX;C3]", string4);
      
      String string5 = StringUtils.appendIfMissing("15&dxYRua{i`7", "yvpX;C3]", stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertEquals("15&dxYRua{i`7yvpX;C3]", string5);
      
      StringUtils.containsWhitespace("15&dxYRua{i`7");
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("org.apache.commons.lang3.ArrayUtils", (CharSequence) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "(L";
      StringUtils.trimToNull("(L");
      StringUtils.containsWhitespace("(L");
      String string1 = "~`vxGOhcNnkz6q'nT ";
      // Undeclared exception!
      try { 
        StringUtils.replaceFirst("sV`>Ri/y[s[lV", "(L", "(L");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 2
         // (L
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      StringUtils.rightPad("l %", 0, '0');
      StringUtils.contains((CharSequence) "l %", (CharSequence) "l %");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      enumSet0.clear();
      enumSet0.add(locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      StringUtils.join(iterator0, '0');
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      enumSet0.add(locale_Category1);
      StringUtils.length("FORMAT");
      StringUtils.equalsIgnoreCase("l %", "l %");
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "l %";
      charSequenceArray0[1] = (CharSequence) "l %";
      charSequenceArray0[2] = (CharSequence) "FORMAT";
      charSequenceArray0[3] = (CharSequence) "l %";
      charSequenceArray0[4] = (CharSequence) "l %";
      charSequenceArray0[5] = (CharSequence) "l %";
      charSequenceArray0[6] = (CharSequence) "l %";
      charSequenceArray0[7] = (CharSequence) "FORMAT";
      charSequenceArray0[8] = (CharSequence) "l %";
      StringUtils.abbreviate("FORMAT", "l %", (int) '0', 6);
      StringUtils.isMixedCase(charSequenceArray0[5]);
      StringUtils.startsWithAny(charSequenceArray0[3], charSequenceArray0);
      StringUtils.isNumericSpace(charSequenceArray0[3]);
      StringUtils.equalsAny("l %", charSequenceArray0);
      StringUtils.containsAny(charSequenceArray0[1], charSequenceArray0[4]);
      StringUtils.isEmpty("l %");
      StringUtils.isAllUpperCase(charSequenceArray0[7]);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringUtils.overlay("R g!uKRu ghqx#hq#!u1", "R g!uKRu ghqx#hq#!u1", 0, 0);
      StringUtils.remove("R g!uKRu ghqx#hq#!u1", "");
      StringUtils.contains((CharSequence) "R g!uKRu ghqx#hq#!u1", (CharSequence) "R g!uKRu ghqx#hq#!u1");
      StringUtils.join((short[]) null, '%');
      StringUtils.reverse("R g!uKRu ghqx#hq#!u1");
      StringUtils.removeStart("R g!uKRu ghqx#hq#!u1", "Cloneable type ");
      StringUtils.isAlpha("R g!uKRu ghqx#hq#!u1");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Iterator<Integer> iterator0 = stack0.iterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      enumSet0.add(locale_Category2);
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = 'e';
      charArray0[2] = 'b';
      charArray0[3] = 'W';
      StringUtils.containsNone((CharSequence) "The Array must not be null", charArray0);
      StringUtils.remove("The Array must not be null", ',');
      StringUtils.getDigits("AsSy?D|n?;Z@p*");
      StringUtils.removePattern("", "AsSy?D|n?;Z@p*");
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "The Array must not be null";
      objectArray0[1] = (Object) "AsSy?D|n?;Z@p*";
      objectArray0[2] = (Object) locale_Category1;
      objectArray0[3] = (Object) "The Array must not be null";
      objectArray0[4] = (Object) iterator0;
      objectArray0[5] = (Object) locale_Category0;
      objectArray0[6] = (Object) 'b';
      Object object0 = new Object();
      objectArray0[7] = object0;
      StringUtils.join(objectArray0, 'K');
      StringUtils.indexOf((CharSequence) "The Array must not be nullKAsSy?D|n?;Z@p*KFORMATKThe Array must not be nullKjava.util.Vector$Itr@8a6509eKDISPLAYKbKjava.lang.Object@76d84f1c", (CharSequence) "The Array must not be null");
      StringUtils.compare("The Array must not be nullKAsSy?D|n?;Z@p*KFORMATKThe Array must not be nullKjava.util.Vector$Itr@8a6509eKDISPLAYKbKjava.lang.Object@76d84f1c", "");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringUtils.chomp("");
      StringUtils.remove("", 'i');
      StringUtils.replaceAll("", "", "");
      StringUtils.trimToEmpty("");
      StringUtils.lastIndexOf((CharSequence) "", 0, 108);
      StringUtils.trim("1AjV0zGud-g");
      StringUtils.equals((CharSequence) "", (CharSequence) "1AjV0zGud-g");
      StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "1AjV0zGud-g");
      char[] charArray0 = new char[1];
      charArray0[0] = 'i';
      StringUtils.containsAny((CharSequence) "", charArray0);
      StringUtils.replaceIgnoreCase("1AjV0zGud-g", "81NGpx&]R", "e5F[VAwUFs.");
      StringUtils.isWhitespace("1AjV0zGud-g");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      StringUtils.join(byteArray0, 'i');
      StringUtils.capitalize("");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringUtils.rightPad("=8`4XwRr,HfV\"g2&$", 2048);
      StringUtils.wrapIfMissing("=8`4XwRr,HfV\"g2&$", " ");
      StringUtils.getJaroWinklerDistance(" =8`4XwRr,HfV\"g2&$ ", "=8`4XwRr,HfV\"g2&$");
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.equalsAnyIgnoreCase("=8`4XwRr,HfV\"g2&$", charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L";
      stringArray0[1] = "L";
      stringArray0[2] = "L";
      StringUtils.leftPad("p{InCombiningDiacriticalMarks}+", 163);
      StringUtils.contains((CharSequence) "L", (CharSequence) "L");
      StringUtils.join((short[]) null, '(');
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.removeStart("", "L");
      StringUtils.isAlpha("Gn");
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 163;
      floatArray0[1] = (float) 163;
      floatArray0[2] = (float) '(';
      floatArray0[3] = (float) '(';
      StringUtils.join(floatArray0, '4', 163, 163);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "CtD#5ze,;oKV@Nb";
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        StringUtils.repeat("CtD#5ze,;oKV@Nb", "offset cannot be negative", Integer.MAX_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L";
      stringArray0[1] = "L";
      stringArray0[2] = "L";
      StringUtils.replaceAll("", "L", (String) null);
      StringUtils.right("L", 12);
      StringUtils.abbreviate("Comparator should not be null.", "L", (-1601), 63);
      StringUtils.isMixedCase("Comparator should not be null.");
      StringUtils.isNotEmpty("");
      StringUtils.removeStart((String) null, "7OJ3CfmDo[D}H?");
      char[] charArray0 = new char[1];
      charArray0[0] = 'g';
      StringUtils.indexOfAny((CharSequence) null, charArray0);
      StringUtils.right("7OJ3CfmDo[D}H?", 14);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringUtils.defaultString((String) null);
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.endsWith("", (CharSequence) null);
      StringUtils.lastIndexOf((CharSequence) null, (-1822), (-1822));
      StringUtils.compareIgnoreCase("", (String) null, true);
      StringUtils.containsOnly((CharSequence) null, "");
      String[] stringArray0 = new String[5];
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = null;
      String[] stringArray1 = new String[21];
      stringArray1[0] = null;
      stringArray1[2] = null;
      char[] charArray0 = new char[2];
      charArray0[0] = 'n';
      charArray0[1] = 'u';
      StringUtils.containsNone((CharSequence) "", charArray0);
      StringUtils.substringBetween("6/", "");
      StringUtils.getDigits("6/");
      StringUtils.removePattern("|R\"o%|u_xW", (String) null);
      StringUtils.indexOf((CharSequence) "6", (CharSequence) "");
      StringUtils.compare(stringArray1[0], "");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringUtils.stripToEmpty("i$`i");
      StringUtils.leftPad("XW)T[L", 850, "-J~].WK*ta1h.");
      StringUtils.wrap("", 'I');
      StringUtils.leftPad(",,%qfn?[|WU421F=", 1);
      StringUtils.contains((CharSequence) "-J~].WK*ta1h.", (CharSequence) "i$`i");
      char[] charArray0 = new char[7];
      charArray0[0] = 'I';
      charArray0[1] = 'I';
      charArray0[2] = 'I';
      charArray0[3] = 'I';
      charArray0[4] = 'I';
      charArray0[5] = 'I';
      charArray0[6] = 'I';
      StringUtils.join(charArray0, 'Q');
      StringUtils.indexOfAnyBut((CharSequence) "IQIQIQIQIQIQI", (CharSequence) "i$`i");
      StringUtils.isAllLowerCase("IQIQIQIQIQIQI");
      StringUtils.isAlphanumericSpace("U884Ir'g<^Gs3|%x");
      String string0 = StringUtils.LF;
      StringUtils.leftPad("", 1, '#');
      StringUtils.getLevenshteinDistance((CharSequence) "#", (CharSequence) "-J~].WK*ta1h.");
      StringUtils.split("...", "", 349);
      StringUtils.trimToEmpty(",,%qfn?[|WU421F=");
      StringUtils.substringAfter("i$`i", "IQIQIQIQIQIQI");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      StringUtils.abbreviate(" mn;Jj9L!}", 35, 35);
      StringUtils.stripToNull(" mn;Jj9L!}");
      StringUtils.swapCase("\r");
      Locale locale0 = Locale.JAPAN;
      StringUtils.upperCase((String) null, locale0);
      StringUtils.leftPad("mn;Jj9L!}", 32, '\'');
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "MVb<GK }izowG29kGgE";
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("MVb<GK }izowG29kGgE"));
      
      charSequenceArray0[2] = (CharSequence) "MVb<GK }izowG29kGgE";
      charSequenceArray0[3] = (CharSequence) "MVb<GK }izowG29kGgE";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = treeSet0.add(charSequenceArray0[0]);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(treeSet0.contains("MVb<GK }izowG29kGgE"));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.substringAfter("MVb<GK }izowG29kGgE", "MVb<GK }izowG29kGgE");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeAll("MVb<GK }izowG29kGgE", "MVb<GK }izowG29kGgE");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfAny("MVb<GK }izowG29kGgE", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string2 = StringUtils.repeat("", 64);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      StringUtils.strip("");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      StringUtils.unwrap("Pb'S!y vl:2A[Ni8", "+[e(B");
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Pb'S!y vl:2A[Ni8";
      StringUtils.isAnyEmpty(charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringUtils.abbreviate("-7K?Wf`#_`", 1497);
      StringUtils.join((short[]) null, 'X', 9, (-1));
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      StringUtils.defaultIfBlank((CharSequence) "-7K?Wf`#_`", (CharSequence) "-7K?Wf`#_`");
      charSequenceArray0[2] = (CharSequence) "-7K?Wf`#_`";
      StringUtils.isAllBlank(charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      StringUtils.substringBeforeLast("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      StringUtils.rightPad("", 4, "?@;uN");
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      vector0.add((Object) null);
      StringUtils.join((List<?>) vector0, '9', 0, (-880));
      StringUtils.trimToEmpty("?@;u");
      StringUtils.getDigits("ra");
      StringUtils.replaceChars("?@;u", '9', '9');
      StringUtils.capitalize("?@;u");
      StringUtils.repeat("?@;u", "WKU}'{b&)yv ", 4);
      StringUtils.getLevenshteinDistance((CharSequence) "?@;u", (CharSequence) "?@;u");
      StringUtils.unwrap("Minimum abbreviation width with offset is %d", "L[}T|Hk0i8&P{Rr)");
      StringUtils.compare("StackOverflowError - output of one loop is the input of another", " is not in the range '0' - '9'", true);
      StringUtils.join((short[]) null, 'w', 97, 51);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringUtils.center((String) null, 49, "~~JN-#;dt{/4");
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = 'U';
      charArray0[2] = 'W';
      charArray0[3] = '$';
      charArray0[4] = '_';
      StringUtils.valueOf(charArray0);
      StringUtils.replaceOnceIgnoreCase((String) null, "Index: ", (String) null);
      StringUtils.replacePattern("a", "IUW$_", "negative~`vxGOhcNnkz6q'nT ");
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "~~JN-#;dt{/4";
      charSequenceArray0[1] = (CharSequence) "8G~Hbc%PK5Kui>Dl";
      charSequenceArray0[2] = (CharSequence) "8G~Hbc%PK5Kui>Dl";
      charSequenceArray0[3] = (CharSequence) "a";
      charSequenceArray0[4] = (CharSequence) "a";
      charSequenceArray0[5] = (CharSequence) "8G~Hbc%PK5Kui>Dl";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) "IUW$_";
      StringUtils.lastIndexOfAny("a", charSequenceArray0);
      StringUtils.rightPad("IUW$_", 49, "negative~`vxGOhcNnkz6q'nT ");
      StringUtils.substringBefore((String) null, 1045);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = StringUtils.substringBefore("O.]_c({F{n7^pWOf", "O.]_c({F{n7^pWOf");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "}Q");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfter("}f)Uhb?d0eC", ".,/");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "}f)Uhb?d0eC";
      charSequenceArray0[1] = (CharSequence) ".,/";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("}Q", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      StringUtils.mid((String) null, 4470, 4470);
      StringUtils.removePattern((String) null, " not be negative");
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)66;
      StringUtils.join(byteArray0, '`', 48, (int) (byte) (-75));
      StringUtils.rightPad("=8`4XwRr,HfV\"g2&$", (-895));
      StringUtils.isAlphaSpace("=8`4XwRr,HfV\"g2&$");
      StringUtils.toRootLowerCase("V)?'Vm~");
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.getIfEmpty(", Length: ", supplier0);
      StringUtils.wrapIfMissing("a)jU6UYbpK4d", ";[n-EPLbcGV{CS&IqO4");
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      StringUtils.join((List<?>) arrayList0, "=8`4XwRr,HfV\"g2&$", (int) (byte)66, (int) (byte)66);
      // Undeclared exception!
      try { 
        CharBuffer.wrap((char[]) null, 22, (-895));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      StringUtils.removeEnd("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      int[] intArray0 = new int[7];
      intArray0[1] = 1;
      StringUtils.substringsBetween("WKU}'{b&)yv ", "_el,KV,C-", "a)jU6UYbpK4d");
      StringUtils.trimToNull("");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      StringUtils.substring("[", (-1217), (-1217));
      StringUtils.getJaroWinklerDistance("", "");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      EnumSet.of(locale_Category0, locale_Category1);
      enumSet0.iterator();
      StringUtils.replaceOnce("", "", "[");
      StringUtils.indexOfIgnoreCase((CharSequence) "[", (CharSequence) "", (-4240));
      StringUtils.difference("9]\u0004$NqT", "9]\u0004$NqT");
      String string0 = null;
      Locale locale0 = null;
      try {
        locale0 = new Locale((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringUtils.chop("''");
      StringUtils.difference("''", "'");
      StringUtils.substringBetween("'", "'");
      StringUtils.substringAfterLast("org.apache.commons.lang3.exception.CloneFailedException", 1280);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-880);
      StringUtils.substringAfter("~`vxGOhcNnkz6q'nT negative", 13);
      StringUtils.indexOfAnyBut((CharSequence) "(F$LjQ+yQ|", (char[]) null);
      String string0 = null;
      CharBuffer[] charBufferArray0 = new CharBuffer[1];
      StringUtils.firstNonEmpty(charBufferArray0);
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1681));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      EnumSet.of(locale_Category0, locale_Category1);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      StringUtils.join(iterator0, 'Y');
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      StringUtils.join((byte[]) null, 'Y');
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[2] = (CharSequence) "FORMAT";
      StringUtils.countMatches((CharSequence) null, charSequenceArray0[2]);
      StringUtils.truncate("FORMAT", 0);
      StringUtils.defaultIfEmpty((String) null, "FORMAT");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      StringUtils.overlay("1", "1", 0, 0);
      String string0 = "";
      StringUtils.replace("1", "", "");
      StringUtils.contains((CharSequence) "11", (CharSequence) "1");
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.lastIndexOfAny("", charSequenceArray0);
      StringUtils.trimToNull("LPLD,'}dX)[t|YNWb");
      StringUtils.indexOfAny((CharSequence) "1", charSequenceArray0);
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      StringUtils.join(iterator0, ')');
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      enumSet1.add(locale_Category1);
      StringUtils.length("1");
      StringUtils.toCodePoints("1");
      StringUtils.equalsIgnoreCase("LPLD,'}dX)[t|YNWb", "");
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.abbreviate("LPLD,'}dX)[t|YNWb", "", 10, 10);
      StringUtils.isMixedCase("FORMAT");
      StringUtils.isNotEmpty("11");
      StringUtils.abbreviate("LPLD,'}dX)[t|YNWb", 0, 4);
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("\"XL#P;{.;xlPi%", "`38Hgz|", "w:$3!&vTxGmSh");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // No group 3
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      StringUtils.chop("V");
      StringUtils.difference("V", "");
      StringUtils.substringBetween("", "");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "#";
      stringArray0[2] = "V";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.removeStart("XXx/XYmYT;m&s(,", "e5F[5");
      StringUtils.capitalize("XXx/XYmYT;m&s(,");
      StringUtils.indexOfDifference((CharSequence) "XXx/XYmYT;m&s(,", (CharSequence) "");
      StringUtils.repeat('r', 2985);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      StringUtils.stripToEmpty("$i");
      StringUtils.capitalize("$i");
      StringUtils.ordinalIndexOf("$i", "$i", (-3623));
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet.of(locale_Category0, locale_Category0);
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category1, locale_Category2);
      enumSet0.iterator();
      String[] stringArray0 = StringUtils.splitByCharacterType("*Q*y");
      StringUtils.removeStart("$i", (String) null);
      StringUtils.strip("*Q*y", " not be negative");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('m');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      StringBuffer stringBuffer0 = stringWriter2.getBuffer();
      StringUtils.indexOfIgnoreCase((CharSequence) "*Q*y", (CharSequence) stringBuffer0, (-3623));
      StringUtils.getCommonPrefix(stringArray0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      StringUtils.removeEnd("`]:qMn y$yI_}U=6", "!7tm']w9a>M`G;");
      StringUtils.defaultIfEmpty("`]:qMn y$yI_}U=6", "Object varargs must not be null");
      int[] intArray0 = new int[1];
      intArray0[0] = (int) 'r';
      StringUtils.join(intArray0, 'Q');
      StringUtils.leftPad("114", 4, "Object varargs must not be null");
      StringUtils.wrap("`]:qMn y$yI_}U=6", 'r');
      StringUtils.leftPad("U884Ir'g<^Gs3|%x", 4);
      StringUtils.contains((CharSequence) "O114", (CharSequence) "`]:qMn y$yI_}U=6");
      StringUtils.indexOfAnyBut((CharSequence) "U884Ir'g<^Gs3|%x", (CharSequence) "r`]:qMn y$yI_}U=6r");
      StringUtils.isAllLowerCase("!7tm']w9a>M`G;");
      StringUtils.isAlphanumericSpace("`]:qMn y$yI_}U=6");
      String string0 = StringUtils.LF;
      StringUtils.getLevenshteinDistance((CharSequence) "Abortig to rotect against StackOverflowErrr - output of one loop is the input of another", (CharSequence) "U884Ir'g<^Gs3|%x");
      StringUtils.split("\n", "Object varargs must not be null", 349);
      StringUtils.trimToEmpty("maxWith cannot be negative");
      StringUtils.substringAfter("...", "`]:qMn y$yI_}U=6");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      StringUtils.chomp("");
      StringUtils.remove("", 'i');
      StringUtils.replaceAll("", "", "");
      StringUtils.trimToEmpty("");
      StringUtils.lastIndexOf((CharSequence) "", 0, 108);
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      StringUtils.join((Object[]) charSequenceArray0, '`', 4, 0);
      StringUtils.defaultIfBlank("4g$lc/_aKq2K", ".)<dp5P.!tuf");
      StringUtils.rightPad("", (-975), "");
      StringUtils.strip("]");
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      StringUtils.stripToNull("3\"6");
      charSequenceArray0[2] = (CharSequence) "3\"6";
      StringUtils.startsWithAny(charSequenceArray0[2], charSequenceArray0);
      StringUtils.left("3\"6", 1);
      StringUtils.center("3\"6", 1);
      char[] charArray0 = new char[6];
      charArray0[4] = 's';
      charArray0[2] = '%';
      charArray0[2] = '<';
      charArray0[3] = 'O';
      charArray0[4] = 'u';
      charArray0[5] = 'R';
      charSequenceArray0[2] = (CharSequence) "3\"6";
      StringUtils.removeEndIgnoreCase("WeZfqP~Z L;xu7:**", "3\"6");
      charSequenceArray0[3] = (CharSequence) "WeZfqP~Z L;xu7:**";
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.isNumericSpace("WeZfqP~Z L;xu7:**");
      StringUtils.substringBefore("3", (int) '<');
      StringUtils.getLevenshteinDistance((CharSequence) "3", (CharSequence) "3\"6", 21);
      StringUtils.equals((CharSequence) "WeZfqP~Z L;xu7:**", (CharSequence) "3\"6");
      StringUtils.leftPad("WeZfqP~Z L;xu7:**", 2, "3\"6");
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, (String) null, 21, 52);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 21
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringUtils.substringBefore("{", 853);
      StringUtils.isNumeric("{");
      StringUtils.rightPad("{", 853, "{");
      StringUtils.isNumeric("{");
      StringUtils.containsWhitespace("{");
      StringUtils.substringsBetween("{", " ", "{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{");
      StringUtils.join((Object[]) null, " ", (-1), 22);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)19;
      StringUtils.leftPad("Minimum abbreviation width with offset is %d", (-2), "Minimum abbreviation width with offset is %d");
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[2] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[3] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width with offset is %d";
      charSequenceArray0[5] = (CharSequence) "Minimum abbreviation width with offset is %d";
      StringUtils.indexOfDifference(charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringUtils.rightPad("l %", 0, '0');
      StringUtils.contains((CharSequence) "l %", (CharSequence) "l %");
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      enumSet0.clear();
      enumSet0.add(locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      StringUtils.join(iterator0, '0');
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      enumSet0.add(locale_Category1);
      StringUtils.length("FORMAT");
      StringUtils.toCodePoints("FORMAT");
      StringUtils.equalsIgnoreCase("l %", "l %");
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "l %";
      charSequenceArray0[1] = (CharSequence) "l %";
      charSequenceArray0[2] = (CharSequence) "FORMAT";
      charSequenceArray0[5] = (CharSequence) "l %";
      charSequenceArray0[4] = (CharSequence) "l %";
      charSequenceArray0[5] = (CharSequence) "l %";
      charSequenceArray0[6] = (CharSequence) "l %";
      charSequenceArray0[7] = (CharSequence) "FORMAT";
      charSequenceArray0[8] = (CharSequence) "l %";
      StringUtils.abbreviate("FORMAT", "l %", (int) '0', 6);
      StringUtils.isMixedCase(charSequenceArray0[5]);
      StringUtils.startsWithAny(charSequenceArray0[3], charSequenceArray0);
      StringUtils.isNotEmpty(charSequenceArray0[5]);
      StringUtils.isNumericSpace(charSequenceArray0[3]);
      StringUtils.equalsAny("l %", charSequenceArray0);
      StringUtils.containsAny(charSequenceArray0[1], charSequenceArray0[4]);
      StringUtils.indexOf(charSequenceArray0[6], 768);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringUtils.remove("Cannot store ", "Cannot store ");
      StringUtils.isBlank("Cannot store ");
      StringUtils.stripToEmpty("");
      StringUtils.substringAfter("", "");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "Cannot store ";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "";
      stringArray1[1] = "";
      StringUtils.replaceEachRepeatedly("", stringArray0, stringArray1);
      Locale locale0 = Locale.JAPANESE;
      locale0.getDisplayCountry(locale0);
      Locale.setDefault(locale0);
      StringUtils.getFuzzyDistance("Cannot store ", "", locale0);
      StringUtils.stripToEmpty("");
      StringUtils.indexOfDifference((CharSequence[]) stringArray1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      StringUtils.remove("Cannot store ", "Cannot store ");
      StringUtils.isBlank("Cannot store ");
      StringUtils.stripToEmpty("");
      StringUtils.substringAfter("", "");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "Cannot store ";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "";
      stringArray1[1] = "";
      StringUtils.replaceEachRepeatedly("", stringArray0, stringArray1);
      Locale locale0 = Locale.JAPANESE;
      locale0.getDisplayCountry(locale0);
      Locale.setDefault(locale0);
      StringUtils.getFuzzyDistance("Cannot store ", "", locale0);
      StringUtils.stripToEmpty("Invalid locale format: ");
      StringUtils.indexOfDifference((CharSequence[]) stringArray1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      StringUtils.removeEnd("`]:qMn y$yI_}U=6", "!7tm']w9a>M`G;");
      StringUtils.defaultIfEmpty("`]:qMn y$yI_}U=6", "Object varargs must not be null");
      String string0 = StringUtils.CR;
      StringUtils.abbreviate("`]:qMn y$yI_}U=6", "`]:qMn y$yI_}U=6", (-2066), (int) '<');
      char[] charArray0 = new char[7];
      charArray0[3] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = 'h';
      charArray0[6] = '<';
      StringUtils.containsNone((CharSequence) "`]:qMn y$yI_}U=6", charArray0);
      StringUtils.substringBetween("!7tm']w9a>M`G;", "Object varargs must not be null");
      StringUtils.getDigits((String) null);
      StringUtils.removePattern("`]:qMn y$yI_}U=6", "...");
      StringUtils.indexOf((CharSequence) null, (CharSequence) "`]:qMn y$yI_}U=6");
      StringUtils.compare(" in an array of ", (String) null);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      int int0 = 123;
      int int1 = (-3311);
      StringUtils.join(charArray0, '?', 123, (-3311));
      int int2 = 453;
      StringUtils.leftPad("]", 453, "org.apache.commons.lang3.Charsets");
      StringUtils.replaceChars("org.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang]", "=&iezl", "Locale must not be null");
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("org.apacha.commons.eang3.Charsatsorg.apacha.commons.eang3.Charsatsorg.apacha.commons.eang3.Charsatsorg.apacha.commons.eang3.Charsatsorg.apacha.commons.eang3.Charsatsorg.apacha.commons.eang3.Charsatsorg.apacha.commons.eang3.Charsatsorg.apacha.commons.eang3.Charsatsorg.apacha.commons.eang3.Charsatsorg.apacha.commons.eang3.Charsatsorg.apacha.commons.eang3.Charsatsorg.apacha.commons.eang3.Charsatsorg.apacha.commons.eang3.Charsatsorg.apacha.commons.eang]", "#");
      StringUtils.isNumericSpace("org.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang]");
      StringUtils.equals((CharSequence) "", (CharSequence) "org.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang3.Charsetsorg.apache.commons.lang]");
      StringUtils.center((String) null, 123);
      StringUtils.indexOfIgnoreCase((CharSequence) "Locale must not be null", (CharSequence) "=&iezl", 123);
      StringUtils.isAllEmpty(stringArray0);
      StringUtils.difference("", "Locale must not be null");
      char char0 = '@';
      StringUtils.unwrap("", '@');
      StringUtils.lastIndexOf((CharSequence) "Locale must not be null", 453, 0);
      StringUtils.joinWith("%;2Gt@su+R", stringArray0);
      // Undeclared exception!
      try { 
        StringUtils.truncate("jl%![q;E", (-1), (-1238));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringUtils.removeEnd("`]:qMn y$yI_}U=6", "!7tm']w9a>M`G;");
      StringUtils.defaultIfEmpty("`]:qMn y$yI_}U=6", "Object varargs must not be null");
      String string0 = StringUtils.CR;
      StringUtils.abbreviate("`]:qMn y$yI_}U=6", "`]:qMn y$yI_}U=6", (-2066), (int) '<');
      char[] charArray0 = new char[7];
      charArray0[3] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = 'h';
      charArray0[6] = '<';
      StringUtils.containsNone((CharSequence) "`]:qMn y$yI_}U=6", charArray0);
      StringUtils.substringBetween("!7tm']w9a>M`G;", "Object varargs must not be null");
      StringUtils.getDigits("org.apache.commons.lang3.Charsets");
      StringUtils.removePattern("`]:qMn y$yI_}U=6", "...");
      StringUtils.indexOf((CharSequence) null, (CharSequence) "`]:qMn y$yI_}U=6");
      StringUtils.compare(" in an array of ", "3");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.unwrap("hF-u", ".VNQ0T6P>`x");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("hF-u", string1);
      
      String string2 = StringUtils.truncate("", 23, 23);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Search and Replace array lengths don't match: ", "*c'M", 15);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("*c'M");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 23;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 15;
      doubleArray0[3] = (double) 76;
      doubleArray0[4] = (double) 23;
      doubleArray0[5] = (double) 23;
      doubleArray0[6] = (double) 15;
      doubleArray0[7] = (double) 76;
      StringUtils.join(doubleArray0, 'X', (-745), (-745));
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      StringUtils.uncapitalize("L[}T|");
      String string0 = StringUtils.CR;
      StringUtils.abbreviate("\r", "The type must not be null", (-2066), 3385);
      StringUtils.getDigits("nqfl\"$RYb8aG97P");
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("\r", "\r", (-2066));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      StringUtils.indexOfAnyBut((CharSequence) "kz6.]_corA an Array", (CharSequence) "kz6.]_corA an Array");
      StringUtils.toRootLowerCase("Qe#C4uJ)");
      StringUtils.join((float[]) null, '4');
      StringUtils.lastIndexOf((CharSequence) "qe#c4uj)", (-613), (-1));
      StringUtils.chomp("~LeCWKLe1)s>[DJ");
      StringUtils.getLevenshteinDistance((CharSequence) "~LeCWKLe1)s>[DJ", (CharSequence) "kz6.]_corA an Array", 4274);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      StringUtils.uncapitalize("");
      int[] intArray0 = new int[4];
      intArray0[2] = 8192;
      intArray0[1] = 8192;
      intArray0[2] = 8192;
      intArray0[1] = 8192;
      StringUtils.join(intArray0, '^');
      StringUtils.leftPad("l %", 0, "0^8192^8192^0");
      StringUtils.wrap("Abortig to rotect against StackOverflowErrr - output of one loop is the input of another", 'Y');
      StringUtils.leftPad("", 8192);
      StringUtils.contains((CharSequence) "0^8192^8192^0", (CharSequence) "l %");
      StringUtils.indexOfAnyBut((CharSequence) "l %", (CharSequence) "");
      StringUtils.isAllLowerCase("0^8192^8192^0");
      StringUtils.getLevenshteinDistance((CharSequence) "l %", (CharSequence) "l %", 8192);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "MVb<GK }izowG29kGgE";
      treeSet0.descendingIterator();
      charSequenceArray0[2] = (CharSequence) "MVb<GK }izowG29kGgE";
      charSequenceArray0[3] = (CharSequence) "MVb<GK }izowG29kGgE";
      StringUtils.isNoneBlank(charSequenceArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ", Length: 0";
      stringArray0[1] = ", Length: 0";
      stringArray0[2] = "MVb<GK }izowG29kGgE";
      StringUtils.splitByCharacterType("qVVUG}bXqz@.M/BV");
      StringUtils.lastIndexOf(charSequenceArray0[3], charSequenceArray0[2]);
      StringUtils.substringAfterLast(", Length: 0", 84);
      StringUtils.defaultString("");
      StringUtils.compareIgnoreCase("", (String) null);
      StringUtils.isAsciiPrintable(", Length: 0");
      Object object0 = new Object();
      StringUtils.join((Object[]) stringArray0, 'D', 607, 9);
      StringUtils.defaultIfBlank(", Length: 0", "QzP|CH!M\"J");
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      StringUtils.substringBefore(", Length: 0", "9yiggd+un0");
      StringUtils.isAlphanumericSpace(", Length: 0");
      StringUtils.stripEnd("z$<\"", "DH<=KRUtWy;}Oy.SE");
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "z$<\"";
      charSequenceArray0[7] = (CharSequence) "z$<\"";
      StringUtils.center(", Length: 0", 15);
      charSequenceArray0[2] = (CharSequence) "  , Length: 0  ";
      charSequenceArray0[3] = (CharSequence) ", Length: 0";
      charSequenceArray0[6] = (CharSequence) "ch";
      charSequenceArray0[5] = (CharSequence) "ch";
      charSequenceArray0[6] = (CharSequence) "z$<\"";
      charSequenceArray0[7] = (CharSequence) "DH<=KRUtWy;}Oy.SE";
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.firstNonEmpty((String[]) null);
      StringUtils.removeStart("*9^fisTx`zzJ]M%H", "*9^fisTx`zzJ]M%H");
      StringUtils.indexOf(charSequenceArray0[6], (CharSequence) "9yiggd+un0", 101);
      StringUtils.length(charSequenceArray0[6]);
      StringUtils.isAlpha((CharSequence) null);
      StringUtils.isNumeric(charSequenceArray0[7]);
      double[] doubleArray0 = new double[0];
      StringUtils.join(doubleArray0, 'X');
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      StringUtils.isAnyEmpty((CharSequence[]) null);
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      StringUtils.getIfBlank("#YQ2sCZ*Mt{\"9-P1", supplier0);
      StringUtils.replaceChars(" in/an)array of ", "^", " in/an)array of ");
      StringUtils.abbreviateMiddle("Threshold must not be negative", "^", 694);
      StringUtils.isNoneBlank((CharSequence[]) null);
      String[] stringArray0 = StringUtils.splitByCharacterType("*Q*y");
      StringUtils.removeStart("#YQ2sCZ*Mt{\"9-P1", "^");
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.replace("Locale must not be null", "Locale must not be null", "Threshold must not be negative");
      StringUtils.center("F1qJRtT[", 66, 'c');
      StringUtils.substringsBetween("X-", "{zZF_`(&v", "Arguments cannot both be null");
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      String string0 = StringUtils.removeEnd("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "dgNGg'W'KyX$J=q ");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "WKU}'{b&)yv ";
      charSequenceArray0[5] = (CharSequence) "";
      StringUtils.defaultString((String) null);
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      StringUtils.equalsAnyIgnoreCase("WKU}'{b&)yv ", charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[6] = (int) '#';
      intArray0[3] = (int) '#';
      StringUtils.lastIndexOf((CharSequence) "eu#)Qh", 0, 1);
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      StringUtils.overlay((String) null, "eu#)Qh", (-1), 1299);
      charSequenceArray0[0] = (CharSequence) null;
      StringUtils.equalsAnyIgnoreCase("eu#)Qh", charSequenceArray0);
      StringUtils.leftPad("Index: ", 1299, "|I");
      StringUtils.indexOfDifference(charSequenceArray0);
      StringUtils.removeIgnoreCase("Index: ", "}5^u>yyrU7M!");
      StringUtils.joinWith("J}sqnTG#PxD=^;jj", charSequenceArray0);
      StringUtils.replaceChars(" jXa.Pk_-\"", "Index: ", "JLi:VQ+5nY_aleH^&z");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L";
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      StringUtils.join(booleanArray0, ' ', 79, 2);
      StringUtils.abbreviate("clone", "", 1114111, 1114111);
      StringUtils.isMixedCase("L");
      StringUtils.isNotEmpty("");
      CharBuffer[] charBufferArray0 = new CharBuffer[1];
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "L", (-1151), 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "L";
      charSequenceArray0[1] = (CharSequence) "L";
      charSequenceArray0[2] = (CharSequence) "L";
      charSequenceArray0[3] = (CharSequence) "L";
      charSequenceArray0[4] = (CharSequence) "L";
      charSequenceArray0[5] = (CharSequence) "L";
      charSequenceArray0[6] = (CharSequence) "L";
      charSequenceArray0[7] = (CharSequence) "L";
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.repeat('b', 64);
      StringUtils.isMixedCase(charSequenceArray0[3]);
      StringUtils.startsWithAny("bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb", charSequenceArray0);
      StringUtils.isNotEmpty(charSequenceArray0[2]);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      StringUtils.strip("^", "', is neither of type Map.Entry nor an Array");
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      StringUtils.wrap("[", '~');
      String string0 = "\\u";
      String string1 = StringUtils.leftPad(string0, 163);
      StringUtils.reverseDelimited("", 'B');
      StringUtils.contains((CharSequence) "", (CharSequence) string1);
      StringUtils.join((short[]) null, 'P');
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "_ ";
      stringArray0[1] = "[";
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.removeStart("q", (String) null);
      StringUtils.isAlpha("");
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      StringUtils.strip("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      StringUtils.wrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", '4');
      StringUtils.contains((CharSequence) "Gn", (CharSequence) "', is neither of type Map.Entry nor an Array");
      StringUtils.join((short[]) null, 'q');
      StringUtils.reverse("Gn");
      StringUtils.removeStart("H=UBzm-A", "n");
      StringUtils.isAlpha((CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      StringUtils.substring("[", (-1217), (-1217));
      StringUtils.getJaroWinklerDistance("", "");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      EnumSet.of(locale_Category0, locale_Category1);
      enumSet0.iterator();
      StringUtils.replaceOnce("", "", "[");
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      StringUtils.isWhitespace("[");
      StringUtils.join((byte[]) null, 'Y');
      StringUtils.capitalize("");
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      StringUtils.stripAccents("");
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      treeSet0.add("");
      StringUtils.mid("U8B'!", 10, 10);
      StringUtils.removeAll("KT=.N", "");
      StringUtils.lastIndexOfAny(charSequenceArray0[2], charSequenceArray0);
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.removeEndIgnoreCase("", "objecyv ");
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = 'e';
      charArray0[2] = '\"';
      charArray0[3] = 'k';
      charArray0[5] = 'n';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      charBuffer0.slice();
      StringUtils.lastOrdinalIndexOf(charBuffer0, charBuffer0, 113);
      ArrayList<String> arrayList0 = new ArrayList<String>();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      StringUtils.stripToEmpty("i$`i");
      StringUtils.capitalize("i$`i");
      StringUtils.ordinalIndexOf("V", "V", (-3623));
      StringUtils.rightPad("g%*]FJ", (-2925), " vs ");
      StringUtils.rotate(".$p]93mvC\"", (-1));
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "g%*]FJ";
      StringUtils.indexOfAny((CharSequence) "g%*]FJ", charSequenceArray0);
      StringUtils.strip("g%*]FJ", "i$`i");
      StringUtils.substringBeforeLast("i$`i", "g%*]FJ");
      StringUtils.containsWhitespace(charSequenceArray0[0]);
      StringUtils.stripAll((String[]) null);
      StringUtils.unwrap("l", 'J');
      StringUtils.lastIndexOfAny("g%*]FJ", (CharSequence[]) null);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      StringUtils.wrapIfMissing("org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", "org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB");
      StringUtils.remove("org.apache.commons.lang3.ObjectUtils", '?');
      char[] charArray0 = new char[0];
      StringUtils.containsOnly((CharSequence) "org.apache.commons.lang3.ObjectUtils", charArray0);
      Integer integer0 = new Integer(108);
      StringUtils.trim("org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB");
      StringUtils.join((Iterable<?>) null, "a%;9K.");
      StringUtils.isAllUpperCase("org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB");
      StringUtils.unwrap("\r", '?');
      StringUtils.equals((CharSequence) "org.apache.commons.lang3.ObjectUtils", (CharSequence) "\r");
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      Vector<Object> vector0 = new Vector<Object>();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      StringUtils.indexOfAny((CharSequence) charBuffer0, (char[]) null);
      StringUtils.strip("`]:qMn y$yI_}U=6", "w>pk%GMK7vw/t;#8~");
      StringUtils.isNoneBlank(stringArray0);
      StringUtils.isAlphanumericSpace(charBuffer0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 'H';
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      StringUtils.uncapitalize((String) null);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("3\"63\"6", '\"');
      assertNotNull(string0);
      assertEquals("\"3\"63\"6\"", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("3\"63\"6", "3\"63\"6");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      StringUtils.indexOf((CharSequence) "\"3\"63\"6\"", (CharSequence) "3\"63\"6");
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      StringUtils.removeEnd("`]:qMn y$yI_}U=6", "!7tm']w9a>M`G;");
      StringUtils.defaultIfEmpty("`]:qMn y$yI_}U=6", "Object varargs must not be null");
      String string0 = StringUtils.CR;
      StringUtils.abbreviate("`]:qMn y$yI_}U=6", "`]:qMn y$yI_}U=6", (-2066), (int) '<');
      char[] charArray0 = new char[7];
      charArray0[3] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = 'h';
      charArray0[6] = '<';
      StringUtils.containsNone((CharSequence) "`]:qMn y$yI_}U=6", charArray0);
      StringUtils.substringBetween("!7tm']w9a>M`G;", "Object varargs must not be null");
      StringUtils.getDigits("org.apache.commons.lang3.Charsets");
      StringUtils.removePattern("Search and Replace array lengths don't match: ", "...");
      StringUtils.indexOf((CharSequence) "Search and Replace array lengths don't match: ", (CharSequence) "`]:qMn y$yI_}U=6");
      StringUtils.compare(" in an array of ", "3");
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      StringUtils.rightPad("l %", 25, '0');
      StringUtils.contains((CharSequence) "l %0000000000000000000000", (CharSequence) "l %");
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      enumSet0.clear();
      enumSet0.add(locale_Category0);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      StringUtils.join(iterator0, '0');
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      enumSet0.add(locale_Category1);
      StringUtils.length("FORMAT");
      StringUtils.equalsIgnoreCase("l %0000000000000000000000", "l %");
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "l %0000000000000000000000";
      charSequenceArray0[1] = (CharSequence) "l %0000000000000000000000";
      charSequenceArray0[2] = (CharSequence) "FORMAT";
      charSequenceArray0[3] = (CharSequence) "l %0000000000000000000000";
      charSequenceArray0[3] = (CharSequence) "l %0000000000000000000000";
      charSequenceArray0[5] = (CharSequence) "l %";
      charSequenceArray0[6] = (CharSequence) "l %0000000000000000000000";
      charSequenceArray0[7] = (CharSequence) "FORMAT";
      charSequenceArray0[8] = (CharSequence) "l %0000000000000000000000";
      StringUtils.abbreviate("FORMAT", "l %", (int) '0', 6);
      StringUtils.isMixedCase(charSequenceArray0[5]);
      StringUtils.startsWithAny(charSequenceArray0[3], charSequenceArray0);
      StringUtils.isNumericSpace(charSequenceArray0[3]);
      StringUtils.containsAny((CharSequence) "l %0000000000000000000000", charSequenceArray0[0]);
      StringUtils.containsAny(charSequenceArray0[1], charSequenceArray0[4]);
      StringUtils.isEmpty("l %");
      StringUtils.isAllUpperCase(charSequenceArray0[7]);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = 'G';
      StringUtils.lowerCase("!8");
      StringUtils.containsAny((CharSequence) "qD}uLU", (CharSequence) "qD}uLU");
      String string0 = "Minimm abbreviation width wth offset is %d";
      try { 
        StringUtils.getBytes("!8", "h+Zg.TYw#dH");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      StringUtils.stripToEmpty("i$`i");
      StringUtils.capitalize("i$`i");
      StringUtils.ordinalIndexOf("V", "V", (-3623));
      StringUtils.substring("V", (-3623));
      StringUtils.rotate(".$p]93mvC\"", (-1));
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "V";
      StringUtils.indexOfAny((CharSequence) "V", charSequenceArray0);
      StringUtils.strip("V", "i$`i");
      StringUtils.substringBeforeLast("i$`i", "V");
      StringUtils.containsWhitespace(charSequenceArray0[0]);
      StringUtils.stripAll((String[]) null);
      StringUtils.substringBefore("[b/!%,8TIPNyW", "org.apache.commons.lang3.LocaleUtils");
      char[] charArray0 = new char[8];
      charArray0[0] = '{';
      charArray0[1] = '(';
      charArray0[2] = '-';
      charArray0[3] = '6';
      charArray0[4] = 'L';
      charArray0[5] = 'Q';
      charArray0[6] = 'E';
      charArray0[7] = '%';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringUtils.indexOfAny((CharSequence) charBuffer0, charArray0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      String string0 = StringUtils.leftPad("L", 8192, "L");
      Stack<Integer> stack0 = new Stack<Integer>();
      Stack<Integer> stack1 = new Stack<Integer>();
      Integer integer0 = new Integer(1907);
      stack1.add(integer0);
      stack1.trimToSize();
      StringUtils.removeEndIgnoreCase("Threshold must not be negativek-1_^iD]c'udaJHf", "Threshold must not be negativek-1_^iD]c'udaJHf");
      stack0.iterator();
      StringUtils.splitPreserveAllTokens("i,}", "");
      StringUtils.removePattern(string0, (String) null);
      long[] longArray0 = new long[5];
      longArray0[0] = (long) 1907;
      longArray0[1] = (long) 8192;
      longArray0[2] = (long) 1907;
      longArray0[3] = (long) 8192;
      longArray0[4] = (long) 8192;
      StringUtils.join(longArray0, 'J');
      StringUtils.wrapIfMissing("1907J8192J1907J8192J8192", 'J');
      StringUtils.substringsBetween("tzj1[b4sg/a02", "Gi=EFW>vm]'oi_$_c", "<FL:A");
      StringUtils.join((String[]) null);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Iterator<Integer> iterator0 = stack0.iterator();
      StringUtils.join(iterator0, "Noajt\"oXWe6@hF()>Gr");
      StringUtils.toCodePoints("");
      StringUtils.rotate("", (-3657));
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Noajt\"oXWe6@hF()>Gr");
      StringUtils.removeEndIgnoreCase("WeZfqP~Z L;xu7:**", "");
      StringUtils.isAnyBlank(stringArray0);
      StringUtils.defaultString((String) null);
      StringUtils.isNumericSpace("");
      StringUtils.join((Object[]) stringArray0, 'R', (-3657), (-3657));
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Noajt\"oXWe6@hF()>Gr", 21);
      StringUtils.equals((CharSequence) "WeZfqP~Z L;xu7:**", (CharSequence) "WeZfqP~Z L;xu7:**");
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = StringUtils.leftPad("}", 8192, "}");
      assertNotNull(string0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(8192));
      
      Stack<Integer> stack1 = new Stack<Integer>();
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertEquals(10, stack1.capacity());
      assertNotNull(stack1);
      assertFalse(stack1.contains(8192));
      assertTrue(stack1.equals((Object)stack0));
      
      stack1.trimToSize();
      assertEquals(0, stack1.size());
      assertTrue(stack1.empty());
      assertEquals(0, stack1.capacity());
      assertEquals("[]", stack1.toString());
      assertTrue(stack1.isEmpty());
      assertNotSame(stack1, stack0);
      assertFalse(stack1.contains(8192));
      assertTrue(stack1.equals((Object)stack0));
      
      StringUtils.getLevenshteinDistance((CharSequence) "}", (CharSequence) string0, 821);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      StringUtils.stripToNull("3\"6");
      StringUtils.startsWithAny(charSequenceArray0[2], charSequenceArray0);
      StringUtils.left("3\"6", 1);
      StringUtils.center("3\"6", 1);
      char[] charArray0 = new char[6];
      charArray0[4] = 's';
      charArray0[2] = '%';
      charArray0[2] = '<';
      StringUtils.isAnyEmpty(charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      StringUtils.substringAfterLast("org.apache.commons.lang3.exception.CloneFailedException", 1280);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "V", (CharSequence) "org.apache.commons.lang3.exception.CloneFailedException", (-1202));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      StringUtils.right("5F:D34SA.II\")^P", 237);
      charSequenceArray0[0] = (CharSequence) "5F:D34SA.II\")^P";
      StringUtils.substring("5F:D34SA.II\")^P", 237, 237);
      charSequenceArray0[1] = (CharSequence) "";
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1780);
      shortArray0[1] = (short) (-1780);
      shortArray0[2] = (short) (-1780);
      shortArray0[3] = (short) (-1780);
      String string0 = "DMZx<iR(k";
      StringUtils.removeEndIgnoreCase("DMZx<iR(k", "5F:D34SA.II\")^P");
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.substringBefore("K7QrU;!>,joQ!)", 237);
      StringUtils.getLevenshteinDistance((CharSequence) "WeZfqP~Z L;xu7:**", (CharSequence) "DMZx<iR(k", 38);
      StringUtils.equals((CharSequence) "5F:D34SA.II\")^P", (CharSequence) "K7QrU;!>,joQ!)");
      StringUtils.overlay(")Ar=", "Aj", (short) (-1780), (short) (-1780));
      StringUtils.join((Object[]) charSequenceArray0, "", 57, (int) (short) (-1780));
      // Undeclared exception!
      try { 
        Charset.forName(")Ar=");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // )Ar=
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.join((byte[]) null, 'X');
      assertNull(string1);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 'X';
      doubleArray0[1] = (double) 'X';
      doubleArray0[2] = (double) 'X';
      doubleArray0[3] = (double) 'X';
      String string2 = StringUtils.join(doubleArray0, ',', 1695, 0);
      assertArrayEquals(new double[] {88.0, 88.0, 88.0, 88.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, ',');
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(",,", string3);
      
      StringUtils.mid("Threshold must not be negativek-1_^iD]c'udaJHf", 0, 0);
      StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "");
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      StringUtils.rightPad("", 0, "?@;uN");
      Vector<Object> vector0 = new Vector<Object>();
      StringUtils.defaultIfEmpty("?@;uN", "]6lL\"");
      StringUtils.startsWithIgnoreCase("", "]6lL\"");
      StringUtils.splitByWholeSeparator("_", "L@a|h63");
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short) (-1573);
      shortArray0[2] = (short) (-2335);
      shortArray0[3] = (short)2337;
      shortArray0[4] = (short) (-1956);
      shortArray0[5] = (short) (-1193);
      StringUtils.join(shortArray0, '5', 53, (int) (short)4);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      String string0 = "org.apache.commons.lang3.exception.CloneFailedEx be negative";
      int int0 = (-26);
      StringUtils.difference("org.apache.commons.lang3.exception.CloneFailedEx be negative", "org.apache.commons.lang3.exception.CloneFailedEx be negative");
      CharSequence[] charSequenceArray0 = null;
      StringUtils.isAnyBlank((CharSequence[]) null);
      StringUtils.isAllBlank((CharSequence[]) null);
      StringUtils.isEmpty("org.apache.commons.lang3.exception.CloneFailedEx be negative");
      StringUtils.center("org.apache.commons.lang3.Charsets", (-26), '<');
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.Charsets", (CharSequence) "nUaJ/^");
      short[] shortArray0 = new short[0];
      int int1 = 119;
      // Undeclared exception!
      try { 
        StringUtils.join(shortArray0, '<', (-26), 119);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -26
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      StringUtils.replaceChars((String) null, (String) null, (String) null);
      StringUtils.chomp("");
      StringUtils.isAlphaSpace((CharSequence) null);
      StringUtils.unwrap((String) null, "Supplied value must be a valid byte literal between -32768 and 32767: [");
      StringUtils.swapCase((String) null);
      long[] longArray0 = new long[0];
      StringUtils.join(longArray0, 'f', (-818), (-818));
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      String[] stringArray0 = new String[4];
      long[] longArray0 = new long[1];
      longArray0[0] = (-3L);
      StringUtils.replaceChars("", stringArray0[1], (String) null);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "K'N\"/";
      stringArray0[1] = "K'N\"/";
      stringArray0[2] = "#";
      StringUtils.getCommonPrefix(stringArray0);
      StringUtils.removeStart("offset cannot be negative", "K'N\"/");
      StringUtils.capitalize("F~zSZ");
      StringUtils.indexOfDifference((CharSequence) "offset cannot be negative", (CharSequence) "K'N\"/");
      StringUtils.repeat('r', 0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)19;
      StringUtils.join(byteArray0, 'O', 2147483645, 5);
      StringUtils.reverseDelimited("", '#');
      StringUtils.leftPad("81NGpx&", (int) (byte) (-22), 'D');
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "81NGpx&", (CharSequence) "", (int) (byte)19);
      Integer integer0 = new Integer((byte)0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      StringUtils.abbreviate("org.apache.commons.lan#(bk.", 21, 21);
      double[] doubleArray0 = new double[9];
      doubleArray0[2] = (double) 21;
      StringUtils.stripToNull("...e.commons.lan#(bk.");
      StringUtils.swapCase("...e.commons.lan#(bk.");
      Locale locale0 = Locale.JAPAN;
      StringUtils.upperCase(";[n-EPLbcGV{CS&IqO4", locale0);
      StringUtils.leftPad("...e.commons.lan#(bk.", 0, 'j');
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StringUtils.strip("^", "', is neither of type Map.Entry nor an Array");
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      StringUtils.abbreviate("org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwBorg.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", "offset cannot be negative", 90, 56);
      StringUtils.isAnyEmpty((CharSequence[]) null);
      StringUtils.swapCase("MERj");
      StringUtils.substringsBetween("offset cannot be negativelang3.ObjectUtils,O]8nE8wSn\"vwB", "Wm.af", "");
      Charset charset0 = Charset.defaultCharset();
      StringUtils.getBytes("Sz?V ", charset0);
      StringUtils.splitPreserveAllTokens("Sk&`poxP@e 7c5", 'o');
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      StringUtils.wrapIfMissing("org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", "org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB");
      StringUtils.remove("org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", '?');
      char[] charArray0 = new char[5];
      charArray0[1] = '?';
      charArray0[2] = '?';
      charArray0[4] = '?';
      StringUtils.indexOfAnyBut((CharSequence) "org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", charArray0);
      StringUtils.abbreviate("Minimum abbreviation width is %d", (-310), 9);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      StringUtils.center("r3%$'S\"hW", (-836));
      StringUtils.splitPreserveAllTokens(":jj", "MVb<GK }izowG29kGgE");
      StringUtils.length("MVb<GK }izowG29kGgE");
      StringUtils.abbreviate("Cloneable type E?`YR,T88^?|53", "S?.BXdT ", 19);
      StringUtils.indexOfIgnoreCase((CharSequence) "MVb<GK }izowG29kGgE", (CharSequence) "Cloneable tS?.BXdT ", (-836));
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "=8`4XwRr,HfV\"g2&$";
      stringArray0[1] = "=8`4XwRr,HfV\"g2&$";
      stringArray0[2] = "=8`4XwRr,HfV\"g2&$";
      stringArray0[3] = "=8`4XwRr,HfV\"g2&$";
      stringArray0[4] = "=8`4XwRr,HfV\"g2&$";
      stringArray0[5] = "=8`4XwRr,HfV\"g2&$";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      StringUtils.join((Object[]) stringArray0, '9');
      StringUtils.startsWithAny("=8`4XwRr,HfV\"g2&$9=8`4XwRr,HfV\"g2&$9=8`4XwRr,HfV\"g2&$9=8`4XwRr,HfV\"g2&$9=8`4XwRr,HfV\"g2&$9=8`4XwRr,HfV\"g2&$", stringArray0);
      StringUtils.join((float[]) null, 'y', 0, 4);
      StringUtils.rightPad(" ", 4, ',');
      StringUtils.stripAll(stringArray1, "=8`4XwRr,HfV\"g2&$");
      StringUtils.isMixedCase("=8`4XwRr,HfV\"g2&$");
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      StringUtils.chop("\r");
      StringUtils.wrapIfMissing("tGsGN?`ctgw", 'l');
      StringUtils.deleteWhitespace("ltGsGN?`ctgwl");
      StringUtils.removeEnd((String) null, "tGsGN?`ctgw");
      StringUtils.substring("Ju9&>", (-1802), (-1802));
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      StringUtils.swapCase("Ju9&>");
      StringUtils.replacePattern("", "\r", "");
      StringUtils.replaceFirst((String) null, "Minimum abbreviation width with offset is %d", "EJ\"iYoV=G$A&");
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      StringUtils.indexOfAny((CharSequence) "", charArray0);
      StringUtils.strip("\r", "Supplied value must be a valid byte literal between -128 and 127: [");
      StringUtils.isNoneBlank(charSequenceArray0);
      StringUtils.isAlphanumericSpace("\r");
      StringUtils.join((double[]) null, 'l');
      StringUtils.difference("#", "%W*Ocu;#f@CIz");
      StringUtils.left("...", 88);
      StringUtils.join((float[]) null, 'l', (-2026), (-1));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      StringUtils.stripToNull("3\"6");
      charSequenceArray0[2] = (CharSequence) "3\"6";
      StringUtils.startsWithAny(charSequenceArray0[2], charSequenceArray0);
      StringUtils.left("3\"6", 1);
      StringUtils.center("3\"6", 1);
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      charArray0[1] = '%';
      charArray0[2] = '<';
      charArray0[3] = 'O';
      charArray0[4] = 'u';
      charArray0[5] = 'R';
      charSequenceArray0[2] = (CharSequence) "3\"6";
      StringUtils.removeEndIgnoreCase("WeZfqP~Z L;xu7:**", "3\"6");
      charSequenceArray0[3] = (CharSequence) "WeZfqP~Z L;xu7:**";
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.isNumericSpace("WeZfqP~Z L;xu7:**");
      StringUtils.join((Object[]) charSequenceArray0, 'R', 100, 1);
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "3\"6", 21);
      StringUtils.equals((CharSequence) "WeZfqP~Z L;xu7:**", (CharSequence) "3\"6");
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.trimToSize();
      StringUtils.removeEndIgnoreCase("};EI$@6I-,@ihC*Pr|L", "q");
      stack0.iterator();
      StringUtils.splitByWholeSeparatorPreserveAllTokens("i,}", "q", (-395));
      StringUtils.removePattern("(+BZu]k", "Strings must not be null");
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-395);
      longArray0[1] = (long) (-395);
      longArray0[2] = (long) (-395);
      longArray0[3] = (long) (-395);
      longArray0[5] = (long) (-395);
      longArray0[6] = (long) (-395);
      StringUtils.wrapIfMissing("};EI$@6I-,@ihC*Pr|L", 'b');
      StringUtils.indexOfDifference((CharSequence) "Strings must not be null", (CharSequence) "(+BZu]k");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      StringUtils.stripToEmpty("i$`i");
      StringUtils.capitalize("i$`i");
      StringUtils.ordinalIndexOf("V", "V", (-3623));
      StringUtils.rightPad("g%*]FJ", (-2925), " vs ");
      StringUtils.rotate(".$p]93mvC\"", (-1));
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "g%*]FJ";
      StringUtils.indexOfAny((CharSequence) "g%*]FJ", charSequenceArray0);
      StringUtils.ordinalIndexOf("I$`i", "i$`i", 0);
      StringUtils.isAlphaSpace("g%*]FJ");
      StringUtils.wrap("g%*]FJ", '~');
      StringUtils.indexOfAnyBut((CharSequence) "I$`i", (CharSequence) "i$`i");
      StringUtils.substringAfter(".$p]93mvC\"", 0);
      StringUtils.isAnyEmpty(charSequenceArray0);
      int[] intArray0 = new int[0];
      StringUtils.join(intArray0, '<', 26, (-1));
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      StringUtils.join(iterator0, "MVb<GK }E>i795LOpn");
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "MVb<GK }E>i795LOpn";
      charSequenceArray0[1] = (CharSequence) "";
      treeSet0.descendingIterator();
      charSequenceArray0[2] = (CharSequence) "MVb<GK }E>i795LOpn";
      charSequenceArray0[3] = (CharSequence) "MVb<GK }E>i795LOpn";
      charSequenceArray0[2] = (CharSequence) "";
      StringUtils.isNoneBlank(charSequenceArray0);
      treeSet0.add(charSequenceArray0[0]);
      StringUtils.mid("MVb<GK }E>i795LOpn", 0, 689);
      StringUtils.removeAll("MVb<GK }E>i795LOpn", "MVb<GK }E>i795LOpn");
      StringUtils.lastIndexOfAny("MVb<GK }E>i795LOpn", charSequenceArray0);
      StringUtils.substringAfterLast("", (-1755));
      StringUtils.contains((CharSequence) "", (-1740));
      StringUtils.repeat("MVb<GK }E>i795LOpn", "#", (-1755));
      StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      StringUtils.center((String) null, 0, "");
      StringUtils.stripAccents((String) null);
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).get();
      StringUtils.getIfEmpty((CharSequence) null, supplier0);
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      StringUtils.trimToNull((String) null);
      StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      StringUtils.join((short[]) null, '0');
      StringUtils.substring("Strings must not be null", (-1));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Strings must not be null";
      stringArray0[1] = null;
      stringArray0[2] = "l";
      StringUtils.firstNonBlank(stringArray0);
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("% 7wSn#kB{", "The Array must not be null", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 27
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      StringUtils.chop("\r");
      StringUtils.wrapIfMissing("tGsGN?`ctgw", 'l');
      StringUtils.deleteWhitespace("ltGsGN?`ctgwl");
      StringUtils.removeEnd((String) null, "tGsGN?`ctgw");
      StringUtils.substring("Ju9&>", (-1802), (-1802));
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "ltGsGN?`ctgwl";
      StringUtils.prependIfMissingIgnoreCase("ltGsGN?`ctgwl", "ltGsGN?`ctgwl", charSequenceArray0);
      StringUtils.swapCase("Ju9&>");
      StringUtils.replacePattern("ltGsGN?`ctgwl", "\r", "ltGsGN?`ctgwl");
      StringUtils.replaceFirst((String) null, "Minimum abbreviation width with offset is %d", "EJ\"iYoV=G$A&");
      char[] charArray0 = new char[4];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'l';
      charArray0[3] = 'l';
      StringUtils.indexOfAny((CharSequence) "", charArray0);
      StringUtils.strip("\r", "Supplied value must be a valid byte literal between -128 and 127: [");
      StringUtils.isNoneBlank(charSequenceArray0);
      StringUtils.isAlphanumericSpace("\r");
      StringUtils.join((double[]) null, 'l');
      StringUtils.difference("#", "%W*Ocu;#f@CIz");
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      Stack<Integer> stack0 = new Stack<Integer>();
      StringUtils.indexOf((CharSequence) "...", 8167, 8167);
      StringUtils.isAlphaSpace("...");
      StringUtils.toRootLowerCase((String) null);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.iterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "FJ\"<i'9FKW5`";
      stringArray0[1] = "The Array must not be null";
      stringArray0[2] = "-nDA8o<Ne(SE#l(|";
      stringArray0[3] = "FJ\"<i'9FKW5`";
      StringUtils.firstNonEmpty(stringArray0);
      enumSet0.iterator();
      char[] charArray0 = new char[7];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = 'g';
      charArray0[4] = 'H';
      charArray0[5] = 'D';
      charArray0[6] = 'H';
      StringUtils.indexOfAny((CharSequence) "-nDA8o<Ne(SE#l(|", charArray0);
      String string0 = "\\u";
      StringUtils.strip(string0, ", Length: 0");
      StringUtils.isNoneBlank(stringArray0);
      StringUtils.isAlphanumericSpace("FJ\"<i'9FKW5`");
      StringUtils.join((double[]) null, 'g');
      StringUtils.difference("4g!rg%Eg", "FJ\"<i'9FKW5`");
      StringUtils.splitPreserveAllTokens("a,H", " is not in the range '0' - '9'");
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "L";
      stringArray0[2] = "L";
      StringUtils.abbreviateMiddle("L", "L", 1);
      StringUtils.lastIndexOf((CharSequence) stringArray0[3], 1);
      StringUtils.substringAfterLast("L", "Locale must not be null");
      double[] doubleArray0 = new double[0];
      StringUtils.join(doubleArray0, 'K', 12, (-1));
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      StringUtils.stripToEmpty("i$`i");
      StringUtils.capitalize("i$`i");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "i$`i";
      charSequenceArray0[1] = (CharSequence) "I$`i";
      charSequenceArray0[2] = (CharSequence) "i$`i";
      charSequenceArray0[3] = (CharSequence) "V";
      charSequenceArray0[4] = (CharSequence) "V";
      StringUtils.isAnyBlank(charSequenceArray0);
      StringUtils.endsWith(charSequenceArray0[2], charSequenceArray0[0]);
      StringUtils.lastIndexOf((CharSequence) "I$`i", 32, (int) (byte)49);
      StringUtils.compareIgnoreCase("", "i$`i", false);
      StringUtils.containsOnly(charSequenceArray0[3], "L[}T|Hk0i8&P{Rr)");
      StringUtils.leftPad("i$`i", (-1822), "V");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.ArrayUtils", '.');
      StringUtils.trimToNull("org.apache.commons.lang3.ArrayUtils");
      StringUtils.replaceEach("org.apache.commons.lang3.ArrayUtils", stringArray0, stringArray0);
      StringUtils.equalsAnyIgnoreCase("org.apache.commons.lang3.ArrayUtils", stringArray0);
      StringUtils.stripToNull((String) null);
      StringUtils.mid("org.apache.commons.lang3.ArrayUtils", 260, 260);
      StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.ArrayUtils", (CharSequence) "", 1049);
      StringUtils.abbreviate("yvpX;C3]", "1&dxYRua{`7", 35);
      StringUtils.appendIfMissing("1&dxYRua{`7", "yvpX;C3]", stringArray0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      StringUtils.join((Object[]) null, "");
      StringUtils.unwrap("hF-u", ".VNQ0T6P>`x");
      StringUtils.upperCase(".VNQ0T6P>`x");
      boolean[] booleanArray0 = new boolean[1];
      StringUtils.join(booleanArray0, 'j');
      StringUtils.toCodePoints((CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      StringUtils.center((String) null, 49, "~~JN-#;dt{/4");
      char[] charArray0 = new char[5];
      charArray0[0] = 'I';
      charArray0[1] = 'U';
      charArray0[2] = 'W';
      charArray0[3] = '$';
      charArray0[4] = '_';
      StringUtils.valueOf(charArray0);
      StringUtils.toCodePoints((CharSequence) null);
      StringUtils.removeStart("Cannot store ", "j+2&{()=)F.VAwUFs.");
      StringUtils.contains((CharSequence) "Cannot store ", 1);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "j+2&{()=)F.VAwUFs.";
      stringArray0[1] = "kz6q'nT ";
      stringArray0[2] = "Cannot store ";
      stringArray0[3] = "~~JN-#;dt{/4";
      stringArray0[4] = "~~JN-#;dt{/4";
      stringArray0[5] = "IUW$_";
      stringArray0[6] = "IUW$_";
      StringUtils.replaceEach("Cannot store ", stringArray0, stringArray0);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      StringUtils.removeAll("3\"6", "3\"6");
      charSequenceArray0[2] = (CharSequence) "";
      StringUtils.startsWithAny(charSequenceArray0[2], charSequenceArray0);
      StringUtils.removeIgnoreCase(">TNCU=H", "W");
      StringUtils.indexOfIgnoreCase((CharSequence) ">TNCU=H", (CharSequence) "", 1);
      StringUtils.isNumericSpace(charSequenceArray0[2]);
      StringUtils.contains((CharSequence) "3\"6", 1);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      Vector<Object> vector0 = new Vector<Object>();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      vector0.add((Object) charBuffer0);
      StringUtils.trimToEmpty(" vs negative~`vxGOhcNnkz6q'nT ");
      StringUtils.stripAll(stringArray0);
      StringUtils.startsWithAny("ldBax[{5Dv{h", stringArray0);
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'R', 0, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.iterator();
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "_";
      charSequenceArray0[1] = (CharSequence) "_";
      charSequenceArray0[2] = (CharSequence) "_";
      StringUtils.rightPad("_", 76);
      charSequenceArray0[3] = (CharSequence) "_                                                                           ";
      StringUtils.appendIfMissingIgnoreCase("_", "_", charSequenceArray0);
      StringUtils.getJaroWinklerDistance(charSequenceArray0[3], charSequenceArray0[2]);
      StringUtils.right("Array and element cannot both be null", 761);
      StringUtils.substring("_", (int) (short) (-1780), (-918));
      StringUtils.wrapIfMissing("8Y,:.XV92", '=');
      ArrayList<String> arrayList0 = new ArrayList<String>();
      StringUtils.equalsAny("Strings must not be null", charSequenceArray0);
      StringUtils.join((double[]) null, 'u');
      StringUtils.countMatches((CharSequence) "_                                                                           ", (CharSequence) null);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L";
      stringArray0[1] = "L";
      stringArray0[2] = "L";
      StringUtils.replaceAll("", "L", (String) null);
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.trimToSize();
      StringUtils.removeEndIgnoreCase((String) null, "L");
      stack0.iterator();
      StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "L", 45);
      // Undeclared exception!
      try { 
        StringUtils.removePattern("L", "jt{(eb7n'hM(6g>:3P2");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 1
         // jt{(eb7n'hM(6g>:3P2
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[1] = (CharSequence) "cDL$tp!/G:KU\"}2";
      charSequenceArray0[1] = (CharSequence) "cDL$tp!/G:KU\"}2";
      charSequenceArray0[2] = (CharSequence) "cDL$tp!/G:KU\"}2";
      charSequenceArray0[3] = (CharSequence) "cDL$tp!/G:KU\"}2";
      charSequenceArray0[4] = (CharSequence) "cDL$tp!/G:KU\"}2";
      charSequenceArray0[6] = (CharSequence) "cDL$tp!/G:KU\"}2";
      charSequenceArray0[7] = (CharSequence) "cDL$tp!/G:KU\"}2";
      StringUtils.prependIfMissingIgnoreCase("cDL$tp!/G:KU\"}2", "cDL$tp!/G:KU\"}2", charSequenceArray0);
      StringUtils.splitByWholeSeparator("cDL$tp!/G:KU\"}2", "maxWith cannot be negative", 2322);
      StringUtils.isAlphanumeric(charSequenceArray0[7]);
      StringUtils.isAlphanumericSpace(charSequenceArray0[7]);
      StringUtils.trimToNull("cDL$tp!/G:KU\"}2");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      StringUtils.substringBeforeLast("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      StringUtils.rightPad("", 4, "?@;uN");
      Vector<Object> vector0 = new Vector<Object>();
      double[] doubleArray0 = new double[4];
      StringUtils.rightPad("WKU}'{b&)yv ", 4, "[b/!%,8TIPNyW");
      StringUtils.substring("Aborting to protect against StackOverflowError - output of one loop is the input of another", 4, 20);
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, '\\', 59, 160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 59
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      StringUtils.uncapitalize("L[}T|");
      int[] intArray0 = new int[4];
      intArray0[2] = 8192;
      intArray0[1] = 8192;
      intArray0[2] = 8192;
      intArray0[1] = 8192;
      StringUtils.join(intArray0, 'r');
      String string0 = "l %";
      StringUtils.leftPad("l %", 0, "0r8192r8192r0");
      StringUtils.wrap("Abortig to rotect against StackOverflowErrr - output of one loop is the input of another", 'Y');
      StringUtils.leftPad("l[}T|", 8192);
      StringUtils.contains((CharSequence) "0r8192r8192r0", (CharSequence) "l %");
      StringUtils.indexOfAnyBut((CharSequence) "l %", (CharSequence) "l[}T|");
      StringUtils.isAllLowerCase("0r8192r8192r0");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 8192;
      doubleArray0[1] = (double) 'r';
      doubleArray0[2] = (double) 8192;
      doubleArray0[3] = (double) 8192;
      doubleArray0[4] = (double) 8192;
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'r', 76, 8192);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 76
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4;
      StringUtils.join(doubleArray0, 'e');
      StringUtils.trimToEmpty("?@;uN");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = StringUtils.substring("[", (-1217), (-1217));
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category1));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet1.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertTrue(enumSet0.equals((Object)enumSet1));
      
      String string1 = StringUtils.replaceOnce("", "", "[");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      boolean boolean0 = StringUtils.isWhitespace("[");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((byte[]) null, 'Y');
      assertNull(string2);
      
      String string3 = StringUtils.LF;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\n", string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", (char[]) null);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string4 = StringUtils.join((double[]) null, '+');
      assertNull(string4);
      
      String string5 = StringUtils.stripAccents("L@a|h63");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "[", (CharSequence) null, (-1141));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean3 = StringUtils.isNumericSpace("L@a|h63");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string6 = StringUtils.replace("~`vxGOhc", (String) null, "p{InCombiningDiacriticalMarks}+", 89);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("~`vxGOhc", string6);
      
      boolean boolean4 = StringUtils.equalsAny("~`vxGOhc", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
      
      String string7 = StringUtils.repeat("'q", (String) null, 16);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("'q'q'q'q'q'q'q'q'q'q'q'q'q'q'q'q", string7);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "'q'q'q'q'q'q'q'q'q'q'q'q'q'q'q'q", (CharSequence) "[");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(32, int2);
      
      StringUtils.isBlank("");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      StringUtils.prependIfMissing("", "", charSequenceArray0);
      int int0 = (-934);
      StringUtils.replace("", "", "GM5B", (-934));
      StringUtils.removeFirst("", "");
      StringUtils.trim("Minimum abbreviation width with offset is %d");
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "Minimum abbreviation width with offset is %d", (-1082));
      StringUtils.containsNone((CharSequence) "", ", '");
      StringUtils.lastIndexOf((CharSequence) "", (-1), 11);
      StringUtils.repeat("GM5B", 11);
      StringUtils.chomp("Cannot store ", "Minimum abbreviation width with offset is %d");
      StringUtils.trimToNull("GM5B");
      StringUtils.rightPad("", (-2254));
      // Undeclared exception!
      try { 
        StringUtils.truncate("", 5444, (-1082));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      Iterator<Integer> iterator0 = stack0.iterator();
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet.of(locale_Category0, locale_Category1);
      String string0 = "FJ\"<iF'9FKW5`";
      StringUtils.join(iterator0, '_');
      StringUtils.replaceFirst("The Array must not be null", "FJ\"<iF'9FKW5`", "");
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.prependIfMissingIgnoreCase("FJ\"<iF'9FKW5`", "", charSequenceArray0);
      StringUtils.countMatches((CharSequence) "The Array must not be null", (CharSequence) "FJ\"<iF'9FKW5`");
      // Undeclared exception!
      try { 
        StringUtils.truncate("LR6IHQg;i", (-965));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      StringUtils.splitPreserveAllTokens("Invalid locale format: ");
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Invalid locale format: ");
      stack0.add(charBuffer0);
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      String string0 = StringUtils.leftPad("Invalid locale format: ", 8192);
      StringUtils.equalsIgnoreCase(string0, charBuffer0);
      StringUtils.indexOfDifference((CharSequence) "Invalid locale format: ", (CharSequence) "Invalid locale format: ");
      StringUtils.isNumericSpace(string0);
      StringUtils.split(string0, string0);
      StringUtils.equals((CharSequence) string0, (CharSequence) charBuffer0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      StringUtils.defaultIfEmpty("", "I3}?&|]FBQ");
      long[] longArray0 = new long[1];
      longArray0[0] = (-2061L);
      StringUtils.substringBetween("", "I3}?&|]FBQ", "I3}?&|]FBQ");
      StringUtils.startsWithIgnoreCase("", (CharSequence) null);
      StringUtils.stripStart((String) null, "I3}?&|]FBQ");
      StringUtils.isNotBlank((CharSequence) null);
      StringUtils.splitByWholeSeparator("", "I3}?&|]FBQ");
      StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "*81|", 55);
      StringUtils.splitPreserveAllTokens((String) null, "");
      StringUtils.normalizeSpace((String) null);
      StringUtils.rightPad("Minimum abbreviation width is %d", 55, "gKvtM0:U.U3&");
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      StringUtils.difference("org.apache.commons.lang3.exception.CloneFailedEx be negative", "org.apache.commons.lang3.exception.CloneFailedEx be negative");
      StringUtils.isAnyBlank((CharSequence[]) null);
      StringUtils.isAllBlank((CharSequence[]) null);
      StringUtils.isEmpty("org.apache.commons.lang3.exception.CloneFailedEx be negative");
      StringUtils.center("org.apache.commons.lang3.Charsets", (-26), '<');
      StringUtils.lastIndexOfIgnoreCase((CharSequence) "org.apache.commons.lang3.Charsets", (CharSequence) "nUaJ/^");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      StringUtils.isAnyEmpty((CharSequence[]) null);
      StringUtils.wrap("ARPm)1Np^_WIByARPm)1Np^_WIBy", "ARPm)1Np^_WIByARPm)1Np^_WIBy");
      char[] charArray0 = new char[3];
      charArray0[0] = '8';
      charArray0[1] = '8';
      StringUtils.containsOnly((CharSequence) "ARPm)1Np^_WIByARPm)1Np^_WIByARPm)1Np^_WIByARPm)1Np^_WIByARPm)1Np^_WIByARPm)1Np^_WIBy", charArray0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "ARPm)1Np^_WIByARPm)1Np^_WIByARPm)1Np^_WIByARPm)1Np^_WIByARPm)1Np^_WIByARPm)1Np^_WIBy");
      StringUtils.indexOfDifference((CharSequence) "ARPm)1Np^_WIByARPm)1Np^_WIByARPm)1Np^_WIByARPm)1Np^_WIByARPm)1Np^_WIByARPm)1Np^_WIBy", (CharSequence) charBuffer0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(iterator0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "FJ\"<i'9FKW5`";
      stringArray0[1] = "The Array must not be null";
      stringArray0[2] = "-nDA8o<Ne(SE#l(|";
      stringArray0[3] = "FJ\"<i'9FKW5`";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
      assertEquals("FJ\"<i'9FKW5`", string0);
      
      Iterator<Locale.Category> iterator1 = enumSet0.iterator();
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotNull(iterator1);
      assertTrue(enumSet0.contains(locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      
      String string1 = StringUtils.join(iterator1, 'D');
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotNull(string1);
      assertTrue(enumSet0.contains(locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("DISPLAYDFORMAT", string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'q';
      charArray0[1] = 'q';
      charArray0[2] = 'q';
      charArray0[3] = 'Y';
      charArray0[4] = 'H';
      charArray0[5] = 'D';
      charArray0[6] = 'H';
      int int0 = StringUtils.indexOfAny((CharSequence) "-nDA8o<Ne(SE#l(|", charArray0);
      assertArrayEquals(new char[] {'q', 'q', 'q', 'Y', 'H', 'D', 'H'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(2, int0);
      
      String string2 = "\\u";
      String string3 = StringUtils.strip(string2, ", Length: 0");
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\\u", string3);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("FJ\"<i'9FKW5`");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.join((double[]) null, 'Y');
      assertNull(string4);
      
      StringUtils.substringBeforeLast((String) null, "\n");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      StringUtils.rightPad("l %", 0, '0');
      StringUtils.contains((CharSequence) "l %", (CharSequence) "l %");
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      enumSet0.clear();
      enumSet0.add(locale_Category0);
      enumSet0.iterator();
      StringUtils.splitByCharacterTypeCamelCase("wWyN=e.nN2CD");
      StringUtils.abbreviate("#", "l %", (-4101), 37);
      StringUtils.substringBetween("Minimum abbreviation width is %d", "...", "l %");
      StringUtils.contains((CharSequence) "l %", (CharSequence) null);
      StringUtils.indexOf((CharSequence) "#", 0, 263);
      StringUtils.center("...", 116, "\nmaxWith cannot be negative");
      StringUtils.splitPreserveAllTokens("maxWith cannot be negative\n", '0');
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      StringUtils.chop("V");
      StringUtils.difference("V", "");
      StringUtils.abbreviateMiddle("Dfrn", "K'N\"/", 132);
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      StringUtils.isNoneBlank(charSequenceArray0);
      String[] stringArray0 = StringUtils.splitByCharacterType("V");
      StringUtils.removeStart("", "");
      String[] stringArray1 = new String[4];
      stringArray1[0] = "Dfrn";
      stringArray1[1] = "Search and Replace array lengths don't match: ";
      stringArray1[2] = "";
      stringArray1[3] = "";
      StringUtils.getCommonPrefix(stringArray1);
      StringUtils.replace("", "V", "\n");
      StringUtils.abbreviate("", (-535));
      StringUtils.equalsAnyIgnoreCase("", stringArray0);
      StringUtils.stripAll(stringArray1, "&");
      StringUtils.isAsciiPrintable("");
      StringUtils.indexOf((CharSequence) "Dfrn", (CharSequence) "", 132);
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) (-535);
      floatArray0[1] = (float) (-535);
      StringUtils.join(floatArray0, 'y', 2175, 256);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      StringUtils.replaceFirst("', is neither of type Map.Entry nor an Array", "', is neither of type Map.Entry nor an Array", "m");
      StringUtils.replacePattern("', is neither of type Map.Entry nor an Array", "2", "m");
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "m";
      charSequenceArray0[1] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[2] = (CharSequence) "v)zE,>=4_OoF?Nko";
      charSequenceArray0[3] = (CharSequence) "m";
      charSequenceArray0[4] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      StringUtils.indexOf((CharSequence) "v)zE,>=4_OoF?Nko", 11);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      String string0 = StringUtils.chomp("[");
      assertNotNull(string0);
      assertEquals("[", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("[");
      assertFalse(boolean0);
      
      String string1 = StringUtils.toRootLowerCase("*'D{9~>BB!TsL");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("*'d{9~>bb!tsl", string1);
      
      StringUtils.indexOf((CharSequence) "[", (-911));
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = vector0.add((Object) charBuffer0);
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(vector0.contains(""));
      assertTrue(boolean0);
      
      String string0 = StringUtils.trimToEmpty(" vs negative~`vxGOhcNnkz6q'nT ");
      assertNotNull(string0);
      assertEquals("vs negative~`vxGOhcNnkz6q'nT", string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals(250, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.startsWithAny("ldBax[{5Dv{h", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(250, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        StringUtils.join(floatArray0, 'R', 0, (int) 'R');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Ty,HVnggok}20]", "Ty,HVnggok}20]");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBetween("Ty,HVnggok}20]", "Ty,HVnggok}20]");
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, (-15));
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) (-15);
      floatArray0[1] = (float) (-15);
      floatArray0[2] = (float) (-15);
      floatArray0[3] = (float) (-1);
      floatArray0[4] = (float) (-15);
      floatArray0[5] = (float) (-15);
      floatArray0[6] = (float) (-15);
      floatArray0[7] = (float) (-15);
      String string2 = StringUtils.join(floatArray0, 'X');
      assertArrayEquals(new float[] {(-15.0F), (-15.0F), (-15.0F), (-1.0F), (-15.0F), (-15.0F), (-15.0F), (-15.0F)}, floatArray0, 0.01F);
      assertEquals(8, floatArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("-15.0X-15.0X-15.0X-1.0X-15.0X-15.0X-15.0X-15.0", string2);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "Locale mustnot be nll", (-444), 1077);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.chomp("Locale mustnot be nll");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Locale mustnot be nll", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "Ty,HVnggok}20]", 76);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      float[] floatArray0 = new float[6];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (-6142.758F);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1193.6F;
      floatArray0[4] = (-3559.0F);
      floatArray0[5] = (-1972.6157F);
      String string0 = StringUtils.join(floatArray0, 'j');
      assertArrayEquals(new float[] {0.0F, (-6142.758F), 0.0F, 1193.6F, (-3559.0F), (-1972.6157F)}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      assertNotNull(string0);
      assertEquals("0.0j-6142.758j0.0j1193.6j-3559.0j-1972.6157", string0);
      
      String string1 = StringUtils.reverse("0.0j-6142.758j0.0j1193.6j-3559.0j-1972.6157");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7516.2791-j0.9553-j6.3911j0.0j857.2416-j0.0", string1);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      String string2 = StringUtils.join(booleanArray0, 'h');
      assertTrue(Arrays.equals(new boolean[] {false, true, true}, booleanArray0));
      assertEquals(3, booleanArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("falsehtruehtrue", string2);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-5);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-64);
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)108;
      byteArray0[8] = (byte)24;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "P;^Av_l\"w");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // P;^Av_l\"w
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("ls}PG626hCk}'", "fH$J`^ZPc", (-2681));
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.compare("negative", "offset cannot be negative", true);
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-117);
      byteArray0[1] = (byte) (-54);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte) (-125);
      byteArray0[4] = (byte) (-1);
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      String string0 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {(byte) (-117), (byte) (-54), (byte)87, (byte) (-125), (byte) (-1)}, byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals(5, byteArray0.length);
      assertNotNull(string0);
      assertEquals("\uFFFD\uFFFDW\uFFFD\uFFFD", string0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      String string0 = StringUtils.overlay("R g!uKRu ghqx#hL", "R g!uKRu ghqx#hL", 0, 0);
      assertNotNull(string0);
      assertEquals("R g!uKRu ghqx#hLR g!uKRu ghqx#hL", string0);
      
      String string1 = StringUtils.replace("Strings must not be null", "", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "R g!uKRu ghqx#hLR g!uKRu ghqx#hL", (CharSequence) "Strings must not be null");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substring("Strings must not be null", 2029, 2029);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap((String) null, '/');
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "R g!uKRu ghqx#hL";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "R g!uKRu ghqx#hLR g!uKRu ghqx#hL";
      String string4 = StringUtils.chomp(" vs ", "negative~`vxGOhcNnkz6q'nT ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(" vs ", string4);
      
      charSequenceArray0[3] = (CharSequence) " vs ";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "Strings must not be null";
      charSequenceArray0[7] = (CharSequence) "R g!uKRu ghqx#hLR g!uKRu ghqx#hL";
      String string5 = StringUtils.appendIfMissingIgnoreCase("]LYg$yxA", "Strings must not be null", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("]LYg$yxA", string5);
      
      double double0 = StringUtils.getJaroWinklerDistance(" vs ", "Strings must not be null");
      assertEquals(0.51, double0, 0.01);
      
      String string6 = StringUtils.abbreviateMiddle((String) null, "u!0w'}l#gr0wMinimum abbreviation width wit offset is %d", 0);
      assertNull(string6);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", charSequenceArray0[2], 0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string7 = StringUtils.repeat((String) null, "N1Xuvt59c%OwT", (-1));
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      String string0 = "[";
      String string1 = StringUtils.substring("[", (-1217), (-1217));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string2 = StringUtils.removeEndIgnoreCase("", "[");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string3 = StringUtils.repeat("", (String) null, (-1217));
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "WeZfqP~Z L;xu7:**";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = "S0-oF|mRf!`H.IR)CXH";
      String string5 = StringUtils.substringBefore("S0-oF|mRf!`H.IR)CXH", 367);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("S0-oF|mRf!`H.IR)CXH", string5);
      
      int int0 = 21;
      int int1 = (-4839);
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "S0-oF|mRf!`H.IR)CXH", (-4839));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Threshold must not be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)0;
      String string0 = StringUtils.join(byteArray0, 'O', 2147483645, 5);
      assertArrayEquals(new byte[] {(byte) (-28), (byte)0, (byte)0, (byte) (-22), (byte) (-75), (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.reverseDelimited("", '#');
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad("81NGpx&", (int) (byte) (-22), 'D');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("81NGpx&", string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "81NGpx&", (CharSequence) "", (int) (byte)0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "...", "@:%8");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "...", (CharSequence) "...", (int) (byte)0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "81NGpx&";
      stringArray0[1] = "@:%8";
      stringArray0[2] = "@:%8";
      String string3 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "MVb<GK }izowG29kGgE");
      assertNotNull(string0);
      assertFalse(treeSet0.contains("MVb<GK }izowG29kGgE"));
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "MVb<GK }izowG29kGgE";
      charSequenceArray0[1] = (CharSequence) "";
      Iterator<Object> iterator1 = treeSet0.descendingIterator();
      assertNotSame(iterator1, iterator0);
      assertNotNull(iterator1);
      assertFalse(treeSet0.contains("MVb<GK }izowG29kGgE"));
      assertFalse(iterator1.equals((Object)iterator0));
      
      charSequenceArray0[2] = (CharSequence) "MVb<GK }izowG29kGgE";
      charSequenceArray0[3] = (CharSequence) "MVb<GK }izowG29kGgE";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = treeSet0.add(charSequenceArray0[0]);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(treeSet0.contains(""));
      assertTrue(treeSet0.contains("MVb<GK }izowG29kGgE"));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.mid("MVb<GK }izowG29kGgE", 3, 64);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<GK }izowG29kGgE", string1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string2 = StringUtils.removeAll("MVb<GK }izowG29kGgE", "MVb<GK }izowG29kGgE");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int0 = StringUtils.lastIndexOfAny("MVb<GK }izowG29kGgE", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(19, int0);
      
      String string3 = StringUtils.substringAfterLast("", (-1755));
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "", (-1740));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string4 = StringUtils.repeat("<GK }izowG29kGgE", "#", (-1755));
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      String string0 = StringUtils.strip("Aborting to protect against StackOverflowError - output of one loop is the input of another", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string0);
      assertEquals("borting to protect against StackOverflowError - output of one loop is the inpu", string0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string1 = StringUtils.unwrap((String) null, "Object varargs must not be null");
      assertNull(string1);
      
      String string2 = StringUtils.truncate("Object varargs must not be null", 23, 23);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(" be null", string2);
      
      String string3 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.unwrap("p{InCombiningDiacriticalMarks}+", '_');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '_';
      doubleArray0[1] = (double) 23;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 'S';
      doubleArray0[4] = (double) '_';
      doubleArray0[5] = (double) '_';
      String string5 = StringUtils.join(doubleArray0, 'S', 23, (-32768));
      assertArrayEquals(new double[] {95.0, 23.0, 23.0, 83.0, 95.0, 95.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn(charBuffer0).when(supplier0).get();
      CharBuffer charBuffer1 = StringUtils.getIfEmpty(charBuffer0, supplier0);
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals("", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.capacity());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.isReadOnly());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      
      String string6 = StringUtils.substringAfter("Aborting to protect against StackOverflowError - output of one loop is the input of another", (-32768));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
      
      String string7 = StringUtils.uncapitalize("Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertEquals("aborting to protect against StackOverflowError - output of one loop is the input of another", string7);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 23;
      intArray0[1] = 59;
      intArray0[2] = 23;
      intArray0[3] = (-32768);
      intArray0[4] = (-32768);
      intArray0[5] = (int) 'S';
      intArray0[6] = 23;
      intArray0[7] = (int) '_';
      intArray0[8] = 23;
      String string8 = StringUtils.join(intArray0, '_', (-1060), (-32768));
      assertArrayEquals(new int[] {23, 59, 23, (-32768), (-32768), 83, 23, 95, 23}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string2));
      assertEquals("", string8);
      
      double double0 = StringUtils.getJaroWinklerDistance("Aborting to protect against StackOverflowError - output of one loop is the input of another", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      String string0 = StringUtils.substringAfter("K'N\"/", "Index: ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("R/L{t0", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("R/L{t0", string1);
      
      String string2 = StringUtils.truncate((String) null, 75, 48);
      assertNull(string2);
      
      String string3 = "";
      String string4 = StringUtils.stripEnd("", "7/%>&_FL;IHI=c$0,t");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string5 = StringUtils.unwrap("l{wSPuW'uBDi5+XC+~", 'E');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("l{wSPuW'uBDi5+XC+~", string5);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 75;
      doubleArray0[1] = (double) (-32768);
      doubleArray0[2] = (double) 'E';
      doubleArray0[3] = (double) 23;
      String string6 = StringUtils.join(doubleArray0, 'E', 48, 8);
      assertArrayEquals(new double[] {75.0, (-32768.0), 69.0, 23.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chomp("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.truncate((String) null, 49);
      assertNull(string2);
      
      String string3 = StringUtils.defaultIfEmpty((String) null, "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3509);
      intArray0[1] = (-3808);
      intArray0[2] = 97;
      intArray0[3] = 84;
      intArray0[4] = 2;
      intArray0[5] = (-2410);
      String string0 = StringUtils.join(intArray0, 'S');
      assertArrayEquals(new int[] {(-3509), (-3808), 97, 84, 2, (-2410)}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(string0);
      assertEquals("-3509S-3808S97S84S2S-2410", string0);
      
      String string1 = StringUtils.truncate("offset cannot be negative", 97);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("offset cannot be negative", string1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "offset cannot be negative", (CharSequence) "-3509S-3808S97S84S2S-2410");
      assertFalse(boolean0);
      
      String string2 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.ObjectUtils", "yzgwKd<a!3.#", (-3509));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.ObjectUtils", string2);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(21);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(21, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(21, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(21, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(charBuffer0);
      
      IntStream intStream0 = charBuffer0.chars();
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(21, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(21, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(21, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertNotNull(intStream0);
      
      CharBuffer charBuffer1 = charBuffer0.put(">|~m");
      assertEquals(4, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(21, charBuffer0.limit());
      assertEquals(17, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(17, charBuffer0.length());
      assertTrue(charBuffer1.hasArray());
      assertEquals(4, charBuffer1.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertEquals(21, charBuffer1.capacity());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(21, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertEquals(17, charBuffer1.remaining());
      assertEquals(17, charBuffer1.length());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isReadOnly());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) ";7Y$;SR]s0yo!D/", (CharSequence) charBuffer0);
      assertEquals(4, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(21, charBuffer0.limit());
      assertEquals(17, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(17, charBuffer0.length());
      assertSame(charBuffer0, charBuffer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "L");
      assertEquals("L", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = charBuffer0.slice();
      assertEquals("L", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer1.remaining());
      assertEquals(1, charBuffer1.capacity());
      assertEquals(1, charBuffer1.limit());
      assertEquals(1, charBuffer1.length());
      assertEquals("L", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.isReadOnly());
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      
      String string0 = StringUtils.center("L", (-874));
      assertNotNull(string0);
      assertEquals("L", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("L", charBuffer0, 8192);
      assertEquals("L", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertNotSame(charBuffer0, charBuffer1);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertEquals((-1), int0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("L"));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "XCOhjpq(f<}JG\"y!5";
      charSequenceArray0[1] = (CharSequence) "L";
      charSequenceArray0[2] = (CharSequence) charBuffer0;
      charSequenceArray0[3] = (CharSequence) charBuffer1;
      String string1 = StringUtils.rightPad("L", 101);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("L                                                                                                    ", string1);
      
      charSequenceArray0[4] = (CharSequence) "L                                                                                                    ";
      charSequenceArray0[5] = (CharSequence) "L";
      boolean boolean0 = StringUtils.equalsAny("L", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '/';
      intArray0[1] = (int) '/';
      intArray0[6] = (int) '/';
      intArray0[3] = (int) '/';
      intArray0[4] = (int) '/';
      intArray0[6] = (int) '/';
      String string0 = StringUtils.join(intArray0, '/', 0, 1);
      assertArrayEquals(new int[] {47, 47, 0, 47, 47, 0, 47, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(string0);
      assertEquals("47", string0);
      
      String string1 = StringUtils.reverseDelimited("0d?guP\"m| :=9qdr:", '/');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0d?guP\"m| :=9qdr:", string1);
      
      String string2 = StringUtils.leftPad("81NGpx&", 89, '-');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("----------------------------------------------------------------------------------81NGpx&", string2);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) "81NGpx&", supplier0);
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string2));
      assertFalse(charSequence0.equals((Object)string0));
      assertEquals("81NGpx&", charSequence0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "81NGpx&", (CharSequence) "81NGpx&", 89);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "----------------------------------------------------------------------------------81NGpx&", "@:%8");
      assertFalse(int1 == int0);
      assertEquals(82, int1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '-';
      charArray0[1] = '-';
      charArray0[2] = '-';
      charArray0[3] = '/';
      String string3 = StringUtils.join(charArray0, '[', 1172, 47);
      assertArrayEquals(new char[] {'-', '-', '-', '/'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)charSequence0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.leftPad("G1C|-_xoLS2bt", (-1047), "G1C|-_xoLS2bt");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("G1C|-_xoLS2bt", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "81NGpx&";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "81NGpx&";
      charSequenceArray0[3] = (CharSequence) "@:%8";
      charSequenceArray0[4] = (CharSequence) "47";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "0d?guP\"m| :=9qdr:";
      charSequenceArray0[7] = (CharSequence) "----------------------------------------------------------------------------------81NGpx&";
      boolean boolean0 = StringUtils.equalsAny("0d?guP\"m| :=9qdr:", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-22);
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)0;
      String string0 = StringUtils.join(byteArray0, 'O', 2147483645, 5);
      assertArrayEquals(new byte[] {(byte) (-28), (byte)0, (byte)0, (byte) (-22), (byte) (-75), (byte)0}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.mid("cH$[,2i[U.xSfRTf", 362, (-1198));
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.difference(" ", "g%*]FJ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("g%*]FJ", string2);
      
      String string3 = StringUtils.reverseDelimited("cH$[,2i[U.xSfRTf", '(');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("cH$[,2i[U.xSfRTf", string3);
      
      boolean boolean1 = StringUtils.startsWith("g%*]FJ", "cH$[,2i[U.xSfRTf");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.replace("\n", "WKU}'{b&)yv WKU}'{b&)yv ", "cH$[,2i[U.xSfRTf", (int) (byte)0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("\n", string4);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      String string0 = StringUtils.abbreviate("org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwBorg.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", "offset cannot be negative", 90, 56);
      assertNotNull(string0);
      assertEquals("offset cannot be negativelang3.ObjectUtils,O]8nE8wSn\"vwB", string0);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.swapCase("MERj");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("merJ", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("offset cannot be negativelang3.ObjectUtils,O]8nE8wSn\"vwB", "Wm.af", "");
      assertNull(stringArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("Sz?V ", charset0);
      assertArrayEquals(new byte[] {(byte)83, (byte)122, (byte)63, (byte)86, (byte)32}, byteArray0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("offset cannot be negativelang3.ObjectUtils,O]8nE8wSn\"vwB", 'o');
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", "", (-979), (-979));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviate("", "q2)zLg4f'xrX", 1490, 4);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "", 1490, 1490);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase(">9,e4`M@,WZ)mj`gF?", ">9,e4`M@,WZ)mj`gF?");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean0 = StringUtils.isBlank("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      String string0 = StringUtils.difference("yZ?L_R+8p0-EIxOA", "The character ");
      assertNotNull(string0);
      assertEquals("The character ", string0);
      
      String string1 = StringUtils.abbreviate("yZ?L_R+8p0-EIxOA", 16);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("yZ?L_R+8p0-EIxOA", string1);
      
      String string2 = StringUtils.removeIgnoreCase("vT&.5L0", "yZ?L_R+8p0-EIxOA");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("vT&.5L0", string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 'I';
      charArray0[2] = 'N';
      charArray0[3] = 'm';
      charArray0[5] = '&';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "vT&.5L0", charArray0);
      assertArrayEquals(new char[] {'K', 'I', 'N', 'm', '\u0000', '&'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("The character ");
      assertEquals(14, intArray0.length);
      assertNotNull(intArray0);
      
      String string3 = StringUtils.overlay("p{InCombiningDiacriticalMarks}+", "yZ?L_R+8p0-EIxOA", Integer.MAX_VALUE, 16);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("p{InCombiningDiayZ?L_R+8p0-EIxOA", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "The character ", 16);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      String string0 = StringUtils.overlay("K'N\"/", "K'N\"/", 2634, 0);
      assertNotNull(string0);
      assertEquals("K'N\"/", string0);
      
      String string1 = StringUtils.replace("K'N\"/", "", "[Xi");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("K'N\"/", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "[Xi", (CharSequence) "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.substring("", (-1427), 2634);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("Strings must not be null", '7');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("7Strings must not be null7", string3);
      
      String string4 = StringUtils.chomp("WC~4~s B1zdy<FL:A", "K'N\"/");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("WC~4~s B1zdy<FL:A", string4);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfBlank((CharSequence) "", supplier0);
      assertNull(charSequence0);
      
      String string5 = StringUtils.appendIfMissingIgnoreCase("WC~4~s B1zdy<FL:A", (CharSequence) null, (CharSequence[]) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertEquals("WC~4~s B1zdy<FL:A", string5);
      
      double double0 = StringUtils.getJaroWinklerDistance("WC~4~s B1zdy<FL:A", "");
      assertEquals(0.0, double0, 0.01);
      
      String string6 = StringUtils.abbreviateMiddle("WC~4~s B1zdy<FL:A", "/oua}sP+", 2634);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertEquals("WC~4~s B1zdy<FL:A", string6);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) " vs ", (CharSequence) "/oua}sP+", (-482));
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isNoneEmpty((CharSequence[]) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string7 = StringUtils.defaultString("'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 3RH ", "Cannot store ");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertEquals("'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 3RH ", string7);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.stripStart("[b/!%,8TIPNyW", "(a'wo`9gy ");
      assertNotNull(string0);
      assertEquals("[b/!%,8TIPNyW", string0);
      
      charSequenceArray0[0] = (CharSequence) "[b/!%,8TIPNyW";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfBlank("[b/!%,8TIPNyW", supplier0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("[b/!%,8TIPNyW", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "[b/!%,8TIPNyW", 22, 8192);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("[b/!%,8TIPNyW");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.prependIfMissing("[b/!%,8TIPNyW", "[b/!%,8TIPNyW", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("[b/!%,8TIPNyW", string2);
      
      boolean[] booleanArray0 = new boolean[0];
      String string3 = StringUtils.join(booleanArray0, 'w');
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int1 = StringUtils.compare("Cannot store ", "...", false);
      assertFalse(int1 == int0);
      assertEquals(21, int1);
      
      boolean boolean2 = StringUtils.endsWithAny("(a'wo`9gy ", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.rightPad("*N,2F", 22);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("*N,2F                 ", string4);
      
      boolean boolean3 = StringUtils.isAllLowerCase("*N,2F");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string5 = StringUtils.abbreviateMiddle("*N,2F                 ", "[b/!%,8TIPNyW", (-1));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertEquals("*N,2F                 ", string5);
      
      String string6 = StringUtils.capitalize("[b/!%,8TIPNyW");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("[b/!%,8TIPNyW", string6);
      
      String string7 = StringUtils.trimToNull("");
      assertNull(string7);
      
      String[] stringArray0 = StringUtils.split("Threshold must not be negativez*qR0fkO", (String) null, (-924));
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean4 = StringUtils.equalsAny("", stringArray0);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string0 = StringUtils.substringAfter("bVTz#-b", (String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.repeat("i", 97);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", string1);
      
      String string2 = StringUtils.strip("3dH");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("3dH", string2);
      
      String string3 = StringUtils.uncapitalize("i");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("i", string3);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chomp("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.toRootLowerCase("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("supplied value must be a valid byte literal between -32768 and 32767: [", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [";
      charSequenceArray0[3] = (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [";
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean1 = StringUtils.equalsAny("", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      String string0 = StringUtils.removeEnd((String) null, (String) null);
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      int int0 = (-1146);
      String string1 = StringUtils.repeat((String) null, (-1146));
      assertNull(string1);
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      String string2 = StringUtils.substringAfterLast((String) null, (-1146));
      assertNull(string2);
      
      charSequenceArray0[5] = (CharSequence) null;
      boolean boolean0 = StringUtils.equalsAny((CharSequence) null, charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      CharSequence[] charSequenceArray1 = new CharSequence[5];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) null;
      charSequenceArray1[1] = (CharSequence) null;
      charSequenceArray1[2] = (CharSequence) null;
      charSequenceArray1[3] = (CharSequence) null;
      charSequenceArray1[4] = (CharSequence) null;
      boolean boolean2 = StringUtils.isAllEmpty(charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(5, charSequenceArray1.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertTrue(boolean2);
      
      String string3 = StringUtils.prependIfMissing((String) null, charSequenceArray0[2], charSequenceArray0);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(6, charSequenceArray0.length);
      assertNull(string3);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      
      String string4 = StringUtils.substringAfter(" ", (String) null);
      assertNotNull(string4);
      assertEquals("", string4);
      
      boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]);
      assertNotSame(charSequenceArray0, charSequenceArray1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(charSequenceArray0.equals((Object)charSequenceArray1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string5 = StringUtils.getIfEmpty(" ", supplier0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertEquals(" ", string5);
      
      int int1 = StringUtils.lastIndexOfAny(charSequenceArray1[1], charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(5, charSequenceArray1.length);
      assertFalse(int1 == int0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null);
      assertNull(stringArray0);
      
      boolean boolean4 = StringUtils.containsWhitespace(charSequenceArray1[3]);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(5, charSequenceArray1.length);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(boolean4);
      
      String string6 = "?@;uWKU}'{b&)yv ?@;uWKU}'{b&)yv ?@;uWKU}'{b&)yv ?@;uWKU}'{b&)yv WKU}'{b&)yv ";
      String string7 = StringUtils.stripEnd("?@;uWKU}'{b&)yv ?@;uWKU}'{b&)yv ?@;uWKU}'{b&)yv ?@;uWKU}'{b&)yv WKU}'{b&)yv ", " ");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("?@;uWKU}'{b&)yv ?@;uWKU}'{b&)yv ?@;uWKU}'{b&)yv ?@;uWKU}'{b&)yv WKU}'{b&)yv", string7);
      
      try { 
        StringUtils.getBytes("hB+SR\"bdx2>@t,", " ");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[6] = (int) '#';
      intArray0[3] = (int) '#';
      String string0 = StringUtils.truncate("eu#)Qh", 0, 1419);
      assertNotNull(string0);
      assertEquals("eu#)Qh", string0);
      
      String string1 = StringUtils.stripEnd("3:s70m", "3:s70m");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      charArray0[1] = 'x';
      charArray0[2] = 'S';
      charArray0[4] = '#';
      charArray0[5] = '#';
      charArray0[6] = '#';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "eu#)Qh", charArray0);
      assertArrayEquals(new char[] {'#', 'x', 'S', '\u0000', '#', '#', '#'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compare("eu#)Qh", "3:s70m", true);
      assertFalse(int1 == int0);
      assertEquals(50, int1);
      
      String string2 = StringUtils.rightPad("CFJ", 50, "s ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("CFJs s s s s s s s s s s s s s s s s s s s s s s s", string2);
      
      String string3 = StringUtils.substring("CFJ", 50, 5);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) '#';
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 50;
      doubleArray0[3] = (double) 'x';
      doubleArray0[4] = (double) '#';
      doubleArray0[5] = 3465.8964;
      doubleArray0[6] = (double) 1419;
      doubleArray0[7] = (double) 'S';
      // Undeclared exception!
      try { 
        StringUtils.join(doubleArray0, 'e', (-1554), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1554
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.join((double[]) null, '4');
      assertNull(string0);
      
      String string1 = StringUtils.uncapitalize("(a'wo`9gy ");
      assertNotNull(string1);
      assertEquals("(a'wo`9gy ", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "(a'wo`9gy ", "(a'wo`9gy ");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      String string0 = StringUtils.substringBefore("q", 853);
      assertNotNull(string0);
      assertEquals("q", string0);
      
      boolean boolean0 = StringUtils.isNumeric("q");
      assertFalse(boolean0);
      
      StringUtils.rightPad("q", 853, "q");
      StringUtils.isNumeric("q");
      StringUtils.containsWhitespace("q");
      StringUtils.splitPreserveAllTokens("<Locale must not be null<");
      CharBuffer charBuffer0 = CharBuffer.allocate(853);
      StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      StringUtils.equals((CharSequence) ";7Y$;SR]s0yo!D/", (CharSequence) "q");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("*81|", "E");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "";
      String string1 = StringUtils.join(objectArray0, "L[}T|");
      assertEquals(1, objectArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removePattern("/L@\"i=(o,c!+wv.#6J", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("/L@\"i=(o,c!+wv.#6J", string2);
      
      String string3 = StringUtils.wrapIfMissing("Hk0i8&P{Rr)", "L[}T|");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("L[}T|Hk0i8&P{Rr)L[}T|", string3);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 901;
      intArray0[1] = 56;
      intArray0[2] = 88;
      intArray0[3] = 395;
      intArray0[4] = (-1352);
      intArray0[5] = (-1551);
      intArray0[6] = 14;
      intArray0[7] = 1;
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '|', 16, 323);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      String string0 = StringUtils.join(byteArray0, '=', (int) (byte)106, (int) (byte)106);
      assertArrayEquals(new byte[] {(byte)106}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfAny("", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.trim("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.split(" ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[3] = false;
      String string2 = StringUtils.truncate("b$wy&:", (int) (byte)106);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("b$wy&:", string2);
      
      String string3 = StringUtils.stripAccents("*c'M");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("*c'M", string3);
      
      String string4 = StringUtils.abbreviate("", (-1), (-1));
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      
      int int2 = StringUtils.lastOrdinalIndexOf("{I?oAkkuE[2~j[R%olb", "", 3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(19, int2);
      
      String string5 = StringUtils.stripToEmpty("b$wy&:");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("b$wy&:", string5);
      
      String string6 = StringUtils.appendIfMissingIgnoreCase("", "*c'M", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string3));
      assertEquals("*c'M", string6);
      
      String string7 = StringUtils.leftPad("", 76);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertEquals("                                                                            ", string7);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("hF-u", ".VNQ0T6P>`x");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("hF-u", string1);
      
      String string2 = StringUtils.truncate("", 23, 23);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Search and Replace array lengths don't match: ", "*c'M", 15);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("*c'M");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("hF-u");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.LF;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\n", string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "hF-u", (CharSequence) "");
      assertEquals(4, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("hF-u");
      assertArrayEquals(new int[] {104, 70, 45, 117}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(intArray0);
      
      String string4 = StringUtils.center("Supplied value must be a valid byte literal between -32768 and 32767: [", 2297);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean2 = StringUtils.containsIgnoreCase(string4, "Search and Replace array lengths don't match: ");
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.stripStart("O0f", "hF-u");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("O0f", string5);
      
      String string6 = StringUtils.stripStart("JS9n", "L");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertEquals("JS9n", string6);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      String string0 = StringUtils.substringBefore("q", 850);
      assertNotNull(string0);
      assertEquals("q", string0);
      
      boolean boolean0 = StringUtils.isNumeric("q");
      assertFalse(boolean0);
      
      StringUtils.rightPad("q", 850, "q");
      StringUtils.isNumeric("q");
      StringUtils.substringBefore((String) null, "");
      StringUtils.substringBetween("<<k9`*Z1KT#5", "~b,\"~N2/S(O}lhg-", "<<k9`*Z1KT#5");
      StringUtils.indexOfAny((CharSequence) null, (String) null);
      char[] charArray0 = new char[0];
      StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      String string0 = StringUtils.removeEnd("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = new int[7];
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-880);
      String string1 = StringUtils.abbreviateMiddle("WKU}'{b&)yv ", "(F$LjQ+yQ|", 1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("WKU}'{b&)yv ", string1);
      
      String string2 = StringUtils.substringAfter("~`vxGOhcNnkz6q'nT negative", 13);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "(F$LjQ+yQ|", (char[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("WKU}'{b&)yv ", (String) null, false);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.substringBefore("WKU}'{b&)yv ", 0);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("WKU}'{b&)yv ", string3);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[1];
      CharBuffer charBuffer0 = StringUtils.firstNonEmpty(charBufferArray0);
      assertEquals(1, charBufferArray0.length);
      assertNull(charBuffer0);
      
      String string4 = StringUtils.leftPad("p{InCombiningDiacriticalMarks}+", 322, "WKU}'{b&)yv ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKUp{InCombiningDiacriticalMarks}+", string4);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = StringUtils.removeEnd("`]:qMn y$yI_}U=6", "!7tm']w9a>M`G;");
      assertNotNull(string0);
      assertEquals("`]:qMn y$yI_}U=6", string0);
      
      String string1 = StringUtils.defaultIfEmpty("`]:qMn y$yI_}U=6", "Object varargs must not be null");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("`]:qMn y$yI_}U=6", string1);
      
      String string2 = StringUtils.CR;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\r", string2);
      
      String string3 = StringUtils.abbreviate("`]:qMn y$yI_}U=6", "`]:qMn y$yI_}U=6", 232, (int) '<');
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("`]:qMn y$yI_}U=6", string3);
      
      char[] charArray0 = new char[17];
      charArray0[3] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = 'h';
      charArray0[6] = '<';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "`]:qMn y$yI_}U=6", charArray0);
      assertEquals(17, charArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.substringBetween("!7tm']w9a>M`G;", "Object varargs must not be null");
      assertNull(string4);
      
      String string5 = StringUtils.getDigits((String) null);
      assertNull(string5);
      
      String string6 = StringUtils.removePattern("`]:qMn y$yI_}U=6", "..");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "`]:qMn y$yI_}U=6");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare(" in an array of ", (String) null);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category1));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet1.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertTrue(enumSet0.equals((Object)enumSet1));
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-nDA8o<Ne(SE#l(|";
      stringArray0[1] = "-nDA8o<Ne(SE#l(|";
      stringArray0[2] = "-nDA8o<Ne(SE#l(|";
      stringArray0[3] = "-nDA8o<Ne(SE#l(|";
      stringArray0[4] = "-nDA8o<Ne(SE#l(|";
      stringArray0[5] = "-nDA8o<Ne(SE#l(|";
      stringArray0[6] = "-nDA8o<Ne(SE#l(|";
      stringArray0[7] = "-nDA8o<Ne(SE#l(|";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(8, stringArray0.length);
      assertNotNull(string0);
      assertEquals("-nDA8o<Ne(SE#l(|", string0);
      
      EnumSet<Locale.Category> enumSet2 = EnumSet.complementOf(enumSet0);
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet2.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotNull(enumSet2);
      assertTrue(enumSet0.contains(locale_Category1));
      assertFalse(enumSet2.contains(locale_Category1));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet0));
      
      Iterator<Locale.Category> iterator1 = enumSet2.iterator();
      assertEquals(1, enumSet0.size());
      assertEquals(1, enumSet2.size());
      assertNotSame(iterator1, iterator0);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(enumSet2, enumSet1);
      assertNotSame(enumSet2, enumSet0);
      assertNotNull(iterator1);
      assertTrue(enumSet0.contains(locale_Category1));
      assertFalse(enumSet2.contains(locale_Category1));
      assertFalse(iterator1.equals((Object)iterator0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet0.equals((Object)enumSet2));
      assertFalse(enumSet2.equals((Object)enumSet1));
      assertFalse(enumSet2.equals((Object)enumSet0));
      
      String string1 = StringUtils.join(iterator0, 'Y');
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet0, enumSet2);
      assertNotSame(iterator0, iterator1);
      assertNotNull(string1);
      assertTrue(enumSet0.contains(locale_Category1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet0.equals((Object)enumSet2));
      assertFalse(iterator0.equals((Object)iterator1));
      assertEquals("FORMAT", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "-nDA8o<Ne(SE#l(|", (char[]) null);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.strip("\r", "-nDA8o<Ne(SE#l(|");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\r", string2);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(8, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("-nDA8o<Ne(SE#l(|");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.join((double[]) null, 'q');
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      String string0 = StringUtils.substring("[", (-1217), (-1217));
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category1));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet1.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertTrue(enumSet0.equals((Object)enumSet1));
      
      String string1 = StringUtils.replaceOnce("", "", "[");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      boolean boolean0 = StringUtils.isWhitespace("[");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((byte[]) null, 'Y');
      assertNull(string2);
      
      String string3 = StringUtils.LF;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\n", string3);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "\n", (char[]) null);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.strip("3RH ", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("3RH ", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string5 = StringUtils.join((double[]) null, '+');
      assertNull(string5);
      
      String string6 = StringUtils.stripAccents("L@a|h63");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.replaceFirst("", "Bdbp?X", "L@a|h63");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertEquals("", string7);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "[", (CharSequence) null, (-1141));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean3 = StringUtils.isNumericSpace("L@a|h63");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string8 = StringUtils.replace("~`vxGOhc", (String) null, "p{InCombiningDiacriticalMarks}+", 89);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertEquals("~`vxGOhc", string8);
      
      boolean boolean4 = StringUtils.equalsAny("~`vxGOhc", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string9 = StringUtils.repeat("'q", "3RH ", 16);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertEquals("'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q", string9);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q3RH 'q", (CharSequence) "[");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(92, int2);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.trimToNull("");
      assertNull(string1);
      
      int int1 = StringUtils.indexOfAny(charSequenceArray0[1], charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category1, locale_Category0, locale_Category1, locale_Category1, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string2 = StringUtils.join(iterator0, 'b');
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(string2);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("FORMAT", string2);
      
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category2, locale_Category2, locale_Category0, locale_Category0, locale_Category2);
      assertEquals(2, enumSet1.size());
      assertNotSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(locale_Category0, locale_Category2);
      assertSame(locale_Category0, locale_Category1);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      boolean boolean1 = enumSet0.add(locale_Category3);
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_Category3, locale_Category0);
      assertSame(locale_Category3, locale_Category2);
      assertNotSame(locale_Category3, locale_Category1);
      assertNotSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category0, locale_Category3);
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category1, locale_Category3);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotSame(enumSet0, enumSet1);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(locale_Category3.equals((Object)locale_Category0));
      assertFalse(locale_Category3.equals((Object)locale_Category1));
      assertTrue(boolean1 == boolean0);
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category0.equals((Object)locale_Category3));
      assertFalse(locale_Category1.equals((Object)locale_Category3));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(boolean1);
      
      int int2 = StringUtils.length(charSequenceArray0[4]);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      int[] intArray0 = StringUtils.toCodePoints(charSequenceArray0[3]);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("", "LPLD,'}dX)[t|YNWb");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string3 = StringUtils.wrap("z~+!_Ec7 m", '7');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("7z~+!_Ec7 m7", string3);
      
      String string4 = StringUtils.appendIfMissingIgnoreCase("L@a|h63", "z~+!_Ec7 m", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      String string0 = StringUtils.upperCase("K'N\"/", (Locale) null);
      assertNotNull(string0);
      assertEquals("K'N\"/", string0);
      
      String string1 = StringUtils.lowerCase("Locale must not be null", (Locale) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("locale must not be null", string1);
      
      String string2 = StringUtils.abbreviate("K'N\"/", "", (-170), (-170));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("K'N\"/", string2);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)18;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte) (-61);
      byteArray0[5] = (byte)51;
      byteArray0[6] = (byte)127;
      byteArray0[7] = (byte)49;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      String string3 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {(byte)18, (byte)4, (byte)64, (byte)8, (byte) (-61), (byte)51, (byte)127, (byte)49}, byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals(8, byteArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("\u0012\u0004@\b\uFFFD31", string3);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "K'N\"/", (CharSequence) "\u0012\u0004@\b\uFFFD31");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "K'N\"/", 36, (int) (byte)127);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.center("\u0012\u0004@\b\uFFFD31", 982, (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       \u0012\u0004@\b\uFFFD31                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ", string4);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      String string0 = StringUtils.substring("[", (-1217), (-1217));
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet1.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      
      String string1 = StringUtils.replaceOnce("", "", "[");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      boolean boolean0 = StringUtils.isWhitespace("[");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((byte[]) null, 'Y');
      assertNull(string2);
      
      String string3 = StringUtils.capitalize("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      char[] charArray0 = new char[8];
      charArray0[0] = 'Y';
      charArray0[1] = 'H';
      charArray0[2] = 'Y';
      charArray0[3] = 'Y';
      charArray0[4] = 'H';
      charArray0[5] = 'H';
      charArray0[6] = 'Y';
      charArray0[7] = 'Y';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'Y', 'H', 'Y', 'Y', 'H', 'H', 'Y', 'Y'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare((String) null, "", false);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.removeEndIgnoreCase("i$`i", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("i$`i", string0);
      
      charSequenceArray0[0] = (CharSequence) "i$`i";
      String string1 = StringUtils.prependIfMissingIgnoreCase("~`vxGOhc", charSequenceArray0[0], charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("i$`i~`vxGOhc", string1);
      
      charSequenceArray0[1] = (CharSequence) "i$`i~`vxGOhc";
      String string2 = StringUtils.replacePattern("p{InCombiningDiacriticalMarks}+", "2,ik0n?HcBJ948", "i$`i");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      
      charSequenceArray0[2] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      String string3 = StringUtils.capitalize("i$`i");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("I$`i", string3);
      
      charSequenceArray0[3] = (CharSequence) "I$`i";
      String string4 = StringUtils.rightPad("#}cn", 84, 'E');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("#}cnEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", string4);
      
      charSequenceArray0[4] = (CharSequence) "#}cnEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE";
      String string5 = StringUtils.LF;
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("\n", string5);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("2/o]k6]G ^$\"6#", (String) null);
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string6 = StringUtils.repeat("#}cnEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", 84);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("', is neither of type Map.Entry nor an Array", (String) null, "m");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      String string1 = StringUtils.wrapIfMissing("', is neither of type Map.Entry nor an Array", (String) null);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      
      String string2 = StringUtils.substring("', is neither of type Map.Entry nor an Array", (-1176));
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
      
      boolean boolean0 = StringUtils.containsWhitespace("', is neither of type Map.Entry nor an Array");
      assertTrue(boolean0);
      
      String string3 = StringUtils.join((char[]) null, 'c', 5, 92);
      assertNull(string3);
      
      boolean boolean1 = StringUtils.startsWith((CharSequence) null, "m");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("#YQ2sCZ*Mt{\"9-P1", supplier0);
      assertNotNull(string0);
      assertEquals("#YQ2sCZ*Mt{\"9-P1", string0);
      
      String string1 = StringUtils.substringBetween("#YQ2sCZ*Mt{\"9-P1", (String) null, "#YQ2sCZ*Mt{\"9-P1");
      assertNull(string1);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase((CharSequence) null, (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.stripStart((String) null, "T|Wlb?? ?\",TmL)Q");
      assertNull(string2);
      
      boolean boolean2 = StringUtils.isNotBlank("#YQ2sCZ*Mt{\"9-P1");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", (String) null);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("offset cannot be negative", (String) null, 64);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("er)RFSH6; 4VtX{8", "*81|");
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(2, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      String string3 = StringUtils.stripToNull((String) null);
      assertNull(string3);
      
      String string4 = StringUtils.capitalize("");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = StringUtils.EMPTY;
      assertNotNull(string0);
      assertEquals("", string0);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string1 = StringUtils.stripToNull((String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, "?@;uN");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      assertFalse(vector0.contains("?@;uN"));
      
      String string1 = StringUtils.defaultIfEmpty("?@;uN", "]6lL\"");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("?@;uN", string1);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "]6lL\"");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("_", "L@a|h63");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      short[] shortArray0 = new short[6];
      shortArray0[0] = (short)4;
      shortArray0[1] = (short) (-1573);
      shortArray0[2] = (short) (-2335);
      shortArray0[3] = (short)2337;
      shortArray0[4] = (short) (-1956);
      shortArray0[5] = (short) (-1193);
      String string2 = StringUtils.join(shortArray0, '5', 2, (int) (short)4);
      assertArrayEquals(new short[] {(short)4, (short) (-1573), (short) (-2335), (short)2337, (short) (-1956), (short) (-1193)}, shortArray0);
      assertEquals(6, shortArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-233552337", string2);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = StringUtils.repeat("The String must not be empty", "Krgr{oX3D8J/}vQe", 411);
      assertNotNull(string0);
      
      String string1 = StringUtils.reverseDelimited("The String must not be empty", 'l');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The String must not be empty", string1);
      
      int int0 = StringUtils.compareIgnoreCase(string0, "Krgr{oX3D8J/}vQe", false);
      assertFalse(string0.equals((Object)string1));
      assertEquals(9, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Krgr{oX3D8J/}vQe";
      charSequenceArray0[1] = (CharSequence) "Krgr{oX3D8J/}vQe";
      charSequenceArray0[2] = (CharSequence) "The String must not be empty";
      charSequenceArray0[3] = (CharSequence) "The String must not be empty";
      charSequenceArray0[4] = (CharSequence) "Krgr{oX3D8J/}vQe";
      int int1 = StringUtils.lastIndexOfAny("Krgr{oX3D8J/}vQe", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      String string2 = locale0.getDisplayScript();
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        locale0.getUnicodeLocaleType("^#YQ2sCZ*Mt{\"9-P1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Ill-formed Unicode locale key: ^#YQ2sCZ*Mt{\"9-P1
         //
         verifyException("java.util.Locale", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(21);
      assertEquals(0, charBuffer0.position());
      assertEquals(21, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.remaining());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(21, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = stack0.add(charBuffer0);
      assertFalse(stack0.isEmpty());
      assertEquals("[\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000]", stack0.toString());
      assertEquals(1, stack0.size());
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(21, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.remaining());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(21, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(stack0.contains(charBuffer0));
      assertTrue(boolean0);
      
      boolean boolean1 = stack0.add(charBuffer0);
      assertFalse(stack0.isEmpty());
      assertEquals("[\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000, \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(21, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.remaining());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(21, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(stack0.contains(charBuffer0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = stack0.add(charBuffer0);
      assertFalse(stack0.isEmpty());
      assertEquals("[\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000, \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000, \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(3, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals(0, charBuffer0.position());
      assertEquals(21, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.remaining());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(21, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(stack0.contains(charBuffer0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string0 = StringUtils.join((List<?>) stack0, ')', 8192, 8192);
      assertFalse(stack0.isEmpty());
      assertEquals("[\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000, \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000, \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000]", stack0.toString());
      assertFalse(stack0.empty());
      assertEquals(3, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(string0);
      assertTrue(stack0.contains(charBuffer0));
      assertEquals("", string0);
      
      boolean boolean3 = StringUtils.isNumericSpace("");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      String[] stringArray0 = StringUtils.split(";7Y$;SR]s0yo!D/", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean4 = StringUtils.equals((CharSequence) ";7Y$;SR]s0yo!D/", (CharSequence) charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(21, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.remaining());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(21, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Invalid locale format: ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Invalid locale format: ");
      assertEquals(23, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(23, charBuffer0.remaining());
      assertEquals(23, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(23, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("Invalid locale format: ", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = stack0.add(charBuffer0);
      assertFalse(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[Invalid locale format: ]", stack0.toString());
      assertEquals(23, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(23, charBuffer0.remaining());
      assertEquals(23, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(23, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("Invalid locale format: ", charBuffer0.toString());
      assertTrue(stack0.contains(charBuffer0));
      assertTrue(boolean0);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.leftPad("Invalid locale format: ", 8192);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(string0, charBuffer0);
      assertEquals(23, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(23, charBuffer0.remaining());
      assertEquals(23, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(23, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("Invalid locale format: ", charBuffer0.toString());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "Invalid locale format: ", (CharSequence) "Invalid locale format: ");
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isNumericSpace(string0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.split(string0, string0);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean3 = StringUtils.equals((CharSequence) string0, (CharSequence) charBuffer0);
      assertEquals(23, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertEquals(23, charBuffer0.remaining());
      assertEquals(23, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(23, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals("Invalid locale format: ", charBuffer0.toString());
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("B,");
      assertNotNull(string0);
      assertEquals("B,", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("B,");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "B,", 2147483645);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrapIfMissing("Ds{*fA", 'W');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("WDs{*fAW", string1);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("#YQ2sCZ*Mt{\"9-P1", supplier0);
      assertNotNull(string0);
      assertEquals("#YQ2sCZ*Mt{\"9-P1", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "#YQ2sCZ*Mt{\"9-P1", '\\');
      assertEquals(0, int0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '\\';
      charArray0[1] = '\\';
      charArray0[2] = '\\';
      charArray0[3] = '\\';
      charArray0[4] = '\\';
      int int1 = StringUtils.indexOfAny((CharSequence) "#YQ2sCZ*Mt{\"9-P1", charArray0);
      assertArrayEquals(new char[] {'\\', '\\', '\\', '\\', '\\', '\u0000'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.strip("}`v5X~g@:%8", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("}`v5X~g@:%8", string1);
      
      boolean boolean1 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("}`v5X~g@:%8");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.join((double[]) null, '+');
      assertNull(string2);
      
      String string3 = StringUtils.stripAccents("}`v5X~g@:%8");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("}`v5X~g@:%8", string3);
      
      String string4 = StringUtils.replaceFirst((String) null, "#YQ2sCZ*Mt{\"9-P1", "#YQ2sCZ*Mt{\"9-P1");
      assertNull(string4);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-1));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      boolean boolean3 = StringUtils.isNumericSpace("#YQ2sCZ*Mt{\"9-P1");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Invalid locale format: ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.replaceChars("Invalid locale format: ", ' ', ' ');
      assertNotNull(string0);
      assertEquals("Invalid locale format: ", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Invalid locale format: ", "Invalid locale format: ");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Invalid locale format: ");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.isNumericSpace("Invalid locale format: ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L";
      stringArray0[1] = "L";
      stringArray0[2] = "L";
      String string0 = StringUtils.join((byte[]) null, 'B');
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      char[] charArray0 = new char[9];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      charArray0[2] = 'B';
      charArray0[3] = 'j';
      charArray0[4] = 'B';
      charArray0[5] = 'B';
      charArray0[6] = 'B';
      charArray0[7] = 'B';
      charArray0[8] = 'B';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'B', 'B', 'B', 'j', 'B', 'B', 'B', 'B', 'B'}, charArray0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("BBBjBBBBB", charBuffer0.toString());
      assertEquals(9, charBuffer0.limit());
      assertEquals(9, charBuffer0.length());
      assertEquals(9, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charArray0.length);
      assertNotNull(charBuffer0);
      
      charSequenceArray0[0] = (CharSequence) charBuffer0;
      charSequenceArray0[1] = (CharSequence) "L";
      String string1 = StringUtils.removeStart((String) null, "L");
      assertNull(string1);
      
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertEquals(0, int0);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(charBuffer0));
      
      ArrayList<CharBuffer> arrayList1 = new ArrayList<CharBuffer>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains(charBuffer0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      String string2 = StringUtils.join((List<?>) arrayList1, "Jyx}DPF:md*2sc_Lp@^", 2, (-66));
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotSame(arrayList1, arrayList0);
      assertNotNull(string2);
      assertFalse(arrayList1.contains(charBuffer0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = StringUtils.substring("[", (-1217), (-1217));
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet1.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      
      String string1 = StringUtils.replaceOnce("", "", "[");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      boolean boolean0 = StringUtils.isWhitespace("[");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((byte[]) null, 'Y');
      assertNull(string2);
      
      String string3 = StringUtils.capitalize("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      String string4 = StringUtils.leftPad("", (-1217), "");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      boolean boolean1 = treeSet0.add("");
      assertTrue(treeSet0.contains(""));
      assertFalse(treeSet0.contains("["));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.mid("Invalid locale format: ", 10, 10);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("cale forma", string5);
      
      String string6 = StringUtils.removeAll("KT=.N", "");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("KT=.N", string6);
      
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[2], charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string7 = StringUtils.removeEndIgnoreCase("", "object");
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      String string0 = StringUtils.substring("[", (-1217), (-1217));
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string1 = StringUtils.replaceOnce("", "", "[");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      boolean boolean0 = StringUtils.isWhitespace("[");
      assertFalse(boolean0);
      
      String string2 = StringUtils.capitalize("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.leftPad("", (-1217), "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("["));
      
      boolean boolean1 = treeSet0.add("");
      assertFalse(treeSet0.contains("["));
      assertTrue(treeSet0.contains(""));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.mid("Invalid locale format: ", 10, 10);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("cale forma", string4);
      
      String string5 = StringUtils.removeAll("KT=.N", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("KT=.N", string5);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("V");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[1] = "K'N\"/";
      String[] stringArray2 = StringUtils.substringsBetween("K'N\"/", "K'N\"/", "V");
      assertNull(stringArray2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable(stringArray1[3]);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[2];
      String string0 = StringUtils.reverse("K'N\"/");
      assertNotNull(string0);
      assertEquals("/\"N'K", string0);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("/\"N'K", "K'N\"/");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string1 = StringUtils.replace("', is neither of type Map.Entry nor an Array", "K'N\"/", "/\"N'K", 2543);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("!7tm']w9a>M`G;", "'b0_mEjp", "L>WJz|`");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = StringUtils.substringAfter("K'N\"/", "Index: ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceFirst("K'N\"/", "Threshold must not be negativez*qR0fkO", "2nnZ4");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("K'N\"/", string1);
      
      String string2 = StringUtils.substringBeforeLast("K'N\"/", "org.apache.commons.lang3.Charsets");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("K'N\"/", string2);
      
      String string3 = StringUtils.leftPad("Locale must not be null", 26);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("   Locale must not be null", string3);
      
      String string4 = StringUtils.abbreviate("negative", "9yiggd+un0", 0, 26);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("negative", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string5 = StringUtils.swapCase("fdx0/f^fE-i");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("FDX0/F^Fe-I", string5);
      
      String[] stringArray0 = StringUtils.substringsBetween("negative", "Index: ", "', is neither of type Map.Entry nor an Array");
      assertNull(stringArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("...", charset0);
      assertArrayEquals(new byte[] {(byte)46, (byte)46, (byte)46}, byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals(3, byteArray0.length);
      assertNotNull(byteArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", 'u');
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("i$`i");
      assertNotNull(string0);
      assertEquals("i$`i", string0);
      
      String string1 = StringUtils.unwrap("i$`i", "hF-u");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("i$`i", string1);
      
      String string2 = StringUtils.truncate(".VNQ0T6P>`x", 23, 23);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", ".VNQ0T6P>`x", 76);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("*c'M");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(".VNQ0T6P>`x");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.trimToNull("g%*]FJW:8c$`OdQ{>];O0");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("g%*]FJW:8c$`OdQ{>];O0", string3);
      
      String string4 = StringUtils.substringBeforeLast("comparator", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("comparator", string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ".VNQ0T6P>`x", (CharSequence) "comparator");
      assertEquals(11, int0);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, "g%*]FJW:8c$`OdQ{>];O0");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("=8`4XwRr,HfV\"g2&$", " ");
      assertNotNull(string0);
      assertEquals(" =8`4XwRr,HfV\"g2&$ ", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance(" =8`4XwRr,HfV\"g2&$ ", "=8`4XwRr,HfV\"g2&$");
      assertEquals(0.96, double0, 0.01);
      
      boolean boolean0 = StringUtils.isAlpha(" =8`4XwRr,HfV\"g2&$ ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      String string0 = StringUtils.upperCase("=8`4XwRr,HfV\"g2&$");
      assertNotNull(string0);
      assertEquals("=8`4XWRR,HFV\"G2&$", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("=8`4XWRR,HFV\"G2&$", "=8`4XwRr,HfV\"g2&$");
      assertEquals(0.89, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = StringUtils.overlay("R g!uKRu ghqx#hq#!u1", "R g!uKRu ghqx#hq#!u1", 0, 0);
      assertNotNull(string0);
      assertEquals("R g!uKRu ghqx#hq#!u1R g!uKRu ghqx#hq#!u1", string0);
      
      String string1 = StringUtils.replace("Strings must not be null", "", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "R g!uKRu ghqx#hq#!u1R g!uKRu ghqx#hq#!u1", (CharSequence) "Strings must not be null");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substring("Strings must not be null", 2029, 2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("R g!uKRu ghqx#hq#!u1", '7');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("7R g!uKRu ghqx#hq#!u17", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "R g!uKRu ghqx#hq#!u1";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "R g!uKRu ghqx#hq#!u1R g!uKRu ghqx#hq#!u1";
      String string4 = StringUtils.chomp(" vs ", "negative~`vxGOhcNnkz6q'nT ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(" vs ", string4);
      
      charSequenceArray0[3] = (CharSequence) " vs ";
      charSequenceArray0[4] = (CharSequence) "Strings must not be null";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "Strings must not be null";
      charSequenceArray0[7] = (CharSequence) "R g!uKRu ghqx#hq#!u1R g!uKRu ghqx#hq#!u1";
      String string5 = StringUtils.appendIfMissingIgnoreCase("]LYg$yxA", "Strings must not be null", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("]LYg$yxA", string5);
      
      double double0 = StringUtils.getJaroWinklerDistance(" vs ", "Strings must not be null");
      assertEquals(0.51, double0, 0.01);
      
      String string6 = StringUtils.abbreviateMiddle((String) null, "u!y0w'}l#gr_wMinimum abbreviation width with offset is %d", 0);
      assertNull(string6);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", charSequenceArray0[2], 2);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L";
      stringArray0[1] = "L";
      stringArray0[3] = "L";
      stringArray0[3] = "L";
      String string0 = StringUtils.leftPad("", 2114);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) stringArray0[2], (CharSequence) "L");
      assertEquals(4, stringArray0.length);
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)90;
      shortArray0[1] = (short)1444;
      shortArray0[2] = (short)90;
      shortArray0[3] = (short) (-324);
      shortArray0[4] = (short)31;
      shortArray0[5] = (short)19;
      shortArray0[6] = (short)8192;
      String string1 = StringUtils.join(shortArray0, ';');
      assertArrayEquals(new short[] {(short)90, (short)1444, (short)90, (short) (-324), (short)31, (short)19, (short)8192}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("90;1444;90;-324;31;19;8192", string1);
      
      String string2 = StringUtils.repeat("L", "90;1444;90;-324;31;19;8192", (int) (short)1444);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeStart("", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.capitalize((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) "Object varargs must not be null");
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) "Object varargs must not be null", 1421, 1421);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.center("dHpfV-~|om\"a`(Se!", (-458), "*D4lEFlU");
      assertNotNull(string0);
      assertEquals("dHpfV-~|om\"a`(Se!", string0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "The Array must not be null");
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = ':';
      charArray0[2] = 'u';
      charArray0[3] = 'L';
      charArray0[4] = '!';
      charArray0[5] = '0';
      charArray0[6] = 'q';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'t', ':', 'u', 'L', '!', '0', 'q'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.strip("The Array must not be null", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The Array must not be null", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("The Array must not be null");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.join((double[]) null, '!');
      assertNull(string2);
      
      int int1 = StringUtils.compare((String) null, "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      String string0 = StringUtils.rightPad("O4Wyv<v", 0, "");
      assertNotNull(string0);
      assertEquals("O4Wyv<v", string0);
      
      String string1 = StringUtils.rotate("O4Wyv<v", 0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("O4Wyv<v", string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '/';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("O4Wyv<v", "1(ctXP", "O4Wyv<v");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("O4Wyv<v", string2);
      
      String string3 = StringUtils.abbreviate("", 0, 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare((String) null, "", false);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = StringUtils.replace("3[Y>:<}+z=\"8", "3[Y>:<}+z=\"8", "3[Y>:<}+z=\"8", 9);
      assertNotNull(string0);
      assertEquals("3[Y>:<}+z=\"8", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = '!';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "3[Y>:<}+z=\"8", charArray0);
      assertArrayEquals(new char[] {'7', '!'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("3[Y>:<}+z=\"8"));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "3[Y>:<}+z=\"8", charArray0);
      assertArrayEquals(new char[] {'7', '!'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compare((String) null, ".df", true);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean1 = StringUtils.isAllUpperCase(".df");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("-7K?Wf`#_`", "-7K?Wf`#_`");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((short[]) null, 'X', 9, (-1));
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      String string2 = StringUtils.leftPad((String) null, 1497);
      assertNull(string2);
      
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.chomp("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("}");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfterLast("null/empty items", " has no clone method");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.right("5F:D34SA.II\")^P", 237);
      assertNotNull(string0);
      assertEquals("5F:D34SA.II\")^P", string0);
      
      charSequenceArray0[0] = (CharSequence) "5F:D34SA.II\")^P";
      String string1 = StringUtils.defaultString("5F:D34SA.II\")^P");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("5F:D34SA.II\")^P", string1);
      
      charSequenceArray0[1] = (CharSequence) "5F:D34SA.II\")^P";
      String string2 = StringUtils.mid("5F:D34SA.II\")^P", 1263, 1263);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      charSequenceArray0[2] = (CharSequence) "";
      CharSequence charSequence0 = StringUtils.firstNonEmpty(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string2));
      assertTrue(charSequence0.equals((Object)string1));
      assertEquals("5F:D34SA.II\")^P", charSequence0);
      
      charSequenceArray0[3] = (CharSequence) "5F:D34SA.II\")^P";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.leftPad("kz6q'nT ", 114, '{');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{kz6q'nT ", string3);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase(charSequenceArray0[0], "");
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      char[] charArray0 = new char[0];
      String string4 = StringUtils.join(charArray0, 'V');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      boolean boolean3 = StringUtils.isNumeric("5F:D34SA.II\")^P");
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string5 = StringUtils.EMPTY;
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)charSequence0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
      
      boolean boolean4 = StringUtils.isNumeric("");
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      String string0 = StringUtils.substringBefore("q", 850);
      assertNotNull(string0);
      assertEquals("q", string0);
      
      boolean boolean0 = StringUtils.isNumeric("q");
      assertFalse(boolean0);
      
      StringUtils.rightPad("q", 850, "q");
      StringUtils.isNumeric("q");
      StringUtils.substringBefore((String) null, "");
      StringUtils.substringBetween("<<k9`*Z1KT#5", "~b,\"~N2/S(O}lhg-", "<<k9`*Z1KT#5");
      StringUtils.indexOfAny((CharSequence) null, (String) null);
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "q";
      charSequenceArray0[1] = (CharSequence) "q";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq";
      charSequenceArray0[4] = (CharSequence) "<<k9`*Z1KT#5";
      charSequenceArray0[5] = (CharSequence) "<<k9`*Z1KT#5";
      charSequenceArray0[6] = (CharSequence) "qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq";
      charSequenceArray0[7] = (CharSequence) null;
      charSequenceArray0[8] = (CharSequence) "";
      StringUtils.containsAnyIgnoreCase("~b,\"~N2/S(O}lhg-", charSequenceArray0);
      StringUtils.removeIgnoreCase((String) null, "?Fj9k");
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      String string0 = StringUtils.truncate("", 713);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", "!<}ZZ8U%1OvXka}/x");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("", "");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("!<}ZZ8U%1OvXka}/x", (String) null, (-3331));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String[] stringArray0 = new String[2];
      stringArray0[1] = "3\"6";
      boolean boolean0 = StringUtils.containsIgnoreCase("81NGpx&]R", charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      String string0 = StringUtils.overlay("ZMC_[", "ZMC_[", 2155, 7);
      assertNotNull(string0);
      assertEquals("ZMC_[ZMC_[", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("ZMC_["));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.contains("ZMC_["));
      
      Stream<Object> stream0 = linkedHashSet0.stream();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(stream0);
      assertFalse(linkedHashSet0.contains("ZMC_["));
      
      String string1 = StringUtils.join(iterator0, (String) null);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(string1);
      assertFalse(linkedHashSet0.contains("ZMC_["));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "ZMC_[";
      charSequenceArray0[2] = (CharSequence) "ZMC_[ZMC_[";
      charSequenceArray0[3] = (CharSequence) "ZMC_[";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("ZMC_[ZMC_[", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, (CharSequence) "");
      assertEquals(0, int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("ZMC_[ZMC_[");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.toRootLowerCase("1!3>Vd,{(1|Vw");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("1!3>vd,{(1|vw", string2);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      assertFalse(vector0.contains("ZMC_["));
      
      boolean boolean2 = linkedHashSet0.add("1!3>vd,{(1|vw");
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(linkedHashSet0.contains("1!3>vd,{(1|vw"));
      assertFalse(linkedHashSet0.contains("ZMC_["));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string3 = StringUtils.join((List<?>) vector0, '`', 2155, (-2146));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(string3);
      assertFalse(vector0.contains(2155));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      int int1 = StringUtils.countMatches((CharSequence) "1!3>vd,{(1|vw", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) "1!3>Vd,{(1|Vw");
      assertEquals(4, charSequenceArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(13, int2);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = '`';
      charArray0[5] = '`';
      charArray0[6] = '`';
      charArray0[7] = '`';
      charArray0[8] = '`';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'H', (-2146), (-444));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2146
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      String string0 = StringUtils.overlay("Ru ghqx#!uK1", "Ru ghqx#!uK1", 0, (-999));
      assertNotNull(string0);
      assertEquals("Ru ghqx#!uK1Ru ghqx#!uK1", string0);
      
      String string1 = StringUtils.replace("Strings must not be null", "", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Ru ghqx#!uK1Ru ghqx#!uK1", (CharSequence) "Strings must not be null");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.trimToNull("LPLD,'}dX)[t|YNWb");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("LPLD,'}dX)[t|YNWb", string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Ru ghqx#!uK1", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string3 = StringUtils.join(iterator0, ')');
      assertEquals(1, enumSet0.size());
      assertNotNull(string3);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("FORMAT", string3);
      
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category1);
      assertEquals(2, enumSet1.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category0));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(enumSet1.equals((Object)enumSet0));
      
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      boolean boolean1 = enumSet1.add(locale_Category2);
      assertEquals(2, enumSet1.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category2);
      assertSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(locale_Category2, locale_Category0);
      assertSame(locale_Category2, locale_Category1);
      assertTrue(enumSet1.contains(locale_Category2));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = StringUtils.length("Strings must not be null");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(24, int2);
      
      int[] intArray0 = StringUtils.toCodePoints("Strings must not be null");
      assertEquals(24, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("LPLD,'}dX)[t|YNWb", "");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string4 = StringUtils.wrap("", ')');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      CharSequence[] charSequenceArray1 = new CharSequence[7];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "Ru ghqx#!uK1";
      charSequenceArray1[1] = (CharSequence) "";
      charSequenceArray1[2] = (CharSequence) "FORMAT";
      charSequenceArray1[1] = (CharSequence) "Ru ghqx#!uK1Ru ghqx#!uK1";
      charSequenceArray1[4] = (CharSequence) "";
      charSequenceArray1[1] = (CharSequence) "";
      charSequenceArray1[6] = (CharSequence) "Ru ghqx#!uK1Ru ghqx#!uK1";
      String string5 = StringUtils.appendIfMissingIgnoreCase("", "Ru ghqx#!uK1", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(7, charSequenceArray1.length);
      assertNotNull(string5);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      String string6 = StringUtils.abbreviate("", 834);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.endsWith("", (CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-1822), (-1822));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("", (String) null, true);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) null, "");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray0 = new String[5];
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = null;
      String[] stringArray1 = new String[8];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = null;
      stringArray1[1] = "";
      stringArray1[2] = null;
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "";
      stringArray1[6] = "";
      stringArray1[7] = "";
      String string1 = StringUtils.leftPad("", 1, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" ", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("i$`i");
      assertNotNull(string0);
      assertEquals("i$`i", string0);
      
      String string1 = StringUtils.unwrap("i$`i", "hF-u");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("i$`i", string1);
      
      String string2 = StringUtils.trimToEmpty("hF-u");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("hF-u", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("hF-u", ".VNQ0T6P>`x", 76);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric("*c'M");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(".VNQ0T6P>`x");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.substringBeforeLast("o5omparftzr", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("o5omparftzr", string3);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "i$`i");
      assertEquals((-1), int0);
      
      Locale locale0 = new Locale("hF-u", "!7tm']w9a>M`G;", "i$`i");
      assertEquals("hf-u_!7TM']W9A>M`G;_i$`i", locale0.toString());
      assertEquals("hf-u", locale0.getLanguage());
      assertEquals("i$`i", locale0.getVariant());
      assertEquals("!7TM']W9A>M`G;", locale0.getCountry());
      assertNotNull(locale0);
      
      String[] stringArray1 = Locale.getISOLanguages();
      assertNotSame(stringArray1, stringArray0);
      assertEquals(188, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance((CharSequence) null, "Aborting to protect against StackOverflowError - output of one loop is the input of another", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbrevTation width is %Q", '#');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) '#';
      intArray0[6] = (int) '#';
      String string0 = StringUtils.prependIfMissingIgnoreCase("Minimum abbrevTation width is %Q", "Minimum abbrevTation width is %Q", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Minimum abbrevTation width is %Q", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Minimum abbrevTation width is %Q", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeAll("maxWith cannot be negative", "v=lMewCTb0z$S9&Y");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string1);
      
      int int0 = StringUtils.lastIndexOfAny("maxWith cannot be negative", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.removeStartIgnoreCase("]", "Minimum abbrevTation width is %Q");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("]", string2);
      
      String string3 = StringUtils.leftPad("maxWith cannot be negative", (-243), "org.apache.commons.lang3.Charsets");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string3);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) hashSet0);
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string0 = StringUtils.deleteWhitespace("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", 'i');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceAll("", "", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.trimToEmpty("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.rightPad("", 0, "");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.rotate("", 905);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      
      String string6 = StringUtils.upperCase("");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string7 = StringUtils.stripEnd("", "");
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertEquals("", string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string8 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string8);
      
      String string9 = StringUtils.removeStart("W:8c$`OdQ{>];O0", "g%*]FJ");
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertEquals("W:8c$`OdQ{>];O0", string9);
      
      String string10 = StringUtils.deleteWhitespace("");
      assertNotNull(string10);
      assertTrue(string10.equals((Object)string2));
      assertTrue(string10.equals((Object)string4));
      assertTrue(string10.equals((Object)string5));
      assertTrue(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertTrue(string10.equals((Object)string7));
      assertTrue(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string1));
      assertEquals("", string10);
      
      int int0 = StringUtils.indexOf((CharSequence) "81NGpx&", (CharSequence) "W:8c$`OdQ{>];O0", 4457);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "", 'i');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = '`';
      charArray0[2] = '{';
      String string11 = StringUtils.join(charArray0, '7');
      assertArrayEquals(new char[] {'i', '`', '{'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string0));
      assertFalse(string11.equals((Object)string10));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string4));
      assertFalse(string11.equals((Object)string5));
      assertFalse(string11.equals((Object)string1));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string7));
      assertEquals("i7`7{", string11);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      String string0 = StringUtils.removeEnd("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviateMiddle("", "", (-880));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.rightPad("VD(", (-880), "T?@;uN");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("VD(", string2);
      
      String string3 = StringUtils.replace("", "VD(", "L6<d]3EH>k=E39", 32);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("", "^#H:}D?");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "VD(", (-880));
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "WKU}'{b&)yv ";
      stringArray0[1] = "fLhNt! hp";
      String string5 = StringUtils.difference("", "");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      
      Locale locale0 = new Locale("fLhNt! hp");
      assertEquals("flhnt! hp", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("flhnt! hp", locale0.toString());
      assertNotNull(locale0);
      
      String[] stringArray1 = Locale.getISOCountries();
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.getFuzzyDistance("WKU}'{b&)yv ", "HPuD", locale0);
      assertEquals("flhnt! hp", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("flhnt! hp", locale0.toString());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Locale locale1 = Locale.UK;
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      String string6 = StringUtils.upperCase(">8R2BGO9Jz@@lUvX", locale1);
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GB", locale1.getCountry());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("GBR", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertNotNull(string6);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals(">8R2BGO9JZ@@LUVX", string6);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Iterator<String> iterator0 = hashSet0.iterator();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(iterator0);
      
      byte[] byteArray0 = new byte[0];
      String string0 = StringUtils.join(byteArray0, 'l', 126, 1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.reverseDelimited("", '1');
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad(";[n-EPLbcGV{CS&IqO4a)jU6UYbpK4d", 3, ')');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(";[n-EPLbcGV{CS&IqO4a)jU6UYbpK4d", string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 3);
      assertEquals(0, int0);
      
      Integer integer0 = new Integer((byte) (-28));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-28), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = StringUtils.overlay("1", "1", 0, 0);
      assertNotNull(string0);
      assertEquals("11", string0);
      
      String string1 = StringUtils.replace("1", "", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "11", (CharSequence) "1");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.trimToNull("LPLD,'}dX)[t|YNWb");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("LPLD,'}dX)[t|YNWb", string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "1", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string3 = StringUtils.join(iterator0, ')');
      assertEquals(1, enumSet0.size());
      assertNotNull(string3);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("FORMAT", string3);
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      assertEquals(1, enumSet1.size());
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      boolean boolean1 = enumSet1.add(locale_Category1);
      assertEquals(2, enumSet1.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(locale_Category1, locale_Category0);
      assertTrue(enumSet1.contains(locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = StringUtils.compare("LPLD,'}dX)[t|YNWb", "LPLD,'}dX)[t|YNWb", true);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      int[] intArray0 = StringUtils.toCodePoints("1");
      assertArrayEquals(new int[] {49}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("LPLD,'}dX)[t|YNWb", "");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string4 = StringUtils.abbreviate("LPLD,'}dX)[t|YNWb", "", 10, 10);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("LPLD,'}dX)", string4);
      
      boolean boolean4 = StringUtils.isMixedCase("FORMAT");
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isNotEmpty("11");
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = StringUtils.abbreviate("org.apache.commons.lan#(bk.", 21, 21);
      assertNotNull(string0);
      assertEquals("...e.commons.lan#(bk.", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "...e.commons.lan#(bk.";
      stringArray0[1] = "org.apache.commons.lan#(bk.";
      stringArray0[2] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string1 = StringUtils.replaceEachRepeatedly("clone", stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("clone", string1);
      
      String string2 = StringUtils.replaceChars("clone", "org.apache.commons.lan#(bk.", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.rotate((String) null, (-3743));
      assertNull(string3);
      
      String string4 = StringUtils.difference("PB 1Mf", (String) null);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("PB 1Mf", string4);
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("', is neither of type Map.Entry nor an Array", (String) null, "m");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      String string1 = StringUtils.replacePattern("', is neither of type Map.Entry nor an Array", (String) null, "m");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      
      String string2 = StringUtils.center("', is neither of type Map.Entry nor an Array", (-1047), '\"');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
      
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      assertEquals(2, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(2, enumSet0.size());
      assertNotNull(iterator0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean0 = enumSet0.add(locale_Category0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(boolean0);
      
      String string3 = StringUtils.join(iterator0, "");
      assertEquals(2, enumSet0.size());
      assertNotNull(string3);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("DISPLAYFORMAT", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("m", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.leftPad(", '", (-554), "Exception cloning Cloneable type ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals(", '", string4);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.removeIgnoreCase(">s}mQnk?vyd#9JruDX", "Object varargs must not be null");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals(">s}mQnk?vyd#9JruDX", string5);
      
      String string6 = StringUtils.joinWith("', is neither of type Map.Entry nor an Array", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      String string7 = StringUtils.join((Object[]) charSequenceArray0, '\"', 281, (-169));
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) ", '");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.stripStart("[b/!%,8TIPNyW", ")@.yIwZ?");
      assertNotNull(string0);
      assertEquals("[b/!%,8TIPNyW", string0);
      
      charSequenceArray0[0] = (CharSequence) "[b/!%,8TIPNyW";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.stripToNull("[b/!%,8TIPNyW");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("[b/!%,8TIPNyW", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "[b/!%,8TIPNyW", 22, 8192);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("[b/!%,8TIPNyW");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.prependIfMissing("[b/!%,8TIPNyW", "[b/!%,8TIPNyW", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("[b/!%,8TIPNyW", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("[b/!%,8TIPNyW", "[b/!%,8TIPNyW", 10);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.rotate((String) null, Integer.MAX_VALUE);
      assertNull(string3);
      
      boolean boolean2 = StringUtils.isAlphanumeric((CharSequence) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAlphanumericSpace(")@.yIwZ?");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string4 = StringUtils.trimToNull((String) null);
      assertNull(string4);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.trim("ARPm)1Np^_WIBy");
      assertNotNull(string0);
      assertEquals("ARPm)1Np^_WIBy", string0);
      
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("ARPm)1Np^_WIBy");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.substringAfterLast("ARPm)1Np^_WIBy", "ARPm)1Np^_WIBy");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringAfterLast("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 0, 108);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.ordinalIndexOf(charSequenceArray0[0], "", (-1));
      assertEquals(1, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-26);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)119;
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string2 = StringUtils.wrap("", 'H');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrapIfMissing("MRd'mU?Bk5lioF;?(M]", 'O');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("OMRd'mU?Bk5lioF;?(M]O", string3);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "OMRd'mU?Bk5lioF;?(M]O", (CharSequence) "OMRd'mU?Bk5lioF;?(M]O");
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
      
      String string4 = StringUtils.join((boolean[]) null, '$', (-32768), 322);
      assertNull(string4);
      
      int int4 = StringUtils.lastIndexOf(charSequenceArray0[0], (CharSequence) null, (int) (byte) (-26));
      assertEquals(1, charSequenceArray0.length);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertEquals((-1), int4);
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      String string0 = StringUtils.remove("Cannot store ", "Cannot store ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isBlank("Cannot store ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfter("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "Cannot store ";
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "";
      String string3 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(string3);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string4 = locale0.getDisplayCountry(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      Locale.setDefault(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      int int0 = StringUtils.getFuzzyDistance("Cannot store ", "", locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, int0);
      
      String string5 = StringUtils.left("'X;UZJ", 426);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("'X;UZJ", string5);
      
      String string6 = StringUtils.normalizeSpace("");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string4));
      assertEquals("", string6);
      
      String string7 = StringUtils.join((boolean[]) null, 'u', 0, 253);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.stripStart("[b/!%,8TIPNyW", ")@.yIwZ?");
      assertNotNull(string0);
      assertEquals("[b/!%,8TIPNyW", string0);
      
      charSequenceArray0[0] = (CharSequence) "[b/!%,8TIPNyW";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.stripToNull("[b/!%,8TIPNyW");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("[b/!%,8TIPNyW", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "[b/!%,8TIPNyW", 40, 8192);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("[b/!%,8TIPNyW");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.prependIfMissing("[b/!%,8TIPNyW", "[b/!%,8TIPNyW", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("[b/!%,8TIPNyW", string2);
      
      boolean[] booleanArray0 = new boolean[0];
      String string3 = StringUtils.join(booleanArray0, '~');
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int1 = StringUtils.compare("Cannot store ", "_5sW%k7", false);
      assertFalse(int1 == int0);
      assertEquals((-28), int1);
      
      boolean boolean2 = StringUtils.endsWithAny(")@.yIwZ?", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.rightPad("*N,2F", (-1888));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("*N,2F", string4);
      
      boolean boolean3 = StringUtils.isAllLowerCase("*N,2F");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string5 = StringUtils.abbreviateMiddle("*N,2F", "[b/!%,8TIPNyW", (-1));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("*N,2F", string5);
      
      String string6 = StringUtils.capitalize("[b/!%,8TIPNyW");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertEquals("[b/!%,8TIPNyW", string6);
      
      String string7 = StringUtils.uncapitalize(")@.yIwZ?");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals(")@.yIwZ?", string7);
      
      int int2 = StringUtils.compareIgnoreCase("+6^]", ")@.yIwZ?", false);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, int2);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[1] = "L";
      stringArray0[2] = "L";
      stringArray0[3] = "L";
      String string0 = StringUtils.abbreviateMiddle("L", "L", 1);
      assertNotNull(string0);
      assertEquals("L", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "L", 1);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfterLast("L", "Locale must not be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object0));
      assertFalse(object2.equals((Object)object1));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object2));
      assertFalse(object4.equals((Object)object3));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object0));
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object2));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object4));
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object5));
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertNotNull(object7);
      assertFalse(object7.equals((Object)object5));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object1));
      
      objectArray0[7] = object7;
      String string0 = StringUtils.join(objectArray0, '4');
      assertEquals(8, objectArray0.length);
      assertNotNull(string0);
      
      int int0 = (-1600);
      int int1 = StringUtils.lastIndexOf((CharSequence) "java.lang.Object@738641d54java.lang.Object@3f13c4604java.lang.Object@23f2461c4java.lang.Object@4161441d4java.lang.Object@a83d0d4java.lang.Object@2139d9bc4java.lang.Object@104ab9214java.lang.Object@5bc04699", (-1600));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string1 = StringUtils.wrapIfMissing("\n", "maxWith cannot be negative");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("maxWith cannot be negative\nmaxWith cannot be negative", string1);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "java.lang.Object@738641d54java.lang.Object@3f13c4604java.lang.Object@23f2461c4java.lang.Object@4161441d4java.lang.Object@a83d0d4java.lang.Object@2139d9bc4java.lang.Object@104ab9214java.lang.Object@5bc04699", (CharSequence) "maxWith cannot be negative\nmaxWith cannot be negative");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(int1));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) stack0, '=', (-1), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceAll("", "", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.trimToEmpty("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 0, 108);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.ordinalIndexOf(charSequenceArray0[0], "", (-1));
      assertEquals(1, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)119;
      String string3 = StringUtils.join(byteArray0, 'O', 0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte) (-20), (byte)25, (byte)14, (byte) (-75), (byte)0, (byte)119}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.wrap("", 'H');
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.wrapIfMissing("MRd'mU?Bk5lioF;?(M]", 'O');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("OMRd'mU?Bk5lioF;?(M]O", string5);
      
      int int3 = StringUtils.indexOfAnyBut((CharSequence) "OMRd'mU?Bk5lioF;?(M]O", (CharSequence) "OMRd'mU?Bk5lioF;?(M]O");
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Ty,HVnggok}20]", "Ty,HVnggok}20]");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBetween("", "Ty,HVnggok}20]");
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Ty,HVnggok}20]");
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      String string2 = StringUtils.join((Iterable<?>) null, "Locale mustnot be nll");
      assertNull(string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      String string3 = StringUtils.stripEnd("null/empty items", "%W*Ocu;#f@CIz");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals("null/empty items", string3);
      
      String string4 = StringUtils.join((Iterable<?>) null, "Locale mustnot be nll");
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string5 = StringUtils.unwrap("Strings must not be null", 'P');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Strings must not be null", string5);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "null/empty items");
      assertEquals(16, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(16, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(16, charBuffer0.capacity());
      assertEquals("null/empty items", charBuffer0.toString());
      assertEquals(16, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = charBuffer0.asReadOnlyBuffer();
      assertEquals(16, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(16, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(16, charBuffer0.capacity());
      assertEquals("null/empty items", charBuffer0.toString());
      assertEquals(16, charBuffer0.limit());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertEquals(16, charBuffer1.limit());
      assertEquals(16, charBuffer1.length());
      assertEquals(16, charBuffer1.capacity());
      assertEquals("null/empty items", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(16, charBuffer1.remaining());
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharBuffer charBuffer2 = StringUtils.getIfEmpty(charBuffer1, supplier0);
      assertEquals(16, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(16, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.hasArray());
      assertEquals(16, charBuffer0.capacity());
      assertEquals("null/empty items", charBuffer0.toString());
      assertEquals(16, charBuffer0.limit());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertEquals(16, charBuffer1.limit());
      assertEquals(16, charBuffer1.length());
      assertEquals(16, charBuffer1.capacity());
      assertEquals("null/empty items", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(16, charBuffer1.remaining());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals("null/empty items", charBuffer2.toString());
      assertEquals(16, charBuffer2.length());
      assertFalse(charBuffer2.isDirect());
      assertFalse(charBuffer2.hasArray());
      assertEquals(0, charBuffer2.position());
      assertEquals(16, charBuffer2.remaining());
      assertEquals(16, charBuffer2.capacity());
      assertEquals(16, charBuffer2.limit());
      assertTrue(charBuffer2.isReadOnly());
      assertNotSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer0, charBuffer2);
      assertNotSame(charBuffer1, charBuffer0);
      assertSame(charBuffer1, charBuffer2);
      assertSame(charBuffer2, charBuffer1);
      assertNotSame(charBuffer2, charBuffer0);
      assertNotNull(charBuffer2);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertTrue(charBuffer2.equals((Object)charBuffer0));
      
      boolean boolean1 = StringUtils.isNoneEmpty(stringArray0);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = StringUtils.replaceFirst("', is neither of type Map.Entry nor an Array", "', is neither of type Map.Entry nor an Array", "m");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("m", string1);
      
      String string2 = StringUtils.replacePattern("', is neither of type Map.Entry nor an Array", "2", "m");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "m";
      charSequenceArray0[1] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[2] = (CharSequence) "v)zE,>=4_OoF?Nko";
      charSequenceArray0[3] = (CharSequence) "m";
      charSequenceArray0[4] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("m");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.substringBefore("m", (-730));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("m", string3);
      
      String string4 = StringUtils.removeStartIgnoreCase("m", "m");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.equals(charSequenceArray0[0], (CharSequence) "2");
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.unwrap("#", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("#", string5);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate(".VNQ0T6P>`x", (-1047), 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "MVb<GK }izowG29kGgE";
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("MVb<GK }izowG29kGgE"));
      
      charSequenceArray0[2] = (CharSequence) "MVb<GK }izowG29kGgE";
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>();
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      
      Locale locale0 = Locale.lookup(vector0, priorityQueue0);
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, priorityQueue0.size());
      assertNull(locale0);
      
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance(charSequenceArray0[0], charSequenceArray0[0], (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "The Array must not be null");
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[2] = 'u';
      charArray0[3] = 'L';
      charArray0[4] = ':';
      charArray0[5] = '0';
      String string1 = StringUtils.unwrap("Cannot store ", '0');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Cannot store ", string1);
      
      String string2 = StringUtils.leftPad("", (-2455), "Cannot store ");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.wrap("fY", 'u');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("ufYu", string3);
      
      String string4 = StringUtils.leftPad("", (-403));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'t', '\u0000', 'u', 'L', ':', '0', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("t\u0000uL:0\u0000", string5);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "ufYu", (CharSequence) "t\u0000uL:0\u0000");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      String string0 = StringUtils.overlay("1", "1", 0, 0);
      assertNotNull(string0);
      assertEquals("11", string0);
      
      String string1 = StringUtils.replace("1", "", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("1", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "11", (CharSequence) "1");
      assertTrue(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.trimToNull("LPLD,'}dX)[t|YNWb");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("LPLD,'}dX)[t|YNWb", string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "1", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string3 = StringUtils.join(iterator0, ')');
      assertEquals(1, enumSet0.size());
      assertNotNull(string3);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("FORMAT", string3);
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      assertEquals(1, enumSet1.size());
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      boolean boolean1 = enumSet1.add(locale_Category1);
      assertEquals(2, enumSet1.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(locale_Category1, locale_Category0);
      assertTrue(enumSet1.contains(locale_Category0));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = StringUtils.length("1");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      int[] intArray0 = StringUtils.toCodePoints("1");
      assertArrayEquals(new int[] {49}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("LPLD,'}dX)[t|YNWb", "");
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string4 = StringUtils.abbreviate("LPLD,'}dX)[t|YNWb", "", 10, 10);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("LPLD,'}dX)", string4);
      
      boolean boolean4 = StringUtils.isMixedCase("FORMAT");
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isNotEmpty("11");
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5);
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '?';
      String string0 = StringUtils.repeat('?', (int) '#');
      assertNotNull(string0);
      assertEquals("???????????????????????????????????", string0);
      
      boolean boolean0 = StringUtils.startsWith("???????????????????????????????????", "???????????????????????????????????");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Ty,HVnggok}20]", "Ty,HVnggok}20]");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBetween("", "Ty,HVnggok}20]");
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Ty,HVnggok}20]");
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      String string2 = StringUtils.substringBetween("Locale mustnot be nll", "", "Locale mustnot be nll");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteBuffer0);
      
      // Undeclared exception!
      try { 
        Charset.forName("Threshold must not be negative");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Threshold must not be negative
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      Iterator<String> iterator0 = hashSet0.iterator();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, '9');
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(string0);
      assertFalse(hashSet0.contains(string0));
      assertEquals("", string0);
      
      String string1 = StringUtils.leftPad("...", 1907, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains(1907));
      
      stack0.trimToSize();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains(1907));
      
      String string2 = StringUtils.removeEndIgnoreCase(string1, "i,}");
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      Iterator<Integer> iterator1 = stack0.iterator();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(iterator1);
      assertFalse(stack0.contains(1907));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("i,}", "", 1907);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.removePattern("p{InCombiningDiacriticalMarks}+", "Search and Replace array lengths don't match: ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      
      long[] longArray0 = new long[0];
      String string4 = StringUtils.join(longArray0, '9');
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "");
      assertNull(string0);
      
      String string1 = StringUtils.unwrap("jF-u", "xVNQ0T6P{>`x");
      assertNotNull(string1);
      assertEquals("jF-u", string1);
      
      String string2 = StringUtils.upperCase("xVNQ0T6P{>`x");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("XVNQ0T6P{>`X", string2);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
      
      String string3 = StringUtils.join((int[]) null, 'o', 8, 8);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = vector0.add((Object) charBuffer0);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[]", vector0.toString());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(vector0.contains(""));
      assertTrue(boolean0);
      
      String string0 = StringUtils.trimToEmpty(" vs negative~`vxGOhcNnkz6q'nT ");
      assertNotNull(string0);
      assertEquals("vs negative~`vxGOhcNnkz6q'nT", string0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals(250, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string1 = StringUtils.removeStart("k$(0?_>?Y87", "ldBax[{5Dv{h");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("k$(0?_>?Y87", string1);
      
      String string2 = StringUtils.removeAll((String) null, "org.apache.commons.lang3.StringUtils");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.startsWithAny(charBuffer0, stringArray0);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.remaining());
      assertNotSame(stringArray0, stringArray1);
      assertEquals(250, stringArray0.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.left("Minimum abbreviation width with offset is %d", 1);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("M", string3);
      
      String string4 = StringUtils.center((String) null, 1);
      assertNull(string4);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Y.mER%6 )ZtT78L", "");
      assertNotSame(stringArray2, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertEquals(1, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      
      int int0 = StringUtils.length("XXx/XYmYT;m&s(,");
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      String string0 = StringUtils.overlay("Ru ghqx#!uK1", "Ru ghqx#!uK1", 0, (-999));
      assertNotNull(string0);
      assertEquals("Ru ghqx#!uK1Ru ghqx#!uK1", string0);
      
      String string1 = StringUtils.replace("Strings must not be null", "", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Ru ghqx#!uK1Ru ghqx#!uK1", (CharSequence) "Strings must not be null");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.trimToNull("LPLD,'}dX)[t|YNWb");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("LPLD,'}dX)[t|YNWb", string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Ru ghqx#!uK1", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string3 = StringUtils.join(iterator0, ')');
      assertEquals(1, enumSet0.size());
      assertNotNull(string3);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("FORMAT", string3);
      
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category1);
      assertEquals(2, enumSet1.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(enumSet1.equals((Object)enumSet0));
      
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      boolean boolean1 = enumSet1.add(locale_Category2);
      assertEquals(2, enumSet1.size());
      assertNotSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertSame(locale_Category1, locale_Category2);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(locale_Category2, locale_Category0);
      assertSame(locale_Category2, locale_Category1);
      assertTrue(enumSet1.contains(locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = StringUtils.length("Strings must not be null");
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(24, int2);
      
      int[] intArray0 = StringUtils.toCodePoints("Strings must not be null");
      assertEquals(24, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("LPLD,'}dX)[t|YNWb", "");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string4 = StringUtils.wrap("", ')');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      CharSequence[] charSequenceArray1 = new CharSequence[7];
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      
      charSequenceArray1[0] = (CharSequence) "Ru ghqx#!uK1";
      charSequenceArray1[1] = (CharSequence) "";
      charSequenceArray1[2] = (CharSequence) "FORMAT";
      charSequenceArray1[3] = (CharSequence) "Ru ghqx#!uK1Ru ghqx#!uK1";
      charSequenceArray1[4] = (CharSequence) "";
      charSequenceArray1[1] = (CharSequence) "";
      charSequenceArray1[6] = (CharSequence) "Ru ghqx#!uK1Ru ghqx#!uK1";
      String string5 = StringUtils.appendIfMissingIgnoreCase("", "Ru ghqx#!uK1", charSequenceArray1);
      assertNotSame(charSequenceArray1, charSequenceArray0);
      assertEquals(7, charSequenceArray1.length);
      assertNotNull(string5);
      assertFalse(charSequenceArray1.equals((Object)charSequenceArray0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      String string0 = StringUtils.chomp("DJ\"x)W\"Y]|Q ");
      assertNotNull(string0);
      assertEquals("DJ\"x)W\"Y]|Q ", string0);
      
      String string1 = StringUtils.remove("DJ\"x)W\"Y]|Q ", 'i');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("DJ\"x)W\"Y]|Q ", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("DJ\"x)W\"Y]|Q ", "DJ\"x)W\"Y]|Q ", "DJ\"x)W\"Y]|Q ");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 3
         // DJ\"x)W\"Y]|Q 
         //    ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = StringUtils.chomp("[");
      assertNotNull(string0);
      assertEquals("[", string0);
      
      String string1 = StringUtils.toRootLowerCase("*'D{9~>BB!TsL");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("*'d{9~>bb!tsl", string1);
      
      String string2 = StringUtils.wrap("[", 'U');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("U[U", string2);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = StringUtils.chomp("?b");
      assertNotNull(string0);
      assertEquals("?b", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("?b");
      assertFalse(boolean0);
      
      String string1 = StringUtils.toRootLowerCase("*'D{9~>BB!TsL");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("*'d{9~>bb!tsl", string1);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("BI'C4", "BI'C4");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "BI'C4";
      stringArray0[1] = "BI'C4";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, ", Length: 0");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      char[] charArray0 = new char[3];
      charArray0[0] = '~';
      charArray0[1] = ':';
      charArray0[2] = 'j';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) ", Length: 0", charArray0);
      assertArrayEquals(new char[] {'~', ':', 'j'}, charArray0);
      assertEquals(3, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "BI'C4", (CharSequence) "BI'C4");
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      String string0 = StringUtils.removeAll("0#A{HS", " vs ");
      assertNotNull(string0);
      assertEquals("0#A{HS", string0);
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      String string0 = StringUtils.left("~7TU\"PvLP)`&&yx", (-1427));
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "", (-1738), (-3));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string0 = StringUtils.rightPad("", 3, '~');
      assertNotNull(string0);
      assertEquals("~~~", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-112);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)23;
      byteArray0[8] = (byte) (-52);
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "~~~");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ~~~
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(21);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(21, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(21, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      IntStream intStream0 = charBuffer0.chars();
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(21, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(21, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertNotNull(intStream0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator(">|~m", "", (-2871));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(">|~m");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(">|~m");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ">|~m", (CharSequence) "");
      assertEquals(4, int0);
      
      String string1 = StringUtils.toRootLowerCase("UZ,%CfvF(4T\")jO=");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("uz,%cfvf(4t\")jo=", string1);
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = StringUtils.rightPad("l %", 0, '0');
      assertNotNull(string0);
      assertEquals("l %", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "l %", (CharSequence) "l %");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      enumSet0.clear();
      assertEquals(0, enumSet0.size());
      assertFalse(enumSet0.contains(locale_Category0));
      
      boolean boolean1 = enumSet0.add(locale_Category0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string1 = StringUtils.join(iterator0, '0');
      assertEquals(1, enumSet0.size());
      assertNotNull(string1);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("FORMAT", string1);
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      boolean boolean2 = enumSet0.add(locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.length("FORMAT");
      assertEquals(6, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("FORMAT");
      assertArrayEquals(new int[] {70, 79, 82, 77, 65, 84}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase("l %", "l %");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "l %";
      charSequenceArray0[1] = (CharSequence) "l %";
      charSequenceArray0[2] = (CharSequence) "FORMAT";
      charSequenceArray0[3] = (CharSequence) "l %";
      charSequenceArray0[4] = (CharSequence) "l %";
      charSequenceArray0[5] = (CharSequence) "l %";
      charSequenceArray0[6] = (CharSequence) "l %";
      charSequenceArray0[7] = (CharSequence) "FORMAT";
      charSequenceArray0[8] = (CharSequence) "l %";
      boolean boolean4 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string2 = StringUtils.abbreviate("FORMAT", "l %", (int) '0', 6);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("FORMAT", string2);
      
      boolean boolean5 = StringUtils.isMixedCase(charSequenceArray0[5]);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5);
      
      boolean boolean6 = StringUtils.startsWithAny(charSequenceArray0[3], charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6);
      
      boolean boolean7 = StringUtils.isNotEmpty(charSequenceArray0[5]);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("i$`i");
      assertNotNull(string0);
      assertEquals("i$`i", string0);
      
      String string1 = StringUtils.capitalize("i$`i");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("I$`i", string1);
      
      int int0 = StringUtils.ordinalIndexOf("V", "V", (-3623));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-75);
      String string2 = StringUtils.rotate("i$`i", (byte) (-75));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ii$`", string2);
      
      String string3 = StringUtils.join(byteArray0, 'z', 321, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)49, (byte)0, (byte) (-75)}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isAlphaSpace("ii$`");
      assertFalse(boolean0);
      
      String string4 = StringUtils.toRootLowerCase("i$`i");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("i$`i", string4);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "The Array must not be null");
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.rotate("", (-3657));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lang3.Charsets", "org.apache.commons.lang3.Charsets", (-3657));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Ty,HVnggok}20]", "Ty,HVnggok}20]");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBetween("", "Ty,HVnggok}20]");
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Ty,HVnggok}20]");
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      String string2 = StringUtils.join((Iterable<?>) null, "Locale mustnot be nll");
      assertNull(string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteBuffer0);
      
      // Undeclared exception!
      try { 
        Charset.forName("Threshold must not be negative");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Threshold must not be negative
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = new int[4];
      intArray0[2] = 8192;
      intArray0[1] = 8192;
      intArray0[2] = 8192;
      intArray0[3] = 8192;
      String string1 = StringUtils.join(intArray0, 'r');
      assertArrayEquals(new int[] {0, 8192, 8192, 8192}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0r8192r8192r8192", string1);
      
      String string2 = StringUtils.leftPad("l %", 8192, "0r8192r8192r8192");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.wrap("Aborting to protect against StackOverflowError - output of one loop is the input of another", 'Y');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("YAborting to protect against StackOverflowError - output of one loop is the input of anotherY", string3);
      
      String string4 = StringUtils.leftPad("", 8192);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "0r8192r8192r8192", (CharSequence) string2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "l %", (CharSequence) "");
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("0r8192r8192r8192");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("k=UBQX'w$BK_", "I3}?&|[]FBQ");
      assertNotNull(string0);
      assertEquals("k=UBQX'w$BK_", string0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-2061L);
      String string1 = StringUtils.join(longArray0, '|');
      assertArrayEquals(new long[] {(-2061L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-2061", string1);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("k=UBQX'w$BK_", "-2061");
      assertFalse(boolean0);
      
      String string2 = StringUtils.reverse("-2061");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("1602-", string2);
      
      String string3 = StringUtils.wrap("b,nnqKdV#K", '|');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("|b,nnqKdV#K|", string3);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "b,nnqKdV#K";
      objectArray0[1] = (Object) (-2061L);
      objectArray0[2] = (Object) "1602-";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "I3}?&|[]FBQ";
      objectArray0[5] = (Object) (-2061L);
      objectArray0[6] = (Object) "-2061";
      objectArray0[7] = (Object) "I3}?&|[]FBQ";
      String string4 = StringUtils.join(objectArray0, '|', (-1), (-1));
      assertEquals(8, objectArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 0, "?@;uN");
      assertNotNull(string0);
      assertEquals("", string0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains("?@;uN"));
      
      String string1 = StringUtils.defaultIfEmpty("?@;uN", "]6lL\"");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("?@;uN", string1);
      
      String string2 = StringUtils.leftPad("", 0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "?@;uN", (CharSequence) "]6lL\"");
      assertFalse(boolean0);
      
      String string3 = StringUtils.join((short[]) null, '6');
      assertNull(string3);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "R3,pT6A2?Fz ";
      stringArray0[1] = "_";
      stringArray0[2] = "?@;uN";
      stringArray0[3] = "?@;uN";
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.removeStart(",O]8nE8wSn\"vwB", "org.apache.commons.lang3.ObjectUtils");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals(",O]8nE8wSn\"vwB", string5);
      
      boolean boolean1 = StringUtils.isAlpha("R3,pT6A2?Fz ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L";
      stringArray0[1] = "L";
      stringArray0[2] = "L";
      String string0 = StringUtils.replaceOnce("L", "L", "L");
      assertNotNull(string0);
      assertEquals("L", string0);
      
      String string1 = StringUtils.join((short[]) null, '(');
      assertNull(string1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.upperCase("L");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("L", string3);
      
      boolean boolean0 = StringUtils.isAlpha("L");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet1.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      boolean boolean0 = enumSet0.add(locale_Category2);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertSame(locale_Category1, locale_Category2);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertSame(locale_Category2, locale_Category1);
      assertSame(locale_Category2, locale_Category0);
      assertTrue(enumSet0.contains(locale_Category2));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertFalse(boolean0);
      
      String string0 = StringUtils.join(iterator0, 'Y');
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertSame(locale_Category1, locale_Category2);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(string0);
      assertTrue(enumSet0.contains(locale_Category2));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertEquals("FORMAT", string0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      intArray0[2] = 3986;
      intArray0[6] = 8192;
      String string1 = StringUtils.join(intArray0, 'Y');
      assertArrayEquals(new int[] {89, 0, 3986, 0, 0, 0, 8192, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("89Y0Y3986Y0Y0Y0Y8192Y0", string1);
      
      String string2 = StringUtils.leftPad(" vs ", (-2455), "KwJ!M>ss8");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" vs ", string2);
      
      String string3 = StringUtils.wrap(";$^_?N}$N z^}", 'Y');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Y;$^_?N}$N z^}Y", string3);
      
      String string4 = StringUtils.leftPad("Gn", 0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Gn", string4);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "Y;$^_?N}$N z^}Y", (CharSequence) "Gn");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      short[] shortArray0 = new short[0];
      String string5 = StringUtils.join(shortArray0, '6');
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "Gn";
      stringArray0[2] = "KwJ!M>ss8";
      String string6 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      
      String string7 = StringUtils.removeStart("", "The character ");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertEquals("", string7);
      
      boolean boolean2 = StringUtils.isAlpha("Gn");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      List<String> list0 = null;
      int int0 = (-2764);
      int int1 = 0;
      String string1 = StringUtils.join((List<?>) null, "", (-2764), 0);
      assertNull(string1);
      
      String string2 = StringUtils.removeEnd("Threshold must not be negative", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Threshold must not be negative", string2);
      
      String string3 = StringUtils.substringBetween((String) null, "", "Threshold must not be negative");
      assertNull(string3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      char char0 = 'z';
      charArray0[1] = 'z';
      charArray0[2] = 'G';
      charArray0[3] = 'o';
      charArray0[4] = 'E';
      charArray0[5] = '<';
      charArray0[6] = 'x';
      charArray0[7] = '~';
      String[] stringArray0 = new String[4];
      stringArray0[1] = null;
      String string4 = "\\u";
      stringArray0[2] = string4;
      stringArray0[3] = "";
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("\\u", string5);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Locale must not be null", string4, 0, (-2764));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      String string0 = "', is neither of type Map.Entry nor an Array";
      String string1 = StringUtils.stripToNull("', is neither of type Map.Entry nor an Array");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string2 = "4PFS:uSxt2P+";
      String string3 = StringUtils.rightPad("', is neither of type Map.Entry nor an Array", 501, "4PFS:uSxt2P+");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("', is neither of type Map.Entry nor an Array4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4", string3);
      
      LinkedHashSet<CharBuffer> linkedHashSet0 = new LinkedHashSet<CharBuffer>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(101);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(101, charBuffer0.remaining());
      assertEquals(101, charBuffer0.length());
      assertEquals(101, charBuffer0.capacity());
      assertEquals(101, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = charBuffer0.compact();
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(101, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(101, charBuffer0.capacity());
      assertEquals(101, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.length());
      assertEquals("", charBuffer1.toString());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(101, charBuffer1.position());
      assertEquals(101, charBuffer1.limit());
      assertEquals(101, charBuffer1.capacity());
      assertFalse(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.isReadOnly());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      
      boolean boolean0 = linkedHashSet0.add(charBuffer0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(101, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(101, charBuffer0.capacity());
      assertEquals(101, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertSame(charBuffer0, charBuffer1);
      assertTrue(linkedHashSet0.contains(charBuffer0));
      assertTrue(boolean0);
      
      String string4 = "Strings must not be null";
      boolean boolean1 = linkedHashSet0.add(charBuffer0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(101, charBuffer0.position());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(101, charBuffer0.capacity());
      assertEquals(101, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertSame(charBuffer0, charBuffer1);
      assertTrue(linkedHashSet0.contains(charBuffer0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        charBuffer0.put("', is neither of type Map.Entry nor an Array4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4PFS:uSxt2P+4", (-382), 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      String string0 = StringUtils.substring("[", (-1217), (-1217));
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet1.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      
      String string1 = StringUtils.join(iterator0, 'Y');
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(string1);
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("FORMAT", string1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      boolean boolean0 = StringUtils.isWhitespace("[");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((byte[]) null, 'Y');
      assertNull(string2);
      
      String string3 = StringUtils.capitalize("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "FORMAT";
      String string4 = StringUtils.leftPad("", (-1217), "");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "[";
      String string5 = StringUtils.reverse("");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "I3}?&|]FBQ");
      assertNotNull(string0);
      assertEquals("I3}?&|]FBQ", string0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-2061L);
      String string1 = StringUtils.substringBetween("", "I3}?&|]FBQ", "I3}?&|]FBQ");
      assertNull(string1);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", (CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripStart((String) null, "The Array must not be null");
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isNotBlank((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "The Array must not be null");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("L6<d]3EH>k=E39", "*81|", 55);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens((String) null, "");
      assertNull(stringArray2);
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replace("", "", "GM5z", (-1765));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeFirst("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.trim("Minimum abbreviation width with offset is %d");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "Minimum abbreviation width with offset is %d", (-1082));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", ", '");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 0, 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.repeat("GM5z", 0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.chomp("Cannot store ", "Minimum abbreviation width with offset is %d");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Cannot store ", string5);
      
      String string6 = StringUtils.trimToNull("GM5z");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("GM5z", string6);
      
      String string7 = StringUtils.rightPad("", (-2254));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertEquals("", string7);
      
      String string8 = StringUtils.truncate("", 5444, 0);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string2));
      assertEquals("", string8);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(""));
      
      Integer integer0 = new Integer((-1765));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals((-1765), (int)integer0);
      
      boolean boolean1 = arrayDeque0.add(integer0);
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(1, arrayDeque0.size());
      assertTrue(arrayDeque0.contains((-1765)));
      assertFalse(arrayDeque0.contains(""));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = arrayDeque0.add("");
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertTrue(arrayDeque0.contains(""));
      assertFalse(arrayDeque0.contains("GM5z"));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string9 = StringUtils.join((Iterable<?>) arrayDeque0, "");
      assertFalse(arrayDeque0.isEmpty());
      assertEquals(2, arrayDeque0.size());
      assertNotNull(string9);
      assertTrue(arrayDeque0.contains(""));
      assertFalse(arrayDeque0.contains("GM5z"));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string0));
      assertEquals("-1765", string9);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "Object varargs must not be null");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Object varargs must not be null
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L";
      stringArray0[1] = "L";
      stringArray0[2] = "L";
      stringArray0[3] = "L";
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) stringArray0, 'N', (-113), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -113
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(" e]))1N%E{z", 948);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.compareIgnoreCase(" e]))1N%E{z", "");
      assertEquals(11, int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(" e]))1N%E{z");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) " e]))1N%E{z";
      objectArray0[3] = (Object) " e]))1N%E{z";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) " e]))1N%E{z";
      objectArray0[7] = (Object) null;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, '2', 11, 256);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("#YQ2sCZ*Mt{\"9-P1", supplier0);
      assertNotNull(string0);
      assertEquals("#YQ2sCZ*Mt{\"9-P1", string0);
      
      String string1 = StringUtils.replaceChars(" in an array of ", "HF67", " in an array of ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" in an array of ", string1);
      
      String string2 = StringUtils.abbreviateMiddle("Threshold mu$t notception", "HF67", 23);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Threshold HF67otception", string2);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("#YQ2sCZ*Mt{\"9-P1");
      assertEquals(14, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.substringBefore("", (-1399));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(14, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.replaceChars(" in/an)array of ", "^", " in/an)array of ");
      assertNotNull(string0);
      assertEquals(" in/an)array of ", string0);
      
      String string1 = StringUtils.abbreviateMiddle("Threshold must not be negative", "^", 15);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Thresho^egative", string1);
      
      boolean boolean1 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("Threshold must not be negative"));
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("Threshold must not be negative"));
      
      String string2 = StringUtils.join(iterator0, '_');
      assertNotNull(string2);
      assertFalse(treeSet0.contains("Threshold must not be negative"));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.join((byte[]) null, 'Y');
      assertNull(string3);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, "Ph+A8/sFX^%", (-1428), 2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1428
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = "SOZe{^^JvPCh:";
      String string1 = null;
      String string2 = StringUtils.unwrap("SOZe{^^JvPCh:", (String) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("SOZe{^^JvPCh:", string2);
      
      String string3 = "g9Zs;%W0yLSfex";
      // Undeclared exception!
      try { 
        StringUtils.truncate("g9Zs;%W0yLSfex", (-4006), (-4006));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = StringUtils.substringBefore("q", 850);
      assertNotNull(string0);
      assertEquals("q", string0);
      
      boolean boolean0 = StringUtils.isEmpty("q");
      assertFalse(boolean0);
      
      String string1 = StringUtils.removePattern("(4b1;'sF", "'lc");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("(4b1;'sF", string1);
      
      String string2 = StringUtils.replaceEach("", (String[]) null, (String[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.defaultIfEmpty("Mr [rsst Is", "uPm");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Mr [rsst Is", string3);
      
      String string4 = StringUtils.deleteWhitespace("q");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string0));
      assertEquals("q", string4);
      
      String string5 = StringUtils.unwrap("(4b1;'sF", (String) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertEquals("(4b1;'sF", string5);
      
      String string6 = StringUtils.repeat("q", "q", 850);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      
      String string7 = StringUtils.overlay("Mr [rsst Is", "Mr [rsst Is", 850, 850);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertEquals("Mr [rsst IsMr [rsst Is", string7);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(850));
      
      stack0.ensureCapacity(850);
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(850, stack0.capacity());
      assertFalse(stack0.contains(850));
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(850, stack0.capacity());
      assertNotNull(iterator0);
      assertFalse(stack0.contains(850));
      
      String string8 = StringUtils.join(iterator0, 'A');
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(850, stack0.capacity());
      assertNotNull(string8);
      assertFalse(stack0.contains(850));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertEquals("", string8);
      
      StringUtils.leftPad("Mr [rsst IsMr [rsst Is", 850, "...");
      stack0.trimToSize();
      StringUtils.removeEndIgnoreCase("'lc", "?@;uWKU}'{b&)yv ?@;uWKU}'{b&)yv ?@;uWKU}'{b&)yv ?@;uWKU}'{b&)yv WKU}'{b&)yv ");
      stack0.iterator();
      StringUtils.splitByWholeSeparatorPreserveAllTokens("'lc", "}`v5X~g@:%8", 850);
      StringUtils.removePattern("", "...");
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 850;
      StringUtils.join(longArray0, '=');
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(21);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(21, charBuffer0.remaining());
      assertEquals(21, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(21, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      IntStream intStream0 = charBuffer0.chars();
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(21, charBuffer0.remaining());
      assertEquals(21, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(21, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.length());
      assertNotNull(intStream0);
      
      CharBuffer charBuffer1 = charBuffer0.put(">|~m");
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(17, charBuffer0.length());
      assertEquals(21, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(17, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(21, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasArray());
      assertEquals(17, charBuffer1.length());
      assertEquals(21, charBuffer1.limit());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(21, charBuffer1.capacity());
      assertEquals(4, charBuffer1.position());
      assertEquals(17, charBuffer1.remaining());
      assertFalse(charBuffer1.isReadOnly());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      
      String string0 = StringUtils.substringAfter("^O", "^O");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeAll("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "^O";
      charSequenceArray0[1] = (CharSequence) ">|~m";
      charSequenceArray0[2] = (CharSequence) ">|~m";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) ">|~m";
      int int0 = StringUtils.lastIndexOfAny("^O", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(2, int0);
      
      String string2 = StringUtils.repeat("^O", 21);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("^O^O^O^O^O^O^O^O^O^O^O^O^O^O^O^O^O^O^O^O^O", string2);
      
      String string3 = StringUtils.strip("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      String string0 = StringUtils.defaultString("\r");
      assertNotNull(string0);
      assertEquals("\r", string0);
      
      String string1 = "FS6)i/*4wvV;S^ r[X";
      int int0 = StringUtils.compareIgnoreCase("\r", "FS6)i/*4wvV;S^ r[X");
      assertEquals((-89), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("\r");
      assertFalse(boolean0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "\r";
      objectArray0[2] = (Object) "\r";
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[3] = object1;
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, 'b', (-158), 607);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -158
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.substringAfterLast("', is neither of type Map.Entry nor an Array", " has no clone method");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(" has no clone method");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(" e]))1N%E{z", 948);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      int int0 = StringUtils.compareIgnoreCase(" e]))1N%E{z", "");
      assertEquals(11, int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(" e]))1N%E{z");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) " e]))1N%E{z";
      objectArray0[3] = (Object) " e]))1N%E{z";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) " e]))1N%E{z";
      objectArray0[7] = (Object) null;
      String string2 = StringUtils.join(objectArray0, '2', 11, (-726));
      assertEquals(8, objectArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      String string0 = StringUtils.chop("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.difference("", "|UgFzRT[Ni?$Ged");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("|UgFzRT[Ni?$Ged", string1);
      
      String[] stringArray0 = StringUtils.split("3J/|LzDST@j68", '7');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Locale locale0 = null;
      // Undeclared exception!
      try { 
        StringUtils.getFuzzyDistance("", "", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Locale must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.exception.CloneFailedException", "nUaJ/HF67", 6);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string0);
      
      String string1 = StringUtils.strip("org.apache.commons.lang3.exception.CloneFailedException", "org.apache.commons.lang3.exception.CloneFailedException");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.ordinalIndexOf("", "nUaJ/HF67", 6);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      String string0 = StringUtils.join((double[]) null, 'W');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbrevTation width is %Q", '#');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '#';
      String string0 = StringUtils.repeat("Minimum abbrevTation width is %Q", "$Hj", 1551);
      assertNotNull(string0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean[] booleanArray0 = new boolean[10];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      String string1 = StringUtils.join(booleanArray0, '!', 32, (-1561));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(10, booleanArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.wrap((String) null, 'y');
      assertNull(string2);
      
      String string3 = StringUtils.appendIfMissingIgnoreCase("$Hj", "", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("$Hj", string3);
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      String string0 = "m";
      String string1 = StringUtils.replaceFirst("', is neither of type Map.Entry nor an Array", (String) null, "m");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      
      String string2 = "2";
      String string3 = StringUtils.replacePattern("', is neither of type Map.Entry nor an Array", "2", "m");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[1] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[2] = (CharSequence) "v)zE,>=4_OoF?Nko";
      charSequenceArray0[3] = (CharSequence) "m";
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("', is neither of type Map.Entry nor an Array");
      assertEquals(22, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string4 = StringUtils.substringBefore("', is neither of type Map.Entry nor an Array", (-730));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("', is neither of type Map.Entry nor an Array", string4);
      
      String string5 = StringUtils.removeStartIgnoreCase("m", "m");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      boolean boolean1 = StringUtils.equals(charSequenceArray0[0], (CharSequence) "2");
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string6 = ".VNQ0T6P>`x";
      String string7 = StringUtils.unwrap("#", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertEquals("#", string7);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate(".VNQ0T6P>`x", (-1047), 23);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '/';
      intArray0[1] = (int) '/';
      intArray0[6] = (int) '/';
      intArray0[3] = (int) '/';
      intArray0[4] = (int) '/';
      intArray0[6] = (int) '/';
      String string0 = StringUtils.join(intArray0, '/', 0, 1);
      assertArrayEquals(new int[] {47, 47, 0, 47, 47, 0, 47, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(string0);
      assertEquals("47", string0);
      
      String string1 = StringUtils.mid("9/v&$hhE>i795LOpn", 1, 1913);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("/v&$hhE>i795LOpn", string1);
      
      String string2 = StringUtils.difference("^)_<$e", "C72MTH3Ij,PdC%Tv+");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("C72MTH3Ij,PdC%Tv+", string2);
      
      String string3 = StringUtils.reverseDelimited((String) null, '3');
      assertNull(string3);
      
      boolean boolean0 = StringUtils.startsWith("47", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) '#';
      intArray0[6] = (int) '#';
      intArray0[3] = (int) '#';
      intArray0[4] = (int) '#';
      intArray0[6] = (int) '#';
      String string0 = StringUtils.join(intArray0, '#', 0, 1);
      assertArrayEquals(new int[] {35, 35, 0, 35, 35, 0, 35, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(string0);
      assertEquals("35", string0);
      
      String string1 = StringUtils.mid("9/v&$hhE>i795LOpn", 1, 1913);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("/v&$hhE>i795LOpn", string1);
      
      String string2 = StringUtils.difference("^)_<$e", "C72MTH3Ij,PdC%Tv+");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("C72MTH3Ij,PdC%Tv+", string2);
      
      String string3 = StringUtils.reverseDelimited((String) null, '3');
      assertNull(string3);
      
      boolean boolean0 = StringUtils.startsWith("35", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = StringUtils.substring("[", (-1217), (-1217));
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.replaceOnce("", "", "[");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      boolean boolean0 = StringUtils.isWhitespace("[");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((byte[]) null, 'Y');
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      String string3 = StringUtils.stripAccents("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      boolean boolean1 = treeSet0.add("");
      assertFalse(treeSet0.contains("["));
      assertTrue(treeSet0.contains(""));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.stripToNull("");
      assertNull(string4);
      
      String string5 = StringUtils.removeAll("KT=.N", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("KT=.N", string5);
      
      int int0 = StringUtils.lastIndexOfAny(charSequenceArray0[2], charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string6 = StringUtils.removeEndIgnoreCase((String) null, "objecyv ");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.stripStart("[b/!%,8TIPNyW", ")@.yIwZ?");
      assertNotNull(string0);
      assertEquals("[b/!%,8TIPNyW", string0);
      
      charSequenceArray0[0] = (CharSequence) "[b/!%,8TIPNyW";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.stripToNull("[b/!%,8TIPNyW");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("[b/!%,8TIPNyW", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "[b/!%,8TIPNyW", 22, 8192);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("[b/!%,8TIPNyW");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.prependIfMissing("[b/!%,8TIPNyW", "[b/!%,8TIPNyW", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("[b/!%,8TIPNyW", string2);
      
      boolean[] booleanArray0 = new boolean[0];
      String string3 = StringUtils.join(booleanArray0, '~');
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int1 = StringUtils.compare("Cannot store ", "_5sW%k7", false);
      assertFalse(int1 == int0);
      assertEquals((-28), int1);
      
      boolean boolean2 = StringUtils.endsWithAny(")@.yIwZ?", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.rightPad("*N,2F", (-1888));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("*N,2F", string4);
      
      boolean boolean3 = StringUtils.isAllLowerCase("*N,2F");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string5 = StringUtils.abbreviateMiddle("*N,2F", "[b/!%,8TIPNyW", (-1));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertEquals("*N,2F", string5);
      
      String string6 = StringUtils.capitalize("[b/!%,8TIPNyW");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("[b/!%,8TIPNyW", string6);
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("L[}T|");
      assertNotNull(string0);
      assertEquals("l[}T|", string0);
      
      String string1 = StringUtils.CR;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      
      String string2 = StringUtils.abbreviate("\r", "The type must not be null", (-2066), 3385);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\r", string2);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "\r", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.substringBetween("\r", "\r");
      assertNull(string3);
      
      String string4 = StringUtils.getDigits("nqfl\"$RYb8aG97P");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("897", string4);
      
      String string5 = StringUtils.removePattern("\r", (String) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("\r", string5);
      
      int int0 = StringUtils.indexOf((CharSequence) "...", (CharSequence) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("897", "offset cannot be negative");
      assertFalse(int1 == int0);
      assertEquals((-55), int1);
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      String string0 = StringUtils.left((String) null, 3266);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "P{Rr)maxWit cann#t be negative", 2456);
      assertNull(stringArray0);
      
      String string1 = StringUtils.repeat("P{Rr)maxWit cann#t be negative", (-2035));
      assertNotNull(string1);
      assertEquals("", string1);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("P{Rr)maxWit cann#t be negative"));
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("P{Rr)maxWit cann#t be negative"));
      
      String string2 = StringUtils.join(iterator0, "");
      assertNotNull(string2);
      assertFalse(treeSet0.contains(""));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "P{Rr)maxWit cann#t be negative", (CharSequence) "");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "", 3266, (-61));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width is %d", '#');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) '#';
      intArray0[6] = (int) '#';
      intArray0[3] = (int) '#';
      intArray0[4] = (int) '#';
      intArray0[6] = (int) '#';
      intArray0[6] = (int) '#';
      String string0 = StringUtils.join(intArray0, '#', 0, 1);
      assertArrayEquals(new int[] {35, 35, 0, 35, 35, 0, 35, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(string0);
      assertEquals("35", string0);
      
      String string1 = StringUtils.removeStart("@:%8", "}`v5X~g");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("@:%8", string1);
      
      String string2 = StringUtils.replaceChars("~`vxGOhcNnkz6q'nT ", ";2Ez:j;kB", "+g|LW3dQ2");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("~`vxGOhcNnQL6q'nT ", string2);
      
      String string3 = StringUtils.substringAfterLast("+g|LW3dQ2", 35);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.trim("+g|LW3dQ2");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("+g|LW3dQ2", string4);
      
      String string5 = StringUtils.join(intArray0, '#');
      assertArrayEquals(new int[] {35, 35, 0, 35, 35, 0, 35, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("35#35#0#35#35#0#35#0", string5);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, (String) null, 9);
      assertNull(stringArray1);
      
      int int0 = StringUtils.compare((String) null, (String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '#');
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripAccents("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceFirst("<=w4'7WK)r\"y$", "", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("<=w4'7WK)r\"y$", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "<=w4'7WK)r\"y$");
      assertNull(stringArray0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("', is neither of type Map.Entry n({F{n7^pWOfGn", "org.apache.commons.lang3.ObjectUtils$Null");
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      String string0 = StringUtils.rightPad("=8`4XwRr,HfV\"g2&$", 2039);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance(string0, "=8`4XwRr,HfV\"g2&$");
      assertEquals(0.67, double0, 0.01);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "=8`4XwRr,HfV\"g2&$", 2039, 2039);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      String string0 = StringUtils.strip("Aborting to protect against StackOverflowError - output of one loop is the input of another", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string0);
      assertEquals("borting to protect against StackOverflowError - output of one loop is the inpu", string0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string1 = StringUtils.unwrap((String) null, "Object varargs must not be null");
      assertNull(string1);
      
      String string2 = StringUtils.truncate("Object varargs must not be null", 23, 23);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(" be null", string2);
      
      String string3 = StringUtils.stripEnd((String) null, (String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.unwrap("p{InCombiningDiacriticalMarks}+", '_');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("p{InCombiningDiacriticalMarks}+", string4);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) '_';
      doubleArray0[1] = (double) 23;
      doubleArray0[2] = (double) 23;
      doubleArray0[3] = (double) 'S';
      doubleArray0[4] = (double) '_';
      doubleArray0[5] = (double) '_';
      String string5 = StringUtils.join(doubleArray0, 'S', 23, (-32768));
      assertArrayEquals(new double[] {95.0, 23.0, 23.0, 83.0, 95.0, 95.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharBuffer charBuffer1 = StringUtils.getIfEmpty(charBuffer0, supplier0);
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertNull(charBuffer1);
      
      String string6 = StringUtils.substringAfter("Aborting to protect against StackOverflowError - output of one loop is the input of another", (-32768));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chomp("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string2 = StringUtils.stripToEmpty("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.lowerCase("JAizNf0e>8?CTYA8hD");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("jaiznf0e>8?ctya8hd", string3);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "jaiznf0e>8?ctya8hd");
      assertEquals(0, int0);
      
      String string4 = StringUtils.replaceChars("P{Rr)maxWit cann#t be negative", "?xrx>_#c", "y{ipSQXLCPJTb");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("P{Ri)ma{Wit XannQt be negative", string4);
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("i$`i");
      assertNotNull(string0);
      assertEquals("i$`i", string0);
      
      String string1 = StringUtils.capitalize("i$`i");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("I$`i", string1);
      
      int int0 = StringUtils.ordinalIndexOf("V", "V", (-3623));
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-75);
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '`', 11, (int) (byte)14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfEmpty("Threshold must not be negativez*qR0fkO", supplier0);
      assertNotNull(string0);
      assertEquals("Threshold must not be negativez*qR0fkO", string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)118;
      byteArray0[1] = (byte) (-118);
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-85);
      byteArray0[5] = (byte) (-105);
      byteArray0[6] = (byte)116;
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      String string1 = StringUtils.toEncodedString(byteArray0, charset0);
      assertArrayEquals(new byte[] {(byte)118, (byte) (-118), (byte) (-4), (byte)19, (byte) (-85), (byte) (-105), (byte)116}, byteArray0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(7, byteArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("v\uFFFD\uFFFD\u0013\uFFFD\uFFFDt", string1);
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet1.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      
      String string0 = StringUtils.join(iterator0, 'Y');
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(string0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertEquals("FORMAT", string0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[5] = (CharSequence) "FORMAT";
      String string1 = StringUtils.prependIfMissingIgnoreCase("FORMAT", charSequenceArray0[1], charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("FORMAT", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "FORMAT", charSequenceArray0[2]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.truncate("FORMAT", 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isEmpty(charSequenceArray0[2]);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      String string0 = StringUtils.chop("V");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.difference("V", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBetween("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.rotate("JS1y,TOy#", (byte)49);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("JS1y,TOy#", string3);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)26;
      byteArray0[5] = (byte)28;
      byteArray0[6] = (byte)49;
      String string4 = StringUtils.join(byteArray0, 'z', 1280, (int) (byte)28);
      assertArrayEquals(new byte[] {(byte)49, (byte)49, (byte)49, (byte)49, (byte)26, (byte)28, (byte)49}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string5 = StringUtils.toRootLowerCase((String) null);
      assertNull(string5);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "JS1y,TOy#";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean1 = StringUtils.endsWithAny("V", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[20];
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(20, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      boolean[] booleanArray0 = new boolean[0];
      String string0 = StringUtils.join(booleanArray0, 'w');
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compare("Cannotstore ", "_5sW%k7", false);
      assertEquals((-28), int0);
      
      boolean boolean1 = StringUtils.endsWithAny(")@.yIwZ?", charSequenceArray0);
      assertEquals(20, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.capitalize("[b/!%,8TIPNyW");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[b/!%,8TIPNyW", string1);
      
      boolean boolean2 = StringUtils.isAllLowerCase("_5sW%k7");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      String string0 = StringUtils.wrap("twAborting to protect against StackOverflowError - output of one loop is the input of another", "twAborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string0);
      assertEquals("twAborting to protect against StackOverflowError - output of one loop is the input of anothertwAborting to protect against StackOverflowError - output of one loop is the input of anothertwAborting to protect against StackOverflowError - output of one loop is the input of another", string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase("twAborting to protect against StackOverflowError - output of one loop is the input of anothertwAborting to protect against StackOverflowError - output of one loop is the input of anothertwAborting to protect against StackOverflowError - output of one loop is the input of another");
      assertFalse(boolean0);
      
      String string1 = StringUtils.replacePattern("M8G'MKcO", "twAborting to protect against StackOverflowError - output of one loop is the input of another", "M8G'MKcO");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("M8G'MKcO", string1);
      
      String string2 = StringUtils.rotate("L[}T|Hk0i8&P{Rr)", 32767);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("[}T|Hk0i8&P{Rr)L", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "[}T|Hk0i8&P{Rr)L", (CharSequence) "M8G'MKcO");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'f';
      charArray0[1] = '_';
      String string3 = StringUtils.join(charArray0, 'f');
      assertArrayEquals(new char[] {'f', '_'}, charArray0);
      assertEquals(2, charArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("ff_", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "M8G'MKcO";
      charSequenceArray0[1] = (CharSequence) "M8G'MKcO";
      charSequenceArray0[2] = (CharSequence) "M8G'MKcO";
      boolean boolean1 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int1 = StringUtils.indexOf((CharSequence) "twAborting to protect against StackOverflowError - output of one loop is the input of anothertwAborting to protect against StackOverflowError - output of one loop is the input of anothertwAborting to protect against StackOverflowError - output of one loop is the input of another", (CharSequence) "M8G'MKcO");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.substring("twAborting to protect against StackOverflowError - output of one loop is the input of anothertwAborting to protect against StackOverflowError - output of one loop is the input of anothertwAborting to protect against StackOverflowError - output of one loop is the input of another", 122, 32767);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals(" StackOverflowError - output of one loop is the input of anothertwAborting to protect against StackOverflowError - output of one loop is the input of another", string4);
      
      boolean boolean2 = StringUtils.contains(charSequenceArray0[0], (CharSequence) "twAborting to protect against StackOverflowError - output of one loop is the input of anothertwAborting to protect against StackOverflowError - output of one loop is the input of anothertwAborting to protect against StackOverflowError - output of one loop is the input of another");
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.removeAll((String) null, "org.apache.commons.lang3.StringUtils");
      assertNull(string5);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("M8G'MKcO"));
      
      ListIterator<Object> listIterator0 = arrayList0.listIterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      assertFalse(arrayList0.contains("M8G'MKcO"));
      
      String string6 = StringUtils.join((Iterator<?>) listIterator0, '\\');
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(string6);
      assertFalse(arrayList0.contains("M8G'MKcO"));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      String string0 = StringUtils.swapCase("Locale must not be null");
      assertNotNull(string0);
      assertEquals("lOCALE MUST NOT BE NULL", string0);
      
      String string1 = StringUtils.reverse("Locale must not be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("llun eb ton tsum elacoL", string1);
      
      String string2 = StringUtils.center("Locale must not be null", 1700);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "Locale must not be null";
      String string3 = StringUtils.chop("lOCALE MUST NOT BE NULL");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("lOCALE MUST NOT BE NUL", string3);
      
      charSequenceArray0[1] = (CharSequence) "lOCALE MUST NOT BE NUL";
      String string4 = StringUtils.truncate("]s-l8.:yC.iPjxiwR7", 1700, 1700);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "lOCALE MUST NOT BE NULL";
      String string5 = StringUtils.capitalize("]s-l8.:yC.iPjxiwR7");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("]s-l8.:yC.iPjxiwR7", string5);
      
      charSequenceArray0[4] = (CharSequence) "]s-l8.:yC.iPjxiwR7";
      charSequenceArray0[5] = (CharSequence) "Locale must not be null";
      charSequenceArray0[6] = (CharSequence) "lOCALE MUST NOT BE NULL";
      charSequenceArray0[7] = (CharSequence) "Locale must not be null";
      boolean boolean0 = StringUtils.endsWithAny("Locale must not be null", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      Iterator<String> iterator0 = hashSet0.iterator();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, '4');
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(string0);
      assertFalse(hashSet0.contains(string0));
      assertEquals("", string0);
      
      String string1 = StringUtils.leftPad("...", 1907, "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = hashSet0.add(string1);
      assertFalse(hashSet0.isEmpty());
      assertEquals(1, hashSet0.size());
      assertFalse(hashSet0.contains("..."));
      assertTrue(hashSet0.contains(string1));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(1907));
      
      stack0.trimToSize();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertFalse(stack0.contains(1907));
      
      String string2 = StringUtils.removeEndIgnoreCase(string1, "i,}");
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      Iterator<Integer> iterator1 = stack0.iterator();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(iterator1);
      assertFalse(stack0.contains(1907));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("...", "...");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.removePattern("p{InCombiningDiacriticalMarks}+", "i,}");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("p{InCombiningDiacriticalMarks}+", string3);
      
      long[] longArray0 = new long[0];
      String string4 = StringUtils.join(longArray0, '4');
      assertArrayEquals(new long[] {}, longArray0);
      assertEquals(0, longArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.wrapIfMissing("tzj1[b4sg/a02", '4');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("4tzj1[b4sg/a024", string5);
      
      String[] stringArray1 = StringUtils.substringsBetween("i,}", "offset cannot be negative", "*2`p/~i?{va1~dcR ");
      assertNull(stringArray1);
      
      boolean boolean1 = StringUtils.endsWithAny("...", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      String string0 = StringUtils.removeEnd("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = new int[7];
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-880);
      intArray0[6] = 9;
      String string1 = StringUtils.join(intArray0, ']', 6, (-2922));
      assertArrayEquals(new int[] {0, 1, 1, 0, 0, (-880), 9}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviateMiddle("WKU}'{b&)yv ", "(F$LjQ+yQ|", 1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("WKU}'{b&)yv ", string2);
      
      String string3 = StringUtils.substringAfter("~`vxGOhcNnkz6q'nT negative", 13);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "(F$LjQ+yQ|", (char[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("WKU}'{b&)yv ", (String) null, false);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.substringBefore("WKU}'{b&)yv ", 0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("WKU}'{b&)yv ", string4);
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string0 = StringUtils.stripStart("[b/!%,8TIPNyW", ")@.yIwZ?");
      assertNotNull(string0);
      assertEquals("[b/!%,8TIPNyW", string0);
      
      charSequenceArray0[0] = (CharSequence) "[b/!%,8TIPNyW";
      boolean boolean0 = StringUtils.isAllEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfBlank("[b/!%,8TIPNyW", supplier0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("[b/!%,8TIPNyW", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "[b/!%,8TIPNyW", 22, 8192);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("[b/!%,8TIPNyW");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.prependIfMissing("[b/!%,8TIPNyW", "[b/!%,8TIPNyW", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("[b/!%,8TIPNyW", string2);
      
      boolean[] booleanArray0 = new boolean[0];
      String string3 = StringUtils.join(booleanArray0, 'w');
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int1 = StringUtils.compare("Cannot store ", "_5sW%k7", false);
      assertFalse(int1 == int0);
      assertEquals((-28), int1);
      
      boolean boolean2 = StringUtils.endsWithAny(")@.yIwZ?", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string4 = StringUtils.rightPad("*N,2F", (-1888));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("*N,2F", string4);
      
      boolean boolean3 = StringUtils.isAllLowerCase("*N,2F");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string5 = StringUtils.abbreviateMiddle("*N,2F", "[b/!%,8TIPNyW", (-1));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("*N,2F", string5);
      
      String string6 = StringUtils.capitalize("[b/!%,8TIPNyW");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("[b/!%,8TIPNyW", string6);
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "b/%#(bk.", 322);
      assertNull(stringArray0);
      
      String string0 = StringUtils.center(".h_t/V!0dAp^hMYId,", 1569);
      assertNotNull(string0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "X>d[{P|gZ\"r/m6");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string1 = StringUtils.getDigits("kz6q'nT ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("6", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("X>d[{P|gZ\"r/m6");
      assertFalse(boolean0);
      
      String string2 = StringUtils.appendIfMissing("maxWith cannot be negative", "6", (CharSequence[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("maxWith cannot be negative6", string2);
      
      String string3 = StringUtils.wrapIfMissing("kz6q'nT ", 'k');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("kz6q'nT k", string3);
      
      String string4 = StringUtils.stripAccents("kz6q'nT k");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("kz6q'nT k", string4);
      
      boolean boolean1 = StringUtils.startsWith("kz6q'nT k", ".h_t/V!0dAp^hMYId,");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.replacePattern("Minimum abbreviation width is %d", "maxWith cannot be negative6", "*9^fisTx`zzJ]M%H*9^fisTx`zzJ]M%H");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Minimum abbreviation width is %d", string5);
      
      boolean boolean2 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.ordinalIndexOf("*9^fisTx`zzJ]M%H*9^fisTx`zzJ]M%H", "Minimum abbreviation width is %d", 1157);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.swapCase("P<jzRUZN8#~");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("p<JZruzn8#~", string6);
      
      String string7 = StringUtils.prependIfMissingIgnoreCase("<EU >_o", "kz6q'nT ", (CharSequence[]) null);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertEquals("kz6q'nT <EU >_o", string7);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) "b/%#(bk.", (CharSequence[]) null);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string8 = StringUtils.removeAll(string0, "p<JZruzn8#~");
      assertNotNull(string8);
      assertFalse(string0.equals((Object)string7));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string6));
      assertFalse(string0.equals((Object)string5));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      
      int int1 = StringUtils.lastIndexOfAny(".h_t/V!0dAp^hMYId,", (CharSequence[]) null);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-218));
      assertNull(stringArray0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "X>acriticalMarks}+");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = StringUtils.getDigits("kz`q<nT ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("X>acriticalMarks}+");
      assertFalse(boolean0);
      
      String string1 = StringUtils.appendIfMissing("maxWith cannot be negative", "", (CharSequence[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string1);
      
      String string2 = StringUtils.wrapIfMissing("kz`q<nT ", 'k');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("kz`q<nT k", string2);
      
      boolean boolean1 = StringUtils.startsWith("kz`q<nT k", ".h_t/V!0dAp^hMYId,");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.replacePattern("X>acriticalMarks}+", "maxWith cannot be negative", "X>acriticalMarks}+");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("X>acriticalMarks}+", string3);
      
      boolean boolean2 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.ordinalIndexOf("maxWith cannot be negative", ".h_t/V!0dAp^hMYId,", 1157);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.swapCase("P<jzRUZN8#~");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("p<JZruzn8#~", string4);
      
      String string5 = StringUtils.prependIfMissingIgnoreCase("maxWith cannot be negative", "kz`q<nT ", (CharSequence[]) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("kz`q<nT maxWith cannot be negative", string5);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) null, (CharSequence[]) null);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("8@UT1j_Xtzc<3vR", 286);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBefore("8@UT1j_Xtzc<3vR", "W[,v$bM{A\"5x8b_[");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("8@UT1j_Xtzc<3vR", string1);
      
      boolean boolean0 = StringUtils.equalsAny("8@UT1j_Xtzc<3vR", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripToEmpty("_");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("_", string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbrevTation width is %Q", '#');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = (int) '#';
      String string0 = StringUtils.repeat("Minimum abbrevTation width is %Q", "$Hj", 1551);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("$Hj", 1551);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$Hj", string1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Minimum abbrevTation width is %Q", string2);
      
      String string3 = StringUtils.replaceChars((String) null, ']', '=');
      assertNull(string3);
      
      String string4 = StringUtils.capitalize(" ?xXIl(`t;X}rk");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(" ?xXIl(`t;X}rk", string4);
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "b/%#(bk.", 322);
      assertNull(stringArray0);
      
      String string0 = StringUtils.center(".h_t/V!0dAp^hMYId,", 1569);
      assertNotNull(string0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "X>d[{P|gZ\"r/m6");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string1 = StringUtils.getDigits("kz6q'nT ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("6", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("X>d[{P|gZ\"r/m6");
      assertFalse(boolean0);
      
      String string2 = StringUtils.appendIfMissing("maxWith cannot be negative", "6", (CharSequence[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("maxWith cannot be negative6", string2);
      
      String string3 = StringUtils.wrapIfMissing("kz6q'nT ", 'k');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("kz6q'nT k", string3);
      
      String string4 = StringUtils.stripAccents("kz6q'nT k");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertEquals("kz6q'nT k", string4);
      
      boolean boolean1 = StringUtils.startsWith("kz6q'nT k", ".h_t/V!0dAp^hMYId,");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.replacePattern("Minimum abbreviation width is %d", "maxWith cannot be negative6", "*9^fisTx`zzJ]M%H*9^fisTx`zzJ]M%H");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("Minimum abbreviation width is %d", string5);
      
      boolean boolean2 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.ordinalIndexOf("*9^fisTx`zzJ]M%H*9^fisTx`zzJ]M%H", "Minimum abbreviation width is %d", 1157);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.swapCase("P<jzRUZN8#~");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertEquals("p<JZruzn8#~", string6);
      
      String string7 = StringUtils.repeat(".h_t/V!0dAp^hMYId,", "p<JZruzn8#~", (-107));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertEquals("", string7);
      
      String string8 = StringUtils.repeat("kz6q'nT k", 1569);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      
      String string9 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertEquals("", string9);
      
      String string10 = StringUtils.replaceChars("maxWith cannot be negative", '=', '\"');
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string7));
      assertEquals("maxWith cannot be negative", string10);
      
      String string11 = StringUtils.capitalize((String) null);
      assertNull(string11);
      
      String string12 = StringUtils.abbreviate("*9^fisTx`zzJ]M%H*9^fisTx`zzJ]M%H", "kz6q'nT ", 1569, 1569);
      assertNotNull(string12);
      assertFalse(string12.equals((Object)string9));
      assertFalse(string12.equals((Object)string6));
      assertFalse(string12.equals((Object)string10));
      assertFalse(string12.equals((Object)string4));
      assertFalse(string12.equals((Object)string3));
      assertFalse(string12.equals((Object)string7));
      assertFalse(string12.equals((Object)string1));
      assertFalse(string12.equals((Object)string2));
      assertFalse(string12.equals((Object)string8));
      assertFalse(string12.equals((Object)string5));
      assertFalse(string12.equals((Object)string0));
      assertEquals("*9^fisTx`zzJ]M%H*9^fisTx`zzJ]M%H", string12);
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      String string0 = StringUtils.strip("^", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string0);
      assertEquals("^", string0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("^"));
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("^"));
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "^";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = treeSet0.add(charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(treeSet0.contains("', is neither of type Map.Entry nor an Array"));
      assertTrue(treeSet0.contains("^"));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.substringAfter("bVTz#-b", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeAll("^", "bVTz#-b");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("^", string2);
      
      int int0 = StringUtils.lastIndexOfAny("^", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.repeat("i", 64);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii", string3);
      
      String string4 = StringUtils.strip("3dH");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("3dH", string4);
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      String string0 = StringUtils.chop("\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrap("", "#");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeEnd((String) null, "tGsGN?`ctgw");
      assertNull(string2);
      
      String string3 = StringUtils.substring("Ju9&>", (-1802), (-1802));
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      String string4 = StringUtils.swapCase("Ju9&>");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("jU9&>", string4);
      
      String string5 = StringUtils.abbreviate("tGsGN?`ctgw", "", (-1802));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertEquals("tGsGN?`ctgw", string5);
      
      String string6 = StringUtils.replaceFirst((String) null, "", "EJ\"iYoV=G$A&");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.abbreviate("aMOx%qu04n6,nT", "aMOx%qu04n6,nT", 1006);
      assertNotNull(string0);
      assertEquals("aMOx%qu04n6,nT", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("aMOx%qu04n6,nT", "3", "3\"63\"6");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("aMOx%qu04n6,nT", string1);
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "u!y0w'}l#gr_w");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[14];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      String string1 = StringUtils.defaultIfEmpty("`]:qMn y$yI_}U=6", "Object varargs must not be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`]:qMn y$yI_}U=6", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "`]:qMn y$yI_}U=6");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.join((long[]) null, '<');
      assertNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, (String) null, (int) '<', (int) '<');
      assertNull(string4);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("Object varargs must not be null", charSequenceArray0[3]);
      assertEquals(14, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string5 = StringUtils.removeStart("Minimum abbreviation width with offset is %d", "u!y0w'}l#gr_w");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string5);
      
      int int0 = StringUtils.indexOf((CharSequence) "*9^fisTx`zzJ]M%H", (CharSequence) "", 101);
      assertEquals(16, int0);
      
      int int1 = StringUtils.length("`]:qMn y$yI_}U=6");
      assertTrue(int1 == int0);
      assertEquals(16, int1);
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      String string0 = StringUtils.chop("\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrapIfMissing("tGsGN?`ctgw", 'l');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ltGsGN?`ctgwl", string1);
      
      String string2 = StringUtils.wrap("", "#");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.removeEnd((String) null, "tGsGN?`ctgw");
      assertNull(string3);
      
      String string4 = StringUtils.substring("Ju9&>", (-1802), (-1802));
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      String string5 = StringUtils.prependIfMissingIgnoreCase("ltGsGN?`ctgwl", "ltGsGN?`ctgwl", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertEquals("ltGsGN?`ctgwl", string5);
      
      String string6 = StringUtils.swapCase("Ju9&>");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertEquals("jU9&>", string6);
      
      String string7 = StringUtils.replacePattern("Minimum abbreviation width with offset is %d", "\r", "$2$rr,|OH8+|T/bT} ");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertEquals("Minimum abbreviation width with offset is %d", string7);
      
      String string8 = StringUtils.replaceFirst((String) null, "Minimum abbreviation width with offset is %d", "EJ\"iYoV=G$A&");
      assertNull(string8);
      
      String string9 = StringUtils.replaceAll((String) null, "PMRn-4", "ltGsGN?`ctgwl");
      assertNull(string9);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 321);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((Object[]) charSequenceArray0, (String) null, (-1802), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1802
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      String string0 = StringUtils.chop("V");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.difference("V", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBetween("*c'M", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfterLast("org.apache.commons.lang3.exception.CloneFailedException", 1280);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator(">|~m", "", (-2871));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isAlphanumeric(">|~m");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(">|~m");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.LF;
      assertNotNull(string0);
      assertEquals("\n", string0);
      
      String string1 = StringUtils.toRootLowerCase("UZ,%CfvF(4T\")jO=");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("uz,%cfvf(4t\")jo=", string1);
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", 'i');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceAll("", "", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.trimToEmpty("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 0, 108);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.ordinalIndexOf(charSequenceArray0[0], "", (-1));
      assertEquals(1, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)119;
      String string4 = StringUtils.join(byteArray0, 'O', 0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte) (-20), (byte)0, (byte)0, (byte) (-75), (byte)0, (byte)119}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.toRootLowerCase("");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("n#JUKr1Dh+l~PdS1U1[", "", (int) (byte)119);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<Object> stack0 = new Stack<Object>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      assertFalse(stack0.contains((byte) (-20)));
      
      Iterator<Object> iterator0 = stack0.iterator();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(iterator0);
      assertFalse(stack0.contains((byte) (-20)));
      
      String string6 = StringUtils.join(iterator0, "");
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertNotNull(string6);
      assertFalse(stack0.contains((byte) (-20)));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.exception.CloneFailedException", "nUaJ/HF67", (-1));
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string0);
      
      String string1 = StringUtils.chomp("nUaJ/HF67", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("nUaJ/HF67", string1);
      
      String string2 = StringUtils.appendIfMissingIgnoreCase("org.apache.commons.lang3.exception.CloneFailedException", "org.apache.commons.lang3.exception.CloneFailedException", (CharSequence[]) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("nUaJ/HF67", "org.apache.commons.lang3.exception.CloneFailedException");
      assertEquals(0.25, double0, 0.01);
      
      String string3 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.exception.CloneFailedException", "V!x-$09p3>", 950);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "org.apache.commons.lang3.exception.CloneFailedException", (CharSequence) "V!x-$09p3>", 950);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isEmpty("org.apache.commons.lang3.exception.CloneFailedException");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      String string0 = StringUtils.chop("[");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("", (-3190), "[");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      String string2 = StringUtils.uncapitalize("L2~M) T;1UdgDBOv8_");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("l2~M) T;1UdgDBOv8_", string2);
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      String string0 = StringUtils.upperCase("K'N\"/", (Locale) null);
      assertNotNull(string0);
      assertEquals("K'N\"/", string0);
      
      String string1 = StringUtils.lowerCase("Locale must not be null", (Locale) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("locale must not be null", string1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-44)).when(comparator0).compare(any() , any());
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(comparator0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains("Locale must not be null"));
      
      boolean boolean0 = priorityQueue0.add("locale must not be null");
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains("locale must not be null"));
      assertFalse(priorityQueue0.contains("Locale must not be null"));
      assertTrue(boolean0);
      
      boolean boolean1 = priorityQueue0.add("");
      assertEquals(2, priorityQueue0.size());
      assertTrue(priorityQueue0.contains("locale must not be null"));
      assertFalse(priorityQueue0.contains("Locale must not be null"));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, ':');
      assertEquals(2, priorityQueue0.size());
      assertNotNull(string2);
      assertTrue(priorityQueue0.contains("locale must not be null"));
      assertFalse(priorityQueue0.contains("Locale must not be null"));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(":locale must not be null", string2);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) ":locale must not be null", (CharSequence) "K'N\"/");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ":locale must not be null";
      charSequenceArray0[1] = (CharSequence) "Locale must not be null";
      boolean boolean3 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = ':';
      charArray0[1] = ':';
      charArray0[2] = ':';
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[0], charArray0);
      assertArrayEquals(new char[] {':', ':', ':'}, charArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(3, charArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replace("", "", "GM5z", (-1765));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeFirst("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.trim("Minimum abbreviation width with offset is %d");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "Minimum abbreviation width with offset is %d", (-1082));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", ", '");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 0, 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.replaceAll("GM5z", "", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("GM5z", string4);
      
      String string5 = StringUtils.chomp("Cannot store ", "Minimum abbreviation width with offset is %d");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Cannot store ", string5);
      
      String string6 = StringUtils.trimToNull("GM5z");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("GM5z", string6);
      
      String string7 = StringUtils.rightPad("", (-2254));
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertEquals("", string7);
      
      String string8 = StringUtils.truncate("", 5444, 0);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertEquals("", string8);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(""));
      
      Integer integer0 = new Integer((-1765));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals((-1765), (int)integer0);
      
      boolean boolean1 = arrayDeque0.add(integer0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(""));
      assertTrue(arrayDeque0.contains((-1765)));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = arrayDeque0.add("");
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains("GM5z"));
      assertTrue(arrayDeque0.contains(""));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string9 = StringUtils.join((Iterable<?>) arrayDeque0, "");
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertNotNull(string9);
      assertFalse(arrayDeque0.contains("GM5z"));
      assertTrue(arrayDeque0.contains(""));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string6));
      assertEquals("-1765", string9);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "Object varargs must not be null");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Object varargs must not be null
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet1.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "FJ\"<i'9FKW5`";
      String string0 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("FJ\"<i'9FKW5`", string0);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      
      String string1 = StringUtils.join(iterator0, 'Y');
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(string1);
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("FORMAT", string1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      intArray0[2] = 3986;
      intArray0[6] = 8192;
      String string2 = StringUtils.join(intArray0, 'Y');
      assertArrayEquals(new int[] {89, 0, 3986, 0, 0, 0, 8192, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("89Y0Y3986Y0Y0Y0Y8192Y0", string2);
      
      String string3 = StringUtils.leftPad(" vs ", (-2455), "KwJ!M>ss8");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" vs ", string3);
      
      String string4 = StringUtils.wrap(";$^_?N}$N z^}", 'Y');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Y;$^_?N}$N z^}Y", string4);
      
      String string5 = StringUtils.leftPad("Gn", 0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Gn", string5);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Y;$^_?N}$N z^}Y", (CharSequence) "Gn");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("V");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[1] = "K'N\"/";
      String[] stringArray2 = StringUtils.substringsBetween("K'N\"/", "K'N\"/", "V");
      assertNull(stringArray2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable(stringArray1[3]);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.reverse("K'N\"/");
      assertNotNull(string0);
      assertEquals("/\"N'K", string0);
      
      boolean boolean2 = StringUtils.endsWithIgnoreCase("/\"N'K", "K'N\"/");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = StringUtils.replace("', is neither of type Map.Entry nor an Array", "K'N\"/", "/\"N'K", 2543);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      
      String string2 = StringUtils.firstNonEmpty(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertNotNull(string2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("K'N\"/", string2);
      
      boolean boolean3 = StringUtils.equalsAnyIgnoreCase("V", (CharSequence[]) null);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      boolean boolean4 = StringUtils.contains((CharSequence) "K'N\"/", 2543);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      String string3 = StringUtils.deleteWhitespace("V");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("V", string3);
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("i$`i");
      assertNotNull(string0);
      assertEquals("I$`I", string0);
      
      String string1 = StringUtils.capitalize("I$`I");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("I$`I", string1);
      
      String string2 = StringUtils.rightPad("g%*FJ", (-2925), "vs ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("g%*FJ", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "g%*FJ";
      int int0 = StringUtils.indexOfAny((CharSequence) "g%*FJ", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.substringBeforeLast("I$`I", "g%*FJ");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("I$`I", string3);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "I$`I", (CharSequence) "vs ");
      assertFalse(int1 == int0);
      assertEquals(4, int1);
      
      int int2 = StringUtils.compareIgnoreCase("I$`I", "I$`I");
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("6", "6");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.unwrap("hF-u", ".VNQ0T6P>`x");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("hF-u", string1);
      
      String string2 = StringUtils.truncate("", 23, 23);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.stripEnd("yC`pyq'5up.", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("yC`pyq'5up.", string3);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Search and Replace array lengths don't match: ", charArray0);
      assertArrayEquals(new char[] {'S', 'S', 'x', 'x'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(1, int0);
      
      int int1 = StringUtils.compare("hF-u", "Y", true);
      assertFalse(int1 == int0);
      assertEquals(15, int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Search and Replace array lengths don't match: ";
      charSequenceArray0[1] = (CharSequence) ".VNQ0T6P>`x";
      charSequenceArray0[2] = (CharSequence) "yC`pyq'5up.";
      charSequenceArray0[3] = (CharSequence) "hF-u";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "Y";
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string4 = StringUtils.substringBeforeLast("Y", "iCA1$");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Y", string4);
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Invalid locale format: ");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Invalid locale format: ");
      assertEquals("Invalid locale format: ", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(23, charBuffer0.remaining());
      assertEquals(23, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(23, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(23, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = stack0.add(charBuffer0);
      assertEquals("[Invalid locale format: ]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertEquals("Invalid locale format: ", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(23, charBuffer0.remaining());
      assertEquals(23, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(23, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(23, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(stack0.contains(charBuffer0));
      assertTrue(boolean0);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.leftPad("Invalid locale format: ", 8192);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(charBuffer0, "Invalid locale format: ");
      assertEquals("Invalid locale format: ", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(23, charBuffer0.remaining());
      assertEquals(23, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(23, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(23, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) string0, (CharSequence) string0);
      assertEquals((-1), int0);
      
      boolean boolean2 = StringUtils.isNumericSpace(charBuffer0);
      assertEquals("Invalid locale format: ", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(23, charBuffer0.remaining());
      assertEquals(23, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(23, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(23, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.split("m,", "m,");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean3 = StringUtils.equals((CharSequence) "m,", (CharSequence) "m,");
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, "`]:qMn y$yI_}U=6!7tm']w9a>M`G;", (-1428), (-1167));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1428
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "The Array must not be null");
      assertTrue(stack0.empty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      char[] charArray0 = new char[7];
      Integer integer0 = new Integer(1115);
      assertNotNull(integer0);
      assertEquals(1115, (int)integer0);
      
      boolean boolean0 = stack0.add(integer0);
      assertFalse(stack0.isEmpty());
      assertEquals("[1115]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertTrue(stack0.contains(integer0));
      assertTrue(boolean0);
      
      charArray0[0] = 't';
      charArray0[1] = ':';
      charArray0[2] = 'u';
      charArray0[3] = 'L';
      charArray0[4] = '!';
      charArray0[5] = '0';
      charArray0[6] = 'v';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'t', ':', 'u', 'L', '!', '0', 'v'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.strip("The Array must not be null", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The Array must not be null", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.toRootUpperCase("0_5{!Y");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("0_5{!Y", string2);
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.removeAll("3\"6", "3\"6");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[2] = (CharSequence) "3\"6";
      boolean boolean0 = StringUtils.startsWithAny(charSequenceArray0[2], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("3\"6", 'o');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.removeEndIgnoreCase("", "r2=|c.r");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      String string0 = StringUtils.join(booleanArray0, '8', (-340), (-340));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Mx;gIV ]4p$k, }";
      charSequenceArray0[1] = (CharSequence) "Mx;gIV ]4p$k, }";
      String string1 = StringUtils.appendIfMissingIgnoreCase("Mx;gIV ]4p$k, }", "", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Mx;gIV ]4p$k, }", string1);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut(charSequenceArray0[1], charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("?Gsw+.h#+q_UlB<]p", "", false);
      assertFalse(int1 == int0);
      assertEquals(17, int1);
      
      String string2 = StringUtils.abbreviate("", "WKU}'{b&)yv WKU}'{b&)yv ", (-340), 8);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeIgnoreCase("vkq>oOzAvE4,|MSMg_+", "...");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("vkq>oOzAvE4,|MSMg_+", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "vkq>oOzAvE4,|MSMg_+", 4, 4);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.center("2/lUr_#v_{b}IoxONN", 4, "-]Y`9>>-]Y`9>>");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("2/lUr_#v_{b}IoxONN", string2);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "&", 773);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "2/lUr_#v_{b}IoxONN", 4);
      assertFalse(boolean0);
      
      String string3 = StringUtils.appendIfMissing("Invalid locale format: ", "&", stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Invalid locale format: &", string3);
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-75);
      byteArray0[5] = (byte)19;
      String string0 = StringUtils.join(byteArray0, 'O', 2147483645, 5);
      assertArrayEquals(new byte[] {(byte) (-28), (byte)0, (byte)0, (byte)0, (byte) (-75), (byte)19}, byteArray0);
      assertEquals(6, byteArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.reverseDelimited("", '#');
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.leftPad("81NGpx&", (int) (byte)0, 'D');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("81NGpx&", string2);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "81NGpx&", (CharSequence) "", (int) (byte)19);
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      
      Integer integer0 = new Integer((byte)0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      String string3 = StringUtils.reverseDelimited("Ab", 'O');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Ab", string3);
      
      charSequenceArray0[1] = (CharSequence) "Ab";
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = (CharSequence) "81NGpx&";
      String string4 = StringUtils.appendIfMissingIgnoreCase("Ab", (CharSequence) null, charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("Ab", string4);
      
      int int2 = StringUtils.ordinalIndexOf("Ab", "Ab", 3623);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      String string0 = StringUtils.removeEnd("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compareIgnoreCase("%gm{(\\", (String) null);
      assertEquals(1, int0);
      
      String string1 = StringUtils.repeat("e5F[5XXx/XYmYT;m&s(,", 1664);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      int int0 = 2483;
      String string0 = StringUtils.repeat("p0D`C>q'S?+isZz{", "p0D`C>q'S?+isZz{", 2483);
      assertNotNull(string0);
      
      int int1 = StringUtils.length("p0D`C>q'S?+isZz{");
      assertFalse(int1 == int0);
      assertEquals(16, int1);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 16;
      char char0 = 'm';
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 'm', 16, 2483);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", 4, "?@;uN");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("?@;u", string1);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains("WKU}'{b&)yv "));
      
      String string2 = StringUtils.upperCase("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.ordinalIndexOf("", "?@;u", (-6));
      assertEquals((-1), int0);
      
      String string3 = StringUtils.rotate(", Length: 0", 32);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" Length: 0,", string3);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte) (-75);
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte) (-75);
      byteArray0[8] = (byte) (-75);
      String string4 = StringUtils.join(byteArray0, 'l', 64, (int) (byte)49);
      assertArrayEquals(new byte[] {(byte)0, (byte)16, (byte) (-75), (byte)49, (byte)49, (byte)0, (byte)49, (byte) (-75), (byte) (-75)}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.isAlphaSpace(" Length: 0,");
      assertFalse(boolean0);
      
      String string5 = StringUtils.toRootLowerCase("?@;u");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("?@;u", string5);
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-218));
      assertNull(stringArray0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "X>acriticalMarks}+");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("X>acriticalMarks}+");
      assertFalse(boolean0);
      
      String string0 = StringUtils.wrapIfMissing("kz`q<nT ", 'k');
      assertNotNull(string0);
      assertEquals("kz`q<nT k", string0);
      
      String string1 = StringUtils.join((boolean[]) null, 'A');
      assertNull(string1);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "b/%#(bk.", 322);
      assertNull(stringArray0);
      
      String string0 = StringUtils.center(".h_t/V!0dAp^hMYId,", 1569);
      assertNotNull(string0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "X>d[{P|gZ\"r/m6");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string1 = StringUtils.getDigits("kz6q'nT ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("6", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace("X>d[{P|gZ\"r/m6");
      assertFalse(boolean0);
      
      String string2 = StringUtils.appendIfMissing("maxWith cannot be negative", "6", (CharSequence[]) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("maxWith cannot be negative6", string2);
      
      String string3 = StringUtils.wrapIfMissing("kz6q'nT ", 'k');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("kz6q'nT k", string3);
      
      String string4 = StringUtils.stripAccents("kz6q'nT k");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("kz6q'nT k", string4);
      
      boolean boolean1 = StringUtils.startsWith("kz6q'nT k", ".h_t/V!0dAp^hMYId,");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.replacePattern("Minimum abbreviation width is %d", "maxWith cannot be negative6", "*9^fisTx`zzJ]M%H*9^fisTx`zzJ]M%H");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Minimum abbreviation width is %d", string5);
      
      boolean boolean2 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int0 = StringUtils.ordinalIndexOf("*9^fisTx`zzJ]M%H*9^fisTx`zzJ]M%H", "Minimum abbreviation width is %d", 1157);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.swapCase("P<jzRUZN8#~");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("p<JZruzn8#~", string6);
      
      String string7 = StringUtils.repeat(".h_t/V!0dAp^hMYId,", "p<JZruzn8#~", (-107));
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      
      String string8 = StringUtils.right("kz6q'nT k", 100);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertEquals("kz6q'nT k", string8);
      
      String string9 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertEquals("", string9);
      
      String string10 = StringUtils.replaceChars("maxWith cannot be negative", '=', '\"');
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string1));
      assertEquals("maxWith cannot be negative", string10);
      
      String string11 = StringUtils.capitalize((String) null);
      assertNull(string11);
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      String string0 = StringUtils.difference("yZ?L_R+8p0-EIxOA", "The character ");
      assertNotNull(string0);
      assertEquals("The character ", string0);
      
      String string1 = StringUtils.leftPad("yZ?L_R+8p0-EIxOA", 16);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("yZ?L_R+8p0-EIxOA", string1);
      
      String string2 = StringUtils.stripEnd("yZ?L_R+8p0-EIxOA", "vT&.5L0");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("yZ?L_R+8p0-EIxOA", string2);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 'I';
      charArray0[2] = 'N';
      charArray0[3] = 'a';
      charArray0[5] = '&';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "yZ?L_R+8p0-EIxOA", charArray0);
      assertArrayEquals(new char[] {'K', 'I', 'N', 'a', '\u0000', '&'}, charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      String string0 = StringUtils.reverseDelimited("0d?guP\"m| :=9qdr:", '/');
      assertNotNull(string0);
      assertEquals("0d?guP\"m| :=9qdr:", string0);
      
      String string1 = StringUtils.leftPad("81NGp?&", (int) '/', '/');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("////////////////////////////////////////81NGp?&", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "////////////////////////////////////////81NGp?&", "@:%8");
      assertEquals(40, int0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '/';
      charArray0[1] = '/';
      charArray0[2] = '/';
      boolean boolean0 = StringUtils.containsNone((CharSequence) "@:%8", charArray0);
      assertArrayEquals(new char[] {'/', '/', '/', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Invalid locale format: ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      char char0 = ' ';
      char char1 = 'u';
      String string0 = StringUtils.replaceChars("Invalid locale format: ", ' ', 'u');
      assertNotNull(string0);
      assertEquals("Invalidulocaleuformat:u", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Invalidulocaleuformat:u", "Invalidulocaleuformat:u");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsNone((CharSequence) "Invalidulocaleuformat:u", "Invalid locale format: ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = "I1yTE5m8";
      int int0 = 1866;
      String string2 = StringUtils.substring("I1yTE5m8", 1866, 1866);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.removeIgnoreCase("", "Invalidulocaleuformat:u");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("Invalidulocaleuformat:u"));
      
      LinkedHashSet<CharBuffer> linkedHashSet0 = new LinkedHashSet<CharBuffer>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      boolean boolean2 = linkedHashSet0.contains("Invalid locale format: ");
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = arrayList0.retainAll(linkedHashSet0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(arrayList0.contains("Invalid locale format: "));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      char char2 = 'H';
      int int1 = 8;
      int int2 = 160;
      // Undeclared exception!
      try { 
        arrayList0.set(1866, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1866, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      String string0 = StringUtils.removeIgnoreCase((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.chomp("");
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.toRootLowerCase("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals("supplied value must be a valid byte literal between -32768 and 32767: [", string2);
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "Strings must not be null";
      objectArray0[6] = (Object) "Strings must not be null";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      String string0 = StringUtils.join(objectArray0, "y>, $;J`[[C&Y\"SX");
      assertEquals(7, objectArray0.length);
      assertNotNull(string0);
      assertEquals("Strings must not be nully>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SX", string0);
      
      String string1 = StringUtils.unwrap("`>f3", ".VNQ0T6P>`x");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`>f3", string1);
      
      String string2 = StringUtils.substring("Strings must not be nully>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SX", 8, 8);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.substring("Strings must not be nully>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SX", 160, 17);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("#YQ2sCZ*Mt{\"9-P1", supplier0);
      assertNotNull(string0);
      assertEquals("#YQ2sCZ*Mt{\"9-P1", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("en&<-wH0NMyRQ", "^", "Threshold must not be negative", 76);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("en&<-wH0NMyRQ", string1);
      
      String string2 = StringUtils.prependIfMissing("#YQ2sCZ*Mt{\"9-P1", "#YQ2sCZ*Mt{\"9-P1", (CharSequence[]) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("#YQ2sCZ*Mt{\"9-P1", string2);
      
      boolean boolean1 = StringUtils.containsAny((CharSequence) "#YQ2sCZ*Mt{\"9-P1", (char[]) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      String string0 = StringUtils.difference("org.apache.commons.lang3.ObjectUtils$Null", (String) null);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ObjectUtils$Null", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "org.apache.commons.lang3.ObjectUtils$Null", (char[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.mid("m@0wsW/FD$'~uv0", 8144, 8144);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.isWhitespace("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.capitalize(" vz;");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" vz;", string2);
      
      String string3 = StringUtils.stripToNull("aMOx%qu04n6,nT");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("aMOx%qu04n6,nT", string3);
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\r", (CharSequence) "\r");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.stripAccents("*c'M");
      assertNotNull(string0);
      assertEquals("*c'M", string0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "*c'M", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      
      String string1 = StringUtils.join((float[]) null, '0');
      assertNull(string1);
      
      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "*c'M", (CharSequence) null);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      int int3 = StringUtils.countMatches((CharSequence) "", '4');
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("', is neither of type Map.Entry nor an Array", (String) null, "m");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      String string1 = StringUtils.replacePattern("', is neither of type Map.Entry nor an Array", "2", "m");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      
      String string2 = StringUtils.abbreviateMiddle("v)zE,>=4_OoF?Nko", (String) null, (-730));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("v)zE,>=4_OoF?Nko", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[1] = (CharSequence) "v)zE,>=4_OoF?Nko";
      String string3 = StringUtils.right("v)zE,>=4_OoF?Nko", (-730));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);
      assertNull(stringArray0);
      
      String string4 = StringUtils.substringBefore("', is neither of type Map.Entry nor an Array", (-730));
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("', is neither of type Map.Entry nor an Array", string4);
      
      String string5 = StringUtils.replace("fLhNt! hp", " has no clone method", "...", (-441));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("fLhNt! hp", string5);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "fLhNt! hp", (CharSequence) "fLhNt! hp", 2);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      String string7 = StringUtils.substringBeforeLast("", "'xDns}iDqjM");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string6));
      assertEquals("", string7);
      
      int int1 = StringUtils.lastOrdinalIndexOf(" vs ", charSequenceArray0[0], (-441));
      assertEquals(5, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join(iterator0, 'Y');
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(string0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals("FORMAT", string0);
      
      String string1 = StringUtils.abbreviate((String) null, "[", 2311, 2311);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.removePattern("Strings must not be null", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Strings must not be null", string2);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)4;
      String string3 = StringUtils.toString(byteArray0, (String) null);
      assertArrayEquals(new byte[] {(byte)4}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("\u0004", string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "\u0004", (CharSequence) "Strings must not be null");
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("(I&Jb>ngyFwb", "`]:qMn y$yI_}U=6");
      assertFalse(int1 == int0);
      assertEquals((-56), int1);
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      String string0 = StringUtils.upperCase("K'N\"/", (Locale) null);
      assertNotNull(string0);
      assertEquals("K'N\"/", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "K'N\"/", (CharSequence) "K'N\"/");
      assertEquals(0, int0);
      
      String string1 = StringUtils.lowerCase("Locale must not be null", (Locale) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("locale must not be null", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(comparator0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(""));
      
      boolean boolean0 = priorityQueue0.add("");
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains(""));
      assertFalse(priorityQueue0.contains("Locale must not be null"));
      assertTrue(boolean0);
      
      String string2 = StringUtils.replacePattern("", "Search and Replace array lengths don't match: ", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.right("Z]D[MF(", (-730));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray1 = StringUtils.splitByCharacterType("");
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      String string4 = StringUtils.substringBefore("Z]D[MF(", (-2900));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Z]D[MF(", string4);
      
      String string5 = StringUtils.replace(" ", (String) null, " ", (-2243));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals(" ", string5);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "K'N\"/", (-2900));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string6 = StringUtils.getCommonPrefix(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      String string7 = StringUtils.substringBeforeLast("", (String) null);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertEquals("", string7);
      
      int int2 = StringUtils.lastOrdinalIndexOf("", "", (-584));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      String string0 = StringUtils.abbreviate("", (String) null, (-979), (-1471));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.abbreviate("", "q2)zLg4f'xrX", 1490, 11);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replace("ative", "", "ative");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ative", string2);
      
      String string3 = StringUtils.wrapIfMissing("uX;4Y", 'L');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("LuX;4YL", string3);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      String string0 = "R g!uKRu ghqx#hq#!u1";
      String string1 = StringUtils.substringAfter("Index: ", "R g!uKRu ghqx#hq#!u1");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = "9n0C";
      String string3 = StringUtils.replaceFirst("9n0C", "9n0C", "R g!uKRu ghqx#hq#!u1");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("R g!uKRu ghqx#hq#!u1", string3);
      
      String string4 = StringUtils.substringBeforeLast("", "org.apache.commons.lang3.Charsets");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.leftPad("+>", 26);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("                        +>", string5);
      
      String string6 = "9yiggd\\+un0";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("+>", "', is neither of type Map.Entry nor an Array", 2, (-3027));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 45
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      String string0 = StringUtils.removeEnd("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.strip("<FL:A", ", Length: 0");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<FL:A", string1);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace("WKU}'{b&)yv ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.join((double[]) null, '1');
      assertNull(string2);
      
      String string3 = StringUtils.difference("6tH[ww@+", "<FL:A");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("<FL:A", string3);
      
      String string4 = StringUtils.toRootLowerCase((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", 'i');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceAll("", "", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.trimToEmpty("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 0, 108);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.ordinalIndexOf(charSequenceArray0[0], "", (-1));
      assertEquals(1, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)119;
      String string4 = StringUtils.join(byteArray0, 'O', 0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte) (-20), (byte)0, (byte)14, (byte) (-75), (byte)0, (byte)119}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.toRootLowerCase("");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("*'D{9~>B^!TsL");
      assertNotNull(string0);
      assertEquals("*'d{9~>b^!tsl", string0);
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "u!y0w'}l#gr_w");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      String string1 = StringUtils.defaultIfEmpty("`]:qMn y$yI_}U=6", "Object varargs must not be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`]:qMn y$yI_}U=6", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "`]:qMn y$yI_}U=6");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.stripEnd("He76uqq", "ch");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("He76uqq", string3);
      
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string4);
      
      String string5 = StringUtils.removeStart("", "`]:qMn y$yI_}U=6");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
      
      int int0 = StringUtils.indexOf((CharSequence) "u!y0w'}l#gr_w", (CharSequence) "He76uqq", 107);
      assertEquals((-1), int0);
      
      String string6 = StringUtils.join((Object[]) null, '#');
      assertNull(string6);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      String string0 = StringUtils.chop("\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = new String[0];
      String string1 = StringUtils.replaceEachRepeatedly("tGsGN?`ctgw", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("tGsGN?`ctgw", string1);
      
      String string2 = StringUtils.replaceChars("", "The character ", "\r");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultIfEmpty("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("$Cb\"k}J", "9yiggd+un0", "The Array must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("$Cb\"k}J", string2);
      
      String string3 = StringUtils.stripEnd("t8,5AZoG<t8,5AZoG<", "g%*]FJ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("t8,5AZoG<t8,5AZoG<", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "$Cb\"k}J";
      charSequenceArray0[1] = (CharSequence) "WKU}'{b&)yv ";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string4);
      
      String string5 = StringUtils.removeStart("W]Ra", "81NGpx&");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("W]Ra", string5);
      
      String string6 = StringUtils.deleteWhitespace("W]Ra");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertEquals("W]Ra", string6);
      
      int int0 = new Integer(76);
      assertEquals(76, int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "g%*]FJ", '`');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      String string7 = StringUtils.join(charArray0, '`');
      assertArrayEquals(new char[] {'`', '`', '`', '`'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertEquals("```````", string7);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "t8,5AZoG<t8,5AZoG<", charArray0);
      assertArrayEquals(new char[] {'`', '`', '`', '`'}, charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string8 = StringUtils.substringBetween("{W`=", "d4FwOMF3u+AQ");
      assertNull(string8);
      
      String string9 = StringUtils.substringBetween("", "T~`Z", "W]Ra");
      assertNull(string9);
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = StringUtils.trimToEmpty("Sa4@8Mxeq:;V~p");
      assertNotNull(string0);
      
      String string1 = "4+ceEK]%K,c2";
      String string2 = StringUtils.abbreviateMiddle((String) null, "4+ceEK]%K,c2", (-5400));
      assertNull(string2);
      
      String string3 = StringUtils.substringAfter("?0UnfLtqQX ", 2270);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '#';
      charArray0[1] = '@';
      charArray0[2] = '*';
      charArray0[3] = 'g';
      charArray0[4] = ';';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'#', '@', '*', 'g', ';'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        Charset.isSupported("Search and Replace array lengths don't match: ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Search and Replace array lengths don't match: 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("', is neither of type Map.Entry nor an Array", (String) null, "m");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.DISPLAY;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.FORMAT;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.DISPLAY;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.FORMAT;
      locale_CategoryArray0[6] = locale_Category6;
      Locale.Category locale_Category7 = Locale.Category.FORMAT;
      locale_CategoryArray0[7] = locale_Category7;
      Locale.Category locale_Category8 = Locale.Category.DISPLAY;
      locale_CategoryArray0[8] = locale_Category8;
      String string1 = StringUtils.join(locale_CategoryArray0);
      assertEquals(9, locale_CategoryArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("FORMATDISPLAYDISPLAYDISPLAYFORMATDISPLAYFORMATFORMATDISPLAY", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "2", (CharSequence) "2", 84);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("', is neither of type Map.Entry nor an Array", (String) null, "m");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      String string1 = StringUtils.trimToNull("m");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("m", string1);
      
      String string2 = StringUtils.substring("', is neither of type Map.Entry nor an Array", (-1176));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
      
      boolean boolean0 = StringUtils.containsWhitespace("m");
      assertFalse(boolean0);
      
      String string3 = StringUtils.wrapIfMissing("~`vxGOhcNnkz6q'nT ", "negative");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("negative~`vxGOhcNnkz6q'nT negative", string3);
      
      String string4 = StringUtils.unwrap((String) null, "negative~`vxGOhcNnkz6q'nT negative");
      assertNull(string4);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-1176);
      intArray0[1] = (-1176);
      intArray0[2] = (-1176);
      intArray0[3] = (-1176);
      String string5 = StringUtils.join(intArray0, 'q', 1362, (-1176));
      assertArrayEquals(new int[] {(-1176), (-1176), (-1176), (-1176)}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      String string0 = StringUtils.removeEnd("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = (-880);
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-880);
      intArray0[6] = 9;
      String string1 = StringUtils.join(intArray0, ']', 6, (-2922));
      assertArrayEquals(new int[] {(-880), 1, 1, 0, 0, (-880), 9}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviateMiddle("WKU}'{b&)yv ", "(F$LjQ+yQ|", 1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("WKU}'{b&)yv ", string2);
      
      String string3 = StringUtils.substringAfter("~`vxGOhcNnkz6q'nT negative", 13);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "(F$LjQ+yQ|", (char[]) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.unwrap("hF-u", ".VNQ0T6P>`x");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("hF-u", string1);
      
      int[] intArray0 = new int[0];
      String string2 = StringUtils.substringAfter("hF-u", 1);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.replace("hF-u", "2uA_@PE", "", (-5400));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("hF-u", string3);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "hF-u", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width is %d", '#');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) '#';
      intArray0[6] = (int) '#';
      intArray0[3] = (int) '#';
      intArray0[4] = (int) '#';
      intArray0[6] = (int) '#';
      intArray0[6] = (int) '#';
      String string0 = StringUtils.join(intArray0, '#', 0, 1);
      assertArrayEquals(new int[] {35, 35, 0, 35, 35, 0, 35, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(string0);
      assertEquals("35", string0);
      
      String string1 = StringUtils.abbreviateMiddle("', is neither of type Map.Entry nor an Array", "}`v5X~g", (-5400));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      
      String string2 = StringUtils.substringAfter("Minimum abbreviation width is %d", 24);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '#';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Minimum abbreviation width is %d", charArray0);
      assertArrayEquals(new char[] {'#'}, charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.repeat('Q', 83);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ", string3);
      
      String string4 = StringUtils.abbreviate("T 9WPJ\"J|rUq", 35);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("T 9WPJ\"J|rUq", string4);
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      String string0 = StringUtils.rightPad("l %", 0, '0');
      assertNotNull(string0);
      assertEquals("l %", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "l %", (CharSequence) "l %");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      String string1 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'0', '0', '0', '0'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0000", string1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) '0';
      objectArray0[1] = (Object) "l %";
      Object[] objectArray1 = enumSet0.toArray(objectArray0);
      assertEquals(1, enumSet0.size());
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertEquals(2, objectArray0.length);
      assertEquals(2, objectArray1.length);
      assertNotNull(objectArray1);
      assertTrue(enumSet0.contains(locale_Category0));
      
      enumSet0.clear();
      assertEquals(0, enumSet0.size());
      assertFalse(enumSet0.contains(locale_Category0));
      
      boolean boolean1 = enumSet0.add(locale_Category0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.replaceOnce((String) null, "l %", "0000");
      assertNull(string2);
      
      String string3 = StringUtils.substring((String) null, 43);
      assertNull(string3);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "l %";
      stringArray0[2] = "0000";
      stringArray0[3] = "p\"4g}G<?![si";
      stringArray0[4] = "Sz";
      stringArray0[5] = "0000";
      stringArray0[6] = "0000";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertEquals("l %", string4);
      
      String string5 = StringUtils.abbreviate("0000", "The Array must not be null", 2359, 43);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertEquals("0000", string5);
      
      String string6 = StringUtils.substringBetween("0000", "0000");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      String string0 = StringUtils.center("$", 1745);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeEndIgnoreCase("?spo2\"%c", "Locale must not be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("?spo2\"%c", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string2 = StringUtils.replace("?spo2\"%c", "?spo2\"%c", "LFC4yE)>l6nMquR<Yul");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("LFC4yE)>l6nMquR<Yul", string2);
      
      charSequenceArray0[0] = (CharSequence) "LFC4yE)>l6nMquR<Yul";
      charSequenceArray0[1] = (CharSequence) "?spo2\"%c";
      String string3 = StringUtils.substringBefore((String) null, "LFC4yE)>l6nMquR<Yul");
      assertNull(string3);
      
      charSequenceArray0[2] = (CharSequence) null;
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.replaceAll("|u]oeVX$%", (String) null, "$");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("|u]oeVX$%", string4);
      
      String string5 = StringUtils.right("LFC4yE)>l6nMquR<Yul", 1745);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("LFC4yE)>l6nMquR<Yul", string5);
      
      String string6 = StringUtils.abbreviate((String) null, "?spo2\"%c", (-755), 1745);
      assertNull(string6);
      
      String string7 = StringUtils.removeStart("|u]oeVX$%", "|u]oeVX$%");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      
      String string8 = StringUtils.substring((String) null, 1745);
      assertNull(string8);
      
      boolean boolean1 = StringUtils.startsWith((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      String string0 = StringUtils.repeat("1", 0);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.swapCase("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.trimToNull("LPLD,'}dX)[t|YNWb");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("LPLD,'}dX)[t|YNWb", string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "1", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string3 = StringUtils.join(iterator0, ')');
      assertEquals(1, enumSet0.size());
      assertNotNull(string3);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("FORMAT", string3);
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      assertEquals(1, enumSet1.size());
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      EnumSet<Locale.Category> enumSet2 = enumSet1.clone();
      assertEquals(1, enumSet1.size());
      assertEquals(1, enumSet2.size());
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(enumSet2, enumSet0);
      assertNotSame(enumSet2, enumSet1);
      assertNotNull(enumSet2);
      assertTrue(enumSet1.contains(locale_Category0));
      assertTrue(enumSet2.contains(locale_Category0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      assertTrue(enumSet2.equals((Object)enumSet1));
      assertTrue(enumSet2.equals((Object)enumSet0));
      
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      boolean boolean0 = enumSet1.add(locale_Category1);
      assertEquals(2, enumSet1.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(enumSet1, enumSet2);
      assertNotSame(locale_Category1, locale_Category0);
      assertTrue(enumSet1.contains(locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(enumSet1.equals((Object)enumSet2));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(boolean0);
      
      int int2 = StringUtils.length("");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase("LPLD,'}dX)[t|YNWb", "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.abbreviate("LPLD,'}dX)[t|YNWb", "", 10, 10);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("LPLD,'}dX)", string4);
      
      boolean boolean3 = StringUtils.isMixedCase("FORMAT");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.abbreviate("`]:qMn y$yI_}U=6!7tm']w9a>M`G;", "", 16, 80);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`]:qMn y$yI_}U=6!7tm']w9a>M`G;", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "`]:qMn y$yI_}U=6!7tm']w9a>M`G;", 1442, 1442);
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "Sy8<i}1D(}8wy83yH", 253);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      String string0 = StringUtils.chop("V");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.difference("V", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBetween("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.substringAfterLast("org.apache.commons.lang3.exception.CloneFailedException", 1280);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      String string0 = StringUtils.chop("V");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.difference("V", "|UgFzRT[Ni?$Ged");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("|UgFzRT[Ni?$Ged", string1);
      
      String[] stringArray0 = StringUtils.split("3J/|LzDST@j68", '7');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.removeAll("3\"6", "3\"6");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny(charSequenceArray0[2], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeIgnoreCase(">TNCU=H", ">TNCU=H");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) ">TNCU=H", (CharSequence) "", 1);
      assertEquals(1, int0);
      
      boolean boolean1 = StringUtils.isNumericSpace(charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.contains((CharSequence) "3\"6", 1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      int int1 = StringUtils.compare("9Yt#4'[z;MHR0", "A<_Pt5C|<8N", false);
      assertFalse(int1 == int0);
      assertEquals((-8), int1);
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      String string0 = "Minimum abbreviation width with offset is %d";
      String string1 = StringUtils.replaceIgnoreCase("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      
      String string2 = "~`vxGOhcNnkz6q'nT negative";
      String string3 = StringUtils.center("~`vxGOhcNnkz6q'nT negative", 5, "Minimum abbreviation width with offset is %d");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("~`vxGOhcNnkz6q'nT negative", string3);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      Locale locale1 = locale0.stripExtensions();
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      
      Locale locale2 = (Locale)locale1.clone();
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fr", locale2.getLanguage());
      assertEquals("", locale2.getVariant());
      assertEquals("fr_CA", locale2.toString());
      assertEquals("fra", locale2.getISO3Language());
      assertEquals("CAN", locale2.getISO3Country());
      assertEquals("CA", locale2.getCountry());
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      assertTrue(locale2.equals((Object)locale0));
      assertTrue(locale2.equals((Object)locale1));
      
      Locale locale3 = locale1.stripExtensions();
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fra", locale3.getISO3Language());
      assertEquals("", locale3.getVariant());
      assertEquals("fr_CA", locale3.toString());
      assertEquals("CAN", locale3.getISO3Country());
      assertEquals("fr", locale3.getLanguage());
      assertEquals("CA", locale3.getCountry());
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale0, locale3);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertSame(locale1, locale3);
      assertNotSame(locale3, locale2);
      assertSame(locale3, locale0);
      assertSame(locale3, locale1);
      assertNotNull(locale3);
      assertTrue(locale0.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale2));
      assertTrue(locale3.equals((Object)locale2));
      
      String string4 = locale1.getDisplayLanguage(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale0, locale3);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertSame(locale1, locale3);
      assertNotNull(string4);
      assertTrue(locale0.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("fran\u00E7ais", string4);
      
      String string5 = "=luWB~El#`}+9p";
      Locale locale4 = Locale.forLanguageTag("=luWB~El#`}+9p");
      assertEquals("", locale4.toString());
      assertEquals("", locale4.getVariant());
      assertEquals("", locale4.getISO3Country());
      assertEquals("", locale4.getISO3Language());
      assertEquals("", locale4.getCountry());
      assertEquals("", locale4.getLanguage());
      assertNotSame(locale4, locale0);
      assertNotSame(locale4, locale2);
      assertNotSame(locale4, locale3);
      assertNotSame(locale4, locale1);
      assertNotNull(locale4);
      assertFalse(locale4.equals((Object)locale0));
      assertFalse(locale4.equals((Object)locale2));
      assertFalse(locale4.equals((Object)locale3));
      assertFalse(locale4.equals((Object)locale1));
      
      String string6 = locale1.getDisplayScript();
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertNotSame(locale0, locale4);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale0, locale3);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertSame(locale1, locale3);
      assertNotSame(locale1, locale4);
      assertNotNull(string6);
      assertFalse(locale0.equals((Object)locale4));
      assertTrue(locale0.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertEquals("", string6);
      
      String string7 = StringUtils.upperCase("]acc AH#Y", locale1);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("CA", locale1.getCountry());
      assertNotSame(locale0, locale4);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale0, locale3);
      assertNotSame(locale1, locale2);
      assertSame(locale1, locale0);
      assertSame(locale1, locale3);
      assertNotSame(locale1, locale4);
      assertNotNull(string7);
      assertFalse(locale0.equals((Object)locale4));
      assertTrue(locale0.equals((Object)locale2));
      assertTrue(locale1.equals((Object)locale2));
      assertFalse(locale1.equals((Object)locale4));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals("]ACC AH#Y", string7);
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(locale0, locale4);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale0, locale3);
      assertNotNull(set0);
      assertFalse(set0.contains(string7));
      assertFalse(locale0.equals((Object)locale4));
      assertTrue(locale0.equals((Object)locale2));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(locale0, locale4);
      assertNotSame(locale0, locale2);
      assertSame(locale0, locale1);
      assertSame(locale0, locale3);
      assertNotNull(list0);
      assertFalse(list0.contains(string7));
      assertFalse(set0.contains(string7));
      assertFalse(locale0.equals((Object)locale4));
      assertTrue(locale0.equals((Object)locale2));
      
      String string8 = StringUtils.replaceChars("Minimum abbreviation width with offset is %d", 't', 't');
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertTrue(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string7));
      assertEquals("Minimum abbreviation width with offset is %d", string8);
      
      int[] intArray0 = StringUtils.toCodePoints("Minimum abbreviation width with offset is %d");
      assertEquals(44, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Minimum abbreviation width with offset is %d", (CharSequence) "]ACC AH#Y", 321);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, 't', 321, 1653);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 321
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast(" e]))1N%E{z", 948);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultString((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.isAsciiPrintable(" e]))1N%E{z");
      assertTrue(boolean0);
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) " e]))1N%E{z";
      objectArray0[3] = (Object) " e]))1N%E{z";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) " e]))1N%E{z";
      objectArray0[7] = (Object) null;
      String string2 = StringUtils.substring((String) null, 160, 10);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 0, (String) null);
      assertNull(string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      int int0 = 1692;
      String string1 = StringUtils.substring((String) null, (-1895), 1692);
      assertNull(string1);
      
      String string2 = StringUtils.removeEndIgnoreCase((String) null, "n9");
      assertNull(string2);
      
      LinkedHashSet<CharBuffer> linkedHashSet0 = new LinkedHashSet<CharBuffer>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      int int1 = 128;
      int int2 = 1852;
      CharBuffer charBuffer0 = CharBuffer.allocate(1852);
      assertEquals(1852, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(1852, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1852, charBuffer0.remaining());
      assertEquals(1852, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = charBuffer0.compact();
      assertEquals(1852, charBuffer0.position());
      assertEquals(1852, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertEquals(1852, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1852, charBuffer1.capacity());
      assertEquals(1852, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(1852, charBuffer1.position());
      assertTrue(charBuffer1.hasArray());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      
      boolean boolean0 = linkedHashSet0.add(charBuffer0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1852, charBuffer0.position());
      assertEquals(1852, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.length());
      assertEquals(1852, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertSame(charBuffer0, charBuffer1);
      assertTrue(linkedHashSet0.contains(charBuffer1));
      assertTrue(boolean0);
      
      String string3 = "7r_-P#ta} ^@a";
      // Undeclared exception!
      try { 
        charBuffer1.append(charSequenceArray0[3], 1852, (-12));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      ArrayList<Integer> arrayList0 = new ArrayList<Integer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      TreeSet<Integer> treeSet0 = new TreeSet<Integer>(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(treeSet0);
      
      String string0 = StringUtils.join((Iterable<?>) treeSet0, 'a');
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf("", "", 2072);
      assertEquals(0, int0);
      
      String string1 = StringUtils.substringAfter("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'a';
      charArray0[1] = 'a';
      charArray0[2] = ' ';
      String string2 = StringUtils.join(charArray0, ' ', 0, (-1170));
      assertArrayEquals(new char[] {'a', 'a', ' '}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, '=', (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfAny("", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.split(" ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.stripAccents("*c'M");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("*c'M", string1);
      
      String string2 = StringUtils.abbreviate("", (-1), (-1));
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int2 = StringUtils.lastOrdinalIndexOf("{I?oAkkuE[2~j[R%olb", "", 3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(19, int2);
      
      String string3 = StringUtils.stripToEmpty("b$wy&:");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("b$wy&:", string3);
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.capitalize("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.ordinalIndexOf("", "", 1339);
      assertEquals(0, int0);
      
      String string2 = StringUtils.join((byte[]) null, '`', 0, 97);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.toRootLowerCase("gv+U}g");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("gv+u}g", string3);
      
      String string4 = StringUtils.trim((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      String string0 = StringUtils.strip("Aborting to protect against StackOverflowError - output of one loop is the input of another", "', is neither of typK Map.Entry nor anuArray");
      assertNotNull(string0);
      assertEquals("borting to protect against StackOverflowError - output of one l", string0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      String string1 = StringUtils.removeEnd("Aborting to protect against StackOverflowError - output of one loop is the input of another", "borting to protect against StackOverflowError - output of one l");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of another", string1);
      
      boolean boolean0 = StringUtils.isMixedCase("};EI$@6I-,@ihC*Pr|L");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("', is neither of typK Map.Entry nor anuArray");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.removeStart("org.apache.commons.lang3.ObjectUtils", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ObjectUtils", string2);
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbrevTation width is %Q", '.');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '.';
      intArray0[6] = (int) '.';
      String string0 = StringUtils.prependIfMissingIgnoreCase("Minimum abbrevTation width is %Q", "Minimum abbrevTation width is %Q", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Minimum abbrevTation width is %Q", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Minimum abbrevTation width is %Q", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeAll("maxWith cannot be negative", "v=lMewCTb0z$S9&Y");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string1);
      
      int int0 = StringUtils.lastIndexOfAny("maxWith cannot be negative", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.split("Minimum abbrevTation width is %Q", "maxWith cannot be negative", (-1));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "v=lMewCTb0z$S9&Y", (CharSequence) "maxWith cannot be negative");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.removeStartIgnoreCase("9VL$3N", "v=lMewCTb0z$S9&Y");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("9VL$3N", string2);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "v=lMewCTb0z$S9&Y", (CharSequence) "9VL$3N");
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      boolean boolean2 = StringUtils.isAllLowerCase("maxWith cannot be negative");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      String string0 = StringUtils.upperCase("K'N\"/", (Locale) null);
      assertNotNull(string0);
      assertEquals("K'N\"/", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "K'N\"/", (CharSequence) "K'N\"/");
      assertEquals(0, int0);
      
      String string1 = StringUtils.lowerCase("Locale must not be null", (Locale) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("locale must not be null", string1);
      
      String[] stringArray0 = new String[0];
      String string2 = StringUtils.replaceEachRepeatedly("d|F%nf$?i", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("d|F%nf$?i", string2);
      
      String string3 = StringUtils.join((long[]) null, 'g');
      assertNull(string3);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.startsWithAny("Locale must not be null", stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      String string0 = StringUtils.removeEnd("`]:qMn y$yI_}U=6", "u!y0w'}l#gr_w");
      assertNotNull(string0);
      assertEquals("`]:qMn y$yI_}U=6", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[14];
      charSequenceArray0[0] = (CharSequence) "`]:qMn y$yI_}U=6";
      charSequenceArray0[2] = (CharSequence) "`]:qMn y$yI_}U=6";
      charSequenceArray0[3] = (CharSequence) "`]:qMn y$yI_}U=6";
      charSequenceArray0[5] = (CharSequence) "`]:qMn y$yI_}U=6";
      charSequenceArray0[6] = (CharSequence) "`]:qMn y$yI_}U=6";
      charSequenceArray0[7] = (CharSequence) "`]:qMn y$yI_}U=6";
      charSequenceArray0[8] = (CharSequence) "`]:qMn y$yI_}U=6";
      String string1 = StringUtils.defaultIfEmpty("`]:qMn y$yI_}U=6", "Object varargs must not be null");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("`]:qMn y$yI_}U=6", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("`]:qMn y$yI_}U=6", "", "`]:qMn y$yI_}U=6");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("`]:qMn y$yI_}U=6", string2);
      
      String string3 = StringUtils.join((long[]) null, '<');
      assertNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, (String) null, (-2066), (int) '<');
      assertNull(string4);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("Object varargs must not be null", charSequenceArray0[3]);
      assertEquals(14, charSequenceArray0.length);
      assertFalse(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = 'h';
      charArray0[6] = '<';
      boolean boolean1 = StringUtils.containsNone(charSequenceArray0[3], charArray0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', 'h', '<'}, charArray0);
      assertEquals(14, charSequenceArray0.length);
      assertEquals(7, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1874);
      shortArray0[1] = (short)603;
      shortArray0[2] = (short)603;
      shortArray0[3] = (short)3037;
      shortArray0[4] = (short) (-1176);
      shortArray0[5] = (short) (-3);
      shortArray0[6] = (short) (-1780);
      String string5 = StringUtils.join(shortArray0, 'l');
      assertArrayEquals(new short[] {(short) (-1874), (short)603, (short)603, (short)3037, (short) (-1176), (short) (-3), (short) (-1780)}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("-1874l603l603l3037l-1176l-3l-1780", string5);
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "u!y0w'}l#gr_w");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[14];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      String string1 = StringUtils.defaultIfEmpty("`]:qMn y$yI_}U=6", "Object varargs must not be null");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`]:qMn y$yI_}U=6", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("", "", "`]:qMn y$yI_}U=6");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.join((long[]) null, '<');
      assertNull(string3);
      
      String string4 = StringUtils.abbreviate((String) null, (String) null, (-2066), 55);
      assertNull(string4);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("Object varargs must not be null", charSequenceArray0[3]);
      assertEquals(14, charSequenceArray0.length);
      assertTrue(boolean0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '<';
      charArray0[1] = '<';
      charArray0[2] = '<';
      charArray0[3] = '<';
      charArray0[4] = '<';
      charArray0[5] = 'h';
      charArray0[6] = '<';
      boolean boolean1 = StringUtils.containsNone(charSequenceArray0[3], charArray0);
      assertArrayEquals(new char[] {'<', '<', '<', '<', '<', 'h', '<'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(14, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short) (-1874);
      shortArray0[1] = (short)603;
      shortArray0[2] = (short)14;
      shortArray0[3] = (short)3037;
      shortArray0[4] = (short) (-1176);
      shortArray0[5] = (short) (-3);
      shortArray0[6] = (short) (-1780);
      String string5 = StringUtils.join(shortArray0, 'l');
      assertArrayEquals(new short[] {(short) (-1874), (short)603, (short)14, (short)3037, (short) (-1176), (short) (-3), (short) (-1780)}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("-1874l603l14l3037l-1176l-3l-1780", string5);
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      String string0 = StringUtils.trimToNull((String) null);
      assertNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'H';
      charArray0[1] = 'S';
      charArray0[2] = 'E';
      charArray0[3] = 'E';
      charArray0[4] = ' ';
      charArray0[5] = 'C';
      charArray0[6] = 'W';
      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {'H', 'S', 'E', 'E', ' ', 'C', 'W'}, charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.compare("Object varargs must not be null", "e", true);
      assertEquals((-22), int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      String string1 = StringUtils.substringAfter((String) null, 14);
      assertNull(string1);
      
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "e";
      charSequenceArray0[3] = (CharSequence) "e";
      charSequenceArray0[4] = (CharSequence) null;
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      short[] shortArray0 = new short[5];
      shortArray0[0] = (short) (-1780);
      shortArray0[1] = (short) (-1780);
      shortArray0[2] = (short) (-1780);
      shortArray0[3] = (short) (-1780);
      String string0 = StringUtils.join(shortArray0, '&');
      assertArrayEquals(new short[] {(short) (-1780), (short) (-1780), (short) (-1780), (short) (-1780), (short)0}, shortArray0);
      assertEquals(5, shortArray0.length);
      assertNotNull(string0);
      assertEquals("-1780&-1780&-1780&-1780&0", string0);
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      String string0 = StringUtils.substringBefore(", Length: 0", "9yiggd+un0");
      assertNotNull(string0);
      assertEquals(", Length: 0", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(", Length: 0");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-2061L);
      longArray0[1] = (-2061L);
      longArray0[2] = (long) '|';
      longArray0[3] = (long) '|';
      longArray0[4] = (long) '|';
      longArray0[5] = (long) '|';
      longArray0[6] = (long) '|';
      longArray0[7] = (-3259L);
      longArray0[8] = (-2061L);
      String string1 = StringUtils.stripEnd("z$<\"", "DH<=KRUtWy;}Oy.SE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("z$<\"", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "z$<\"";
      charSequenceArray0[1] = (CharSequence) "z$<\"";
      String string2 = StringUtils.center(", Length: 0", 15);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("  , Length: 0  ", string2);
      
      charSequenceArray0[2] = (CharSequence) "  , Length: 0  ";
      charSequenceArray0[3] = (CharSequence) ", Length: 0";
      charSequenceArray0[4] = (CharSequence) "ch";
      charSequenceArray0[5] = (CharSequence) "ch";
      charSequenceArray0[6] = (CharSequence) "z$<\"";
      charSequenceArray0[7] = (CharSequence) "DH<=KRUtWy;}Oy.SE";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string3);
      
      String string4 = StringUtils.removeStart("*9^fisTx`zzJ]M%H", "*9^fisTx`zzJ]M%H");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      int int0 = StringUtils.indexOf(charSequenceArray0[6], (CharSequence) "9yiggd+un0", 101);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.length(charSequenceArray0[6]);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(4, int1);
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "I3}?&|]FBQ");
      assertNotNull(string0);
      assertEquals("I3}?&|]FBQ", string0);
      
      String string1 = StringUtils.replaceChars("I3}?&|]FBQ", "~i(0.6;1FUYc", "org.apache.commons.lang3.CharSequenceUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("I3}?&|]hBQ", string1);
      
      String string2 = StringUtils.abbreviateMiddle("*c'M", "Threshold must not be negative", (-4514));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("*c'M", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "I3}?&|]FBQ";
      charSequenceArray0[1] = (CharSequence) "*c'M";
      charSequenceArray0[2] = (CharSequence) "I3}?&|]FBQ";
      charSequenceArray0[3] = (CharSequence) " in/an)array of ";
      charSequenceArray0[4] = (CharSequence) "I3}?&|]FBQ";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("Search and Replace array lengths don't match: ");
      assertEquals(19, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.removeStart("*c'M", (String) null);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("*c'M", string3);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(19, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.replace("*c'M", "I3}?&|]FBQ", " in/an)array of ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertEquals("*c'M", string5);
      
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("*c'M", stringArray0);
      assertEquals(19, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "*c'M");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(19, stringArray0.length);
      assertEquals(19, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      String string0 = StringUtils.abbreviate("org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwBorg.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", "offset cannot be negative", 90, 56);
      assertNotNull(string0);
      assertEquals("offset cannot be negativelang3.ObjectUtils,O]8nE8wSn\"vwB", string0);
      
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.swapCase("MERj");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("merJ", string1);
      
      String[] stringArray0 = StringUtils.substringsBetween("offset cannot be negativelang3.ObjectUtils,O]8nE8wSn\"vwB", "Wm.af", "");
      assertNull(stringArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("Sz?V ", charset0);
      assertArrayEquals(new byte[] {(byte)83, (byte)122, (byte)63, (byte)86, (byte)32}, byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(5, byteArray0.length);
      assertNotNull(byteArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("offset cannot be negativelang3.ObjectUtils,O]8nE8wSn\"vwB", 'o');
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.isAllUpperCase("Wm.af");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      String string0 = StringUtils.rightPad("l %", 0, '0');
      assertNotNull(string0);
      assertEquals("l %", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "l %", (CharSequence) "l %");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      enumSet0.clear();
      assertEquals(0, enumSet0.size());
      assertFalse(enumSet0.contains(locale_Category0));
      
      boolean boolean1 = enumSet0.add(locale_Category0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string1 = StringUtils.join(iterator0, '0');
      assertEquals(1, enumSet0.size());
      assertNotNull(string1);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("FORMAT", string1);
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      boolean boolean2 = enumSet0.add(locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.length("FORMAT");
      assertEquals(6, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("FORMAT");
      assertArrayEquals(new int[] {70, 79, 82, 77, 65, 84}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase("l %", "l %");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "l %";
      charSequenceArray0[1] = (CharSequence) "l %";
      charSequenceArray0[2] = (CharSequence) "FORMAT";
      charSequenceArray0[3] = (CharSequence) "l %";
      charSequenceArray0[4] = (CharSequence) "l %";
      charSequenceArray0[5] = (CharSequence) "l %";
      charSequenceArray0[6] = (CharSequence) "l %";
      charSequenceArray0[7] = (CharSequence) "FORMAT";
      charSequenceArray0[8] = (CharSequence) "l %";
      String string2 = StringUtils.abbreviate("FORMAT", "l %", (int) '0', 6);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("FORMAT", string2);
      
      boolean boolean4 = StringUtils.isMixedCase(charSequenceArray0[5]);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.startsWithAny(charSequenceArray0[3], charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5);
      
      boolean boolean6 = StringUtils.isNotEmpty(charSequenceArray0[5]);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6);
      
      boolean boolean7 = StringUtils.isNumericSpace(charSequenceArray0[3]);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean0);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7);
      
      boolean boolean8 = StringUtils.equalsAny("l %", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean8 == boolean4);
      assertTrue(boolean8 == boolean1);
      assertFalse(boolean8 == boolean7);
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean0);
      assertFalse(boolean8 == boolean2);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8);
      
      boolean boolean9 = StringUtils.containsAny(charSequenceArray0[1], charSequenceArray0[4]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean9 == boolean4);
      assertTrue(boolean9 == boolean5);
      assertFalse(boolean9 == boolean7);
      assertTrue(boolean9 == boolean3);
      assertTrue(boolean9 == boolean6);
      assertTrue(boolean9 == boolean8);
      assertFalse(boolean9 == boolean2);
      assertTrue(boolean9 == boolean1);
      assertTrue(boolean9 == boolean0);
      assertTrue(boolean9);
      
      boolean boolean10 = StringUtils.isEmpty("l %");
      assertFalse(boolean10 == boolean8);
      assertFalse(boolean10 == boolean0);
      assertTrue(boolean10 == boolean2);
      assertTrue(boolean10 == boolean4);
      assertFalse(boolean10 == boolean5);
      assertFalse(boolean10 == boolean9);
      assertFalse(boolean10 == boolean6);
      assertFalse(boolean10 == boolean1);
      assertTrue(boolean10 == boolean7);
      assertFalse(boolean10 == boolean3);
      assertFalse(boolean10);
      
      boolean boolean11 = StringUtils.isAllUpperCase(charSequenceArray0[7]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean11 == boolean2);
      assertTrue(boolean11 == boolean0);
      assertTrue(boolean11 == boolean9);
      assertTrue(boolean11 == boolean8);
      assertFalse(boolean11 == boolean4);
      assertTrue(boolean11 == boolean3);
      assertTrue(boolean11 == boolean6);
      assertTrue(boolean11 == boolean1);
      assertTrue(boolean11 == boolean5);
      assertFalse(boolean11 == boolean7);
      assertFalse(boolean11 == boolean10);
      assertTrue(boolean11);
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      String string0 = StringUtils.toRootLowerCase("V)?'Vm~");
      assertNotNull(string0);
      assertEquals("v)?'vm~", string0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string1 = StringUtils.getIfEmpty("15&dxYRua{i`7", supplier0);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("15&dxYRua{i`7", string1);
      
      String string2 = StringUtils.wrap("I uMLJ", "L");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("LI uMLJL", string2);
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      String string0 = StringUtils.capitalize("1&dxYRua{`7");
      assertNotNull(string0);
      assertEquals("1&dxYRua{`7", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "1&dxYRua{`7", (CharSequence) "1&dxYRua{`7");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isNumeric("1&dxYRua{`7");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringBetween("1&dxYRua{`7", "O_B1RA*", "O_B1RA*");
      assertNull(string1);
      
      String string2 = StringUtils.center("1&dxYRua{`7", 0, "1&dxYRua{`7");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("1&dxYRua{`7", string2);
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAllUpperCase("1&dxYRua{`7");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.unwrap("hF-u", ".VNQ0T6P>`x");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("hF-u", string1);
      
      String string2 = StringUtils.truncate("", 23, 23);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.stripEnd("yC`pyq'5up.", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("yC`pyq'5up.", string3);
      
      boolean boolean1 = StringUtils.isAllUpperCase("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.unwrap("JxnNa+9X|=", 'S');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("JxnNa+9X|=", string4);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "JxnNa+9X|=");
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("JxnNa+9X|=", charBuffer0.toString());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(10, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharBuffer charBuffer1 = StringUtils.getIfEmpty(charBuffer0, supplier0);
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("JxnNa+9X|=", charBuffer0.toString());
      assertEquals(10, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.length());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(10, charBuffer0.capacity());
      assertEquals("JxnNa+9X|=", charBuffer1.toString());
      assertFalse(charBuffer1.isDirect());
      assertEquals(10, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(10, charBuffer1.capacity());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(10, charBuffer1.length());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertEquals(10, charBuffer1.remaining());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      String string0 = StringUtils.join(booleanArray0, '8', (-340), (-340));
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, true, false, false, false}, booleanArray0));
      assertEquals(8, booleanArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "Mx;gIV ]4p$k, }";
      charSequenceArray0[1] = (CharSequence) "Mx;gIV ]4p$k, }";
      String string1 = StringUtils.appendIfMissingIgnoreCase("Mx;gIV ]4p$k, }", "", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Mx;gIV ]4p$k, }", string1);
      
      boolean boolean0 = StringUtils.isAllUpperCase("Mx;gIV ]4p$k, }");
      assertFalse(boolean0);
      
      String string2 = StringUtils.unwrap("JxnNa+9X|=", '8');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("JxnNa+9X|=", string2);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "JxnNa+9X|=");
      assertEquals(10, charBuffer0.length());
      assertEquals("JxnNa+9X|=", charBuffer0.toString());
      assertEquals(10, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(10, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharBuffer charBuffer1 = StringUtils.getIfEmpty(charBuffer0, supplier0);
      assertEquals(10, charBuffer0.length());
      assertEquals("JxnNa+9X|=", charBuffer0.toString());
      assertEquals(10, charBuffer0.capacity());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(10, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(10, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(10, charBuffer1.length());
      assertEquals("JxnNa+9X|=", charBuffer1.toString());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(10, charBuffer1.limit());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(10, charBuffer1.remaining());
      assertEquals(10, charBuffer1.capacity());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.position());
      assertFalse(charBuffer1.hasArray());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("~`vxGOhcNnkz6q'nT ", "negative");
      assertNotNull(string0);
      assertEquals("negative~`vxGOhcNnkz6q'nT negative", string0);
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("`]:qMn y$yI_}U=6");
      assertNotNull(string0);
      assertEquals("`]:qMn y$yI_}U=6", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("`]:qMn y$yI_}U=6", "`]:qMn y$yI_}U=6");
      assertEquals(1.0, double0, 0.01);
      
      // Undeclared exception!
      try { 
        StringUtils.replacePattern("uqVIe:\"2.5#Z3(N]H", "uqVIe:\"2.5#Z3(N]H", "`]:qMn y$yI_}U=6");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 17
         // uqVIe:\"2.5#Z3(N]H
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      String string0 = StringUtils.truncate("Of", 3194);
      assertNotNull(string0);
      assertEquals("Of", string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Of", "!<}ZZ8U%1OvXka}/x");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("Of", "Of");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.split("!<}ZZ8U%1OvXka}/x", (String) null, (-3331));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "[");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.substringBeforeLast("Exception cloning Cloneable type ", "33\"6");
      assertNotNull(string0);
      assertEquals("Exception cloning Cloneable type ", string0);
      
      boolean boolean0 = StringUtils.isEmpty("Exception cloning Cloneable type ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceAll("", "", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.trimToEmpty("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 0, 108);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string3 = StringUtils.leftPad("", (int) 'i', "4g$lc/_aKq2K");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("4g$lc/_aKq2K4g$lc/_aKq2K4g$lc/_aKq2K4g$lc/_aKq2K4g$lc/_aKq2K4g$lc/_aKq2K4g$lc/_aKq2K4g$lc/_aKq2K4g$lc/_aK", string3);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.removeIgnoreCase("Minimum abbreviation width is %d", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string4);
      
      String string5 = StringUtils.joinWith(";({RA@fq", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      
      String string6 = StringUtils.replaceChars("Minimum abbreviation width is %d", "Cannot store Minimum abbreviation width with offset is %d", "4g$lc/_aKq2K");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertEquals("$_g2Kg/c$_/_a_", string6);
      
      int int2 = StringUtils.compare("", "", true);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = StringUtils.countMatches((CharSequence) "Cannot store Minimum abbreviation width with offset is %d", 'i');
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(7, int3);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      String string0 = StringUtils.stripToNull((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.deleteWhitespace("Invalid locale format: ");
      assertNotNull(string1);
      assertEquals("Invalidlocaleformat:", string1);
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      String string0 = StringUtils.removeStart("j+2&{()=)F.VAwUFs.", "K'N\"/");
      assertNotNull(string0);
      assertEquals("j+2&{()=)F.VAwUFs.", string0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "K'N\"/";
      stringArray0[2] = "K'N\"/";
      stringArray0[3] = "81NGpx&]R";
      stringArray0[4] = "j+2&{()=)F.VAwUFs.";
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultIfEmpty("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("$Cb\"k}J", "9yiggd+un0", "The Array must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("$Cb\"k}J", string2);
      
      String string3 = StringUtils.stripEnd("t8,5AZoG<t8,5AZoG<", "g%*]FJ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("t8,5AZoG<t8,5AZoG<", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "$Cb\"k}J";
      charSequenceArray0[1] = (CharSequence) "WKU}'{b&)yv ";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string4);
      
      String string5 = StringUtils.removeStart("W]Ra", "81NGpx&");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("W]Ra", string5);
      
      String string6 = StringUtils.deleteWhitespace("W]Ra");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertEquals("W]Ra", string6);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "W]Ra", 76);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.countMatches((CharSequence) "g%*]FJ", '`');
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      String string7 = StringUtils.join(charArray0, '`');
      assertArrayEquals(new char[] {'`', '`', '`', '`'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertEquals("```````", string7);
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(21);
      assertEquals(21, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(21, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(21, charBuffer0.limit());
      assertNotNull(charBuffer0);
      
      IntStream intStream0 = charBuffer0.chars();
      assertEquals(21, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(21, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(21, charBuffer0.limit());
      assertNotNull(intStream0);
      
      CharBuffer charBuffer1 = charBuffer0.put(">|tore ");
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(14, charBuffer0.length());
      assertEquals(7, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(14, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(21, charBuffer0.limit());
      assertEquals(14, charBuffer1.length());
      assertEquals(7, charBuffer1.position());
      assertEquals(21, charBuffer1.limit());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasArray());
      assertEquals(14, charBuffer1.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(21, charBuffer1.capacity());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      
      boolean boolean0 = StringUtils.equals((CharSequence) ";7Y$;SR]s0yo!D/", (CharSequence) charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(14, charBuffer0.length());
      assertEquals(7, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(14, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(21, charBuffer0.limit());
      assertSame(charBuffer0, charBuffer1);
      assertFalse(boolean0);
      
      int int0 = StringUtils.countMatches((CharSequence) ";7Y$;SR]s0yo!D/", ' ');
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      String string0 = StringUtils.replaceOnce("z", "z", "I3}?&|]FBQ");
      assertNotNull(string0);
      assertEquals("I3}?&|]FBQ", string0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-2061L);
      String string1 = StringUtils.join(longArray0, '|');
      assertArrayEquals(new long[] {(-2061L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-2061", string1);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("z", "-2061");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripStart("-2061", "The Array must not be null");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("-2061", string2);
      
      boolean boolean1 = StringUtils.isNotBlank("-2061");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string3 = StringUtils.join(iterator0, 'v');
      assertEquals(1, enumSet0.size());
      assertNotNull(string3);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("FORMAT", string3);
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = new int[4];
      intArray0[2] = 8192;
      intArray0[1] = 8192;
      intArray0[2] = 8192;
      intArray0[1] = 8192;
      String string1 = StringUtils.join(intArray0, '^');
      assertArrayEquals(new int[] {0, 8192, 8192, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0^8192^8192^0", string1);
      
      String string2 = StringUtils.wrap("", 'Y');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.leftPad("", 8192);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains((CharSequence) "0^8192^8192^0", (CharSequence) "0^8192^8192^0");
      assertTrue(boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "0^8192^8192^0", (CharSequence) "0^8192^8192^0", 8192);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Ty,HVnggok}20]", "Ty,HVnggok}20]");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBetween("Ty,HVnggok}20]", "Ty,HVnggok}20]");
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, (-15));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.replaceIgnoreCase((String) null, "Index: ", "Ty,HVnggok}20]");
      assertNull(string2);
      
      String string3 = StringUtils.swapCase("Ty,HVnggok}20]");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals("tY,hvNGGOK}20]", string3);
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", 'i');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceAll("", "", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.trimToEmpty("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 0, 108);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.ordinalIndexOf(charSequenceArray0[0], "", (-1));
      assertEquals(1, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-20);
      byteArray0[4] = (byte)25;
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte) (-75);
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)119;
      String string4 = StringUtils.join(byteArray0, 'O', 0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte) (-20), (byte)25, (byte)14, (byte) (-75), (byte)0, (byte)119}, byteArray0);
      assertEquals(9, byteArray0.length);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      String string5 = StringUtils.wrap("", 'H');
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = StringUtils.trimToEmpty("Sa4@8Mxeq:;V~p");
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("Sa4@8Mxeq:;V~p", "Sa4@8Mxeq:;V~p");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceChars("Sa4@8Mxeq:;V~p", (String) null, (String) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBetween("WKU}'{b&)yv WKU}'{b&)yv ", "Strings must not be null", "Sa4@8Mxeq:;V~p");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("Sa4@8Mxeq:;V~p", "");
      assertTrue(boolean0);
      
      String string4 = StringUtils.stripStart("The Array must not be null", "Minimum abbreviation width with offset is %d");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("The Array must not be null", string4);
      
      boolean boolean1 = StringUtils.isNotBlank("Minimum abbreviation width with offset is %d");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Sa4@8Mxeq:;V~p", "Locale must not be null");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = "?@;uN";
      String string2 = StringUtils.rightPad("", 4, "?@;uN");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("?@;u", string2);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      assertFalse(vector0.contains(4));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vector0.add((Object) null);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertFalse(vector0.contains(4));
      assertTrue(boolean0);
      
      int int0 = 0;
      String string3 = StringUtils.join((List<?>) vector0, '9', 0, (-880));
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.isEmpty());
      assertNotNull(string3);
      assertFalse(vector0.contains('9'));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.trimToEmpty("?@;u");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("?@;u", string4);
      
      String string5 = "ra";
      String string6 = StringUtils.getDigits("ra");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      String string7 = StringUtils.abbreviateMiddle("", "", 32);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "?@;uN";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      String string8 = StringUtils.getDigits("");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string7));
      assertTrue(string8.equals((Object)string0));
      assertEquals("", string8);
      
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "?@;u";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string9 = "*Q*y";
      // Undeclared exception!
      try { 
        Locale.Category.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant java.util.Locale.Category.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("#YQ2sCZ*Mt{\"9-P1", supplier0);
      assertNotNull(string0);
      assertEquals("#YQ2sCZ*Mt{\"9-P1", string0);
      
      String string1 = StringUtils.replaceChars(" in an array of ", "^", " in an array of ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" in an array of ", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("en&<-wH0NMyRQ", "^", "Threshold must not be negative", 76);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("en&<-wH0NMyRQ", string2);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean1 = StringUtils.startsWithAny(" in an array of ", stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Iterator<String> iterator0 = hashSet0.iterator();
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, '4');
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(string0);
      assertFalse(hashSet0.contains(string0));
      assertEquals("", string0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) 'K';
      String string1 = StringUtils.join(longArray0, '4');
      assertArrayEquals(new long[] {75L}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("75", string1);
      
      String[] stringArray0 = new String[0];
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
      
      boolean boolean0 = StringUtils.startsWithAny("75", stringArray1);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertSame(stringArray0, stringArray1);
      assertEquals(0, stringArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.difference("", "75");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("75", string2);
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000", string0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      enumSet0.clear();
      assertEquals(0, enumSet0.size());
      assertFalse(enumSet0.contains(locale_Category0));
      
      boolean boolean0 = enumSet0.add(locale_Category0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(boolean0);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string1 = StringUtils.join(iterator0, '\u0000');
      assertEquals(1, enumSet0.size());
      assertNotNull(string1);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("FORMAT", string1);
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      boolean boolean1 = enumSet0.add(locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.length("FORMAT");
      assertEquals(6, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("FORMAT");
      assertArrayEquals(new int[] {70, 79, 82, 77, 65, 84}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("\u0000\u0000\u0000\u0000", "l %");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "\u0000\u0000\u0000\u0000";
      charSequenceArray0[2] = (CharSequence) "FORMAT";
      charSequenceArray0[3] = (CharSequence) "\u0000\u0000\u0000\u0000";
      charSequenceArray0[6] = (CharSequence) "\u0000\u0000\u0000\u0000";
      charSequenceArray0[7] = (CharSequence) "FORMAT";
      charSequenceArray0[8] = (CharSequence) "\u0000\u0000\u0000\u0000";
      boolean boolean3 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string2 = StringUtils.repeat('D', 100);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", string2);
      
      boolean boolean4 = StringUtils.isMixedCase(charSequenceArray0[5]);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.startsWithAny(charSequenceArray0[3], charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5);
      
      boolean boolean6 = StringUtils.isNotEmpty(charSequenceArray0[5]);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6);
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      String string0 = StringUtils.rightPad("l %", 0, '0');
      assertNotNull(string0);
      assertEquals("l %", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "l %", (CharSequence) "l %");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      String string1 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'0', '0', '0', '0'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0000", string1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      enumSet0.clear();
      assertEquals(0, enumSet0.size());
      assertFalse(enumSet0.contains(locale_Category0));
      
      boolean boolean1 = enumSet0.add(locale_Category0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string2 = StringUtils.join(iterator0, '0');
      assertEquals(1, enumSet0.size());
      assertNotNull(string2);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("FORMAT", string2);
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      boolean boolean2 = enumSet0.add(locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.length("FORMAT");
      assertEquals(6, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("FORMAT");
      assertArrayEquals(new int[] {70, 79, 82, 77, 65, 84}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase("0000", "l %");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "0000";
      charSequenceArray0[1] = (CharSequence) "l %";
      charSequenceArray0[2] = (CharSequence) "FORMAT";
      charSequenceArray0[3] = (CharSequence) "0000";
      charSequenceArray0[4] = (CharSequence) "l %";
      charSequenceArray0[5] = (CharSequence) "l %";
      charSequenceArray0[6] = (CharSequence) "0000";
      charSequenceArray0[7] = (CharSequence) "FORMAT";
      charSequenceArray0[8] = (CharSequence) "0000";
      boolean boolean4 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String string3 = StringUtils.abbreviate("FORMAT", "l %", (int) '0', 6);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("FORMAT", string3);
      
      boolean boolean5 = StringUtils.isMixedCase(charSequenceArray0[5]);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5);
      
      boolean boolean6 = StringUtils.startsWithAny(charSequenceArray0[3], charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6);
      
      boolean boolean7 = StringUtils.isNotEmpty(charSequenceArray0[5]);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7);
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("8@UT1j_Xtzc<3vR", 321);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBefore("8@UT1j_Xtzc<3vR", "W[,v$bM{A\"5x8b_[");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("8@UT1j_Xtzc<3vR", string1);
      
      boolean boolean0 = StringUtils.equalsAny("8@UT1j_Xtzc<3vR", (CharSequence[]) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.left("8@UT1j_Xtzc<3vR", 321);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("8@UT1j_Xtzc<3vR", string2);
      
      String string3 = StringUtils.normalizeSpace("#Xl8NIGQ'17M[D^ZZR");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("#Xl8NIGQ'17M[D^ZZR", string3);
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'q', 253, 321);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 253
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      String string0 = StringUtils.strip("Aborting to protect against StackOverflowError - output of one loop is the input of another", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string0);
      assertEquals("borting to protect against StackOverflowError - output of one loop is the inpu", string0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      // Undeclared exception!
      try { 
        StringUtils.join(booleanArray0, 'y', 2, 79);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      String string0 = StringUtils.capitalize("<=Ds&A$r~d/;AQF");
      assertNotNull(string0);
      assertEquals("<=Ds&A$r~d/;AQF", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "<=Ds&A$r~d/;AQF", (CharSequence) "3\"6");
      assertEquals(0, int0);
      
      String string1 = StringUtils.repeat('f', 778);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff", string1);
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, '=', (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\r", (CharSequence) "\r");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.wrapIfMissing((String) null, 'v');
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.substringsBetween((String) null, "maxWith cannot be negative", "Strings must not be null");
      assertNull(stringArray0);
      
      String string2 = StringUtils.join((String[]) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      String string0 = StringUtils.chop("=[");
      assertNotNull(string0);
      assertEquals("=", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("=");
      assertFalse(boolean0);
      
      String string1 = StringUtils.toRootLowerCase("*'D{9~>BB!TsL");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("*'d{9~>bb!tsl", string1);
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      String string0 = StringUtils.chop("K[[$`1Jqi&@6\"k>xg$");
      assertNotNull(string0);
      assertEquals("K[[$`1Jqi&@6\"k>xg", string0);
      
      String string1 = StringUtils.replace("org.apache.commons.lang3.CharSequenceUtils", "(hxpD]gq", "]eKlT'Sgh6G+L-?");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.CharSequenceUtils", string1);
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      String string0 = StringUtils.chop("[");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.toRootLowerCase("[");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("[", string1);
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      String string0 = StringUtils.join((Object[]) null, "");
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.unwrap("hF-u", ".VNQ0T6P>`x");
      assertNotNull(string1);
      assertEquals("hF-u", string1);
      
      String string2 = StringUtils.upperCase(".VNQ0T6P>`x");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertEquals(".VNQ0T6P>`X", string2);
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      String string3 = StringUtils.join(booleanArray0, 'j');
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("true", string3);
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStart("", "K'6c' =Bt\"");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string2 = StringUtils.getIfBlank("v&r|3<\"'5,Eg35y]BP^", supplier0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("v&r|3<\"'5,Eg35y]BP^", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "v&r|3<\"'5,Eg35y]BP^";
      charSequenceArray0[2] = null;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "v&r|3<\"'5,Eg35y]BP^";
      String string3 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.SPACE;
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(" ", string4);
      
      boolean boolean0 = StringUtils.isAllLowerCase(charSequenceArray0[1]);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.removeAll("", "B?1:;$rT^EDgq#L");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfterLast("x", 792);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, 'r');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart((String) null, "_Jp*34vDZVuZ[");
      assertNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string2 = StringUtils.getIfBlank((String) null, supplier0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "_Jp*34vDZVuZ[";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = null;
      charSequenceArray0[7] = (CharSequence) "_Jp*34vDZVuZ[";
      String string3 = StringUtils.prependIfMissing("_Jp*34vDZVuZ[", (CharSequence) null, charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertEquals("_Jp*34vDZVuZ[", string3);
      
      String string4 = StringUtils.SPACE;
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(" ", string4);
      
      boolean boolean1 = StringUtils.isAllLowerCase(" ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      String string0 = null;
      String string1 = null;
      String string2 = StringUtils.strip((String) null, (String) null);
      assertNull(string2);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      charArray0[1] = '`';
      charArray0[2] = 'A';
      charArray0[3] = 'S';
      charArray0[4] = 'N';
      String string3 = StringUtils.join(charArray0, '*');
      assertArrayEquals(new char[] {'N', '`', 'A', 'S', 'N'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string3);
      assertEquals("N*`*A*S*N", string3);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        ByteBuffer.wrap((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Ty,HVnggok}20]", "Ty,HVnggok}20]");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripStart("Ty,HVnggok}20]", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ty,HVnggok}20]", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "Ty,HVnggok}20]", (CharSequence) "Ty,HVnggok}20]", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "Ty,HVnggok}20]");
      assertFalse(int1 == int0);
      assertEquals(14, int1);
      
      String string2 = StringUtils.join((Iterable<?>) null, "Locale must not be null");
      assertNull(string2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = null;
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.capacity());
      assertFalse(byteBuffer0.isDirect());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.position());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteBuffer0);
      
      // Undeclared exception!
      try { 
        Charset.forName("Threshold must not be negative");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Threshold must not be negative
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width is %d", '#');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) '#';
      intArray0[6] = (int) '#';
      String string0 = StringUtils.prependIfMissingIgnoreCase("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width is %d", string0);
      
      String string1 = StringUtils.mid("nt(mSZR+aK*eN", 56, 2147483645);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Minimum abbreviation width is %d", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.mid("nt(mSZR+aK*eN", 2332, (-1875));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.removeAll("", "");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int0 = StringUtils.lastIndexOfAny("nt(mSZR+aK*eN", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "nt(mSZR+aK*eN";
      charSequenceArray0[1] = (CharSequence) "Minimum abbreviation width is %d";
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      charSequenceArray0[2] = (CharSequence) charBuffer0;
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      String string4 = StringUtils.substringAfter("Cannot clone Cloneable type ", (-1755));
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      charSequenceArray0[6] = (CharSequence) "";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.removeEndIgnoreCase("&nm", "WKU}'{b&)yv WKU}'{b&)yv ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("&nm", string5);
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "MVb<GK }izowG29kGgE";
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("MVb<GK }izowG29kGgE"));
      
      charSequenceArray0[2] = (CharSequence) "MVb<GK }izowG29kGgE";
      charSequenceArray0[3] = (CharSequence) "MVb<GK }izowG29kGgE";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = treeSet0.add(charSequenceArray0[0]);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(treeSet0.contains("MVb<GK }izowG29kGgE"));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.removeAll("v=lMewCTb0z$S9&Y", "WKU}'{b&)yv WKU}'{b&)yv ");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 4
         // WKU}'{b&)yv WKU}'{b&)yv 
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "I3}?&|[]FBQ");
      assertNotNull(string0);
      assertEquals("I3}?&|[]FBQ", string0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-2061L);
      String string1 = StringUtils.join(longArray0, '|');
      assertArrayEquals(new long[] {(-2061L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-2061", string1);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "-2061");
      assertFalse(boolean0);
      
      String string2 = StringUtils.reverse("-2061");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("1602-", string2);
      
      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>(arrayDeque0);
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("I3}?&|[]FBQ"));
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("I3}?&|[]FBQ"));
      
      String string3 = StringUtils.join(iterator0, '|');
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(string3);
      assertFalse(treeSet0.contains("I3}?&|[]FBQ"));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("wZ>JY80bi.+!BV+?_", "AkWk");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("wZ>JY80bi.+!BV+?_", string4);
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      String string0 = StringUtils.rightPad("O4Wyv<v", 0, "");
      assertNotNull(string0);
      assertEquals("O4Wyv<v", string0);
      
      String string1 = StringUtils.rotate("O4Wyv<v", 0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("O4Wyv<v", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "O4Wyv<v";
      charSequenceArray0[1] = (CharSequence) "O4Wyv<v";
      int int0 = StringUtils.indexOfAny((CharSequence) "O4Wyv<v", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.join((short[]) null, 'B');
      assertNull(string2);
      
      String string3 = StringUtils.substring("!kxJ?", 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("!kxJ?", string3);
      
      boolean boolean0 = StringUtils.containsWhitespace("negative");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      String string0 = StringUtils.rightPad("g%*]FJ", (-2925), " vs ");
      assertNotNull(string0);
      assertEquals("g%*]FJ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "g%*]FJ";
      int int0 = StringUtils.indexOfAny((CharSequence) "g%*]FJ", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.containsWhitespace(charSequenceArray0[0]);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      String string0 = StringUtils.substring("[", (-1217), (-1217));
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'c';
      charArray0[1] = '#';
      charArray0[2] = 'c';
      String string1 = StringUtils.join(charArray0, '?', 84, 16);
      assertArrayEquals(new char[] {'c', '#', 'c'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.unwrap("", 'x');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.startsWith("", "");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("L[}T|");
      assertNotNull(string0);
      assertEquals("l[}T|", string0);
      
      String string1 = StringUtils.CR;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      
      String string2 = StringUtils.removeAll("KT=.N", "\r");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("KT=.N", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "KT=.N";
      int int0 = StringUtils.indexOfAny((CharSequence) "\r", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("=8`4XwRr,HfV\"g2&$", "=8`4XwRr,HfV\"g2&$");
      assertNotNull(string0);
      assertEquals("=8`4XwRr,HfV\"g2&$", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("=8`4XwRr,HfV\"g2&$", "=8`4XwRr,HfV\"g2&$");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Ty,HVnggok}20]", "Ty,HVnggok}20]");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBetween("", "Ty,HVnggok}20]");
      assertNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      byte[] byteArray0 = new byte[0];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteBuffer0.capacity());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=0 cap=0]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(0, byteBuffer0.limit());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteBuffer0);
      
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(3, stringArray0.length);
      assertNull(string2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      
      String string3 = StringUtils.wrapIfMissing("Ty,HVnggok}20]", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals("Ty,HVnggok}20]", string3);
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      String string0 = StringUtils.replaceIgnoreCase("Object varargs must not be null", "Object varargs must not be null", (String) null, 128);
      assertNotNull(string0);
      assertEquals("Object varargs must not be null", string0);
      
      charSequenceArray0[0] = (CharSequence) "Object varargs must not be null";
      String string1 = StringUtils.substringAfter("\r", 128);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.reverse("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      String string0 = StringUtils.trim("5\"");
      assertNotNull(string0);
      assertEquals("5\"", string0);
      
      String string1 = StringUtils.lowerCase("5\"");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("5\"", string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '?';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '\"', (-202), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -202
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = StringUtils.removeFirst((String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.join(byteArray0, 'j', 0, (-1219));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.join(byteArray0, 'h');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "Cannot store Minimum abbreviation width with offset is %d";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) null;
      String string3 = StringUtils.prependIfMissingIgnoreCase("Cannot store Minimum abbreviation width with offset is %d", "", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("Cannot store Minimum abbreviation width with offset is %d", string3);
      
      String string4 = StringUtils.replace("Cannot store Minimum abbreviation width with offset is %d", "", "Search and Replace array lengths don't match: ");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Cannot store Minimum abbreviation width with offset is %d", string4);
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.join(byteArray0, 'j', 0, (-1219));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.join(byteArray0, 'h');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.repeat('j', 2384);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string3, (CharSequence) "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "kz6.]_corA an Array", (CharSequence) "kz6.]_corA an Array");
      assertEquals((-1), int0);
      
      String string0 = StringUtils.leftPad("...", (-1), "kz6.]_corA an Array");
      assertNotNull(string0);
      assertEquals("...", string0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      
      String string1 = StringUtils.stripAccents("...");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("...", string1);
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = StringUtils.upperCase((String) null);
      assertNull(string0);
      
      String string1 = StringUtils.join(byteArray0, 'j', 0, (-1219));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.join(byteArray0, 'h');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.repeat('_', 2384);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) string3, (CharSequence) "");
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      String string0 = StringUtils.rightPad("l %", 0, '0');
      assertNotNull(string0);
      assertEquals("l %", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "l %", (CharSequence) "l %");
      assertTrue(boolean0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      enumSet0.clear();
      assertEquals(0, enumSet0.size());
      assertFalse(enumSet0.contains(locale_Category0));
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte) (-116);
      byteArray0[2] = (byte) (-116);
      byteArray0[3] = (byte) (-116);
      String string1 = StringUtils.join(byteArray0, '0');
      assertArrayEquals(new byte[] {(byte) (-116), (byte) (-116), (byte) (-116), (byte) (-116)}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-1160-1160-1160-116", string1);
      
      String string2 = StringUtils.capitalize("");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.capitalize("y]AE1Z=sb");
      assertNotNull(string0);
      assertEquals("Y]AE1Z=sb", string0);
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      String string0 = "Invalid locale format: ";
      String string1 = StringUtils.replaceChars("Invalid locale format: ", ' ', 'u');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Invalidulocaleuformat:u", string1);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("Invalidulocaleuformat:u", "Invalidulocaleuformat:u");
      assertTrue(boolean0);
      
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        StringUtils.join(byteArray0, '/', (int) (byte)14, 2128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      String string0 = StringUtils.deleteWhitespace("}}");
      assertNotNull(string0);
      assertEquals("}}", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("}}");
      assertFalse(boolean0);
      
      String string1 = StringUtils.reverse("Ds{*fA");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Af*{sD", string1);
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("', is neither of type Map.Entry nor an Array", (String) null, "m");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      String string1 = StringUtils.replacePattern("', is neither of type Map.Entry nor an Array", "", "m");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("m'm,m mimsm mnmemimtmhmemrm momfm mtmympmem mMmampm.mEmnmtmrmym mnmomrm mamnm mAmrmrmamym", string1);
      
      String string2 = StringUtils.center("', is neither of type Map.Entry nor an Array", (-1047), '\"');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
      
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      assertEquals(2, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(2, enumSet0.size());
      assertNotNull(iterator0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean0 = enumSet0.add(locale_Category0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(boolean0);
      
      Spliterator<Locale.Category> spliterator0 = enumSet0.spliterator();
      assertEquals(2, enumSet0.size());
      assertNotNull(spliterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string3 = StringUtils.join(iterator0, "");
      assertEquals(2, enumSet0.size());
      assertNotNull(string3);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("DISPLAYFORMAT", string3);
      
      String string4 = StringUtils.trim("Array and q$\"");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Array and q$\"", string4);
      
      boolean boolean1 = StringUtils.equals((CharSequence) null, (CharSequence) "m");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "m'm,m mimsm mnmemimtmhmemrm momfm mtmympmem mMmampm.mEmnmtmrmym mnmomrm mamnm mAmrmrmamym");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      boolean boolean2 = StringUtils.containsAny((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0);
      assertArrayEquals(new char[] {'\"', '\"', '\"', '\"', '\"'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isWhitespace("Array and q$\"");
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)109;
      byteArray0[1] = (byte) (-116);
      String string5 = StringUtils.join(byteArray0, '\"');
      assertArrayEquals(new byte[] {(byte)109, (byte) (-116)}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("109\"-116", string5);
      
      String string6 = StringUtils.capitalize("t8,5AZoG<t8,5AZoG<");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertEquals("T8,5AZoG<t8,5AZoG<", string6);
      
      charSequenceArray0[0] = (CharSequence) "T8,5AZoG<t8,5AZoG<";
      charSequenceArray0[1] = (CharSequence) "m'm,m mimsm mnmemimtmhmemrm momfm mtmympmem mMmampm.mEmnmtmrmym mnmomrm mamnm mAmrmrmamym";
      charSequenceArray0[2] = (CharSequence) "Array and q$\"";
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      String string0 = StringUtils.join(byteArray0, '=', (int) (byte)106, (int) (byte)106);
      assertArrayEquals(new byte[] {(byte)106}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = "\\u";
      String string2 = StringUtils.capitalize(string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("\\u", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) string1;
      charSequenceArray0[3] = (CharSequence) string1;
      String string3 = StringUtils.wrap("", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      String string0 = StringUtils.upperCase("K'N\"/", (Locale) null);
      assertNotNull(string0);
      assertEquals("K'N\"/", string0);
      
      String string1 = StringUtils.lowerCase("Locale must not be null", (Locale) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("locale must not be null", string1);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2459), 0).when(comparator0).compare(any() , any());
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(comparator0);
      assertEquals(0, priorityQueue0.size());
      assertNotNull(priorityQueue0);
      assertFalse(priorityQueue0.contains(0));
      
      boolean boolean0 = priorityQueue0.add("locale must not be null");
      assertEquals(1, priorityQueue0.size());
      assertTrue(priorityQueue0.contains("locale must not be null"));
      assertFalse(priorityQueue0.contains(0));
      assertTrue(boolean0);
      
      Integer integer0 = new Integer((-2459));
      assertNotNull(integer0);
      assertEquals((-2459), (int)integer0);
      
      boolean boolean1 = priorityQueue0.add(integer0);
      assertEquals(2, priorityQueue0.size());
      assertTrue(priorityQueue0.contains((-2459)));
      assertFalse(priorityQueue0.contains(0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = priorityQueue0.add("");
      assertEquals(3, priorityQueue0.size());
      assertTrue(priorityQueue0.contains((-2459)));
      assertFalse(priorityQueue0.contains(0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, ':');
      assertEquals(3, priorityQueue0.size());
      assertNotNull(string2);
      assertTrue(priorityQueue0.contains((-2459)));
      assertFalse(priorityQueue0.contains(0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("-2459:locale must not be null:", string2);
      
      boolean boolean3 = StringUtils.containsAny((CharSequence) ":locale must not be null:-2459", (CharSequence) "K'N\"/");
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string3 = StringUtils.replaceIgnoreCase((String) null, "The Array must not be null", (String) null, 49);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      String string0 = StringUtils.rightPad("O4Wyv<v", 0, "");
      assertNotNull(string0);
      assertEquals("O4Wyv<v", string0);
      
      String string1 = StringUtils.rotate("O4Wyv<v", 0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("O4Wyv<v", string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = 'C';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'/', 'C'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("O4Wyv<v", "1(ctXP", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("O4Wyv<v", string2);
      
      String string3 = StringUtils.abbreviate("", 0, 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "1(ctXP", 0, (-11));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "O4Wyv<v";
      charSequenceArray0[4] = (CharSequence) "O4Wyv<v";
      charSequenceArray0[5] = (CharSequence) "O4Wyv<v";
      charSequenceArray0[6] = (CharSequence) "O4Wyv<v";
      String string4 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '9', (-11), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -11
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.defaultIfEmpty("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("", "Sa4@8Mxeq:;V~pSa4@8Mxeq:;V~p");
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("lK %", "U%3IQRXCgPB", false);
      assertEquals((-9), int0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (long) (-9);
      String string0 = StringUtils.join(longArray0, 'R', (-9), (-9));
      assertArrayEquals(new long[] {(-9L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center("lK %", 97, 'R');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRlK %RRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR", string1);
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "MVb<GK }izowG29kGgE";
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("MVb<GK }izowG29kGgE"));
      
      charSequenceArray0[2] = (CharSequence) "MVb<GK }izowG29kGgE";
      charSequenceArray0[3] = (CharSequence) "MVb<GK }izowG29kGgE";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = treeSet0.add(charSequenceArray0[0]);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(treeSet0.contains("MVb<GK }izowG29kGgE"));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.mid("MVb<GK }izowG29kGgE", 3, 64);
      assertNotNull(string0);
      assertEquals("<GK }izowG29kGgE", string0);
      
      String string1 = StringUtils.removeAll("MVb<GK }izowG29kGgE", "MVb<GK }izowG29kGgE");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfAny("MVb<GK }izowG29kGgE", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string2 = StringUtils.removeEndIgnoreCase("<GK }izowG29kGgE", "<GK }izowG29kGgE");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = 1252L;
      longArray0[2] = (long) 0;
      longArray0[3] = (long) 0;
      longArray0[4] = (long) 3;
      longArray0[5] = (long) 0;
      longArray0[6] = (long) 64;
      String string3 = StringUtils.join(longArray0, '*', 85, (-392));
      assertArrayEquals(new long[] {0L, 1252L, 0L, 0L, 3L, 0L, 64L}, longArray0);
      assertEquals(7, longArray0.length);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.center("", (-392));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      String string0 = "=8`4XwRr,HfV\"g2&$";
      String string1 = StringUtils.wrapIfMissing("=8`4XwRr,HfV\"g2&$", " ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" =8`4XwRr,HfV\"g2&$ ", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      String string0 = "[";
      int int0 = (-1217);
      String string1 = StringUtils.substringBetween("[", "[");
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance((CharSequence) null, (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      short[] shortArray0 = new short[0];
      String string0 = StringUtils.join(shortArray0, '&');
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'S';
      charArray0[1] = 'x';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'S', 'x'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("Comparator should not be null.", "", true);
      assertFalse(int1 == int0);
      assertEquals(30, int1);
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet1.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      String string0 = StringUtils.join((int[]) null, 'n');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category1));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet1.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertTrue(enumSet0.equals((Object)enumSet1));
      
      String string0 = StringUtils.join(iterator0, 'Y');
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(string0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertEquals("FORMAT", string0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      intArray0[2] = 3986;
      intArray0[6] = 8192;
      String string1 = StringUtils.join(intArray0, 'Y');
      assertArrayEquals(new int[] {89, 0, 3986, 0, 0, 0, 8192, 0}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("89Y0Y3986Y0Y0Y0Y8192Y0", string1);
      
      String string2 = StringUtils.uncapitalize("[");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("[", string2);
      
      String string3 = StringUtils.leftPad(" vs ", (-2455), "KwJ!M>ss8");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" vs ", string3);
      
      String string4 = StringUtils.wrap(";$^_?N}$N z^}", 'Y');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Y;$^_?N}$N z^}Y", string4);
      
      String string5 = StringUtils.leftPad("Gn", 0);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("Gn", string5);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Y;$^_?N}$N z^}Y", (CharSequence) "Gn");
      assertFalse(boolean0);
      
      short[] shortArray0 = new short[0];
      String string6 = StringUtils.join(shortArray0, '6');
      assertArrayEquals(new short[] {}, shortArray0);
      assertEquals(0, shortArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertEquals("", string6);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "FORMAT";
      stringArray0[1] = "Gn";
      stringArray0[2] = "KwJ!M>ss8";
      String string7 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertEquals("", string7);
      
      String string8 = StringUtils.removeStart("", "The character ");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertTrue(string8.equals((Object)string6));
      assertEquals("", string8);
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      String string0 = StringUtils.join((byte[]) null, 'w', 128, 128);
      assertNull(string0);
      
      String string1 = StringUtils.rightPad((String) null, 128);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.toRootLowerCase((String) null);
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviateMiddle("", "", (-880));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.rightPad("", 4, "?@;uN");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("?@;u", string2);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      assertFalse(vector0.contains(""));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vector0.add((Object) null);
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertFalse(vector0.contains(""));
      assertTrue(boolean0);
      
      boolean boolean1 = vector0.removeElement(object0);
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertFalse(vector0.contains(""));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.join((List<?>) vector0, '9', 8, 8);
      assertEquals(10, vector0.capacity());
      assertEquals("[null]", vector0.toString());
      assertEquals(1, vector0.size());
      assertFalse(vector0.isEmpty());
      assertNotNull(string3);
      assertFalse(vector0.contains(""));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.trimToEmpty("?@;u");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("?@;u", string4);
      
      String string5 = StringUtils.getDigits("ra");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      
      String string6 = StringUtils.replaceIgnoreCase("", "", "qyi", (-880));
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertEquals("", string6);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ldBax[{5Dv{h";
      stringArray0[1] = "WKU}'{b&)yv ";
      stringArray0[2] = "ra";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "WKU}'{b&)yv ";
      stringArray0[6] = "WKU}'{b&)yv ";
      stringArray0[7] = "ra";
      stringArray0[8] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean2 = StringUtils.startsWithAny("ra", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      Iterator<String> iterator0 = hashSet0.iterator();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(iterator0);
      
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      int int0 = StringUtils.indexOf((CharSequence) "...", 8167, 8167);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.center("...", 3190, (String) null);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      String string0 = StringUtils.reverse(" ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance(" ", "*c'M");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("i,}", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.wrapIfMissing("!iA6q8", 'h');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("h!iA6q8h", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "!iA6q8", "");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("-]Y`9>>", "-]Y`9>>");
      assertNotNull(string0);
      assertEquals("-]Y`9>>", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("-]Y`9>>", "-]Y`9>>");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.substringBefore("The Array must not be null", (-2319));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The Array must not be null", string1);
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("3\"63\"6", "3\"63\"6");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      String string0 = "\\u";
      String[] stringArray0 = StringUtils.split(string0, "o+u';m)qkap#_kZU", 39);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "MVb<GK }izowG29kGgE";
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("MVb<GK }izowG29kGgE"));
      
      charSequenceArray0[2] = (CharSequence) "MVb<GK }izowG29kGgE";
      charSequenceArray0[3] = (CharSequence) "MVb<GK }izowG29kGgE";
      boolean boolean0 = treeSet0.add(charSequenceArray0[0]);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(treeSet0.contains("MVb<GK }izowG29kGgE"));
      assertTrue(boolean0);
      
      String string0 = StringUtils.replace("A}j>'NlBWp4H`O&2npt", "#Jk;zkhM%,9", "#Jk;zkhM%,9");
      assertNotNull(string0);
      assertEquals("A}j>'NlBWp4H`O&2npt", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("#Jk;zkhM%,9", "#Jk;zkhM%,9");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.unwrap("hF-u", ".VNQ0T6P>`x");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("hF-u", string1);
      
      String string2 = StringUtils.truncate("", 23, 23);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.stripEnd("yC`pyq'5up.", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("yC`pyq'5up.", string3);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Search and Replace array lengths don't match: ", "*c'M", 15);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      objectArray0[1] = (Object) "Strings must not be null";
      objectArray0[2] = (Object) "Strings must not be null";
      objectArray0[4] = (Object) "";
      objectArray0[5] = (Object) "";
      objectArray0[6] = (Object) "";
      String string0 = StringUtils.join(objectArray0, "y>, $;J`[[C&Y\"SX");
      assertEquals(7, objectArray0.length);
      assertNotNull(string0);
      assertEquals("y>, $;J`[[C&Y\"SXStrings must not be nully>, $;J`[[C&Y\"SXStrings must not be nully>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SX", string0);
      
      String string1 = StringUtils.unwrap("`>f3", ".VNQ0T6P>`x");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`>f3", string1);
      
      String string2 = StringUtils.substring("y>, $;J`[[C&Y\"SXStrings must not be nully>, $;J`[[C&Y\"SXStrings must not be nully>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SX", (-425), 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.substring("y>, $;J`[[C&Y\"SXStrings must not be nully>, $;J`[[C&Y\"SXStrings must not be nully>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SXy>, $;J`[[C&Y\"SX", 160, 17);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      Object[] objectArray0 = null;
      String string0 = StringUtils.replace("", "I#oCk\"+(,v^r>a", "I#oCk\"+(,v^r>a");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.substring("", 2, 2);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = "The type must not be null";
      String string3 = StringUtils.removeEndIgnoreCase("", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      LinkedHashSet<CharBuffer> linkedHashSet0 = new LinkedHashSet<CharBuffer>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(312);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(312, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(312, charBuffer0.limit());
      assertEquals(312, charBuffer0.length());
      assertEquals(312, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = charBuffer0.compact();
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(312, charBuffer0.position());
      assertEquals(312, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(312, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer1.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(312, charBuffer1.capacity());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(312, charBuffer1.position());
      assertEquals(312, charBuffer1.limit());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.length());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      
      boolean boolean1 = linkedHashSet0.add(charBuffer0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(312, charBuffer0.position());
      assertEquals(312, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(312, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertSame(charBuffer0, charBuffer1);
      assertTrue(linkedHashSet0.contains(charBuffer0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        charBuffer1.put("Object varargs must not be null", 2526, 3108);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width is %d", '#');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) '#';
      intArray0[6] = (int) '#';
      String string0 = StringUtils.prependIfMissingIgnoreCase("Minimum abbreviation width is %d", "Minimum abbreviation width is %d", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width is %d", string0);
      
      String string1 = StringUtils.mid("nt(mSZR+aK*eN", 56, 2147483645);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Minimum abbreviation width is %d", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string2 = StringUtils.removeAll("maxWith cannot be negative", "v=lMewCTb0z$S9&Y");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("maxWith cannot be negative", string2);
      
      int int0 = StringUtils.lastIndexOfAny("maxWith cannot be negative", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.substringAfterLast("?T&YHVgbf3Ce", 35);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      String string0 = StringUtils.chop("K[[$`1Jqi&@6\"k>xg$");
      assertNotNull(string0);
      assertEquals("K[[$`1Jqi&@6\"k>xg", string0);
      
      String string1 = StringUtils.replace("~>tN8B-\u0000Lrhlj", "(hxpD]gq", "b6s#d`C");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("~>tN8B-\u0000Lrhlj", string1);
      
      int[] intArray0 = new int[1];
      int int0 = (-2819);
      intArray0[0] = (-2819);
      // Undeclared exception!
      try { 
        StringUtils.join(intArray0, '`', (-2819), (-1074));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2819
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "I3}?&|]FBQ");
      assertNotNull(string0);
      assertEquals("I3}?&|]FBQ", string0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-2061L);
      String string1 = StringUtils.join(longArray0, '|');
      assertArrayEquals(new long[] {(-2061L)}, longArray0);
      assertEquals(1, longArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-2061", string1);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "-2061");
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripStart("-2061", "The Array must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("-2061", string2);
      
      boolean boolean1 = StringUtils.isNotBlank("-2061");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(2, enumSet1.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      
      String string0 = StringUtils.join(iterator0, 'Y');
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(string0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertEquals("DISPLAYYFORMAT", string0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      boolean boolean0 = StringUtils.isWhitespace((CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((byte[]) null, 'Y');
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "DISPLAYYFORMAT";
      charSequenceArray0[4] = (CharSequence) null;
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      String string0 = StringUtils.removeStart(" vs ", " vs ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((List<?>) null, "", (-2764), 0);
      assertNull(string1);
      
      String string2 = StringUtils.removeEnd("Threshold must not be negative", "z*qR0fkO");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Threshold must not be negative", string2);
      
      String string3 = StringUtils.substringBetween("Threshold must not be negative", "z*qR0fkO", "Threshold must not be negative");
      assertNull(string3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = 'z';
      charArray0[2] = '8';
      charArray0[3] = 'o';
      charArray0[4] = 'E';
      charArray0[5] = '<';
      charArray0[6] = 'x';
      charArray0[7] = '~';
      String string4 = StringUtils.join(charArray0, 'E', (-1316), (-2764));
      assertArrayEquals(new char[] {'G', 'z', '8', 'o', 'E', '<', 'x', '~'}, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      boolean boolean0 = StringUtils.endsWith("", (CharSequence) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(stack0);
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.chomp("org.apache.commons.lang3.StringUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.StringUtils", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("org.apache.commons.lang3.StringUtils");
      assertFalse(boolean0);
      
      String string1 = StringUtils.toRootLowerCase("org.apache.commons.lang3.StringUtils");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.stringutils", string1);
      
      String string2 = StringUtils.substringBetween("QOB |v);}pLl", "org.apache.commons.lang3.StringUtils", "QOB |v);}pLl");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      String string0 = StringUtils.chop("\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrapIfMissing("tGsGN?`ctgw", 'l');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ltGsGN?`ctgwl", string1);
      
      String string2 = StringUtils.wrap("", "#");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.removeEnd((String) null, "tGsGN?`ctgw");
      assertNull(string3);
      
      String string4 = StringUtils.substring("Ju9&>", (-39), (-39));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "tGsGN?`ctgw";
      String string5 = StringUtils.prependIfMissingIgnoreCase("ltGsGN?`ctgwl", "ltGsGN?`ctgwl", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertEquals("ltGsGN?`ctgwl", string5);
      
      String string6 = StringUtils.swapCase("Ju9&>");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertEquals("jU9&>", string6);
      
      String string7 = StringUtils.replacePattern("Minimum abbreviation width with offset is %d", "\r", "$2$rr,|OH8+|T/bT} ");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string7);
      
      String string8 = StringUtils.replaceFirst((String) null, "Minimum abbreviation width with offset is %d", "EJ\"iYoV=G$A&");
      assertNull(string8);
      
      String string9 = StringUtils.replaceAll((String) null, "P9'MRn-4", "ltGsGN?`ctgwl");
      assertNull(string9);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 321);
      assertEquals((-1), int0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("org.apache.commons.lang3.CharSequenceUtils", charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(42, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      String string0 = StringUtils.rotate("n!di\f^", 2);
      assertNotNull(string0);
      assertEquals("\f^n!di", string0);
      
      String string1 = StringUtils.replaceIgnoreCase("f^n!di", " vs ", "f^n!di");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("f^n!di", string1);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '+';
      charArray0[1] = '$';
      charArray0[2] = '=';
      charArray0[3] = 'R';
      int int0 = StringUtils.indexOfAny((CharSequence) "f^n!di", charArray0);
      assertArrayEquals(new char[] {'+', '$', '=', 'R'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      String string0 = StringUtils.unwrap("y3}?&|[]FBQ", '\u001F');
      assertNotNull(string0);
      assertEquals("y3}?&|[]FBQ", string0);
      
      char[] charArray0 = new char[0];
      String string1 = StringUtils.join(charArray0, 'w');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "y3}?&|[]FBQ", "");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAsciiPrintable("y3}?&|[]FBQ");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "");
      assertTrue(boolean0);
      
      String string1 = StringUtils.unwrap("hF-u", ".VNQ0T6P>`x");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("hF-u", string1);
      
      String string2 = StringUtils.truncate("", 23, 23);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.stripEnd("yC`pyq'5up.", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("yC`pyq'5up.", string3);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = 'S';
      charArray0[2] = 'x';
      charArray0[3] = 'x';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Search and Replace array lengths don't match: ", charArray0);
      assertArrayEquals(new char[] {'S', 'S', 'x', 'x'}, charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(1, int0);
      
      int int1 = StringUtils.compare("hF-u", "Y", true);
      assertFalse(int1 == int0);
      assertEquals(15, int1);
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      String string0 = StringUtils.rightPad("", 2048);
      assertNotNull(string0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '`';
      charArray0[1] = '`';
      charArray0[2] = '`';
      charArray0[3] = '`';
      charArray0[4] = '`';
      charArray0[6] = '`';
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "The Array must not be null";
      stringArray0[1] = "Strings must not be null";
      stringArray0[2] = "&";
      stringArray0[3] = "_";
      stringArray0[4] = "4'FT?xW";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, "Strings must not be null");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("The Array must not be null"));
      
      CharBuffer charBuffer0 = CharBuffer.allocate(115);
      assertFalse(charBuffer0.isDirect());
      assertEquals(115, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(115, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(115, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(115, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = charBuffer0.asReadOnlyBuffer();
      assertFalse(charBuffer0.isDirect());
      assertEquals(115, charBuffer0.remaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(115, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(115, charBuffer0.length());
      assertEquals(0, charBuffer0.position());
      assertEquals(115, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertEquals(115, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(115, charBuffer1.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertEquals(115, charBuffer1.length());
      assertEquals(115, charBuffer1.capacity());
      assertNotNull(charBuffer1);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(115, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(115, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(115, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=115 cap=126]", byteBuffer0.toString());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(115, byteBuffer0.limit());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(115, byteBuffer0.remaining());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(0, byteBuffer0.position());
      assertEquals(126, byteBuffer0.capacity());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertNotNull(byteBuffer0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      boolean[] booleanArray0 = new boolean[0];
      String string0 = StringUtils.join(booleanArray0, '1');
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "The Array must not be null", "&");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.strip((String) null);
      assertNull(string1);
      
      char[] charArray0 = new char[3];
      charArray0[0] = '1';
      charArray0[1] = '8';
      charArray0[2] = '1';
      int int1 = StringUtils.indexOfAnyBut((CharSequence) charBuffer1, charArray0);
      assertArrayEquals(new char[] {'1', '8', '1'}, charArray0);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertEquals(115, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(115, charBuffer0.position());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(115, charBuffer0.limit());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertEquals(115, charBuffer1.remaining());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(115, charBuffer1.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertEquals(115, charBuffer1.length());
      assertEquals(115, charBuffer1.capacity());
      assertEquals(3, charArray0.length);
      assertFalse(int1 == int0);
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.join(iterator0, 'Y');
      assertEquals(1, enumSet0.size());
      assertNotNull(string0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertEquals("FORMAT", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("FORMAT", "FORMAT", "FORMAT");
      assertNull(stringArray0);
      
      String string1 = StringUtils.abbreviate((String) null, (String) null, 37, 37);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertFalse(boolean0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (int) 'Y', (int) 'Y');
      assertEquals((-1), int0);
      
      String string2 = StringUtils.replaceEachRepeatedly("FORMAT", (String[]) null, (String[]) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertEquals("FORMAT", string2);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      Locale locale1 = Locale.ITALY;
      assertEquals("IT", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = locale0.getDisplayCountry(locale1);
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("IT", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotNull(string3);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      Locale.setDefault(locale1);
      assertEquals("IT", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      
      int int1 = StringUtils.getFuzzyDistance("FORMAT", "FORMAT", locale1);
      assertEquals("IT", locale1.getCountry());
      assertEquals("it", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("it_IT", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("ITA", locale1.getISO3Country());
      assertNotSame(locale1, locale0);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(int1 == int0);
      assertEquals(16, int1);
      
      String string4 = StringUtils.stripToEmpty("FORMAT");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("FORMAT", string4);
      
      int int2 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      String string0 = StringUtils.removeEnd("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviateMiddle("", "", (-880));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.rightPad("VD(", 4, "T?@;uN");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("VD(", string2);
      
      String string3 = StringUtils.replace("", "VD(", "L6<d]3EH>k=E39", 32);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.removeEndIgnoreCase("", "^#H:}D?");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "VD(", (-880));
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "WKU}'{b&)yv ";
      stringArray0[1] = "fLhNt! hp";
      String string5 = StringUtils.difference("", "Minimum abbreviation width with offset is %d");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("Minimum abbreviation width with offset is %d", string5);
      
      String[] stringArray1 = StringUtils.split("HPuD", 'W');
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      Locale locale0 = Locale.US;
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      String[] stringArray2 = Locale.getISOCountries();
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(250, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      int int1 = StringUtils.getFuzzyDistance("WKU}'{b&)yv ", "HPuD", locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Locale locale1 = Locale.UK;
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      
      String string6 = StringUtils.upperCase(">8R2BGO9Jz@@lUvX", locale1);
      assertEquals("en", locale1.getLanguage());
      assertEquals("en_GB", locale1.toString());
      assertEquals("GBR", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("eng", locale1.getISO3Language());
      assertEquals("GB", locale1.getCountry());
      assertNotSame(locale1, locale0);
      assertNotNull(string6);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertEquals(">8R2BGO9JZ@@LUVX", string6);
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      String string0 = StringUtils.swapCase("8DV_#1^#(RJX");
      assertNotNull(string0);
      assertEquals("8dv_#1^#(rjx", string0);
      
      String string1 = StringUtils.getDigits((String) null);
      assertNull(string1);
      
      Locale locale0 = Locale.forLanguageTag("Cannot store ");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      int int0 = StringUtils.getFuzzyDistance("8DV_#1^#(RJX", "8DV_#1^#(RJX", locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals(34, int0);
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("', is neither of type Map.Entry nor an Array", (String) null, "m");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      String string1 = StringUtils.replacePattern("', is neither of type Map.Entry nor an Array", "", "m");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("m'm,m mimsm mnmemimtmhmemrm momfm mtmympmem mMmampm.mEmnmtmrmym mnmomrm mamnm mAmrmrmamym", string1);
      
      String string2 = StringUtils.center("', is neither of type Map.Entry nor an Array", (-1047), '\"');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
      
      String string3 = StringUtils.repeat('\"', (int) '\"');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"", string3);
      
      int[] intArray0 = StringUtils.toCodePoints("\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"");
      assertEquals(34, intArray0.length);
      assertNotNull(intArray0);
      
      String string4 = StringUtils.substring("@v2zj", 67, (-1047));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      char[] charArray0 = new char[0];
      String string5 = StringUtils.join(charArray0, '@');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 0, "");
      assertNull(string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.join((short[]) null, '0');
      assertNull(string2);
      
      String string3 = StringUtils.substring("Strings must not be null", (-1));
      assertNotNull(string3);
      assertEquals("l", string3);
      
      String string4 = StringUtils.join((char[]) null, '&', 2970, (-1));
      assertNull(string4);
      
      boolean boolean0 = StringUtils.containsWhitespace(charSequence0);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string5 = StringUtils.toRootUpperCase((String) null);
      assertNull(string5);
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, '}', 13, 13);
      assertNull(string0);
      
      String[] stringArray0 = StringUtils.split("=", '6');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("Kes_h>Saj", (-1650), (-166));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      String string0 = "C0Fs)I-4S'";
      Locale locale0 = null;
      String string1 = "";
      String string2 = StringUtils.upperCase("", (Locale) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      String string0 = "K'N\"/";
      String string1 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string2 = "Index: ";
      String string3 = StringUtils.substringAfter("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Index: ");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = "R/L{t0";
      // Undeclared exception!
      try { 
        StringUtils.joinWith("R/L{t0", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "MVb<GK }izowG29kGgE");
      assertNotNull(string0);
      assertFalse(treeSet0.contains("MVb<GK }izowG29kGgE"));
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "MVb<GK }izowG29kGgE";
      charSequenceArray0[1] = (CharSequence) "";
      Iterator<Object> iterator1 = treeSet0.descendingIterator();
      assertNotSame(iterator1, iterator0);
      assertNotNull(iterator1);
      assertFalse(treeSet0.contains("MVb<GK }izowG29kGgE"));
      assertFalse(iterator1.equals((Object)iterator0));
      
      charSequenceArray0[2] = (CharSequence) "MVb<GK }izowG29kGgE";
      charSequenceArray0[3] = (CharSequence) "MVb<GK }izowG29kGgE";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = treeSet0.add(charSequenceArray0[0]);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(treeSet0.contains(""));
      assertTrue(treeSet0.contains("MVb<GK }izowG29kGgE"));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.mid("MVb<GK }izowG29kGgE", 3, 64);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("<GK }izowG29kGgE", string1);
      
      boolean boolean2 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.removeAll("MVb<GK }izowG29kGgE", "MVb<GK }izowG29kGgE");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      int int0 = StringUtils.lastIndexOfAny("MVb<GK }izowG29kGgE", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(19, int0);
      
      String string3 = StringUtils.substringAfterLast("", (-1755));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      boolean boolean3 = StringUtils.contains((CharSequence) "", (-1740));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      String string0 = StringUtils.right("p{InCombiningDiacriSA.II\")^P", (-24));
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny("p{InCombiningDiacriSA.II\")^P", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("p{InCombiningDiacriSA.II\")^P");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.indexOfIgnoreCase(charSequenceArray0[0], charSequenceArray0[0], (-24));
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean3 = StringUtils.isNumericSpace("");
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      boolean boolean4 = StringUtils.contains((CharSequence) "", (-3605));
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      String[] stringArray0 = StringUtils.split("%a`3h6FaivZLJ#tI", "D", (-24));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      String string0 = StringUtils.strip("j", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string0);
      assertEquals("j", string0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string1 = StringUtils.substringAfter("bVTz#-b", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeAll("j", "bVTz#-b");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("j", string2);
      
      String string3 = StringUtils.rightPad("j", (-128), 'e');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals("j", string3);
      
      String string4 = StringUtils.mid("', is neither of type Map.Entry nor an Array", 97, 2490);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.mid("", (-128), 2490);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      String string0 = StringUtils.center("The character ", (-1588), "`]:qMn y$yI_}U=6");
      assertNotNull(string0);
      assertEquals("The character ", string0);
      
      String string1 = StringUtils.removeEnd("", "u!y0w'}l#gr_w");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      String string2 = StringUtils.prependIfMissingIgnoreCase("`]:qMn y$yI_}U=6", "The character ", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("`]:qMn y$yI_}U=6", string2);
      
      String string3 = StringUtils.mid("9yiggd+un0", (-2922), 2497);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("9yiggd+un0", string3);
      
      boolean boolean0 = StringUtils.containsAny(charSequenceArray0[5], charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.removeAll("Object varargs must not be null", "u!y0w'}l#gr_w");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Object varargs must not be null", string4);
      
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string5 = StringUtils.substringAfterLast("e>Y0", 64);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      String string0 = StringUtils.defaultString(" r", (String) null);
      assertNotNull(string0);
      assertEquals(" r", string0);
      
      int int0 = StringUtils.lastIndexOfAny(" r", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.join((int[]) null, 'E');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 0, "");
      assertNull(string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) null, supplier0);
      assertNotNull(charSequence0);
      assertEquals("", charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.join((short[]) null, '0');
      assertNull(string2);
      
      String string3 = StringUtils.substring("Strings must not be null", (-1));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)charSequence0));
      assertEquals("l", string3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Strings must not be null";
      stringArray0[1] = null;
      stringArray0[2] = "l";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)charSequence0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Strings must not be null", string4);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("% 7wSn#kB{", "The Array must not be null", (-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 27
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L";
      stringArray0[1] = "L";
      stringArray0[2] = "L";
      stringArray0[3] = "L";
      String string0 = StringUtils.leftPad("", 2114);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "L", (CharSequence) "L");
      assertTrue(boolean0);
      
      short[] shortArray0 = new short[7];
      shortArray0[0] = (short)90;
      shortArray0[1] = (short)1444;
      shortArray0[2] = (short)90;
      shortArray0[3] = (short) (-324);
      shortArray0[4] = (short)31;
      shortArray0[5] = (short)19;
      shortArray0[6] = (short)8192;
      String string1 = StringUtils.join(shortArray0, ';');
      assertArrayEquals(new short[] {(short)90, (short)1444, (short)90, (short) (-324), (short)31, (short)19, (short)8192}, shortArray0);
      assertEquals(7, shortArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("90;1444;90;-324;31;19;8192", string1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("L", string2);
      
      String string3 = StringUtils.removeStart("", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.capitalize((String) null);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      String string0 = StringUtils.trimToNull("(L");
      assertNotNull(string0);
      assertEquals("(L", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("(L");
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("(L", "(L");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("(L", string1);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "(L";
      stringArray0[1] = "(L";
      stringArray0[2] = "(L";
      stringArray0[3] = "(L";
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("(L", string2);
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("', is neither of type Map.Entry nor an Array", (String) null, "m");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      String string1 = StringUtils.replacePattern("', is neither of type Map.Entry nor an Array", (String) null, "m");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      
      String string2 = StringUtils.center("', is neither of type Map.Entry nor an Array", (-1047), '\"');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
      
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      assertEquals(2, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(2, enumSet0.size());
      assertNotNull(iterator0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean0 = enumSet0.add(locale_Category0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(boolean0);
      
      String string3 = StringUtils.join(iterator0, "");
      assertEquals(2, enumSet0.size());
      assertNotNull(string3);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("DISPLAYFORMAT", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean1 = StringUtils.equalsAnyIgnoreCase("m", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string4 = StringUtils.leftPad(", '", (-554), "Exception cloning Cloneable type ");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals(", '", string4);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string5 = StringUtils.removeIgnoreCase(">s}mQnk?vyd#9JruDX", "Object varargs must not be null");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals(">s}mQnk?vyd#9JruDX", string5);
      
      String string6 = StringUtils.joinWith("', is neither of type Map.Entry nor an Array", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      String string7 = StringUtils.replaceChars("e5F[VAwUFs.", ";v8 #*8", (String) null);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertEquals("e5F[VAwUFs.", string7);
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      String string0 = StringUtils.abbreviate("org.apache.commons.lan#(bk.", 21, 21);
      assertNotNull(string0);
      assertEquals("...e.commons.lan#(bk.", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "wU|v";
      stringArray0[1] = "org.apache.commons.lan#(bk.";
      stringArray0[2] = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      String string1 = StringUtils.replaceEachRepeatedly("clone", stringArray0, stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("clone", string1);
      
      String string2 = StringUtils.replaceChars("clone", "wU|v", (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("clone", string2);
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category1));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet1.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertTrue(enumSet0.equals((Object)enumSet1));
      
      String string0 = StringUtils.join(iterator0, 'Y');
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(string0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertEquals("FORMAT", string0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      String string1 = StringUtils.join((byte[]) null, 'Y');
      assertNull(string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "FORMAT";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "[";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) arrayList0, "ARPm)1Np^_WIBy", (-1428), (-66));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1428
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.SPACE;
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      String string1 = StringUtils.abbreviateMiddle(" ", " ", 8);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(" ", string1);
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("L", "K'N\"/", 132);
      assertNotNull(string0);
      assertEquals("L", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[15];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(15, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("L");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      charSequenceArray0[7] = (CharSequence) "K'N\"/";
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "L");
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(4, stringArray1.length);
      assertEquals(4, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.isAsciiPrintable(stringArray1[3]);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 132;
      String string1 = StringUtils.trimToNull("K'N\"/");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("K'N\"/", string1);
      
      boolean boolean2 = StringUtils.containsWhitespace(stringArray1[1]);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string2 = StringUtils.unwrap(stringArray1[1], "L");
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertNull(string2);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string3 = StringUtils.getCommonPrefix(stringArray1);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertNotNull(string3);
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("', is neither of type Map.Entry nor an Array", (String) null, "m");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      String string1 = StringUtils.replacePattern("', is neither of type Map.Entry nor an Array", "2", "m");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("}`v5X~g");
      assertEquals(7, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.substringBefore("null/empty items", (-1047));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("null/empty items", string2);
      
      String string3 = StringUtils.replace("}`v5X~g", "null/empty items", "v)zE,>=4_OoF?Nko", (-1047));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("}`v5X~g", string3);
      
      String string4 = StringUtils.substringAfterLast((String) null, (-1047));
      assertNull(string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "}`v5X~g", (CharSequence) null, (-1929));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("#YQ2sCZ*Mt{\"9-P1", supplier0);
      assertNotNull(string0);
      assertEquals("#YQ2sCZ*Mt{\"9-P1", string0);
      
      String string1 = StringUtils.replaceChars(" in an array of ", "^", " in an array of ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" in an array of ", string1);
      
      String string2 = StringUtils.abbreviateMiddle("Threshold must not be negative", "^", 32);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Threshold must not be negative", string2);
      
      boolean boolean1 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("*Q*y");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.substringBefore("", (-1399));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " in an array of ", (CharSequence) "^", 1943);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = "K'N\"/";
      boolean boolean1 = StringUtils.isAsciiPrintable(stringArray0[3]);
      assertEquals(4, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[] floatArray0 = new float[2];
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("'~-");
      assertNotNull(string0);
      assertEquals("'~-", string0);
      
      String string1 = StringUtils.defaultString("'~-", "'~-");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("'~-", string1);
      
      String string2 = StringUtils.removeFirst("G^^BWsp^`847i(_", " ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("G^^BWsp^`847i(_", string2);
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      boolean boolean0 = StringUtils.isWhitespace("[");
      assertFalse(boolean0);
      
      String string0 = StringUtils.join((byte[]) null, 'Y');
      assertNull(string0);
      
      String string1 = StringUtils.overlay("", "U-Sj:n0kM", 92, 53);
      assertNotNull(string1);
      assertEquals("U-Sj:n0kM", string1);
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = StringUtils.trimToEmpty("Sa4@8Mxeq:;V~p");
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStart("Sa4@8Mxeq:;V~p", "Sa4@8Mxeq:;V~p");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceChars("Sa4@8Mxeq:;V~p", (String) null, (String) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringAfterLast("org.apache.commons.lang3.StringUtils", 85);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("tils", string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "Sa4@8Mxeq:;V~p", (CharSequence) "tils");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      String string0 = StringUtils.substringAfterLast("z*qR0fkO", 85);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      String string0 = StringUtils.strip("Aborting to protect against StackOverflowError - output of one loop is the input of another", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string0);
      assertEquals("borting to protect against StackOverflowError - output of one loop is the inpu", string0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<CharBuffer> list0 = linkedList0.subList(0, 0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      LinkedList<CharBuffer> linkedList1 = new LinkedList<CharBuffer>(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      ListIterator<CharBuffer> listIterator0 = linkedList1.listIterator();
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(listIterator0);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      String string1 = StringUtils.join((Iterator<?>) listIterator0, '8');
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, linkedList1.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotNull(string1);
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeAll("org.apache.commons.lang3.exception.CloneFailedException", "borting to protect against StackOverflowError - output of one loop is the inpu");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string2);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      String string3 = StringUtils.lowerCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", locale0);
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.toString());
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("aborting to protect against stackoverflowerror - output of one loop is the input of another", string3);
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      String string0 = StringUtils.getDigits("QIE5 ");
      assertNotNull(string0);
      assertEquals("5", string0);
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(iterator0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("org.apache.commons.lan#(bk.", "org.apache.commons.lan#(bk.", (-526));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.stripToNull("Cannot store ");
      assertNotNull(string0);
      assertEquals("Cannot store", string0);
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string0 = StringUtils.toRootUpperCase((String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.repeat('D', 1803);
      assertNotNull(string1);
      
      boolean boolean1 = StringUtils.isMixedCase((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNotEmpty(string1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbrevTation width is %Q", '#');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) '#';
      String string0 = StringUtils.repeat("Minimum abbrevTation width is %Q", "$Hj", 1551);
      assertNotNull(string0);
      
      String string1 = StringUtils.right("$Hj", 1551);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("$Hj", string1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Minimum abbrevTation width is %Q", string2);
      
      String string3 = StringUtils.replaceChars((String) null, ']', '=');
      assertNull(string3);
      
      String string4 = StringUtils.capitalize(" ?xXIl(`t;X}rk");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertEquals(" ?xXIl(`t;X}rk", string4);
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)0;
      String string0 = StringUtils.replaceChars("", '!', '!');
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripEnd("The String must not be empty", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The String must not be empty", string1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(""));
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(iterator0);
      assertFalse(arrayList0.contains(""));
      
      boolean boolean0 = arrayList0.add((Object) "The String must not be empty");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains("The String must not be empty"));
      assertFalse(arrayList0.contains(""));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, "");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      String string0 = StringUtils.leftPad("'F1Au*Tvl|_w(,iJb", 32, "'F1Au*Tvl|_w(,iJb");
      assertNotNull(string0);
      assertEquals("'F1Au*Tvl|_w(,i'F1Au*Tvl|_w(,iJb", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "'F1Au*Tvl|_w(,i'F1Au*Tvl|_w(,iJb", (CharSequence) "'F1Au*Tvl|_w(,iJb");
      assertEquals(15, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "'F1Au*Tvl|_w(,iJb";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("i$`i");
      assertNotNull(string0);
      assertEquals("i$`i", string0);
      
      String string1 = StringUtils.capitalize("i$`i");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("I$`i", string1);
      
      int int0 = StringUtils.ordinalIndexOf("i$`i", "i$`i", (-3623));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringAfterLast("!7tm']w9a>M`G;", (-2567));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isBlank("!7tm']w9a>M`G;");
      assertFalse(boolean0);
      
      String string3 = StringUtils.leftPad("", (-3623), "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("i$`i");
      assertNotNull(string0);
      assertEquals("i$`i", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      String string1 = StringUtils.capitalize("i$`i");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("I$`i", string1);
      
      String string2 = StringUtils.leftPad("V", 1150, "*9^fisTx`zzJ]M%H*9^fisTx`zzJ]M%H");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      String string0 = StringUtils.leftPad("g%*]FJW:8c$`OdQ{>];O0", 13, "Minimum abbrevTation width is %Q");
      assertNotNull(string0);
      assertEquals("g%*]FJW:8c$`OdQ{>];O0", string0);
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.endsWith("", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-1822), (-1822));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("", (String) null, true);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      boolean boolean2 = StringUtils.containsOnly((CharSequence) null, "");
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = null;
      stringArray0[4] = null;
      String[] stringArray1 = new String[8];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = null;
      stringArray1[1] = "";
      stringArray1[2] = null;
      stringArray1[3] = "";
      stringArray1[4] = "";
      stringArray1[5] = "";
      stringArray1[6] = "";
      stringArray1[7] = "";
      String string1 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray0.length);
      assertEquals(8, stringArray1.length);
      assertNull(string1);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.leftPad("", 1, "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((List<?>) null, "", (-2764), 0);
      assertNull(string1);
      
      String string2 = StringUtils.removeEnd("Threshold must not be negative", "z*qR0fkO");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Threshold must not be negative", string2);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2764);
      String string3 = StringUtils.join(doubleArray0, '}', 644, 644);
      assertArrayEquals(new double[] {(-2764.0)}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) "";
      objectArray0[2] = (Object) null;
      String string4 = StringUtils.join(objectArray0, 'Z');
      assertEquals(3, objectArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("ZZ", string4);
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("", "");
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((List<?>) null, "", (-2764), 0);
      assertNull(string1);
      
      String string2 = StringUtils.removeEnd("Threshold must not be negative", "z*qR0fkO");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Threshold must not be negative", string2);
      
      String string3 = StringUtils.substringBetween((String) null, "z*qR0fkO", "Threshold must not be negative");
      assertNull(string3);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = 'z';
      charArray0[2] = '8';
      charArray0[3] = 'o';
      charArray0[4] = 'E';
      charArray0[5] = '<';
      charArray0[6] = 'x';
      charArray0[7] = '~';
      String string4 = StringUtils.join(charArray0, 'E', (-1316), (-2764));
      assertArrayEquals(new char[] {'G', 'z', '8', 'o', 'E', '<', 'x', '~'}, charArray0);
      assertEquals(8, charArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      String string0 = StringUtils.overlay("1", (String) null, (-23), 0);
      assertNotNull(string0);
      assertEquals("1", string0);
      
      String string1 = StringUtils.join((byte[]) null, '4', 2260, 1);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string2 = StringUtils.toRootLowerCase((String) null);
      assertNull(string2);
      
      String[] stringArray0 = StringUtils.split("1", '4');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.removeAll("3\"6", "3\"6");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny(charSequenceArray0[2], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.center("3\"6", 25);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("           3\"6           ", string1);
      
      String string2 = StringUtils.removeEndIgnoreCase("           3\"6           ", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("           3\"6           ", string2);
      
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isNumericSpace("3\"6");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string3 = StringUtils.join((Object[]) charSequenceArray0, 'R', 99, (-112));
      assertEquals(4, charSequenceArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "WeZfqP~Z L;xu7:**", 1);
      assertEquals((-1), int0);
      
      boolean boolean3 = StringUtils.equals(charSequenceArray0[2], (CharSequence) "");
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string4 = StringUtils.abbreviateMiddle("", "           3\"6           ", (-112));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      int int1 = StringUtils.countMatches((CharSequence) "           3\"6           ", (CharSequence) "3\"6");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      double[] doubleArray0 = new double[0];
      String string0 = StringUtils.join(doubleArray0, '#');
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripAccents("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceFirst("<=w4'7WK)r\"y$", "", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("<=w4'7WK)r\"y$", string2);
      
      String string3 = StringUtils.removeIgnoreCase("e5F[VAwUFs.", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("e5F[VAwUFs.", string3);
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "e5F[VAwUFs.", (CharSequence) "", (-1217));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      String string0 = StringUtils.chop("^");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.difference("^", "|UgFzRT[Ni?$Ged");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("|UgFzRT[Ni?$Ged", string1);
      
      String[] stringArray0 = StringUtils.split("3J/|LzDST@j68", '7');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.overlay("^", "3J/|LzDST@j68", 4139, 4139);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("^3J/|LzDST@j68", string2);
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      String string0 = StringUtils.unwrap("Pb'S!y vl:2A[Ni8", "+[e(B");
      assertNotNull(string0);
      assertEquals("Pb'S!y vl:2A[Ni8", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string1 = StringUtils.removeEndIgnoreCase("WeZfqP~Z L;xu7:**", "xc#v4!g");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("WeZfqP~Z L;xu7:**", string1);
      
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("Pb'S!y vl:2A[Ni8");
      assertEquals(16, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      String string0 = "Ru ghqx#!uK1";
      String string1 = StringUtils.overlay("Ru ghqx#!uK1", "Ru ghqx#!uK1", 0, (-999));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Ru ghqx#!uK1Ru ghqx#!uK1", string1);
      
      String string2 = "";
      String string3 = "";
      String string4 = StringUtils.replace("Strings must not be null", "", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("Strings must not be null", string4);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Ru ghqx#!uK1Ru ghqx#!uK1", (CharSequence) "Strings must not be null");
      assertFalse(boolean0);
      
      String string5 = "";
      String string6 = StringUtils.substring("", 2029, 2);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertEquals("", string6);
      
      String string7 = StringUtils.removeEndIgnoreCase("Strings must not be null", "The type must not be null");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string3));
      assertEquals("Strings must not be null", string7);
      
      LinkedHashSet<CharBuffer> linkedHashSet0 = new LinkedHashSet<CharBuffer>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(128);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(128, charBuffer0.remaining());
      assertEquals(128, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(128, charBuffer0.limit());
      assertEquals(128, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = charBuffer0.compact();
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(128, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(128, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(128, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(128, charBuffer1.limit());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(0, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.length());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(128, charBuffer1.capacity());
      assertEquals(128, charBuffer1.position());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      
      boolean boolean1 = linkedHashSet0.add(charBuffer0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(128, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(128, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(128, charBuffer0.position());
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertSame(charBuffer0, charBuffer1);
      assertTrue(linkedHashSet0.contains(charBuffer0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      // Undeclared exception!
      try { 
        charBuffer0.put("Strings must not be null", 0, 50);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      String string0 = StringUtils.substringBefore("', is neither of type Map.Entry n({F{n7^pWOf", "kz6.]_cor an Array");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry n({F{n7^pWOf", string0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string1 = StringUtils.wrap("kz6.]_cor an Array", '4');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("4kz6.]_cor an Array4", string1);
      
      String string2 = StringUtils.replace("', is neither of type Map.Entry n({F{n7^pWOf", "", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry n({F{n7^pWOf", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "", (CharSequence) "4kz6.]_cor an Array4");
      assertFalse(boolean0);
      
      String string3 = StringUtils.toRootLowerCase("4kz6.]_cor an Array4");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("4kz6.]_cor an array4", string3);
      
      String string4 = StringUtils.difference("4kz6.]_cor an Array4", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "', is neither of type Map.Entry n({F{n7^pWOf");
      assertEquals(44, int0);
      
      String string5 = StringUtils.defaultString("`'!-xnE/b\"");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("`'!-xnE/b\"", string5);
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Ty,HVnggok}20]", "Ty,HVnggok}20]");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBetween("Ty,HVnggok}20]", "Ty,HVnggok}20]");
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, (-15));
      assertEquals((-1), int0);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      
      String string2 = StringUtils.trim("Ty,HVnggok}20]");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("Ty,HVnggok}20]", string2);
      
      String string3 = StringUtils.join((Iterable<?>) null, "Locale mustnot be nll");
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean0);
      
      String string4 = StringUtils.unwrap("Strings must not be null", 'P');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Strings must not be null", string4);
      
      boolean boolean1 = StringUtils.equals((CharSequence) null, (CharSequence) "Minimum abbreviation width with offset is %d");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string5 = StringUtils.stripToEmpty((String) null);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("BI'C4", "BI'C4");
      assertEquals(0, int0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "BI'C4";
      stringArray0[1] = "BI'C4";
      String[] stringArray1 = StringUtils.stripAll(stringArray0, ", Length: 0");
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int1 = StringUtils.lastIndexOfAny("BI'C4", stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string0 = StringUtils.join((int[]) null, '~', (-1530), 0);
      assertNull(string0);
      
      String string1 = StringUtils.getDigits("BI'C4");
      assertNotNull(string1);
      assertEquals("4", string1);
      
      int int2 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, (-270));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      String string0 = StringUtils.stripEnd("3:s70m", "3:s70m");
      assertNotNull(string0);
      assertEquals("", string0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ListIterator<CharBuffer> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      String string1 = StringUtils.join((List<?>) linkedList0, "yp*(QF", 1419, (int) '#');
      assertEquals(0, linkedList0.size());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1419;
      String string2 = StringUtils.join(intArray0, 'U');
      assertArrayEquals(new int[] {1419}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("1419", string2);
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      String[] stringArray0 = StringUtils.substringsBetween("L", "L", "qa*u");
      assertNull(stringArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      byte[] byteArray0 = StringUtils.getBytes("", charset0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("qa*u", 'q');
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Threshold must not be negativez*qR0fkO", 'j');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = StringUtils.trimToEmpty("xSa4@8>Mxeq:;V~pA");
      assertNotNull(string0);
      
      String string1 = StringUtils.join(byteArray0, 'j', 0, (-1219));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.join(byteArray0, 'h');
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      String string0 = StringUtils.toRootUpperCase("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replacePattern((String) null, "rnah1", "");
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      String string0 = StringUtils.removeEnd("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compareIgnoreCase((String) null, "dgNGg'W'KyX$J=q ");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringBefore("7sl93/UV$", ",z-");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("7sl93/UV$", string1);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("7sl93/UV$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("CTIZiFRY2hkto");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("CTIZiFRY2hkto");
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.abbreviate((String) null, "CTIZiFRY2hkto", 37, 37);
      assertNull(string0);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string1 = StringUtils.trimToNull("W}rK5a-=+Vc");
      assertNotNull(string1);
      assertEquals("W}rK5a-=+Vc", string1);
      
      String string2 = "Aborting to protect against StackOverflowError - output of one loop is the input of another";
      // Undeclared exception!
      try { 
        StringUtils.getLevenshteinDistance((CharSequence) "W}rK5a-=+Vc", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", "org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", string0);
      
      String string1 = StringUtils.truncate("} WBUy#{g3 7{`vP*", 2535);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("} WBUy#{g3 7{`vP*", string1);
      
      boolean boolean0 = StringUtils.isEmpty("org.apache.commons.lang3.ObjectUtils");
      assertFalse(boolean0);
      
      String string2 = StringUtils.substringBefore((String) null, "7Q*xTUO[zK0W}^xgtg");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("%gm{(\\", (String) null);
      assertEquals(1, int0);
      
      String string0 = StringUtils.substringBefore("5", (String) null);
      assertNotNull(string0);
      assertEquals("5", string0);
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      String string0 = StringUtils.substringAfter("^O", "^O");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeAll("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.strip("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      String string0 = StringUtils.substringBefore(", Length: 0", "9yiggd+un0");
      assertNotNull(string0);
      assertEquals(", Length: 0", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(", Length: 0");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap(", Length: 0", "9yiggd+un0");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("9yiggd+un0, Length: 09yiggd+un0", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "9yiggd+un0, Length: 09yiggd+un0", 0, 0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringBefore("", "9yiggd+un0");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) ", Length: 0";
      charSequenceArray0[1] = (CharSequence) "";
      String string3 = StringUtils.strip("", ", Length: 0");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("", string3);
      
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean1 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("ldBax[{5Dv{h");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      String string0 = StringUtils.overlay("Ru ghqx#!uK1", "Ru ghqx#!uK1", 0, (-999));
      assertNotNull(string0);
      assertEquals("Ru ghqx#!uK1Ru ghqx#!uK1", string0);
      
      String string1 = StringUtils.replace("Strings must not be null", "", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Ru ghqx#!uK1Ru ghqx#!uK1", (CharSequence) "Strings must not be null");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.trimToNull("LPLD,'}dX)[t|YNWb");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("LPLD,'}dX)[t|YNWb", string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Ru ghqx#!uK1", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string3 = StringUtils.join(iterator0, ')');
      assertEquals(1, enumSet0.size());
      assertNotNull(string3);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("FORMAT", string3);
      
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category0, locale_Category1);
      assertEquals(2, enumSet1.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(enumSet1.equals((Object)enumSet0));
      
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      boolean boolean1 = enumSet1.add(locale_Category2);
      assertEquals(2, enumSet1.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category0, locale_Category2);
      assertSame(locale_Category1, locale_Category2);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertSame(locale_Category2, locale_Category1);
      assertNotSame(locale_Category2, locale_Category0);
      assertTrue(enumSet1.contains(locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category2));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(locale_Category2.equals((Object)locale_Category0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = StringUtils.length("Strings must not be null");
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(24, int2);
      
      int[] intArray0 = StringUtils.toCodePoints("Strings must not be null");
      assertEquals(24, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean2 = StringUtils.equalsIgnoreCase("LPLD,'}dX)[t|YNWb", "");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      String string4 = StringUtils.abbreviate("LPLD,'}dX)[t|YNWb", "", 10, 10);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("LPLD,'}dX)", string4);
      
      boolean boolean4 = StringUtils.isMixedCase("FORMAT");
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      boolean boolean5 = StringUtils.isNotEmpty("Strings must not be null");
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5);
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("CTIZiFRY2hkto", '~');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte) (-83);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-119);
      byteArray0[4] = (byte)127;
      byteArray0[5] = (byte) (-12);
      byteArray0[6] = (byte) (-96);
      byteArray0[7] = (byte) (-118);
      String string0 = StringUtils.trimToEmpty("CTIZiFRY2hkto");
      assertNotNull(string0);
      assertEquals("CTIZiFRY2hkto", string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string1 = StringUtils.repeat('~', (int) (byte) (-119));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("i$`i");
      assertNotNull(string0);
      assertEquals("i$`i", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "i$`i";
      String string1 = StringUtils.capitalize("WScp@f.oRQz2hvf%fd");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrap("", "%W*Ocu;#f@CIz");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.startsWithAny("WScp@f.oRQz2hvf%fd", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      String string0 = StringUtils.leftPad("K'N\"/", 0, "KwJ!M>ss8");
      assertNotNull(string0);
      assertEquals("K'N\"/", string0);
      
      String string1 = StringUtils.wrap("Locale must not be null", 'Y');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("YLocale must not be nullY", string1);
      
      String string2 = StringUtils.leftPad("YLocale must not be nullY", 10);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("YLocale must not be nullY", string2);
      
      boolean boolean0 = StringUtils.contains((CharSequence) ";$^_?N}$N z^}", (CharSequence) ";$^_?N}$N z^}");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[2];
      char char0 = ']';
      charArray0[0] = ']';
      charArray0[1] = 'x';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {']', 'x'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)52;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "P&c@lk");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // P&c@lk
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.chomp((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.toRootLowerCase("Supplied value must be a valid byte literal between -32768 and 32767: [");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("supplied value must be a valid byte literal between -32768 and 32767: [", string2);
      
      String string3 = StringUtils.rightPad((String) null, 3164, 'W');
      assertNull(string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) null, 1824);
      assertEquals((-1), int0);
      
      String string4 = StringUtils.substringAfterLast((String) null, "%cFm>2?mFI];fOEnJ'");
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.removeAll("3\"6", "3\"6");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[2] = (CharSequence) "3\"6";
      boolean boolean0 = StringUtils.startsWithAny(charSequenceArray0[2], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeIgnoreCase(">TNCU=H", "W");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(">TNCU=H", string1);
      
      boolean boolean1 = StringUtils.isNumericSpace(charSequenceArray0[2]);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.toString((byte[]) null, "AWe++?g l,/yU8");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // AWe++?g l,/yU8
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", 4, "?@;uN");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("?@;u", string1);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains(4));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vector0.add((Object) null);
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.contains(4));
      assertTrue(boolean0);
      
      String string2 = StringUtils.join((List<?>) vector0, '9', 0, (-880));
      assertFalse(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(1, vector0.size());
      assertEquals("[null]", vector0.toString());
      assertNotNull(string2);
      assertFalse(vector0.contains('9'));
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.trimToEmpty("?@;u");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("?@;u", string3);
      
      String string4 = StringUtils.getDigits("ra");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("", string4);
      
      String string5 = StringUtils.replaceIgnoreCase("", "", "qyi", (-880));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ldBax[{5Dv{h";
      stringArray0[1] = "WKU}'{b&)yv ";
      stringArray0[2] = "ra";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "WKU}'{b&)yv ";
      stringArray0[6] = "WKU}'{b&)yv ";
      stringArray0[7] = "ra";
      stringArray0[8] = "";
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(9, stringArray1.length);
      assertEquals(9, stringArray0.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.startsWithAny("ra", stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(9, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      char[] charArray0 = new char[2];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category0);
      assertEquals(1, enumSet1.size());
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      String string0 = StringUtils.replaceOnce("$G`M 85{xXfc%", "(X7!B", "$G`M 85{xXfc%");
      assertNotNull(string0);
      assertEquals("$G`M 85{xXfc%", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("$G`M 85{xXfc%");
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((byte[]) null, 'Y');
      assertNull(string1);
      
      String string2 = StringUtils.capitalize("T/O5");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("T/O5", string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "T/O5", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      String string3 = StringUtils.repeat("$G`M 85{xXfc%", 207);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.strip("\r");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "";
      objectArray0[1] = (Object) string3;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) "$G`M 85{xXfc%";
      String string5 = StringUtils.join(objectArray0, "-V[t=Vcd%#", 0, 0);
      assertEquals(4, objectArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertEquals("", string5);
      
      String string6 = StringUtils.remove("Cannot store ", 'w');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertEquals("Cannot store ", string6);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, "Cannot store ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      String string0 = StringUtils.rightPad("l %", 0, '0');
      assertNotNull(string0);
      assertEquals("l %", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "l %", (CharSequence) "l %");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = '0';
      charArray0[3] = '0';
      String string1 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'0', '0', '0', '0'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("0000", string1);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      enumSet0.clear();
      assertEquals(0, enumSet0.size());
      assertFalse(enumSet0.contains(locale_Category0));
      
      boolean boolean1 = enumSet0.add(locale_Category0);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string2 = StringUtils.join(iterator0, '0');
      assertEquals(1, enumSet0.size());
      assertNotNull(string2);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("FORMAT", string2);
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      boolean boolean2 = enumSet0.add(locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = StringUtils.length("FORMAT");
      assertEquals(6, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("FORMAT");
      assertArrayEquals(new int[] {70, 79, 82, 77, 65, 84}, intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(intArray0);
      
      boolean boolean3 = StringUtils.equalsIgnoreCase("0000", "l %");
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "0000";
      charSequenceArray0[1] = (CharSequence) "l %";
      charSequenceArray0[2] = (CharSequence) "FORMAT";
      charSequenceArray0[3] = (CharSequence) "0000";
      charSequenceArray0[4] = (CharSequence) "l %";
      charSequenceArray0[5] = (CharSequence) "l %";
      charSequenceArray0[6] = (CharSequence) "0000";
      charSequenceArray0[7] = (CharSequence) "FORMAT";
      charSequenceArray0[8] = (CharSequence) "0000";
      boolean boolean4 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      String string3 = StringUtils.repeat('D', 100);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD", string3);
      
      boolean boolean5 = StringUtils.isMixedCase(charSequenceArray0[5]);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
      
      boolean boolean6 = StringUtils.startsWithAny(charSequenceArray0[3], charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6);
      
      boolean boolean7 = StringUtils.isNotEmpty(charSequenceArray0[5]);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7);
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String string0 = "";
      Locale locale0 = Locale.UK;
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet1.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      
      String[] stringArray0 = StringUtils.splitByCharacterType("*Q*y");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.removeStart("[", "L6<d]3EH>k=E39");
      assertNotNull(string0);
      assertEquals("[", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "[", (CharSequence) "[", (-1408));
      assertEquals(0, int0);
      
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      String string0 = StringUtils.strip("Aborting to protect against StackOverflowError - output of one loop is the input of another", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string0);
      assertEquals("", string0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      String string1 = StringUtils.replaceChars("", "", "Aborting to protect against StackOverflowError - output of one loop is the input of another");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.right("", 55);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = "};EI$@6I-,@ihC*Pr|L";
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) "", 32, 32);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      String string0 = StringUtils.replaceChars("!7tm']w9a>M`G;", "", "LL");
      assertNotNull(string0);
      assertEquals("!7tm']w9a>M`G;", string0);
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      String string0 = StringUtils.replaceChars("[", "[", "[");
      assertNotNull(string0);
      assertEquals("[", string0);
      
      String string1 = StringUtils.toRootLowerCase("*'D{9~>BB!TsL");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("*'d{9~>bb!tsl", string1);
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", 'i');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceAll("", "", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.trimToEmpty("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 0, 108);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string4 = StringUtils.leftPad("", (-554), "4g$lc/_aKq2K");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertEquals("", string4);
      
      int int1 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string5 = StringUtils.removeIgnoreCase("Minimum abbreviation width is %d", "");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string5);
      
      String string6 = StringUtils.joinWith(";({RA@fq", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string2));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      
      String string7 = StringUtils.replaceChars("Minimum abbreviation width is %d", "Cannot store Minimum abbreviation width with offset is %d", "4g$lc/_aKq2K");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertEquals("$_g2Kg/c$_/_a_", string7);
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("V", "V", 132);
      assertNotNull(string0);
      assertEquals("V", string0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("V");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[1] = "V";
      String[] stringArray2 = StringUtils.stripAll(stringArray1, "V");
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertNotSame(stringArray2, stringArray1);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(4, stringArray1.length);
      assertEquals(4, stringArray2.length);
      assertNotNull(stringArray2);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      boolean boolean0 = StringUtils.isAsciiPrintable(stringArray1[3]);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(boolean0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = (float) 132;
      floatArray0[1] = (float) 132;
      String string1 = StringUtils.LF;
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\n", string1);
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      String string0 = StringUtils.unwrap("Pb'S!y vl:2A[Ni8", "Q[B");
      assertNotNull(string0);
      assertEquals("Pb'S!y vl:2A[Ni8", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Pb'S!y vl:2A[Ni8";
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      boolean boolean0 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean0);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("#YQ2sCZ*Mt{\"9-P1", supplier0);
      assertNotNull(string0);
      assertEquals("#YQ2sCZ*Mt{\"9-P1", string0);
      
      String string1 = StringUtils.replaceChars(" in an array of ", "", " in an array of ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" in an array of ", string1);
      
      String string2 = StringUtils.abbreviateMiddle("Threshold must not be negative", "", 32);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Threshold must not be negative", string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase(" in an array of ", "");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("*Q*y");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.substringBefore("", (-1399));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      String string4 = StringUtils.stripToEmpty("Threshold must not be negative");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("Threshold must not be negative", string4);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Noajt\"oXWe6@hF()>Gr");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d", "Minimum abbreviation width with offset is %d");
      assertNotNull(string0);
      assertEquals("Minimum abbreviation width with offset is %d", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Minimum abbreviation width with offset is %d";
      stringArray0[1] = "Minimum abbreviation width with offset is %d";
      stringArray0[2] = "Minimum abbreviation width with offset is %d";
      stringArray0[3] = "Minimum abbreviation width with offset is %d";
      String string1 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width with offset is %d", string1);
      
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Minimum abbreviation width with offset is %d", "F1qJRtT[", 76, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 9
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", "org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", string0);
      
      String string1 = StringUtils.remove("org.apache.commons.lang3.ObjectUtils", '?');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ObjectUtils", string1);
      
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "org.apache.commons.lang3.ObjectUtils", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB";
      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.ObjectUtils";
      charSequenceArray0[2] = (CharSequence) "org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB";
      charSequenceArray0[3] = (CharSequence) "org.apache.commons.lang3.ObjectUtils";
      charSequenceArray0[4] = (CharSequence) "org.apache.commons.lang3.ObjectUtils";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertFalse(charSequence0.equals((Object)string1));
      assertEquals("org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", charSequence0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", charSequenceArray0[1]);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "I3}?&|[]FBQ");
      assertNotNull(string0);
      assertEquals("I3}?&|[]FBQ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "I3}?&|[]FBQ";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "I3}?&|[]FBQ";
      charSequenceArray0[3] = (CharSequence) "I3}?&|[]FBQ";
      charSequenceArray0[5] = (CharSequence) "I3}?&|[]FBQ";
      charSequenceArray0[6] = (CharSequence) "I3}?&|[]FBQ";
      charSequenceArray0[7] = (CharSequence) "I3}?&|[]FBQ";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.trimToNull("...");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("...", string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "I3}?&|[]FBQ", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string2 = StringUtils.join((short[]) null, 'a');
      assertNull(string2);
      
      String string3 = StringUtils.substring("negative", 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("negative", string3);
      
      boolean boolean0 = StringUtils.containsWhitespace("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("i$`i");
      assertNotNull(string0);
      assertEquals("i$`i", string0);
      
      String string1 = StringUtils.strip("i$`i", "i$`i");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.ordinalIndexOf("V", "V", 0);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringBetween("g%*]FJ", " |s ", "i$`i");
      assertNull(string2);
      
      String string3 = StringUtils.rotate((String) null, (-1));
      assertNull(string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) null;
      int int1 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.substringAfterLast(" |s ", (-2925));
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.replacePattern("", "i$`i", "i$`i");
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertEquals("", string5);
      
      boolean boolean0 = StringUtils.containsWhitespace(charSequenceArray0[0]);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" |s ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.center((String) null, 432, "{}");
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, 432);
      assertNull(stringArray0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      byte[] byteArray0 = StringUtils.getBytes("1r7a'i_kG0p", charset0);
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals(11, byteArray0.length);
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      String string0 = StringUtils.leftPad("kz6.]_cor an Array", 1554, "', is neither of type Map.Entry nor an Array");
      assertNotNull(string0);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains("kz6.]_cor an Array"));
      
      boolean boolean0 = treeSet0.add("gi=nyC6oj)52");
      assertFalse(treeSet0.contains("kz6.]_cor an Array"));
      assertTrue(treeSet0.contains("gi=nyC6oj)52"));
      assertTrue(boolean0);
      
      String string1 = StringUtils.mid("', is neither of type Map.Entry nor an Array", 1554, (-4038));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeAll((String) null, "I4m;:");
      assertNull(string2);
      
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, (CharSequence[]) null);
      assertEquals((-1), int0);
      
      boolean boolean1 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string3 = StringUtils.removeEndIgnoreCase("', is neither of type Map.Entry nor an Array", "");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string3);
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      String string0 = StringUtils.overlay("Ru ghqx#!uK1", "Ru ghqx#!uK1", 0, (-999));
      assertNotNull(string0);
      assertEquals("Ru ghqx#!uK1Ru ghqx#!uK1", string0);
      
      String string1 = StringUtils.replace("Strings must not be null", "", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be null", string1);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "Ru ghqx#!uK1Ru ghqx#!uK1", (CharSequence) "Strings must not be null");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.trimToNull("LPLD,'}dX)[t|YNWb");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("LPLD,'}dX)[t|YNWb", string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "Ru ghqx#!uK1", charSequenceArray0);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string3 = StringUtils.replaceOnce("", "Ru ghqx#!uK1", "LPLD,'}dX)[t|YNWb");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
      
      String string4 = StringUtils.substring("Sz", 13);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "LPLD,'}dX)[t|YNWb";
      stringArray0[1] = "Strings must not be null";
      stringArray0[2] = "LPLD,'}dX)[t|YNWb";
      stringArray0[3] = "LPLD,'}dX)[t|YNWb";
      stringArray0[4] = "LPLD,'}dX)[t|YNWb";
      stringArray0[5] = "";
      stringArray0[6] = "Strings must not be null";
      String string5 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(7, stringArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("LPLD,'}dX)[t|YNWb", string5);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Ru ghqx#!uK1Ru ghqx#!uK1", "LPLD,'}dX)[t|YNWb", (-1217), 13);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 18
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.join((List<?>) null, "", (-2764), 0);
      assertNull(string1);
      
      String string2 = "Threshold must not be negative";
      String string3 = StringUtils.removeEnd("Threshold must not be negative", "z*qR0fkO");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Threshold must not be negative", string3);
      
      String string4 = null;
      String string5 = StringUtils.substringBetween((String) null, "z*qR0fkO", "Threshold must not be negative");
      assertNull(string5);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'G';
      charArray0[1] = 'z';
      charArray0[2] = '8';
      charArray0[3] = 'o';
      charArray0[4] = 'E';
      charArray0[5] = '<';
      charArray0[6] = 'x';
      charArray0[7] = '~';
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = null;
      String string6 = "\\u";
      stringArray0[2] = string6;
      stringArray0[3] = "";
      String string7 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertEquals("\\u", string7);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Locale must not be null", string6, 0, (-2764));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 3
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      String string0 = StringUtils.center((String) null, 0, "");
      assertNull(string0);
      
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) null;
      charSequenceArray0[7] = (CharSequence) null;
      int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.trimToNull((String) null);
      assertNull(string1);
      
      int int1 = StringUtils.indexOfAny((CharSequence) null, charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string2 = StringUtils.join((short[]) null, '0');
      assertNull(string2);
      
      String string3 = StringUtils.substring("Strings must not be null", (-1));
      assertNotNull(string3);
      assertEquals("l", string3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Strings must not be null";
      stringArray0[1] = null;
      stringArray0[2] = "l";
      String string4 = StringUtils.firstNonBlank(stringArray0);
      assertEquals(3, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertEquals("Strings must not be null", string4);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("% 7wSn#kB{", "The Array must not be null", (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 27
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      String string0 = StringUtils.substringBefore(", Length: 0", "9yiggd+un0");
      assertNotNull(string0);
      assertEquals(", Length: 0", string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(", Length: 0");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[9];
      longArray0[0] = (-2061L);
      longArray0[1] = (-2061L);
      longArray0[2] = (long) '|';
      longArray0[3] = (long) '|';
      longArray0[4] = (long) '|';
      longArray0[5] = (long) '|';
      longArray0[6] = (long) '|';
      longArray0[7] = (-3262L);
      longArray0[8] = (-2061L);
      String string1 = StringUtils.join(longArray0, '|');
      assertArrayEquals(new long[] {(-2061L), (-2061L), 124L, 124L, 124L, 124L, 124L, (-3262L), (-2061L)}, longArray0);
      assertEquals(9, longArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-2061|-2061|124|124|124|124|124|-3262|-2061", string1);
      
      String string2 = StringUtils.abbreviate(", Length: 0", "9yiggd+un0", 109, 53);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(", Length: 0", string2);
      
      boolean boolean1 = StringUtils.startsWithIgnoreCase(", Length: 0", "-2061|-2061|124|124|124|124|124|-3262|-2061");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.stripToNull("3\"6");
      assertNotNull(string0);
      assertEquals("3\"6", string0);
      
      charSequenceArray0[2] = (CharSequence) "3\"6";
      char[] charArray0 = new char[3];
      charArray0[0] = '?';
      charArray0[1] = 'm';
      charArray0[2] = '?';
      String string1 = StringUtils.join(charArray0, '|');
      assertArrayEquals(new char[] {'?', 'm', '?'}, charArray0);
      assertEquals(3, charArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("?|m|?", string1);
      
      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains('m'));
      
      Iterator<Object> iterator0 = linkedHashSet0.iterator();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.contains('m'));
      
      String string2 = StringUtils.join(iterator0, 'w');
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(string2);
      assertFalse(linkedHashSet0.contains('m'));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      String string0 = StringUtils.join((char[]) null, '\"');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbrevTation width is %Q", '#');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) '#';
      intArray0[6] = (int) '#';
      String string0 = StringUtils.prependIfMissingIgnoreCase("Minimum abbrevTation width is %Q", "Minimum abbrevTation width is %Q", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Minimum abbrevTation width is %Q", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Minimum abbrevTation width is %Q", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeAll("maxWith cannot be negative", "Minimum abbrevTation width is %Q");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'j';
      charArray0[1] = 'j';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Minimum abbrevTation width is %Q", charArray0);
      assertArrayEquals(new char[] {'j', 'j'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.removeAll("maxWith cannot be negative", "Minimum abbrevTation width is %Q");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string2);
      
      String string3 = StringUtils.center((String) null, 1445, 'G');
      assertNull(string3);
      
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "LPLD,'}dX)[t|YNWb";
      objectArray0[1] = (Object) 'j';
      objectArray0[2] = (Object) 'j';
      objectArray0[3] = (Object) 35;
      objectArray0[4] = (Object) null;
      objectArray0[5] = (Object) 35;
      String string4 = StringUtils.joinWith("LPLD,'}dX)[t|YNWb", objectArray0);
      assertEquals(6, objectArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("LPLD,'}dX)[t|YNWbLPLD,'}dX)[t|YNWbjLPLD,'}dX)[t|YNWbjLPLD,'}dX)[t|YNWb35LPLD,'}dX)[t|YNWbLPLD,'}dX)[t|YNWb35", string4);
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '\"';
      charArray0[1] = 'e';
      charArray0[2] = 'E';
      charArray0[3] = 'k';
      charArray0[5] = '%';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'\"', 'e', 'E', 'k', '\u0000', '%'}, charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.capacity());
      assertEquals("\"eEk\u0000%", charBuffer0.toString());
      assertEquals(6, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(6, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(6, charArray0.length);
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0);
      assertArrayEquals(new char[] {'\"', 'e', 'E', 'k', '\u0000', '%'}, charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.capacity());
      assertEquals("\"eEk\u0000%", charBuffer0.toString());
      assertEquals(6, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(6, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer1.hasArray());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals(6, charBuffer1.capacity());
      assertEquals(6, charBuffer1.remaining());
      assertEquals(6, charBuffer1.length());
      assertEquals(6, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals("\"eEk\u0000%", charBuffer1.toString());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(0, charBuffer1.position());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertEquals(6, charArray0.length);
      assertNotNull(charBuffer1);
      
      CharBuffer charBuffer2 = charBuffer0.slice();
      assertArrayEquals(new char[] {'\"', 'e', 'E', 'k', '\u0000', '%'}, charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.capacity());
      assertEquals("\"eEk\u0000%", charBuffer0.toString());
      assertEquals(6, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(6, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer2.isDirect());
      assertEquals(6, charBuffer2.capacity());
      assertEquals(6, charBuffer2.remaining());
      assertEquals(0, charBuffer2.arrayOffset());
      assertTrue(charBuffer2.hasRemaining());
      assertEquals(6, charBuffer2.length());
      assertTrue(charBuffer2.hasArray());
      assertEquals(6, charBuffer2.limit());
      assertEquals("\"eEk\u0000%", charBuffer2.toString());
      assertFalse(charBuffer2.isReadOnly());
      assertEquals(0, charBuffer2.position());
      assertNotSame(charBuffer0, charBuffer2);
      assertSame(charBuffer0, charBuffer1);
      assertNotSame(charBuffer2, charBuffer1);
      assertNotSame(charBuffer2, charBuffer0);
      assertEquals(6, charArray0.length);
      assertNotNull(charBuffer2);
      assertTrue(charBuffer2.equals((Object)charBuffer1));
      assertTrue(charBuffer2.equals((Object)charBuffer0));
      
      int int0 = StringUtils.lastOrdinalIndexOf(charBuffer0, charBuffer0, 113);
      assertArrayEquals(new char[] {'\"', 'e', 'E', 'k', '\u0000', '%'}, charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.capacity());
      assertEquals("\"eEk\u0000%", charBuffer0.toString());
      assertEquals(6, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(6, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertNotSame(charBuffer0, charBuffer2);
      assertSame(charBuffer0, charBuffer1);
      assertEquals(6, charArray0.length);
      assertTrue(charBuffer0.equals((Object)charBuffer2));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      charSequenceArray0[1] = (CharSequence) charBuffer2;
      boolean boolean0 = StringUtils.equalsAny(charBuffer0, charSequenceArray0);
      assertArrayEquals(new char[] {'\"', 'e', 'E', 'k', '\u0000', '%'}, charArray0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.limit());
      assertEquals(6, charBuffer0.capacity());
      assertEquals("\"eEk\u0000%", charBuffer0.toString());
      assertEquals(6, charBuffer0.length());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(6, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertNotSame(charBuffer0, charBuffer2);
      assertSame(charBuffer0, charBuffer1);
      assertEquals(6, charArray0.length);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(charBuffer0.equals((Object)charBuffer2));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      charArray0[1] = '?';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, 'c', (-202), 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -202
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      String string0 = "`TJwJBP{Gnegative";
      int int0 = 49;
      String string1 = StringUtils.rightPad("`TJwJBP{Gnegative", 49, "`TJwJBP{Gnegative");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("`TJwJBP{Gnegative`TJwJBP{Gnegative`TJwJBP{Gnegati", string1);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "`TJwJBP{Gnegative`TJwJBP{Gnegative`TJwJBP{Gnegati", (CharSequence) "`TJwJBP{Gnegative");
      assertFalse(int1 == int0);
      assertEquals(17, int1);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      int int2 = (-459);
      // Undeclared exception!
      try { 
        ByteBuffer.allocate((-459));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = '?';
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.getIfBlank("N]N(xep2", supplier0);
      assertNotNull(string0);
      assertEquals("N]N(xep2", string0);
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(21);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(21, charBuffer0.remaining());
      assertEquals(21, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = stack0.add(charBuffer0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000]", stack0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(21, charBuffer0.remaining());
      assertEquals(21, charBuffer0.limit());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.length());
      assertTrue(stack0.contains(charBuffer0));
      assertTrue(boolean0);
      
      CharBuffer charBuffer1 = charBuffer0.put(">|~m");
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(21, charBuffer0.limit());
      assertEquals(17, charBuffer0.remaining());
      assertEquals(17, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(4, charBuffer0.position());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer1.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertEquals(17, charBuffer1.remaining());
      assertTrue(charBuffer1.hasArray());
      assertEquals(17, charBuffer1.length());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(21, charBuffer1.limit());
      assertEquals(4, charBuffer1.position());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(21, charBuffer1.capacity());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      assertNotNull(charBuffer1);
      
      boolean boolean1 = stack0.add(charBuffer0);
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertEquals(2, stack0.size());
      assertFalse(stack0.isEmpty());
      assertEquals("[\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000, \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000]", stack0.toString());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(21, charBuffer0.limit());
      assertEquals(17, charBuffer0.remaining());
      assertEquals(17, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(4, charBuffer0.position());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertSame(charBuffer0, charBuffer1);
      assertTrue(stack0.contains(charBuffer1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = stack0.add(charBuffer0);
      assertEquals(3, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000, \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000, \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000]", stack0.toString());
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(21, charBuffer0.limit());
      assertEquals(17, charBuffer0.remaining());
      assertEquals(17, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(4, charBuffer0.position());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertSame(charBuffer0, charBuffer1);
      assertTrue(stack0.contains(charBuffer1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      String string0 = StringUtils.join((List<?>) stack0, ')', 8192, 8192);
      assertEquals(3, stack0.size());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.empty());
      assertFalse(stack0.isEmpty());
      assertEquals("[\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000, \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000, \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000]", stack0.toString());
      assertNotNull(string0);
      assertTrue(stack0.contains(charBuffer1));
      assertEquals("", string0);
      
      boolean boolean3 = StringUtils.isNumericSpace("");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String[] stringArray0 = StringUtils.split(";7Y$;SR]s0yo!D/", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean4 = StringUtils.equals((CharSequence) ";7Y$;SR]s0yo!D/", (CharSequence) charBuffer0);
      assertTrue(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(21, charBuffer0.limit());
      assertEquals(17, charBuffer0.remaining());
      assertEquals(17, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(4, charBuffer0.position());
      assertEquals(21, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertSame(charBuffer0, charBuffer1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      String string0 = StringUtils.removeAll("3\"6", "3\"6");
      assertNotNull(string0);
      assertEquals("", string0);
      
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.startsWithAny(charSequenceArray0[2], charSequenceArray0);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string1 = StringUtils.left("", 1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.center("", 1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens(" ", "3\"6");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Invalid locale format: ");
      assertEquals(4, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Invalid locale format: ");
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(23, charBuffer0.length());
      assertEquals(23, charBuffer0.limit());
      assertEquals(23, charBuffer0.remaining());
      assertEquals("Invalid locale format: ", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(23, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = stack0.add((CharBuffer) null);
      assertFalse(stack0.empty());
      assertEquals("[null]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertFalse(stack0.isEmpty());
      assertEquals(1, stack0.size());
      assertFalse(stack0.contains(charBuffer0));
      assertTrue(boolean0);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.leftPad(",X5x^eV,'", 8192);
      assertNotNull(string0);
      
      boolean boolean1 = StringUtils.equalsIgnoreCase(string0, string0);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) string0);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isNumericSpace("Invalid locale format: ");
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String[] stringArray1 = StringUtils.split(",X5x^eV,'", "Invalid locale format: ");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean3 = StringUtils.equals((CharSequence) null, (CharSequence) string0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(21);
      assertFalse(charBuffer0.isDirect());
      assertEquals(21, charBuffer0.remaining());
      assertEquals(21, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(21, charBuffer0.length());
      assertEquals(21, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) ";7Y$;SR]s0yo!D/", (CharSequence) charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(21, charBuffer0.remaining());
      assertEquals(21, charBuffer0.capacity());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(21, charBuffer0.length());
      assertEquals(21, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      String string0 = StringUtils.replace("3[Y>:<}+z=\"8", "3[Y>:<}+z=\"8", "3[Y>:<}+z=\"8", 9);
      assertNotNull(string0);
      assertEquals("3[Y>:<}+z=\"8", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '7';
      charArray0[1] = '!';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "3[Y>:<}+z=\"8", charArray0);
      assertArrayEquals(new char[] {'7', '!'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string0));
      
      String string1 = StringUtils.join((List<?>) arrayList0, "3[Y>:<}+z=\"8", 9, 5);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(string1);
      assertFalse(arrayList0.contains(string0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.isNumeric("3[Y>:<}+z=\"8");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("i$`i");
      assertNotNull(string0);
      assertEquals("i$`i", string0);
      
      String string1 = StringUtils.capitalize("i$`i");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("I$`i", string1);
      
      int int0 = StringUtils.ordinalIndexOf("V", "V", (-3623));
      assertEquals((-1), int0);
      
      String string2 = StringUtils.rightPad("g%*]FJ", (-2925), " vs ");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("g%*]FJ", string2);
      
      String string3 = StringUtils.rotate(".$p]93mvC\"", (-1));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("$p]93mvC\".", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "g%*]FJ";
      int int1 = StringUtils.indexOfAny((CharSequence) "g%*]FJ", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = StringUtils.ordinalIndexOf("I$`i", "i$`i", 0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.join((byte[]) null, 'O', (-3623), (-582));
      assertNull(string4);
      
      boolean boolean0 = StringUtils.isAlphaSpace("g%*]FJ");
      assertFalse(boolean0);
      
      int int3 = StringUtils.indexOfDifference((CharSequence) ".$p]93mvC\"", (CharSequence) null);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      String string5 = StringUtils.wrap("g%*]FJ", '~');
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertEquals("~g%*]FJ~", string5);
      
      String string6 = StringUtils.wrapIfMissing(".$p]93mvC\"", '<');
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertEquals("<.$p]93mvC\"<", string6);
      
      int int4 = StringUtils.indexOfAnyBut((CharSequence) "I$`i", (CharSequence) "i$`i");
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(0, int4);
      
      String string7 = StringUtils.substringAfter(".$p]93mvC\"", 0);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      int int0 = StringUtils.indexOfDifference((CharSequence) "l %", (CharSequence) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) null;
      String string0 = StringUtils.appendIfMissingIgnoreCase((String) null, (CharSequence) null, charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertNull(string0);
      
      String string1 = StringUtils.lowerCase("5%G>");
      assertNotNull(string1);
      assertEquals("5%g>", string1);
      
      String string2 = StringUtils.substringBeforeLast((String) null, "5%G>");
      assertNull(string2);
      
      String string3 = StringUtils.wrap((String) null, "$mrSA4#AVB^J4cTl");
      assertNull(string3);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category1);
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      
      Stack<Locale.Category> stack0 = new Stack<Locale.Category>();
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      assertFalse(stack0.contains(locale_Category0));
      
      boolean boolean0 = enumSet0.addAll(stack0);
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(stack0.contains(locale_Category0));
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(boolean0);
      
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      boolean boolean1 = enumSet0.add(locale_Category2);
      assertEquals(2, enumSet0.size());
      assertSame(locale_Category2, locale_Category0);
      assertNotSame(locale_Category2, locale_Category1);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category1, locale_Category2);
      assertTrue(enumSet0.contains(locale_Category2));
      assertFalse(locale_Category2.equals((Object)locale_Category1));
      assertTrue(boolean1 == boolean0);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(boolean1);
      
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      boolean boolean2 = enumSet0.add(locale_Category3);
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_Category3, locale_Category1);
      assertSame(locale_Category3, locale_Category0);
      assertSame(locale_Category3, locale_Category2);
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category3);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category1, locale_Category3);
      assertNotSame(locale_Category1, locale_Category2);
      assertTrue(enumSet0.contains(locale_Category2));
      assertFalse(locale_Category3.equals((Object)locale_Category1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category1.equals((Object)locale_Category3));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertFalse(boolean2);
      
      String string4 = StringUtils.join(iterator0, (String) null);
      assertEquals(2, enumSet0.size());
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category3);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category1, locale_Category3);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotNull(string4);
      assertTrue(enumSet0.contains(locale_Category2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category1.equals((Object)locale_Category3));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertEquals("DISPLAYFORMAT", string4);
      
      String string5 = StringUtils.join(iterator0, (String) null);
      assertEquals(2, enumSet0.size());
      assertSame(locale_Category0, locale_Category2);
      assertNotSame(locale_Category0, locale_Category1);
      assertSame(locale_Category0, locale_Category3);
      assertNotSame(locale_Category1, locale_Category0);
      assertNotSame(locale_Category1, locale_Category3);
      assertNotSame(locale_Category1, locale_Category2);
      assertNotNull(string5);
      assertTrue(enumSet0.contains(locale_Category2));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertFalse(locale_Category1.equals((Object)locale_Category3));
      assertFalse(locale_Category1.equals((Object)locale_Category2));
      assertEquals("", string5);
      
      boolean boolean3 = StringUtils.isAlpha(charSequenceArray0[0]);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      String string6 = StringUtils.deleteWhitespace("(L");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertEquals("(L", string6);
      
      String string7 = StringUtils.chomp("\"q#(TFx.; pgD.iU");
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertEquals("\"q#(TFx.; pgD.iU", string7);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase(charSequenceArray0[4], (CharSequence) null, (-1));
      assertEquals(7, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      boolean boolean4 = StringUtils.equals(charSequenceArray0[0], charSequenceArray0[6]);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4);
      
      String string8 = StringUtils.stripToNull("ets");
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertEquals("ets", string8);
      
      String string9 = StringUtils.wrap("ets", 'V');
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string1));
      assertEquals("VetsV", string9);
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("', is neither of type Map.Entry nor an Array", (String) null, "m");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      String string1 = StringUtils.replacePattern("', is neither of type Map.Entry nor an Array", "", "m");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("m'm,m mimsm mnmemimtmhmemrm momfm mtmympmem mMmampm.mEmnmtmrmym mnmomrm mamnm mAmrmrmamym", string1);
      
      String string2 = StringUtils.center("', is neither of type Map.Entry nor an Array", (-1047), '\"');
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
      
      Class<Locale.Category> class0 = Locale.Category.class;
      EnumSet<Locale.Category> enumSet0 = EnumSet.allOf(class0);
      assertEquals(2, enumSet0.size());
      assertNotNull(enumSet0);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(2, enumSet0.size());
      assertNotNull(iterator0);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean0 = enumSet0.add(locale_Category0);
      assertEquals(2, enumSet0.size());
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(boolean0);
      
      Spliterator<Locale.Category> spliterator0 = enumSet0.spliterator();
      assertEquals(2, enumSet0.size());
      assertNotNull(spliterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string3 = StringUtils.join(iterator0, "");
      assertEquals(2, enumSet0.size());
      assertNotNull(string3);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("DISPLAYFORMAT", string3);
      
      String string4 = StringUtils.trim("Array and element cannot both be null");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("Array and element cannot both be null", string4);
      
      boolean boolean1 = StringUtils.equals((CharSequence) null, (CharSequence) "m");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) null, (CharSequence) "m'm,m mimsm mnmemimtmhmemrm momfm mtmympmem mMmampm.mEmnmtmrmym mnmomrm mamnm mAmrmrmamym");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\"';
      charArray0[1] = '\"';
      charArray0[2] = '\"';
      charArray0[3] = '\"';
      charArray0[4] = '\"';
      boolean boolean2 = StringUtils.containsAny((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0);
      assertArrayEquals(new char[] {'\"', '\"', '\"', '\"', '\"'}, charArray0);
      assertEquals(5, charArray0.length);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string5 = StringUtils.join(charArray0, '\"');
      assertArrayEquals(new char[] {'\"', '\"', '\"', '\"', '\"'}, charArray0);
      assertEquals(5, charArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("\"\"\"\"\"\"\"\"\"", string5);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-93);
      byteArray0[5] = (byte)0;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)87, (byte)0, (byte)0, (byte) (-93), (byte)0}, byteArray0);
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals(6, byteBuffer0.remaining());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=6 cap=6]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(6, byteBuffer0.capacity());
      assertEquals(6, byteBuffer0.limit());
      assertEquals(6, byteArray0.length);
      assertNotNull(byteBuffer0);
      
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      assertArrayEquals(new byte[] {(byte)2, (byte)87, (byte)0, (byte)0, (byte) (-93), (byte)0}, byteArray0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("java.nio.HeapByteBuffer[pos=6 lim=6 cap=6]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(6, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(6, byteBuffer0.capacity());
      assertEquals(6, byteBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(6, charBuffer0.limit());
      assertEquals("\u0002W\u0000\u0000\uFFFD\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(6, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.remaining());
      assertEquals(6, byteArray0.length);
      assertNotNull(charBuffer0);
      
      Supplier<CharBuffer> supplier0 = (Supplier<CharBuffer>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      CharBuffer charBuffer1 = StringUtils.getIfBlank(charBuffer0, supplier0);
      assertArrayEquals(new byte[] {(byte)2, (byte)87, (byte)0, (byte)0, (byte) (-93), (byte)0}, byteArray0);
      assertEquals("\u0002W\u0000\u0000\uFFFD\u0000", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertEquals(6, charBuffer1.length());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals(6, charBuffer1.remaining());
      assertEquals(6, charBuffer1.capacity());
      assertTrue(charBuffer1.hasArray());
      assertFalse(charBuffer1.isDirect());
      assertEquals(6, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertTrue(charBuffer1.hasRemaining());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertEquals("java.nio.HeapByteBuffer[pos=6 lim=6 cap=6]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.hasRemaining());
      assertEquals(0, byteBuffer0.remaining());
      assertEquals(6, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertFalse(byteBuffer0.isDirect());
      assertEquals(6, byteBuffer0.capacity());
      assertEquals(6, byteBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(6, charBuffer0.limit());
      assertEquals("\u0002W\u0000\u0000\uFFFD\u0000", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(6, charBuffer0.length());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(6, charBuffer0.remaining());
      assertSame(charBuffer1, charBuffer0);
      assertSame(charBuffer0, charBuffer1);
      assertEquals(6, byteArray0.length);
      assertNotNull(charBuffer1);
  }

  @Test(timeout = 4000)
  public void test680()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      boolean boolean0 = enumSet0.add(locale_Category1);
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(locale_Category1, locale_Category0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(boolean0);
      
      String string0 = StringUtils.trim("[b/!%,8TIPNyW");
      assertNotNull(string0);
      assertEquals("[b/!%,8TIPNyW", string0);
      
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(locale_Category1));
      
      boolean boolean1 = arrayDeque0.add(locale_Category0);
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertNotSame(locale_Category0, locale_Category1);
      assertTrue(arrayDeque0.contains(locale_Category0));
      assertFalse(arrayDeque0.contains(locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      ArrayDeque<Locale.Category> arrayDeque1 = arrayDeque0.clone();
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(arrayDeque1.isEmpty());
      assertEquals(1, arrayDeque1.size());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(arrayDeque1);
      assertTrue(arrayDeque0.contains(locale_Category0));
      assertFalse(arrayDeque0.contains(locale_Category1));
      assertTrue(arrayDeque1.contains(locale_Category0));
      assertFalse(arrayDeque1.contains(locale_Category1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      String string1 = StringUtils.join((Iterable<?>) enumSet0, "org.apache.commons.lang3.exception.CloneFailedException");
      assertEquals(2, enumSet0.size());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotNull(string1);
      assertTrue(enumSet0.contains(locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("DISPLAYorg.apache.commons.lang3.exception.CloneFailedExceptionFORMAT", string1);
      
      boolean boolean2 = arrayDeque0.add(locale_Category0);
      assertEquals(2, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertNotSame(locale_Category0, locale_Category1);
      assertNotSame(arrayDeque0, arrayDeque1);
      assertTrue(arrayDeque0.contains(locale_Category0));
      assertFalse(arrayDeque0.contains(locale_Category1));
      assertFalse(locale_Category0.equals((Object)locale_Category1));
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      boolean boolean3 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      String string2 = StringUtils.unwrap("Po>4V_\"nDVl;j6LF", 'P');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Po>4V_\"nDVl;j6LF", string2);
      
      boolean boolean4 = StringUtils.equals((CharSequence) "[b/!%,8TIPNyW", (CharSequence) "org.apache.commons.lang3.exception.CloneFailedException");
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "Po>4V_\"nDVl;j6LF", (String) null);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.toRootLowerCase("org.apache.commons.lang3.exception.CloneFailedException");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.exception.clonefailedexception", string3);
      
      int int1 = StringUtils.indexOfDifference((CharSequence) "org.apache.commons.lang3.exception.CloneFailedException", (CharSequence) null);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test681()  throws Throwable  {
      String string0 = StringUtils.rightPad("O4Wyv<v", 0, "");
      assertNotNull(string0);
      assertEquals("O4Wyv<v", string0);
      
      String string1 = StringUtils.rotate("O4Wyv<v", 0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("O4Wyv<v", string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '/';
      String string2 = StringUtils.join((byte[]) null, 'S', (int) (byte)0, (int) (byte)0);
      assertNull(string2);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.toRootLowerCase("");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test682()  throws Throwable  {
      String string0 = StringUtils.chop("[");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.toRootLowerCase("*'D{9~>BB!TsL");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("*'d{9~>bb!tsl", string1);
      
      String string2 = StringUtils.stripEnd("Z=wngoRYKA", "~7A`fyK+y");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Z=wngoRY", string2);
  }

  @Test(timeout = 4000)
  public void test683()  throws Throwable  {
      String string0 = StringUtils.replaceOnceIgnoreCase("", "Minimum abbreviation width is %d", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "Minimum abbreviation width is %d";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test684()  throws Throwable  {
      int int0 = StringUtils.ordinalIndexOf("V", "V", (-3623));
      assertEquals((-1), int0);
      
      String string0 = StringUtils.lowerCase("u]~");
      assertNotNull(string0);
      assertEquals("u]~", string0);
  }

  @Test(timeout = 4000)
  public void test685()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4;
      String string0 = StringUtils.trimToEmpty("?@;uN");
      assertNotNull(string0);
      assertEquals("?@;uN", string0);
  }

  @Test(timeout = 4000)
  public void test686()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.apache.commons.lang3.ArrayUtils", '.');
      assertEquals(5, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.trimToNull("org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ArrayUtils", string0);
      
      String string1 = StringUtils.replaceEach("org.apache.commons.lang3.ArrayUtils", stringArray0, stringArray0);
      assertEquals(5, stringArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ArrayUtils", string1);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("org.apache.commons.lang3.ArrayUtils", stringArray0);
      assertEquals(5, stringArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.stripToNull((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.toRootLowerCase("org.apache.commons.lang3.ArrayUtils");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.arrayutils", string3);
  }

  @Test(timeout = 4000)
  public void test687()  throws Throwable  {
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.replaceOnceIgnoreCase("JR", "cX%x", (String) null);
      assertNotNull(string0);
      assertEquals("JR", string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "JR", (CharSequence) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.trimToEmpty((String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOf((CharSequence) "cX%x", (-11), 2298);
      assertEquals((-1), int0);
      
      String string2 = StringUtils.center("Strings must not be null", 1795, "JR");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAllLowerCase((CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray0 = StringUtils.split("cX%x");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test688()  throws Throwable  {
      String string0 = StringUtils.strip("Aborting to protect against StackOverflowError - output of one loop is the input of another", "', is neither of type Map.Entry nor an Array");
      assertNotNull(string0);
      assertEquals("borting to protect against StackOverflowError - output of one loop is the inpu", string0);
      
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = 'U';
      charArray0[2] = 'S';
      charArray0[3] = 'N';
      charArray0[4] = '`';
      String string1 = StringUtils.join((byte[]) null, '}', (-1219), (-1219));
      assertNull(string1);
      
      String string2 = StringUtils.join((byte[]) null, 'j');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test689()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, '=', (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.trim("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string2 = StringUtils.substringAfter("", 128);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test690()  throws Throwable  {
      String string0 = "";
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)110;
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte) (-45);
      byteArray0[4] = (byte)0;
      char char0 = '!';
      String string1 = StringUtils.join(byteArray0, '!', (int) (byte)110, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)100, (byte)0, (byte)110, (byte) (-45), (byte)0}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertNotNull(string1);
      assertEquals("", string1);
      
      String string2 = StringUtils.stripEnd("The String must not be empty", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("The String must not be empty", string2);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains('!'));
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(iterator0);
      assertFalse(arrayList0.contains('!'));
      
      boolean boolean0 = arrayList0.add((Object) "The String must not be empty");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains("The String must not be empty"));
      assertFalse(arrayList0.contains((byte)110));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, "");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test691()  throws Throwable  {
      String string0 = StringUtils.rightPad("O4Wyv<v", 0, "");
      assertNotNull(string0);
      assertEquals("O4Wyv<v", string0);
      
      String string1 = StringUtils.rotate("O4Wyv<v", 0);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("O4Wyv<v", string1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = '/';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'/', '/'}, charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      
      String string2 = StringUtils.replaceOnceIgnoreCase("O4Wyv<v", "1(ctXP", "O4Wyv<v");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("O4Wyv<v", string2);
      
      String string3 = StringUtils.abbreviate("", 0, 0);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int0 = StringUtils.indexOf((CharSequence) "1(ctXP", 0, (-11));
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "O4Wyv<v";
      charSequenceArray0[4] = (CharSequence) "O4Wyv<v";
      charSequenceArray0[5] = (CharSequence) "O4Wyv<v";
      String string4 = StringUtils.prependIfMissingIgnoreCase("", "O4Wyv<v", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '/', (-11), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -11
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test692()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", "org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB");
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", string0);
      
      String string1 = StringUtils.remove("org.apache.commons.lang3.ObjectUtils", '?');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("org.apache.commons.lang3.ObjectUtils", string1);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = '?';
      charArray0[2] = '?';
      charArray0[3] = '?';
      charArray0[4] = '?';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", charArray0);
      assertArrayEquals(new char[] {'?', '?', '?', '?', '?'}, charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test693()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.removeEndIgnoreCase("i$`i", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("i$`i", string0);
      
      charSequenceArray0[0] = (CharSequence) "i$`i";
      String string1 = StringUtils.prependIfMissingIgnoreCase("~`vxGOhc", charSequenceArray0[0], charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("i$`i~`vxGOhc", string1);
      
      charSequenceArray0[1] = (CharSequence) "i$`i~`vxGOhc";
      String string2 = StringUtils.replacePattern("p{InCombiningDiacriticalMarks}+", "2,ik0n?HcBJ948", "x|zVbwR{/O8\"Q");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string2);
      
      charSequenceArray0[2] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      String string3 = StringUtils.capitalize("i$`i");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("I$`i", string3);
      
      charSequenceArray0[3] = (CharSequence) "I$`i";
      String string4 = StringUtils.rightPad("#}cn", 84, 'E');
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("#}cnEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE", string4);
      
      charSequenceArray0[4] = (CharSequence) "#}cnEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE";
      String string5 = StringUtils.reverse("t9gw$A)lQVVkB");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertEquals("BkVVQl)A$wg9t", string5);
      
      charSequenceArray0[5] = (CharSequence) "BkVVQl)A$wg9t";
      String string6 = StringUtils.left("p{InCombiningDiacriticalMarks}+", (-2149));
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertEquals("", string6);
      
      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "", (CharSequence) "I$`i");
      assertNotNull(charSequence0);
      assertFalse(charSequence0.equals((Object)string1));
      assertFalse(charSequence0.equals((Object)string5));
      assertFalse(charSequence0.equals((Object)string6));
      assertFalse(charSequence0.equals((Object)string4));
      assertFalse(charSequence0.equals((Object)string0));
      assertTrue(charSequence0.equals((Object)string3));
      assertFalse(charSequence0.equals((Object)string2));
      assertEquals("I$`i", charSequence0);
      
      charSequenceArray0[6] = (CharSequence) "I$`i";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test694()  throws Throwable  {
      String string0 = StringUtils.defaultString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      boolean boolean0 = enumSet0.add(locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "FJ\"<i'9FKW5`";
      String string1 = StringUtils.firstNonEmpty(stringArray0);
      assertEquals(2, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("FJ\"<i'9FKW5`", string1);
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category1));
      
      String string2 = StringUtils.join(iterator0, 'h');
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertNotNull(string2);
      assertTrue(enumSet0.contains(locale_Category1));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("FORMAT", string2);
      
      char[] charArray0 = new char[0];
      int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.strip("FJ\"<i'9FKW5`", "-nDA8o<Ne(SE#l(|");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("FJ\"<i'9FKW5`", string3);
      
      boolean boolean1 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(2, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isAlphanumericSpace("FJ\"<i'9FKW5`");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string4 = StringUtils.join((double[]) null, 'h');
      assertNull(string4);
      
      String string5 = StringUtils.repeat("FJ\"<i'9FKW5`", (-2850));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test695()  throws Throwable  {
      String string0 = StringUtils.removeEnd("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = new int[7];
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-880);
      String string1 = StringUtils.join(intArray0, ']', 6, (-2922));
      assertArrayEquals(new int[] {0, 1, 1, 0, 0, (-880), 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.abbreviateMiddle("WKU}'{b&)yv ", "(F$LjQ+yQ|", 1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("WKU}'{b&)yv ", string2);
      
      String string3 = StringUtils.substringAfter("~`vxGOhcNnkz6q'nT negative", 13);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "(F$LjQ+yQ|", (char[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compare("WKU}'{b&)yv ", (String) null, false);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.substringBefore("WKU}'{b&)yv ", 0);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("WKU}'{b&)yv ", string4);
      
      CharBuffer[] charBufferArray0 = new CharBuffer[0];
      CharBuffer charBuffer0 = StringUtils.firstNonEmpty(charBufferArray0);
      assertEquals(0, charBufferArray0.length);
      assertNull(charBuffer0);
      
      String string5 = StringUtils.leftPad("p{InCombiningDiacriticalMarks}+", 322, "WKU}'{b&)yv ");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertEquals("WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKU}'{b&)yv WKUp{InCombiningDiacriticalMarks}+", string5);
  }

  @Test(timeout = 4000)
  public void test696()  throws Throwable  {
      String string0 = StringUtils.center("Q(sCl0FuH}", 0, "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("Q(sCl0FuH}", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("X6d0c13;", "&9>f0P|=n40QHx%", 0);
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test697()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("CTIZiFRY2hkto", '~');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.isNumeric("CTIZiFRY2hkto");
      assertFalse(boolean0);
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("CTIZiFRY2hkto");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(5, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string0 = StringUtils.abbreviate((String) null, "CTIZiFRY2hkto", 37, 37);
      assertNull(string0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) "CTIZiFRY2hkto", (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) "CTIZiFRY2hkto", 37, 37);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center("dHpfV-~|om\"a`(Se!", 926, "F4[");
      assertNotNull(string1);
      assertEquals("F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[FdHpfV-~|om\"a`(Se!F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4[F4", string1);
  }

  @Test(timeout = 4000)
  public void test698()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "I3}?&|]FBQ");
      assertNotNull(string0);
      assertEquals("I3}?&|]FBQ", string0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-2061L);
      String string1 = StringUtils.wrapIfMissing("", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");
      assertTrue(boolean0);
      
      String string2 = StringUtils.stripStart("", "The Array must not be null");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.isNotBlank("");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test699()  throws Throwable  {
      String string0 = StringUtils.substringAfter("WKU}'{b&)yv WKU}'{b&)yv ", (-319));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.unwrap("Minimum abbreviation width is %d", '~');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Minimum abbreviation width is %d", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "Minimum abbreviation width is %d", (CharSequence) "WKU}'{b&)yv WKU}'{b&)yv ");
      assertEquals((-1), int0);
      
      String string2 = StringUtils.substringBefore("", 2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.swapCase((String) null);
      assertNull(string3);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("Minimum abbreviation width is %d");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test700()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "Noajt\"oXWe6@hF()>Gr");
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.center("", (-3657));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("Noajt\"oXWe6@hF()>Gr");
      assertEquals(13, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Noajt\"oXWe6@hF()>Gr", "");
      assertFalse(boolean0);
      
      String string2 = StringUtils.repeat("", "", (-3657));
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test701()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "MVb<GK }izowG29kGgE";
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      assertFalse(treeSet0.contains("MVb<GK }izowG29kGgE"));
      
      charSequenceArray0[2] = (CharSequence) "MVb<GK }izowG29kGgE";
      charSequenceArray0[3] = (CharSequence) "MVb<GK }izowG29kGgE";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = treeSet0.add(charSequenceArray0[0]);
      assertEquals(5, charSequenceArray0.length);
      assertTrue(treeSet0.contains("MVb<GK }izowG29kGgE"));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string0 = StringUtils.substringAfter("MVb<GK }izowG29kGgE", "MVb<GK }izowG29kGgE");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeAll("MVb<GK }izowG29kGgE", "MVb<GK }izowG29kGgE");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOfAny("MVb<GK }izowG29kGgE", charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(0, int0);
      
      boolean boolean2 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string2 = StringUtils.repeat("", 64);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test702()  throws Throwable  {
      String string0 = StringUtils.removeEnd("`]:qMn y$yI_}U=6", "!7tm']w9a>M`G;");
      assertNotNull(string0);
      assertEquals("`]:qMn y$yI_}U=6", string0);
      
      String string1 = StringUtils.defaultIfEmpty("`]:qMn y$yI_}U=6", "Object varargs must not be null");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("`]:qMn y$yI_}U=6", string1);
      
      int[] intArray0 = new int[1];
      String string2 = StringUtils.trimToEmpty("`]:qMn y$yI_}U=6");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("`]:qMn y$yI_}U=6", string2);
      
      String string3 = StringUtils.center("`]:qMn y$yI_}U=6", 4, "`]:qMn y$yI_}U=6");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("`]:qMn y$yI_}U=6", string3);
      
      boolean boolean0 = StringUtils.isAllLowerCase("`]:qMn y$yI_}U=6");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test703()  throws Throwable  {
      String string0 = StringUtils.center("The character ", (-1588), "`]:qMn y$yI_}U=6");
      assertNotNull(string0);
      assertEquals("The character ", string0);
      
      String string1 = StringUtils.removeEnd("", "u!y0w'}l#gr_w");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "";
      charSequenceArray0[5] = (CharSequence) "";
      charSequenceArray0[6] = (CharSequence) "";
      charSequenceArray0[7] = (CharSequence) "";
      charSequenceArray0[8] = (CharSequence) "";
      String string2 = StringUtils.prependIfMissingIgnoreCase("`]:qMn y$yI_}U=6", "The character ", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("`]:qMn y$yI_}U=6", string2);
      
      String string3 = StringUtils.defaultIfEmpty("`]:qMn y$yI_}U=6", "Object varargs must not be null");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("`]:qMn y$yI_}U=6", string3);
      
      String string4 = StringUtils.replaceIgnoreCase("", "", "`]:qMn y$yI_}U=6");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.stripEnd("He76uqq", "ch");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("He76uqq", string5);
      
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertTrue(boolean0);
      
      String string6 = StringUtils.firstNonEmpty((String[]) null);
      assertNull(string6);
      
      String[] stringArray0 = StringUtils.split("Object varargs must not be null");
      assertEquals(6, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string7 = StringUtils.wrapIfMissing("", "`]:qMn y$yI_}U=6");
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string2));
      assertEquals("", string7);
      
      String string8 = null;
      String string9 = StringUtils.substringBefore((String) null, (-1588));
      assertNull(string9);
      
      String string10 = StringUtils.appendIfMissing("...", (CharSequence) null, charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string0));
      assertEquals("...", string10);
      
      try { 
        StringUtils.getBytes("Object varargs must not be null", "He76uqq");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test704()  throws Throwable  {
      byte[] byteArray0 = StringUtils.getBytes((String) null, (String) null);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = StringUtils.trimToEmpty("xSa4@8Mxeq:;V~pA");
      assertNotNull(string0);
      
      String string1 = StringUtils.join(byteArray0, 'j', 0, (-1219));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceChars("xSa4@8Mxeq:;V~pA", (String) null, (String) null);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.substringAfterLast("org.apache.commons.lang3.StringUtils", 85);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("tils", string3);
  }

  @Test(timeout = 4000)
  public void test705()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Invalid locale format: ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertNotNull(stack0);
      
      boolean boolean0 = StringUtils.isNoneBlank(stringArray0);
      assertEquals(3, stringArray0.length);
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNumeric("Invalid locale format: ");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.substringAfterLast("ma5#@r.&", "IhXLJO^hISUr?w3OQ");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test706()  throws Throwable  {
      String string0 = StringUtils.trimToEmpty("(L");
      assertNotNull(string0);
      assertEquals("(L", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("(L");
      assertFalse(boolean0);
      
      String string1 = StringUtils.unwrap("(L", "(L");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("(L", string1);
      
      String string2 = StringUtils.getDigits("(L");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("(L");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string3 = StringUtils.substringAfterLast("", 12);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test707()  throws Throwable  {
      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);
      assertFalse(boolean0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = null;
      charSequenceArray0[1] = null;
      boolean boolean1 = StringUtils.containsAny((CharSequence) "", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = StringUtils.removeAll("", "B?1:;$rT^EDgq#L");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfterLast("x", 792);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test708()  throws Throwable  {
      boolean boolean0 = StringUtils.isAsciiPrintable("lG ");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isBlank("U%3IQRXCgPB");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test709()  throws Throwable  {
      char[] charArray0 = new char[2];
      charArray0[0] = '#';
      String string0 = StringUtils.chomp("9yiggd+un0");
      assertNotNull(string0);
      assertEquals("9yiggd+un0", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("9yiggd+un0", "9yiggd+un0");
      assertEquals(1.0, double0, 0.01);
      
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category1, locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category1));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category1, locale_Category0);
      assertEquals(1, enumSet1.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      Iterator<Locale.Category> iterator0 = enumSet1.iterator();
      assertEquals(1, enumSet1.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(iterator0);
      assertTrue(enumSet1.contains(locale_Category1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      String string1 = StringUtils.replaceOnce("9yiggd+un0", "F**Hbz%ZR%ul", "9-PO");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("9yiggd+un0", string1);
      
      boolean boolean0 = StringUtils.isWhitespace("9yiggd+un0");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((byte[]) null, '*');
      assertNull(string2);
      
      String string3 = StringUtils.capitalize("9VL$3N");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("9VL$3N", string3);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "9-PO", charArray0);
      assertArrayEquals(new char[] {'#', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compare("*9^t{\"^*9^t{\"^", "9-PO", false);
      assertFalse(int1 == int0);
      assertEquals((-15), int1);
  }

  @Test(timeout = 4000)
  public void test710()  throws Throwable  {
      String string0 = StringUtils.chop("\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrapIfMissing("tGsGN?`ctgw", 'l');
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("ltGsGN?`ctgwl", string1);
      
      String string2 = StringUtils.deleteWhitespace("ltGsGN?`ctgwl");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("ltGsGN?`ctgwl", string2);
      
      String string3 = StringUtils.removeEnd((String) null, "tGsGN?`ctgw");
      assertNull(string3);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'l';
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("T52%^~Gr+'m;64", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test711()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance("i$`i", "i$`i");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test712()  throws Throwable  {
      String string0 = "[";
      int int0 = (-1217);
      String string1 = StringUtils.substring("[", (-1217), (-1217));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.getJaroWinklerDistance("", (CharSequence) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Strings must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test713()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-218));
      assertNull(stringArray0);
      
      byte[] byteArray0 = StringUtils.getBytes((String) null, "X>acriticalMarks}+");
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      
      String string0 = StringUtils.getDigits("kz`q<nT ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("X>acriticalMarks}+");
      assertFalse(boolean0);
      
      String string1 = StringUtils.appendIfMissing("maxWith cannot be negative", "", (CharSequence[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string1);
      
      String string2 = StringUtils.wrapIfMissing("kz`q<nT ", 'k');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("kz`q<nT k", string2);
      
      String string3 = StringUtils.join((boolean[]) null, 'A');
      assertNull(string3);
      
      int[] intArray0 = StringUtils.toCodePoints((CharSequence) null);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test714()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("\u0000\u0000\u0000\u0000", "l %");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("l %");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test715()  throws Throwable  {
      String string0 = StringUtils.unwrap("jF-u", ".VNQ0T6P>`x");
      assertNotNull(string0);
      assertEquals("jF-u", string0);
      
      String string1 = StringUtils.upperCase(".VNQ0T6P>`x");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(".VNQ0T6P>`X", string1);
      
      boolean[] booleanArray0 = new boolean[1];
      String string2 = StringUtils.join(booleanArray0, 'j');
      assertTrue(Arrays.equals(new boolean[] {false}, booleanArray0));
      assertEquals(1, booleanArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("false", string2);
  }

  @Test(timeout = 4000)
  public void test716()  throws Throwable  {
      String string0 = StringUtils.wrap("?46eAsJdt+,go", "_)gPkI(wi");
      assertNotNull(string0);
      assertEquals("_)gPkI(wi?46eAsJdt+,go_)gPkI(wi", string0);
      
      boolean boolean0 = StringUtils.endsWithIgnoreCase("?46eAsJdt+,go", "_)gPkI(wi?46eAsJdt+,go_)gPkI(wi");
      assertFalse(boolean0);
      
      int int0 = StringUtils.length("_)gPkI(wi");
      assertEquals(9, int0);
      
      int int1 = StringUtils.length("_)gPkI(wi");
      assertTrue(int1 == int0);
      assertEquals(9, int1);
      
      boolean[] booleanArray0 = new boolean[2];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      String string1 = StringUtils.join(booleanArray0, '(');
      assertTrue(Arrays.equals(new boolean[] {false, false}, booleanArray0));
      assertEquals(2, booleanArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("false(false", string1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = '(';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = '(';
      charArray0[5] = '(';
      charArray0[6] = '(';
      charArray0[7] = '(';
      charArray0[8] = '(';
      String string2 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'(', '(', '(', '(', '(', '(', '(', '(', '('}, charArray0);
      assertEquals(9, charArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("(((((((((", string2);
  }

  @Test(timeout = 4000)
  public void test717()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      String string0 = StringUtils.join(byteArray0, '=', (int) (byte)106, (int) (byte)106);
      assertArrayEquals(new byte[] {(byte)106}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfAny("", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.split(" ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.replaceEach("\r", stringArray0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r", string1);
      
      String string2 = StringUtils.stripAccents("*c'M");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("*c'M", string2);
      
      String string3 = StringUtils.abbreviate("", (-1), (-1));
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int2 = StringUtils.lastOrdinalIndexOf("{I?oAkkuE[2~j[R%olb", "", 3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(19, int2);
      
      String string4 = StringUtils.stripToEmpty("f$]y&d");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("f$]y&d", string4);
  }

  @Test(timeout = 4000)
  public void test718()  throws Throwable  {
      LinkedList<CharBuffer> linkedList0 = new LinkedList<CharBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = StringUtils.substring("", (-1630), 55);
      assertNotNull(string0);
      assertEquals("", string0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(""));
      
      boolean boolean0 = linkedHashSet0.add("', is neither of type Map.Entry n({F{n7^pWOf");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.contains(string0));
      assertTrue(linkedHashSet0.contains("', is neither of type Map.Entry n({F{n7^pWOf"));
      assertTrue(boolean0);
      
      Iterator<String> iterator0 = linkedHashSet0.iterator();
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertNotNull(iterator0);
      assertFalse(linkedHashSet0.contains(string0));
      assertTrue(linkedHashSet0.contains("', is neither of type Map.Entry n({F{n7^pWOf"));
      
      String string1 = StringUtils.defaultString("kz6.]_cor an Array");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("kz6.]_cor an Array", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "Gn";
      charSequenceArray0[2] = (CharSequence) "";
      String string2 = StringUtils.appendIfMissingIgnoreCase("", "kz6.]_cor an Array", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      
      double double0 = StringUtils.getJaroWinklerDistance("kz6.]_cor an Array", " vs ");
      assertEquals(0.44, double0, 0.01);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "', is neither of type Map.Entry n({F{n7^pWOf", (CharSequence) "kz6.]_cor an Array", (-11));
      assertEquals((-1), int0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test719()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("#", "FORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMATFORMAT");
      assertEquals((-67), int0);
  }

  @Test(timeout = 4000)
  public void test720()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      String string0 = "MVb<GK }izowG29kGgE";
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      charSequenceArray0[2] = (CharSequence) "MVb<GK }izowG29kGgE";
      charSequenceArray0[3] = (CharSequence) "MVb<GK }izowG29kGgE";
      Object[] objectArray0 = treeSet0.toArray((Object[]) charSequenceArray0);
      assertSame(charSequenceArray0, objectArray0);
      assertEquals(5, charSequenceArray0.length);
      assertEquals(5, objectArray0.length);
      assertNotNull(objectArray0);
      assertFalse(treeSet0.contains("MVb<GK }izowG29kGgE"));
      
      boolean boolean0 = StringUtils.endsWith("MVb<GK }izowG29kGgE", "MVb<GK }izowG29kGgE");
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        treeSet0.add(charSequenceArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test721()  throws Throwable  {
      String string0 = StringUtils.abbreviateMiddle("org.apache.commons.lang3.exception.CloneFailedException", "nUaJ/HF67", 6);
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.exception.CloneFailedException", string0);
      
      boolean boolean0 = StringUtils.isAnyBlank((CharSequence[]) null);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllBlank((CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = StringUtils.isEmpty("org.apache.commons.lang3.exception.CloneFailedException");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test722()  throws Throwable  {
      boolean boolean0 = StringUtils.isAllBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string0 = StringUtils.replaceEachRepeatedly("vky0cueizL]Oy6KEFw", (String[]) null, (String[]) null);
      assertNotNull(string0);
      assertEquals("vky0cueizL]Oy6KEFw", string0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "vky0cueizL]Oy6KEFw");
      assertEquals(18, charBuffer0.limit());
      assertEquals(18, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(18, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(18, charBuffer0.remaining());
      assertEquals("vky0cueizL]Oy6KEFw", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'X';
      charArray0[1] = 'z';
      charArray0[2] = 'G';
      charArray0[3] = 'u';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 131, (-85));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test723()  throws Throwable  {
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "kz6.]_corA an Array", (CharSequence) "kz6.]_corA an Array");
      assertEquals((-1), int0);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      String string0 = StringUtils.leftPad("...", (-1), "kz6.]_corA an Array");
      assertNotNull(string0);
      assertEquals("...", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("kz6.]_corA an Array", "kz6.]_corA an Array");
      assertEquals(1.0, double0, 0.01);
      
      String string1 = StringUtils.deleteWhitespace("...");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("...", string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.replaceEach("", stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(string2);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test724()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "Locale must not be null";
      charSequenceArray0[1] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[2] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[3] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray0[4] = (CharSequence) "Locale must not be null";
      charSequenceArray0[5] = (CharSequence) "Locale must not be null";
      charSequenceArray0[6] = (CharSequence) "Locale must not be null";
      String string0 = StringUtils.appendIfMissingIgnoreCase("p{InCombiningDiacriticalMarks}+", "Locale must not be null", charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
  }

  @Test(timeout = 4000)
  public void test725()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[0];
      String string0 = StringUtils.join(booleanArray0, 'q', 232, 232);
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertEquals(0, booleanArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test726()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[9];
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertEquals((-1), int0);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = StringUtils.isNumeric("`]:qMn y$yI_}U=6!7tm']w9a>M`G;");
      assertFalse(boolean0);
      
      String string0 = StringUtils.substringAfterLast("`]:qMn y$yI_}U=6!7tm']w9a>M`G;", "'fi-d9g_}j");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.appendIfMissing("", "", charSequenceArray0);
      assertEquals(9, charSequenceArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test727()  throws Throwable  {
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertNotNull(stack0);
      
      HashSet<Locale> hashSet0 = new HashSet<Locale>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) stack0, (Collection<Locale>) hashSet0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Locale locale0 = Locale.lookup(stack0, list0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(locale0);
      
      String string0 = StringUtils.lowerCase("", (Locale) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "", (-2829));
      assertEquals((-1), int0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test728()  throws Throwable  {
      String string0 = StringUtils.remove("org.apache.commons.lang3.ObjectUtils", '?');
      assertNotNull(string0);
      assertEquals("org.apache.commons.lang3.ObjectUtils", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '?';
      charArray0[1] = '?';
  }

  @Test(timeout = 4000)
  public void test729()  throws Throwable  {
      String string0 = StringUtils.remove("<}AD')Erh8_@6|7+v", 'W');
      assertNotNull(string0);
      
      Locale.Category[] locale_CategoryArray0 = new Locale.Category[9];
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      locale_CategoryArray0[0] = locale_Category0;
      Locale.Category locale_Category1 = Locale.Category.DISPLAY;
      locale_CategoryArray0[1] = locale_Category1;
      Locale.Category locale_Category2 = Locale.Category.FORMAT;
      locale_CategoryArray0[2] = locale_Category2;
      Locale.Category locale_Category3 = Locale.Category.FORMAT;
      locale_CategoryArray0[3] = locale_Category3;
      Locale.Category locale_Category4 = Locale.Category.DISPLAY;
      locale_CategoryArray0[4] = locale_Category4;
      Locale.Category locale_Category5 = Locale.Category.FORMAT;
      locale_CategoryArray0[5] = locale_Category5;
      Locale.Category locale_Category6 = Locale.Category.DISPLAY;
      locale_CategoryArray0[6] = locale_Category6;
      Locale.Category locale_Category7 = Locale.Category.FORMAT;
      locale_CategoryArray0[7] = locale_Category7;
      Locale.Category locale_Category8 = Locale.Category.FORMAT;
      locale_CategoryArray0[8] = locale_Category8;
      String string1 = StringUtils.join(locale_CategoryArray0);
      assertEquals(9, locale_CategoryArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("DISPLAYDISPLAYFORMATFORMATDISPLAYFORMATDISPLAYFORMATFORMAT", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "<}AD')Erh8_@6|7+v", (CharSequence) "DISPLAYDISPLAYFORMATFORMATDISPLAYFORMATDISPLAYFORMATFORMAT", 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test730()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "}f)Uhb?d0eC";
      charSequenceArray0[1] = (CharSequence) ".,/";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("}Q", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string0 = StringUtils.reverse(".,/");
      assertNotNull(string0);
      assertEquals("/,.", string0);
      
      Integer[] integerArray0 = new Integer[2];
      String string1 = StringUtils.join(integerArray0);
      assertEquals(2, integerArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "}Q", "}Q");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test731()  throws Throwable  {
      String string0 = StringUtils.removeEnd("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.abbreviateMiddle("r", (String) null, 6);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("r", string1);
      
      String string2 = StringUtils.strip("\r           3b            ", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("\r           3b            ", string2);
      
      boolean boolean0 = StringUtils.isNoneBlank((CharSequence[]) null);
      assertTrue(boolean0);
      
      String string3 = StringUtils.swapCase(" oX%/{k;2");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" Ox%/{K;2", string3);
      
      boolean boolean1 = StringUtils.isAlphanumericSpace(" Ox%/{K;2");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test732()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Ty,HVnggok}20]", "Ty,HVnggok}20]");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.repeat((String) null, 1430);
      assertNull(string1);
      
      String string2 = StringUtils.stripStart(":", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals(":", string2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1430;
      String string3 = StringUtils.join(floatArray0, '5', 1430, 1430);
      assertArrayEquals(new float[] {1430.0F}, floatArray0, 0.01F);
      assertEquals(1, floatArray0.length);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test733()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) charBuffer0, (char[]) null);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.isAnyBlank(stringArray0);
      assertEquals(250, stringArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAllBlank(stringArray0);
      assertEquals(250, stringArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isEmpty(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.remaining());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test734()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("e5F[5");
      assertNotNull(string0);
      assertEquals("e5F[5", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("e5F[5", "e5F[5");
      assertEquals(2, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = StringUtils.toCodePoints("e5F[5");
      assertArrayEquals(new int[] {101, 53, 70, 91, 53}, intArray0);
      assertEquals(5, intArray0.length);
      assertNotNull(intArray0);
      
      String string1 = StringUtils.defaultString("e5F[5");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("e5F[5", string1);
  }

  @Test(timeout = 4000)
  public void test735()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (-2061L);
      String string1 = StringUtils.join(longArray0, 'r');
      assertArrayEquals(new long[] {(-2061L), 0L, 0L, 0L, 0L, 0L, 0L}, longArray0);
      assertEquals(7, longArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("-2061r0r0r0r0r0r0", string1);
      
      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "-2061r0r0r0r0r0r0");
      assertFalse(boolean0);
      
      String string2 = StringUtils.join((Iterator<?>) null, "z*qR0fkO");
      assertNull(string2);
      
      int[] intArray0 = StringUtils.toCodePoints("z*qR0fkO");
      assertArrayEquals(new int[] {122, 42, 113, 82, 48, 102, 107, 79}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test736()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "The Array must not be null");
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
      
      char[] charArray0 = new char[7];
      charArray0[0] = 't';
      charArray0[1] = ':';
      charArray0[2] = 'u';
      charArray0[3] = 'L';
      charArray0[4] = '!';
      charArray0[5] = '0';
      charArray0[6] = 'v';
      int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'t', ':', 'u', 'L', '!', '0', 'v'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.strip("The Array must not be null", "");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("The Array must not be null", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test737()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("i$`i");
      assertNotNull(string0);
      assertEquals("i$`i", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "i$`i";
      charSequenceArray0[1] = (CharSequence) "i$`i";
      charSequenceArray0[2] = (CharSequence) "i$`i";
      int int0 = StringUtils.lastIndexOfAny("i$`i", charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string1 = StringUtils.trim("");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string2 = StringUtils.stripAccents("b$wy&:");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("b$wy&:", string2);
      
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("{I?oAkkuE[2~j[R%olb", 0, (-404));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test738()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbrevTation width is %Q", '.');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '.';
      intArray0[6] = (int) '.';
      String string0 = StringUtils.prependIfMissingIgnoreCase("Minimum abbrevTation width is %Q", "Minimum abbrevTation width is %Q", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Minimum abbrevTation width is %Q", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Minimum abbrevTation width is %Q", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeAll("maxWith cannot be negative", "v=lMewCTb0z$S9&Y");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string1);
      
      int int0 = StringUtils.lastIndexOfAny("maxWith cannot be negative", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
      
      String[] stringArray1 = StringUtils.split("Minimum abbrevTation width is %Q", "maxWith cannot be negative", (-1));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string2 = StringUtils.leftPad("g%*]FJW:8c$`OdQ{>];O0", 13, "Minimum abbrevTation width is %Q");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("g%*]FJW:8c$`OdQ{>];O0", string2);
  }

  @Test(timeout = 4000)
  public void test739()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Invalid locale format: ");
      assertEquals(3, stringArray0.length);
      assertNotNull(stringArray0);
      
      LinkedList<Locale.Category> linkedList0 = new LinkedList<Locale.Category>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test740()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)106;
      String string0 = StringUtils.join(byteArray0, '=', (int) (byte)106, (int) (byte)106);
      assertArrayEquals(new byte[] {(byte)106}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastIndexOfAny("", (CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.trim("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "\r", (CharSequence) "\r");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.split(" ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.stripAccents("*c'M");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("*c'M", string2);
      
      String string3 = StringUtils.abbreviate("", (-1), (-1));
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      int int2 = StringUtils.lastOrdinalIndexOf("{I?oAkkuE[2~j[R%olb", "", 3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(19, int2);
      
      String string4 = StringUtils.stripToEmpty("b$wy&:");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertEquals("b$wy&:", string4);
  }

  @Test(timeout = 4000)
  public void test741()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\r", (CharSequence) "\r");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", "fah,");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripAccents("*c'M");
      assertNotNull(string0);
      assertEquals("*c'M", string0);
      
      String string1 = StringUtils.stripToEmpty("\n");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "*c'M", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      
      String string2 = StringUtils.defaultString(" ", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" ", string2);
  }

  @Test(timeout = 4000)
  public void test742()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("+");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test743()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = "Search and Replace array lengths don't match: ";
      String string1 = "Mvp";
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("Mvp", (-5237));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test744()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("i$`i");
      assertNotNull(string0);
      assertEquals("i$`i", string0);
      
      String string1 = StringUtils.upperCase("&v`LHA}n'\nl_)}F5b{");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("&V`LHA}N'\nL_)}F5B{", string1);
  }

  @Test(timeout = 4000)
  public void test745()  throws Throwable  {
      String string0 = StringUtils.substringBefore("H5(s%ED)8BwmW({9", "H5(s%ED)8BwmW({9");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "H5(s%ED)8BwmW({9");
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "H5(s%ED)8BwmW({9";
      charSequenceArray0[1] = (CharSequence) "";
      int int1 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test746()  throws Throwable  {
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      
      Iterator<Object> iterator0 = treeSet0.descendingIterator();
      assertNotNull(iterator0);
      
      boolean boolean0 = StringUtils.isMixedCase("MVb<GK }E>i795LOpn");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty("MVb<GK }E>i795LOpn");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test747()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      String string0 = StringUtils.stripAccents(" ");
      assertNotNull(string0);
      assertEquals(" ", string0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "*c'M", (CharSequence) "");
      assertEquals(5, int0);
      
      String string1 = StringUtils.overlay("\r", "\r", (-1), (-1));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("\r\r", string1);
  }

  @Test(timeout = 4000)
  public void test748()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(21);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(21, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(21, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.length());
      assertEquals(21, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      IntStream intStream0 = charBuffer0.chars();
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(21, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(21, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.length());
      assertEquals(21, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertNotNull(intStream0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) charBuffer0, (CharSequence) charBuffer0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(21, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(21, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.length());
      assertEquals(21, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test749()  throws Throwable  {
      String string0 = StringUtils.unwrap("(L", "(L");
      assertNotNull(string0);
      assertEquals("(L", string0);
      
      String[] stringArray0 = new String[4];
      stringArray0[2] = "(L";
      String string1 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(4, stringArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test750()  throws Throwable  {
      String string0 = StringUtils.removeEndIgnoreCase("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, "", 2457);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test751()  throws Throwable  {
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      CharSequence charSequence0 = StringUtils.getIfEmpty((CharSequence) null, supplier0);
      assertNull(charSequence0);
      
      int int0 = StringUtils.lastOrdinalIndexOf((CharSequence) null, (CharSequence) null, 911);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test752()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertNotNull(charBuffer0);
      
      CharBuffer charBuffer1 = StringUtils.getIfEmpty(charBuffer0, (Supplier<CharBuffer>) null);
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals("", charBuffer0.toString());
      assertNull(charBuffer1);
      
      String string0 = StringUtils.substringAfter("", 1028);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test753()  throws Throwable  {
      String string0 = StringUtils.remove("Cannot store ", "Cannot store ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isBlank("Cannot store ");
      assertFalse(boolean0);
      
      String string1 = StringUtils.stripToEmpty("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultString("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "Cannot store ";
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "";
      stringArray1[1] = "";
      String string3 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray1);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(9, stringArray0.length);
      assertEquals(2, stringArray1.length);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("", string3);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      boolean boolean1 = locale0.hasExtensions();
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Locale.setDefault(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      int int0 = StringUtils.getFuzzyDistance("Cannot store ", "", locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(0, int0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "", 0, 0);
      assertEquals(0, charBuffer0.length());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        charBuffer0.append((CharSequence) "", 65, 1442);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test754()  throws Throwable  {
      String string0 = StringUtils.substringBefore("O.]_c({F{n7^pWOf", "O.]_c({F{n7^pWOf");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "}Q");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringAfter("}f)Uhb?d0eC", ".,/");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "}f)Uhb?d0eC";
      charSequenceArray0[1] = (CharSequence) ".,/";
      boolean boolean0 = StringUtils.containsAnyIgnoreCase("}Q", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string3 = StringUtils.leftPad("e5F[5XXx/XYmYT;m&s(,", (-786), ' ');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("e5F[5XXx/XYmYT;m&s(,", string3);
      
      String string4 = StringUtils.wrap("RR$m#/RB#r", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertEquals("RR$m#/RB#r", string4);
      
      String string5 = StringUtils.reverse("e5F[5XXx/XYmYT;m&s(,");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertEquals(",(s&m;TYmYX/xXX5[F5e", string5);
  }

  @Test(timeout = 4000)
  public void test755()  throws Throwable  {
      char[] charArray0 = new char[4];
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(4, charArray0.length);
      assertNotNull(string0);
      assertEquals("\u0000\u0000\u0000\u0000", string0);
      
      boolean boolean0 = StringUtils.equalsIgnoreCase("\u0000\u0000\u0000\u0000", "l %");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrap("\u0000\u0000\u0000\u0000", "l %");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("l %\u0000\u0000\u0000\u0000l %", string1);
      
      boolean boolean1 = StringUtils.isNotEmpty("l %");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string2 = StringUtils.substringBetween("\u0000\u0000\u0000\u0000", "l %\u0000\u0000\u0000\u0000l %");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test756()  throws Throwable  {
      String string0 = StringUtils.chomp("`yF| 6lW;3");
      assertNotNull(string0);
      assertEquals("`yF| 6lW;3", string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("`yF| 6lW;3");
      assertFalse(boolean0);
      
      String string1 = StringUtils.toRootLowerCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.join((float[]) null, '');
      assertNull(string2);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "`yF| 6lW;3", (CharSequence) "`yF| 6lW;3");
      assertEquals(0, int0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      int int1 = StringUtils.getFuzzyDistance("`yF| 6lW;3", "`yF| 6lW;3", locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertFalse(int1 == int0);
      assertEquals(28, int1);
  }

  @Test(timeout = 4000)
  public void test757()  throws Throwable  {
      String string0 = "Jd}4";
      String string1 = StringUtils.replaceOnceIgnoreCase("Jd}4", "Jd}4", ";B.XVI9xX");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(";B.XVI9xX", string1);
      
      String string2 = StringUtils.wrap("Jd}4", ";B.XVI9xX");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(";B.XVI9xXJd}4;B.XVI9xX", string2);
      
      boolean boolean0 = StringUtils.startsWith("Jd}4", ";B.XVI9xX");
      assertFalse(boolean0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Stream<Locale.LanguageRange> stream0 = arrayList0.stream();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(stream0);
      
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("rj-IN.g'WWO8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=rj-in.g'wwo8
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test758()  throws Throwable  {
      String string0 = StringUtils.remove("Cannot store ", "Cannot store ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isBlank("Cannot store ");
      assertFalse(boolean0);
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'E';
      charArray0[1] = 'E';
      charArray0[2] = '&';
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {'E', 'E', '&'}, charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test759()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("qD}uLU");
      assertNotNull(string0);
      assertEquals("qD}uLU", string0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = ';';
      charArray0[1] = 'X';
      charArray0[2] = '$';
      charArray0[3] = '&';
      charArray0[4] = 'E';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "qD}uLU", charArray0);
      assertArrayEquals(new char[] {';', 'X', '$', '&', 'E'}, charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test760()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) " ", "fah,");
      assertFalse(boolean0);
      
      String string0 = StringUtils.stripAccents("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.stripToEmpty("\n");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\r", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      String string2 = StringUtils.defaultString(" ", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" ", string2);
  }

  @Test(timeout = 4000)
  public void test761()  throws Throwable  {
      String string0 = StringUtils.substringAfter(">|~m", ">|~m");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeAll("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test762()  throws Throwable  {
      // Undeclared exception!
      try { 
        StringUtils.joinWith("$}H2T", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test763()  throws Throwable  {
      String string0 = "C0Fs)I-4S'";
      String string1 = StringUtils.substringAfter("C0Fs)I-4S'", "C0Fs)I-4S'");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.joinWith("C0Fs)I-4S'", (Object[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object varargs must not be null
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test764()  throws Throwable  {
      String string0 = StringUtils.right("p{InCombiningDiacriticalMarks}+", 8);
      assertNotNull(string0);
      assertEquals("lMarks}+", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "lMarks}+";
      boolean boolean0 = StringUtils.startsWithAny("p{InCombiningDiacriticalMarks}+", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAlphanumeric("lMarks}+");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.isNumeric("p{InCombiningDiacriticalMarks}+");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      HashSet<Object> hashSet0 = new HashSet<Object>();
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("lMarks}+"));
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[0], charSequenceArray0[0], 8);
      assertEquals(1, charSequenceArray0.length);
      assertEquals(0, int0);
      
      int[] intArray0 = StringUtils.toCodePoints("lMarks}+");
      assertArrayEquals(new int[] {108, 77, 97, 114, 107, 115, 125, 43}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test765()  throws Throwable  {
      char[] charArray0 = new char[2];
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category0);
      assertEquals(1, enumSet1.size());
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      String string0 = StringUtils.replaceOnce("$G`M 85{xXfc%", "(X7!B", "$G`M 85{xXfc%");
      assertNotNull(string0);
      assertEquals("$G`M 85{xXfc%", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("$G`M 85{xXfc%");
      assertFalse(boolean0);
      
      String string1 = StringUtils.join((byte[]) null, 'Y');
      assertNull(string1);
      
      String string2 = StringUtils.capitalize("T/O5");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("T/O5", string2);
      
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "T/O5", charArray0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compare("*9^t{\"^*9^t{\"^", "T/O5", false);
      assertFalse(int1 == int0);
      assertEquals((-42), int1);
      
      String string3 = StringUtils.defaultString("*9^t{\"^*9^t{\"^", "*");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("*9^t{\"^*9^t{\"^", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "*9^t{\"^*9^t{\"^";
      int int2 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      
      String string4 = StringUtils.right((String) null, 1816);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test766()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(stack0);
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.defaultString((String) null);
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String string1 = StringUtils.right("", 21);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test767()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("WKU}'{b&)yv", string0);
      
      String string1 = StringUtils.rightPad("B", 4, "?@;uN");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("B?@;", string1);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      assertFalse(vector0.contains(4));
      
      ListIterator<Object> listIterator0 = vector0.listIterator();
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      assertFalse(vector0.contains(4));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      String string2 = StringUtils.join((List<?>) vector0, '9', 0, (-880));
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertNotNull(string2);
      assertFalse(vector0.contains(4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.trimToEmpty("B?@;");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertEquals("B?@;", string3);
      
      String string4 = StringUtils.getDigits("ra");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertEquals("", string4);
      
      String string5 = StringUtils.replaceChars("B?@;", '9', '9');
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertEquals("B?@;", string5);
      
      String string6 = StringUtils.capitalize("B?@;");
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertEquals("B?@;", string6);
      
      String string7 = StringUtils.repeat("B?@;", "WKU}'{b&)yv ", 4);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string5));
      assertEquals("B?@;WKU}'{b&)yv B?@;WKU}'{b&)yv B?@;WKU}'{b&)yv B?@;", string7);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "B?@;", (CharSequence) "B?@;");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test768()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category1));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category1));
      
      String string0 = StringUtils.join(iterator0, 'Y');
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(string0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertEquals("FORMAT", string0);
      
      String string1 = StringUtils.abbreviate((String) null, "[", 2287, 2287);
      assertNull(string1);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      String string2 = StringUtils.abbreviate((String) null, (String) null, 37, 37);
      assertNull(string2);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, 2287, 2287);
      assertEquals((-1), int0);
      
      String string3 = StringUtils.leftPad((String) null, 2287, (String) null);
      assertNull(string3);
      
      String string4 = StringUtils.join((Object[]) null, "...", (-521), 13);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test769()  throws Throwable  {
      String string0 = StringUtils.center("Supplied value must be a valid byte literal between -128 and 127: [", (-1983));
      assertNotNull(string0);
      assertEquals("Supplied value must be a valid byte literal between -128 and 127: [", string0);
      
      boolean boolean0 = StringUtils.isWhitespace("Supplied value must be a valid byte literal between -128 and 127: [");
      assertFalse(boolean0);
      
      Object[] objectArray0 = new Object[0];
      String string1 = StringUtils.joinWith("\r", objectArray0);
      assertEquals(0, objectArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Object[] objectArray1 = new Object[2];
      assertFalse(objectArray1.equals((Object)objectArray0));
      
      objectArray1[0] = (Object) "\r";
      objectArray1[1] = (Object) "";
      String string2 = StringUtils.join(objectArray1, '!', 108, (-1983));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(2, objectArray1.length);
      assertNotNull(string2);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test770()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, '=', (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.trim("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-1), (int)integer0);
      
      String[] stringArray0 = StringUtils.split(" ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.substring("", 0);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.containsWhitespace("\r");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, stringArray1.length);
      assertNotNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test771()  throws Throwable  {
      double double0 = StringUtils.getJaroWinklerDistance(">|~m", ";7Y$;SR]s0yo!D/");
      assertEquals(0.0, double0, 0.01);
      
      String string0 = StringUtils.right("Cloneable type ", (-3691));
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test772()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.normalizeSpace("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.capitalize("");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test773()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "I3}?&|[]FBQ");
      assertNotNull(string0);
      assertEquals("I3}?&|[]FBQ", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "I3}?&|[]FBQ";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "I3}?&|[]FBQ";
      charSequenceArray0[3] = (CharSequence) "I3}?&|[]FBQ";
      String string1 = StringUtils.unwrap("I3}?&|[]FBQ", '0');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("I3}?&|[]FBQ", string1);
      
      charSequenceArray0[4] = (CharSequence) "I3}?&|[]FBQ";
      charSequenceArray0[5] = (CharSequence) "I3}?&|[]FBQ";
      charSequenceArray0[6] = (CharSequence) "I3}?&|[]FBQ";
      charSequenceArray0[7] = (CharSequence) "I3}?&|[]FBQ";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.trimToNull("...");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("...", string2);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "I3}?&|[]FBQ", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      String string3 = StringUtils.join((short[]) null, 'a');
      assertNull(string3);
      
      String string4 = StringUtils.substring("negative", 0);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("negative", string4);
      
      boolean boolean0 = StringUtils.containsWhitespace("...");
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string5 = StringUtils.wrapIfMissing("I3}?&|[]FBQ", (String) null);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertEquals("I3}?&|[]FBQ", string5);
  }

  @Test(timeout = 4000)
  public void test774()  throws Throwable  {
      String string0 = StringUtils.trimToNull("\n");
      assertNull(string0);
      
      int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, 0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test775()  throws Throwable  {
      String string0 = StringUtils.upperCase("K'N\"/", (Locale) null);
      assertNotNull(string0);
      assertEquals("K'N\"/", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "K'N\"/", (CharSequence) "K'N\"/");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", 0);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string1 = StringUtils.unwrap("", "K'N\"/");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test776()  throws Throwable  {
      char[] charArray0 = new char[1];
      charArray0[0] = 'X';
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {'X'}, charArray0);
      assertEquals(1, charArray0.length);
      assertNotNull(string0);
      assertEquals("X", string0);
      
      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "X", (CharSequence) "X");
      assertNotNull(charSequence0);
      assertTrue(charSequence0.equals((Object)string0));
      assertEquals("X", charSequence0);
      
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "X";
      // Undeclared exception!
      try { 
        StringUtils.join(objectArray0, "X", 53, 2219);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 53
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test777()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("', is neither of type Map.Entry nor an Array", (String) null, "m");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      String string1 = StringUtils.replacePattern("', is neither of type Map.Entry nor an Array", "2", "m");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      
      String string2 = StringUtils.right("', is neither of type Map.Entry nor an Array", (-1047));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "v)zE,>=4_OoF?Nko";
      charSequenceArray0[3] = (CharSequence) "m";
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("', is neither of type Map.Entry nor an Array");
      assertEquals(22, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.substringBefore("", (-730));
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.replace("fLhNt! hp", " vs ", "', is neither of type Map.Entry nor an Array", (-2243));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals("fLhNt! hp", string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "fLhNt! hp", (-1047));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(22, stringArray0.length);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertEquals("", string5);
      
      String string6 = StringUtils.substringBeforeLast("p{InCombiningDiacriticalMarks}+", "b6ObTP+9lmhn");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertEquals("p{InCombiningDiacriticalMarks}+", string6);
      
      int int1 = StringUtils.lastOrdinalIndexOf(charSequenceArray0[3], "p{InCombiningDiacriticalMarks}+", (-730));
      assertEquals(5, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test778()  throws Throwable  {
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.chomp("Search and Replace array lengths don't match: ");
      assertNotNull(string0);
      assertEquals("Search and Replace array lengths don't match: ", string0);
      
      String string1 = StringUtils.join((double[]) null, 'y', 2053, 23);
      assertNull(string1);
      
      String string2 = StringUtils.join((Object[]) stringArray0, 'p');
      assertEquals(188, stringArray0.length);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("aapabpaepafpakpampanparpaspavpaypazpbapbepbgpbhpbipbmpbnpbopbrpbspcapcepchpcopcrpcspcupcvpcypdapdepdvpdzpeepelpenpeopespetpeupfapffpfipfjpfopfrpfypgapgdpglpgnpgupgvphaphephiphophrphtphuphyphzpiapidpiepigpiipikpinpiopispitpiupiwpjapjipjvpkapkgpkipkjpkkpklpkmpknpkopkrpkspkupkvpkwpkyplaplbplgpliplnplopltpluplvpmgpmhpmipmkpmlpmnpmopmrpmspmtpmypnapnbpndpnepngpnlpnnpnopnrpnvpnypocpojpomporposppappipplppspptpquprmprnpropruprwpsapscpsdpsepsgpsipskpslpsmpsnpsopsqpsrpsspstpsupsvpswptapteptgpthptiptkptlptnptoptrptspttptwptypugpukpurpuzpvepvipvopwapwopxhpyipyopzapzhpzu", string2);
      
      StringUtils.mid("aapabpaepafpakpampanparpaspavpaypazpbapbepbgpbhpbipbmpbnpbopbrpbspcapcepchpcopcrpcspcupcvpcypdapdepdvpdzpeepelpenpeopespetpeupfapffpfipfjpfopfrpfypgapgdpglpgnpgupgvphaphephiphophrphtphuphyphzpiapidpiepigpiipikpinpiopispitpiupiwpjapjipjvpkapkgpkipkjpkkpklpkmpknpkopkrpkspkupkvpkwpkyplaplbplgpliplnplopltpluplvpmgpmhpmipmkpmlpmnpmopmrpmspmtpmypnapnbpndpnepngpnlpnnpnopnrpnvpnypocpojpomporposppappipplppspptpquprmprnpropruprwpsapscpsdpsepsgpsipskpslpsmpsnpsopsqpsrpsspstpsupsvpswptapteptgpthptiptkptlptnptoptrptspttptwptypugpukpurpuzpvepvipvopwapwopxhpyipyopzapzhpzu", 2053, 23);
      int int0 = new Integer(2053);
      StringUtils.substringBeforeLast("negative~`vxGOhcNnkz6q'nT ", "Mv ");
      StringUtils.lastIndexOfAny("Search and Replace array lengths don't match: ", stringArray0);
      StringUtils.getCommonPrefix(stringArray0);
  }

  @Test(timeout = 4000)
  public void test779()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      String string0 = StringUtils.join(byteArray0, '=', (int) (byte)0, (int) (byte)0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.compareIgnoreCase("", "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.trim("");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int1 = new Integer((-1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.split(" ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.stripAccents("Threshold must not be negativez*qR0fkO");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Threshold must not be negativez*qR0fkO", string2);
      
      int int2 = StringUtils.countMatches((CharSequence) "", (CharSequence) "*c'M");
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      String string3 = StringUtils.stripAccents("*c'M");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("*c'M", string3);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("\n", (-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test780()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category1));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category1);
      assertEquals(1, enumSet1.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category1));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertTrue(enumSet0.equals((Object)enumSet1));
      
      String string0 = StringUtils.join(iterator0, 'Y');
      assertEquals(1, enumSet0.size());
      assertSame(locale_Category0, locale_Category1);
      assertSame(locale_Category1, locale_Category0);
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(string0);
      assertTrue(enumSet0.contains(locale_Category1));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertEquals("FORMAT", string0);
      
      int[] intArray0 = new int[8];
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[2] = (CharSequence) "FORMAT";
      String string1 = StringUtils.prependIfMissingIgnoreCase("FORMAT", charSequenceArray0[1], charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("FORMAT", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "FORMAT", charSequenceArray0[2]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(1, int0);
      
      String string2 = StringUtils.truncate("FORMAT", 1);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("F", string2);
      
      boolean boolean0 = StringUtils.isEmpty(charSequenceArray0[2]);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test781()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      double[] doubleArray0 = new double[4];
      String string1 = StringUtils.join(doubleArray0, ',', 1695, 0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test782()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      Spliterator<Locale.Category> spliterator0 = enumSet0.spliterator();
      assertEquals(1, enumSet0.size());
      assertNotNull(spliterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      EnumSet<Locale.Category> enumSet1 = EnumSet.of(locale_Category0, locale_Category0);
      assertEquals(1, enumSet1.size());
      assertNotSame(enumSet1, enumSet0);
      assertNotNull(enumSet1);
      assertTrue(enumSet1.contains(locale_Category0));
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      assertEquals(1, enumSet0.size());
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(iterator0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      
      String string0 = StringUtils.join(iterator0, 'Y');
      assertEquals(1, enumSet0.size());
      assertNotSame(enumSet0, enumSet1);
      assertNotNull(string0);
      assertTrue(enumSet0.contains(locale_Category0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertEquals("FORMAT", string0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) 'Y';
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string1 = StringUtils.prependIfMissingIgnoreCase("FORMAT", charSequenceArray0[1], charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("FORMAT", string1);
      
      int int0 = StringUtils.countMatches((CharSequence) "FORMAT", charSequenceArray0[2]);
      assertEquals(7, charSequenceArray0.length);
      assertEquals(0, int0);
      
      String string2 = StringUtils.truncate("FORMAT", 0);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      boolean boolean0 = StringUtils.isEmpty(charSequenceArray0[2]);
      assertEquals(7, charSequenceArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test783()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbrevTation width is %Q", '.');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '.';
      intArray0[1] = (int) '.';
      intArray0[6] = (int) '.';
      String string0 = StringUtils.prependIfMissingIgnoreCase("Minimum abbrevTation width is %Q", "Minimum abbrevTation width is %Q", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals("Minimum abbrevTation width is %Q", string0);
      
      boolean boolean0 = StringUtils.containsAny((CharSequence) "Minimum abbrevTation width is %Q", (CharSequence[]) stringArray0);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
      
      String string1 = StringUtils.removeAll("maxWith cannot be negative", "v=lMewCTb0z$S9&Y");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("maxWith cannot be negative", string1);
      
      int int0 = StringUtils.lastIndexOfAny("maxWith cannot be negative", stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test784()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      String[] stringArray0 = StringUtils.split(" ");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      boolean boolean0 = StringUtils.containsWhitespace("\r");
      assertTrue(boolean0);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(" ", "");
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "\n");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test785()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("i$`i");
      assertNotNull(string0);
      assertEquals("i$`i", string0);
      
      String string1 = StringUtils.unwrap("i$`i", "hF-u");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("i$`i", string1);
      
      String string2 = StringUtils.truncate(".VNQ0T6P>`x", 23, 23);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      
      String string3 = StringUtils.uncapitalize("i$`i");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertEquals("i$`i", string3);
  }

  @Test(timeout = 4000)
  public void test786()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0);
      assertEquals(1, enumSet0.size());
      assertNotNull(enumSet0);
      assertTrue(enumSet0.contains(locale_Category0));
      
      String string0 = StringUtils.trim("[b/!%,8TIPNyW");
      assertNotNull(string0);
      assertEquals("[b/!%,8TIPNyW", string0);
      
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(locale_Category0));
      
      ArrayDeque<Locale.Category> arrayDeque1 = arrayDeque0.clone();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(0, arrayDeque1.size());
      assertTrue(arrayDeque1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque0.contains(locale_Category0));
      assertFalse(arrayDeque1.contains(locale_Category0));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      String string1 = StringUtils.join((Iterable<?>) enumSet0, "org.apache.commons.lang3.exception.CloneFailedException");
      assertEquals(1, enumSet0.size());
      assertNotNull(string1);
      assertTrue(enumSet0.contains(locale_Category0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("DISPLAY", string1);
      
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      boolean boolean0 = arrayDeque1.add(locale_Category1);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(arrayDeque1.isEmpty());
      assertEquals(1, arrayDeque1.size());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotSame(locale_Category1, locale_Category0);
      assertFalse(arrayDeque0.contains(locale_Category1));
      assertTrue(arrayDeque1.contains(locale_Category1));
      assertFalse(arrayDeque1.contains(locale_Category0));
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(locale_Category1.equals((Object)locale_Category0));
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase((CharSequence) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.unwrap("Po>4V_\"nDVl;j6LF", 'P');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Po>4V_\"nDVl;j6LF", string2);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "[b/!%,8TIPNyW", (CharSequence) "org.apache.commons.lang3.exception.CloneFailedException");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string3 = StringUtils.leftPad("[b/!%,8TIPNyW", (-1), '*');
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals("[b/!%,8TIPNyW", string3);
  }

  @Test(timeout = 4000)
  public void test787()  throws Throwable  {
      String string0 = StringUtils.rightPad("`]:qMn y$yI_}U=6!7tm']w9a>M`G;", (-951));
      assertNotNull(string0);
      assertEquals("`]:qMn y$yI_}U=6!7tm']w9a>M`G;", string0);
      
      String string1 = StringUtils.removeEnd("Strings must not be nullStrings must not be null", "org.apache.commons.lang3.exception.CloneFailedException");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Strings must not be nullStrings must not be null", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("Strings must not be nullStrings must not be null", "`]:qMn y$yI_}U=6!7tm']w9a>M`G;");
      assertEquals(0.32, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test788()  throws Throwable  {
      String string0 = StringUtils.normalizeSpace("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean0);
      
      Locale locale0 = new Locale("*,^I", "");
      assertEquals("*,^i", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("*,^i", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String string1 = StringUtils.lowerCase("", locale0);
      assertEquals("*,^i", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("*,^i", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      boolean boolean1 = StringUtils.containsWhitespace(charSequenceArray0[2]);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(""));
      
      NavigableSet<Object> navigableSet0 = treeSet0.descendingSet();
      assertTrue(navigableSet0.isEmpty());
      assertEquals(0, navigableSet0.size());
      assertNotNull(navigableSet0);
      assertFalse(treeSet0.contains(""));
      assertFalse(navigableSet0.contains(""));
      
      boolean boolean2 = treeSet0.add("");
      assertTrue(treeSet0.contains(""));
      assertFalse(treeSet0.contains("*,^I"));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      NavigableSet<Object> navigableSet1 = treeSet0.descendingSet();
      assertFalse(navigableSet1.isEmpty());
      assertEquals(1, navigableSet1.size());
      assertNotSame(navigableSet1, navigableSet0);
      assertNotNull(navigableSet1);
      assertTrue(treeSet0.contains(""));
      assertFalse(treeSet0.contains("*,^I"));
      assertFalse(navigableSet1.contains("*,^I"));
      assertTrue(navigableSet1.contains(""));
      assertTrue(navigableSet1.equals((Object)navigableSet0));
      
      String string2 = StringUtils.join((Iterable<?>) navigableSet0, '!');
      assertFalse(navigableSet0.isEmpty());
      assertEquals(1, navigableSet0.size());
      assertNotSame(navigableSet0, navigableSet1);
      assertNotNull(string2);
      assertTrue(treeSet0.contains(""));
      assertFalse(treeSet0.contains("*,^I"));
      assertFalse(navigableSet0.contains("*,^I"));
      assertTrue(navigableSet0.contains(""));
      assertTrue(navigableSet0.equals((Object)navigableSet1));
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      boolean boolean3 = StringUtils.isEmpty(charSequenceArray0[1]);
      assertEquals(3, charSequenceArray0.length);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      String string3 = StringUtils.trimToNull("");
      assertNull(string3);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, "", 32, 2);
      assertEquals(3, charSequenceArray0.length);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.unwrap((String) null, "");
      assertNull(string5);
      
      String string6 = StringUtils.right("Comparator should not be null.", 0);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string2));
      assertEquals("", string6);
      
      boolean boolean4 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertEquals(3, charSequenceArray0.length);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test789()  throws Throwable  {
      String string0 = StringUtils.replaceChars("Invalid locale format: ", '!', '!');
      assertNotNull(string0);
      assertEquals("Invalid locale format: ", string0);
      
      String string1 = StringUtils.stripEnd("Cannot store ", "VzPQwbwAq");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("Cannot store ", string1);
      
      ArrayList<Object> arrayList0 = new ArrayList<Object>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("Cannot store "));
      
      Iterator<Object> iterator0 = arrayList0.iterator();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(iterator0);
      assertFalse(arrayList0.contains("Cannot store "));
      
      boolean boolean0 = arrayList0.add((Object) "Invalid locale format: ");
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains("Invalid locale format: "));
      assertFalse(arrayList0.contains("Cannot store "));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        StringUtils.join(iterator0, "VzPQwbwAq");
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  @Test(timeout = 4000)
  public void test790()  throws Throwable  {
      String string0 = StringUtils.stripToNull("3\"6");
      assertNotNull(string0);
      assertEquals("3\"6", string0);
      
      String string1 = StringUtils.rightPad("3\"6", (-600));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("3\"6", string1);
      
      double double0 = StringUtils.getJaroWinklerDistance("3\"6", "3\"6");
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test791()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[6] = (int) '#';
      intArray0[3] = (int) '#';
      String string0 = StringUtils.truncate("eu#)Qh", 0, 1419);
      assertNotNull(string0);
      assertEquals("eu#)Qh", string0);
      
      String string1 = "\\u";
      String string2 = StringUtils.stripEnd("3:s70m", string1);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("3:s70m", string2);
      
      char[] charArray0 = new char[7];
      charArray0[0] = '#';
      charArray0[1] = 'x';
      charArray0[2] = 'S';
      charArray0[3] = 'S';
      charArray0[4] = '#';
      charArray0[5] = '#';
      charArray0[6] = '#';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "eu#)Qh", charArray0);
      assertArrayEquals(new char[] {'#', 'x', 'S', 'S', '#', '#', '#'}, charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compare(string1, "3:s70m", true);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      assertEquals(41, int1);
      
      String string3 = StringUtils.rightPad("Cloneable type ", 41, "*c'M");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("Cloneable type *c'M*c'M*c'M*c'M*c'M*", string3);
  }

  @Test(timeout = 4000)
  public void test792()  throws Throwable  {
      String string0 = StringUtils.stripToEmpty("_");
      assertNotNull(string0);
      assertEquals("_", string0);
      
      String string1 = StringUtils.chop((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.chomp((String) null, (String) null);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      String string3 = StringUtils.substringBeforeLast("Index: ", (String) null);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals("Index: ", string3);
      
      charSequenceArray0[2] = (CharSequence) "Index: ";
      charSequenceArray0[3] = (CharSequence) null;
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = (CharSequence) "_";
      boolean boolean0 = StringUtils.isAllBlank(charSequenceArray0);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String string4 = StringUtils.join((Object[]) charSequenceArray0, 'l');
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertEquals("llIndex: llll_", string4);
      
      boolean boolean1 = StringUtils.containsNone(charSequenceArray0[4], (String) null);
      assertEquals(7, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string5 = StringUtils.join((Object[]) charSequenceArray0, 'e', 13, 13);
      assertEquals(7, charSequenceArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test793()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("', is neither of type Map.Entry nor an Array", (String) null, "m");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      String string1 = StringUtils.replacePattern("', is neither of type Map.Entry nor an Array", "2", "m");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[1] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[2] = (CharSequence) "v)zE,>=4_OoF?Nko";
      charSequenceArray0[3] = (CharSequence) "m";
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("', is neither of type Map.Entry nor an Array");
      assertEquals(22, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.substringBefore("', is neither of type Map.Entry nor an Array", (-730));
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("', is neither of type Map.Entry nor an Array", string2);
      
      String string3 = StringUtils.replace("fLhNt! hp", " vs ", "', is neither of type Map.Entry nor an Array", (-2243));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("fLhNt! hp", string3);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) "fLhNt! hp", (-1047));
      assertEquals((-1), int0);
      
      String string4 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(22, stringArray0.length);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertEquals("", string4);
      
      String string5 = StringUtils.substringBeforeLast("p{InCombiningDiacriticalMarks}+", "b6ObTP+9lmhn");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertEquals("p{InCombiningDiacriticalMarks}+", string5);
      
      int int1 = StringUtils.lastOrdinalIndexOf(charSequenceArray0[3], "p{InCombiningDiacriticalMarks}+", (-730));
      assertEquals(5, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ')';
      charArray0[1] = '$';
      boolean boolean1 = StringUtils.containsAny((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0);
      assertArrayEquals(new char[] {')', '$'}, charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparatorPreserveAllTokens("fLhNt! hp", "", (-1047));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(2, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      int int2 = StringUtils.lastIndexOf((CharSequence) "', is neither of type Map.Entry nor an Array", (-375), (-1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
  }

  @Test(timeout = 4000)
  public void test794()  throws Throwable  {
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[1] = object1;
      Object object2 = new Object();
      assertNotNull(object2);
      assertFalse(object2.equals((Object)object1));
      assertFalse(object2.equals((Object)object0));
      
      objectArray0[2] = object2;
      Object object3 = new Object();
      assertNotNull(object3);
      assertFalse(object3.equals((Object)object1));
      assertFalse(object3.equals((Object)object0));
      assertFalse(object3.equals((Object)object2));
      
      objectArray0[3] = object3;
      Object object4 = new Object();
      assertNotNull(object4);
      assertFalse(object4.equals((Object)object1));
      assertFalse(object4.equals((Object)object0));
      assertFalse(object4.equals((Object)object3));
      assertFalse(object4.equals((Object)object2));
      
      objectArray0[4] = object4;
      Object object5 = new Object();
      assertNotNull(object5);
      assertFalse(object5.equals((Object)object3));
      assertFalse(object5.equals((Object)object4));
      assertFalse(object5.equals((Object)object2));
      assertFalse(object5.equals((Object)object1));
      assertFalse(object5.equals((Object)object0));
      
      objectArray0[5] = object5;
      Object object6 = new Object();
      assertNotNull(object6);
      assertFalse(object6.equals((Object)object2));
      assertFalse(object6.equals((Object)object1));
      assertFalse(object6.equals((Object)object0));
      assertFalse(object6.equals((Object)object3));
      assertFalse(object6.equals((Object)object5));
      assertFalse(object6.equals((Object)object4));
      
      objectArray0[6] = object6;
      Object object7 = new Object();
      assertNotNull(object7);
      assertFalse(object7.equals((Object)object4));
      assertFalse(object7.equals((Object)object2));
      assertFalse(object7.equals((Object)object1));
      assertFalse(object7.equals((Object)object0));
      assertFalse(object7.equals((Object)object6));
      assertFalse(object7.equals((Object)object3));
      assertFalse(object7.equals((Object)object5));
      
      String string0 = StringUtils.reverseDelimited((String) null, 'E');
      assertNull(string0);
      
      String string1 = StringUtils.leftPad((String) null, 2190, '8');
      assertNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 2190);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "@:%8", "~`vxGOhcNnkz6q'nT negative");
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      int[] intArray0 = new int[1];
      intArray0[0] = (-4181);
      String string2 = StringUtils.join(intArray0, '\'', 838, (-4181));
      assertArrayEquals(new int[] {(-4181)}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(string2);
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test795()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      Iterator<Integer> iterator0 = stack0.iterator();
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(iterator0);
      
      String string0 = StringUtils.join(iterator0, "The xrray must not be null");
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals(0, stack0.size());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertNotNull(string0);
      assertEquals("", string0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test796()  throws Throwable  {
      String string0 = "!%Nu}]<di2M[^s9B";
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("^'$pTRhO", "!%Nu}]<di2M[^s9B", "^'$pTRhO");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 16
         // !%Nu}]<di2M[^s9B
         //                 ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test797()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", 'i');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceAll("", "", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.trimToEmpty("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 0, 108);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "";
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int1 = StringUtils.ordinalIndexOf(charSequenceArray0[0], "", (-1));
      assertEquals(1, charSequenceArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      boolean boolean1 = StringUtils.startsWithAny("", (CharSequence[]) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = StringUtils.containsNone(charSequenceArray0[0], "");
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string4 = StringUtils.rightPad("", (-1150), "");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertEquals("", string4);
  }

  @Test(timeout = 4000)
  public void test798()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      String string0 = StringUtils.chomp("ARPm)1Np^_WIBy", "ARPm)1Np^_WIBy");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAsciiPrintable("");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.substringAfterLast("", "ARPm)1Np^_WIBy");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test799()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "I3}?&|]FBQ");
      assertNotNull(string0);
      assertEquals("I3}?&|]FBQ", string0);
      
      long[] longArray0 = new long[1];
      longArray0[0] = (-2061L);
      char[] charArray0 = new char[0];
      boolean boolean0 = StringUtils.containsNone((CharSequence) "I3}?&|]FBQ", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test800()  throws Throwable  {
      String string0 = StringUtils.rightPad("=8`4XwRr,HfV\"g2&$", 2043);
      assertNotNull(string0);
      
      double double0 = StringUtils.getJaroWinklerDistance(string0, "=8`4XwRr,HfV\"g2&$");
      assertEquals(0.67, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test801()  throws Throwable  {
      StringUtils stringUtils0 = new StringUtils();
      assertNotNull(stringUtils0);
      assertEquals((-1), StringUtils.INDEX_NOT_FOUND);
      
      int int0 = new Integer((-1));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "*c'M", (CharSequence) "");
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      
      String string0 = StringUtils.defaultString(" ", "");
      assertNotNull(string0);
      assertEquals(" ", string0);
  }

  @Test(timeout = 4000)
  public void test802()  throws Throwable  {
      String string0 = StringUtils.trim(" vpGY&Z");
      assertNotNull(string0);
      assertEquals("vpGY&Z", string0);
      
      ArrayDeque<Locale.Category> arrayDeque0 = new ArrayDeque<Locale.Category>();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertNotNull(arrayDeque0);
      
      ArrayDeque<Locale.Category> arrayDeque1 = arrayDeque0.clone();
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(arrayDeque1);
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      
      String string1 = StringUtils.join((Iterable<?>) arrayDeque1, "=8`4XwRr,HfV\"g2&$");
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque1.isEmpty());
      assertEquals(0, arrayDeque1.size());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertNotNull(string1);
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      boolean boolean0 = arrayDeque1.add(locale_Category0);
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertEquals(1, arrayDeque1.size());
      assertFalse(arrayDeque1.isEmpty());
      assertNotSame(arrayDeque0, arrayDeque1);
      assertNotSame(arrayDeque1, arrayDeque0);
      assertFalse(arrayDeque0.contains(locale_Category0));
      assertTrue(arrayDeque1.contains(locale_Category0));
      assertFalse(arrayDeque0.equals((Object)arrayDeque1));
      assertFalse(arrayDeque1.equals((Object)arrayDeque0));
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAllUpperCase("=8`4XwRr,HfV\"g2&$");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string2 = StringUtils.unwrap("Strings must not be null", 'P');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("Strings must not be null", string2);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "", (CharSequence) "=8`4XwRr,HfV\"g2&$");
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test803()  throws Throwable  {
      String string0 = StringUtils.trim("waA!Faqh");
      assertNotNull(string0);
      assertEquals("waA!Faqh", string0);
  }

  @Test(timeout = 4000)
  public void test804()  throws Throwable  {
      String string0 = StringUtils.defaultString("kT|lbz[BU1Hnwv5", "kT|lbz[BU1Hnwv5");
      assertNotNull(string0);
      assertEquals("kT|lbz[BU1Hnwv5", string0);
      
      // Undeclared exception!
      try { 
        StringUtils.removeFirst("kT|lbz[BU1Hnwv5", "kT|lbz[BU1Hnwv5");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 14
         // kT|lbz[BU1Hnwv5
         //               ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test805()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replace("", "", "GM5z", (-1765));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeFirst("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.trim("Minimum abbreviation width with offset is %d");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals("Minimum abbreviation width with offset is %d", string3);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "Minimum abbreviation width with offset is %d", (-1082));
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "", ", '");
      assertTrue(boolean0);
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 0, 0);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      String string4 = StringUtils.replaceAll("GM5z", "", "");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("GM5z", string4);
      
      String string5 = StringUtils.chomp("Cannot store ", "Minimum abbreviation width with offset is %d");
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("Cannot store ", string5);
      
      String string6 = StringUtils.trimToNull("GM5z");
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string4));
      assertEquals("GM5z", string6);
      
      String string7 = StringUtils.rightPad("", (-2254));
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string5));
      assertEquals("", string7);
      
      String string8 = StringUtils.truncate("", 5444, 0);
      assertNotNull(string8);
      assertTrue(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertEquals("", string8);
      
      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();
      assertEquals(0, arrayDeque0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertNotNull(arrayDeque0);
      assertFalse(arrayDeque0.contains(""));
      
      boolean boolean1 = arrayDeque0.add("");
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertFalse(arrayDeque0.contains(0));
      assertTrue(arrayDeque0.contains(""));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string9 = StringUtils.join((Iterable<?>) arrayDeque0, "");
      assertEquals(1, arrayDeque0.size());
      assertFalse(arrayDeque0.isEmpty());
      assertNotNull(string9);
      assertFalse(arrayDeque0.contains(0));
      assertTrue(arrayDeque0.contains(""));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string7));
      assertTrue(string9.equals((Object)string8));
      assertTrue(string9.equals((Object)string2));
      assertTrue(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertEquals("", string9);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      // Undeclared exception!
      try { 
        StringUtils.toString(byteArray0, "Object varargs must not be null");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Object varargs must not be null
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test806()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[10];
      String string0 = StringUtils.stripEnd("ARPm)1Np^_WIBy", "ARPm)1Np^_WIBy");
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumeric("ARPm)1Np^_WIBy");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfterLast("", "ARPm)1Np^_WIBy");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test807()  throws Throwable  {
      String string0 = StringUtils.defaultString("i$`i", "i$`i");
      assertNotNull(string0);
      assertEquals("i$`i", string0);
      
      String[] stringArray0 = StringUtils.substringsBetween("i$`i", "i$`i", "i$`i");
      assertNull(stringArray0);
      
      String string1 = StringUtils.join((Iterator<?>) null, '>');
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test808()  throws Throwable  {
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertNotNull(vector0);
      
      String[] stringArray1 = StringUtils.stripAll(stringArray0);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(250, stringArray0.length);
      assertEquals(250, stringArray1.length);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test809()  throws Throwable  {
      boolean boolean0 = StringUtils.startsWith("ZF]s0VW[H$Q\"i_b@e(Q", "ZF]s0VW[H$Q\"i_b@e(Q");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test810()  throws Throwable  {
      String string0 = StringUtils.defaultIfEmpty("", "I3}?&|]FBQ");
      assertNotNull(string0);
      assertEquals("I3}?&|]FBQ", string0);
      
      String string1 = StringUtils.substringAfterLast("z*qR0fkO", 85);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test811()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, 'r');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart("Locale must not be null", (String) null);
      assertNotNull(string1);
      assertEquals("Locale must not be null", string1);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'r';
      charArray0[1] = 'r';
      charArray0[2] = 'x';
      charArray0[3] = 'S';
      charArray0[4] = 'x';
      charArray0[5] = 'r';
      charArray0[6] = 'x';
      charArray0[7] = 'r';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "Locale must not be null", charArray0);
      assertArrayEquals(new char[] {'r', 'r', 'x', 'S', 'x', 'r', 'x', 'r'}, charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(0, int0);
      
      int int1 = StringUtils.compare("z*qR0fkO", "kz6q'nT ", false);
      assertFalse(int1 == int0);
      assertEquals(15, int1);
  }

  @Test(timeout = 4000)
  public void test812()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, 'r');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart((String) null, "_Jp*34vDZVuZ[");
      assertNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("").when(supplier0).get();
      String string2 = StringUtils.getIfBlank((String) null, supplier0);
      assertNotNull(string2);
      assertEquals("", string2);
      
      String string3 = StringUtils.SPACE;
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertEquals(" ", string3);
      
      boolean boolean1 = StringUtils.isAllLowerCase(" ");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test813()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(21);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(21, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(21, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.length());
      assertEquals(21, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      IntStream intStream0 = charBuffer0.codePoints();
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(21, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(21, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.length());
      assertEquals(21, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(intStream0);
      
      String string0 = StringUtils.abbreviate((String) null, (String) null, (-4414), 21);
      assertNull(string0);
      
      CharBuffer charBuffer1 = charBuffer0.asReadOnlyBuffer();
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(21, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(21, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.length());
      assertEquals(21, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer1.hasRemaining());
      assertEquals(21, charBuffer1.length());
      assertEquals(21, charBuffer1.capacity());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(21, charBuffer1.limit());
      assertEquals(21, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertFalse(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.position());
      assertNotNull(charBuffer1);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      
      boolean boolean0 = StringUtils.isMixedCase(charBuffer0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(21, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(21, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.length());
      assertEquals(21, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isNotEmpty(charBuffer0);
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(21, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(21, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(21, charBuffer0.length());
      assertEquals(21, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      String string1 = StringUtils.removeStart((String) null, (String) null);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test814()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.defaultString((String) null);
      assertNotNull(string1);
      assertEquals("", string1);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      boolean boolean0 = StringUtils.isAnyBlank(charSequenceArray0);
      assertEquals(1, charSequenceArray0.length);
      assertTrue(boolean0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) null, (-1822), (-1822));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("", (String) null, true);
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      TreeSet<Object> treeSet0 = new TreeSet<Object>();
      assertNotNull(treeSet0);
      assertFalse(treeSet0.contains(true));
      
      // Undeclared exception!
      try { 
        treeSet0.add((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test815()  throws Throwable  {
      int int0 = StringUtils.indexOf((CharSequence) null, 11);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test816()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      String string0 = StringUtils.prependIfMissing("", "", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.removeFirst("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.trim("Minimum abbreviation width with offset is %d");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("Minimum abbreviation width with offset is %d", string2);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "Minimum abbreviation width with offset is %d", (-1082));
      assertEquals((-1), int0);
      
      String[] stringArray0 = StringUtils.substringsBetween("WAu<BS6 1m2TT", "e5F[5XXx/XYmYT;m&s(,", "e5F[5XXx/XYmYT;m&s(,");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test817()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L";
      stringArray0[1] = "L";
      stringArray0[2] = "L";
      String string0 = StringUtils.replaceOnce("L", "L", "p{InCombiningDiacriticalMarks}+");
      assertNotNull(string0);
      assertEquals("p{InCombiningDiacriticalMarks}+", string0);
      
      String string1 = StringUtils.join((short[]) null, '(');
      assertNull(string1);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(4, stringArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test818()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test819()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Ty,HVnggok}20]", "Ty,HVnggok}20]");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBetween("", "Ty,HVnggok}20]");
      assertNull(string1);
      
      int int0 = StringUtils.INDEX_NOT_FOUND;
      assertEquals((-1), int0);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "";
      String string2 = StringUtils.LF;
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertEquals("\n", string2);
      
      boolean boolean0 = StringUtils.isNumeric("Locale mustnot be nll");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "", (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test820()  throws Throwable  {
      String string0 = StringUtils.join((short[]) null, 'r');
      assertNull(string0);
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) null, (String) null);
      assertFalse(boolean0);
      
      String string1 = StringUtils.removeStart((String) null, "_Jp*34vDZVuZ[");
      assertNull(string1);
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(supplier0).get();
      String string2 = StringUtils.getIfBlank((String) null, supplier0);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) null;
      charSequenceArray0[2] = (CharSequence) null;
      charSequenceArray0[3] = (CharSequence) "_Jp*34vDZVuZ[";
      charSequenceArray0[4] = (CharSequence) null;
      charSequenceArray0[5] = (CharSequence) null;
      charSequenceArray0[6] = null;
      charSequenceArray0[7] = (CharSequence) "_Jp*34vDZVuZ[";
      String string3 = StringUtils.prependIfMissing("_Jp*34vDZVuZ[", (CharSequence) null, charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string3);
      assertEquals("_Jp*34vDZVuZ[", string3);
  }

  @Test(timeout = 4000)
  public void test821()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "sA]J{p&`";
      stringArray0[1] = "e&*";
      stringArray0[2] = "yA*V|V0 ZJfJ+UL9D5";
      stringArray0[3] = "e&*";
      stringArray0[4] = "e&*";
      stringArray0[5] = "e&*";
      stringArray0[6] = "e&*";
      stringArray0[7] = "e&*";
      String string0 = StringUtils.replaceEach("e&*", stringArray0, stringArray0);
      assertEquals(8, stringArray0.length);
      assertNotNull(string0);
      assertEquals("e&*", string0);
  }

  @Test(timeout = 4000)
  public void test822()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "L";
      stringArray0[1] = "L";
      stringArray0[2] = "L";
      stringArray0[3] = "L";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("L", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test823()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[2] = "L";
      stringArray0[3] = "L";
      // Undeclared exception!
      try { 
        StringUtils.replaceEachRepeatedly("L", stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Aborting to protect against StackOverflowError - output of one loop is the input of another
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test824()  throws Throwable  {
      String string0 = StringUtils.removeEnd("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "");
      assertEquals((-1), int0);
      
      char[] charArray0 = new char[0];
      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, charArray0.length);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test825()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertNotNull(string0);
      assertEquals("", string0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = ']';
      charArray0[1] = 'x';
      int int0 = StringUtils.indexOfAnyBut((CharSequence) "", charArray0);
      assertArrayEquals(new char[] {']', 'x'}, charArray0);
      assertEquals(2, charArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test826()  throws Throwable  {
      String string0 = StringUtils.mid("$l3|a]yPE]5/mQB", 1114111, 14);
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test827()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("fGXDn;a/");
      assertNotNull(string0);
      assertEquals("fGXDn;a/", string0);
      
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      String string1 = StringUtils.join((List<?>) arrayList0, "fGXDn;a/", 664, 664);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test828()  throws Throwable  {
      String string0 = StringUtils.uncapitalize("'~-");
      assertNotNull(string0);
      assertEquals("'~-", string0);
      
      String string1 = StringUtils.mid("$l3|a]yPE]5/mQB", 1082, 14);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
  }

  @Test(timeout = 4000)
  public void test829()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("");
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string0 = StringUtils.stripStart("", "");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test830()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, "", "");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test831()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.rightPad("", 4, "?@;uN");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("?@;u", string1);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      assertFalse(vector0.contains("WKU}'{b&)yv "));
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 4;
      String string2 = StringUtils.substringAfterLast("f'|5-n", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test832()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbreviation width is %d", '#');
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) '#';
      intArray0[2] = (int) '#';
      intArray0[3] = (int) '#';
      intArray0[4] = (int) '#';
      intArray0[5] = (int) '#';
      intArray0[6] = (int) '#';
      intArray0[7] = (int) '#';
      String string0 = StringUtils.join(intArray0, '#', 0, 1);
      assertArrayEquals(new int[] {35, 35, 35, 35, 35, 35, 35, 35}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(string0);
      assertEquals("35", string0);
      
      String string1 = StringUtils.abbreviateMiddle("', is neither of type Map.Entry nor an Array", "}`v5X~g", (-5411));
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
  }

  @Test(timeout = 4000)
  public void test833()  throws Throwable  {
      Vector<Locale.Category> vector0 = new Vector<Locale.Category>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(vector0);
      
      String string0 = StringUtils.join((List<?>) vector0, 'd', 0, (-1626));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.substringAfter("M:r|M6uNg-Vsi?@`-", "M:r|M6uNg-Vsi?@`-");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "", 1686, 1686);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test834()  throws Throwable  {
      int int0 = StringUtils.compareIgnoreCase("#", "g7kf'd-C*e)(YZ", true);
      assertEquals((-68), int0);
      
      String string0 = StringUtils.repeat('M', (-68));
      assertNotNull(string0);
      assertEquals("", string0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      assertFalse(linkedList0.contains("#"));
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) linkedList0, 'M', (-400), (-68));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -400
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test835()  throws Throwable  {
      String string0 = StringUtils.replace(" has no clone method", "Array and element cannot both be null", " vs ", (-629));
      assertNotNull(string0);
      assertEquals(" has no clone method", string0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) " has no clone method", (CharSequence) "fLhNt! hp", 119);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.getCommonPrefix((String[]) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.substringBeforeLast(" vs ", "");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" vs ", string2);
      
      int int1 = StringUtils.lastOrdinalIndexOf(" has no clone method", " vs ", 3);
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test836()  throws Throwable  {
      String string0 = StringUtils.substringBeforeLast("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.defaultIfEmpty("", "");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceIgnoreCase("$Cb\"k}J", "9yiggd+0", "The Array must not be null");
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("$Cb\"k}J", string2);
      
      String string3 = StringUtils.swapCase("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
  }

  @Test(timeout = 4000)
  public void test837()  throws Throwable  {
      String string0 = StringUtils.truncate("", 3194);
      assertNotNull(string0);
      assertEquals("", string0);
      
      double double0 = StringUtils.getJaroWinklerDistance("!<}ZZ8U%1OvXka}/x", "");
      assertEquals(0.0, double0, 0.01);
      
      String string1 = StringUtils.abbreviateMiddle("", "Pjbv?q-}(?3", (-1060));
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "!<}ZZ8U%1OvXka}/x", (CharSequence) "", 108);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test838()  throws Throwable  {
      Stack<CharBuffer> stack0 = new Stack<CharBuffer>();
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(stack0);
      
      String string0 = StringUtils.join((List<?>) stack0, ')', 8192, 8192);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      assertNotNull(string0);
      assertEquals("", string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("");
      assertTrue(boolean0);
      
      String[] stringArray0 = StringUtils.split(";7Y$;SR]s0yo!D/", "");
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test839()  throws Throwable  {
      String[] stringArray0 = new String[4];
      String string0 = StringUtils.substringBeforeLast("hF-u", stringArray0[1]);
      assertEquals(4, stringArray0.length);
      assertNotNull(string0);
      assertEquals("hF-u", string0);
      
      int int0 = StringUtils.compareIgnoreCase("]+9V7A=F*q^LKD", "o5omparftzr");
      assertEquals((-18), int0);
  }

  @Test(timeout = 4000)
  public void test840()  throws Throwable  {
      String string0 = "WKU}'{b&)yv ";
      String string1 = StringUtils.substringBeforeLast("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      int int0 = (-880);
      String string2 = StringUtils.abbreviateMiddle("", "", (-880));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.rightPad("", 4, "?@;uN");
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals("?@;u", string3);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      assertFalse(vector0.contains(""));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vector0.add((Object) null);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.contains(""));
      assertTrue(boolean0);
      
      boolean boolean1 = vector0.removeElement(object0);
      assertEquals(1, vector0.size());
      assertEquals(10, vector0.capacity());
      assertFalse(vector0.isEmpty());
      assertEquals("[null]", vector0.toString());
      assertFalse(vector0.contains(""));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        StringUtils.join((List<?>) vector0, '9', 0, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 8
         //
         verifyException("java.util.SubList", e);
      }
  }

  @Test(timeout = 4000)
  public void test841()  throws Throwable  {
      long[] longArray0 = new long[3];
      longArray0[0] = (long) (-1217);
      longArray0[1] = (long) (-1217);
      longArray0[2] = (long) (-1217);
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, 't', (-1217), 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1217
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test842()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("', is neither of type Map.Entry nor an Array", (String) null, "m");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      String string1 = StringUtils.replacePattern("', is neither of type Map.Entry nor an Array", "2", "m");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("', is neither of type Map.Entry nor an Array", string1);
      
      String string2 = StringUtils.abbreviateMiddle("v)zE,>=4_OoF?Nko", (String) null, (-730));
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("v)zE,>=4_OoF?Nko", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "', is neither of type Map.Entry nor an Array";
      charSequenceArray0[1] = (CharSequence) "v)zE,>=4_OoF?Nko";
      charSequenceArray0[2] = (CharSequence) "v)zE,>=4_OoF?Nko";
      charSequenceArray0[3] = (CharSequence) "m";
      charSequenceArray0[4] = (CharSequence) null;
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertEquals(5, charSequenceArray0.length);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitByCharacterType("', is neither of type Map.Entry nor an Array");
      assertEquals(22, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string3 = StringUtils.substringBefore("v)zE,>=4_OoF?Nko", (-730));
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals("v)zE,>=4_OoF?Nko", string3);
      
      String string4 = StringUtils.replace("fLhNt! hp", " vs ", "', is neither of type Map.Entry nor an Array", (-2268));
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertEquals("fLhNt! hp", string4);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "v)zE,>=4_OoF?Nko", (CharSequence) "fLhNt! hp", (-1047));
      assertEquals((-1), int0);
      
      String string5 = StringUtils.getCommonPrefix(stringArray0);
      assertEquals(22, stringArray0.length);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertEquals("", string5);
  }

  @Test(timeout = 4000)
  public void test843()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("', is neither of type Map.Entry nor an Array", (String) null, "m");
      assertNotNull(string0);
      assertEquals("', is neither of type Map.Entry nor an Array", string0);
      
      String string1 = StringUtils.trimToNull("m");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("m", string1);
      
      String string2 = StringUtils.join((short[]) null, '%');
      assertNull(string2);
      
      String string3 = StringUtils.substring("', is neither of type Map.Entry nor an Array", (-1176));
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("', is neither of type Map.Entry nor an Array", string3);
      
      boolean boolean0 = StringUtils.containsWhitespace("m");
      assertFalse(boolean0);
      
      String string4 = StringUtils.wrapIfMissing("~`vxGOhcNnkz6q'nT ", "negative");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertEquals("negative~`vxGOhcNnkz6q'nT negative", string4);
  }

  @Test(timeout = 4000)
  public void test844()  throws Throwable  {
      String string0 = "qv;u&2/Wy\\bN5|^~";
      int int0 = (-405);
      String string1 = StringUtils.rightPad("qv;u&2/Wy\bN5|^~", (-405), "qv;u&2/Wy\bN5|^~");
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("qv;u&2/Wy\bN5|^~", string1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate("qv;u&2/Wy\bN5|^~", (-405), 921);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // offset cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test845()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "cDL$tp!/G:KU\"}2";
      charSequenceArray0[1] = (CharSequence) "cDL$tp!/G:KU\"}2";
      charSequenceArray0[2] = (CharSequence) "cDL$tp!/G:KU\"}2";
      charSequenceArray0[3] = (CharSequence) "cDL$tp!/G:KU\"}2";
      charSequenceArray0[4] = (CharSequence) "cDL$tp!/G:KU\"}2";
      charSequenceArray0[5] = (CharSequence) "cDL$tp!/G:KU\"}2";
      charSequenceArray0[6] = (CharSequence) "cDL$tp!/G:KU\"}2";
      charSequenceArray0[7] = (CharSequence) "cDL$tp!/G:KU\"}2";
      String string0 = StringUtils.prependIfMissingIgnoreCase("cDL$tp!/G:KU\"}2", "cDL$tp!/G:KU\"}2", charSequenceArray0);
      assertEquals(8, charSequenceArray0.length);
      assertNotNull(string0);
      assertEquals("cDL$tp!/G:KU\"}2", string0);
      
      int int0 = StringUtils.countMatches((CharSequence) "cDL$tp!/G:KU\"}2", charSequenceArray0[1]);
      assertEquals(8, charSequenceArray0.length);
      assertEquals(1, int0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1860.294397206;
      String string1 = StringUtils.join(doubleArray0, '0', 1, 1);
      assertArrayEquals(new double[] {1860.294397206}, doubleArray0, 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.defaultIfEmpty("", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
  }

  @Test(timeout = 4000)
  public void test846()  throws Throwable  {
      String string0 = StringUtils.chomp("");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.remove("", 'i');
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.replaceAll("", "", "");
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      
      String string3 = StringUtils.trimToEmpty("");
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertEquals("", string3);
      
      String string4 = StringUtils.rightPad("", 0, "");
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertEquals("", string4);
      
      String string5 = StringUtils.rotate("", 905);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertTrue(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string2));
      assertEquals("", string5);
      
      String string6 = StringUtils.join((byte[]) null, '{', 905, 8169);
      assertNull(string6);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String string7 = StringUtils.toRootLowerCase("");
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string4));
      assertTrue(string7.equals((Object)string2));
      assertEquals("", string7);
  }

  @Test(timeout = 4000)
  public void test847()  throws Throwable  {
      String string0 = StringUtils.substring("K'N\"/", (-1633), (-1633));
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceChars(" is not in the range '0' - '9'", "s[3R Jx=sXf)G#n", (String) null);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("iotitherage'0'-'9'", string1);
  }

  @Test(timeout = 4000)
  public void test848()  throws Throwable  {
      String string0 = StringUtils.chop("\r");
      assertNotNull(string0);
      assertEquals("", string0);
      
      String string1 = StringUtils.wrap("", "#");
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      
      String string2 = StringUtils.removeEnd((String) null, "tGsGN?`ctgw");
      assertNull(string2);
      
      String string3 = StringUtils.substring("Ju9&>", (-1802), (-1802));
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals("", string3);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) null;
      String string4 = StringUtils.swapCase("Ju9&>");
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals("jU9&>", string4);
      
      String string5 = StringUtils.abbreviate("tGsGN?`ctgw", "", (-1802));
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertEquals("tGsGN?`ctgw", string5);
      
      String string6 = StringUtils.replaceFirst((String) null, "Minimum abbreviation width with offset is %d", "EJ\"iYoV=G$A&");
      assertNull(string6);
  }

  @Test(timeout = 4000)
  public void test849()  throws Throwable  {
      String string0 = StringUtils.abbreviate(", Length: ", 9, 2647);
      assertNotNull(string0);
      assertEquals(", Length: ", string0);
      
      int int0 = StringUtils.indexOf((CharSequence) ", Length: ", 863, 2647);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      charSequenceArray0[0] = (CharSequence) ", Length: ";
      charSequenceArray0[1] = (CharSequence) "";
      String string1 = StringUtils.prependIfMissingIgnoreCase((String) null, ", Length: ", charSequenceArray0);
      assertEquals(2, charSequenceArray0.length);
      assertNull(string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("<NnCYC_.SEyo\"KK9Q<s", ", Length: ", (-11));
      assertEquals(1, stringArray0.length);
      assertNotNull(stringArray0);
      
      String string2 = StringUtils.join((long[]) null, '9', (-11), 76);
      assertNull(string2);
      
      String string3 = StringUtils.joinWith("", stringArray0);
      assertEquals(1, stringArray0.length);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertEquals("<NnCYC_.SEyo\"KK9Q<s", string3);
  }

  @Test(timeout = 4000)
  public void test850()  throws Throwable  {
      String string0 = StringUtils.remove((String) null, (String) null);
      assertNull(string0);
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'd');
      assertEquals(0, int0);
      
      String string1 = StringUtils.join((Locale.Category[]) null);
      assertNull(string1);
      
      String string2 = StringUtils.rightPad((String) null, 793, "object");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test851()  throws Throwable  {
      StringUtils.rightPad("O4Wyv<v", 271, "");
      StringUtils.rotate("O4Wyv<v", 271);
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", 15);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test852()  throws Throwable  {
      String string0 = StringUtils.removeEnd("", "");
      assertEquals("", string0);
      
      String string1 = StringUtils.replaceAll("", (String) null, "");
      assertNotNull(string1);
      
      String string2 = StringUtils.center("i[", (-2333), 'N');
      assertEquals("i[", string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      String string3 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      assertTrue(string3.equals((Object)string1));
      
      charSequenceArray0[0] = (CharSequence) "";
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test853()  throws Throwable  {
      StringUtils.stripToEmpty("i$`i");
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) "i$`i";
      charSequenceArray0[1] = (CharSequence) "i$`i";
      charSequenceArray0[2] = (CharSequence) "i$`i";
      StringUtils.lastIndexOfAny("i$`i", charSequenceArray0);
      StringUtils.trim("");
      StringUtils stringUtils0 = new StringUtils();
      StringUtils.split("Minimum abbreviation width with offset is %d");
      StringUtils.stripAccents("b$wy&:");
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("{I?oAkkuE[2~j[R%olb", 0, (-424));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 4
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test854()  throws Throwable  {
      String string0 = StringUtils.substring("T=}qEy", 16, 16);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test855()  throws Throwable  {
      long[] longArray0 = new long[1];
      longArray0[0] = 0L;
      String string0 = StringUtils.join(longArray0, 'K');
      assertNotNull(string0);
      assertEquals("0", string0);
  }

  @Test(timeout = 4000)
  public void test856()  throws Throwable  {
      StringUtils.rightPad("=8`4XwRr,HfV\"g2&$", 2048);
      StringUtils.wrapIfMissing("=8`4XwRr,HfV\"g2&$", " ");
      StringUtils.stripToEmpty("org.apache.commons.lang3.ArrayUtils");
      StringUtils.strip("Strings must not be null", "org.apache.commons.lang3.ArrayUtils");
      StringUtils.ordinalIndexOf("V", "Strings must not be nu", 389);
      StringUtils.rightPad("negative~`vxGOhcNnkz6q'nT ", 1, "Strings must not be nu");
      StringUtils.rotate(" ", (byte) (-75));
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Strings must not be nu";
      StringUtils.indexOfAny((CharSequence) "g%*]FJ", charSequenceArray0);
      StringUtils.substringAfterLast("3gH=", (int) (byte) (-75));
      StringUtils.replacePattern("org.apache.commons.lang3.ArrayUtils", "V", "Strings must not be nu");
      StringUtils.containsWhitespace(" |s ");
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("3gH=");
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test857()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      hashSet0.iterator();
      StringUtils.indexOf((CharSequence) "...", 8167, 8167);
      String string0 = StringUtils.center("...", 8167, "...");
      boolean boolean0 = StringUtils.isAllLowerCase(string0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test858()  throws Throwable  {
      String string0 = StringUtils.swapCase("A\"`ti~O4ID;PftOm");
      assertEquals("a\"`TI~o4id;pFToM", string0);
  }

  @Test(timeout = 4000)
  public void test859()  throws Throwable  {
      String string0 = StringUtils.removeEnd("WKU}'{b&)yv ", "WKU}'{b&)yv ");
      String string1 = StringUtils.rightPad("", 4, "");
      assertEquals("    ", string1);
      assertNotNull(string1);
      
      Vector<Object> vector0 = new Vector<Object>();
      Object object0 = new Object();
      vector0.add((Object) null);
      StringUtils.join((List<?>) vector0, '9', 0, (-880));
      StringUtils.trimToEmpty("    ");
      StringUtils.getDigits("ra");
      String string2 = StringUtils.replaceIgnoreCase("", "", "qyi", (-880));
      assertTrue(string2.equals((Object)string0));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ldBx[{5Dv{h";
      stringArray0[1] = "WKU}'{b&)yv ";
      stringArray0[2] = "ra";
      stringArray0[3] = "";
      stringArray0[4] = "";
      String string3 = StringUtils.overlay("p{InCombiningDiacriticalMarks}+", "Cannot store ", (-880), (-880));
      assertEquals("Cannot store p{InCombiningDiacriticalMarks}+", string3);
  }

  @Test(timeout = 4000)
  public void test860()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      boolean boolean0 = StringUtils.startsWithAny(charSequenceArray0[2], charSequenceArray0);
      String string0 = StringUtils.removeIgnoreCase(">TNCU=H", "W");
      assertEquals(">TNCU=H", string0);
      
      boolean boolean1 = StringUtils.isNumericSpace(charSequenceArray0[2]);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test861()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      String string0 = StringUtils.removeEndIgnoreCase("i$`i", "p{InCombiningDiacriticalMarks}+");
      assertEquals("i$`i", string0);
      
      charSequenceArray0[0] = (CharSequence) "i$`i";
      String string1 = StringUtils.prependIfMissingIgnoreCase("~`vxGOhc", charSequenceArray0[0], charSequenceArray0);
      assertEquals("i$`i~`vxGOhc", string1);
      
      charSequenceArray0[0] = (CharSequence) "i$`i~`vxGOhc";
      CharSequence[] charSequenceArray1 = new CharSequence[2];
      charSequenceArray1[0] = (CharSequence) "p{InCombiningDiacriticalMarks}+";
      charSequenceArray1[1] = (CharSequence) "i$`i";
      int int0 = StringUtils.indexOfAny(charSequenceArray0[0], charSequenceArray1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test862()  throws Throwable  {
      String string0 = StringUtils.replace("~>tN8B-\u0000Lrhlj", "(hxpD]gq", "b6s#d`C");
      assertEquals("~>tN8B-\u0000Lrhlj", string0);
  }

  @Test(timeout = 4000)
  public void test863()  throws Throwable  {
      StringUtils.lowerCase("");
      StringUtils.containsAny((CharSequence) "", (CharSequence) "");
      try { 
        StringUtils.getBytes("Minimum abbreviation width with offset is %d", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test864()  throws Throwable  {
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.Category locale_Category1 = Locale.Category.FORMAT;
      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category1);
      EnumSet.of(locale_Category0, locale_Category1);
      Locale.Category locale_Category2 = Locale.Category.DISPLAY;
      enumSet0.add(locale_Category2);
      Iterator<Locale.Category> iterator0 = enumSet0.iterator();
      StringUtils.join(iterator0, 'Y');
      String string0 = StringUtils.abbreviate((String) null, "[", 2311, 2311);
      assertNull(string0);
      
      StringUtils.isNumeric((CharSequence) null);
      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null);
      assertNull(stringArray0);
      
      StringUtils.abbreviate((String) null, (String) null, 37, 37);
      StringUtils.contains((CharSequence) null, (CharSequence) null);
      StringUtils.indexOf((CharSequence) null, 2311, 2311);
      String string1 = StringUtils.center("*HJF %#([@(dS`EJbR", 65, "@}");
      assertEquals("@}@}@}@}@}@}@}@}@}@}@}@*HJF %#([@(dS`EJbR@}@}@}@}@}@}@}@}@}@}@}@}", string1);
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("[y?S8Dd.M\"^~'o.!Z", '.');
      assertEquals(3, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test865()  throws Throwable  {
      Stack<Integer> stack0 = new Stack<Integer>();
      stack0.trimToSize();
      String string0 = StringUtils.removeEndIgnoreCase("};EI$@6I-,@ihC*Pr|L", "q");
      assertEquals("};EI$@6I-,@ihC*Pr|L", string0);
      
      stack0.iterator();
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("i,}", "q", (-395));
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.removePattern("(+BZu]k", "Strings must not be null");
      assertEquals("(+BZu]k", string1);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) (-395);
      longArray0[1] = (long) (-395);
      int int0 = StringUtils.indexOfDifference((CharSequence) "};EI$@6I-,@ihC*Pr|L", (CharSequence) "q");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test866()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "Pb'S!y vl:2A[Ni8";
      boolean boolean0 = StringUtils.isAnyEmpty(charSequenceArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test867()  throws Throwable  {
      String string0 = StringUtils.wrapIfMissing("org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", "org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB");
      assertEquals("org.apache.commons.lang3.ObjectUtils,O]8nE8wSn\"vwB", string0);
      
      String string1 = StringUtils.rotate("} WBUy#{g3 7{`vP*", 2535);
      assertEquals("P*} WBUy#{g3 7{`v", string1);
      assertNotNull(string1);
      
      boolean boolean0 = StringUtils.isEmpty("org.apache.commons.lang3.ObjectUtils");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test868()  throws Throwable  {
      StringUtils.rightPad("O4Wyv<v", 1, "");
      StringUtils.rotate("O4Wyv<v", 1);
      char[] charArray0 = new char[2];
      charArray0[0] = '/';
      charArray0[1] = 'C';
      StringUtils.containsAny((CharSequence) "", charArray0);
      StringUtils.replaceOnceIgnoreCase("O4Wyv<v", "1(ctXP", "");
      StringUtils.abbreviate("", 1, 1);
      StringUtils.indexOf((CharSequence) "1(ctXP", 1, (-11));
      CharSequence[] charSequenceArray0 = new CharSequence[7];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "O4Wyv<v";
      charSequenceArray0[3] = (CharSequence) "";
      charSequenceArray0[4] = (CharSequence) "O4Wyv<v";
      charSequenceArray0[5] = (CharSequence) "vO4Wyv<";
      charSequenceArray0[6] = (CharSequence) "O4Wyv<v";
      StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);
      StringUtils.splitByWholeSeparatorPreserveAllTokens("", "", 0);
      long[] longArray0 = new long[0];
      // Undeclared exception!
      try { 
        StringUtils.join(longArray0, '9', (-11), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -11
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test869()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Minimum abbrevTation width is %Q", '#');
      int[] intArray0 = new int[8];
      intArray0[0] = (int) '#';
      intArray0[1] = (int) '#';
      intArray0[6] = (int) '#';
      StringUtils.prependIfMissingIgnoreCase("Minimum abbrevTation width is %Q", "Minimum abbrevTation width is %Q", stringArray0);
      StringUtils.containsAny((CharSequence) "Minimum abbrevTation width is %Q", (CharSequence[]) stringArray0);
      StringUtils.removeAll("maxWith cannot be negative", "v=lMewCTb0z$S9&Y");
      StringUtils.lastIndexOfAny("maxWith cannot be negative", stringArray0);
      String string0 = StringUtils.lowerCase((String) null, (Locale) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test870()  throws Throwable  {
      String string0 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string0);
      
      StringUtils.equals((CharSequence) "", (CharSequence) "");
      String string1 = StringUtils.unwrap("hF-u", ".VNQ0T6P>`x");
      assertEquals("hF-u", string1);
      
      StringUtils.truncate("", 23, 23);
      String[] stringArray0 = StringUtils.splitByWholeSeparator("Search and Replace array lengths don't match: ", "*c'M", 15);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      StringUtils.isAlphanumeric("*c'M");
      boolean boolean0 = StringUtils.isAlphanumericSpace("hF-u");
      assertFalse(boolean0);
      
      String string2 = StringUtils.trimToNull(";]pv#dHl:80s");
      assertEquals(";]pv#dHl:80s", string2);
      assertNotNull(string2);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "hF-u", (CharSequence) "");
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test871()  throws Throwable  {
      String string0 = StringUtils.substringAfter("", "");
      assertEquals("", string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "W/OVxs:mxU/Y.", 51);
      assertEquals(0, stringArray0.length);
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test872()  throws Throwable  {
      StringUtils.stripToEmpty("i$`i");
      StringUtils.chomp("i$`i");
      StringUtils.abbreviate("offset cannot be negative", 627);
      StringUtils.stripToNull("-s8Hzgg,i+{OH;I");
      Locale locale0 = Locale.JAPAN;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      PriorityQueue<Locale> priorityQueue0 = new PriorityQueue<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) priorityQueue0, locale_FilteringMode0);
      String string0 = StringUtils.upperCase((String) null, locale0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test873()  throws Throwable  {
      ArrayList<CharBuffer> arrayList0 = new ArrayList<CharBuffer>();
      Integer integer0 = new Integer(8);
      Locale locale0 = Locale.TAIWAN;
      locale0.hasExtensions();
      String string0 = StringUtils.lowerCase("1", locale0);
      assertNotNull(string0);
      assertEquals("1", string0);
      
      boolean boolean0 = StringUtils.isMixedCase("1");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test874()  throws Throwable  {
      String string0 = StringUtils.removeFirst("Ty,HVnggok}20]", "Ty,HVnggok}20]");
      assertEquals("", string0);
      
      String string1 = StringUtils.substringBetween("Ty,HVnggok}20]", "Ty,HVnggok}20]");
      assertNull(string1);
      
      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, (-15));
      assertEquals((-1), int0);
      
      int int1 = StringUtils.getLevenshteinDistance((CharSequence) "Ty,HVnggok}20]", (CharSequence) "Ty,HVnggok}20]");
      assertEquals(0, int1);
  }

  @Test(timeout = 4000)
  public void test875()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparator("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+", (-3657));
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test876()  throws Throwable  {
      StringUtils.removeFirst("", "");
      StringUtils.center("", (-3119));
      StringUtils.indexOf((CharSequence) "", (CharSequence) "", 0);
      StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      StringUtils.join((Iterable<?>) null, "Locale must not be null");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = null;
      StringUtils.stripAll(stringArray0, (String) null);
      char[] charArray0 = new char[7];
      charArray0[0] = '}';
      charArray0[1] = '`';
      charArray0[2] = 'n';
      charArray0[3] = 'v';
      charArray0[4] = '-';
      charArray0[5] = 'H';
      charArray0[6] = '>';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      char[] charArray1 = new char[4];
      charArray1[0] = '`';
      charArray1[1] = '>';
      charArray1[2] = '-';
      charArray1[3] = '>';
      // Undeclared exception!
      try { 
        charBuffer0.get(charArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.HeapCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test877()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("', is neither of type Map.Entry nor an Array", (String) null, "m");
      assertNotNull(string0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(441);
      Object object0 = new Object();
      priorityQueue0.add(object0);
      String string1 = StringUtils.join((Iterable<?>) priorityQueue0, ':');
      assertNotNull(string1);
      
      String string2 = StringUtils.replace("', is neither of type Map.Entry nor an Array", "m", (String) null);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test878()  throws Throwable  {
      String string0 = StringUtils.removePattern(" ", " ");
      assertEquals("", string0);
      
      Locale locale0 = Locale.JAPAN;
      String string1 = StringUtils.upperCase("Cannot store ", locale0);
      assertEquals("CANNOT STORE ", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test879()  throws Throwable  {
      String string0 = StringUtils.upperCase("K'N\"/", (Locale) null);
      assertNotNull(string0);
      assertEquals("K'N\"/", string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "K'N\"/", (CharSequence) "K'N\"/");
      assertEquals(0, int0);
      
      String string1 = StringUtils.lowerCase("Locale must not be null", (Locale) null);
      assertNotNull(string1);
      assertEquals("locale must not be null", string1);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "", 0);
      assertNotNull(stringArray0);
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>(comparator0);
      priorityQueue0.add("");
      String string2 = StringUtils.join((Iterable<?>) priorityQueue0, ':');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test880()  throws Throwable  {
      String string0 = StringUtils.abbreviate("r2u6J>", (-1117), 76);
      assertEquals("r2u6J>", string0);
      
      String string1 = StringUtils.reverseDelimited("qwKLJe?N\";J_s", 'y');
      assertEquals("qwKLJe?N\";J_s", string1);
      assertNotNull(string1);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "qwKLJe?N\";J_s", (CharSequence) "qwKLJe?N\";J_s");
      assertEquals(0, int0);
  }
}
