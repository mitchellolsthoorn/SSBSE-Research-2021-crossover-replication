/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 30 15:37:47 GMT 2021
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.UnsupportedEncodingException;
import java.nio.Buffer;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.Iterator;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Supplier;
import java.util.regex.PatternSyntaxException;
import org.apache.commons.lang3.StringUtils;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StringUtils_ESTest extends StringUtils_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[23];
      stringArray0[1] = "fIAP]5y^ljGT{#o'V";
      stringArray0[2] = ":\"0D]~6";
      stringArray0[3] = ":\"0D]~6";
      char[] charArray0 = new char[9];
      charArray0[0] = 'e';
      charArray0[1] = 'e';
      charArray0[2] = 'e';
      charArray0[3] = 'e';
      charArray0[4] = 'e';
      charArray0[5] = ';';
      charArray0[6] = 'e';
      charArray0[7] = 'e';
      charArray0[8] = 'e';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "fIAP]5y^ljGT{#o'V", charArray0);
      assertArrayEquals(new char[] {'e', 'e', 'e', 'e', 'e', ';', 'e', 'e', 'e'}, charArray0);
      assertFalse(boolean0);
      assertEquals(9, charArray0.length);
      
      String string0 = StringUtils.join((double[]) null, 'e');
      assertNull(string0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(23, stringArray0.length);
      
      int int1 = StringUtils.compareIgnoreCase((String) null, ":\"0D]~6", false);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "fIAP]5y^ljGT{#o'V", (CharSequence) ":\"0D]~6", 1);
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = StringUtils.indexOfAny((CharSequence) ":\"0D]~6", (CharSequence[]) stringArray0);
      assertEquals(0, int3);
      assertEquals(23, stringArray0.length);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = StringUtils.stripAccents("sKW%k");
      assertEquals("sKW%k", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("sKW%k", "sKW%k");
      assertEquals("sKW%k", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("sKW%k", 2955);
      assertEquals("sKW%k", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "sKW%k", "sKW%k");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("{6,JE,@ \n", "sKW%k");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "sKW%k", (CharSequence) "{6,JE,@ \n");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "sKW%k", "sKW%k");
      assertEquals(0, int0);
      
      String string3 = StringUtils.substring("5FrI L]V", 648);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean3 = StringUtils.containsWhitespace("sKW%k");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String string4 = "\\uwsPy.:E,' {,!d\\uwsP<.:E,\\uwsP<.:E,";
      int int1 = StringUtils.indexOfAny((CharSequence) "sKW%k", string4);
      assertEquals(0, int1);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertTrue(int1 == int0);
      
      String string5 = StringUtils.deleteWhitespace("P@*!MQr as no clone metod");
      assertEquals("P@*!MQrasnoclonemetod", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.rightPad("P@*!MQr as no clone metod", 292, '3');
      assertEquals("P@*!MQr as no clone metod333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = StringUtils.removeFirst("C2 jA!*@Fbh", "C2 jA!*@Fbh");
      assertEquals("C2 jA!*@Fbh", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "VtU4s", (-476));
      assertNull(stringArray0);
      
      String string1 = StringUtils.repeat("ESHSPa*}Rnf", (-476));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.swapCase((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.substringAfterLast("ESHSPa*}Rnf", 116);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.defaultIfEmpty("RBmQ", "ESHSPa*}Rnf");
      assertEquals("RBmQ", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.join((Object[]) null);
      assertNull(string5);
      
      String string6 = StringUtils.replaceChars("=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]", '2', '.');
      assertEquals("=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      int int0 = StringUtils.compare("Ja?osZ#n#lE$>jCy^!P", "VtU4s", false);
      assertEquals((-12), int0);
      
      String string7 = StringUtils.rightPad(">78a-8", 321);
      assertEquals(">78a-8                                                                                                                                                                                                                                                                                                                           ", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string4));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string8 = StringUtils.getIfBlank("=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]", supplier0);
      assertEquals("=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = StringUtils.leftPad("L^,:Oht1AXQr ", 6, "L^,:Oht1AXQr ");
      assertEquals("L^,:Oht1AXQr ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOf((CharSequence) "L^,:Oht1AXQr ", 12);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.center("L^,:Oht1AXQr ", 3534);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isEmpty("L^,:Oht1AXQr ");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[8];
      longArray0[0] = (-860L);
      longArray0[1] = (long) 6;
      longArray0[2] = (long) 12;
      longArray0[3] = (-860L);
      longArray0[4] = 1L;
      longArray0[7] = (long) (-1);
      String string2 = StringUtils.center("L^,:Oht1AXQr ", 6);
      assertEquals("L^,:Oht1AXQr ", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'U';
      charArray0[1] = 'H';
      charArray0[2] = 'O';
      int int1 = StringUtils.indexOfAny((CharSequence) "L^,:Oht1AXQr ", charArray0);
      assertArrayEquals(new char[] {'U', 'H', 'O'}, charArray0);
      assertEquals(4, int1);
      assertEquals(3, charArray0.length);
      assertFalse(int1 == int0);
      
      Vector<Integer> vector0 = new Vector<Integer>(12);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(12, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(int0));
      
      int[] intArray0 = StringUtils.toCodePoints(string1);
      assertNotNull(intArray0);
      assertEquals(3534, intArray0.length);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      
      String string3 = StringUtils.join(intArray0, 'h', 26, 3534);
      assertNotNull(string3);
      assertEquals(3534, intArray0.length);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.normalizeSpace("clone");
      assertEquals("clone", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.isAlpha("clone");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.defaultString("clone");
      assertEquals("clone", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = StringUtils.substringBetween("", "Isd/(=d", ",pw[Asu_tXQX");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[3];
      charSequenceArray0[0] = (CharSequence) null;
      charSequenceArray0[1] = (CharSequence) "";
      boolean boolean0 = StringUtils.isAlphanumeric(charSequenceArray0[1]);
      assertFalse(boolean0);
      assertEquals(3, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isEmpty((CharSequence) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Vector<Integer> vector0 = new Vector<Integer>(1627);
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(1627, vector0.capacity());
      assertFalse(vector0.contains(1627));
      
      String string1 = StringUtils.join((Iterable<?>) vector0, '(');
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(1627, vector0.capacity());
      assertFalse(vector0.contains(1627));
      
      String string2 = StringUtils.removeEnd((String) null, "M}y");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = StringUtils.rightPad("WJs~,X|H", 0, 'X');
      assertEquals("WJs~,X|H", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[8];
      charSequenceArray0[0] = (CharSequence) "WJs~,X|H";
      charSequenceArray0[1] = (CharSequence) "WJs~,X|H";
      charSequenceArray0[2] = (CharSequence) "WJs~,X|H";
      charSequenceArray0[3] = (CharSequence) "WJs~,X|H";
      charSequenceArray0[4] = (CharSequence) "WJs~,X|H";
      charSequenceArray0[5] = (CharSequence) "WJs~,X|H";
      charSequenceArray0[6] = (CharSequence) "WJs~,X|H";
      charSequenceArray0[7] = (CharSequence) "WJs~,X|H";
      boolean boolean0 = StringUtils.isNoneBlank(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(8, charSequenceArray0.length);
      
      String string1 = StringUtils.substring("y>*'#4Grdg[-rmk6", 90, (-128));
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.chop((String) null);
      assertNull(string2);
      
      String string3 = StringUtils.replace("WJs~,X|H", "WJs~,X|H", "y>*'#4Grdg[-rmk6");
      assertEquals("y>*'#4Grdg[-rmk6", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAsciiPrintable("y>*'#4Grdg[-rmk6");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = StringUtils.join((byte[]) null, '>', 9, 9);
      assertNull(string4);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = StringUtils.capitalize("}q&=L$_g{0");
      assertEquals("}q&=L$_g{0", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.abbreviateMiddle("null", "null", 3);
      assertEquals("null", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[6];
      charArray0[1] = 'l';
      charArray0[2] = 'C';
      String string2 = StringUtils.removeStartIgnoreCase("null", "2@5{FtZas!");
      assertEquals("null", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.wrap((String) null, "E,\r");
      assertNull(string3);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      // Undeclared exception!
      try { 
        StringUtils.toEncodedString((byte[]) null, charset0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Isd/(=d", "T3},@qs");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.stripToNull("Isd/(=d");
      assertEquals("Isd/(=d", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.join((Object[]) stringArray0, "&\"@|/-qm&", 54, (-128));
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(2, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Comparator should not be null.", (CharSequence) "");
      assertFalse(boolean0);
      
      String string2 = StringUtils.removeEndIgnoreCase("Comparator should not be null.", "");
      assertEquals("Comparator should not be null.", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "<c`cj<IdI@L<Ee'f{@cM", (CharSequence) "Comparator should not be null.");
      assertEquals(28, int0);
      
      String string3 = StringUtils.repeat("Isd/(=d", (-1809));
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.substring("ii2>qNfXx%93j-7", 64, (-4));
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.abbreviate("", "orgatnls", 64, 54);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string4));
      
      String string6 = StringUtils.remove("", '&');
      assertEquals("", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string4));
      
      String string7 = StringUtils.normalizeSpace("Isd/(=d");
      assertEquals("Isd/(=d", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = StringUtils.replaceChars("|S7#uc", "|S7#uc", "|S7#uc");
      assertEquals("|S7#uc", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charArray0.length);
      
      Stack<String> stack0 = new Stack<String>();
      assertNotNull(stack0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("|S7#uc"));
      
      Iterator<String> iterator0 = stack0.iterator();
      assertNotNull(iterator0);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("|S7#uc"));
      
      String string1 = StringUtils.join(iterator0, 'v');
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(stack0.empty());
      assertTrue(stack0.isEmpty());
      assertEquals("[]", stack0.toString());
      assertEquals(10, stack0.capacity());
      assertEquals(0, stack0.size());
      assertFalse(stack0.contains("|S7#uc"));
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) charBuffer0, (CharSequence) "|S7#uc");
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(6, int0);
      assertEquals("", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.capacity());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.limit());
      assertEquals(0, charArray0.length);
      
      String string2 = StringUtils.abbreviate("[mWY%", "[mWY%", 6);
      assertEquals("[mWY%", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      byte byte0 = (byte)97;
      // Undeclared exception!
      try { 
        Charset.forName("qB.{A:0");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // qB.{A:0
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = StringUtils.removeFirst("sKW%k", "sKW%k");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.defaultString("", "sKW%k");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.left("", 2955);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsNone((CharSequence) "sKW%k", "");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.containsIgnoreCase("{6,JE,@ \n", "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = StringUtils.equals((CharSequence) "", (CharSequence) "{6,JE,@ \n");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string3 = StringUtils.wrapIfMissing("AT2j*ZwJ;]CFDBAT2j*ZwJ;]CFDB", "KCPm.6Iw0ic%0");
      assertEquals("KCPm.6Iw0ic%0AT2j*ZwJ;]CFDBAT2j*ZwJ;]CFDBKCPm.6Iw0ic%0", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String[] stringArray0 = new String[1];
      String string0 = StringUtils.join((Object[]) stringArray0, "Iz-Dp_uLq5[");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(1, stringArray0.length);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "Iz-Dp_uLq5[");
      assertEquals((-1), int0);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "Iz-Dp_uLq5[", (CharSequence) "");
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[1];
      String string1 = StringUtils.join(byteArray0, 'e');
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("0", string1);
      assertNotNull(string1);
      assertEquals(1, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join(byteArray0, '\'', (-341), (-871));
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(1, byteArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.chop("GK");
      assertEquals("G", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = StringUtils.substringAfter("\np{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+", "");
      assertEquals("\np{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.wrapIfMissing("", '@');
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\np{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+";
      stringArray0[1] = "";
      stringArray0[2] = "\np{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "\np{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+";
      stringArray0[8] = "\np{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+";
      String string2 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("\np{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+", string2);
      assertNotNull(string2);
      assertEquals(9, stringArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.difference("", "]");
      assertEquals("]", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.stripStart((String) null, "\np{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+");
      assertNull(string4);
      
      String string5 = StringUtils.defaultString("\np{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+", "\np{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+");
      assertEquals("\np{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.firstNonBlank(stringArray0);
      assertEquals("\np{InCombiningDiacriticalMarks}+p{InCombiningDiacriticalMarks}+", string6);
      assertNotNull(string6);
      assertEquals(9, stringArray0.length);
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertTrue(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      
      String string7 = StringUtils.substringBetween("%*g<k<\")Tqonn>", "");
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertTrue(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAllLowerCase("");
      assertFalse(boolean0);
      
      boolean boolean1 = StringUtils.isAnyEmpty(stringArray0);
      assertTrue(boolean1);
      assertEquals(9, stringArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string8 = StringUtils.stripToNull((String) null);
      assertNull(string8);
      
      String string9 = StringUtils.trimToEmpty("_gE!T-c8#Pg%(+B$./");
      assertEquals("_gE!T-c8#Pg%(+B$./", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string3));
      
      String string10 = StringUtils.wrapIfMissing("AT2j*ZwJ;]CFDBAT2j*ZwJ;]CFDB", "wsP<.:,");
      assertEquals("wsP<.:,AT2j*ZwJ;]CFDBAT2j*ZwJ;]CFDBwsP<.:,", string10);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string6));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string0));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "wsP<.:,AT2j*ZwJ;]CFDBAT2j*ZwJ;]CFDBwsP<.:,", (CharSequence) "%*g<k<\")Tqonn>", 7);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = StringUtils.chop("\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "", (-166), 1436);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.substringAfter("", "\n");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.defaultIfBlank("\n", "");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "";
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "\n";
      CharSequence charSequence0 = StringUtils.firstNonBlank(charSequenceArray0);
      assertNull(charSequence0);
      assertEquals(4, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.equals((CharSequence) "\n", (CharSequence) null);
      assertFalse(boolean0);
      
      String string3 = StringUtils.stripStart("\n", (String) null);
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = StringUtils.replace("\n", "\n", "\n", 0);
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.contains((CharSequence) "\n", (CharSequence) "\n");
      assertTrue(boolean0);
      
      String string1 = StringUtils.trimToEmpty("\n");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[5];
      charSequenceArray0[0] = (CharSequence) "\n";
      charSequenceArray0[1] = (CharSequence) "\n";
      String string2 = StringUtils.removeStartIgnoreCase((String) null, "C|]T1w1:@hQ,/cAjQ");
      assertNull(string2);
      
      String string3 = StringUtils.wrap("2@5{FtZas!", "GE{s-:1V2,W^,+d}!");
      assertEquals("GE{s-:1V2,W^,+d}!2@5{FtZas!GE{s-:1V2,W^,+d}!", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.repeat("\n", 1239);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      // Undeclared exception!
      StringUtils.getLevenshteinDistance((CharSequence) "GE{s-:1V2,W^,+d}!", (CharSequence) string4, 1732);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = StringUtils.replaceChars((String) null, (String) null, (String) null);
      assertNull(string0);
      
      String string1 = StringUtils.lowerCase((String) null);
      assertNull(string1);
      
      String string2 = StringUtils.leftPad("*5", (-128));
      assertEquals("*5", string2);
      assertNotNull(string2);
      
      boolean boolean0 = StringUtils.isNumeric((CharSequence) null);
      assertFalse(boolean0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains((-128)));
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains((-128)));
      
      String string3 = StringUtils.join(iterator0, "4]j!L_Adf*5Y*");
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains((-128)));
      assertFalse(string3.equals((Object)string2));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "4]j!L_Adf*5Y*";
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) "k1_d2]qljg=i&D>";
      objectArray0[3] = object0;
      objectArray0[4] = (Object) priorityQueue0;
      objectArray0[5] = (Object) null;
      objectArray0[6] = (Object) iterator0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[7] = object1;
      objectArray0[8] = (Object) null;
      String string4 = StringUtils.join(objectArray0, 'V', 4824, 871);
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(9, objectArray0.length);
      assertFalse(string4.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "";
      String string5 = StringUtils.join((Iterable<?>) priorityQueue0, '<');
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains(object1));
      assertFalse(string5.equals((Object)string2));
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "*5";
      charSequenceArray0[3] = (CharSequence) "4]j!L_Adf*5Y*";
      charSequenceArray0[4] = (CharSequence) "4]j!L_Adf*5Y*";
      charSequenceArray0[5] = (CharSequence) "4]j!L_Adf*5Y*";
      boolean boolean1 = StringUtils.isAnyBlank(charSequenceArray0);
      assertTrue(boolean1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      String string0 = StringUtils.joinWith("aD=P5Sd.0$&\".pdYgs", objectArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, objectArray0.length);
      
      boolean boolean0 = StringUtils.isWhitespace("aD=P5Sd.0$&\".pdYgs");
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("aD=P5Sd.0$&\".pdYgs", 't');
      assertEquals("taD=P5Sd.0$&\".pdYgst", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.replaceChars("", 't', 't');
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.join((boolean[]) null, 'V', 4, 4);
      assertNull(string3);
      
      String string4 = StringUtils.repeat((String) null, "#u?cr+S8z@)y+.", 4);
      assertNull(string4);
      
      int int0 = StringUtils.countMatches((CharSequence) "", (CharSequence) "aD=P5Sd.0$&\".pdYgs");
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOf((CharSequence) null, 1117);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.countMatches((CharSequence) "aD=P5Sd.0$&\".pdYgs", 'L');
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      String string5 = StringUtils.substringBetween("FD", (String) null);
      assertNull(string5);
      
      int int3 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "taD=P5Sd.0$&\".pdYgst", (CharSequence) null, (-2253));
      assertEquals((-1), int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      String string6 = StringUtils.chomp("2n(wE", "");
      assertEquals("2n(wE", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      
      String string7 = StringUtils.join((boolean[]) null, 'L', 0, 6);
      assertNull(string7);
      
      String[] stringArray0 = StringUtils.split((String) null);
      assertNull(stringArray0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte)108;
      byteArray0[2] = (byte)2;
      String string8 = StringUtils.join(byteArray0, 'l', 4, (int) (byte)2);
      assertArrayEquals(new byte[] {(byte)108, (byte)108, (byte)2}, byteArray0);
      assertEquals("", string8);
      assertNotNull(string8);
      assertEquals(3, byteArray0.length);
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = StringUtils.stripAccents("");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", "T");
      assertEquals((-1), int0);
      
      String string1 = StringUtils.capitalize("{j.M~yW2oM-%uf");
      assertEquals("{j.M~yW2oM-%uf", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int1 = StringUtils.length("{j.M~yW2oM-%uf");
      assertEquals(14, int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.rightPad("Invalid locale format: ", (-1), 'e');
      assertEquals("Invalid locale format: ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = null;
      String string4 = StringUtils.unwrap((String) null, (String) null);
      assertNull(string4);
      
      String string5 = StringUtils.substring("4}VD0b:Wcr==%p", 101, 14);
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      
      String string6 = StringUtils.wrap((String) null, "4}VD0b:Wcr==%p");
      assertNull(string6);
      
      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "T", 14);
      assertNull(stringArray0);
      
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "AT2j*ZwJ;]CFDB";
      String string1 = StringUtils.removeEnd("AT2j*ZwJ;]CFDB", "AT2j*ZwJ;]CFDB");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringAfter("AT2j*ZwJ;]CFDB", (-2096));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "AT2j*ZwJ;]CFDB", (CharSequence) "");
      assertEquals(14, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "AT2j*ZwJ;]CFDB";
      boolean boolean0 = StringUtils.isNoneEmpty(charSequenceArray0);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      String string3 = "\\Isd/(=d";
      boolean boolean1 = StringUtils.containsAnyIgnoreCase("", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(1, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string4 = StringUtils.repeat("objectobject", 2593);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      // Undeclared exception!
      StringUtils.splitByCharacterTypeCamelCase(string4);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("p5:uzN|-eleM`<Fj", "p5:uzN|-eleM`<Fj");
      assertEquals("p5:uzN|-eleM`<Fj", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string2);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "z2Ck6CMHl->yct";
      charSequenceArray0[1] = (CharSequence) "p5:uzN|-eleM`<Fj";
      charSequenceArray0[2] = (CharSequence) "p5:uzN|-eleM`<Fj";
      charSequenceArray0[3] = (CharSequence) null;
      String string3 = StringUtils.appendIfMissing((String) null, (CharSequence) null, charSequenceArray0);
      assertNull(string3);
      assertEquals(4, charSequenceArray0.length);
      
      String string4 = StringUtils.substringBetween("z2Ck6CMHl->yct", "Threshold must not be negative", (String) null);
      assertNull(string4);
      
      boolean boolean1 = StringUtils.equalsAny("Threshold must not be negative", charSequenceArray0);
      assertFalse(boolean1);
      assertEquals(4, charSequenceArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.removeStartIgnoreCase((String) null, "2b");
      assertNull(string5);
      
      StringUtils.rightPad("Supplied value must be a valid byte literal between -32768 and 32767: [", 900, "GK");
      StringUtils.abbreviate("Threshold must not be negative", 256);
      StringUtils.rightPad("z2Ck6CMHl->yct", 900, (String) null);
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = (-1610612734);
      intArray0[2] = 256;
      intArray0[3] = 256;
      StringUtils.join(intArray0, 'l');
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = StringUtils.substringBetween((String) null, (String) null, (String) null);
      assertNull(string0);
      
      boolean boolean0 = StringUtils.isBlank((CharSequence) null);
      assertTrue(boolean0);
      
      String string1 = StringUtils.wrapIfMissing("p5:uzN|-eleM`<Fj", "p5:uzN|-eleM`<Fj");
      assertEquals("p5:uzN|-eleM`<Fj", string1);
      assertNotNull(string1);
      
      String string2 = StringUtils.defaultString((String) null, (String) null);
      assertNull(string2);
      
      String string3 = StringUtils.truncate("p5:uzN|-eleM`<Fj", 900);
      assertEquals("p5:uzN|-eleM`<Fj", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Isd/(=d", "Isd/(=d");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-94);
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)17;
      byteArray0[5] = (byte)31;
      String string0 = StringUtils.join(byteArray0, '7', (int) (byte)1, 4);
      assertArrayEquals(new byte[] {(byte)1, (byte)12, (byte) (-94), (byte)5, (byte)17, (byte)31}, byteArray0);
      assertEquals("127-9475", string0);
      assertNotNull(string0);
      assertEquals(6, byteArray0.length);
      
      String string1 = StringUtils.join((Object[]) stringArray0, '');
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, stringArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "Isd/(=d");
      assertEquals(0, int0);
      
      int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 557);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = 'h';
      String string0 = StringUtils.replaceChars("\n", "-.$ W#e*v.Z", (String) null);
      assertEquals("\n", string0);
      assertNotNull(string0);
      
      try { 
        StringUtils.getBytes("-JF+u\"yG", "-.$ W#e*v.Z");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = StringUtils.isNumeric("dto");
      assertFalse(boolean0);
      
      String string0 = StringUtils.replaceIgnoreCase("dto", "dto", "dto");
      assertEquals("dto", string0);
      assertNotNull(string0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) "dto";
      objectArray0[1] = (Object) "dto";
      objectArray0[2] = (Object) "Comparator should not be null.";
      objectArray0[3] = (Object) "dto";
      objectArray0[4] = (Object) "dto";
      String string1 = StringUtils.join(objectArray0, "dto", 160, 25);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(5, objectArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "dto", (CharSequence) "");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Comparator should not be null.", (CharSequence) "dto");
      assertEquals(28, int0);
      
      String string2 = StringUtils.repeat("Array element ", (-2));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.strip("Array element ");
      assertEquals("Array element", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.abbreviate("{V}yte literal between -128 and 127: [", "t: ", 1098, 8);
      assertEquals("t: 27: [", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.remove("v__p'.f", ']');
      assertEquals("v__p'.f", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.leftPad("pB]+^2", 25);
      assertEquals("                   pB]+^2", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      
      String string7 = "\\uwsP<.:E,";
      String string8 = StringUtils.difference("Threshold must not be negative", string7);
      assertEquals("\\uwsP<.:E,", string8);
      assertNotNull(string8);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string4));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[13];
      charSequenceArray0[1] = (CharSequence) "AT2j*ZwJ;]CFDB";
      charSequenceArray0[2] = (CharSequence) "AT2j*ZwJ;]CFDB";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.atils", "<c`cj<IdI@L<ErD7");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.stripToNull("AT2j*ZwJ;]CFDB");
      assertEquals("AT2j*ZwJ;]CFDB", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("AT2j*ZwJ;]CFDB");
      assertFalse(boolean0);
      
      String string1 = "\\u";
      String string2 = StringUtils.overlay("Supplied value must be a valid byte literal between -32768 and 32767: [", string1, 1361, 1361);
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [\\u", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String[] stringArray1 = Locale.getISOLanguages();
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(188, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "AT2j*ZwJ;]CFDB", 1361);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      double double0 = StringUtils.getJaroWinklerDistance("Supplied value must be a valid byte literal between -32768 and 32767: [", "s EU{CaLS8Q'2L}Y+");
      assertEquals(0.35, double0, 0.01);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(set0.contains("Supplied value must be a valid byte literal between -32768 and 32767: ["));
      
      byte[] byteArray0 = StringUtils.getBytes(string2, charset0);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals(73, byteArray0.length);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[13];
      charSequenceArray0[1] = (CharSequence) "AT2j*ZwJ;]CFDB";
      charSequenceArray0[2] = (CharSequence) "AT2j*ZwJ;]CFDB";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.atils", "<c`cj<IdI@L<ErD7");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.stripToNull("AT2j*ZwJ;]CFDB");
      assertEquals("AT2j*ZwJ;]CFDB", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("AT2j*ZwJ;]CFDB");
      assertFalse(boolean0);
      
      String string1 = StringUtils.abbreviate("org.atils", "org.atils", 1361);
      assertEquals("org.atils", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("AT2j*ZwJ;]CFDB", "AT2j*ZwJ;]CFDB", 1361);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "AT2j*ZwJ;]CFDB", 1361);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(2, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(set0.contains(string0));
      
      byte[] byteArray0 = StringUtils.getBytes("org.atils", charset0);
      assertArrayEquals(new byte[] {(byte)111, (byte)114, (byte)103, (byte)46, (byte)97, (byte)116, (byte)105, (byte)108, (byte)115}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(9, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Isd/(=d", "Isd/(=d");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = "7/G\"o;}ZJkJdV";
      // Undeclared exception!
      StringUtils.repeat("7/G\"o;}ZJkJdV", 65536);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String string0 = StringUtils.replaceChars("|S7#uc", "|S7#uc", "|S7#uc");
      assertEquals("|S7#uc", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("h`YJ_P\"Ln4,#M");
      assertEquals("H`YJ_P\"Ln4,#M", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.stripAll((String[]) null, "|S7#uc");
      assertNull(stringArray0);
      
      String string2 = StringUtils.prependIfMissingIgnoreCase("Comparator should not be null.", "|S7#uc", (CharSequence[]) null);
      assertEquals("|S7#ucComparator should not be null.", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.center("|S7#uc", 0);
      assertEquals("|S7#uc", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isEmpty("|S7#uc");
      assertFalse(boolean0);
      
      long[] longArray0 = new long[7];
      longArray0[0] = (long) 0;
      longArray0[1] = 1L;
      longArray0[2] = (long) 53;
      longArray0[3] = (long) 'g';
      longArray0[4] = (long) 0;
      longArray0[5] = (long) 95;
      longArray0[6] = (long) 95;
      String string4 = StringUtils.join(longArray0, 'g', 0, (-1871));
      assertArrayEquals(new long[] {0L, 1L, 53L, 103L, 0L, 95L, 95L}, longArray0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(7, longArray0.length);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      
      boolean boolean1 = StringUtils.isAnyEmpty((CharSequence[]) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = StringUtils.split("Isd/(=d", "Isd/(=d");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int[] intArray0 = new int[0];
      String string0 = StringUtils.join(intArray0, '<', 1085, 1);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, intArray0.length);
      
      String string1 = StringUtils.normalizeSpace("Isd/(=d");
      assertEquals("Isd/(=d", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlpha("Isd/(=d");
      assertFalse(boolean0);
      
      String string2 = StringUtils.center(", Length: ", 10, '<');
      assertEquals(", Length: ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "");
      assertEquals(0, int0);
      
      String string0 = StringUtils.abbreviate(" 4E:~Bo[Hwhyc", "", 0);
      assertEquals(" 4E:~Bo[Hwhyc", string0);
      assertNotNull(string0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) " 4E:~Bo[Hwhyc", (char[]) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      Vector<Integer> vector0 = new Vector<Integer>(0);
      assertNotNull(vector0);
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(int1));
      
      String string1 = StringUtils.join((Iterable<?>) vector0, '(');
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, vector0.capacity());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(int1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeEnd("zAN'CC59EetLsx0]HY*", "...");
      assertEquals("zAN'CC59EetLsx0]HY*", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String string0 = StringUtils.right("", 0);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.removeStartIgnoreCase("", "");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string2 = StringUtils.overlay("KzCBTv+^OJJ9ZO##$ ", "KzCBTv+^OJJ9ZO##$ ", 0, 0);
      assertEquals("KzCBTv+^OJJ9ZO##$ KzCBTv+^OJJ9ZO##$ ", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.removeFirst("L`t'u[n3y", "");
      assertEquals("L`t'u[n3y", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      String string4 = StringUtils.upperCase("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.overlay("KzCBTv+^OJJ9ZO##$ ", "b}F:H09m$8m}M.)ii{", 1361, 1361);
      assertEquals("KzCBTv+^OJJ9ZO##$ b}F:H09m$8m}M.)ii{", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.removeFirst("KzCBTv+^OJJ9ZO##$ b}F:H09m$8m}M.)ii{", "");
      assertEquals("KzCBTv+^OJJ9ZO##$ b}F:H09m$8m}M.)ii{", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string2));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "KzCBTv+^OJJ9ZO##$ ", (CharSequence) "", 0);
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "L`t'u[n3y", "");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string7 = StringUtils.substring("", 0);
      assertEquals("", string7);
      assertNotNull(string7);
      assertTrue(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string5));
      
      boolean boolean0 = StringUtils.containsWhitespace("");
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("");
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      
      boolean boolean1 = StringUtils.isNotEmpty("");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "", "");
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String string8 = StringUtils.deleteWhitespace("b}F:H09m$8m}M.)ii{");
      assertEquals("b}F:H09m$8m}M.)ii{", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string4));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      
      String string9 = StringUtils.repeat("KzCBTv+^OJJ9ZO##$ KzCBTv+^OJJ9ZO##$ ", (-447));
      assertEquals("", string9);
      assertNotNull(string9);
      assertTrue(string9.equals((Object)string4));
      assertTrue(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string6));
      assertTrue(string9.equals((Object)string1));
      assertTrue(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      
      String[] stringArray1 = StringUtils.splitPreserveAllTokens("", '\"');
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String string0 = StringUtils.replaceChars("|S7#uc", "|S7#uc", "|S7#uc");
      assertEquals("|S7#uc", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("h`YJ_P\"Ln4,#M");
      assertEquals("H`YJ_P\"Ln4,#M", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = ';';
      boolean boolean0 = StringUtils.containsAny((CharSequence) "h`YJ_P\"Ln4,#M", charArray0);
      assertArrayEquals(new char[] {';'}, charArray0);
      assertFalse(boolean0);
      assertEquals(1, charArray0.length);
      
      String string2 = StringUtils.join((double[]) null, ';');
      assertNull(string2);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      int int1 = StringUtils.compareIgnoreCase("LE8no=3x=B~&Zk45", "org.apache.commons.lang3.ArrayUtils", true);
      assertEquals((-3), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.getLevenshteinDistance((CharSequence) "|S7#uc", (CharSequence) "h`YJ_P\"Ln4,#M", Integer.MAX_VALUE);
      assertEquals(14, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("The character ", "The character ");
      assertNotNull(stringArray0);
      assertEquals(15, stringArray0.length);
      
      String string0 = StringUtils.remove("The character ", (String) null);
      assertEquals("The character ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace("The character ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "K}L|pk", (CharSequence) "");
      assertEquals(0, int0);
      
      char[] charArray0 = new char[17];
      charArray0[9] = 'o';
      charArray0[1] = 'o';
      String string1 = StringUtils.join(charArray0, 'o', 0, 13);
      assertEquals("\u0000ooo\u0000o\u0000o\u0000o\u0000o\u0000o\u0000o\u0000ooo\u0000o\u0000o\u0000", string1);
      assertNotNull(string1);
      assertEquals(17, charArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.substringBetween(">:[|S0CE*g1", "Y!:i10u-h5cn[Qdm2", "\u0000ooo\u0000o\u0000o\u0000o\u0000o\u0000o\u0000o\u0000ooo\u0000o\u0000o\u0000");
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("W`n<dJE$ n%At", "W`n<dJE$ n%At", "W`n<dJE$ n%At");
      assertEquals("W`n<dJE$ n%At", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "W`n<dJE$ n%At", (CharSequence) "W`n<dJE$ n%At");
      assertEquals(0, int0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("W`n<dJE$ n%At");
      assertFalse(boolean0);
      
      String string1 = "\\uwsP<.:,";
      String string2 = StringUtils.replaceIgnoreCase(string1, "`QZGH):", (String) null, 3);
      assertEquals("\\uwsP<.:,", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.leftPad("{z}q8>ldSH]Iw%1q<Y&", 12, 'a');
      assertEquals("{z}q8>ldSH]Iw%1q<Y&", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int1 = StringUtils.countMatches((CharSequence) null, 'K');
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = StringUtils.indexOfAnyBut((CharSequence) string1, (CharSequence) string1);
      assertEquals((-1), int2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = StringUtils.lastIndexOf((CharSequence) string1, (CharSequence) "W`n<dJE$ n%At");
      assertEquals((-1), int3);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      String string4 = StringUtils.substringBetween((String) null, "W`n<dJE$ n%At");
      assertNull(string4);
      
      char[] charArray0 = new char[11];
      charArray0[0] = 'a';
      charArray0[1] = 'K';
      charArray0[2] = 'a';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "{z}q8>ldSH]Iw%1q<Y&", charArray0);
      assertTrue(boolean1);
      assertEquals(11, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.leftPad(" vs ", 5, "{z}q8>ldSH]Iw%1q<Y&");
      assertEquals("{ vs ", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      
      String string6 = StringUtils.reverseDelimited("W`n<dJE$ n%At", 'd');
      assertEquals("JE$ n%AtdW`n<", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      
      byte[] byteArray0 = new byte[0];
      String string7 = StringUtils.join(byteArray0, 'a', 3, 3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string7);
      assertNotNull(string7);
      assertEquals(0, byteArray0.length);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      
      int int4 = 2001;
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 2001, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = StringUtils.replaceFirst("W`n<dJE$ n%At", "W`n<dJE$ n%At", "W`n<dJE$ n%At");
      assertEquals("W`n<dJE$ n%At", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("W`n<dJE$ n%At");
      assertFalse(boolean0);
      
      String string1 = "\\uwsP<.:,";
      String string2 = StringUtils.replaceIgnoreCase(string1, "`QZGH):", (String) null, 3);
      assertEquals("\\uwsP<.:,", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.leftPad("{z}q8>ldSH]Iw%1q<Y&", 12, 'a');
      assertEquals("{z}q8>ldSH]Iw%1q<Y&", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      int int0 = StringUtils.countMatches((CharSequence) null, 'K');
      assertEquals(0, int0);
      
      int int1 = StringUtils.indexOfAnyBut((CharSequence) string1, (CharSequence) string1);
      assertEquals((-1), int1);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.lastIndexOf((CharSequence) string1, (CharSequence) "W`n<dJE$ n%At");
      assertEquals((-1), int2);
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      String string4 = StringUtils.substringBetween((String) null, "W`n<dJE$ n%At");
      assertNull(string4);
      
      char[] charArray0 = new char[11];
      charArray0[0] = 'a';
      charArray0[1] = 'K';
      charArray0[2] = 'a';
      boolean boolean1 = StringUtils.containsNone((CharSequence) "{z}q8>ldSH]Iw%1q<Y&", charArray0);
      assertTrue(boolean1);
      assertEquals(11, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string5 = StringUtils.leftPad(" vs ", 5, "{z}q8>ldSH]Iw%1q<Y&");
      assertEquals("{ vs ", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.reverseDelimited("W`n<dJE$ n%At", 'd');
      assertEquals("JE$ n%AtdW`n<", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      
      byte[] byteArray0 = new byte[0];
      String string7 = StringUtils.join(byteArray0, 'a', 3, 3);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals("", string7);
      assertNotNull(string7);
      assertEquals(0, byteArray0.length);
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string6));
      
      int int3 = 2001;
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, 2001, 5);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[13];
      charSequenceArray0[0] = (CharSequence) "AT2j*ZwJ;]CFDB";
      charSequenceArray0[1] = (CharSequence) "AT2j*ZwJ;]CFDB";
      charSequenceArray0[2] = (CharSequence) "AT2j*ZwJ;]CFDB";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.atils", "<c`cj<IdI@L<ErD7");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.stripToNull("AT2j*ZwJ;]CFDB");
      assertEquals("AT2j*ZwJ;]CFDB", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("AT2j*ZwJ;]CFDB");
      assertFalse(boolean0);
      
      String string1 = "\\u";
      String string2 = StringUtils.overlay("Supplied value must be a valid byte literal between -32768 and 32767: [", string1, 1361, 1361);
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [\\u", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeFirst("s EU{CaLS8Q'2L}Y+", "%H_nrTO8`Z#SN/IyW:S");
      assertEquals("s EU{CaLS8Q'2L}Y+", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", charSequenceArray0[2], (-2022));
      assertEquals((-1), int0);
      assertEquals(13, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "AT2j*ZwJ;]CFDB", "MB");
      assertEquals(13, int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.substring("s EU{CaLS8Q'2L}Y+", 28);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsWhitespace(string1);
      assertFalse(boolean1);
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("AT2j*ZwJ;]CFDB");
      assertNotNull(intArray0);
      assertEquals(14, intArray0.length);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "<c`cj<IdI@L<ErD7", "clone");
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      String string5 = StringUtils.deleteWhitespace("");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      String string6 = StringUtils.join((Object[]) stringArray0);
      assertEquals("og.atils", string6);
      assertNotNull(string6);
      assertEquals(2, stringArray0.length);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.replaceOnceIgnoreCase((String) null, "i", (String) null);
      assertNull(string7);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = StringUtils.chomp("object", "object");
      assertEquals("", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.compare("M}", (String) null, false);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 1736;
      String string0 = StringUtils.rightPad("ws", 1736);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isWhitespace(string0);
      assertFalse(boolean0);
      
      String string1 = StringUtils.wrapIfMissing(string0, string0);
      assertNotNull(string1);
      
      String string2 = StringUtils.wrapIfMissing(string0, 'i');
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.replaceChars("Invalid locale format: ", 'n', '\u008A');
      assertEquals("I\u008Avalid locale format: ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "I\u008Avalid locale format: ", (CharSequence) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string4 = "ZvXXf*pjVOtU&";
      char[] charArray0 = new char[7];
      charArray0[0] = '\u008A';
      charArray0[1] = 'n';
      charArray0[2] = 'i';
      charArray0[3] = '\u008A';
      charArray0[4] = 'i';
      charArray0[5] = '\u008A';
      charArray0[6] = '\u008A';
      // Undeclared exception!
      StringUtils.indexOfAny((CharSequence) string0, charArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = StringUtils.rightPad(" ", 116);
      assertEquals("                                                                                                                    ", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "                                                                                                                    ", 116);
      assertEquals((-1), int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      String string1 = StringUtils.getDigits("@Vp-Ht0fb3");
      assertEquals("03", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      charSequenceArray0[0] = (CharSequence) "03";
      char[] charArray0 = new char[0];
      String string2 = StringUtils.join(charArray0, 'b');
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(0, charArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      charSequenceArray0[1] = (CharSequence) "";
      charSequenceArray0[2] = (CharSequence) "                                                                                                                    ";
      charSequenceArray0[3] = (CharSequence) " ";
      int int1 = 8192;
      CharBuffer charBuffer0 = CharBuffer.allocate(8192);
      assertNotNull(charBuffer0);
      assertEquals(8192, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(8192, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(8192, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8192, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      
      charSequenceArray0[4] = (CharSequence) charBuffer0;
      Buffer buffer0 = charBuffer0.position(8192);
      assertNotNull(buffer0);
      assertEquals(8192, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(8192, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(8192, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(buffer0.isReadOnly());
      assertEquals(8192, buffer0.limit());
      assertEquals(8192, buffer0.capacity());
      assertEquals(8192, buffer0.position());
      assertEquals(0, buffer0.arrayOffset());
      assertEquals(0, buffer0.remaining());
      assertTrue(buffer0.hasArray());
      assertFalse(buffer0.hasRemaining());
      assertFalse(buffer0.isDirect());
      
      // Undeclared exception!
      try { 
        charBuffer0.put(",^9GP<y/E0NuqU9G");
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = StringUtils.chomp("Object varargs must not be null");
      assertEquals("Object varargs must not be null", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.endsWith("Object varargs must not be null", "Object varargs must not be null");
      assertTrue(boolean0);
      
      float[] floatArray0 = new float[1];
      String string1 = StringUtils.join(floatArray0, 'L');
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals("0.0", string1);
      assertNotNull(string1);
      assertEquals(1, floatArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      Supplier<String> supplier0 = (Supplier<String>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      doReturn("XeP dZ 01E").when(supplier0).get();
      String string2 = StringUtils.getIfBlank("", supplier0);
      assertEquals("XeP dZ 01E", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      Class<Locale.FilteringMode> class0 = Locale.FilteringMode.class;
      EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.noneOf(class0);
      assertNotNull(enumSet0);
      assertEquals(0, enumSet0.size());
      
      EnumSet<Locale.FilteringMode> enumSet1 = enumSet0.clone();
      assertNotNull(enumSet1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(0, enumSet0.size());
      assertEquals(0, enumSet1.size());
      assertTrue(enumSet1.equals((Object)enumSet0));
      
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      boolean boolean1 = enumSet1.add(locale_FilteringMode0);
      assertTrue(boolean1);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertEquals(0, enumSet0.size());
      assertEquals(1, enumSet1.size());
      assertFalse(enumSet0.contains(locale_FilteringMode0));
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = enumSet0.add(locale_FilteringMode0);
      assertTrue(boolean2);
      assertNotSame(enumSet0, enumSet1);
      assertEquals(1, enumSet0.size());
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertTrue(enumSet0.equals((Object)enumSet1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      boolean boolean3 = enumSet1.add(locale_FilteringMode1);
      assertTrue(boolean3);
      assertNotSame(enumSet0, enumSet1);
      assertNotSame(enumSet1, enumSet0);
      assertNotSame(locale_FilteringMode1, locale_FilteringMode0);
      assertEquals(1, enumSet0.size());
      assertEquals(2, enumSet1.size());
      assertTrue(enumSet0.contains(locale_FilteringMode0));
      assertFalse(enumSet0.contains(locale_FilteringMode1));
      assertTrue(enumSet1.contains(locale_FilteringMode0));
      assertFalse(enumSet0.equals((Object)enumSet1));
      assertFalse(enumSet1.equals((Object)enumSet0));
      assertFalse(locale_FilteringMode1.equals((Object)locale_FilteringMode0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      String string3 = StringUtils.replaceOnce("", "XeP dZ 01E", "E,");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = StringUtils.removeEndIgnoreCase("Object varargs must not be null", "");
      assertEquals("Object varargs must not be null", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      
      String string5 = StringUtils.reverse("E,");
      assertEquals(",E", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      
      boolean boolean4 = StringUtils.isBlank("0.0");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      char[] charArray0 = new char[0];
      String string0 = StringUtils.valueOf(charArray0);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, charArray0.length);
      
      char[] charArray1 = new char[1];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '}';
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "AT2j*ZwJ;]CFDB", charArray1);
      assertArrayEquals(new char[] {'}'}, charArray1);
      assertFalse(boolean0);
      assertNotSame(charArray1, charArray0);
      assertEquals(1, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      
      String string1 = StringUtils.substringBefore("S^HyCvi4]", "...");
      assertEquals("S^HyCvi4]", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrap("org.apache.commons.lang3.exception.CloneFailedException", "...");
      assertEquals("...org.apache.commons.lang3.exception.CloneFailedException...", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      boolean boolean1 = StringUtils.equals((CharSequence) "...org.apache.commons.lang3.exception.CloneFailedException...", (CharSequence) "Strings must not be nullStrings must not be null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.removeEndIgnoreCase("y\"XKy~9%", "");
      assertEquals("y\"XKy~9%", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Strings must not be nullStrings must not be null", (CharSequence) "y\"XKy~9%");
      assertEquals(48, int0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("`I$0zDe;~*?lebR~m", "Search and Replace array lengths don't match: ", 48);
      assertNotNull(stringArray0);
      assertEquals(6, stringArray0.length);
      
      String string4 = StringUtils.normalizeSpace("G@");
      assertEquals("G@", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = StringUtils.upperCase(" yYInvalid locale format: ", (Locale) null);
      assertEquals(" YYINVALID LOCALE FORMAT: ", string0);
      assertNotNull(string0);
      
      Iterator<CharBuffer> iterator0 = (Iterator<CharBuffer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iterator0).hasNext();
      doReturn((CharBuffer) null).when(iterator0).next();
      String string1 = StringUtils.join(iterator0, ',');
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) " yYInvalid locale format: ");
      assertEquals(26, int0);
      
      String string2 = StringUtils.abbreviate("60.?3maocm|<FfVb!+c", "wsP<.:,", 26);
      assertEquals("60.?3maocm|<FfVb!+c", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 26;
      doubleArray0[1] = (double) 26;
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = ',';
      charArray0[2] = ',';
      int int1 = StringUtils.indexOfAny((CharSequence) "60.?3maocm|<FfVb!+c", charArray0);
      assertArrayEquals(new char[] {',', ',', ','}, charArray0);
      assertEquals((-1), int1);
      assertEquals(3, charArray0.length);
      assertFalse(int1 == int0);
      
      Vector<Integer> vector0 = null;
      try {
        vector0 = new Vector<Integer>((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("TA=", "2@5{FtZas!");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      char[] charArray0 = new char[0];
      String string0 = StringUtils.join(charArray0, ']', 1339, (-1388));
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, charArray0.length);
      
      boolean boolean0 = StringUtils.equalsAnyIgnoreCase("", stringArray0);
      assertFalse(boolean0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.wrap("", ']');
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      short[] shortArray0 = new short[3];
      shortArray0[0] = (short) (-3121);
      String string2 = StringUtils.repeat("2@5{FtZas!", 0);
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      
      String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase("2@5{FtZas!");
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      boolean boolean1 = StringUtils.isAlphanumeric("TA=");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string3 = StringUtils.capitalize((String) null);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = StringUtils.chomp("}$+HxIq|qpyO8*");
      assertEquals("}$+HxIq|qpyO8*", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.chomp("}q&=L$_g{0");
      assertEquals("}q&=L$_g{0", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.join((short[]) null, '_');
      assertNull(string2);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = StringUtils.replaceIgnoreCase("dto", "dto", "dto");
      assertEquals("dto", string0);
      assertNotNull(string0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)82;
      String string1 = StringUtils.normalizeSpace("]?1:{cn'");
      assertEquals("]?1:{cn'", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isAlpha("dto");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = StringUtils.rightPad("B", (-1113));
      assertEquals("B", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "B", (CharSequence) "B");
      assertEquals(0, int0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      boolean boolean0 = StringUtils.endsWithAny("B", charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(0, charSequenceArray0.length);
      
      String string1 = StringUtils.defaultIfEmpty("e/rZ'1", "B");
      assertEquals("e/rZ'1", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isAlpha("B");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte) (-12);
      byteArray0[2] = (byte) (-11);
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte) (-45);
      byteArray0[5] = (byte)91;
      byteArray0[6] = (byte)97;
      // Undeclared exception!
      try { 
        Charset.forName("&O=^q2cejCS(2E$P");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // &O=^q2cejCS(2E$P
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = StringUtils.stripEnd("FF#>miu", "FF#>miu");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      String string1 = locale0.getDisplayScript();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(string1.equals((Object)string0));
      
      String string2 = locale0.getScript();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals(0, int0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = locale0.toLanguageTag();
      assertEquals("zh-CN", string3);
      assertNotNull(string3);
      assertNotSame(locale0, locale1);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertNotSame(locale1, locale0);
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains(""));
      assertFalse(locale1.equals((Object)locale0));
      
      String string4 = locale0.getDisplayCountry(locale1);
      assertEquals("Chine", string4);
      assertNotNull(string4);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.getVariant());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr_CA", locale1.toString());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      
      int int1 = (-1083);
      int int2 = StringUtils.lastIndexOf((CharSequence) "", 0, (-1083));
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      char char0 = '*';
      String string5 = StringUtils.unwrap("8", '*');
      assertEquals("8", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int3 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals((-1), int3);
      assertEquals(0, charSequenceArray0.length);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      
      boolean boolean1 = StringUtils.isAllLowerCase("FF#>miu");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int4 = 48;
      // Undeclared exception!
      try { 
        StringUtils.abbreviate("8", "8", 48, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Minimum abbreviation width is 2
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = StringUtils.stripEnd("FF#>miu", "FF#>miu");
      assertEquals("", string0);
      assertNotNull(string0);
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      boolean boolean0 = locale0.hasExtensions();
      assertFalse(boolean0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      String string1 = locale0.getDisplayScript();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertTrue(string1.equals((Object)string0));
      
      String string2 = locale0.getScript();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.getFuzzyDistance("", "", locale0);
      assertEquals(0, int0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      Locale locale1 = Locale.CANADA_FRENCH;
      assertNotNull(locale1);
      assertNotSame(locale1, locale0);
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fr_CA", locale1.toString());
      assertFalse(locale1.equals((Object)locale0));
      
      String string3 = StringUtils.substringBeforeLast("", "");
      assertEquals("", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      
      Set<String> set0 = locale1.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertNotSame(locale1, locale0);
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fr_CA", locale1.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(set0.contains("FF#>miu"));
      assertFalse(locale1.equals((Object)locale0));
      
      String string4 = locale0.getDisplayCountry(locale1);
      assertEquals("Chine", string4);
      assertNotNull(string4);
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("CAN", locale1.getISO3Country());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("CA", locale1.getCountry());
      assertEquals("fr_CA", locale1.toString());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      
      int int1 = StringUtils.lastIndexOf((CharSequence) "", 0, (-1083));
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string5 = StringUtils.unwrap("8", '*');
      assertEquals("8", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      CharSequence[] charSequenceArray0 = new CharSequence[0];
      int int2 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0);
      assertEquals((-1), int2);
      assertEquals(0, charSequenceArray0.length);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean1 = StringUtils.isAllLowerCase("FF#>miu");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String string6 = StringUtils.repeat("'0BQqy$V", 0);
      assertEquals("", string6);
      assertNotNull(string6);
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertTrue(string6.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      String string0 = "ws";
      String string1 = " ";
      boolean boolean0 = StringUtils.isWhitespace("");
      assertTrue(boolean0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'c';
      charArray0[3] = 'c';
      charArray0[4] = 'c';
      charArray0[5] = 'c';
      String string2 = StringUtils.unwrap("", "");
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean1 = StringUtils.containsOnly((CharSequence) "ws", charArray0);
      assertArrayEquals(new char[] {'c', '\u0000', '\u0000', 'c', 'c', 'c'}, charArray0);
      assertFalse(boolean1);
      assertEquals(6, charArray0.length);
      assertFalse(boolean1 == boolean0);
      
      String string3 = StringUtils.rightPad("E1qdp@j7c[K;.T[z", (int) 'c');
      assertEquals("E1qdp@j7c[K;.T[z                                                                                  ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean2 = StringUtils.isWhitespace(" ");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      String string4 = StringUtils.stripEnd("E1qdp@j7c[K;.T[z", " ");
      assertEquals("E1qdp@j7c[K;.T[z", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.replaceOnce("E1qdp@j7c[K;.T[z", "", "");
      assertEquals("E1qdp@j7c[K;.T[z", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      
      boolean boolean3 = StringUtils.equals((CharSequence) "E1qdp@j7c[K;.T[z", (CharSequence) "E1qdp@j7c[K;.T[z                                                                                  ");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) stringArray0);
      assertEquals((-1), int0);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        StringUtils.replaceAll("E1qdp@j7c[K;.T[z", "E1qdp@j7c[K;.T[z", "");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 16
         // E1qdp@j7c[K;.T[z
         //                 ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = StringUtils.substringBetween("Isd/(=d", (String) null, "hh)$$nS+QM_AV#(h&b");
      assertNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[2];
      boolean boolean0 = StringUtils.containsAnyIgnoreCase((CharSequence) null, charSequenceArray0);
      assertFalse(boolean0);
      assertEquals(2, charSequenceArray0.length);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'e';
      double[] doubleArray0 = new double[0];
      String string1 = StringUtils.join(doubleArray0, 'y');
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, doubleArray0.length);
      
      int int0 = StringUtils.indexOfDifference(charSequenceArray0);
      assertEquals((-1), int0);
      assertEquals(2, charSequenceArray0.length);
      
      String string2 = StringUtils.remove("ch", 'V');
      assertEquals("ch", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "The character ";
      String[] stringArray0 = StringUtils.stripAll((String[]) null);
      assertNull(stringArray0);
      
      String string0 = StringUtils.remove("The character ", (String) null);
      assertEquals("The character ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphanumericSpace(charSequenceArray0[0]);
      assertTrue(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      boolean boolean1 = StringUtils.isAlphaSpace("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfDifference((CharSequence) "K}L|pk", (CharSequence) "");
      assertEquals(0, int0);
      
      String string1 = StringUtils.replaceChars("pQTIKg1>C", (String) null, "!B^.<oa");
      assertEquals("pQTIKg1>C", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.wrapIfMissing("!B^.<oa", 'V');
      assertEquals("V!B^.<oaV", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int1 = StringUtils.indexOf((CharSequence) "The character ", (CharSequence) "", 1887);
      assertEquals(14, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = StringUtils.stripStart("!87yP[iTUYpRQJ1D>V", "!87yP[iTUYpRQJ1D>V");
      assertEquals("", string0);
      assertNotNull(string0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[4];
      charSequenceArray0[0] = (CharSequence) "!87yP[iTUYpRQJ1D>V";
      charSequenceArray0[1] = (CharSequence) "!87yP[iTUYpRQJ1D>V";
      String string1 = StringUtils.replaceOnce("", "!87yP[iTUYpRQJ1D>V", "The Array must not be null");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      charSequenceArray0[2] = (CharSequence) "";
      charSequenceArray0[3] = (CharSequence) "!87yP[iTUYpRQJ1D>V";
      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);
      assertEquals(0, int0);
      assertEquals(4, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "The Array must not be null", (char[]) null);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      String string2 = StringUtils.leftPad("", (-579));
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 427.4801340859555;
      doubleArray0[1] = (double) (-579);
      doubleArray0[2] = 2437.08;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-579);
      doubleArray0[6] = (double) 0;
      String string3 = StringUtils.join(doubleArray0, 'Z', 2, (-579));
      assertArrayEquals(new double[] {427.4801340859555, (-579.0), 2437.08, (-1.0), 0.0, (-579.0), 0.0}, doubleArray0, 0.01);
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals(7, doubleArray0.length);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitByCharacterType("m{6,JE,@ \n");
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) '$';
      doubleArray0[1] = (double) 's';
      doubleArray0[0] = (double) '$';
      String string0 = StringUtils.join(doubleArray0, 'c');
      assertArrayEquals(new double[] {36.0, 115.0, 0.0}, doubleArray0, 0.01);
      assertEquals("36.0c115.0c0.0", string0);
      assertNotNull(string0);
      assertEquals(3, doubleArray0.length);
      
      String string1 = StringUtils.remove("GnrD7", 'c');
      assertEquals("GnrD7", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(8, stringArray0.length);
      
      String string2 = StringUtils.overlay("GnrD7", "GnrD7", 0, 'c');
      assertEquals("GnrD7", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      
      String string3 = StringUtils.mid("E,", 0, 0);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.rotate("GnrD7", 0);
      assertEquals("GnrD7", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      
      String string5 = locale0.toLanguageTag();
      assertEquals("ja", string5);
      assertNotNull(string5);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.upperCase("8", locale0);
      assertEquals("8", string6);
      assertNotNull(string6);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.toString());
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "=wsX':ZC'iM>by]";
      String string0 = StringUtils.joinWith("=wsX':ZC'iM>by]", charSequenceArray0);
      assertEquals("=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]", string0);
      assertNotNull(string0);
      assertEquals(6, charSequenceArray0.length);
      
      charSequenceArray0[2] = (CharSequence) "=wsX':ZC'iM>by]";
      charSequenceArray0[3] = (CharSequence) "=wsX':ZC'iM>by]";
      charSequenceArray0[5] = (CharSequence) "=wsX':ZC'iM>by]";
      String string1 = StringUtils.prependIfMissingIgnoreCase("=wsX':ZC'iM>by]", "=wsX':ZC'iM>by]", charSequenceArray0);
      assertEquals("=wsX':ZC'iM>by]", string1);
      assertNotNull(string1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.appendIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowErroAborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError", charSequenceArray0[3], charSequenceArray0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowErroAborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError=wsX':ZC'iM>by]", string2);
      assertNotNull(string2);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      int int0 = StringUtils.lastIndexOf(charSequenceArray0[3], charSequenceArray0[0], 3257);
      assertEquals(0, int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string3 = StringUtils.substringAfter("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowErroAborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError=wsX':ZC'iM>by]", "Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowErroAborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError=wsX':ZC'iM>by]");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      boolean boolean0 = StringUtils.contains(charSequenceArray0[4], 0);
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string4 = StringUtils.rotate("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowErroAborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError=wsX':ZC'iM>by]", 0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowErroAborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError=wsX':ZC'iM>by]", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1718;
      shortArray0[1] = (short)322;
      shortArray0[2] = (short)56;
      shortArray0[3] = (short)255;
      String string5 = StringUtils.join(shortArray0, 'K', 16, 3);
      assertArrayEquals(new short[] {(short)1718, (short)322, (short)56, (short)255}, shortArray0);
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(4, shortArray0.length);
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      
      String string6 = StringUtils.removeEnd("", "Array element ");
      assertEquals("", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string1));
      assertTrue(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = null;
      String string1 = StringUtils.trim((String) null);
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        StringUtils.truncate((String) null, (-1612));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxWith cannot be negative
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String string0 = StringUtils.stripAccents("m229");
      assertEquals("m229", string0);
      assertNotNull(string0);
      
      int int0 = StringUtils.indexOf((CharSequence) "m229", (CharSequence) "m229", 53);
      assertEquals((-1), int0);
      
      String string1 = StringUtils.replaceChars((String) null, "m229", "m229");
      assertNull(string1);
      
      String[] stringArray0 = new String[10];
      stringArray0[0] = "m229";
      stringArray0[1] = "m229";
      stringArray0[3] = "m229";
      stringArray0[4] = " ";
      stringArray0[5] = null;
      String string2 = "+0||'[14e<tJ]h)*R";
      stringArray0[6] = "+0||'[14e<tJ]h)*R";
      stringArray0[7] = "m229";
      stringArray0[8] = "m229";
      String[] stringArray1 = StringUtils.splitPreserveAllTokens(string1);
      assertNull(stringArray1);
      
      String string3 = StringUtils.capitalize("+0||'[14e<tJ]h)*R");
      assertEquals("+0||'[14e<tJ]h)*R", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      
      String string4 = StringUtils.wrapIfMissing((String) null, 'x');
      assertNull(string4);
      
      String[] stringArray2 = StringUtils.splitPreserveAllTokens("E,", " ", (-1));
      assertNotNull(stringArray2);
      assertNotSame(stringArray2, stringArray0);
      assertEquals(1, stringArray2.length);
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[4] = '(';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = 'x';
      int int2 = StringUtils.indexOfAnyBut((CharSequence) "m229", charArray0);
      assertArrayEquals(new char[] {'(', '\u0000', '(', '(', 'x'}, charArray0);
      assertEquals(0, int2);
      assertEquals(5, charArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      try { 
        StringUtils.getBytes("m229", "*sx");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = '}';
      charArray0[2] = '&';
      charArray0[3] = 'q';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertArrayEquals(new char[] {'\'', '}', '&', 'q'}, charArray0);
      assertNotNull(charBuffer0);
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("'}&q", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.length());
      assertEquals(4, charArray0.length);
      
      Iterator<CharBuffer> iterator0 = (Iterator<CharBuffer>) mock(Iterator.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, true, false).when(iterator0).hasNext();
      doReturn(charBuffer0, charBuffer0).when(iterator0).next();
      String string0 = StringUtils.join(iterator0, ',');
      assertArrayEquals(new char[] {'\'', '}', '&', 'q'}, charArray0);
      assertEquals("'}&q,'}&q", string0);
      assertNotNull(string0);
      assertEquals(4, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("'}&q", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(4, charBuffer0.length());
      assertEquals(4, charArray0.length);
      
      double[] doubleArray0 = new double[3];
      char[] charArray1 = new char[3];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = ',';
      charArray1[1] = ',';
      charArray1[2] = ',';
      String string1 = StringUtils.removeEnd("'}&q,'}&q", "W`n<dJE$ ull");
      assertEquals("'}&q,'}&q", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "The character ";
      CharSequence[] charSequenceArray0 = new CharSequence[1];
      charSequenceArray0[0] = (CharSequence) "The character ";
      String string1 = "K2\"L6n<+q";
      String string2 = StringUtils.substringBefore("K2\"L6n<+q", "', has a length less than 2");
      assertEquals("K2\"L6n<+q", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      boolean boolean0 = StringUtils.equals((CharSequence) "K2\"L6n<+q", charSequenceArray0[0]);
      assertFalse(boolean0);
      assertEquals(1, charSequenceArray0.length);
      
      int int0 = StringUtils.getLevenshteinDistance(charSequenceArray0[0], (CharSequence) "', has a length less than 2");
      assertEquals(22, int0);
      assertEquals(1, charSequenceArray0.length);
      
      int int1 = 1645;
      String string3 = "#t;rI9'.J^";
      // Undeclared exception!
      StringUtils.leftPad("#t;rI9'.J^", 65536, "al9[&5)y<c4Kvpxx_C");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = StringUtils.lowerCase("T3},@qs");
      assertEquals("t3},@qs", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.capitalize("AT2j*ZwJ;]CFDB");
      assertEquals("AT2j*ZwJ;]CFDB", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.isBlank("T3},@qs");
      assertFalse(boolean0);
      
      String string2 = StringUtils.swapCase("AT2j*ZwJ;]CFDB");
      assertEquals("at2J*zWj;]cfdb", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = StringUtils.substringBetween("AT2j*ZwJ;]CFDB", "AT2j*ZwJ;]CFDB", "{!pi}^Qg!fvEwEV");
      assertNull(string3);
      
      String string4 = StringUtils.leftPad(">fr", 2444);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      String string5 = StringUtils.repeat("AT2j*ZwJ;]CFDB", "t3},@qs", 2444);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.lowerCase("k1_d2]qljg=i&D>");
      assertEquals("k1_d2]qljg=i&d>", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      
      String string7 = StringUtils.leftPad("!", 2444);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string0));
      
      boolean boolean1 = StringUtils.isNumeric("at2J*zWj;]cfdb");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      PriorityQueue<Object> priorityQueue0 = new PriorityQueue<Object>();
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("AT2j*ZwJ;]CFDB"));
      
      Iterator<Object> iterator0 = priorityQueue0.iterator();
      assertNotNull(iterator0);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("AT2j*ZwJ;]CFDB"));
      
      String string8 = StringUtils.join(iterator0, string4);
      assertEquals("", string8);
      assertNotNull(string8);
      assertEquals(0, priorityQueue0.size());
      assertFalse(priorityQueue0.contains("AT2j*ZwJ;]CFDB"));
      assertFalse(string4.equals((Object)string7));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string5));
      assertFalse(string4.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string4));
      
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) "at2J*zWj;]cfdb";
      objectArray0[1] = (Object) ">fr";
      objectArray0[2] = (Object) "k1_d2]qljg=i&D>";
      objectArray0[3] = (Object) "k1_d2]qljg=i&d>";
      objectArray0[4] = (Object) "{!pi}^Qg!fvEwEV";
      objectArray0[5] = (Object) "Yx";
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[6] = object0;
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      objectArray0[7] = object1;
      String string9 = StringUtils.join(objectArray0, 'V', 3184, (-661));
      assertEquals("", string9);
      assertNotNull(string9);
      assertEquals(8, objectArray0.length);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string4));
      
      String string10 = StringUtils.upperCase("at2J*zWj;]cfdb");
      assertEquals("AT2J*ZWJ;]CFDB", string10);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string4));
      assertFalse(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      assertFalse(string10.equals((Object)string0));
      assertFalse(string10.equals((Object)string6));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) string5, 1242);
      assertEquals((-1), int0);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string10));
      assertFalse(string5.equals((Object)string8));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string9));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string7));
      assertFalse(string5.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = StringUtils.replaceChars("|S7#uc", "|S7#uc", "|S7#uc");
      assertEquals("|S7#uc", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.rightPad("d\"|<_shX=0+8#*Ckc,", 1, "|S7#uc");
      assertEquals("d\"|<_shX=0+8#*Ckc,", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      boolean boolean0 = StringUtils.containsOnly((CharSequence) "d\"|<_shX=0+8#*Ckc,", "vy");
      assertFalse(boolean0);
      
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "Locale must not be null";
      charSequenceArray0[1] = (CharSequence) "|S7#uc";
      charSequenceArray0[2] = (CharSequence) "|S7#uc";
      charSequenceArray0[3] = (CharSequence) "|S7#uc";
      charSequenceArray0[4] = (CharSequence) "vy";
      charSequenceArray0[5] = (CharSequence) "ZSOE";
      String string2 = StringUtils.appendIfMissingIgnoreCase("Ma", "_yoJ2Vi_/v", charSequenceArray0);
      assertEquals("Ma_yoJ2Vi_/v", string2);
      assertNotNull(string2);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.overlay("Strings%must not be nullStrings must not bK null vs ", "Strings%must not be nullStrings must not bK null vs ", 1, (-2048));
      assertEquals("Strings%must not be nullStrings must not bK null vs trings%must not be nullStrings must not bK null vs ", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.rotate("5!", 321);
      assertEquals("!5", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      String[] stringArray0 = StringUtils.split("Strings%must not be nullStrings must not bK null vs trings%must not be nullStrings must not bK null vs ", '(');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string5 = StringUtils.normalizeSpace("Strings%must not be nullStrings must not bK null vs trings%must not be nullStrings must not bK null vs ");
      assertEquals("Strings%must not be nullStrings must not bK null vs trings%must not be nullStrings must not bK null vs", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      
      String string6 = StringUtils.unwrap("Ma_yoJ2Vi_/v", '-');
      assertEquals("Ma_yoJ2Vi_/v", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertTrue(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = StringUtils.remove("The character ", (String) null);
      assertEquals("The character ", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isAlphaSpace("The character ");
      assertTrue(boolean0);
      
      boolean boolean1 = StringUtils.contains((CharSequence) null, (CharSequence) "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "The character ", (CharSequence) "");
      assertEquals(0, int0);
      
      String[] stringArray0 = StringUtils.split(" g=4^*sY", 'O');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.deleteWhitespace("}h3.cRJ}Mes[5'zlkHn");
      assertEquals("}h3.cRJ}Mes[5'zlkHn", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("QMHG5`g=mE0m-&(", "H8", 1089);
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) stringArray0);
      assertEquals(0, int0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.chop("r/MwI'4Yc?NEA+");
      assertEquals("r/MwI'4Yc?NEA", string0);
      assertNotNull(string0);
      
      String string1 = StringUtils.substringAfterLast("<edq>BXO", "t\"K T9N/Oa");
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.repeat('', (-47));
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>(comparator0);
      assertNotNull(priorityQueue0);
      assertEquals(0, priorityQueue0.size());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(set0.contains("<edq>BXO"));
      
      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(set0);
      assertNotNull(arrayDeque0);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(set0.contains("<edq>BXO"));
      assertFalse(arrayDeque0.contains("<edq>BXO"));
      
      String string3 = StringUtils.join((Iterable<?>) arrayDeque0, '<');
      assertEquals("", string3);
      assertNotNull(string3);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(arrayDeque0.isEmpty());
      assertEquals(0, arrayDeque0.size());
      assertFalse(set0.contains("<edq>BXO"));
      assertFalse(arrayDeque0.contains("<edq>BXO"));
      assertFalse(string3.equals((Object)string0));
      
      int[] intArray0 = new int[0];
      String string4 = StringUtils.join(intArray0, '&');
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals("", string4);
      assertNotNull(string4);
      assertEquals(0, intArray0.length);
      assertFalse(string4.equals((Object)string0));
      
      String string5 = StringUtils.defaultString("4j5-;\u0013");
      assertEquals("4j5-;\u0013", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = StringUtils.compare("\n", "\n");
      assertEquals(0, int0);
      
      String string0 = StringUtils.removeStartIgnoreCase("\n", "\n");
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Va&=", "Minimum abbreviation width with offset is %d");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string1 = StringUtils.chomp("", "0_ {,gmS9");
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      
      String string2 = StringUtils.removeFirst("", "null/empty items");
      assertEquals("", string2);
      assertNotNull(string2);
      assertTrue(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      String string3 = StringUtils.upperCase("ch");
      assertEquals("CH", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.overlay("Qa[6K", "b}F:H09m$8m}M.)ii{", 0, 0);
      assertEquals("b}F:H09m$8m}M.)ii{Qa[6K", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      
      String string5 = StringUtils.removeFirst("", "Locale must not be null");
      assertEquals("", string5);
      assertNotNull(string5);
      assertTrue(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string4));
      assertTrue(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      
      String string6 = StringUtils.stripAccents("\n");
      assertEquals("\n", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string0));
      
      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "\n", 2);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "ch", "");
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      String string7 = StringUtils.substring("", 2);
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string3));
      assertTrue(string7.equals((Object)string0));
      assertTrue(string7.equals((Object)string5));
      assertFalse(string7.equals((Object)string4));
      assertFalse(string7.equals((Object)string6));
      assertTrue(string7.equals((Object)string2));
      assertTrue(string7.equals((Object)string1));
      
      boolean boolean0 = StringUtils.containsWhitespace("Va&=");
      assertFalse(boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("Va&=");
      assertArrayEquals(new int[] {86, 97, 38, 61}, intArray0);
      assertNotNull(intArray0);
      assertEquals(4, intArray0.length);
      
      boolean boolean1 = StringUtils.isNotEmpty("null/empty items");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[0];
      String string8 = StringUtils.join(doubleArray0, '-', 1724, 64);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("", string8);
      assertNotNull(string8);
      assertEquals(0, doubleArray0.length);
      assertTrue(string8.equals((Object)string1));
      assertTrue(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string4));
      assertTrue(string8.equals((Object)string0));
      assertTrue(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string3));
      
      int int3 = StringUtils.indexOfAny((CharSequence) "", (String) null);
      assertEquals((-1), int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      String string9 = StringUtils.deleteWhitespace(";S1Strings must not be nullStrings must not be null");
      assertEquals(";S1StringsmustnotbenullStringsmustnotbenull", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string4));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string5));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string7));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[13];
      charSequenceArray0[0] = (CharSequence) "AT2j*ZwJ;]CFDB";
      charSequenceArray0[1] = (CharSequence) "AT2j*ZwJ;]CFDB";
      charSequenceArray0[2] = (CharSequence) "AT2j*ZwJ;]CFDB";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.atils", "<c`cj<IdI@L<ErD7");
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string0 = StringUtils.stripToNull("AT2j*ZwJ;]CFDB");
      assertEquals("AT2j*ZwJ;]CFDB", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("AT2j*ZwJ;]CFDB");
      assertFalse(boolean0);
      
      String string1 = "\\u";
      String string2 = StringUtils.overlay("Supplied value must be a valid byte literal between -32768 and 32767: [", string1, 921, 1361);
      assertEquals("Supplied value must be a valid byte literal between -32768 and 32767: [\\u", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = StringUtils.removeFirst("s EU{CaLS8Q'2L}Y+", "%H_nrTO8`Z#SN/IyW:S");
      assertEquals("s EU{CaLS8Q'2L}Y+", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", charSequenceArray0[2], (-2022));
      assertEquals((-1), int0);
      assertEquals(13, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "AT2j*ZwJ;]CFDB", "MB");
      assertEquals(13, int1);
      assertFalse(int1 == int0);
      
      String string4 = StringUtils.substring("s EU{CaLS8Q'2L}Y+", 28);
      assertEquals("", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      
      boolean boolean1 = StringUtils.containsWhitespace(string1);
      assertFalse(boolean1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("AT2j*ZwJ;]CFDB");
      assertNotNull(intArray0);
      assertEquals(14, intArray0.length);
      
      boolean boolean2 = StringUtils.isNotEmpty("%H_nrTO8`Z#SN/IyW:S");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "<c`cj<IdI@L<ErD7", "clone");
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      String string5 = StringUtils.deleteWhitespace("");
      assertEquals("", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string1));
      assertTrue(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[13];
      charSequenceArray0[0] = (CharSequence) "AT2j*ZwJ;]CFDB";
      charSequenceArray0[1] = (CharSequence) "AT2j*ZwJ;]CFDB";
      charSequenceArray0[2] = (CharSequence) "AT2j*ZwJ;]CFDB";
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("org.atils", "AT2j*ZwJ;]CFDB");
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string0 = StringUtils.stripToNull("AT2j*ZwJ;]CFDB");
      assertEquals("AT2j*ZwJ;]CFDB", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isNumericSpace("AT2j*ZwJ;]CFDB");
      assertFalse(boolean0);
      
      String string1 = "\\u";
      String string2 = StringUtils.removeFirst("s EU{CaLS8Q'2L}Y+", "%H_nrTO8`Z#SN/IyW:S");
      assertEquals("s EU{CaLS8Q'2L}Y+", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", charSequenceArray0[2], (-2022));
      assertEquals((-1), int0);
      assertEquals(13, charSequenceArray0.length);
      
      int int1 = StringUtils.indexOfAny((CharSequence) "AT2j*ZwJ;]CFDB", "MB");
      assertEquals(13, int1);
      assertFalse(int1 == int0);
      
      String string3 = StringUtils.substring("s EU{CaLS8Q'2L}Y+", 28);
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      boolean boolean1 = StringUtils.containsWhitespace(string1);
      assertFalse(boolean1);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertTrue(boolean1 == boolean0);
      
      int[] intArray0 = StringUtils.toCodePoints("AT2j*ZwJ;]CFDB");
      assertNotNull(intArray0);
      assertEquals(14, intArray0.length);
      
      int int2 = StringUtils.indexOfAny((CharSequence) "AT2j*ZwJ;]CFDB", "clone");
      assertEquals((-1), int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      String string4 = StringUtils.deleteWhitespace("");
      assertEquals("", string4);
      assertNotNull(string4);
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Supplier<CharSequence> supplier0 = (Supplier<CharSequence>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      String string0 = StringUtils.rotate("", 6);
      assertEquals("", string0);
      assertNotNull(string0);
      
      String[] stringArray0 = StringUtils.split("N", 'A');
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String string1 = StringUtils.LF;
      assertEquals("\n", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.lowerCase("", (Locale) null);
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      
      int int0 = StringUtils.ordinalIndexOf("N", "", 12);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "=wsX':ZC'iM>by]";
      String string0 = StringUtils.joinWith("=wsX':ZC'iM>by]", charSequenceArray0);
      assertEquals("=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]", string0);
      assertNotNull(string0);
      assertEquals(6, charSequenceArray0.length);
      
      charSequenceArray0[2] = (CharSequence) "=wsX':ZC'iM>by]";
      charSequenceArray0[3] = (CharSequence) "=wsX':ZC'iM>by]";
      charSequenceArray0[5] = (CharSequence) "=wsX':ZC'iM>by]";
      String string1 = StringUtils.prependIfMissingIgnoreCase("=wsX':ZC'iM>by]", "=wsX':ZC'iM>by]", charSequenceArray0);
      assertEquals("=wsX':ZC'iM>by]", string1);
      assertNotNull(string1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.appendIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowErroAborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError", charSequenceArray0[3], charSequenceArray0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowErroAborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError=wsX':ZC'iM>by]", string2);
      assertNotNull(string2);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOf(charSequenceArray0[1], charSequenceArray0[1], 3257);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      String string3 = StringUtils.substringAfter("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowErroAborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError=wsX':ZC'iM>by]", "Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowErroAborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError=wsX':ZC'iM>by]");
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      boolean boolean0 = StringUtils.contains(charSequenceArray0[4], (-1));
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string4 = StringUtils.rotate("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowErroAborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError=wsX':ZC'iM>by]", (-1));
      assertEquals("borting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowErroAborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError=wsX':ZC'iM>by]A", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1718;
      shortArray0[1] = (short)322;
      shortArray0[2] = (short)56;
      shortArray0[3] = (short)255;
      String string5 = StringUtils.join(shortArray0, 'K', 16, 3);
      assertArrayEquals(new short[] {(short)1718, (short)322, (short)56, (short)255}, shortArray0);
      assertEquals("", string5);
      assertNotNull(string5);
      assertEquals(4, shortArray0.length);
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string3));
      
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "'Oh}wv%IX=");
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      
      int int1 = StringUtils.ordinalIndexOf(charSequenceArray0[3], charSequenceArray0[3], 3);
      assertEquals((-1), int1);
      assertEquals(6, charSequenceArray0.length);
      assertTrue(int1 == int0);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("'@:I8g)", "s EU{CaLS'2L}Y+", 256);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      CharSequence[] charSequenceArray0 = new CharSequence[6];
      charSequenceArray0[0] = (CharSequence) "=wsX':ZC'iM>by]";
      String string0 = StringUtils.joinWith("=wsX':ZC'iM>by]", charSequenceArray0);
      assertEquals("=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]=wsX':ZC'iM>by]", string0);
      assertNotNull(string0);
      assertEquals(6, charSequenceArray0.length);
      
      charSequenceArray0[2] = (CharSequence) "=wsX':ZC'iM>by]";
      charSequenceArray0[3] = (CharSequence) "=wsX':ZC'iM>by]";
      charSequenceArray0[5] = (CharSequence) "=wsX':ZC'iM>by]";
      String string1 = StringUtils.prependIfMissingIgnoreCase("=wsX':ZC'iM>by]", "=wsX':ZC'iM>by]", charSequenceArray0);
      assertEquals("=wsX':ZC'iM>by]", string1);
      assertNotNull(string1);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string1.equals((Object)string0));
      
      String string2 = StringUtils.appendIfMissing("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowErroAborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError", charSequenceArray0[3], charSequenceArray0);
      assertEquals("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowErroAborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError=wsX':ZC'iM>by]", string2);
      assertNotNull(string2);
      assertEquals(6, charSequenceArray0.length);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      int int0 = StringUtils.indexOf(charSequenceArray0[1], charSequenceArray0[1], 3257);
      assertEquals((-1), int0);
      assertEquals(6, charSequenceArray0.length);
      
      boolean boolean0 = StringUtils.contains(charSequenceArray0[4], (-1));
      assertFalse(boolean0);
      assertEquals(6, charSequenceArray0.length);
      
      String string3 = StringUtils.rotate("Aborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowErroAborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError=wsX':ZC'iM>by]", (-1));
      assertEquals("borting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowErroAborting to protect against StackOverflowError - output of one loop is the input of anotherAborting to protect against StackOverflowError=wsX':ZC'iM>by]A", string3);
      assertNotNull(string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      
      short[] shortArray0 = new short[4];
      shortArray0[0] = (short)1718;
      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("YXJOFPXzaF\"G#_=c1(V", (String) null);
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = StringUtils.splitByWholeSeparator("=wsX':ZC'iM>by]", "sx6G1C", 256);
      assertNotNull(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      String string4 = StringUtils.uncapitalize("Cannot store ");
      assertEquals("cannot store ", string4);
      assertNotNull(string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      String string0 = StringUtils.getCommonPrefix((String[]) null);
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = StringUtils.isMixedCase("");
      assertFalse(boolean0);
      
      String string1 = StringUtils.rightPad("", 34, "");
      assertEquals("                                  ", string1);
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      
      int int0 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int0);
      
      String string2 = "\\u";
      String string3 = StringUtils.center(string2, (-1543));
      assertEquals("\\u", string3);
      assertNotNull(string3);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      
      String string4 = StringUtils.abbreviate((String) null, "", (-1), 999);
      assertNull(string4);
      
      String string5 = StringUtils.LF;
      assertEquals("\n", string5);
      assertNotNull(string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      
      boolean boolean1 = StringUtils.contains((CharSequence) "\n", 57);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      
      String string6 = StringUtils.wrapIfMissing("x", 'F');
      assertEquals("FxF", string6);
      assertNotNull(string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      
      String string7 = StringUtils.remove("", 'F');
      assertEquals("", string7);
      assertNotNull(string7);
      assertFalse(string7.equals((Object)string1));
      assertTrue(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertFalse(string7.equals((Object)string3));
      assertFalse(string7.equals((Object)string5));
      
      String[] stringArray0 = StringUtils.splitPreserveAllTokens("a", "org.apache.commons.lang3.RegExUtils", (-1543));
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
      
      String string8 = StringUtils.reverse("UThe character UUThe character U");
      assertEquals("U retcarahc ehTUU retcarahc ehTU", string8);
      assertNotNull(string8);
      assertFalse(string8.equals((Object)string2));
      assertFalse(string8.equals((Object)string5));
      assertFalse(string8.equals((Object)string7));
      assertFalse(string8.equals((Object)string1));
      assertFalse(string8.equals((Object)string6));
      assertFalse(string8.equals((Object)string0));
      assertFalse(string8.equals((Object)string3));
      
      int int2 = StringUtils.lastIndexOfAny("U retcarahc ehTUU retcarahc ehTU", (CharSequence[]) null);
      assertEquals((-1), int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      String string9 = StringUtils.rightPad(".msVeNY\"AmP7", (-1), "U retcarahc ehTUU retcarahc ehTU");
      assertEquals(".msVeNY\"AmP7", string9);
      assertNotNull(string9);
      assertFalse(string9.equals((Object)string1));
      assertFalse(string9.equals((Object)string2));
      assertFalse(string9.equals((Object)string6));
      assertFalse(string9.equals((Object)string0));
      assertFalse(string9.equals((Object)string8));
      assertFalse(string9.equals((Object)string3));
      assertFalse(string9.equals((Object)string7));
      assertFalse(string9.equals((Object)string5));
      
      boolean boolean2 = StringUtils.isAlphanumeric("\n");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string10 = StringUtils.substringBefore("", (-1));
      assertEquals("", string10);
      assertNotNull(string10);
      assertFalse(string10.equals((Object)string3));
      assertFalse(string10.equals((Object)string9));
      assertFalse(string10.equals((Object)string8));
      assertFalse(string10.equals((Object)string6));
      assertTrue(string10.equals((Object)string0));
      assertTrue(string10.equals((Object)string7));
      assertFalse(string10.equals((Object)string1));
      assertFalse(string10.equals((Object)string2));
      assertFalse(string10.equals((Object)string5));
      
      String string11 = StringUtils.chomp("\n");
      assertEquals("", string11);
      assertNotNull(string11);
      assertFalse(string11.equals((Object)string8));
      assertFalse(string11.equals((Object)string6));
      assertFalse(string11.equals((Object)string3));
      assertFalse(string11.equals((Object)string9));
      assertFalse(string11.equals((Object)string1));
      assertTrue(string11.equals((Object)string7));
      assertFalse(string11.equals((Object)string2));
      assertFalse(string11.equals((Object)string5));
      assertTrue(string11.equals((Object)string10));
      
      boolean boolean3 = StringUtils.isNumericSpace("org.apache.commons.lang3.RegExUtils");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      // Undeclared exception!
      try { 
        StringUtils.join(charArray0, '!', (-1), 160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.apache.commons.lang3.StringUtils", e);
      }
  }
}
